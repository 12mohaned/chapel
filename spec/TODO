* Make supported parameter and type queries for ranges, domains, and
  arrays more explicit in the spec.  Most users are only realizing
  that this is possible by reading example codes.  Maybe include as
  part of the "supported functions" sections for these concepts?

Added array.eltType to predefined methods on arrays
Added array.rank to predefined methods on arrays
Added domain.rank to predefined methods on domains
Added range.eltType to predefined methods on ranges
Added range.boundedType to predefined methods on ranges
Added range.stridable to predefined methods on ranges

* page 100: 1D arrays can be indexed with square brackets or parens;
  shouldn't any rank array be indexable with either?

This may be stated as is because A(1..3, 1..3) would currently return
the 2D slice rather than a 1D array whereas A[1..3, 1..3] returns the
same thing but it is correct in that case.  This is because we don't
use promotion to implement this (and we shouldn't) but that means the
square brackets are currently ignored.  I didn't make any changes here
yet.

* add a description of the scan operator and an example

There is a description.  I added an example.

* refactor/rewrite domain/array chapter (Brad)

* add description of local block

Is this a good idea?  I don't understand the semantic guarantees we
can make for this construct in the presence of optimizations...

* range chapter: more clearly state the default values of the range's
  types and parameters (is it currently stated at all?)

Added.

* describe how to specify a homogenous varargs type (e.g., x: int...n)?

These are orthogonal.  I added an example.

* add const intents to spec and define blank intents in terms of const
  intents (and "by reference" for arrays/domains):

  Steve's definition of const intents:
  - scalars: copy in and disallow modification
  - classes: copy reference in and disallow modification to reference
  - records: copy in and disallow modification
  - domains/arrays: pass by ref and disallow modification

  Brad's mental definition had been the same except:
  - records: pass by ref and disallow modification

  Joint definition of blank intents:
  - scalars, classes, records: same as blank:
  - domains/arrays: pass by ref and allow modification

* Does spec talk about declaring methods for types other than
  classes/records?

* List "by" among the overloaded operators?

* Document domain operators: translate, interior, exterior, etc.

* Document +, - on domains

* do we document that argument names must match for dynamic dispatch to apply?

* did we document the instantiation point of functions that are only
  instantiated via dynamic dispatch (14070)

From meeting when David was here Sep 2008
=========================================

cleanups
--------
* dom & arr chapter (bradc)
* iterators and promotion chapter -- unify
  - define "promoted expr"
* add compile-time machinery chapter
  - param stuff
  - type fns
  - comp warning/error
* distributions text
* memory consistency model text

updates/changes
---------------
* add 'delete'
* type functions
* rename 17.5.1
* rename "implicit modules"
* add # to operators list and expressions section
* range promotion
* ranges with opposite-signed strides slicing comment -- check for accuracy
* remove 1D cases from high/low function definitions
* tease "members" apart from "predefined fns" in ranges/domains/arrays
* arr.domain -- fix return type
* return iterators from functions text (or don't expose to user?)
* hoist Standard/Math m odules to initial section "implicitly included"
* describe the default distributions
* local block
* 17.8 top-level content

=========================================
