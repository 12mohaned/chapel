====================
Release Changes List
====================

*** Stopped at r15792 -- 2009-08-03 ***

===========
version 1.0
===========

Third public release of Chapel compiler, October 15, 2009

High-Level Themes:
------------------
- parallel forall loops over ranges and arithmetic domains by default
- improved support for distributions
- memory improvements:
  - plugged most compiler-introduced memory leaks in generated code
  - improved support for memory tracing and tracking (see README.executing)

Environment Changes:
--------------------

Changes to Chapel Language:
---------------------------
- removed implicit coercions from primitive types to strings to avoid confusion
- require accesses to variable x in module M using 'M.x' must follow a 'use M'
- any array variable can now be made to alias another via the => operator

Newly Implemented Features:
---------------------------
- added == and != for imag and complex types; added >, >=, <, <= for imag types
- improved support for and correctness of record and class destructors

Portability of code base:
-------------------------
- improved portability with respect to Intel icc/icpc v11.x
- removed assumptions that Sun compiler environments are as bad as ours are
- removed the makechpl script for Mac users because of portability issues
- improved support for the Cray compiler on XT systems (cray-xt-cray)
- reduced warnings for gcc > 4.3

Semantic Changes:
-----------------
- changed interpretation of method definitions on scalar types
  e.g., 'def int.foo()' now defines foo() for default-sized ints, not all ints
- improved flushing of writeln() statements to the file being written to
- added support for returning locally scoped arrays from variable functions

Syntactic/Naming Changes:
-------------------------

Compiler Changes:
-----------------
- improved support for slicing strided domains with strided/unstrided ranges

Third Party Changes:
--------------------

Runtime Library Changes:
------------------------
- added support for memory tracking for multi-locale executions

Documentation:
--------------
- improved the Ranges chapter of the language specification
- minor changes to the Lexical Structure and Expressions chapters of the spec

Example Codes:
--------------
- improved scalability of RA by privatizing the constant array m2

Standard Modules:
-----------------
- added printMemStat() to the standard Memory module; improved printMemTable()
- added start/stopVerboseMem[Here]() to the Memory module for tracing memory use
- improved reference counting of domains and arrays
- added initial support for a Cyclic distribution
- added very preliminary support for a Block-Cyclic distribution

Compiler Flags:
---------------

Generated Code Flags:
---------------------
- improved/changed the flags that support memory tracking (see README.executing)
- improved error messages to indicate the argument number
- added support for specifying configuration variables/constants without =
  e.g., you can now use './a.out --n 4' in addition to ./a.out --n=4'
- improved robustness of --numLocales flag

Bug Fixes/New Semantic Checks (for old semantics):
--------------------------------------------------
- improved error checking when assigning between ranges of different boundedness
- fixed a bug in which we called default constructrs by name
- fixed a bug in which we were accidentally supporting illegal parameter casts
- fixed a bug in which generic fields were incorrectly aliased in constructors
- added an error for using => on non-array types
- added an error for using (...x) on non-tuple types
- fixed deletion of list elements in List module

Error Message Improvements:
---------------------------

Compiler Analysis and Optimizations/Performance of Generated Code:
------------------------------------------------------------------
- improved performance of loops using Block distributions
- improved performance and reduced memory requirements for memory tracking
- vastly reduced amount of memory leaked due to compiler-allocated data

Compiler Performance and Cleanup:
---------------------------------

Cleanup of Generated Code:
--------------------------
- added information about compilation options to the generated code

Testing system:
---------------
- made parallel testint place -nl x flags at the end of the command line
- improved precedence of execution options specified via .execopts or EXECOPTS

Internal:
---------
- replaced uses of "[unsigned] long long" with [u]int64_t for sane portability
- some unification of reserved names, though more remains
- improved Chapel's launcher runtime interface to be more general
- added a mechanism for intercepting printf/fprintf calls if required
- Makefile refactorings working toward supporting parallel make
- refactored runtime/mem- directories to decrease duplicated code
- renamed runtime files to improve standardization, though more remains
- removed linked list pointers from memory tracking table
- reduced amount of runtime code linked into the launcher binary
- made the use of chpl_globals_registry more consistent across locales
- relaxed compiler assumptions about classes with the "data class" pragma
- added support for generating type and offset information for communications
- some initial work toward supporting CPU<->GPU computations in Chapel
- some initial work toward supporting execution on heterogeneous architectures
- removed "valid var" pragma
- made wrapper functions use blank intent rather than inheriting from wrappee
- changed strategy for determining when value types should be copied/destroyed
- made domain and array classes always have reindexed set to true by default

===========
version 0.9
===========

Second public release of Chapel compiler, April 16, 2009

High-Level Themes:
------------------
- multi-locale task parallelism
- very initial/limited support for data parallelism, distributed arrays
- improved stability, portability, and performance
- target audience: general public

Environment Changes:
--------------------
- added a script to print out set and inferred CHPL env vars
  (see util/printchplenv.pl)
- added support for the IBM xlc/xlC compilers by setting CHPL_*_COMPILER to ibm
- added an environment variable for naming a queue for the PBS launcher
  (see doc/platforms/README.xt-cle)
- added an environment variable for specifying #cores/locale to pbs/aprun
  (see doc/platforms/README.xt-cle)
- improved the logic for inferring host and target compilers for xt-cle

Changes to Chapel Language:
---------------------------
- added a typeToString() function for converting a static type into a string

Newly Implemented Features:
---------------------------
- added queries for task/thread counts per locale for CHPL_THREADS=pthreads
  (see doc/README.threads)
- added a printMemTable() routine to the Memory module for use in Chapel
  (see doc/README.executing)
- added a prototype multidimensional Block distribution: MultiBlockDist.chpl
  (see examples/tutorials/block2D.chpl)

Portability of code base:
-------------------------
- improved our general method of building and using GASNet for portability
- improved portability of GASNet configure + build steps for xt-cle
- improved the heuristic for setting GASNET_MAX_SEGSIZE for xt-cle
  (see doc/platforms/README.xt-cle)
- added initial support for IBM Power5 and Power6 systems
  (see doc/platforms/README.ibm)
- made flex and bison generate .cpp files rather than .c files for portability
- added capabilities to build Chapel on Macs using xcodebuild
  (see doc/platforms/README.macosx)
- added a -d option to our use of aprun in the aprun and pbs launchers
- removed the assumption that function pointers are identical between nodes

Syntactic/Naming Changes:
-------------------------
- disallowed identifiers that start with $
- removed compilerError and compilerWarning as keywords
- permitted binary and hex literals to be written using uppercase B/X
- renamed classes used for defining distributions

Runtime Library Changes:
------------------------
- added support for communication diagnostics and debugging
  (see doc/technotes/README.comm-diagnostics)

Documentation:
--------------
- added a new ACKNOWLEDGEMENTS file for financial and machine time support
- refactored the doc directory, pushing platform & technical notes into subdirs
- minor changes and improvements to the language specification
- minor edits to many of the README files
- updated the man page

Example Codes:
--------------
- pushed most top-level examples into tutorials/ and programs/ subdirectories
- added new tutorial examples for variables, ranges, classes, generic classes
- added new tutorial examples for timers and the prototype Block distribution
- changed quicksort to ensure levels beyond thresh do not re-enable parallelism

Compiler Flags:
---------------
- added a flag to disable/enable the remote value forwarding optimization

Bug Fixes/New Semantic Checks (for old semantics):
--------------------------------------------------
- fixed a number of spurious errors caused by how we were using GASNet
- fixed problems in how we terminated multithreaded GASNet programs
- added the ability for _chpl_comm_fork[_nb] to handle large arguments
- applied a GASNet patch that fixes an x86 alignment error
- fixed a bug which had previously limited execution to 1024 locales
- fixed a bug in which arrays could only store 2**31 elements
- eliminated a race condition when two tasks initialize the same module
- fixed a bug in which integer exponentiation was being computed using pow()
- fixed a bug in which slicing via .. could only be done for int(32) indices
- fixed a bug with Block1D domains that exceed the bounding box argument
- added a check to ensure that return statements are not used at module scope
- improved verification of formal/actual argument types
- fixed a bug in which long program names broke the PBS launcher
- fixed a bug with incorrectly spacing operators in generated code
- fixed Chapel error messages that referred to C's errno variable
- fixed a bug with accidentally shared state during parallel iterations
- fixed a bug related to reductions involving forall expressions

Error Message Improvements:
---------------------------
- added a runtime error message if the launcher binary can't find the _real one

Compiler Analysis and Optimizations/Performance of Generated Code:
------------------------------------------------------------------
- improved the correctness and effectiveness of remote value forwarding
- optimized performance of local communications
- optimized parallel iteration for Block1D to minimize remote references
- parallelized declarations of Block1D distributions, domains, and arrays
- optimized implementation of broadcasts used to initialize private data
- optimized away a thread per locale used for progress+termination
- improved reclamation of compiler-allocated memory
- improved the correctness and effectiveness of re-privatization optimizations
- privatized the default distribution object
- removed array/domain wrapper records

Compiler Performance and Cleanup:
---------------------------------
- removed hand-baked and occasionally incorrect integer types int32, int64
- fixed an infinite loop when inlining recursive iterators
- fixed cases in which compiler temps were used outside the variable's scope

Cleanup of Generated Code:
--------------------------
- removed redundant reference types from the generated code

Internal:
---------
- switched iterator implementation to use records rather than classes
- improved the naming of identifiers in the runtime and generated code
- removed compiler support for (undocumented) anonymous record types


===========
version 0.8
===========

First public release of Chapel compiler, November 14, 2008

High-Level Themes:
------------------
- multi-locale task parallelism
- improved task parallel correctness, features, thread management
- improved stability of core features
- very initial/limited support for data parallelism, distributed arrays
- target audience: general public

License Changes:
----------------
- switched from MIT to BSD license (see LICENSE)
- updated user agreement text (see AGREEMENT)

Environment Changes:
--------------------
- changed the identifier for the Cray XT platform from xt-cnl to xt-cle
- added a CHPL_MEM setting to select memory allocators (see README.chplenv)

Changes to Chapel Language:
---------------------------
- changed operator precedence for : vs. **, bitwise ops, reduce, !, unary +/-
- added destructors and a 'delete' keyword for destroying class instances
- removed open interval syntax in which [0..n) == 0..n-1
- added range operator # that counts a number of elements
  e.g., 0..#n == 0..n-1;  0.. by 2 #5 == 0, 2, 4, 6, 8
- added support for locale.name to query a locale's node name
- added support for overriding iterators within a class hierarchy
- added the capability to declare generic formals for gen. classes with defaults
  e.g., "x: range" expects a default range; "x: range(?)" expects a generic one
- added the ability to query argument types without naming the queried type
  e.g., "x: ?" rather than "x:?t"
- added support for +/- on (arith. domain, index) and + on (index, arith. domain)
- removed support for * and / on (range, integer) and - on (integer, range)
- added support for .clear() on arithmetic domain vars to reset to degenerate
- added .order() and .position() methods to ranges and domains
  e.g., (1..3).order(3) == 2;  ([1..3, 1..3]).position((2,1)) = (1,0)
- added support for variable-width boolean types
- added support for ~ on bool types
- initial support for a local block that asserts code requiring no communications
  e.g., on Locale(1) { const x: int;  local { x = x + 1 } }
- added initial support for leader/follower iterators supporting zippered foralls
- added initial support for distributed domains and arrays using a Block1d class
- added initial support for parallel reductions and forall expressions

Newly Implemented Features:
---------------------------
- added support for tuples of lvalues
  e.g., "for (a,b) in (A,B)" where A and B are arrays
- array initializer expressions can now be used for array class members
- added support for user-defined constructors for generic classes
- added support for overriding methods using subtype return types
- added support for querying the eltType of an array:
  e.g., def foo(A: [D] ?t) { ... }
- added support for .remove() on opaque domains
- added support for explicitly naming a function's module at the callsite
- added support for freeing compiler-introduced heap-allocated variables
- added initial support for freeing value type memory (records, arrays, domains)

Portability of code base:
-------------------------
- added support for the Cray CX1 platform running Linux  (see README.cx1-linux)
- improved level of support for the Cray XT platform (see README.xt-cle)

Semantic Changes:
-----------------
- disallowed calling a method on a nil reference as previously permitted
- changed the instantiation point for dynamically-dispatched methods
- permitted partially-bounded out-of-bounds degenerate ranges to be legal, empty
  e.g., var A: [1..10] real;  A[11..] == A[11..10] == a legal, empty slice of A
- on clauses are now evaluated for side effects when using the --local flag
- made single-statement sync statements create a new scope
- added support for param string comparisons, concatenation, and other ops
- added support for casting an integer to a string at compile time
- made the implicit 'setter' argument in var functions constant and foldable

Syntactic/Naming Changes:
-------------------------
- all non-compound single-statement conditionals/loops now require then/do
- functions now require a block statement unless they only contain a return stmt
- added support for a single-statement serial statement
  e.g., "serial test { foo(); }"  =>  "serial test do foo();"
- removed "opaque" from the list of reserved words--it is now a type like "int"
- 'distributed' clauses no longer require parenthesis

Compiler Changes:
-----------------
- the compiler now requires CHPL_HOME to be set
- added support for opaque types for use when interfacing with extern functions

Third Party Changes:
--------------------
- updated GASNet version to GASNet 1.12.0
- added support for using dlmalloc as a memory allocator

Runtime Library Changes:
------------------------
- all tasks in a cobegin are now set up before any start executing for pthreads
- made the task that starts a cobegin/coforall help execute the component tasks
- made the task that enters a sync statement help execute the component tasks
- added "launcher" capability to wrap job launch mechanism (see README.launcher)
- improved the thread-safety of declaring arrays over a domain

Documentation:
--------------
- improved the --help descriptions of --[no-] flags
- updated and improved the language specification
  - improved the specification of instantiated fns: visibility & point-of-inst.
- updated the various README files
- updated the man page

Example Codes:
--------------
- added a hello-multiloc example to run a "Hello, world!" on multiple locales
- improved hpcc codes from our 2008 HPC Challenge entry and added HPL (hpl.chpl)
- made the stream.chpl and ra.chpl benchmarks use Block1D-distributed domains
- added support for the stream and ra benchmarks to use multiple tasks per locale
- improved the verification step of stream.chpl to make it stronger
- improved the taskParallel example to reduce the likelihood of races

Standard Modules:
-----------------
- added a Norm module for computing vector and matrix norms
- added a Containers module for standard container classes
- added a day of week enumeration and getCurrentDayOfWeek() to the Time module
- fillRandom() calls in the Random module now fill Block1D arrays in parallel

Compiler Flags:
---------------
- improved the parsing of single-dash compiler flags to avoid common errors
  e.g., -abcd != -a -b -c -d; -hepl != -h -e -p -l
- renamed --no-expand-iterators-inline-opt to --[no-]inline-iterators
- renamed --no-single-loop-iterator-opt to --[no-]optimize-loop-iterators
- removed the --chplhome flag
- removed the --flow-analysis flag
- made all optimization control flags into --[no-] flags
- added --[no-]dead-code-elimination to turn dead-code elimination off/on
- added --[no-]live-analysis to turn live variable analysis off/on

Generated Code Flags:
---------------------
- added a -b/--blockreport flag to help debug deadlocked 1-locale programs
- added a -t/--taskreport flag to print a list of tasks for 1-locale programs
- made the -v flag print node names for locales on which code is executing
- made the -v flag print the commands used by the launcher

Bug Fixes/New Semantic Checks (for old semantics):
--------------------------------------------------
- fixed some subtle race conditions in the pthreads version of the runtime
- fixed a bug in which write statements would not print atomically as intended
- fixed a bug in which multidimensional tuple-to-array assignment was failing
- fixed support for readXX() on single variables
- added some runtime checks to try and avoid integer wraparound in malloc sizes
- improved support for range slicing at extreme integer values
- made 1-tuple-style declarations illegal:  var (x) = ...;
- fixed a number of bugs related to generic function instantiation points
- fixed a bug in which casts on return expressions were ignored
- fixed a bug related to iterating over a single iterator class multiple times
- fixed a bug in which param functions with multiple returns corrupted constants

Error Message Improvements:
---------------------------
- improved an error message related to illegal assignments of domains to arrays
- added an error check to prevent iteration over a type
- improved error messages related to bad tuple index types
- improved error messages related to iterators and promoted expressions
- added a warning about cobegin statements with fewer than two statements

Compiler Analysis and Optimizations/Performance of Generated Code:
------------------------------------------------------------------
- made "here" into a per-locale variable, reducing communication
- optimized read-only non-local accesses to value types
- added initial support for privatizing global domain/array descriptors
- added initial support for optimizing zippered iteration over aligned arrays
- optimized coforall...on and begin...on idioms to reduce thread requirements
- added reference counting to domain classes to aid in freeing them

Compiler Performance and Cleanup:
---------------------------------
- rewrote the compiler's symboltable
- added support for a BitVec class to save space and time
- tightened up memory leaks in the compiler
- specialized parameter tuple indexing for performance and fewer special cases
- reimplemented the IR traversal mechanism
- removed def/use information from the Symbol class to save space
- removed filename references from IR nodes to save space
- removed unused fields from internal classes
- reimplemented the caching data structures used in function resolution
- streamlined function instantiation when a function is not a viable candidate
- refactored and cleaned up the wrapper/generic function caching code
- applied reference propagation to functions just prior to inlining
- moved the prune pass prior to optimizations to save time
- optimized the verification pass by hoisting out back pointer checks
- optimized reference propagation to build smaller use/def sets
- optimized the scalar replacement pass to localize the iterative aspects
- improved the set of live references added/omitted from iterator classes
- eliminated lots of dead code

Testing System:
---------------
- made the test system execute .numlocales tests on 1 locale for CHPL_COMM=none
- made the testing system set the CHPL_* environment variables if they aren't
- made the test system generate its output using relative paths
- fixed a bug in the testing system's "skipif" capability

Internal:
---------
- added support for dynamically turning on/off communication and memory tracing
- improved debug output for the gasnet communication layer
- reorganized abstract distribution, domain, array classes
- generalized creation of runtime types
- renamed SingleLocale* classes for domains/arrays to Default* classes
- removed need for buildEmptyDomain methods within domain classes
- removed redundant type/param fields from array wrapper records
- simplified the AList class
- revamped implementation of pragmas and unified with various boolean flags
- added a --runtime flag to compile Chapel code into the runtime and used it
- removed --nostdincs developer compiler flag
- improved the format of the --print-statistics flag and added summary info
- made the --baseline flag into an aggregate flag
- fixed a bug with the --gdb flag in which quit and run would fail after errors
- improved the cleanup of temporary files when using the --gdb flag for gdb >6.6
- added support for developers to print references in 0x0000abcd form
- added a rootModule that contains the program module but is not codegen'd
- decoupled the visible functions data structure from the symbol table
- removed the need for the symboltable after scope resolution
- changed module representation of CHPL_* variables from enums to strings
- added support for compiler CHPL_* variables of type const char*
- added an internal traceback capability to unravel inlined functions
- changed the mechanism for specifying reserved symbol names needing mangling
- refactored reference propagation to share code with scalar replacement
- added debugging functionality to the scalar replacement pass
- replaced compute_sym_uses() with buildDefUseMaps() and for_defs/uses macros
- simplified and optimized the normalize pass
- removed the def/use map in function resolution
- added a promotion wrappers cache to avoid creating duplicate wrappers
- general cleanup of coercion wrapper code
- refactored instantiation code
- changed handling of on, begin, cobegin, coforall to use blocks, not nested fns
- reimplemented heap allocated variables
- changed arithmetic array of primes into function returning primes
- made all exits from the compiler use our clean exit routine


===========
version 0.7
===========

Fourth preliminary release of Chapel Compiler, March 31, 2008

High-Level Themes:
------------------
- multi-locale task parallelism
- improved task parallel correctness, features, thread management
- improved stability of core features
- target audience: HPCS mission partners, select HPC/academic/industry users

Changes to Chapel Language:
---------------------------
- added "new" keyword to invoke class/record constructors
  e.g., "class C { ... }  var myC = C(...);" => "... var myC = new C(...);"
- enumerated types now require the type to be named before a component symbol
  e.g., "enum myEnum {A, B, C}; var x = B;" => "... var x = myEnum.B;"
- changed a file's mode from a string to an enumeration
  e.g., file(..., "r") => file(..., FileAccessMode.read)
- added "sync" statement to join dynamic parallelism
  e.g., sync { /* create parallelism */ }  // waits here for parallelism to end
- added "here" constant to refer to the locale on which a task is executing
- added support for readXX and isFull on single variables
- added support for functions with type varargs
  e.g., def foo(type t ...?numTypes) { ... }
- added support for vararg read()/readln() functions that return a tuple value
  e.g., "read(int, float, string);" returns an (int, float, string) value
- added a sorted() iterator to associative domains/arrays and opaque arrays
  e.g., var table: domain(string); ...  for entry in table.sorted() do ...
- added support for a compilerWarning() call similar to compilerError()
  e.g., compilerWarning("I didn't expect this function to be called");
- added string relational operators
  e.g., ..."hi" >= "bye"...
- removed the "of" keyword
- removed the "ordered" keyword and concept

Newly Implemented Features:
---------------------------
- execution using multiple locales (see: doc/README.multilocale)
- use of on clauses taking locale/lvalue expressions to generate remote tasks
  e.g., "on Locales(i) do ...",  "var x = ...;  ...  on x do ..."
- use of <expression>.locale to query the locale on which an lvalue lives
  e.g., "var x = ...;  ... x.locale ..."
- task pool to support the creation of more tasks than executing threads
  (see doc/README.threads for more details)
- added support for calling methods within class constructors
- improved support for member initializer expressions within classes
- strengthened distinction between type specifiers and constructor calls
- temporarily removed support for real(128), imag(128), complex(256)
- enumerated and opaque arrays now support iteration
- added support for tuples of sync variables
- added support for declaring enumerations within classes

Portability of code base:
-------------------------
- removed a number of warnings specific to particular compilers/platforms

Semantic Changes:
-----------------
- in a type context, (int) is no longer a 1-tuple of type int; use 1*int instead
- Chapel now parses types in the same way that it parses general expressions

Syntactic/Naming Changes:
-------------------------
- renamed opaque domain's .new() method to .create()
- renamed the (undocumented) Locales domain from LocalesDomain to LocaleSpace

Documentation:
--------------
- new README files in the doc/ directory:
  - README.multilocale file explains how to execute using multiple locales
  - README.threads explains how tasks are implemented using threads
- language specification revisions:
  - greatly improved the "Parallelism and Synchronization" chapter
  - greatly improved the "Locality and Distribution" chapter
  - made other updates to reflect other changes mentioned in this file
  - removed most of the language overview section, believing it needs updating
- updated the quick reference document to include locality concepts
- updated HPCC documents to reflect "new" keyword and enumerated type qualifiers
- generally refreshed the README, CHANGES, STATUS files

Example Codes:
--------------
- added new example codes:
  - multilocale.chpl to serve as a multi-locale execution tutorial
  - taskParallel.chpl to serve as an introduction to task-parallel concepts
  - varargs.chpl to demonstrate the user of variable argument functions
- updated existing examples to reflect language changes:
  - added "new" keyword to tests that create class instances
  - for tests that use files, changed access mode from string to enum
  - added enumeration type qualifiers to uses of enumerated types
  - changed opaque.chpl test to rename the opaque domain .create() method
- changed blockLU's input data to improve stability across compilers
- made automated testing of opaque.chpl deterministic

Standard Modules:
-----------------
- added a skipToNth() method to the RandomStream class

Compiler Flags:
---------------
- changed flags to have a --no-... variation (see chpl man page for details):
  --local => --[no-]local where the default is based on CHPL_COMM
  --serial => --[no-]serial where the default is based on CHPL_THREADS
- added new flags (see chpl man page for details):
  --[no-]ieee-float controls the strictness of IEEE floating point operations
  --fast flag turns on optimizations & disables runtime checks and IEEE floats
  --explain-instantiation describes the instantations of functions/types

Generated Code Flags:
---------------------
- added a config const "maxThreads" to limit the number of threads per locale
  (see doc/README.threads for more information)
- made --help flag list built-in config consts/vars (numLocales, maxThreads)
- added a --quiet/-q flag to suppress runtime warnings

Bug Fixes/New Semantic Checks (for old semantics):
--------------------------------------------------
- fixed support for arrays of arrays and arrays of syncs within classes
- fixed several bugs in the implementation of associative/opaque domains/arrays
- improved composability of forall expressions and coforall statements
- improved checks preventing the use of types in value contexts and vice-versa
- added checks for illegal control flow within parallel/sync/on statements
- added warning if locale is applied to an expression known to be local
- added a runtime warning when using distributions on more than 1 locale
- removed incorrect copies that were inserted for certain default argument types
- fixed ability to specify C source files with paths
- fixed a bug in which standalone reads of sync vars did not consume full/empty
  e.g., "myflag$;" is now equivalent to "myflag$.readFE();"
- fixed a bug in the implementation of .length for degenerate ranges
- ensured user cannot create new locales
- prevented user from being able to modify a locale's id
- removed instantiation limit error messages generated by tuples
- fixed a bug with the --cpp-line flag for long generated C lines

Error Message Improvements:
---------------------------
- improved error messages for generic type specifiers

Compiler Analysis and Optimizations/Performance of Generated Code:
------------------------------------------------------------------
(no significant ones in this release)

Compiler Performance and Cleanup:
---------------------------------
- reduced memory footprint of certain compiler IR classes

Generated Code:
---------------
- changed implementation of subclasses
- added support for remote references and remote classes
- improved line number reporting for certain functions
- renamed some identifiers to avoid initial underscores -- more remain
- improved name mangling policy
- changed integer type aliases to use stdint.h types
- turned up C compilation warning levels for developers

Testing System:
---------------
- added support for listing any number of tests and directories on command-line
- removed -onetest and -startdir flags due to above support
- allowed start_test to be run from any directory
- removed support for Makefile-driven testing
- removed start_clean script
- added "skipif" support for skipping a test or directory based on env vars

Internal:
---------
- unified implementation of cobegin/coforall to use begins
- use endCounts to implement cobegins/coforalls rather than syncStacks
- improved runtime TAGS file and added TAGS file for generated code
- improved unification/normalization of AST classes and primitives
- removed unnecessary primitives, types, symbols
- changed places in code where pragmas can occur
- converted from CVS to SVN
- made --ccwarnings into --[no-]ccwarnings where the default is based on --devel


===========
version 0.6
===========

Third preliminary release of Chapel Compiler, December 21, 2007

High-Level Themes:
------------------
- single-locale, multiple threads
- improved stability of core features
- support for additional serial features
- improved single-threaded performance and memory utilization of generated code
- improved multi-threaded correctness, features
- improved compiler performance and memory utilization
- improved portability of compiler/runtime code and generated code
- support for cross-compilation environments
- target audience: HPCS mission partners, select HPC users and centers

Changes to Chapel Language:
---------------------------
- added support for defining type functions
  e.g., def myint(param x: bool) type { return if x then int(32) else int(64);}
- changed routines supported on sync/single variables and made them methods
  e.g., var x: sync int;  x.writeXF(2);  if (x.isFull) { ... }
- added support for expression-level for and forall loops using keyword syntax
  e.g., var A: [D] int = for i in D do foo(i);
- added support for readln() function which skips to EOL after reading its args
- added support for a main() function per module, resolvable via --main-module
- added support for translate, interior, exterior, and expand methods on ranges
- added support for membership test on ranges
  e.g., var r: range = ...;  if (r.member(3)) { ... }
- added support for range/scalar arithmetic using +, -, *, /
  e.g., (1..10) + 1 == 2..11; (1..10) * 2 == 2..20 by 2
- removed support for operations between scalars and tuples
  e.g., (1, 2) + 3 is no longer supported; (1, 2) + (3, 4) still is
- added support for bitwise operators on int/uint pairs of the same size
  e.g., int(32) & uint(32) => uint(32)

Newly Implemented Features:
---------------------------
- added support for arrays of arrays whose inner arrays are of uniform size
- added support for arrays of domains
- added support for instantiating types/functions using array types
  e.g., class C { type t; ... }   type vect = [1..n] int;   var myC: C(vect);
- implemented a reshape function for arrays
- initial implementation of opaque domains and arrays
- added support for slicing using unbounded and degenerate ranges
  e.g., for A: [1..n, 1..n] real, A[2.., ..] is equivalent to A[2..n, 1..n]
- added support for rank change slicing of domains and arrays
  e.g., var V: [1..n] int;  V = A[n/2 + 1, 1..n];
- relaxed requirements that slicer and slicee objects use the same integer type
- added support for | and & reductions over boolean aggregates
- added support for a clear() method on associative domains
- preliminary support for "on" statements with restricted functionality
- improved support for user-defined class constructors
- added support for runtime checks against nil class references
  e.g., class C { ... }  var myC: C;   C.foo();  generates a nice error
- improved support for nested modules
- improved symbol resolution for external modules
- implicit enum-to-string coercions and explicit string-to-enum conversions
- initial support for controlling type-to-string formatting (doc/README.format)
- initial support for prototyping and calling extern C functions from Chapel
  (see doc/README.extern for more details)
- added support for generic function arguments of sync types
  e.g., def foo(x: sync) { ... }
- improved support for garbage collection in single-threaded codes (see STATUS)
- improved tuple type orthogonality; they can now be used in most type contexts
- added support for strided param for loops

Portability of code base:
-------------------------
- added support for compiling with Intel, PGI, Pathscale, and Cray compilers
- added initial support for compiling for Cray MTA/XMT, X1s, and XTs
- improved portability of source and generated codes across compilers/platforms
- refactored Makefiles to better separate compiler settings from platforms
- added support for cross-compilation environments -- see doc/README.chplenv
- added mechanisms for selecting threading/communication libraries -- see "
- added native support for task parallelism on Cray MTA/XMT platforms

Semantic Changes:
-----------------
- removed implicit coercions from integer types to real(32)
- made queries of an array's domain via A.domain or A:[?D] constant
- removed dynamic dispatch on method calls with no parenthesis
- user-defined constructors now squelch the creation of a default constructor
- redefined range and domain slicing to use intersection semantics
- changed location of instantiated generics to be their definition point
- defined semantics of default functions as being "return a const"
- function resolution now favors non-promoted functions as a tie-breaker
- better defined casts between complex, imaginary, real, and integral types

Syntactic/Naming Changes:
-------------------------
- added support for $ in identifier names; used by convention to identify syncs
- allow floating point literals with an exponent to use an integral base
  e.g., can now write 1e4 rather than 1.0e4
- changed locale array name from Locale to Locales (as described in spec)
- added ability to tag a function as returning a const value for documentation

Documentation:
--------------
- updates to the language specification
- updated CHANGES and STATUS files
- refreshed READMEs
- updated compiler man page and --help message
- added AGREEMENT file listing user agreement
- refreshed and refactored CONTRIBUTORS file

Example Codes:
--------------
- added tutorial example for using arithmetic arrays (arrays.chpl)
- added tutorial example for using opaque arrays (opaque.chpl)
- converted all HPCC example codes to use 64-bit indices for their domains
- fixed a bug in the HPCC FFT calculation of GFlop/s
- renamed sync vars to use $ naming convention

Standard Modules:
-----------------
- added support for 32-bit math routines

Compiler Flags:
---------------
- added new flags:
  --help-env : prints environment variables for each compiler flag
  --help-settings : prints current setting of each compiler flag
  --no-nil-checks : disables runtime checks for nil class references
  --no-checks : disables all runtime checks (currently nil & bounds checks)
  --main-module : selects between multiple possible program entry points
  --ldflags : supplies flags for the C link step
  --serial : disables all parallelism in a program
  --local : optimizes compilation for single-locale execution
  --no-scalar-replacement : disables the scalar replacement optimization
  --short-names : generates the C code using short variable names (T<#>)
  --make : specifies the GNU-compatible make utility used by the back-end
- removed flags:
  --parallel : became the default and was redundant with --serial
- added ability to specify .c, .o, and .h files for interfacing to C routines
- improved error-reporting for incorrect compiler flags
- compiler now parses all flags before any significant ones are acted upon
- better error checking for parsing config param values

Generated Code Flags:
---------------------
- added new flags:
  -nl #/--numLocales=# flags for specifying the number of locales to use
  -v/--verbose flags for increasing the verbosity of the generated code
- improved error-reporting for incorrect flags
- improved parsing of config const/var values

Bug Fixes/New Semantic Checks (for old semantics):
--------------------------------------------------
- whole-array assignment of arrays of sync variables now works correctly
- += and -= are now supported on sync variables
- fixed bugs in sync variable read/write functions
- added checks for blocking sync var reads/writes when $CHPL_THREADS == none
- fixed associative domain/array bugs caused by removing indices
- added bounds checking for associative domain/array operations
- improved bounds checking for array slicing
- bounds checking for string.substring() arguments
- improved legality checks for string-to-value conversions
- added legal-value checking for casts from integers to enumerated types
- improved robustness of tensor function promotion
  e.g., exp[A, B] where A and B are arrays
- improved checks preventing against assignment to const variables
- added check that actual arguments to inout or out formals are valid lvalues
- added check against returning constants from var functions
- added checks against assigning to consts and params
- fixed use of inout and out intents with variable-length argument lists
- default argument values specified using a function call now work properly
  e.g., def foo(x = bar()) ...
- improved handling of unifying multiple returns from a single function
- improved checking that a function returns a value along all control paths
- return statements are now supported in type select statements
- type checking of LHS and RHS on op= assignments
- added ability for user to overload operators for uint(64)/int combinations
- improved error checks for the use of values in a type context and vice-versa
- support for overriding this() method in subclasses
- improved error checks for legal expressions to iterate over
- added semantic check for degenerate rank-change slicing

Error Message Improvements:
---------------------------
- added filename/line# information to many error messages
- improved notation for types in error messages from ": t" to "type t"
- added warning when C-style ++ or -- are used; these are duplicated unary ops
- improved clarity of function prototypes in function resolution errors
- improved clarity of error for creating a domain with mixed integral types

Compiler Analysis and Optimizations/Performance of Generated Code:
------------------------------------------------------------------
- improved performance for codes using type "complex"
- removed extraneous threads created by uses of the begin statement
- improved the performance of the bitMatMultOr routine in the BitOps module
- added strength reduction for ** with an exponent of 0-6 or 8
- added strength reduction for certain comparisons between uints and 0

Compiler Performance and Cleanup:
---------------------------------
- improved performance of scalar replacement, copy propagation passes
- improved performance of compiling codes using type "complex"
- reduced memory requirements of compiler

Generated Code:
---------------
- added support for generating code using short variable names (--short-names)

Testing System:
---------------
- added support for Makefile-driven testing within a subdirectory
- added support for testing on multiple locales
- added support for "compilation only" testing to avoid running executables
- added support for the ability to specify a launch command to begin execution
- added the ability to suppress tests that are expected to fail
- added support for communication-layer-specific .good files

Internal:
---------
- support for array type descriptor at runtime
- many refactorings and improvements to the compiler and runtime sources


===========
version 0.5
===========
Second preliminary release of Chapel Compiler, June 29, 2007

High-Level Themes:
------------------
- single-locale, multiple threads
- support for additional serial features
- improved single-threaded performance, memory utilization
- improved multi-threaded correctness, features
- target audience: HPLS evaluation team, HPCS mission partners, 
  select HPC users and centers

Changes to Chapel Language:
---------------------------
- eliminated Chapel's sequence type
  - in the future, a standard List library will provide similar functionality
  - removed # and #= operators, since they were designed for sequences
  - removed support for sequence literals; use tuple syntax instead
    e.g., var A: [1..3] real = (0.1, 2.3, 4.5);
  - removed support for casting sequences to tuples and tuples to sequences
  - iterators in an expression context now result in a 1D, 1-based array
    e.g., "iterator foo() {...}  var A = foo();" creates a 1D array over [1..]
- added "range" type to language to replace old "arithmetic sequence" concept
  e.g., "lo..hi" or "lo..hi by str" are ranges
  - open interval syntax supported for ranges
    e.g., "[lo..hi)" is equivalent to lo..hi-1
  - +, -, *, / operators supported for range/scalar combinations
- added coforall loop construct for expressing explicit task parallelism
  e.g., "coforall 1..4 do ..." will create four explicit tasks
- removed "iterator" keyowrd -- iterators are now functions that contain yields
- added support for defining a default ("these") iterator for classes/records
- added support for creating array aliases
  e.g., "var Amid => A[2..n-1, 2..n-1];" creates an alias, Amid, to the slice
- support for standard math, bitwise, and comparison operators for tuples
  e.g., "(i,j) + (1,-1)" yields "(i+1, j-1)"
- added a swap operator: <=>
  e.g., "a <=> b" is semantically equivalent to "const t = b; b = a; a = t;"
- better support for writing output
  - enabled support for writing to strings using a write() method
    e.g., var s: string;  s.write("x is: ", x);
  - added a Writer class that enables user classes to be written to
  - added writeThis() method to specify how a type should be output to a Writer
- added minloc and maxloc reductions that return min/max value and index
  e.g., var (minVal, minInd) = minloc reduce (A, A.domain);
- changed arithmetic domain range access from D(<dim#>) to D.dim(<dim#>)
  e.g., var rows = D.dim(1);
- arithmetic domains and arrays support low and high methods that return bounds
  e.g., var loInd = A.low;
- support for range, domain, and array slicing via bounded or unbounded ranges
  e.g., "A[2.., ..n]" is equivalent to "A[2..A.dim(1).high, A.dim(2).low..n]"
- support for promoting casts across array elements
  e.g., var x: [1..4] real, y: [1..4] int;  y = x:int;
- added support for param functions that support compile-time evaluation
  e.g., "def square(param x) param { return x**2; }  param n2 = square(14);"
- support for default values for param members of classes
  e.g., class C { param bitWidth = 32; ... }
- support for top-level 0-argument functions without parentheses
  e.g., def f { writeln("In function f"); }
  - allow "main" function to be declared with or without parentheses
    e.g., def main { writeln("Program will start here"); ... }
- allow "<index> in" to be elided in for/forall loops/expressions
  e.g., "for 1..n { ... }", "var A = [1..n] 0.0;"
- support for multiple modules to be listed within a single "use" statement
- added support for reading a value of a specified type from a file
  e.g., "var myint = infile.read(int);"

Newly Implemented Features:
---------------------------
- support for sparse domains/arrays
  - assignment of aggregate index expressions to sparse domains
  - accumulation of indices into sparse domains using +=
  - re-assignment of a sparse array's "zero" value using the .IRV field
  - clear() method for emptying a sparse domain's index set
- arrays of sync variables are now supported
- added support for partially and fully unbounded ranges ("lo..", "..hi", "..")
- enumerated domains and arrays
- support for a numCores() function on the locale type to query # of cores
- subBlocks iterator on domains now generates a sub-block per processor core
- support for nested classes, records, and iterators
- serial statement
- added support for using "_" to ignore elements during tuple destructuring
  e.g., var t: (int, real) = ...;   (t1, _) = t;
- added support for nested tuple destructuring in variable decls/formal args
- support for config params of primitive and enumerated types
- initial support for accessing a module's members via modname.membername
- implemented dynamic casts between class types
- added initial support for copy collection-based garbage collection
- subdomain keyword is now supported, though subset relationship is not checked
- initial support for specifying a distribution class; interface still in flux

Syntactic/Naming Changes:
-------------------------
- removed support for using "?" in identifier names
  - changed standard method member? to member
  - changed standard method true? to isTrue
- removed support for "--" as a single-line comment style;  use "//"
- an array's domain should now be accessed via A.domain rather than A.dom
- array element type identifier changed from elt_type to eltType
- made file open/close methods take parenthesis
- renamed "indefinite domains/arrays" to "associative domains/arrays"

Semantic Changes:
-----------------
- changed relative precedence of casts and unary +/- (unary +/- is now tighter)
  e.g., -2:uint(32) is equivalent to (-2):uint(32) rather than -(2:uint(32))
- for/forall loops over arrays now result in references to elements, not copies
  e.g., "for e in A do e = 0;" could be used to zero out an array
- enumerated types now start counting at "1" rather than "0" by default
- conditional expressions are no longer valid l-values
- improved semantics of module use transitivity, nested modules
- removed support for structural iterator interface (getHeadCursor, etc.)
- nested classes can refer to their outer class using the identifier "outer"
- initial support for querying parameters/types in a formal class argument
  - similar support for variable-length argument lists of generics
- where clauses can now compare against formal generic types
- short-circuiting operators only require isTrue rather than true? & false?
- in x op=y, a cast to x.type is used in assigning back to x if it is primitive
- compilerError() can now take multiple arguments like a halt()
- replaced setter/getter functions with richer support for var functions

Documentation:
--------------
- added man page for Chapel compiler (chpl)
- added CHANGES file
- added Quick Reference document
- added language overview chapter to the specification
- updated HPCC tutorial document and broke into two docs: overview and tutorial
- updated STATUS file
- cleaned up README files a bit

Example Codes:
--------------
- added README.features file to map Chapel features to examples that use them
- several improvements to the HPCC benchmarks due to bug fixes, new features
- added several new examples:
  - iterators example to demonstrate use of iterators
  - linkedList example for nested, generic, iteratable, printable classes
  - parallelQuickSort example to demonstrate serial/cobegin statements
  - blockLU example to demonstrate domain slicing, array aliases, swap
  - sparse example to demonstrate sparse domains and arrays
  - slices example to demonstrate array slicing and reindexing
  - reductions example to demonstrate minloc/maxloc reductions
  - fileIO example to demonstrate simple use of file I/O
- rewrote the producer-consumer example to use a buffer of sync variables
- added a hello-module example to demonstrate simple Chapel program structure
- improved the comments for several tests
- removed stream-nopromote.chpl example, which had become redundant
- combined the two genericStack examples into a single file
- added performance testing support for stream.chpl and ra.chpl

Standard Modules:
-----------------
- Search: new standard module
- Sort: new standard module
- Types: numBits() and numBytes() are now param functions
- Random: fillRandom() routines now work for arrays of arbitrary rank

Compiler Flags:
---------------
- improved the formatting of the --help message
- added -g flag for debugging generated code; turns on --cpp-lines by default
- added -O flag for optimizing generated code
- added -s/--set for setting config params
- added --explain-call flag that helps describe how a function call is resolved
- added --baseline flag to disable all compiler optimizations
- added --no-flow-analysis flag that disables all flow-based optimizations
- added --no-warnings flag to diable all compiler warnings
- added --no-single-loop-iterator-opt flag to disable 1-loop iterator rewrites
- added --no-expand-iterators-inline-opt flag to disable iterator inlining
- removed --unoptimized flag
- removed --cg-chpl-lineno flag; this capability is now always on
- removed --no-gc used for a stopgap reference counting scheme

Generated Code Flags:
---------------------
-- added a --gdb flag to make it easier to debug generated code

Bug Fixes/New Semantic Checks (for old Semantics):
--------------------------------------------------
- test expressions in loops/conditionals restricted to bools, classes, integers
- runtime checks added to ensure that zippered iterations are of equal size
- fixed portability issues in flex lexer file, chapel.lex
- domains are now passed by reference by default
- implemented bytesPerLocale for Macintosh
- classes can now have iterator methods
- recursive iterators now work
- "true + true" now yields "2" rather than "true"
- casts from uints to complexes now supported
- casts from integral types to enumerated types now supported
- initial support for casts from strings to primitive types
- modules can now refer to param values and types from other modules correctly
- disabled parameter folding of floating point values
- parameter folding of relational operators on enum types
- parameter folding of short-circuiting &&, ||, and conditional expressions
- type aliases can now be created for array types
- fixed numerical bugs in array slicing and reindexing
- config variable initializers are no longer evaluated if set on command-line
- const values can no longer be passed to arguments with inout or out intent
- constructor keyword no longer supported -- use def <classname> instead
- fixed "bug" with log2 on integers and made it halt on zero or negatives
- improved thread safety of generated code
- made creation of too many threads result in halt() rather than lost work
  - eventually we'll need to queue up tasks; this is a stopgap
- passing unions to out/inout intents now works
- better semantic checking of legal l-values
- fixed an infinite loop bug in associative domains/arrays

Error Message Improvements:
---------------------------
- added message to compiler warning that "atomic" is unimplemented when used
- caused compiler to complain about non-module scope configuration variables
- unified runtime and compiler error message formats
- runtime errors identify source file/line#
- improved quality of compilerError() error message output
- cleaned up syntax error messages
- improved error message for tuples of non-param size
- improved error reporting when attempting to assign to constants
- better error checking of legal vs. illegal casts
- generally improved quality of compiler error messages

Compiler Analysis and Optimizations/Performance of Generated Code:
------------------------------------------------------------------
- removed the insertion of all large sequence/array temporaries
- extensive optimizations of iterators and loop generation
- global/local copy propagation
- dead variable elimination
- dead code elimination
- live variable analysis
- reaching definitions analysis
- def-use and use-def chains

Compiler Performance and Cleanup:
---------------------------------
- improvements to function resolution, vararg function instantiation
- made compiler build with debugging off/optimizations on for non-developers
- removed unused scalar replacement code
- renamed and refactored internal modules
- removed old reference counting code
- optimized several passes to improve compile time

Generated Code:
---------------
- now generating structured loops rather than gotos and labels
- large reduction in lines of generated code
  e.g., ~40% reduction in lines of code for jacobi example (13275 -> 7753)
- module functions generated in order, with comments to identify source line #
- _chpl_header.h file is generated in a cleaner manner
- changed munging of variable names to improve gdb support and readability
- using pragmas, generated code has been shown to vectorize on X1/thread on MTA
- initial support for cross-compiling to the XT

Testing System:
---------------
- added support for doing performance-tracking experiments

Internal:
---------
- new IR traversal mechanisms
- flow analysis optimization framework
- vararg functions handled within function resolution
- parameter folding folded into function resolution
- new compiler gdb commands: lv (list view)
- domain and array wrappers now implemented as records
- improved creation of init functions
- removed ability to cast primitives to strings by casting to "%<format>"
- new mechanism for indicating that a class is promotable
- added AND_EXPAND and PRIMITIVE_TUPLE_AND_EXPAND
- added reference types


===========
version 0.4
===========
Preliminary release of Chapel Compiler, December 15, 2006

High-Level Themes:
- single-locale, multiple threads
- support for base language features
- designed for correctness over performance
- target audience: HPLS language evaluation team and HPCS mission partners
