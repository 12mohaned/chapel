====================
Release Changes List
====================

STOPPED AT 12/12/07 21:59:41 -- figueroa

===========
version 0.6
===========
Third preliminary release of Chapel Compiler, December 2007


High-Level Themes:
------------------
- single-locale, multiple threads
- support for additional serial features
- improved single-threaded performance, memory utilization
- improved multi-threaded correctness, features
- target audience: HPCS mission partners, select HPC users and centers

Changes to Chapel Language:
---------------------------
- added support for a main() function per module, resolvable via --main-module
- added support for $ in identifier names; by convention used to identify syncs
- added support for arithmetic on ranges: +, -, *, /
- added support for floating point literals with an exponent and integral base
  e.g., 1e4 rather than 1.0e4
- redefined range and domain slicing to result in intersection semantics
- function resolution now favors a promoted argument over a generic one
  e.g., foo(A) will favor "def foo(x: int)" over "def foo(x)" for A: [] int;
- removed support for operations between scalars and tuples
  e.g., (1, 2) + 3 is no longer supported; (1, 2) + (3, 4) still is
- added support for for- and forall-expressions using keyword syntax
  e.g., var A: [D] int = for i in D do foo(i);
- added support for readln() function which skips to EOL after reading its args
- added support for translate, interior, exterior, and expand methods on ranges
- added support for bitwise operators on int/uint pairs of same size
- added support for membership test on ranges
- added ability for user to overload operators for uint(64)/int combinations
- added support for defining type functions
- changed supported functionality on sync and single variables
- converted sync/single variable functions into methods

Changes to Chapel Build Environment:
------------------------------------
- added support for cross-compilation environments -- see doc/README.chplenv
- lots of restructuring of Makefiles
- added mechanisms for selecting between threading/communication libraries

Newly Implemented Features:
---------------------------
- initial support for prototyping and calling C functions within Chapel code
- implicit enum-to-string coercions and explicit string-to-enum conversions
- improved handling of unifying multiple returns from a single function
- improved support for slicing using unbounded and degenerate ranges
- relaxed requirements that slicer and slicee objects use the same integer type
- initial support for "on" statements
- improved tuple type orthogonality; they can now be used in all type contexts
- improved support for nested modules and symbol resolution for external modules
- support for overriding this() method in subclasses
- added support for | and & reductions over booleans
- improved legality checks for string-to-value conversions
- added support for rank change slicing of domains and arrays
- added support for a .clear() method on associative domains
- added range checking for casts from integers to enumerated types
- added support for instantiating types/functions using array types
- improved support for copy collection for single-threaded codes
- native support for task parallelism on Cray MTA/XMT platforms
- support for arrays of arrays where the inner arrays are of the same size
- improved support for user-defined class constructors
- improved support for shadowing fields in subclasses
- added support for arrays of domains (but not arrays of sparse subdomains)
- implemented a reshape function for arrays
- initial implementation of opaque domains and arrays
- added support for strided param for loops
- added support for generic function arguments over sync types
  e.g., def foo(x: sync) { ... }
- added support for runtime checks against nil class references
- support for casts between complex and imaginary, real, and integral types

Semantic Changes:
-----------------
- defined semantics of default functions as being "return a const"
- user-defined constructors now prevent a default constructor from being created

Syntactic/Naming Changes:
-------------------------
- added ability to tag a function as returning a const value for documentation
- changed name of array of locales from Locale to Locales (as named in spec)

Documentation:
--------------

Example Codes:
--------------
- converted all HPCC example codes to use 64-bit indices for their domains
- fixed a bug in the HPCC FFT calculation of GFlop/s

Standard Modules:
-----------------

Compiler Flags:
---------------
- improved parsing of command-line flags for compiler
- better error checking for parsing config params
- --no-nil-checks to disable runtime checks for nil class references
- --main-module flag to select between multiple possible program entry points
- --ldflags option to pass flags to the C link step
- --serial flag to disable all parallelism in a program
- --local flag to optimize compilation for single locale execution
- --no-scalar-replacement flag to disable scalar replacement optimization
- added ability to specify .c, .o, and .h files for use in interfacing with C

Generated Code Flags:
---------------------
-- improved parsing of command-line flags for generated code
-- improved parsing of config const/var values
- -nl #/--numLocales=# flags for setting the number of locales to execute on
- -v/--verbose flags for increasing the verbosity of the generated code

Bug Fixes/New Semantic Checks (for old semantics):
--------------------------------------------------
- return statements are now supported in type select statements
- += and -= are now supported on sync variables
- types used with op= assignments are now checked
- fixed use of inout and out intents with variable-length argument lists
- fixed a few bugs caused by deleting items from associative domains/arrays
- added more bounds checking to associative domain operations
- default argument values specified via a function call now work properly
- whole-array assignment of arrays of sync variables now works correctly
- improved error checks for the use of values in a type context and vice-versa
- improved error checks for string.substring() function
- added check that actual arguments to inout or out formals are valid lvalues
- improved checks preventing against assignment to const variables
- fixed bugs in certain sync variable read/write functions
- improved robustness of tensor function promotion
- improved checking that a function returns a value along all control paths

Error Message Improvements:
---------------------------
- improved clarity of function resolution error messages

Compiler Analysis and Optimizations/Performance of Generated Code:
------------------------------------------------------------------
- enabled copy propagation for complex types
- added strength reduction for ** with an exponent of 0-6 and 8
- improved the performance of the bitMatMultOr routine in the BitOps module

Compiler Performance and Cleanup:
---------------------------------
- improved performance of scalar replacement, copy propagation optimizations
- reduced memory requirements of compiler
- eliminated many warnings for PGI, Pathscale, Intel, Cray, and GNU compilers
- improved performance of compiling codes using complex types
- removed extraneous threads created by uses of the begin statement


Generated Code:
---------------

Testing System:
---------------
- added support for testing on multiple locales
- added support for communication layer specific output
- added support for Makefile-driven testing within a subdirectory
- added the ability to suppress tests that are expected to fail
- added support for the ability to specify a launch command to kick off testing
- added support for "compilation only" testing to avoid running executables

Internal:
---------


===========
version 0.5
===========
Second preliminary release of Chapel Compiler, June 29, 2007

High-Level Themes:
------------------
- single-locale, multiple threads
- support for additional serial features
- improved single-threaded performance, memory utilization
- improved multi-threaded correctness, features
- target audience: HPLS evaluation team, HPCS mission partners, 
  select HPC users and centers

Changes to Chapel Language:
---------------------------
- eliminated Chapel's sequence type
  - in the future, a standard List library will provide similar functionality
  - removed # and #= operators, since they were designed for sequences
  - removed support for sequence literals; use tuple syntax instead
    e.g., var A: [1..3] real = (0.1, 2.3, 4.5);
  - removed support for casting sequences to tuples and tuples to sequences
  - iterators in an expression context now result in a 1D, 1-based array
    e.g., "iterator foo() { ... }  var A = foo();" creates a 1D array over [1..]
- added "range" type to language to replace old "arithmetic sequence" concept
  e.g., "lo..hi" or "lo..hi by str" are ranges
  - open interval syntax supported for ranges
    e.g., "[lo..hi)" is equivalent to lo..hi-1
  - +, -, *, / operators supported for range/scalar combinations
- added coforall loop construct for expressing explicit task parallelism
  e.g., "coforall 1..4 do ..." will create four explicit tasks
- removed "iterator" keyowrd -- iterators are now functions that contain yields
- added support for defining a default ("these") iterator for classes/records
- added support for creating array aliases
  e.g., "var Amid => A[2..n-1, 2..n-1];" creates an alias, Amid, to the slice
- support for standard math, bitwise, and comparison operators for tuples
  e.g., "(i,j) + (1,-1)" yields "(i+1, j-1)"
- added a swap operator: <=>
  e.g., "a <=> b" is semantically equivalent to "const t = b; b = a; a = t;"
- better support for writing output
  - enabled support for writing to strings using a write() method
    e.g., var s: string;  s.write("x is: ", x);
  - added a Writer class that enables user classes to be written to
  - added writeThis() method to specify how a type should be written to a Writer
- added minloc and maxloc reductions that return min/max value and index
  e.g., var (minVal, minInd) = minloc reduce (A, A.domain);
- changed arithmetic domain range access from D(<dim#>) to D.dim(<dim#>)
  e.g., var rows = D.dim(1);
- arithmetic domains and arrays support low and high methods that return bounds
  e.g., var loInd = A.low;
- support for range, domain, and array slicing via bounded or unbounded ranges
  e.g., "A[2.., ..n]" is equivalent to "A[2..A.dim(1).high, A.dim(2).low..n]"
- support for promoting casts across array elements
  e.g., var x: [1..4] real, y: [1..4] int;  y = x:int;
- added support for param functions that support compile-time evaluation
  e.g., "def square(param x) param { return x**2; }  param n2 = square(14);"
- support for default values for param members of classes
  e.g., class C { param bitWidth = 32; ... }
- support for top-level 0-argument functions without parentheses
  e.g., def f { writeln("In function f"); }
  - allow "main" function to be declared with or without parentheses
    e.g., def main { writeln("Program will start here"); ... }
- allow "<index> in" to be elided in for/forall loops/expressions
  e.g., "for 1..n { ... }", "var A = [1..n] 0.0;"
- support for multiple modules to be listed within a single "use" statement
- added support for reading a value of a specified type from a file
  e.g., "var myint = infile.read(int);"

Newly Implemented Features:
---------------------------
- support for sparse domains/arrays
  - assignment of aggregate index expressions to sparse domains
  - accumulation of indices into sparse domains using +=
  - re-assignment of a sparse array's "zero" value using the .IRV field
  - clear() method for emptying a sparse domain's index set
- arrays of sync variables are now supported
- added support for partially and fully unbounded ranges ("lo..", "..hi", "..")
- enumerated domains and arrays
- support for a numCores() function on the locale type to query # of cores
- subBlocks iterator on domains now generates a sub-block per processor core
- support for nested classes, records, and iterators
- serial statement
- added support for using "_" to ignore elements during tuple destructuring
  e.g., var t: (int, real) = ...;   (t1, _) = t;
- added support for nested tuple destructuring in variable decls/formal args
- support for config params of primitive and enumerated types
- initial support for accessing a module's members via modname.membername
- implemented dynamic casts between class types
- added initial support for copy collection-based garbage collection
- subdomain keyword is now supported, though subset relationship is not checked
- initial support for specifying a distribution class; interface still in flux

Syntactic/Naming Changes:
-------------------------
- removed support for using "?" in identifier names
  - changed standard method member? to member
  - changed standard method true? to isTrue
- removed support for "--" as a single-line comment style;  use "//"
- an array's domain should now be accessed via A.domain rather than A.dom
- array element type identifier changed from elt_type to eltType
- made file open/close methods take parenthesis
- renamed "indefinite domains/arrays" to "associative domains/arrays"

Semantic Changes:
-----------------
- changed relative precedence of casts and unary +/- (unary +/- is now tighter)
  e.g., -2:uint(32) is equivalent to (-2):uint(32) rather than -(2:uint(32))
- for/forall loops over arrays now result in references to elements, not copies
  e.g., "for e in A do e = 0;" could be used to zero out an array
- enumerated types now start counting at "1" rather than "0" by default
- conditional expressions are no longer valid l-values
- improved semantics of module use transitivity, nested modules
- removed support for structural iterator interface (getHeadCursor, etc.)
- nested classes can refer to their outer class using the identifier "outer"
- initial support for querying parameters/types in a formal class argument
  - similar support for variable-length argument lists of generics
- where clauses can now compare against formal generic types
- short-circuiting operators only require isTrue rather than true? & false?
- in x op=y, a cast to x.type is used in assigning back to x if it is primitive
- compilerError() can now take multiple arguments like a halt()
- replaced setter/getter functions with richer support for var functions

Documentation:
--------------
- added man page for Chapel compiler (chpl)
- added CHANGES file
- added Quick Reference document
- added language overview chapter to the specification
- updated HPCC tutorial document and broke into two docs: overview and tutorial
- updated STATUS file
- cleaned up README files a bit

Example Codes:
--------------
- added README.features file to map Chapel features to examples that use them
- several improvements to the HPCC benchmarks due to bug fixes, new features
- added several new examples:
  - iterators example to demonstrate use of iterators
  - linkedList example for nested, generic, iteratable, printable classes
  - parallelQuickSort example to demonstrate serial/cobegin statements
  - blockLU example to demonstrate domain slicing, array aliases, swap
  - sparse example to demonstrate sparse domains and arrays
  - slices example to demonstrate array slicing and reindexing
  - reductions example to demonstrate minloc/maxloc reductions
  - fileIO example to demonstrate simple use of file I/O
- rewrote the producer-consumer example to use a buffer of sync variables
- added a hello-module example to demonstrate simple Chapel program structure
- improved the comments for several tests
- removed stream-nopromote.chpl example, which had become redundant
- combined the two genericStack examples into a single file
- added performance testing support for stream.chpl and ra.chpl

Standard Modules:
-----------------
- Search: new standard module
- Sort: new standard module
- Types: numBits() and numBytes() are now param functions
- Random: fillRandom() routines now work for arrays of arbitrary rank

Compiler Flags:
---------------
- improved the formatting of the --help message
- added -g flag for debugging generated code; turns on --cg-cpp-lines by default
- added -O flag for optimizing generated code
- added -s/--set for setting config params
- added --explain-call flag that helps determine how a function call is resolved
- added --baseline flag to disable all compiler optimizations
- added --no-flow-analysis flag that disables all flow-based optimizations
- added --no-warnings flag to diable all compiler warnings
- added --no-single-loop-iterator-opt flag to disable 1-loop iterator rewrites
- added --no-expand-iterators-inline-opt flag to disable iterator inlining
- removed --unoptimized flag
- removed --cg-chpl-lineno flag; this capability is now always on
- removed --no-gc used for a stopgap reference counting scheme

Generated Code Flags:
---------------------
-- added a --gdb flag to make it easier to debug generated code

Bug Fixes/New Semantic Checks (for old Semantics):
--------------------------------------------------
- test expressions in loops, conditionals restricted to bools, classes, integers
- runtime checks added to ensure that zippered iterations are of equal size
- fixed portability issues in flex lexer file, chapel.lex
- domains are now passed by reference by default
- implemented bytesPerLocale for Macintosh
- classes can now have iterator methods
- recursive iterators now work
- "true + true" now yields "2" rather than "true"
- casts from uints to complexes now supported
- casts from integral types to enumerated types now supported
- initial support for casts from strings to primitive types
- modules can now refer to param values and types from other modules correctly
- disabled parameter folding of floating point values
- parameter folding of relational operators on enum types
- parameter folding of short-circuiting &&, ||, and conditional expressions
- type aliases can now be created for array types
- fixed numerical bugs in array slicing and reindexing
- config variable initializers are no longer evaluated if set on command-line
- const values can no longer be passed to arguments with inout or out intent
- constructor keyword no longer supported -- use def <classname> instead
- fixed "bug" with log2 on integers and made it halt on zero or negatives
- improved thread safety of generated code
- made creation of too many threads result in halt() rather than lost work
  - eventually we'll need to queue up tasks; this is a stopgap
- passing unions to out/inout intents now works
- better semantic checking of legal l-values
- fixed an infinite loop bug in associative domains/arrays

Error Message Improvements:
---------------------------
- added message to compiler warning that "atomic" is unimplemented when used
- caused compiler to complain about non-module scope configuration variables
- unified runtime and compiler error message formats
- runtime errors identify source file/line#
- improved quality of compilerError() error message output
- cleaned up syntax error messages
- improved error message for tuples of non-param size
- improved error reporting when attempting to assign to constants
- better error checking of legal vs. illegal casts
- generally improved quality of compiler error messages

Compiler Analysis and Optimizations/Performance of Generated Code:
------------------------------------------------------------------
- removed the insertion of all large sequence/array temporaries
- extensive optimizations of iterators and loop generation
- global/local copy propagation
- dead variable elimination
- dead code elimination
- live variable analysis
- reaching definitions analysis
- def-use and use-def chains

Compiler Performance and Cleanup:
---------------------------------
- improvements to function resolution, vararg function instantiation
- made compiler build with debugging off and optimizations on for non-developers
- removed unused scalar replacement code
- renamed and refactored internal modules
- removed old reference counting code
- optimized several passes to improve compile time

Generated Code:
---------------
- now generating structured loops rather than gotos and labels
- large reduction in lines of generated code
  e.g., ~40% reduction in lines of code for jacobi example (13275 -> 7753)
- module functions generated in order, with comments to identify source location
- _chpl_header.h file is generated in a cleaner manner
- changed munging of variable names to improve gdb support and readability
- using pragmas, generated code has been shown to vectorize on X1/thread on MTA
- initial support for cross-compiling to the XT

Testing System:
---------------
- added support for doing performance-tracking experiments

Internal:
---------
- new IR traversal mechanisms
- flow analysis optimization framework
- vararg functions handled within function resolution
- parameter folding folded into function resolution
- new compiler gdb commands: lv (list view)
- domain and array wrappers now implemented as records
- improved creation of init functions
- removed ability to cast primitives to strings by casting to "%<format>"
- new mechanism for indicating that a class is promotable
- added AND_EXPAND and PRIMITIVE_TUPLE_AND_EXPAND
- added reference types


===========
version 0.4
===========
Preliminary release of Chapel Compiler, December 15, 2006

High-Level Themes:
- single-locale, multiple threads
- support for base language features
- designed for correctness over performance
- target audience: HPLS language evaluation team and HPCS mission partners
