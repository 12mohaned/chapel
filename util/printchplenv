#!/usr/bin/env perl

use File::Basename;
use warnings;

$utildirname = dirname($0)."/chplenv";

# $mode can be compiler, runtime, launcher, sh, csh
$first = 1;
$mode = "default";
if( defined $ARGV[0] ) {
  $mode = $ARGV[0];
  $mode =~ s/^-+//;
}

# Are we printing out a path component for lib/gen directories?
$short = 0;
if( $mode eq "default" or
    $mode eq "sh" or
    $mode eq "csh" ) {
    # OK!
} elsif( $mode eq "compiler" or
         $mode eq "runtime" or
         $mode eq "launcher" ) {
    # OK!
    $short = 1;
} elsif( $mode =~ /help/ or $mode eq "h" ) {
  print "Usage: $0 [--compiler|--runtime|--launcher|--sh|--csh\n";
  print "       --compiler - print out path component for compiler objects\n";
  print "       --runtime - print out path component for runtime objects\n";
  print "       --launcher - print out path component for launcher objects\n";
  print "       --sh - print out a sh/bash script to reproduce the environment\n";
  print "       --csh - print out a csh/tcsh script to reproduce the environment\n";
  exit(0);
} else {
  die "Unknown mode $mode";
}

$uname = `uname -a`;

print "uname -a: $uname" if $mode eq "default";

$CHPL_HOME="";
if( defined $ENV{'CHPL_HOME'} ) {
  $CHPL_HOME = $ENV{'CHPL_HOME'};
}

if( $mode eq "default" ) {
  print "CHPL_HOME: $CHPL_HOME\n";
  print "script location: $utildirname\n";
# For sh and csh, we don't print out CHPL_HOME if
# it is the empty string, which isn't a useful setting
# for that environment variable anyway...
} elsif ( $mode eq "sh" and $CHPL_HOME ne "" ) {
  print "export CHPL_HOME=$CHPL_HOME\n";
} elsif ( $mode eq "csh" and $CHPL_HOME ne "") {
  print "setenv CHPL_HOME $CHPL_HOME\n";
}

$hostplatform = `$utildirname/platform --host 1`; chomp($hostplatform);
$hostcompiler = `$utildirname/compiler --host`; chomp($hostcompiler);

if( $mode eq "runtime" ) {
  # Don't print host platform/compiler for runtime
} else {
  printit("CHPL_HOST_PLATFORM", "", $hostplatform);
  printit("CHPL_HOST_COMPILER", "", $hostcompiler);
}

$targplatform = `$utildirname/platform --target`; chomp($targplatform);
$targcompiler = `$utildirname/compiler --target`; chomp($targcompiler);

if( $mode eq "compiler" or $mode eq "launcher" ) {
  # Don't print target platform/compiler for compiler/launcher
} else {
  printit("CHPL_TARGET_PLATFORM", "", $targplatform);
  printit("CHPL_TARGET_COMPILER", "", $targcompiler);
}

$localeModel = `$utildirname/localeModel`; chomp($localeModel);
printit("CHPL_LOCALE_MODEL", "loc", $localeModel);

$comm = `$utildirname/comm`; chomp($comm);
printit("CHPL_COMM", "comm", $comm, "!compiler");
if ($comm eq "none" || $comm eq "ugni") {
} else {
  $commsubstrate = `$utildirname/commSubstrate`; chomp($commsubstrate);
  printit("  CHPL_COMM_SUBSTRATE", "", $commsubstrate, "runtime,launcher");
  if ($comm eq "gasnet") {
    $commsegment = `$utildirname/commSegment`; chomp($commsegment);
    printit("  CHPL_GASNET_SEGMENT", "", $commsegment, "runtime,launcher");
  }
}

$tasks = `$utildirname/tasks`; chomp($tasks);
printit("CHPL_TASKS", "tasks", $tasks, "runtime,launcher");
$threads = `$utildirname/threads`; chomp($threads);
printit("CHPL_THREADS", "", $threads, "runtime,launcher");
$launcher = `$utildirname/launcher`; chomp($launcher);
printit("CHPL_LAUNCHER", "launch", $launcher, "launcher");
$timer = `$utildirname/timers`; chomp($timer);
printit("CHPL_TIMERS", "tmr", $timer, "runtime,launcher");
$mem = `$utildirname/mem`; chomp($mem);
printit("CHPL_MEM", "mem", $mem, "runtime,launcher");
$make = `$utildirname/chplmake`; chomp($make);
if( ! $short ) {
  printit("CHPL_MAKE", "make", $make);
}
$atomics = `$utildirname/atomics`; chomp($atomics);
printit("CHPL_ATOMICS", "atomics", $atomics, "runtime,launcher");
if ($comm eq "none") {
} else {
  $network_atomics = `$utildirname/atomics --network`; chomp($network_atomics);
  printit("  CHPL_NETWORK_ATOMICS", "", $network_atomics, "runtime,launcher");
}
$gmp = `$utildirname/gmp`; chomp($gmp);
printit("CHPL_GMP", "gmp", $gmp, "runtime");
$regexp = `$utildirname/regexp`; chomp($regexp);
printit("CHPL_REGEXP", "re", $regexp, "runtime");
$wide_ptrs = `$utildirname/widePointers`; chomp($wide_ptrs);
printit("CHPL_WIDE_POINTERS", "wide", $wide_ptrs);
$llvm = `$utildirname/llvm`; chomp($llvm);
printit("CHPL_LLVM", "llvm", $llvm, "compiler");
$aux_fs = `$utildirname/auxFilesys`; chomp($aux_fs);
printit("CHPL_AUX_FILESYS", "fs", $aux_fs, "runtime");

if( $short ) {
  print "\n";
}

sub printit {
  # first argument - the environment variable name
  # which might include some spaces for pretty padding 
  # e.g. CHPL_REGEXP or CHPL_TASKS
  my $envname = shift;
  # second argument - a short name for the variable when
  # printing out a configuration path component. In many cases
  # it can be left blank.
  # e.g. re or tasks
  my $shortname = shift;
  # third argument - the value we have configured
  # e.g. re2 or fifo 
  my $value = shift;
  # fourth argument - when printing out a configuration path
  # component, should this configuration end up in launcher,
  # runtime, or compiler?
  # Leave it as "" or not passed for all modes,
  # setting it to "compiler" would mean only for compiler
  # setting it to "launcher,runtime" would mean either of those modes
  my $modeonly = shift;

  $modeonly = "" if not defined $modeonly;

  if( $short ) {
    my @modes = split(/,/, $modeonly);
    my $modematch = 0;
    if( $modeonly eq "" ) {
      $modematch = 1;
    } else {
      for my $m (split(/,/, $modeonly)) {
        if ($m eq $mode) {
          $modematch = 1;
        }
      }
    }
    if( not $modematch ) {
      # print nothing.
    } else {
      print "." if $first != 1;
      # if value begins with shortname,
      # just print value.
      if( $shortname eq "" or
          $shortname eq substr($value, 0, length($shortname)) ) {
        print "$value";
      } else {
        print "$shortname-$value";
      }
      $first = 0;
    }
  } elsif( $mode eq "default" ) {
    print "$envname: $value\n";
  } elsif( $mode eq "sh" ) {
    print "export $envname='$value'\n";
  } elsif( $mode eq "csh" ) {
    print "setenv $envname '$value'\n";
  } else {
    die "Unknown mode $mode";
  }
}
