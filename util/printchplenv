#!/usr/bin/env python
import functools
import optparse
import os
import subprocess
from sys import stdout, path

chplenv_dir = os.path.dirname(__file__)
path.insert(0, os.path.abspath(chplenv_dir))

from chplenv import *

SHORT_NAMES = {
    'CHPL_ORIG_TARGET_COMPILER':  'x',
    'CHPL_TARGET_ARCH'         :  'arch',
    'CHPL_LOCALE_MODEL'        :  'loc',
    'CHPL_COMM'                :  'comm',
    'CHPL_TASKS'               :  'tasks',
    'CHPL_LAUNCHER'            :  'launch',
    'CHPL_TIMERS'              :  'tmr',
    'CHPL_UNWIND'              :  'unwind',
    'CHPL_HOST_MEM'            :  'hostmem',
    'CHPL_TARGET_MEM'          :  'tgtmem',
    'CHPL_MEM'                 :  'mem',
    'CHPL_JEMALLOC'            :  'jemalloc',
    'CHPL_MAKE'                :  'make',
    'CHPL_ATOMICS'             :  'atomics',
    'CHPL_GMP'                 :  'gmp',
    'CHPL_HWLOC'               :  'hwloc',
    'CHPL_REGEXP'              :  're',
    'CHPL_LLVM'                :  'llvm',
    'CHPL_AUX_FILESYS'         :  'fs',
}

CONTENT_ENVS = {
        'compiler': ['CHPL_HOST_PLATFORM',
                     'CHPL_HOST_COMPILER',
                     'CHPL_LLVM'],
        'runtime': ['CHPL_TARGET_PLATFORM',
                    'CHPL_TARGET_COMPILER',
                    'CHPL_TARGET_ARCH',
                    'CHPL_LOCALE_MODEL',
                    'CHPL_COMM',
                    'CHPL_COMM_SUBSTRATE',
                    'CHPL_GASNET_SEGMENT',
                    'CHPL_TASKS',
                    'CHPL_TIMERS',
                    'CHPL_UNWIND',
                    'CHPL_MEM',
                    'CHPL_MAKE',
                    'CHPL_JEMALLOC',
                    'CHPL_ATOMICS',
                    'CHPL_NETWORK_ATOMICS',
                    'CHPL_GMP',
                    'CHPL_HWLOC',
                    'CHPL_REGEXP',
                    'CHPL_AUX_FILESYS'],
        'launcher': ['CHPL_LAUNCHER'], # TODO: More...
        'internal': ['CHPL_JEMALLOC',
                     'CHPL_HOST_MEM',
                     'CHPL_ORIG_TARGET_COMPILER',
                     'CHPL_RUNTIME_SUBDIR',
                     'CHPL_LAUNCHER_SUBDIR',
                     'CHPL_COMPILER_SUBDIR',
                     'CHPL_GMP_UNIQ_CFG_PATH',
                     'CHPL_HWLOC_UNIQ_CFG_PATH',
                     'CHPL_JEMALLOC_UNIQ_CFG_PATH',
                     'CHPL_LIBUNWIND_UNIQ_CFG_PATH',
                     'CHPL_MASSIVETHREADS_UNIQ_CFG_PATH',
                     'CHPL_QTHREAD_UNIQ_CFG_PATH',
                     'CHPL_RE2_UNIQ_CFG_PATH',
                     'CHPL_THIRD_PARTY_LINK_ARGS']
        }

def printchplenv(contents, print_filters=['tidy'], print_format='pretty'):

    print_env = functools.partial(print_var, print_format=print_format)
    #print_var.first_time = True

    # It'd be cool if we could do this:
    #envs = []

    #for env in [CONTENT_ENVS[c] for c in contents]:
    #    envs.extend(env)

    #for env in envs:
    #    print_env(env, 1)

    """
    [filter]
    --[no-]tidy  (default) [don't] omit sub-variables irrelevant to the current
                  configuration
    --anonymize  avoid printing machine specific details such as host name and
                 file paths
    --overrides  only show variables that have been user supplied
                 via environment or chplconfig
    """

    if 'overrides' in print_filters:
        for (var, value) in overrides.items():
            if 'anonymize' in print_filters and var == 'CHPL_HOME':
                # don't print CHPL_HOME if --anonymize is set.
                pass
            else:
                print_env(var, value)
        return

    llvm_codegen = "CHPL_LLVM_CODEGEN" in os.environ

    # If we're doing an LLVM build, set CHPL_TARGET_COMPILER to clang-included
    # and set CHPL_ORIG_TARGET_COMPILER to whatever we would have used
    # otherwise.
    # This happens early because it modifies the environment and other
    # defaults might depend on this setting.
    orig_target_compiler = ""
    if 'internal' in contents:
      orig_target_compiler = chpl_compiler.get('target', llvm_mode='orig')
      new_target_compiler = chpl_compiler.get('target')
      os.environ["CHPL_ORIG_TARGET_COMPILER"] = orig_target_compiler
      if llvm_codegen:
        if new_target_compiler != 'clang-included':
          # This error indicates something about chplenv (probably
          # chpl_compiler.py) is not working correctly with LLVM mode.
          raise ValueError('LLVM mode but target compiler is set incorrectly')


    chpl_home = chpl_home_utils.get_chpl_home()

    # Header & CHPL_HOME
    # TODO: Should CHPL_HOME have a --home flag?
    if 'anonymize' not in print_filters:
        if print_format == 'pretty':
            stdout.write("machine info: {0} {1} {2} {3} {4}\n".format(*os.uname()))
            print_env('CHPL_HOME', chpl_home)
            this_dir = os.path.realpath(os.path.dirname(__file__))
            stdout.write("script location: {0}\n".format(this_dir))
        elif chpl_home and print_format == 'simple':
            print_env('CHPL_HOME', chpl_home)

    if 'compiler' in contents:
        host_platform = chpl_platform.get('host')
        host_compiler = chpl_compiler.get('host')

        print_env('CHPL_HOST_PLATFORM', host_platform)
        print_env('CHPL_HOST_COMPILER', host_compiler)

    if 'runtime' in contents:
        target_platform = chpl_platform.get('target')
        target_compiler = chpl_compiler.get('target')

        print_env('CHPL_TARGET_PLATFORM', target_platform)
        print_env('CHPL_TARGET_COMPILER', target_compiler)

    if 'internal' in contents:
        print_env('CHPL_ORIG_TARGET_COMPILER', orig_target_compiler)


    # TODO - make this independent of print_format
    get_module_lcd = (chpl_home_utils.using_chapel_module() and
                     ('runtime' in contents or print_format == 'make') )
    if 'runtime' in contents:
        target_arch = chpl_arch.get('target', print_format == 'make', get_module_lcd)
        print_env('CHPL_TARGET_ARCH', target_arch)

        locale_model = chpl_locale_model.get()
        print_env('CHPL_LOCALE_MODEL', locale_model)

        comm = chpl_comm.get()
        print_env('CHPL_COMM', comm)

        comm_substrate = chpl_comm_substrate.get()
        comm_segment = chpl_comm_segment.get()
        if 'tidy' in print_filters:
            if comm != 'none' and comm != 'ugni':
                print_env('  CHPL_COMM_SUBSTRATE', comm_substrate)
            if comm == 'gasnet':
                print_env('  CHPL_GASNET_SEGMENT', comm_segment)
        else:
            print_env('  CHPL_COMM_SUBSTRATE', comm_substrate)
            print_env('  CHPL_GASNET_SEGMENT', comm_segment)

        tasks = chpl_tasks.get()
        print_env('CHPL_TASKS', tasks)

    if 'launcher' in contents:
        launcher = chpl_launcher.get()
        print_env('CHPL_LAUNCHER', launcher)

    if 'runtime' in contents:
        timers = chpl_timers.get()
        print_env('CHPL_TIMERS', timers)

        unwind = chpl_unwind.get()
        print_env('CHPL_UNWIND', unwind)

    target_mem = chpl_mem.get('target')

    if 'internal' in contents:
        host_mem = chpl_mem.get('host')
        print_env('CHPL_HOST_MEM', host_mem)
        print_env('CHPL_TARGET_MEM', target_mem)

    if 'runtime' in contents:
        print_env('CHPL_MEM', target_mem)

    if 'internal'in contents:
        jemalloc = chpl_jemalloc.get()
        print_env('  CHPL_JEMALLOC', jemalloc)

    if 'runtime' in contents:
        make = chpl_make.get()
        print_env('CHPL_MAKE', make)

        atomics = chpl_atomics.get()
        print_env('CHPL_ATOMICS', atomics)

        net_atomics = chpl_atomics.get('network')
        if 'tidy' in print_filters:
            if comm != 'none':
                print_env('  CHPL_NETWORK_ATOMICS', net_atomics)
        else:
            print_env('  CHPL_NETWORK_ATOMICS', net_atomics)

        gmp = chpl_gmp.get()
        print_env('CHPL_GMP', gmp)

        hwloc = chpl_hwloc.get()
        print_env('CHPL_HWLOC', hwloc)

        regexp = chpl_regexp.get()
        print_env('CHPL_REGEXP', regexp)

    if 'internal' in contents:
        enable_llvm = chpl_llvm.get()
        print_env('CHPL_LLVM', enable_llvm)

    if 'runtime' in contents:
        aux_filesys = chpl_aux_filesys.get()
        tmp = aux_filesys.split(' ')
        tmp.sort()
        aux_filesys = "_".join(tmp)
        print_env('CHPL_AUX_FILESYS', aux_filesys)

    # TODO: Find a way to support these with print_env
    if 'internal' in contents:
        stdout.write('CHPL_MAKE_RUNTIME_SUBDIR=')
        printchplenv(['runtime'], print_format='path')
        stdout.write('CHPL_MAKE_LAUNCHER_SUBDIR=')
        printchplenv(['launcher'], print_format='path')

    # 'simple' does not need these values
    if 'internal' in contents:
        stdout.write('CHPL_MAKE_COMPILER_SUBDIR=')
        printchplenv(['compiler'], print_format='path')

        link_args_3p = []

        print_env('  CHPL_GMP_UNIQ_CFG_PATH',
                  chpl_3p_gmp_configs.get_uniq_cfg_path())
        link_args_3p.extend(chpl_3p_gmp_configs.get_link_args(gmp))

        print_env('  CHPL_HWLOC_UNIQ_CFG_PATH',
                  chpl_3p_hwloc_configs.get_uniq_cfg_path())
        link_args_3p.extend(chpl_3p_hwloc_configs.get_link_args(hwloc))

        print_env('  CHPL_JEMALLOC_UNIQ_CFG_PATH',
                  chpl_3p_jemalloc_configs.get_uniq_cfg_path())
        link_args_3p.extend(chpl_3p_jemalloc_configs.get_link_args(jemalloc))

        print_env('  CHPL_LIBUNWIND_UNIQ_CFG_PATH',
                  chpl_3p_libunwind_configs.get_uniq_cfg_path())
        link_args_3p.extend(chpl_3p_libunwind_configs.get_link_args(unwind))

        print_env('  CHPL_MASSIVETHREADS_UNIQ_CFG_PATH',
                  chpl_3p_massivethreads_configs.get_uniq_cfg_path())
        if tasks == 'massivethreads':
            link_args_3p.extend(chpl_3p_massivethreads_configs.get_link_args())

        print_env('  CHPL_QTHREAD_UNIQ_CFG_PATH',
                  chpl_3p_qthreads_configs.get_uniq_cfg_path())
        if tasks == 'qthreads':
            link_args_3p.extend(chpl_3p_qthreads_configs.get_link_args())

        print_env('  CHPL_RE2_UNIQ_CFG_PATH',
                  chpl_3p_re2_configs.get_uniq_cfg_path())
        if regexp == 're2':
            link_args_3p.extend(chpl_3p_re2_configs.get_link_args())

        link_args_3p_dedup=[]
        for arg in reversed(link_args_3p):
            if arg not in link_args_3p_dedup:
                link_args_3p_dedup.append(arg)
        print_env('  CHPL_THIRD_PARTY_LINK_ARGS',
                  ' '.join(reversed(link_args_3p_dedup)))

    if print_format == 'path':
        stdout.write('\n')



"""
  [format]
  --pretty     (default) print variables in format: CHPL_KEY: VALUE
               indicating which options are set by environment variables (*)
               and which are set by configuration files (+)
  --simple     print variables in format: CHPL_KEY=VALUE
               output is compatible with chplconfig format
  --make       print variables in format: CHPL_MAKE_KEY=VALUE
  --path       print variables in format: VALUE1/VALUE2/...
"""
def print_var(env_var, value, print_format=None):
    env = env_var.strip()
    if print_format == 'pretty':
        user_set = overrides.get_environ(env, '')
        if user_set:
          user_set = ' *'
        else:
          user_set = overrides.get_chplconfig(env, '')
          if user_set:
            user_set = ' +'
        stdout.write("{1}: {2}{0}\n".format(user_set, env_var, value))
    elif print_format == 'simple':
        stdout.write("{0}={1}\n".format(env, value))
    elif print_format == 'make':
        make_env_var = env_var.replace("CHPL_", "CHPL_MAKE_", 1).lstrip()
        stdout.write("{0}={1}\n".format(make_env_var, value))
    elif print_format == 'path':
        if env in SHORT_NAMES.keys():
            stdout.write("{0}-{1}".format(SHORT_NAMES[env], value))
        else:
            stdout.write("{0}/".format(value))
        stdout.write("/")
    else:
        raise ValueError("Invalid format '{0}'".format(print_format))


"""Define the help message"""
def print_help():
    help_string = """Usage: printchplenv [options]

Print the current Chapel configuration. Arguments allow selectiion of
what gets printed [content], how it gets printed [format], and what gets
filtered [filter].

The default [content] arguments are: --runtime --launcher

Options:
  -h, --help   show this help message and exit

  [shortcut]
  --all        shortcut for --compiler --runtime --launcher

  [content]
  --compiler    Select variables describing the configuration of the compiler
  --runtime     Select variables describing the configuration of the runtime
  --launcher    Select variables describing the configuration of the compiler
  --internal    Select additional variables used during builds

  [filter]
  --[no-]tidy  (default) [don't] omit sub-variables irrelevant to the current
                configuration
  --anonymize  avoid printing machine specific details such as host name and
               file paths
  --overrides  only show variables that have been user supplied
               via environment or chplconfig

  [format]
  --pretty     (default) print variables in format: CHPL_KEY: VALUE
               indicating which options are set by environment variables (*)
               and which are set by configuration files (+)
  --simple     print variables in format: CHPL_KEY=VALUE
               output is compatible with chplconfig format
  --make       print variables in format: CHPL_MAKE_KEY=VALUE
  --path       print variables in format: VALUE1/VALUE2/...
"""
    stdout.write(help_string)


"""Define argument to parse"""
def parse_args():
    parser = optparse.OptionParser(
        usage='usage: %prog [options]',
        description = 'Print the current Chapel configuration. Arguments allow selectiion of'
            'what gets printed [content], how it gets printed [format], and what gets'
            'filtered [filter].')

    #[shortcut]
    parser.add_option('--all', action='append_const',dest='content', const=['compiler', 'runtime','launcher'])

    #[content]
    parser.set_defaults(content=['runtime', 'launcher'])
    parser.add_option('--compiler', action='append_const',dest='content', const='compiler')
    parser.add_option('--runtime',  action='append_const',dest='content', const='runtime')
    parser.add_option('--launcher', action='append_const',dest='content', const='launcher')
    parser.add_option('--internal', action='append_const',dest='content', const='internal')

    #[filter]
    parser.set_defaults(filter=[])
    parser.add_option('--tidy',      action='store_true',   dest='tidy')
    parser.add_option('--no-tidy',   action='store_false',  dest='tidy')
    parser.add_option('--anonymize', action='append_const', dest='filter', const='anonymize')
    parser.add_option('--overrides', action='append_const', dest='filter', const='overrides')

    #[format]
    parser.set_defaults(format='pretty')
    parser.add_option('--pretty', action='store_const', dest='format', const='pretty')
    parser.add_option('--simple', action='store_const', dest='format', const='simple')
    parser.add_option('--make',   action='store_const', dest='format', const='make')
    parser.add_option('--path',   action='store_const', dest='format', const='path')

    # Hijack the help message
    parser.print_help = print_help

    return parser.parse_args()


if __name__ == '__main__':

    (options, args) = parse_args()

    # Default [filter]
    if not options.tidy == False:
        options.filter.append('tidy')

    printchplenv(options.content, options.filter, options.format)

