#!/usr/bin/env perl
#
# Second version of computePerfStats by Hannah Hemmaplardh
# Original version by Sung-Eun Choi
#
# computePerfStats is called by sub_test which is called by 
# start_test, if run with -performance.
#
# For every performance run on a particular file, this script 
# maintains a .dat by searching the output of the run for values 
# of performance keys specified in .perfkeys. It then writes 
# these values to the .dat for every run.  It also creates a .gif 
# based on the .dat and .graph via gnuplot, then puts it in perfdir 
# (by default ./perfdat/<machine>).
#
# .graph usage:
# -- to specify which performance keys are to be graphed, 
#    in .graph should be the line:
#    keys: key1, key2, key3
#    where key1, key2 and key3 are all keys in .perfkeys.
#
# -- to specify the name of the output graph file, 
#    in .graph should be the line:
#    graph_name: foo
#    such that foo.gif will be put in perfdir at end of run
#
# -- to specify the title of the graph,
#    in .graph should be the line:
#    title: Title
#
# -- to specify the y-axis label of the graph, 
#    in .graph should be the line:
#    ylabel: Performance
#
#
# If want to specify more than one set of keys per .perfkeys, such 
# that each set of keys corresponds to its own graph, please specify 
# the keys to be graphed first, followed by any lines pertaining to 
# the above keys, then the next set of keys in the following line 
# (with the lines pertaining to those keys in the following lines).
#
# Sets of keys and their attributes can be line separated,
# but no line separation within a set of keys and its own attributes.
#
# an empty .graph will graph all keys in .perfkeys, with default title, 
# name, and y-axis label.

use Text::ParseWords;
#use strict;
$testname = $ARGV[0];
$outputdir = $ARGV[1];

my $key_file = "$testname.perfkeys";
my $test_output_file = "$testname.exec.out.tmp";
my $data_file = "$outputdir/$testname.dat";
my $graph_file = "$testname.graph";
my $gpl_file = "$outputdir/$testname.gpl";
my $gif_file = "$outputdir/$testname.gif";
my $errors_file = "$outputdir/$testname.errors";
my $fatal_errors = 0;

# open a fresh .errors file for writing ..
if (-e "$errors_file") {
    system("rm $errors_file");
}
open ERRORS, ">$errors_file" or die "can't open $errors_file for creating $!";

# get keys from .perfkeys
open KEYS, "$key_file" or die "can't open $key_file $!";
my @keys = <KEYS>;
close (KEYS);
foreach my $key (@keys) {
    chomp($key);
}
print ERRORS "processed $key_file\n";

# get lines from output file
open TEST, "$test_output_file" or die "can't open $test_output_file $!";
my @file_lines = <TEST>;
close (TEST);
print ERRORS "processed $test_output_file\n";

# if this is first performance run, create the .dat
if (-e "$data_file") {
} else {
    open STATS, ">$data_file" or die "can't open $data_file for creating $!";
    print ERRORS "created $data_file\n";
    print STATS "# Date";
    foreach my $key (@keys) {
        print STATS "\t$key";
    }
    print STATS "\n";
    close (STATS);
}

# write new data to the .dat
open STATS, ">>$data_file" or die "can't open $data_file for appending $!";
print ERRORS "appending $data_file\n";

my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime time;

$mon += 1;
$year -= 100;

# check all output lines for values following keys, values get written to the .dat
my $foundEverything = 1;
printf STATS "%.2d/%.2d/%.2d ", $mon, $mday, $year;
foreach my $key (@keys) {
    print "Looking for $key...";
    print STATS "\t";
    my $found = 0;
    foreach my $line (@file_lines) {
        if ($line =~ m/\Q$key\E(\s*)(\S*)/ && $found == 0) {
            print "found it: $2\n";
            print STATS "$2";
            $found = 1;
        }
    }
    if ($found == 0) {
        print STATS "-";
        print "didn't find it\n";
        $foundEverything = 0;
    }
}
print STATS "\n";

if ($foundEverything != 1) {
    print "output was:\n";
    system("cat $testname.exec.out.tmp");
    exit 1;
} 

# get start date (date of first performance run)
open STATS, "$data_file" or die "can't open $data_file $!";
my @stat_lines = <STATS>;
my $first_line = @stat_lines[1];
my @first_words = parse_line('\t', 0, $first_line);
my $start_date = @first_words[0];

# if no .graph, assume they don't want one and exit
open GRAPH_LINES, "$graph_file" or exit 0; 
my $custom = 0;    

# setting default arguments to makeGraph (if graph info not
# specified in the .graph)
my @graph_keys = @keys;
my $graph_name = $testname;
my $title = "$testname performance over time";
my $ylabel = "performance";

my @graph_keys_non_perf;

# process .graph, if exists
while ($line = <GRAPH_LINES>) {
    chomp($line);
    my @words = (split / /, $line);
    if (@words[0] eq "keys:") {
	my $graph_keys_line = join(" ", @words[1..$#words]);
	@graph_keys = split(/, /, $graph_keys_line);

	$line = <GRAPH_LINES>;
	chomp($line);
	@words = (split / /, $line);
	while (@words[0] && (@words[0] ne "keys:")) {
            if (@words[0] eq "graph_name:") {
	        $graph_name = @words[1];
	    } elsif (@words[0] eq "title:") {
		$title = join(" ", @words[1..$#words]);
	    } elsif (@words[0] eq "ylabel:")  {
		$ylabel = join(" ", @words[1..$#words]);
	    } elsif (@words[0] eq "keys(non-perf):") {
		my $graph_keys_non_perf_line = join(" ", @words[1..$#words]);
		@graph_keys_non_perf = split(/, /, $graph_keys_non_perf_line);
	    } else {
	 	print "improper format of $graph_file, exiting\n";
		exit 1;
	    } 
	    $line = <GRAPH_LINES>;
            chomp($line);
	    @words = (split / /, $line);
	}
    } else {
	while (@words[0] && (@words[0] ne "keys:")) {
            if (@words[0] eq "graph_name:") {
	        $graph_name = @words[1];
	    } elsif (@words[0] eq "title:") {
		$title = join(" ", @words[1..$#words]);
	    } elsif (@words[0] eq "ylabel:")  {
	        $ylabel = join(" ", @words[1..$#words]);
	    } elsif (@words[0] eq "kv-pair:") {
		my $graph_keys_non_perf_line = join(" ", @words[1..$#words]);
		@graph_keys_non_perf = split(/, /, $graph_keys_non_perf_line);
	    } else {
		print "improper format of $graph_file, exiting\n";
		exit 1;
	    }
	    $line = <GRAPH_LINES>;
	    chomp($line);
	    @words = split(/ /, $line);
	}
    }
    &makeGraph($graph_name, $title, $ylabel, @graph_keys);
    $custom = 1;
}
if (!$custom) {
    &makeGraph($graph_name, $title, $ylabel, @graph_keys);
}

# makeGraph outputs a .gif in perfdir (by default ./perfdat/<machine>) via gnuplot
sub makeGraph {
    my($graph_name, $title, $ylabel, @graph_keys) = @_;

    print ERRORS "in makeGraph:\n";
    print ERRORS "    graph_name = $graph_name\n";
    print ERRORS "    title = $title\n";
    print ERRORS "    ylabel = $ylabel\n";
    foreach my $graph_key (@graph_keys) {
	print ERRORS "    key = $graph_key\n";
    }

    open GNUPLOT_COMMANDS, ">$gpl_file" or die "can't open $gpl_file for creating $!";
    print GNUPLOT_COMMANDS "set terminal gif\n"; 
    print GNUPLOT_COMMANDS "set size 1, 1\n";
    print GNUPLOT_COMMANDS "set xdata time\n";
    print GNUPLOT_COMMANDS "set timefmt \"%m/%d/%y\"\n";
    print GNUPLOT_COMMANDS "set format x \"%m/%d/%y\"\n";
    print GNUPLOT_COMMANDS "set xlabel \"date (MM/DD/YY)\"\n";
    print GNUPLOT_COMMANDS "set key left\n";
    print GNUPLOT_COMMANDS "set ylabel \"$ylabel\"\n";
    print GNUPLOT_COMMANDS "set xrange [\"$start_date\":*]\n";
    print GNUPLOT_COMMANDS "set yrange [0:*]\n";  
    print GNUPLOT_COMMANDS "set title \"$title\"\n";
    print GNUPLOT_COMMANDS "set output \"$outputdir/$graph_name.gif\"\n";
    print "[graph file: $outputdir/$graph_name.gif]\n";
    print GNUPLOT_COMMANDS "plot \\\n";

    my $i = 0;
    my $line_type;
    foreach my $graph_key (@graph_keys[0..$#graph_keys]) {
        my $key_index = 0;
        $line_type = ($i % 8) + 1; # line_types from 1 to 8
 	while (($key_index <= $#keys) && ($graph_key ne @keys[$key_index])) {
	    if ($key_index == $#keys) {
		print "$graph_key does not match any key in $key_file\n";
		exit 1;
	    }
            $key_index++;
	}
 	my $column_index = $key_index + 2;
	#$graph_key = substr $graph_key, 0, -2;

        if ($graph_key ne @graph_keys[$#graph_keys]) {
            print GNUPLOT_COMMANDS "\t\"$data_file\" using 1:$column_index title '$graph_key' with linespoints lt $line_type pt 4, \\\n";
        } else {
            print GNUPLOT_COMMANDS "\t\"$data_file\" using 1:$column_index title '$graph_key' with linespoints lt $line_type pt 4\n";
	}
	print ERRORS "$data_file using 1:$column_index title '$graph_key' with linespoints lt $line_type pt 4, \\\n";

        $i++;
    }

    close(GNUPLOT_COMMANDS);
    system("module load gnuplot");
    my $succeed_gnuplot = system("gnuplot $gpl_file");
    if ($succeed_gnuplot == -1) {
	print ERRORS "******** failed to load gnuplot module ********\n";
	$fatal_errors++;
    }
    close(ERRORS);

    system("rm $gpl_file");
    if ($fatal_errors == 0) {
        print "[No fatal errors, success loading gnuplot]\n";
	#system("rm $errors_file");
    }
}
