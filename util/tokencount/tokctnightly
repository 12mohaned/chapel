#!/usr/bin/perl

$printusage = 0;
if (@ARGV) {
    $debugflag = shift @ARGV;
    if ($debugflag eq "-debug") {
	$debug = 1;
    } elsif ($debugflag eq "-cron") {
	$debug = 0;
    } else {
	$printusage = 1;
    }
} else {
    $printusage = 1;
}

if (@ARGV) {
    $statdate = shift @ARGV;
    $cvsdate = "$statdate 00:00:01";
} else {
    $statdate = `date +%D`; chomp($statdate);
    $cvsdate = $statdate;
}

if ($printusage == 1) {
    print "nightly [-debug|-cron] {date}\n";
    exit 1;
}


#
# get uniquifiers
#
$id = getpgrp();
$today = `date +%w-%a`; chomp($today);


#
# directory locations
#
$tmpdir = "/tmp/chapel-tokctnightly.$id.deleteme";
$chapeldir = "$tmpdir/chapel";
$logdir = "~bradc/chapel/test/Logs/Nightly";
$statdir = "$logdir/Stats";
if ($debug == 1) {
    $statfile = "$statdir/tokctnightly.debug.dat";
} else {
    $statfile = "$statdir/tokctnightly.cron.dat";
}
$tokctdir = "~bradc/chapel/util/tokencount";
$tokctr = "$tokctdir/tokencount.cron";


$somethingfailed = 0;

#
# make temp directory
#
mysystem("mkdir $tmpdir > /dev/null", "creating temp dir", 1, 1);

#
# checkout sources
#

mysystem("cd $tmpdir && cvs -d ~bradc/CVS checkout -D \"$cvsdate\" chapel", "cvs checkout", 1, 1);

$allcppfiles = "`find -name '*.cpp'` `find -name '*.c'` `find -name '*.h'`";
$compdir = "$tmpdir/chapel/compiler";

# remove generated files
mysystem("cd $compdir && rm -f */*.g.d_parser.cpp vparser/cast_code.cpp analysis/prim_data.h analysis/prim_data.cpp");

mysystem("cd $compdir/AST && $tokctr $allcppfiles > ../AST.ntoks");
mysystem("cd $compdir/adt && $tokctr $allcppfiles > ../adt.ntoks");
mysystem("cd $compdir/analysis && $tokctr $allcppfiles > ../analysis.ntoks");
mysystem("cd $compdir/backend && $tokctr $allcppfiles > ../backend.ntoks");
mysystem("cd $compdir/include && $tokctr $allcppfiles > ../include.ntoks");
mysystem("cd $compdir/main && $tokctr $allcppfiles > ../main.ntoks");
mysystem("cd $compdir/parser && $tokctr $allcppfiles > ../parser.ntoks");
mysystem("cd $compdir/passes && $tokctr $allcppfiles > ../passes.ntoks");
mysystem("cd $compdir/traversals && $tokctr $allcppfiles > ../traversals.ntoks");
mysystem("cd $compdir/util && $tokctr $allcppfiles > ../util.ntoks");
mysystem("cd $compdir/vparser && $tokctr $allcppfiles > ../vparser.ntoks");
mysystem("cd $tmpdir/chapel/runtime && $tokctr $allcppfiles > runtime.ntoks");

$asttoks = `cat $compdir/AST.ntoks`; chomp($asttoks);
$adttoks = `cat $compdir/adt.ntoks`; chomp($adttoks);
$analysistoks = `cat $compdir/analysis.ntoks`; chomp($analysistoks);
$backendtoks = `cat $compdir/backend.ntoks`; chomp($backendtoks);
$includetoks = `cat $compdir/include.ntoks`; chomp($includetoks);
$maintoks = `cat $compdir/main.ntoks`; chomp($maintoks);
$parsertoks = `cat $compdir/parser.ntoks`; chomp($parsertoks);
$passestoks = `cat $compdir/passes.ntoks`; chomp($passestoks);
$traversalstoks = `cat $compdir/traversals.ntoks`; chomp($traversalstoks);
$utiltoks = `cat $compdir/util.ntoks`; chomp($utiltoks);
$vparsertoks = `cat $compdir/vparser.ntoks`; chomp($vparsertoks);
$runtimetoks = `cat $tmpdir/chapel/runtime/runtime.ntoks`; chomp($runtimetoks);

if ($asttoks == "") {
    $asttoks = 0;
}
if ($adttoks == "") {
    $adttoks = 0;
}
if ($analysistoks == "") {
    $analysistoks = 0;
}
if ($backendtoks == "") {
    $backendtoks = 0;
}
if ($includetoks == "") {
    $includetoks = 0;
}
if ($maintoks == "") {
    $maintoks = 0;
}
if ($parsertoks == "") {
    $parsertoks = 0;
}
if ($passestoks == "") {
    $passestoks = 0;
}
if ($traversalstoks == "") {
    $traversalstoks = 0;
}
if ($utiltoks == "") {
    $utiltoks = 0;
}
if ($vparsertoks == "") {
    $vparsertoks = 0;
}
if ($runtimetoks == "") {
    $runtimetoks = 0;
}
$comptoks = 0;
$fetoks = 0;

`echo -n "$statdate" >> $statfile`;
`echo -n "\t-\t-\t-" >> $statfile`;

$tot = 0;

$tot += $utiltoks;
emit($tot);
$tot += $adttoks;
emit($tot);
$tot += $vparsertoks;
emit($tot);
$tot += $maintoks;
emit($tot);
$tot += $passestoks;
emit($tot);
$tot += $parsertoks;
emit($tot);
$tot += $asttoks;
emit($tot);
$tot += $traversalstoks;
emit($tot);
$tot += $analysistoks;
emit($tot);
$tot += $backendtoks;
emit($tot);
$tot += $includetoks;
emit($tot);
$tot += $runtimetoks;
emit($tot);

`echo -n "\n" >> $statfile`;


#
# sort output
#


if (0) {
#
# write stats and build new graph
#
if ($knownumtests == 1) {
    $testcol = "$newnumtests";
} else {
    $testcol = "-";
}
if ($stdstatus == 0) {
    $stdcol = "$newstdsucc";
} else {
    $stdcol = "-";
}
if ($vgrstatus == 0) {
    $vgrcol = "$newvgrsucc";
} else {
    $vgrcol = "-";
}
`echo "$statdate\t-\t$testcol\t$stdcol\t$vgrcol" >> $statfile`;
if ($debug == 0) {
    `ci -l -m"automated nightly checkin" $statfile`;
}
`cd $statdir && ./makeplot`;
}

#
# clean up
#
if (1 || $somethingfailed == 0) {
    mysystem("rm -rf $tmpdir", "removing temp dir", 0, 1);
}

exit 0;


#
# subroutines
#

sub mysystem {
    $command = $_[0];
    $errorname = $_[1];
    $fatal = $_[2];
    $mailmsg = $_[3];

    $status = system($command);
    if ($status != 0) {
	$somethingfailed = 1;
        $status = $status / 256;
	print "Error $_[1]: $status\n";

	if ($mailmsg != 0) {
	    open(MAIL, $mailcommand);
	    print MAIL "=== Summary ===================================================\n";
	    print MAIL "ERROR $_[1]: $status\n";
	    print MAIL "(workspace left at $tmpdir)\n";
	    print MAIL "===============================================================\n";
	    close(MAIL);
	}

	if ($fatal != 0) {
	    `echo "$statdate\t1" >> $statfile`;
	    if ($debug == 0) {
		`ci -l -m"automated nightly checkin" $statfile`;
	    }
	    `cd $statdir && ./makeplot`;
	    exit 1;
	}
    }
    $status;
}


sub emit {
    $toks = $_[0];
    `echo -n "\t" >> $statfile`;
    if ($toks == 0) {
	`echo -n "-" >> $statfile`;
    } else {
	`echo -n "$toks" >> $statfile`;
    }
}
