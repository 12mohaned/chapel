bug: destructured indices used in parallel contexts

This bug has to do with the destructured indices not being put on the heap.

bug: private coforall indices

It seems that in a coforall, we have a race in which multiple iterations
of the loop do redundant work (and other iterations are undone).  I'm
fairly certain that this is because coforall indices are not being made
local consts to each iteration -- that if a little enough amount of work
is in the loop, one thread will read the loop counters of the next.
This is a transformation that should probably be only done for coforall
loops since we want the logical private const index variables of for and
forall loops to be implemented with variables that are reused from one
iteration to the next.
