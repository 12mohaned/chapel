Function Class:

var s, d: FTree

initialize
init_quadrature
make_dc_periodic

copy
skeletonCopy

project(curNode)
  returns 1..k vector of coefficients

refine(curNode)
  calls project on each child of a node to get coeffs
  apply two-scale relationship on coeffs of children to get diff coeffs
  if norm of diff coeffs less than thresh or at max_level
    then set coeffs of children of current node in s to coeffs
    else refine each child

this(x)
  checks if function is compressed; reconstruct if it is
  returns the result of the call to evaluate with root node and x

evaluate(curNode, x)
  if curNode has coeffs, return inner product of coeffs and phi(x,k)
  else descend tree looking for box containing x

compress(curNode)
  check if compressed; return if so
  if children do not have coefficients, compress each child
  apply two-scale relationship to coeffs of children
  set coeffs of s and d to result
  remove children
  if at root level set compressed to true

reconstruct(curNode)
  if not compressed return
  if d has coeffs at curNode
    compute two-scale relationship and set s coeffs of children to result
    call reconstruct on children
  if at root level set compress to false

recur_down(curNode)
  apply two-scale relationship to coeffs of s at curNode to compute new coeffs
  set s coeffs of children to new coeffs

get_coeffs(curNode)
  search up the tree for coeffs:
    if at boundary, return vector of zero coeffs
    if go beyond root node, stop and return None
    stop when find coeffs
  call recur down from node with coeffs to curNode
  return coeffs at curNode

diff()
  diffHelper(curNode, result)
    if no s coeffs at curNode then call diffHelper on children
    get s coeffs of neighbors of curNode
    if neighbor coeffs exist, compute differentiation and store in result
    else 
      recur down
      call diffHelper on children
  if compressed call reconstruct
  make skeleton copy of this function for result
  call diffHelper with root node and result
  clean up
  return result
  
