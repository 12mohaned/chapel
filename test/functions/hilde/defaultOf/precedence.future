bug: _defaultOf() should take precedence over the user-defined default constructor.

In the current implementation, when the PRIM_INIT primitive is resolved during
function resolution, the compiler first checks to see if a user-defined default
constructor exists for that type.  If so, the primitive is replaced with a call
to that user-defined default constructor.  If not, the primitive is replaced
with a call to _defaultOf() for that type.

For a record type, the compiler-supplied (default) implementation of
_defaultOf() calls the compiler-supplied all-fields constructor passing no
arguments.  Thus, the "normal" flow is that in order to obtain an initial value
for a type:
 - the compiler calls _defaultOf()
 - _defaultOf() calls the default-constructor*

According to this flow, the user expects that overriding the compiler-supplied
_defaultOf() will give him control over whether the default constructor is
called.  But when a user-supplied default constructor is present, this
assumption proves to be wrong.  For regularity, it is desirable to give
_defaultOf() greater precedence, so its compiler-supplied definition can always
be described in terms of a default constructor call -- whether or not that
default constructor is user-supplied.


The reason why _defaultOf() didn't "just work" in the last release is that it
was implemented by binding directly to the compiler-supplied all-fields
constructor for that type.  When a user-defined constructor is present, we would
actually like to bind to that one -- by name (i.e. through the normal resolution
process), rather than directly (through a defaultInitializer pointer stashed in
the AggregateType descriptor itself).


The "correct" solution involves two steps:
 1. Replace the code that binds the all-fields default constructor directly with
    code that calls the default constructor by name.  The existing code starts
    ca. line 980 in buildDefaultFunctions.cpp (in build_record_init_function()).
 2. Remove the call to the user-defined default constructor that is inserted
    during the resolution of PRIM_INIT, so that _defaultOf() is always used to
    resolve that primitive.

It would be nice if it were possible to resolve constructor calls entirely by
name.  Then, the implementation of _defaultOf() for records would be very simple
indeed.  I suspect, however, that a certain amount of type resolution has to be
complete before the a default constructor is called.  That is because generic
arguments have to be passed along after the type itself is resolved.

Which means that the solution probably involves inventing yet another primitive,
to represent the default constructor call.  The code currently in place to
resolve PRIM_INIT calls is currently doing double-duty -- representing both
_defaultOf() and default-constructor calls.  Adding the new primitive would
allow these two cases to be split.  Then, the new primitive would take the place
of the defaultInitializer call in the code that is built up in
build_record_init_function().  Voila.


* The default-constructor is a constructor that can be called with an empty
  argument list.  (It must be unique or an ambiguous resolution error will occur.)
