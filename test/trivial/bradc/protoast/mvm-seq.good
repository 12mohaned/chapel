;
complex;
function +( x: complex;
 y: complex): ??? {

return complex((x.re+y.re), (x.im+y.im));
}


function -( x: complex;
 y: complex): ??? {

return complex((x.re-y.re), (x.im-y.im));
}


function *( x: complex;
 y: complex): ??? {

return complex(((x.re*y.re)-(x.im*y.im)), ((x.im*y.re)+(x.re*y.im)));
}


function /( x: complex;
 y: complex): ??? {

return Let Expr;
}


function +( x: complex;
 y: float): ??? {

return complex((x.re+y), x.im);
}


function +( x: float;
 y: complex): ??? {

return complex((x+y.re), y.im);
}


function -( x: complex;
 y: float): ??? {

return complex((x.re-y), x.im);
}


function -( x: float;
 y: complex): ??? {

return complex((x-y.re), (-y.im));
}


function *( x: complex;
 y: float): ??? {

return complex((x.re*y), (x.im*y));
}


function *( x: float;
 y: complex): ??? {

return complex((x*y.re), (x*y.im));
}


function /( x: complex;
 y: float): ??? {

return complex((x.re/y), (x.im/y));
}


function /( x: float;
 y: complex): ??? {

return Let Expr;
}


var m: integer = 100;
var n: integer = 200;
var Mat: domain(2) = [1..m, 1..n];
var Col: domain(2) = [*, 1..n];
var Row: domain(2) = [1..m, *];
var A: [Mat] float;
var y: [Col] float;
var x: [Row] float;
A = [var i: integer;, var j: integer;:Mat] (((i-1)*n)+j);
y = [var i: integer;:Col] i;
