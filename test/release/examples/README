============================================
Chapel Examples Directory and Testing System
============================================

This directory contains several Chapel example codes:

     hello.chpl             : "Hello, world!" program using a config variable
     beer.chpl              : computes lyrics to "99 bottles of beer"
     jacobi.chpl            : Jacobi iteration in Chapel
     jacobi-routine.chpl    : Jacobi iteration factored into a routine
     genericStack.chpl      : a generic stack class (linked list implementation)
     genericStack2.chpl     : another generic stack class (array implementation)
     norm.chpl              : sample module for computing array norms
     prod-cons.chpl         : producer-consumer using a sync variable
     tree_construct.chpl    : construct and walk a tree in parallel
     hpcc06/                : our code for the 2006 HPC Challenge competition
       stream.chpl          : our global STREAM Triad entry
       ra.chpl              : our global Random Access entry
       ra-randstream.chpl   : the random stream generator for our RA entry
       fft.chpl             : our global 1D FFT entry
       probSize.chpl        : a common module for computing problem sizes
       fft-mta.chpl         : a port of the 2005 Konecny, Kahan, Feo entry
     Bin/                   : helper scripts used by the test system

Most of these examples can be compiled in a standalone manner, for
example:

     chpl -o hello hello.chpl

The hpcc06 tests are an exception -- they use multiple modules defined
using multiple source files.  They can be compiled using the following
commands:

     chpl -o stream probSize.chpl stream.chpl
     chpl -o ra probSize.chpl ra-randstream.chpl ra.chpl
     chpl -o fft probSize.chpl fft.chpl
     chpl -o fft-mta probSize.chpl fft-mta.chpl

We provide Makefiles in each directory that can be used to build a
single test in that directory by name:

     make hello

or to build all tests in that directory and its subdirectories:

     make all


--------------------------------
Files related to the test system
--------------------------------

In addition to the code files themselves, this directory contains
files used by our regression testing infrastructure to automatically
compile, run, and test sample codes.  For a test foo.chpl, the
following files may also exist:

     foo.compopts   : command-line options to be used when compiling the test
     foo.execopts   : command-line options to be used when executing the test
     foo.good       : the expected output for the test
     foo.notest     : indicates that foo.chpl should not be tested 
                      (e.g., because it is a helper module)


---------------------
Using the test system
---------------------

To launch the test system, cd into the examples directory and use:

     start_test

This will cause all of the tests in this directory to be compiled and
executed, printing out a summary at the end and creating log files of
the test run in a Logs/ subdirectory.  Some other useful ways to run
the test system are:

     start_test -startdir <dir>
     start_test -onetest <foo.chpl>

These commands run the test system starting from a single directory,
or on a single test, respectively.  For a list of other test system
options, use:

     start_test -help

And for complete documentation on the testing system, refer to the
comments at the top of the start_test file.
