=========================
Chapel Examples Directory
=========================

This directory contains a few simple "Hello, world!" example codes to
get started with Chapel program structure:

     hello.chpl             : simplest Chapel "Hello, world!" program
     hello-config.chpl      : variation with a configurable message
     hello-module.chpl      : variation using a structured module

It also contains a number of more interesting examples that
demonstrate various Chapel features:

     beer.chpl              : computes lyrics to "99 bottles of beer"
     blockLU.chpl           : block LU factorization
     genericStack.chpl      : generic stack classes (list- and array-based)
     iterators.chpl         : sample iterators
     jacobi.chpl            : Jacobi iteration
     linkedList.chpl        : generic linked list example
     norm.chpl              : sample module for computing array norms
     produceConsume.chpl    : producer-consumer using a sync variable
     quicksort.chpl         : parallel quick sort using cobegin and serial
     tree.chpl              : constructs and walks a tree in parallel

The hpcc06 directory contains Chapel versions of the HPC Challenge
benchmarks:

     stream.chpl            : our global STREAM Triad entry
     ra.chpl                : our global Random Access entry
     ra-randstream.chpl     : the random stream generator for our RA entry
     fft.chpl               : our global 1D FFT entry
     probSize.chpl          : a common module for computing problem sizes
     fft-mta.chpl           : a port of the 2005 Konecny, Kahan, Feo entry
     fft-testPow4.chpl      : an empty test used to exercise fft.chpl in our
                              testing system for non-powers-of-two

------------------
Building the tests
------------------

Most of the examples can be compiled in a standalone manner, for
example, the canonical "Hello, world!" program can be compiled as
follows:

     chpl -o hello hello.chpl

The hpcc06 tests are an exception -- they use multiple modules defined
using multiple source files.  They can be compiled using the following
commands:

     chpl -o stream probSize.chpl stream.chpl
     chpl -o ra probSize.chpl ra-randstream.chpl ra.chpl
     chpl -o fft probSize.chpl fft.chpl
     chpl -o fft-mta probSize.chpl fft-mta.chpl

We provide Makefiles in each directory that can be used to build a
single test in that directory by name:

     make hello

or to build all tests in that directory and its subdirectories:

     make all


-----------
Other files
-----------

./
  FEATURES       : maps out which tests use which Chapel features
  README.testing : provides an introduction to using the Chapel testing system
  start_test     : the main script for the Chapel testing system
  start_clean    : cleans up the result of a run of the testing system
  Bin/           : contains helper scripts for the testing system
  *.good         : these files are used by the Chapel testing system
  *.compopts     : "
  *.execopts     : "
  *.good         : "
  *.notest       : "
  *.perfkeys     : "
