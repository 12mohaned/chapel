==================================
Feature Charts for Chapel Examples
==================================

The following table lists the primary features that each example
demonstrates:

test             Primary features it was designed to demonstrate
---------------+---------------------------------------------------------------
hello          : write() function; string literals; unstructured coding
hello-module   : configuration vars; module structure; main() entry point
hello-datapar  : forall loop
hello-multicore: coforall loop
hello-multiloc : coforalls, on clauses, locales
arrays         : arithmetic domains and arrays; slicing; iteration; reallocation
beer           : 1D domains and arrays; string manipulation; generic functions
classes        : classes and objects; dynamic dispatch; 'this' and 'these'
distributions  : distributions; Block; Cyclic
fileIO         : file I/O of scalars and arrays
genericClasses : generic classes and objects; generic types
genericStack   : generic classes; nested classes; array reallocation
iterators      : iterators of various styles
jacobi         : 2D domains and arrays; stencil operations; reductions
linkedList     : nested generic classes; iterators, writeThis methods
multilocale    : multiple locales, on clauses, multi-locale task parallelism
norm           : reductions; function overloading and where clauses; modules
opaque         : opaque domains and arrays; graph-based data structures
prodCons       : synchronization variables; task parallelism using cobegin
quicksort      : bounded task parallelism using cobegin and serial
ranges         : ranges; .., #, by operators; range iteration; range slicing
reductions     : minloc, maxloc, + and && array reductions
slices         : array slicing and reindexing; iterators
sparse         : sparse domains and arrays; operations on them
taskParallel   : begin, cobegin, coforall
timers         : Timer record in Time module
tree           : unbounded task parallelism using cobegin
varargs        : variable argument functions, tuples
variables      : var, const, param; config; basic inference; .type
hpcc/stream    : whole-array operators; standard modules; time/random routines
hpcc/ra        : iterators; atomic statements
hpcc/fft       : array slicing; iterators; complex and imaginary values
hpcc/hpl       : 2D array slicing and aliases; linear algebra

