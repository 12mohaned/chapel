* Class fields of array type specified using a type alias don't work
bug: array fields via type aliases [arrays/jplevyak/simple-4]

* Array promotion/forall expressions evaluate to 1D arrays
bug: array type inference [arrays/bradc/inferArrayType]
bug: array type inference [sparse/bradc/inferSparseArrayType]

* Associative domain index additions/deletions can result in an infinite loop
bug: associative array infinite loop (bradc) [puzzles/deitz/digits3]

* Associative domains of explicit heterogeneous tuple types don't work
bug: associative domain of het tuple type [domains/indefinite/waynew/tuple_domain]

* Class fields initialized with conditional expressions fail to compile
bug: conditional expression in class member initialization [classes/marybeth/test-init]

* Parameters in branches of conditional expressions are not implicitly coerced
bug: implicit parameter coercions in conditional expression [studies/hpcc/RA/bradc/ra-condexpr]

* Class fields of array types that are initialized can cause compile error
bug: initialized arrays in classes [classes/bradc/arrayInClass/genericArrayWithInit]

* Two modules sharing the same name break compilation (whether legal or illegal)
bug: module naming collision [modules/diten/nested_module_collision]
error message: module naming collision [modules/bradc/multipleModulesSameName]


* Applying op= style assignments to sync vars does not work
bug: op= on sync vars [parallel/begin/marybeth/test_forbegin3]


* Promoting var functions can result in a compilation error
bug: promoted var function [arrays/deitz/promotion/test_scalar_promote10]

* Return statements in type select statements are not recognized correctly
bug: return in type select [trivial/marybeth/typeselect]



* Const arrays can currently be assigned -- should result in a compiler error
error message: assigning const arrays [arrays/bradc/constArray]

* Assigning nil to a list/record results in unuseful error messages
error message: assigning nil to a list/record [types/seq/bradc/emptySeq3]

* Mixing dimensional index types in a domain specification yields poor errors
error message: domain dimensional type [arrays/deitz/test_domain_mixed_dim_types]


* Many error messages continue to be incorrect/confusing/unhelpful
error message: formal argument missing parameterized tuple type [types/tuple/deitz/test_param_tuple_arg1-error]
error message: formal array argument w/ query domain element type [arrays/bradc/errors/badArrArgErrMsg]
error message: generic types [classes/bradc/genericTypes]
error message: iterator sugaring [arrays/bradc/slices/icError]
error message: iterator sugaring [arrays/marybeth/test_arrayops]
error message: iterator sugaring [domains/marybeth/test_compare_range]
error message: internal/impossible candidate functions [sparse/bradc/denseIRV]


* Setter functions should not be permitted to return anything, but currently can
error message: illegal setter return [functions/bradc/setterFns/setterReturns2]
error message: illegal setter return [functions/bradc/setterFns/setterReturns]


* Actual arguments passed using inout intents are not checked for legality
error message: inout [functions/jplevyak/intent-8-error]
error message: inout [trivial/deitz/test_coerce_inout]


* Analysis to find return statements along all paths in a function is incomplete
error message: returns along all control paths [functions/deitz/test_return1]

* Constructors are not particularly well-supported
bug: nested class construction [classes/deitz/nested/test_nested1]
bug: nested class construction [classes/deitz/nested/test_nested2]
bug: nested class construction [classes/deitz/test_type_in_class1]
error message: type assignment in constructors [reductions/bradc/manual/threeclasstypes-construct]
unimplemented feature: constructing generic classes [reductions/bradc/manual/threeclasstypes-construct2]
unimplemented feature: constructing generic classes [reductions/bradc/manual/threeclasstypes]


* Subclassing uninstantiated generic classes should be prohibited but is not
error message: uninstantiated generic parent [classes/jplevyak/inherit-1]
error message: uninstantiated generic parent [classes/jplevyak/inherit-2-fixed]
error message: uninstantiated generic parent [classes/jplevyak/inherit-2]
error message: uninstantiated generic parent [types/type_variables/deitz/part5/inherit_instantiate2]
error message: uninstantiated generic parent [types/type_variables/deitz/part5/inherit_instantiate4]

* Var functions should not be permitted to return locals or literals but can
error message: var fn illegal return [functions/bradc/varFns/retLitFromVarFn]
error message: var fn illegal return [functions/bradc/varFns/retLocFromVarFn]


* Requested features
feature request: command line config value range check [execflags/bradc/int32configBad]
feature request: formal array argument bounds query [studies/hpcc/FFT/bradc/twiddles-advanced]
feature request: formal array argument with indefinite reindexing [studies/hpcc/FFT/bradc/twiddles-advanced2]
feature request: general support for homogenous tuple types [types/tuple/bradc/hetTupleArr]
feature request: general support for homogenous tuple types [types/tuple/bradc/homogTupleArr]
feature request: help prints config var default values [execflags/shannon/configs/help/configVarDefaultValue]
feature request: private members [types/seq/bradc/length.modify]
feature request: uint stride [studies/hpcc/RA/bradc/ra-bradc-strideduintdomain]
feature request: promotion is less specific than generic [functions/bradc/resolution/arrayVsPromotion]
feature request: promotion is less specific than generic [functions/bradc/resolution/rangeVsPromotion]


* Generated executable's command-line parsing is not as robust as we'd like
runtime error: command line parsing [execflags/shannon/spellingTest]
runtime error: string-to-value (configs) [execflags/shannon/configs/configVarInvalidBoolean]
runtime error: string-to-value (configs) [execflags/shannon/configs/configVarInvalidComplex]
runtime error: string-to-value (configs) [execflags/shannon/configs/configVarInvalidFloat]
runtime error: string-to-value (configs) [execflags/shannon/configs/configVarInvalidInteger]


* Semantic futures
semantic: direct module access for un-use-d module [trivial/deitz/test_module_access1]
semantic: global use before def [functions/bradc/useBeforeDef/useBeforeDef2]
semantic: global use before def [functions/bradc/useBeforeDef/useBeforeDef]
semantic: global use before def [studies/blas/marybeth/saxpy2]
semantic: params in classes [classes/bradc/paramInClass/weirdParamInit3]
semantic: params in classes [classes/bradc/paramInClass/weirdParamInit4]
semantic: explicitly typing fields in tuple arguments [types/tuple/diten/tuple_destructure_arg_types.chpl]


* 32-bit math routines are unimplemented, causing coercion to 64-bit versions
unimplemented feature: 32-bit math routines [modules/standard/math/bradc/sin32bit]


* Arrays of arrays are not implemented
unimplemented feature: array of array [arrays/bradc/workarounds/arrayOfArray2]
unimplemented feature: array of array [arrays/bradc/workarounds/arrayOfArray]
unimplemented feature: array of array [arrays/bradc/workarounds/arrayOfSpsArray2]
unimplemented feature: array of array [arrays/bradc/workarounds/arrayOfSpsArray]
unimplemented feature: array of array [arrays/deitz/part2/test_array_of_array1]
unimplemented feature: array of arrays [arrays/deitz/test_array_of_array2]

* Whole-array assignment to sync arrays does not work
unimplemented feature: array of syncs [users/shetag/syncarr]

* read()s of whole arrays are not working
unimplemented feature: array reads [types/file/fileIO]


* Configuration variables of tuple types
unimplemented feature: configs of tuples (string-to-value) [execflags/bradc/tupleConfig]

* Formal arguments of inferred type should be constrained by their default value
unimplemented feature: formal type constrained by default value [functions/deitz/test_default_type]


* Array arguments cannot have both their domain and element types queried
unimplemented feature: query formal array domain and element type [functions/bradc/querydomelem]

* Short-circuiting functions and conditional expressions cannot be promoted
unimplemented feature: short-circuiting promotion [arrays/bradc/promote-shortcircuit]
unimplemented feature: short-circuiting promotion [studies/beer/bradc/beer-promoted-infer]


* If there are insufficient threads to spawn a task, the program halts
unimplemented feature: task pool to avoid exhausting thread resources [parallel/cobegin/deitz/test_many_threads]

* Compiler and runtime errors don't always report useful line numbers
runtime error: line number in out-of-memory [memory/shannon/memmaxExceedsLineno2]

* Slicing strided ranges is not yet supported
unimplemented feature: slicing strided ranges [types/range/bradc/strideRangeSlice2]

* Zipper iteration over var iterators is not yet supported
unimplemented feature: zipper reference iterators [test/functions/deitz/iterators/test_var_iterator2]

* Slicing strided domains and arrays is not implemented
unimplemented feature: slicing strided domains/arrays [domains/bradc/slices/sliceStridedDomain]
unimplemented feature: slicing strided domains/arrays [arrays/bradc/slices/sliceStridedArray]

* Sparse arrays can't be sliced with dense domains
unimplemented feature: slicing sparse domain with dense [sparse/bradc/sliceWithDense]

* a mechanism for controlling the precision/width of scalar values
feature request: output formatting [io/bradc/formatoutput]

* Domains arguments are passed by const rather than by reference
bug: domains passed by const rather than ref [domains/bradc/modifyDomainArg]
