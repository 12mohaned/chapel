// This test checks the ABI handling for export functions
// by comparing the declarations with those generated by clang.

// If the declarations change for some reason, check the full output
//  * do the types/attributes still match?
//  * does the movement of data to/from arguments look similar?
//    (it does not have to be identical as long as the same values
//     are read from / stored in the arguments)

import IO;

extern {
  #include <stdio.h>

  struct c_pair {
    int a;
    int b;
  };

  void print_output_prefix(void);
  struct c_pair struct_return_c(void);
  void struct_arg_c(struct c_pair arg);

  struct c_pair struct_return_c(void) {
    struct c_pair pair;
    pair.a = 0;
    pair.b = 1;
    return pair;
  }

  void struct_arg_c(struct c_pair arg) {
    print_output_prefix();
    printf("arg.a %i arg.b %i\n", arg.a, arg.b);
  }
}

var phase: string;
export proc print_output_prefix() {
  IO.stdout.write("OUTPUT ");
  IO.stdout.write(phase);
  IO.stdout.write(": ");
  IO.stdout.flush();
}
proc start_phase(name:string) {
  writeln("OUTPUT ", name);
  phase = name;
}

export proc struct_return_chapel(): c_pair {
  var pair:c_pair;
  pair = struct_return_c();
  return pair;
}

export proc struct_arg_chapel(in arg: c_pair) {
  struct_arg_c(arg);
}

proc main() {
  start_phase("testing struct_..._c");
  var pair:c_pair;
  pair = struct_return_c();
  struct_arg_c(pair);
  start_phase("testing struct_..._chapel");
  pair = struct_return_chapel();
  struct_arg_chapel(pair);
}
