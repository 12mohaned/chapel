semantic: params in classes

David Iten points out that since D.c is initialized with C(), that
implies that it's a C(0), so trying to initialize d.c with a C(2)
is illegal (though this isn't the line that's currently causing the
error).  This is something that isn't clear to me in the langauge --
does binding c's default value to a C(0) keep D generic w.r.t. c,
or does it force c to be a C(0).

In any case, adding weirdParamInit4.chpl to show this error without
the initialization (which maybe has a similar question, since c is
declared to be a C, which might be interpreted as a C(0) as well).

Here's the original future message for this test, which still 
applies somewhat to the errors being reported:

------

This test is a future either because (a) it's reporting an error when
it shouldn't, or (b) the error message could be clearer.  I don't have
a strong opinion today about whether (a) or (b) is preferable, but
didn't want to lose it in either case.

One might argue (a) is the correct result given that
weirdParamInit.chpl and weirdParamInit2.chpl seem to work --
weirdParamInit3.chpl seems like a logical extension to what those two
are doing.

If (b) it should be an error then the message could be improved by (i)
saying something about why it's illegal (param is being initialized by
a non-param expression?) and (ii) producing a line number that
corresponds to the field's declaration point rather than the class'.
My guess is that the error is being triggered in the default
constructor which is created on the class line, raising the question
about whether the default constructor's default arguments and
assignments could have their line numbers faked to refer to the member
declarations' line numbers for more clarity.
