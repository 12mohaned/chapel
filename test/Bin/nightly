#!/usr/bin/perl

#
# get uniquifiers
#
$id = getpgrp();
$today = `date +%w-%a`; chomp($today);
$statdate = `date +%D`; chomp($statdate);


#
# directory locations
#
$tmpdir = "/tmp/chapel-nightly.$id.deleteme";
$chapeldir = "$tmpdir/chapel";
$testdir = "$chapeldir/test";
$logdir = "~bradc/chapel/test/Logs/Nightly";
$statdir = "$logdir/Stats";


#
# test log filenames
#
$rawstdlog = "$logdir/day$today-std.log";
$rawvgrlog = "$logdir/day$today-vgr.log";
$rawstdsummary = "$rawstdlog.summary";
$rawvgrsummary = "$rawvgrlog.summary";

$sortedstdsummary = "$rawstdlog.sorted";
$sortedvgrsummary = "$rawvgrlog.sorted";

$prevstdsummary = "$logdir/last-std.log.sorted";
$prevvgrsummary = "$logdir/last-vgr.log.sorted";


$mailcommand = "| Mail -s \"Chapel: Nightly Results\" bradc\@cray.com";

#
# make temp directory
#
mysystem("mkdir $tmpdir > /dev/null", "creating temp dir");

#
# checkout sources
#
mysystem("cd $tmpdir && cvs -d ~bradc/CVS checkout chapel", "cvs checkout");


#
# make sure CHPLDEVTMP environment variable is unset
#
delete($ENV{'CHPLDEVTMP'});

#
# build stuff
#
mysystem("cd $chapeldir && make third-party", "making third-party");
mysystem("cd $chapeldir && make compiler", "making chapel compiler");
mysystem("cd $chapeldir && make runtime", "making chapel runtime");

#
# run tests
#
`rm -f $rawstdlog $rawvgrlog $rawstdsummary $rawvgrsummary`;
mysystem("cd $testdir && ./start_test -logfile $rawstdlog", "running standard tests");
mysystem("cd $testdir && ./start_test -valgrind -logfile $rawvgrlog", "running valgrind tests");


#
# sort output
#
`cat $rawstdsummary | grep -v "^.END" | grep -v "^.Test Summary" | sort > $sortedstdsummary`;
`cat $rawvgrsummary | grep -v "^.END" | grep -v "^.Test Summary" | sort > $sortedvgrsummary`;


#
# count stuff
#
$oldstdsummary = `grep Summary: $prevstdsummary`; chomp($oldstdsummary);
$oldvgrsummary = `grep Summary: $prevvgrsummary`; chomp($oldvgrsummary);
$newstdsummary = `grep Summary: $sortedstdsummary`; chomp($newstdsummary);
$newvgrsummary = `grep Summary: $sortedvgrsummary`; chomp($newvgrsummary);

$oldstdsucc = &numsuccesses($oldstdsummary);
$oldstdfail = &numfailures($oldstdsummary);
$oldvgrsucc = &numsuccesses($oldvgrsummary);
$oldvgrfail = &numfailures($oldvgrsummary);
$newstdsucc = &numsuccesses($newstdsummary);
$newstdfail = &numfailures($newstdsummary);
$newvgrsucc = &numsuccesses($newvgrsummary);
$newvgrfail = &numfailures($newvgrsummary);

$oldnumtests = $oldstdsucc + $oldstdfail;
$newnumtests = $newstdsucc + $newstdfail;
$deltests = &delta($oldnumtests, $newnumtests);

$delstdsucc = &delta($oldstdsucc, $newstdsucc);
$delstdfail = &delta($oldstdfail, $newstdfail);
$delvgrsucc = &delta($oldvgrsucc, $newvgrsucc);
$delvgrfail = &delta($oldvgrfail, $newvgrfail);


#
# send mail
#
open(MAIL, $mailcommand);

print MAIL "=== Summary ===================================================\n";
print MAIL "$newnumtests Tests ($deltests)\n";
print MAIL "standard run: $newstdsucc Successes ($delstdsucc), $newstdfail Failures ($delstdfail)\n";
print MAIL "valgrind run: $newvgrsucc Successes ($delvgrsucc), $newvgrfail Failures ($delvgrfail)\n";
print MAIL "===============================================================\n";
print MAIL "\n";

print MAIL "--- New Errors (standard) -------------------------------------\n";
print MAIL `comm -13 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:"`;
print MAIL "\n";

print MAIL "--- New Errors (valgrind) -------------------------------------\n";
print MAIL `comm -13 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:"`;
print MAIL "\n";

print MAIL "--- Resolved Errors (standard) --------------------------------\n";
print MAIL `comm -23 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:"`;
print MAIL "\n";

print MAIL "--- Resolved Errors (valgrind) --------------------------------\n";
print MAIL `comm -23 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:"`;
print MAIL "\n";

print MAIL "--- Unresolved Errors (standard) ------------------------------\n";
print MAIL `comm -12 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:"`;
print MAIL "\n";

print MAIL "--- Unresolved Errors (valgrind) ------------------------------\n";
print MAIL `comm -12 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:"`;
print MAIL "\n";

close(MAIL);


#
# tuck this run's output away for comparison tomorrow
#
`cp $sortedstdsummary $prevstdsummary`;
`cp $sortedvgrsummary $prevvgrsummary`;


#
# write stats and build new graph
#
`echo "$statdate\t-\t$newnumtests\t$newstdsucc\t$newvgrsucc" >> $statdir/tests.dat`;
`ci -l -m"automated nightly checkin" $statdir/tests.dat`;
`cd $statdir && ./makeplot`;

#
# clean up
#
mysystem("rm -rf $tmpdir", "removing temp dir");

exit 0;


#
# subroutines
#

sub mysystem {
    $status = system($_[0]);
    if ($status != 0) {
        $status = $status / 256;
	print "Error $_[1]: $status\n";

	open(MAIL, $mailcommand);
	print MAIL "=== Summary ===================================================\n";
	print MAIL "ERROR $_[1]: $status\n";
	print MAIL "(workspace left at $tmpdir)\n";
	print MAIL "===============================================================\n";
	close(MAIL);

	`echo "$statdate\t1" >> $statdir/tests.dat`;
	`ci -l -m"automated nightly checkin" $statdir/tests.dat`;
	`cd $statdir && ./makeplot`;
	exit 1;
    }
}

sub numsuccesses {
  $mystr = $_[0];
  $mystr =~ s/.* #Successes = //;
  $mystr =~ s/ \|.*//;
  $mystr;
}

sub numfailures {
  $mystr = $_[0];
  $mystr =~ s/.* #Failures = //;
  $mystr =~ s/]//;
  $mystr;
}

sub delta {
  $delta = $_[1] - $_[0];
  if ($delta >= 0) {
      $delta = "+$delta";
  }
  $delta;
}

