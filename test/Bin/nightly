#!/usr/bin/perl

$valgrind = 0;
$interpret = 0;
$printusage = 1;
$debug = 1;
$runtests = 1;
$examples = 0;

while (@ARGV) {
    $flag = shift @ARGV;
    if ($flag eq "-debug") {
	$debug = 1;
        $printusage = 0;
    } elsif ($flag eq "-cron") {
	$debug = 0;
        $printusage = 0;
    } elsif ($flag eq "-valgrind") {
	$valgrind = 1;
    } elsif ($flag eq "-interpret") {
        $interpret = 1;
    } elsif ($flag eq "-notest") {
        $runtests = 0;
        $debug = 1;
    } elsif ($flag eq "-examples") {
        $examples = 1;
    } elsif ($flag eq "-performance") {
        $performance = 1;
    } else {
        $printusage = 1;
        last;
    }
}

$statdate = `date +%D`; chomp($statdate);

if (@ARGV) {
    $statdate = shift @ARGV;
}

if ($printusage == 1) {
    print "nightly [-debug|-notest|-cron] {[-valgrind|-interpret]}\n";
    print "\t-debug       : check out sources and run for individual user (default)\n";
    print "\t-cron        : use for nightly cron runs only\n";
    print "\t-notest      : don't run the tests (check the build only)\n";
    print "\t-examples    : run the release/examples tests only\n";
    print "\t-valgrind    : run tests in valgrind mode\n";
#    print "\t-interpret   : run tests in interpreted mode\n";
    print "\t-performance : run performance tests\n";
    exit 1;
}


#
# get uniquifiers
#
$pid = getpgrp();
$user = `whoami`;
chomp($user);
$debugmail = $ENV{'CHPL_NIGHTLY_DEBUG_EMAIL'};
if ($debugmail eq "") {
    $debugmail = "$user\@cray.com";
}
$today = `date +%w-%a`; chomp($today);
$platform = `uname -s`;
chomp($platform);
$platform = lc($platform);
if ($platform eq "linux") {
    $machine = `uname -m`;
    chomp($machine);
    if ($machine eq "x86_64") {
        $platform = "linux64";
    }
} elsif ($platform eq "cygwin_nt-5.1") {
    $platform = "cygwin";
}


#
# directory locations
#
$basetmpdir = $ENV{'CHPL_NIGHTLY_TMPDIR'};
if ($basetmpdir eq "") {
    $basetmpdir = $ENV{'TMPDIR'};
}
if ($basetmpdir eq "") {
    $basetmpdir = "/tmp";
}
$make = $ENV{'CHPL_NIGHTLY_MAKE'};
if ($make eq "") {
    $make = $ENV{'MAKE'};
}
if ($make eq "") {
    $make = "make";
}
$tmpdir = "$basetmpdir/chapel-nightly.$user.$pid.deleteme";
$chapeldir = "$tmpdir/chapel";
$testdir = "$chapeldir/test";
$statdir = $ENV{'CHPL_NIGHTLY_STATDIR'};
$logdir = $ENV{'CHPL_NIGHTLY_LOGDIR'};
$cronlogdir = $ENV{'CHPL_NIGHTLY_CRON_LOGDIR'};
if ($cronlogdir eq "") {
    $cronlogdir = "/data/sea/cascade/chapel/Nightly";
}
if ($logdir eq "" || $statdir eq "") {
    print "Error: CHPL_NIGHTLY_LOGDIR and CHPL_NIGHTLY_STATDIR must be set\n";
    exit 1;
}
if ($debug == 1) {
    if ($performance == 1) {
        $statfile = "$statdir/nightly-perf.$platform-debug.dat";
    } else {
        $statfile = "$statdir/nightly.$platform-debug.dat";
    }
} else {
    if ($performance == 1) {
        $statfile = "$statdir/nightly-perf.$platform-cron.dat";
    } else {
        $statfile = "$statdir/nightly.$platform-cron.dat";
    }
}


if ($valgrind == 1) {
    if ($interpret == 1) {
        $threechars = "vgi";
        $morechars = "intrp+vgrnd";
    } elsif ($performance == 1) {
        $threechars = "vgp";
        $morechars = "perf+vgrnd";
    } else {
        $threechars = "vgr";
        $morechars = "valgrind";
    }
} elsif ($interpret == 1) {
    $threechars = "int";
    $morechars = "interpret";
} elsif ($performance == 1) {
    $threechars = "prf";
    $morechars = "performance";
} else {
    $threechars = "std";
    $morechars = "standard";
}


#
# test log filenames
#
if ($debug == 1) {
  $rawlog = "$logdir/debug-$platform-$threechars.log";
} else {
  $rawlog = "$logdir/day$today-$platform-$threechars.log";
}
$rawsummary = "$rawlog.summary";
$sortedsummary = "$rawlog.sorted";
$prevsummary = "$cronlogdir/last-$platform-$threechars.log.sorted";


#
# make "prev" logs if they don't already exist
#
ensureSummaryExists($prevsummary);


#
# set mail options
#
$mailer = $ENV{'CHPL_MAILER'};
if ($mailer eq "") {
    $mailer = "Mail";
}

$somethingfailed = 0;

#
# make temp directory
#
mysystem("mkdir $tmpdir > /dev/null", "creating temp dir", 1, 1);



#
# make environment is set properly
#
delete($ENV{'CHPLDEVTMP'});
delete($ENV{'CHPL_HOME'});

#mysystem("which chpl", "locating chpl", 0, 0);
#mysystem("env", "checking environment", 0, 0);

 
#
# checkout sources
#
$uwusername = $ENV{'CHPL_UW_CVS_USERNAME'};
if ($uwusername eq "") {
    $uwusername = $user;
}
$cvsroot = ":pserver:$uwusername\@gemelli.cs.washington.edu:2403/gemelli3/chapelroot";
mysystem("cd $tmpdir && cvs -d $cvsroot checkout nightly", "cvs checkout", 1, 1);


#
# make cache of UW distribution
#
if ($debug == 0 && $platform eq "linux" && $user eq "bradc") {
  $todaydate = `date +%m%d%y`;
  chomp($todaydate);
  $lastmonth = `date -d"1 month ago" +%m%d%y`;
  chomp($lastmonth);
  $archivedir = "~$user/UWchapel";

  mysystem("cd $tmpdir && tar cvf chapel.tar chapel", "tarring chapel", 0, 1);
  mysystem("cd $tmpdir && gzip chapel.tar", "gzipping chapel", 0, 1);
  mysystem("cd $tmpdir && mv chapel.tar.gz $archivedir/chapel.$todaydate.tar.gz", "storing chapel", 0, 1);
  mysystem("cd $archivedir && rm -f chapel.$lastmonth.tar.gz", "removing last month's chapel", 0, 0);
}

#
# if on cygwin, blow away FILES files because they wreak havoc on stuff
#
if ($platform eq "cygwin") {
    mysystem("cd $chapeldir && find . -name FILES -exec rm {} \\;");
}


#
# build stuff
#

mysystem("cd $chapeldir && $make DEBUG=0 OPTIMIZE=1 compiler", "making chapel compiler", 1, 1);
mysystem("cd $chapeldir && $make DEBUG=0 OPTIMIZE=1 runtime", "making chapel runtime", 1, 1);
#if ($valgrind == 1) {
#    mysystem("cd $chapeldir && $make nogc", "making no-GC version", 1, 1);
#}


#
# run tests
#
#`rm -f $rawstdlog $rawvgrlog $rawstdsummary $rawvgrsummary`;

$testflags = "-logfile $rawlog";
if ($interpret == 1) {
    $testflags = "$testflags -interpret";
}
if ($valgrind == 1) {
    $testflags = "$testflags -valgrind";
}
if ($valgrind == 0) {
    $testflags = "$testflags -futures";
}
if ($examples == 1) {
    $testflags = "$testflags -startdir release/examples";
}
if ($performance == 1) {
    $testflags = "$testflags -performance";
}

if ($runtests == 1) {
    $status = mysystem("cd $testdir && ./start_test $testflags", "running standard tests", 0, 0);



#
# sort output
#

    if ($status == 0) {
        `cat $rawsummary | grep -v "^.END" | grep -v "^.Test Summary" | sort > $sortedsummary`;

        $oldsummary = `grep Summary: $prevsummary`; chomp($oldsummary);
        $cursummary = `grep Summary: $sortedsummary`; chomp($cursummary);

        $oldsucc = &numsuccesses($oldsummary);
        $oldfail = &numfailures($oldsummary);
        $oldfut  = &numfutures($oldsummary);

        $cursucc = &numsuccesses($cursummary);
        $curfail = &numfailures($cursummary);
        $curfut  = &numfutures($cursummary);

        $delsucc = &delta($oldsucc, $cursucc);
        $delfail = &delta($oldfail, $curfail);
        $delfut  = &delta($oldfut, $curfut);

        $summary = "$morechars run: $cursucc Successes ($delsucc), $curfail Failures ($delfail)";
    } else {
        $summary = "$morechars run: failed";
    }

    $knownumtests = 1;
    if ($status == 0) {
        $oldnumtests = $oldsucc + $oldfail;
        $curnumtests = $cursucc + $curfail;
        $deltests = &delta($oldnumtests, $curnumtests);
        $numtestssummary = "$curnumtests Tests ($deltests), $curfut Futures ($delfut)";
    } else {
        $numtestssummary = "unknown number of Tests";
        $knownumtests = 0;
    }




#
# send mail
#
    $futuremarker = "^Future";
    
    $newfailures = "???";
    if ($status == 0) {
        $newfailures = `comm -13 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker" | wc -l`; chomp($newfailures);
        $newfailures += 0;
        $shortstatus = "$newfailures new failures ($curfail/$curfut total failures/futures)";
    } else {
        $shortstatus = "build/test failed";
    }
    if ($debug == 1) {
        $mailsubject = "Chapel Debug ($platform): $shortstatus";
    } else {
        if ($performance == 1) {
            $mailsubject = "Chapel Performance Nightly ($platform): $shortstatus";
        } else {
            $mailsubject = "Chapel Nightly ($platform): $shortstatus";
        }
    }
    
    if ($debug == 1) {
        $mailcommand = "| $mailer -s \"$mailsubject \" $debugmail";
    } else {
        $mailcommand = "| $mailer -s \"$mailsubject \" chapel_cronmail\@cray.com";
    }
    
    open(MAIL, $mailcommand);
    
    print MAIL "=== Summary ==========================================================\n";
    print MAIL "$numtestssummary\n";
    print MAIL "$summary\n";
    print MAIL "======================================================================\n";
    print MAIL "\n";
    
    if ($status == 0) {
        print MAIL "--- New Errors ($morechars) -----------------------------------------\n";
        print MAIL `comm -13 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
        print MAIL "\n";
    }
    
    if ($status == 0) {
        print MAIL "--- Resolved Errors ($morechars) ------------------------------------\n";
        print MAIL `comm -23 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
        print MAIL "\n";
    }
    
    if ($status == 0) {
        print MAIL "--- Unresolved Errors ($morechars) ----------------------------------\n";
        print MAIL `comm -12 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
        print MAIL "\n";
    }
    
    if ($status == 0) {
        print MAIL "--- Passing Future tests ($morechars) -------------------------------\n";
        print MAIL `grep "$futuremarker" $sortedsummary | grep "Success"`;
        print MAIL "\n";    
    }
    
    if ($status == 0) {
        print MAIL "--- New Failing Future tests ($morechars) ---------------------------\n";
        print MAIL `comm -13 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "Error"`;
        print MAIL "\n";    
    }
    
    if ($status == 0) {
        print MAIL "--- Unresolved Future tests ($morechars) ----------------------------\n";
        print MAIL `comm -12 $prevsummary $sortedsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "Error"`;
        print MAIL "\n";    
    }
    
    close(MAIL);
    
    
#
# tuck this run's output away for comparison tomorrow
#
    if ($debug == 0) {
        if ($status == 0) {
            `cp $sortedsummary $prevsummary`;
        }
    }
    
    
#
# write stats and build new graph for linux only
#
    if ($knownumtests == 1) {
        $testcol = "$curnumtests";
    } else {
        $testcol = "-";
    }
    if ($valgrind == 0) {
        $col = "$cursucc";
        $vgrcol = "-";
    } else {
        $col = "-";
        $vgrcol = "$cursucc";
    }
    `echo "$statdate\t-\t$testcol\t$col\t$vgrcol" >> $statfile`;
    commitstats();
}

#
# clean up
#
if ($somethingfailed == 0) {
    print "Cleaning up\n";
    mysystem("rm -rf $tmpdir", "removing temp dir", 0, 1);
}

exit 0;


#
# subroutines
#

sub mysystem {
    $command = $_[0];
    $errorname = $_[1];
    $fatal = $_[2];
    $mailmsg = $_[3];

    $status = system($command);
    if ($status != 0) {
	$somethingfailed = 1;
        $status = $status / 256;
	print "Error $_[1]: $status\n";

	if ($mailmsg != 0) {
            if ($debug == 1) {
                $mailsubject = "Chapel: Debug Results ($platform): Failure notice";
                $mailcommand = "| $mailer -s \"$mailsubject \" $debugmail";
            } else {
                $mailsubject = "Chapel: Nightly Results ($platform): Failure notice";
                $mailcommand = "| $mailer -s \"$mailsubject \" chapel_cronmail\@cray.com";
            }

            print "Trying to mail message... using $mailcommand\n";
	    open(MAIL, $mailcommand);
	    print MAIL "=== Summary ===================================================\n";
	    print MAIL "ERROR $_[1]: $status\n";
	    print MAIL "(workspace left at $tmpdir)\n";
	    print MAIL "===============================================================\n";
	    close(MAIL);
	}

	if ($fatal != 0) {
            `echo "$statdate\t1" >> $statfile`;
            commitstats();
	    exit 1;
	}
    }
    $status;
}

sub commitstats {
  if ($performance == 0) {
    if ($debug == 0) {
        `ci -l -m"automated nightly checkin" $statfile`;
    }
    $makeplotunexe = system("test -x $statdir/makeplot");
    if ($makeplotunexe) {
        print "skipping makeplot step\n";
    } else {
        if ($platform eq "linux") {
            `cd $statdir && ./makeplot`;
        }
    }
  } else {
      $graphdir = $ENV{'CHPL_TEST_PERF_DIR'};
      if ($graphdir eq "") {
          print "Skipping graphs -- CHPL_TEST_PERF_DIR not set\n";
      } else {
          print "Making graphs...\n";
          `cd $graphdir && make`;
      }
  }
}

sub numsuccesses {
  $mystr = $_[0];
  $mystr =~ s/.* #Successes = //;
  $mystr =~ s/ \|.*//;
  $mystr;
}

sub numfailures {
  $mystr = $_[0];
  $mystr =~ s/.* #Failures = //;
  $mystr =~ s/ \|.*//;
  $mystr;
}

sub numfutures {
  $mystr = $_[0];
  $mystr =~ s/.* #Futures = //;
  $mystr =~ s/]//;
  $mystr;
}

sub delta {
  $delta = $_[1] - $_[0];
  if ($delta >= 0) {
      $delta = "+$delta";
  }
  $delta;
}

sub ensureSummaryExists {
    $summary = $_[0];
    $nosummary = system("test -r $summary");
    if ($nosummary) {
        print "Creating $summary\n";
        mysystem("echo \"[Summary: #Successes = 0 | #Failures = 0 | #Futures = 0]\" > $summary", "creating $summary", 1, 1);
    }
}
