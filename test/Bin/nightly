#!/usr/bin/perl

$valgrind = 0;

$printusage = 0;
if (@ARGV) {
    $debugflag = shift @ARGV;
    if ($debugflag eq "-debug") {
	$debug = 1;
	$valgrind = 0;
    } elsif ($debugflag eq "-cron") {
	$debug = 0;
	$valgrind = 1;
    } elsif ($debugflag eq "-cronnovgr") {
	$debug = 0;
	$valgrind = 0;
    } elsif ($debugflag eq "-debugvgr") {
	$debug = 1;
	$valgrind = 1;
    } else {
	$printusage = 1;
    }
} else {
    $printusage = 1;
}

$statdate = `date +%D`; chomp($statdate);

if (@ARGV) {
    $statdate = shift @ARGV;
}

if ($printusage == 1) {
    print "nightly [-debug|-debugvgr|-cron|-cronnovgr] {date}\n";
    print "\t-debug     : check out sources and run standard only\n";
    print "\t-debugvgr  : check out sources and run standard, valgrind\n";
    print "\t-cron      : use for nightly cron runs only\n";
    print "\t-cronnovgr : use for nightly cron runs on platforms without valgrind\n";
    exit 1;
}


#
# get uniquifiers
#
$pid = getpgrp();
$user = `whoami`;
chomp($user);
$debugmail = $ENV{'CHPL_NIGHTLY_DEBUG_EMAIL'};
if ($debugmail eq "") {
    $debugmail = "$user\@cray.com";
}
$today = `date +%w-%a`; chomp($today);
$platform = `uname -s`;
chomp($platform);
$platform = lc($platform);
if ($platform eq "linux") {
    $machine = `uname -m`;
    chomp($machine);
    if ($machine eq "x86_64") {
        $platform = "linux64";
    }
} elsif ($platform eq "cygwin_nt-5.1") {
    $platform = "cygwin";
}


#
# directory locations
#
$basetmpdir = $ENV{'CHPL_NIGHTLY_TMPDIR'};
if ($basetmpdir eq "") {
    $basetmpdir = $ENV{'TMPDIR'};
}
if ($basetmpdir eq "") {
    $basetmpdir = "/tmp";
}
$make = $ENV{'CHPL_NIGHTLY_MAKE'};
if ($make eq "") {
    $make = $ENV{'MAKE'};
}
if ($make eq "") {
    $make = "make";
}
$tmpdir = "$basetmpdir/chapel-nightly.$user.$pid.deleteme";
$chapeldir = "$tmpdir/chapel";
$testdir = "$chapeldir/test";
$statdir = $ENV{'CHPL_NIGHTLY_STATDIR'};
$logdir = $ENV{'CHPL_NIGHTLY_LOGDIR'};
$cronlogdir = $ENV{'CHPL_NIGHTLY_CRON_LOGDIR'};
if ($cronlogdir eq "") {
    $cronlogdir = "/data/sea/cascade/chapel/Nightly";
}
if ($logdir eq "" || $statdir eq "") {
    print "Error: CHPL_NIGHTLY_LOGDIR and CHPL_NIGHTLY_STATDIR must be set\n";
    exit 1;
}
if ($debug == 1) {
    $statfile = "$statdir/nightly.$platform-debug.dat";
} else {
    $statfile = "$statdir/nightly.$platform-cron.dat";
}


#
# test log filenames
#
if ($debug == 1) {
  $rawstdlog = "$logdir/debug-$platform-std.log";
  $rawvgrlog = "$logdir/debug-$platform-vgr.log";
} else {
  $rawstdlog = "$logdir/day$today-$platform-std.log";
  $rawvgrlog = "$logdir/day$today-$platform-vgr.log";
}
$rawstdsummary = "$rawstdlog.summary";
$rawvgrsummary = "$rawvgrlog.summary";

$sortedstdsummary = "$rawstdlog.sorted";
$sortedvgrsummary = "$rawvgrlog.sorted";

$prevstdsummary = "$cronlogdir/last-$platform-std.log.sorted";
$prevvgrsummary = "$cronlogdir/last-$platform-vgr.log.sorted";

#
# make "prev" logs if they don't already exist
#
ensureSummaryExists($prevstdsummary);
if ($valgrind == 1) {
    ensureSummaryExists($prevvgrsummary);
}

#
# set mail options
#
$mailer = $ENV{'CHPL_MAILER'};
if ($mailer eq "") {
    $mailer = "Mail";
}


$somethingfailed = 0;

#
# make temp directory
#
mysystem("mkdir $tmpdir > /dev/null", "creating temp dir", 1, 1);



#
# make environment is set properly
#
delete($ENV{'CHPLDEVTMP'});
delete($ENV{'CHPL_SYSTEM_DIR'});

#mysystem("which chpl", "locating chpl", 0, 0);
#mysystem("env", "checking environment", 0, 0);

 
#
# checkout sources
#
$uwusername = $ENV{'CHPL_UW_CVS_USERNAME'};
if ($uwusername eq "") {
    $uwusername = $user;
}
$cvsroot = ":pserver:$uwusername\@gemelli.cs.washington.edu:2403/gemelli3/chapelroot";
mysystem("cd $tmpdir && cvs -d $cvsroot checkout nightly", "cvs checkout", 1, 1);


#
# make cache of UW distribution
#
if ($debug == 0 && $platform eq "linux" && $user eq "bradc") {
  $todaydate = `date +%m%d%y`;
  chomp($todaydate);
  $lastmonth = `date -d"1 month ago" +%m%d%y`;
  chomp($lastmonth);
  $archivedir = "~$user/UWchapel";

  mysystem("cd $tmpdir && tar cvf chapel.tar chapel", "tarring chapel", 0, 1);
  mysystem("cd $tmpdir && gzip chapel.tar", "gzipping chapel", 0, 1);
  mysystem("cd $tmpdir && mv chapel.tar.gz $archivedir/chapel.$todaydate.tar.gz", "storing chapel", 0, 1);
  mysystem("cd $archivedir && rm -f chapel.$lastmonth.tar.gz", "removing last month's chapel", 0, 0);
}

#
# if on cygwin, blow away FILES files because they wreak havoc on stuff
#
if ($platform eq "cygwin") {
    mysystem("cd $chapeldir && find . -name FILES -exec rm {} \\;");
}


#
# build stuff
#
mysystem("cd $chapeldir && $make third-party", "making third-party", 1, 1);
mysystem("cd $chapeldir && $make compiler", "making chapel compiler", 1, 1);
mysystem("cd $chapeldir && $make runtime", "making chapel runtime", 1, 1);
if ($valgrind == 1) {
    mysystem("cd $chapeldir && $make nogc", "making no-GC version", 1, 1);
}


#
# run tests
#
#`rm -f $rawstdlog $rawvgrlog $rawstdsummary $rawvgrsummary`;
$stdstatus = mysystem("cd $testdir && ./start_test -logfile $rawstdlog", "running standard tests", 0, 0);
if ($valgrind == 1) {
  $vgrstatus = mysystem("cd $testdir && ./start_test -valgrind -logfile $rawvgrlog", "running valgrind tests", 0, 0);
} else {
    $vgrstatus = 1;
}


#
# sort output
#


if ($stdstatus == 0) {
    `cat $rawstdsummary | grep -v "^.END" | grep -v "^.Test Summary" | sort > $sortedstdsummary`;

    $oldstdsummary = `grep Summary: $prevstdsummary`; chomp($oldstdsummary);
    $newstdsummary = `grep Summary: $sortedstdsummary`; chomp($newstdsummary);

    $oldstdsucc = &numsuccesses($oldstdsummary);
    $oldstdfail = &numfailures($oldstdsummary);
    $oldstdfut  = &numfutures($oldstdsummary);

    $newstdsucc = &numsuccesses($newstdsummary);
    $newstdfail = &numfailures($newstdsummary);
    $newstdfut  = &numfutures($newstdsummary);

    $delstdsucc = &delta($oldstdsucc, $newstdsucc);
    $delstdfail = &delta($oldstdfail, $newstdfail);
    $delstdfut  = &delta($oldstdfut, $newstdfut);

    $stdsummary = "standard run: $newstdsucc Successes ($delstdsucc), $newstdfail Failures ($delstdfail)";
} else {
    $stdsummary = "standard run: failed";
}

if ($vgrstatus == 0) {
    `cat $rawvgrsummary | grep -v "^.END" | grep -v "^.Test Summary" | sort > $sortedvgrsummary`;
    
    $oldvgrsummary = `grep Summary: $prevvgrsummary`; chomp($oldvgrsummary);
    $newvgrsummary = `grep Summary: $sortedvgrsummary`; chomp($newvgrsummary);

    $oldvgrsucc = &numsuccesses($oldvgrsummary);
    $oldvgrfail = &numfailures($oldvgrsummary);
    $oldvgrfut  = &numfutures($oldvgrsummary);

    $newvgrsucc = &numsuccesses($newvgrsummary);
    $newvgrfail = &numfailures($newvgrsummary);
    $newvgrfut  = &numfutures($newvgrsummary);

    $delvgrsucc = &delta($oldvgrsucc, $newvgrsucc);
    $delvgrfail = &delta($oldvgrfail, $newvgrfail);
    $delvgrfut  = &delta($oldvgrfut, $newvgrfut);

    $vgrsummary = "valgrind run: $newvgrsucc Successes ($delvgrsucc), $newvgrfail Failures ($delvgrfail)";

} else {
    if ($valgrind == 1) {
	$vgrsummary = "valgrind run: failed";
    } else {
	$vgrsummary = "valgrind not run";
    }
}

$knownumtests = 1;
if ($stdstatus == 0) {
    $oldnumtests = $oldstdsucc + $oldstdfail;
    $newnumtests = $newstdsucc + $newstdfail;
    $deltests = &delta($oldnumtests, $newnumtests);
    $numtestssummary = "$newnumtests Tests ($deltests), $newstdfut Futures ($delstdfut)";
} elsif ($vgrstatus == 0) {
    $oldnumtests = $oldvgrsucc + $oldvgrfail;
    $newnumtests = $newvgrsucc + $newvgrfail;
    $deltests = &delta($oldnumtests, $newnumtests);
    $numtestssummary = "$newnumtests Tests ($deltests), $newvgrfut Futures ($delvgrfut)";
} else {
    $numtestssummary = "unknown number of Tests";
    $knownumtests = 0;
}




#
# send mail
#
$futuremarker = "^Future";

$newfailures = "???";
$newvgrfailures = "???";
if ($stdstatus == 0) {
    $newfailures = `comm -13 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:" | grep -v "$futuremarker" | wc -l`; chomp($newfailures);
    $newfailures += 0;
}
if ($vgrstatus == 0) {
    $newvgrfailures = `comm -13 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:" | grep -v "$futuremarker" | wc -l`; chomp($newvgrfailures);
    $newvgrfailures += 0;
    $shortstatus = "$newfailures/$newvgrfailures new failures";
} elsif ($stdstatus == 0) {
    $shortstatus = "$newfailures new failures";
} else {
    $shortstatus = "build/test failed";
}
if ($debug == 1) {
    $mailsubject = "Chapel: Debug Results ($platform): $shortstatus";
} else {
    $mailsubject = "Chapel: Nightly Results ($platform): $shortstatus";
}

if ($debug == 1) {
    $mailcommand = "| $mailer -s \"$mailsubject \" $debugmail";
} else {
    $mailcommand = "| $mailer -s \"$mailsubject \" chapel_cronmail\@cray.com";
}

open(MAIL, $mailcommand);

print MAIL "=== Summary ==========================================================\n";
print MAIL "$numtestssummary\n";
print MAIL "$stdsummary\n";
print MAIL "$vgrsummary\n";
print MAIL "======================================================================\n";
print MAIL "\n";

if ($stdstatus == 0) {
    print MAIL "--- New Errors (standard) --------------------------------------------\n";
    print MAIL `comm -13 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
    print MAIL "\n";
}

if ($vgrstatus == 0) {
    print MAIL "--- New Errors (valgrind) --------------------------------------------\n";
    print MAIL `comm -13 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
    print MAIL "\n";
}

if ($stdstatus == 0) {
    print MAIL "--- Resolved Errors (standard) ---------------------------------------\n";
    print MAIL `comm -23 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
    print MAIL "\n";
}

if ($vgrstatus == 0) {
    print MAIL "--- Resolved Errors (valgrind) ---------------------------------------\n";
    print MAIL `comm -23 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
    print MAIL "\n";
}

if ($stdstatus == 0) {
    print MAIL "--- Unresolved Errors (standard) -------------------------------------\n";
    print MAIL `comm -12 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
    print MAIL "\n";
}

if ($vgrstatus == 0) {
    print MAIL "--- Unresolved Errors (valgrind) -------------------------------------\n";
    print MAIL `comm -12 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:" | grep -v "$futuremarker"`;
    print MAIL "\n";
}

if ($stdstatus == 0) {
    print MAIL "--- Passing Future tests (standard) ----------------------------------\n";
    print MAIL `grep "$futuremarker" $sortedstdsummary | grep "Success"`;
    print MAIL "\n";    
}

if ($vgrstatus == 0) {
    print MAIL "--- Passing Future tests (valgrind) ----------------------------------\n";
    print MAIL `grep "$futuremarker" $sortedvgrsummary | grep "Success"`;
    print MAIL "\n";    
}

if ($stdstatus == 0) {
    print MAIL "--- New Failing Future tests (standard) ----------------------------------\n";
    print MAIL `comm -13 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "Error"`;
    print MAIL "\n";    
}

if ($vgrstatus == 0) {
    print MAIL "--- New Failing Future tests (valgrind) ----------------------------------\n";
    print MAIL `comm -13 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "Error"`;
    print MAIL "\n";    
}

if ($stdstatus == 0) {
    print MAIL "--- Unresolved Future tests (standard) ----------------------------------\n";
    print MAIL `comm -12 $prevstdsummary $sortedstdsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "Error"`;
    print MAIL "\n";    
}

if ($vgrstatus == 0) {
    print MAIL "--- Unresolved Future tests (valgrind) ----------------------------------\n";
    print MAIL `comm -12 $prevvgrsummary $sortedvgrsummary | grep -v "^.Summary:" | grep "$futuremarker" | grep "Error"`;
    print MAIL "\n";    
}

close(MAIL);


#
# tuck this run's output away for comparison tomorrow
#
if ($debug == 0) {
    if ($stdstatus == 0) {
	`cp $sortedstdsummary $prevstdsummary`;
    }
    if ($vgrstatus == 0) {
	`cp $sortedvgrsummary $prevvgrsummary`;
    }
}


#
# write stats and build new graph for linux only
#
if ($knownumtests == 1) {
    $testcol = "$newnumtests";
} else {
    $testcol = "-";
}
if ($stdstatus == 0) {
    $stdcol = "$newstdsucc";
} else {
    $stdcol = "-";
}
if ($vgrstatus == 0) {
    $vgrcol = "$newvgrsucc";
} else {
    $vgrcol = "-";
}
`echo "$statdate\t-\t$testcol\t$stdcol\t$vgrcol" >> $statfile`;
commitstats();

#
# clean up
#
if ($somethingfailed == 0) {
    mysystem("rm -rf $tmpdir", "removing temp dir", 0, 1);
}

exit 0;


#
# subroutines
#

sub mysystem {
    $command = $_[0];
    $errorname = $_[1];
    $fatal = $_[2];
    $mailmsg = $_[3];

    $status = system($command);
    if ($status != 0) {
	$somethingfailed = 1;
        $status = $status / 256;
	print "Error $_[1]: $status\n";

	if ($mailmsg != 0) {
	    open(MAIL, $mailcommand);
	    print MAIL "=== Summary ===================================================\n";
	    print MAIL "ERROR $_[1]: $status\n";
	    print MAIL "(workspace left at $tmpdir)\n";
	    print MAIL "===============================================================\n";
	    close(MAIL);
	}

	if ($fatal != 0) {
            `echo "$statdate\t1" >> $statfile`;
            commitstats();
	    exit 1;
	}
    }
    $status;
}

sub commitstats {
    if ($debug == 0) {
        `ci -l -m"automated nightly checkin" $statfile`;
    }
    $makeplotunexe = system("test -x $statdir/makeplot");
    if ($makeplotunexe) {
        print "skipping makeplot step\n";
    } else {
        `cd $statdir && ./makeplot`;
    }
}

sub numsuccesses {
  $mystr = $_[0];
  $mystr =~ s/.* #Successes = //;
  $mystr =~ s/ \|.*//;
  $mystr;
}

sub numfailures {
  $mystr = $_[0];
  $mystr =~ s/.* #Failures = //;
  $mystr =~ s/ \|.*//;
  $mystr;
}

sub numfutures {
  $mystr = $_[0];
  $mystr =~ s/.* #Futures = //;
  $mystr =~ s/]//;
  $mystr;
}

sub delta {
  $delta = $_[1] - $_[0];
  if ($delta >= 0) {
      $delta = "+$delta";
  }
  $delta;
}

sub ensureSummaryExists {
    $summary = $_[0];
    $nosummary = system("test -r $summary");
    if ($nosummary) {
        print "Creating $summary\n";
        mysystem("echo \"[Summary: #Successes = 0 | #Failures = 0 | #Futures = 0]\" > $summary", "creating $summary", 1, 1);
    }
}
