#!/bin/csh -f
#
#  Application output difference test for ZPL
#
# This is the sub_test that used to appear in all
# subdirectories, but we've now hoisted it to the
# top directory to avoid its over-replication and
# support modifications to it.
#
# The rules:
#
# 1) by default, all subdirectories under the
#    test directory will be run unless they contain
#    a file called NOTEST
#
# 2) if the directory contains a sub_test script,
#    that script will be run.  Otherwise, this one
#    will  be.
#
# 3) if the directory does not contain a sub_test
#    script, the start_test script will look for
#    files named COMPOPTS and EXECOPTS and will
#    add these to the zplcompopts and zplexecopts
#    flags, respectively.


# Check number of incoming arguments
if ( $#argv != 1 ) then
	echo usage\: sub_test compiler
	exit
endif

# commenting this out for now:
## set umask such that other testers can modify files also
#umask 002

set diffargs = ""

# make sure can execute compiler

set testdir = "$CHPL_HOME/test"
if (! -d $testdir || ! -x $testdir) then
    set testdir = "$CHPL_HOME/examples"
endif
if (! -d $testdir || ! -x $testdir) then
    echo "Error: Cannot find $CHPL_HOME/test or $CHPL_HOME/examples"
    exit 1
endif
set compiler = "$argv[1]"

set platform = `$CHPL_HOME/util/platform.pl --target`
set machine = `uname -n | awk 'BEGIN {FS = "."}{print $1}'`

if ( ! -f $compiler || ! -x $compiler ) then
	echo \[Cannot execute compiler \"$compiler\"\]
	exit
endif

# set variable to location of timedexec, a script that 
#  will only allow a program to execute for a certain number
#  of seconds ($timeout).
if (-r ./TIMEOUT) then
    set globalTimeout = "`cat ./TIMEOUT`"
else
    if ($CHPL_TEST_VGRND_COMP == "on" || $CHPL_TEST_VGRND_EXE == "on") then
	set globalTimeout = 900
    else
	set globalTimeout = 300
    endif
endif
set timedexec = "$testdir/Bin/timedexec"
if ( ! -f $timedexec || ! -x $timedexec ) then
	echo \[Cannot execute timedexec script \"$timedexec\"\]
endif

# build a string representing the local directory
# strip off $testdir
set sedstr = `echo $CHPL_TEST_INVOKE_DIR | sed 's/\//\\\//g'`
set sedstr = "s/$sedstr\///"
if ($cwd == $CHPL_TEST_INVOKE_DIR) then
    set localdir = "."
else
    set localdir = `echo $cwd | sed $sedstr`
endif

echo \[Starting subtest - `date`\]
echo \[pwd: \"`pwd`\"\]
# echo \[compiler: \"$compiler\"\]

if (-r ./COMPOPTS) then
    set globalCompopts = "$COMPOPTS `cat ./COMPOPTS`"
else
    set globalCompopts = "$COMPOPTS"
endif

if (-r ./LASTCOMPOPTS) then
    set globalLastcompopts = `cat ./LASTCOMPOPTS`
else
    set globalLastcompopts = ""
endif

if (-r ./NUMLOCALES) then
    set globalNumlocales = `cat ./NUMLOCALES`
else
    set globalNumlocales = "$NUMLOCALES"
endif

if (-r ./EXECOPTS) then
    set globalExecopts = "$EXECOPTS `cat ./EXECOPTS`"
else
    set globalExecopts = "$EXECOPTS"
endif

if (-r ./CATFILES) then
    set globalCatfiles = `cat ./CATFILES`
else
    set globalCatfiles = ""
endif

if (-r ./NOEXEC) then
    set execute = "no"
else
    set execute = "yes"
endif

if (-r ./NOVGRBIN) then
    set vgrbin = "no"
else
    set vgrbin = "yes"
endif

if (-r ./COMPSTDIN) then
    set compstdin = "./COMPSTDIN"
else
    set compstdin = "/dev/null"
endif

# get all the source files
if ($?CHPL_ONETEST == 0) then
    set testsrc = `ls | grep .chpl$`
else
    set testsrc = "$CHPL_ONETEST"
endif

# for this flag 2 == "test futures only"
#               1 == "test futures and non-futures"
#               0 == "test non-futures only"
set testfutures = $CHPL_TEST_FUTURES
set testnotests = $CHPL_TEST_NOTESTS

if ($?CHPL_VALGRIND_OPTS == 0) then
  set CHPL_VALGRIND_OPTS = "--tool=memcheck"
endif

if ($CHPL_TEST_VGRND_COMP == "on") then
  set valgrndcomp = "valgrind $CHPL_VALGRIND_OPTS --gen-suppressions=all --suppressions=$CHPL_HOME/compiler/etc/valgrind.suppressions -q "
else
  set valgrndcomp = ""
endif

if ($CHPL_TEST_VGRND_EXE == "on" && $vgrbin == "yes") then
  set valgrndbin = "valgrind $CHPL_VALGRIND_OPTS -q "
else
  set valgrndbin = ""
endif

if ("$LAUNCHCMD" == "") then
  set launchcmd = ""
else
  set launchcmd = "$LAUNCHCMD "
endif

if ($CHPL_TEST_INTERP == "on") then
    set execute = "no"
    set futureSuffix = "ifuture"
else
    set futureSuffix = "future"
endif

if ($?CHPL_TEST_PERF == 0) then
    set compoptsuffix = "compopts"
    set execoptsuffix = "execopts"
    set perftest = 0
else
    set compoptsuffix = "perfcompopts"
    set execoptsuffix = "perfexecopts"
    set perftest = 1
    if ($?CHPL_TEST_PERF_DIR == 0) then
        set perfdir = ./perfdat/$machine
    else
        set perfdir = $CHPL_TEST_PERF_DIR
    endif
endif

# compile, execute, and compare each source file
foreach chplsrc ($testsrc)

    # set execfile now since used in both if branches
    set execfile = $chplsrc:r
    # allow a platform-specific .good file to be used, if it exists
    set checkfile = $execfile.$machine.good
    if ( ! -r $checkfile ) then
        set checkfile = $execfile.comm-$CHPL_COMM.good
        if ( ! -r $checkfile ) then 
            set checkfile = $execfile.$platform.good
            if ( ! -r $checkfile ) then 
                set checkfile = $execfile.good
            endif
        endif
    endif
    set complog = $execfile.comp.out.tmp
    set execlog = $execfile.exec.out.tmp

    if (-r ./$execfile.perfkeys) then
    else
        if ($perftest == 1) then
#            echo \[Skipping noperf test: $localdir/$execfile\]
            continue
        endif
    endif

    if (-r ./$execfile.notest && $testnotests == 0) then
        echo \[Skipping notest test: $localdir/$execfile\]
        continue
    endif

    if (-r ./$execfile.skipif && $CHPL_TEST_SINGLES == 0) then
        set skiptest = `$testdir/Bin/testEnv.pl ./$execfile.skipif`
        if ($skiptest == 1) then
            echo "[Skipping $execfile.skipif based on .skipif environment settings]"
            continue
        endif
    endif

    if (-r ./$execfile.catfiles) then
        set catfiles = "$globalCatfiles `cat ./$execfile.catfiles`"
    else
        set catfiles = "$globalCatfiles"
    endif

    if (-r ./$execfile.$compoptsuffix) then
	set compopts = "$globalCompopts `cat ./$execfile.$compoptsuffix`"
    else
        set compopts = "$globalCompopts"
    endif

    if (-r ./$execfile.lastcompopts) then
        set lastcompopts = "$globalLastcompopts `cat ./$execfile.lastcompopts`"
    else
        set lastcompopts = "$globalLastcompopts"
    endif

    if (-r ./$execfile.numlocales) then
        set numlocales = "`cat ./$execfile.numlocales`"
    else
        set numlocales = "$globalNumlocales"
    endif

    if ($numlocales == "0" || $CHPL_COMM == "none") then
        set numlocexecopts = ""
    else
        set numlocexecopts = "-nl $numlocales"
    endif

    if (-r ./$execfile.$execoptsuffix) then
	set execopts = "$globalExecopts `cat ./$execfile.$execoptsuffix` $numlocexecopts"
    else
        set execopts = "$globalExecopts $numlocexecopts"
    endif

    if (-r ./$execfile.timeout) then
        set timeout = "`cat ./$execfile.timeout`"
    else
        set timeout = "$globalTimeout"
    endif

    if (-r ./$execfile.$futureSuffix) then
	set owner = "`head -n 1 ./$execfile.$futureSuffix`"
	set futuretest = "Future ($owner) "
    else
	set futuretest = ""
    endif

    if (-r ./$execfile.noexec) then
        set executebin = "no"
    else
        set executebin = $execute
    endif

    # skip future tests unless we request otherwise
    if (-r ./$execfile.future) then
        if ($testfutures == 0) then
            echo \[Skipping future test: $localdir/$execfile\]
            continue
        endif
    else
        if ($testfutures == 2) then
            echo \[Skipping non-future test: $localdir/$execfile\]
            continue
        endif
    endif

    # if interpreting, skip tests that are futures, noexec, or require execopts
    if ($CHPL_TEST_INTERP == "on" && (-r ./$execfile.noexec || -r ./$execfile.$execoptsuffix || -r ./$execfile.future)) then
        echo \[Skipping interpretation of: $localdir/$execfile\]
        continue
    endif

    echo \[Executing: \"$valgrndcomp$compiler -o $execfile $compopts $chplsrc $lastcompopts \< $compstdin\"\]
    $timedexec $timeout "$valgrndcomp$compiler -o $execfile $compopts $chplsrc $lastcompopts" < "$compstdin" >& $complog
	
    set compstatus = $status
    if ( $compstatus != 0 || $executebin == "no") then
	# Compile unsuccessful
        if ( $compstatus == 222) then
            echo "$futuretest""[Error: Timed out compilation for $localdir/$execfile]"
            continue
        endif
	# Compare compiler output with expected program output
	if ( "$catfiles" != "") then
	    echo \[Concatenating extra files: $catfiles\]
	    cat $catfiles >>& $complog
	endif

	if (-x ./PREDIFF) then
            echo \[Executing PREDIFF\]
	    ./PREDIFF $execfile $complog $compiler
	endif
        if (-x ./$execfile.prediff) then
            echo \[Executing $execfile.prediff\]
            ./$execfile.prediff $execfile $complog $compiler
        endif
	if ( ! -r $checkfile ) then
	    echo \[Error cannot locate compiler output comparison file $localdir/$checkfile\]
            echo \[Compiler output was as follows:\]
            cat $complog
	    continue
	endif

	echo \[Executing diff $diffargs $checkfile $complog\]
	diff $diffargs $checkfile $complog
	set difffailed = $status
        if ( $difffailed == 0 ) then
	    echo "$futuretest""[Success matching compiler output for $localdir/$execfile]"
	    rm $complog
	else
	    echo "$futuretest""[Error matching compiler output for $localdir/$execfile]"
	    continue
	endif
    else
	# Compile successful
	# Compare output of program execution to expected 
	#   program output
	echo \[Success compiling $localdir/$chplsrc\]
	if ($?CHPL_COMPONLY) then
	    echo \[Note: Not executing or comparing the output due to -noexec flag\]
	    continue
	endif

	set binfile = $execfile

	if (-x ./PREEXEC) then
            echo \[Executing PREEXEC\]
	    ./PREEXEC $execfile $execlog $compiler
	endif
        if (-x ./$execfile.preexec) then
            echo \[Executing $execfile.preexec\]
            ./$execfile.preexec $execfile $complog $compiler
        endif


	if ( -f $binfile && -x $binfile ) then
	    # Move compiler output to program output directory.
	    # Will be concatenated with program output so that
	    # compiler warnings and program output are in one
	    # file.

	    mv $complog $execlog

	    if (-r ./$execfile.stdin) then
	        set redirectin = "$execfile.stdin"
	    else 
	        set redirectin = "/dev/null"
	    endif

	    echo \[Executing program $launchcmd$valgrndbin./$binfile "$execopts" \< $redirectin at `date +"%H:%M:%S"`\]
	    # Append program output to that of the 
	    # compiler (in case warning were output
	    # by compiler)
	    $timedexec $timeout "$launchcmd$valgrndbin./$binfile $execopts" < $redirectin >>& $execlog
            set execstatus = $status

            if ( $execstatus == 222) then
               echo "$futuretest""[Error: Timed out executing program $localdir/$execfile]"
               rm -f $binfile ${binfile}_real
               continue
            endif

	    if ( "$catfiles" != "") then
		echo \[Concatenating extra files: $catfiles\]
		cat $catfiles >>& $execlog
	    endif

	    if (-x ./PREDIFF) then
                echo \[Executing PREDIFF\]
		./PREDIFF $execfile $execlog $compiler
	    endif
            if (-x ./$execfile.prediff) then
                echo \[Executing $execfile.prediff\]
                ./$execfile.prediff $execfile $execlog $compiler
            endif

            if ($perftest == 0) then
	    if ( ! -r $checkfile ) then
		echo \[Error cannot locate program output comparison file $localdir/$checkfile\]
                echo \[Execution output was as follows:\]
                cat $execlog
		rm -f $binfile ${binfile}_real
		continue
	    endif

	    echo \[Executing diff $checkfile $execlog\]
	    diff $diffargs $checkfile $execlog
	    set difffailed = $status
	    if ( $difffailed == 0 ) then
		echo "$futuretest""[Success matching program output for $localdir/$execfile]"
		rm $execlog
		rm -f $binfile ${binfile}_real
	    else
		echo "$futuretest""[Error matching program output for $localdir/$execfile]"
		rm -f $binfile ${binfile}_real
		continue
	    endif
            else
                if (! -e $perfdir) then
                    mkdir -p $perfdir
                endif
                echo \[Executing checkKeys $execfile $perfdir\]
                $testdir/Bin/computePerfStats.pl $execfile $perfdir
                set perfstatus = $status
                if ($perfstatus == 0) then
                    echo "[Success matching performance keys for $localdir/$execfile]"
                else
                    echo "[Error matching performance keys for $localdir/$execfile]"
                endif
		rm $execlog
		rm -f $binfile ${binfile}_real
            endif
	else
	    echo "$futuretest""[Error could not locate executable $binfile for $localdir/$execfile]"
	endif
    endif
end
		
