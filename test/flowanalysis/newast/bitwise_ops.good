

 called from 46 in __entryPoint at bitwise_ops.chpl:46
 called from 46 in __entryPoint at bitwise_ops.chpl:46
 called from 46 in __entryPoint at bitwise_ops.chpl:46
::0(bitwise_ops.chpl:3) ( int64 (<unknown>:0) )
::0(bitwise_ops.chpl:5) ( int64 (<unknown>:0) )
::1(bitwise_ops.chpl:4) ( int64 (<unknown>:0) )
::10(bitwise_ops.chpl:1) ( int64 (<unknown>:0) )
::12(bitwise_ops.chpl:2) ( int64 (<unknown>:0) )
::\n(bitwise_ops.chpl:7) ( string (<unknown>:0) )
::\n(bitwise_ops.chpl:8) ( string (<unknown>:0) )
::\n(bitwise_ops.chpl:9) ( string (<unknown>:0) )
::\n\n(bitwise_ops.chpl:10) ( string (<unknown>:0) )
::__entryPoint(<unknown>:0) ( __entryPoint (bitwise_ops.chpl:46) )
::__init(<unknown>:0) ( __init (<unknown>:0) )
::__init(bitwise_ops.chpl:46) ( __init (<unknown>:0) )
::__initIntPrelude(<unknown>:0) ( __initIntPrelude (<unknown>:0) )
::__initIntPrelude(bitwise_ops.chpl:46) ( __initIntPrelude (<unknown>:0) )
::__initPrelude(<unknown>:0) ( __initPrelude (<unknown>:0) )
::__initPrelude(bitwise_ops.chpl:46) ( __initPrelude (<unknown>:0) )
::actual answer = (bitwise_ops.chpl:15) ( string (<unknown>:0) )
::actual answer = (bitwise_ops.chpl:21) ( string (<unknown>:0) )
::actual answer = (bitwise_ops.chpl:27) ( string (<unknown>:0) )
::actual answer = (bitwise_ops.chpl:33) ( string (<unknown>:0) )
::actual answer = (bitwise_ops.chpl:39) ( string (<unknown>:0) )
::actual answer = (bitwise_ops.chpl:45) ( string (<unknown>:0) )
::answer(<unknown>:0) ( int64 (<unknown>:0) )
::answer(bitwise_ops.chpl:15) ( int64 (<unknown>:0) )
::answer(bitwise_ops.chpl:21) ( int64 (<unknown>:0) )
::answer(bitwise_ops.chpl:27) ( int64 (<unknown>:0) )
::answer(bitwise_ops.chpl:33) ( int64 (<unknown>:0) )
::answer(bitwise_ops.chpl:39) ( int64 (<unknown>:0) )
::answer(bitwise_ops.chpl:45) ( int64 (<unknown>:0) )
::expected answer = 0(bitwise_ops.chpl:37) ( string (<unknown>:0) )
::expected answer = 1(bitwise_ops.chpl:31) ( string (<unknown>:0) )
::expected answer = 1(bitwise_ops.chpl:43) ( string (<unknown>:0) )
::expected answer = 14(bitwise_ops.chpl:25) ( string (<unknown>:0) )
::expected answer = 6(bitwise_ops.chpl:19) ( string (<unknown>:0) )
::expected answer = 8(bitwise_ops.chpl:13) ( string (<unknown>:0) )
::m = (bitwise_ops.chpl:7) ( string (<unknown>:0) )
::m(<unknown>:0) ( int64 (<unknown>:0) )
::m(bitwise_ops.chpl:7) ( int64 (<unknown>:0) )
::n = (bitwise_ops.chpl:8) ( string (<unknown>:0) )
::n(<unknown>:0) ( int64 (<unknown>:0) )
::n(bitwise_ops.chpl:8) ( int64 (<unknown>:0) )
::null(<unknown>:0) ( void (<unknown>:0) )
::o = (bitwise_ops.chpl:9) ( string (<unknown>:0) )
::o(<unknown>:0) ( int64 (<unknown>:0) )
::o(bitwise_ops.chpl:9) ( int64 (<unknown>:0) )
::p = (bitwise_ops.chpl:10) ( string (<unknown>:0) )
::p(<unknown>:0) ( int64 (<unknown>:0) )
::p(bitwise_ops.chpl:10) ( int64 (<unknown>:0) )
::test: m & n(bitwise_ops.chpl:12) ( string (<unknown>:0) )
::test: m ^ n(bitwise_ops.chpl:18) ( string (<unknown>:0) )
::test: m | n(bitwise_ops.chpl:24) ( string (<unknown>:0) )
::test: o || o(bitwise_ops.chpl:36) ( string (<unknown>:0) )
::test: o || p(bitwise_ops.chpl:30) ( string (<unknown>:0) )
::test: p || p(bitwise_ops.chpl:42) ( string (<unknown>:0) )
answer = (m&n);
answer = (m^n);
answer = (m|n);
answer = (o||o);
answer = (o||p);
answer = (p||p);
function __entryPoint bitwise_ops.chpl:46
function __init bitwise_ops.chpl:46
function __init() {
function __initIntPrelude bitwise_ops.chpl:46
function __initPrelude bitwise_ops.chpl:46
globals
var answer: integer = 0;
var m: integer = 10;
var n: integer = 12;
var o: integer = 0;
var p: integer = 1;
write("m = ", m, "\n");
write("n = ", n, "\n");
write("o = ", o, "\n");
write("p = ", p, "\n\n");
writeln("actual answer = ", answer);
writeln("actual answer = ", answer);
writeln("actual answer = ", answer);
writeln("actual answer = ", answer);
writeln("actual answer = ", answer);
writeln("actual answer = ", answer);
writeln("expected answer = 0");
writeln("expected answer = 1");
writeln("expected answer = 1");
writeln("expected answer = 14");
writeln("expected answer = 6");
writeln("expected answer = 8");
writeln("test: m & n");
writeln("test: m ^ n");
writeln("test: m | n");
writeln("test: o || o");
writeln("test: o || p");
writeln("test: p || p");
writeln();
writeln();
writeln();
writeln();
writeln();
}
