

 called from 21 in __entryPoint at mod.chpl:21
 called from 21 in __entryPoint at mod.chpl:21
 called from 21 in __entryPoint at mod.chpl:21
::0(mod.chpl:4) ( int64 (<unknown>:0) )
::10(mod.chpl:3) ( int64 (<unknown>:0) )
::2(mod.chpl:2) ( int64 (<unknown>:0) )
::5(mod.chpl:1) ( int64 (<unknown>:0) )
::__entryPoint(<unknown>:0) ( __entryPoint (mod.chpl:21) )
::__init(<unknown>:0) ( __init (<unknown>:0) )
::__init(mod.chpl:21) ( __init (<unknown>:0) )
::__initIntPrelude(<unknown>:0) ( __initIntPrelude (<unknown>:0) )
::__initIntPrelude(mod.chpl:21) ( __initIntPrelude (<unknown>:0) )
::__initPrelude(<unknown>:0) ( __initPrelude (<unknown>:0) )
::__initPrelude(mod.chpl:21) ( __initPrelude (<unknown>:0) )
::actual answer = (mod.chpl:14) ( string (<unknown>:0) )
::actual answer = (mod.chpl:20) ( string (<unknown>:0) )
::answer(<unknown>:0) ( int64 (<unknown>:0) )
::answer(mod.chpl:14) ( int64 (<unknown>:0) )
::answer(mod.chpl:20) ( int64 (<unknown>:0) )
::expected answer = 0(mod.chpl:18) ( string (<unknown>:0) )
::expected answer = 1(mod.chpl:12) ( string (<unknown>:0) )
::m = (mod.chpl:6) ( string (<unknown>:0) )
::m(<unknown>:0) ( int64 (<unknown>:0) )
::m(mod.chpl:6) ( int64 (<unknown>:0) )
::n = (mod.chpl:7) ( string (<unknown>:0) )
::n(<unknown>:0) ( int64 (<unknown>:0) )
::n(mod.chpl:7) ( int64 (<unknown>:0) )
::null(<unknown>:0) ( void (<unknown>:0) )
::o = (mod.chpl:8) ( string (<unknown>:0) )
::o(<unknown>:0) ( int64 (<unknown>:0) )
::o(mod.chpl:8) ( int64 (<unknown>:0) )
::test: m % n(mod.chpl:11) ( string (<unknown>:0) )
::test: o % m(mod.chpl:17) ( string (<unknown>:0) )
answer = (m%n);
answer = (o%m);
function __entryPoint mod.chpl:21
function __init mod.chpl:21
function __init() {
function __initIntPrelude mod.chpl:21
function __initPrelude mod.chpl:21
globals
var answer: integer = 0;
var m: integer = 5;
var n: integer = 2;
var o: integer = 10;
writeln("actual answer = ", answer);
writeln("actual answer = ", answer);
writeln("expected answer = 0");
writeln("expected answer = 1");
writeln("m = ", m);
writeln("n = ", n);
writeln("o = ", o);
writeln("test: m % n");
writeln("test: o % m");
writeln();
writeln();
}
