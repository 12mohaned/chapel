from libc.stdint cimport *

cdef extern from "arrayAndExternArrayType.h":
	void chpl__init_arrayAndExternArrayType(int64_t _ln, int32_t _fn);
	void takesArrays(chpl_external_array * x, chpl_external_array * otherVal);
	chpl_external_array returnsExternArray();

cdef extern from "chpltypes.h":
	ctypedef void* c_fn_ptr

cdef extern from "chpl-init.h":
	void chpl_library_init(int argc, char* argv[])
	void chpl_library_finalize()

cdef extern from "chpl-external-array.h":
	ctypedef struct chpl_external_array:
		void* elts
		uint64_t size

	chpl_external_array chpl_make_external_array(uint64_t elt_size, uint64_t num_elts)
	chpl_external_array chpl_make_external_array_ptr(void* elts, uint64_t size)
	void chpl_free_external_array(chpl_external_array x)
from chpl_arrayAndExternArrayType cimport chpl_library_init, chpl_library_finalize, chpl_external_array, chpl_make_external_array, chpl_make_external_array_ptr, chpl_free_external_array
from chpl_arrayAndExternArrayType cimport chpl__init_arrayAndExternArrayType, takesArrays as chpl_takesArrays, returnsExternArray as chpl_returnsExternArray

import numpy
cimport numpy

def chpl_setup():
	cdef char** args = ['arrayAndExternArrayType']
	chpl_library_init(1, args)
	chpl__init_arrayAndExternArrayType(1, 1)

def chpl_cleanup():
	chpl_library_finalize()

def takesArrays( x, chpl_external_array * otherVal):
	<something>
	chpl_takesArrays(x_chpl, otherVal)

def returnsExternArray():
	ret = chpl_returnsExternArray()
	return ret
