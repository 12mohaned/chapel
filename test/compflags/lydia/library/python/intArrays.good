from libc.stdint cimport *

cdef extern from "intArrays.h":
	void chpl__init_intArrays(int64_t _ln, int32_t _fn);
	void takesArray(chpl_external_array * x);
	chpl_external_array returnsArray();

cdef extern from "chpltypes.h":
	ctypedef void* c_fn_ptr

cdef extern from "chpl-init.h":
	void chpl_library_init(int argc, char* argv[])
	void chpl_library_finalize()

cdef extern from "chpl-external-array.h":
	ctypedef struct chpl_external_array:
		void* elts
		uint64_t size

	chpl_external_array chpl_make_external_array(uint64_t elt_size, uint64_t num_elts)
	chpl_external_array chpl_make_external_array_ptr(void* elts, uint64_t size)
	void chpl_free_external_array(chpl_external_array x)
from chpl_intArrays cimport chpl_library_init, chpl_library_finalize, chpl_external_array, chpl_make_external_array, chpl_make_external_array_ptr, chpl_free_external_array
from chpl_intArrays cimport chpl__init_intArrays, takesArray as chpl_takesArray, returnsArray as chpl_returnsArray

import numpy
cimport numpy

def chpl_setup():
	cdef char** args = ['intArrays']
	chpl_library_init(1, args)
	chpl__init_intArrays(1, 1)

def chpl_cleanup():
	chpl_library_finalize()

def takesArray(x):
	cdef chpl_external_array chpl_x = chpl_make_external_array(sizeof(numpy.int64_t), len(x))
	for i in range(len(x)):
		(<numpy.int64_t*>chpl_x.elts)[i] = x[i]
	chpl_takesArray(&chpl_x)
	chpl_free_external_array(chpl_x)

def returnsArray():
	cdef chpl_external_array ret_arr = chpl_returnsArray()
	cdef numpy.ndarray [numpy.int64_t, ndim=1] ret = numpy.zeros(shape = ret_arr.size, dtype = numpy.int64)
	for i in range(ret_arr.size):
		ret[i] = (<numpy.int64_t*>ret_arr.elts)[i]
	chpl_free_external_array(ret_arr)
	return ret
from distutils.core import setup
from distutils.core import Extension
from Cython.Build import cythonize
import numpy

setup(name = 'intArrays library',
	ext_modules = cythonize(
		Extension("intArrays",
			include_dirs=[numpy.get_include()],
			sources=["intArrays.pyx"],
			libraries=["intArrays"] + chpl_libraries)))
