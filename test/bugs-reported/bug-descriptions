*****************************************
BUGS REPORTED: I am new to the Chapel Community. Hence, if any of the following bugs are known beforehand or already resolved, kindly pardon me.
BUGS REPORTED BY: Rohan Badlani. 
*****************************************

*****************************************
System Specification:
*****************************************
1. Chapel Version: 
----------------------------------------
chpl Version 1.12.0.df10fc5
Copyright (c) 2004-2016, Cray Inc.  (See LICENSE file for more details)
----------------------------------------

2. Output of $CHPL_HOME/util/printchplenv
----------------------------------------
machine info: Linux Ninja007 3.13.0-63-generic #103-Ubuntu SMP Fri Aug 14 21:42:59 UTC 2015 x86_64
CHPL_HOME: /home/rohan/Desktop/os/chapel/chapel-code/chapel *
script location: /home/rohan/Desktop/os/chapel/chapel-code/chapel/util
CHPL_TARGET_PLATFORM: linux64
CHPL_TARGET_COMPILER: gnu
CHPL_TARGET_ARCH: native
CHPL_LOCALE_MODEL: flat
CHPL_COMM: none
CHPL_TASKS: qthreads
CHPL_LAUNCHER: none
CHPL_TIMERS: generic
CHPL_MEM: jemalloc
CHPL_MAKE: make
CHPL_ATOMICS: intrinsics
CHPL_GMP: gmp
CHPL_HWLOC: hwloc
CHPL_REGEXP: re2
CHPL_WIDE_POINTERS: struct
CHPL_AUX_FILESYS: none
----------------------------------------

3. GCC version : 4.9.2
----------------------------------------
gcc (Ubuntu 4.9.2-0ubuntu1~14.04) 4.9.2
Copyright (C) 2014 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
----------------------------------------

4. [Bug Descriptions/Feature Additions and Possible Reasons]:
----------------------------------------

	i. (bug1.chpl) bug1.chpl:26: syntax error: near '++'

		Feature Addition:
			Support for postfix and prefix increment and decrement operators.
			
		Explaination:
			Many times programmer may want the flexibility of using postfix/prefix increment and decrement operators. 
			
	ii. (bug2.chpl) bug2.chpl:102: syntax error

		Bug Description:
			Non matching parenthesis. The compiler should throw proper error alongwith the reference to the unmatched parenthesis.
			In this case, the compiler cannot find the closing brace.
		
		
		Possible Reason:
			The compiler treats everything inside the first brace as part of function and 2nd parenthesis of merge() as part of a block. 
			Should throw the opening brace also in the error.

	iii. (bug3.chpl) syntax error: near '?'
		Feature Addition:
			Support for conditional operators.

		Explaination:
			It becomes very easy to test simple conditions for the programmer using the conditional operators. 
		
	iv.a. (bug4.chpl)
			bug4.chpl:27: In function 'dequeue':
			bug4.chpl:34: error: unresolved access of 'list(int(64))' by '(int(64))'
 
		
		Bug Description:
			The List Module does not support accessing elements of a list based on index. I feel that this should be supported.
			 

		Explaination:
			I understand the list is implemented as a record, and the above syntax to access the list elements isn't correct, but I as a programmer would want to access elements of the list in some way using indices.
		
	iv.b. (bug4.chpl)
		If we change the access in line 34 to var data:int = underlying_list.these(front)
		
			bug5.chpl:27: In function 'dequeue':
			bug5.chpl:34: internal error: FUN3849 chpl Version 1.12.0.df10fc5

			Internal errors indicate a bug in the Chapel compiler ("It's us, not you"),
			and we're sorry for the hassle.  We would appreciate your reporting this bug -- 
			please see http://chapel.cray.com/bugs.html for instructions.  In the meantime,
			the filename + line number above may be useful in working around the issue.

		Bug Description:
			The List Module supports iterators on lists. I am able to iterate through the list (see displayQueue()) but accessing an index through this iterator leads to an internal error. 				I feel that this should yield the element at that index - if it is a valid index, else an IndexOutOfBounds exception.

	v. (bug5.chpl) 
		Module Addition:
			Support for stack and queue data structures. Also have Concurrent versions of these data structures - thread-safe (or task-safe if you will) access to these data structures.
			Forgive me if it already exists, but I couldn't find the Stack and Queue implementations in the Standard Library.  		
		
		Explaination:
			Stack and Queue are very popular Data Structures and i feel that having is of paramount importance.
			I have tried to implement Queue Data Structure using Lists.

	
	vi. (bug6.chpl)	
			bug6.chpl:1: error: Cannot find module or enum 'Queue'
	
		Bug Description:
			Chapel is unable to import a module in the same directory. (as it is described here in Module section: http://faculty.knox.edu/dbunde/teaching/chapel/)
			I even added the directory to $CHPL_MODULE_PATH (as described here: http://chapel.cray.com/docs/1.12/technotes/module_search.html)
	 
		
	vii. (unimplemented feature) 
	Support for Graph Data Structures and Concurrent Graph DS. 
		
		Feature Addition:
			Graphs are important data structures, used in many data-intensive processing (like Data Mining Algorithms). 
			Supporting optimized Graph Data Structures in the Standard Library will really help the Chapel Users.
			
			I am in the process of writing a simple Module supporting common Graph DS and Algorithms like BFS, DFS, MST Algorithms, etc.
