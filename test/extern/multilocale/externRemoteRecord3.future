feature request: Chapel shouldn't pass remote pointers to C

These tests show that, currently, Chapel will happily pass pointers to
remote records off to external C routines in a way that results in
accessing arbitrary memory incorrectly at execution time.  My
intuition is that we should have a locality check before passing such
pointers to C (when compiling with --checks) that catches such cases
and tells the user they're doing something illegal.  My guess is that
this also wouldn't be hard to implement given that it looks like we
already insert a localization step to get the pointer value from a
wide pointer before passing to C (where, if it were a Chapel routine
we'd presumably just pass the wide pointer).

One might argue that we should copy the record over to the local
locale automatically and then pass it off to C, but I'm not certain I
agree with that (or at least would require more convincing).
Specifically, we don't typically auto-localize records...  Though
having said that, it seems we do localize them when passing them by
value to C (as in foo() for externRemoteRecord1.chpl).  But that
arguably might fall under the "copy in" semantics that the
pass-by-value already implies (though we're arguably doing it twice:
Once in Chapel and once in the generated C).  In any case, until the
day that we've had this discussion and made the decision, I think we
should be generating errors rather than passing invalid pointers.
