/***************************************************************
This code was generated by  Spiral 5.0 beta, www.spiral.net --
Copyright (c) 2005, Carnegie Mellon University
All rights reserved.
The code is distributed under a BSD style license
(see http://www.opensource.org/licenses/bsd-license.php)

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
  notice, reference to Spiral, this list of conditions and the
  following disclaimer.
  * Redistributions in binary form must reproduce the above
  copyright notice, this list of conditions and the following
  disclaimer in the documentation and/or other materials provided
  with the distribution.
  * Neither the name of Carnegie Mellon University nor the name of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*AS IS* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
******************************************************************/

use omega;
var  buf4: [0..255] complex;
var  buf5: [0..63] complex;
var  dat10: [0..27] complex;
var  dat7: [0..123] complex;
var  dat8: [0..123] complex;
var  dat9: [0..27] complex;

def init_fft256() {
  for i125628 in [0..30] {
    for i125638 in [0..1] {
      dat7(((i125628*4) + (i125638*2))) = omega(256, ((i125628 + 1)*i125638));
      dat7(((i125628*4) + (i125638*2) + 1)) = omega(256, ((i125628 + 1)*(i125638 + 2)));
    }
  }
  for i125629 in [0..30] {
    for i125646 in [0..1] {
      dat8(((i125629*4) + (i125646*2))) = omega(256, ((33 + i125629)*i125646));
      dat8(((i125629*4) + (i125646*2) + 1)) = omega(256, ((33 + i125629)*(i125646 + 2)));
    }
  }
  for i125648 in [0..6] {
    for i125658 in [0..1] {
      dat9(((i125648*4) + (i125658*2))) = omega(64, ((i125648 + 1)*i125658));
      dat9(((i125648*4) + (i125658*2) + 1)) = omega(64, ((i125648 + 1)*(i125658 + 2)));
    }
  }
  for i125649 in [0..6] {
    for i125666 in [0..1] {
      dat10(((i125649*4) + (i125666*2))) = omega(64, ((9 + i125649)*i125666));
      dat10(((i125649*4) + (i125666*2) + 1)) = omega(64, ((9 + i125649)*(i125666 + 2)));
    }
  }

}

def fft256(Y: [0..255] complex, X: [0..255] complex) {
  for i125630 in [0..3] {
    for i125650 in [0..3] {
      var a214829, a214830, a214831, a214832, a214834, a214835, a214836, a214837, s92605, s92606, s92607, s92608, s92609, s92610, s92611, s92612, s92613, s92614, s92615, s92616, s92617, s92618, s92619, s92620, s92621, s92622, s92623, s92624, s92625, s92626, s92627, s92628, s92629, t192672, t192673, t192674, t192675, t192676, t192677, t192678, t192679, t192680, t192681, t192682, t192683, t192684, t192685, t192686, t192687, t192688, t192689, t192690, t192691, t192692, t192693, t192694, t192695, t192696, t192697, t192698, t192699, t192700, t192701, t192702:complex;
      var a214828, a214833:int;
      a214828 = (i125630 + (4*i125650));
      s92605 = X(a214828);
      s92606 = X((a214828 + 128));
      t192672 = (s92605 + s92606);
      t192673 = (s92605 - s92606);
      s92607 = X((a214828 + 64));
      s92608 = X((a214828 + 192));
      t192674 = (s92607 + s92608);
      t192675 = (t192672 + t192674);
      t192676 = (t192672 - t192674);
      a214829 = (1.0i*(s92607 - s92608));
      t192677 = (t192673 + a214829);
      t192678 = (t192673 - a214829);
      s92609 = X((a214828 + 16));
      s92610 = X((a214828 + 144));
      t192679 = (s92609 + s92610);
      t192680 = (s92609 - s92610);
      s92611 = X((a214828 + 80));
      s92612 = X((a214828 + 208));
      t192681 = (s92611 + s92612);
      t192682 = (t192679 + t192681);
      s92613 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t192679 - t192681));
      a214830 = (1.0i*(s92611 - s92612));
      s92614 = ((0.92387953251128674 + 1.0i * 0.38268343236508978)*(t192680 + a214830));
      s92615 = ((0.38268343236508978 + 1.0i * 0.92387953251128674)*(t192680 - a214830));
      s92616 = X((a214828 + 32));
      s92617 = X((a214828 + 160));
      t192683 = (s92616 + s92617);
      t192684 = (s92616 - s92617);
      s92618 = X((a214828 + 96));
      s92619 = X((a214828 + 224));
      t192685 = (s92618 + s92619);
      t192686 = (t192683 + t192685);
      s92620 = (1.0i*(t192683 - t192685));
      a214831 = (1.0i*(s92618 - s92619));
      s92621 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(t192684 + a214831));
      s92622 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t192684 - a214831));
      s92623 = X((a214828 + 48));
      s92624 = X((a214828 + 176));
      t192687 = (s92623 + s92624);
      t192688 = (s92623 - s92624);
      s92625 = X((a214828 + 112));
      s92626 = X((a214828 + 240));
      t192689 = (s92625 + s92626);
      t192690 = (t192687 + t192689);
      s92627 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(t192687 - t192689));
      a214832 = (1.0i*(s92625 - s92626));
      s92628 = ((0.38268343236508978 + 1.0i * 0.92387953251128674)*(t192688 + a214832));
      s92629 = ((-0.92387953251128674 - 1.0i * 0.38268343236508978)*(t192688 - a214832));
      t192691 = (t192675 + t192686);
      t192692 = (t192675 - t192686);
      t192693 = (t192682 + t192690);
      a214833 = (16*i125650);
      buf5(a214833) = (t192691 + t192693);
      buf5((8 + a214833)) = (t192691 - t192693);
      a214834 = (1.0i*(t192682 - t192690));
      buf5((4 + a214833)) = (t192692 + a214834);
      buf5((12 + a214833)) = (t192692 - a214834);
      t192694 = (t192677 + s92621);
      t192695 = (t192677 - s92621);
      t192696 = (s92614 + s92628);
      buf5((1 + a214833)) = (t192694 + t192696);
      buf5((9 + a214833)) = (t192694 - t192696);
      a214835 = (1.0i*(s92614 - s92628));
      buf5((5 + a214833)) = (t192695 + a214835);
      buf5((13 + a214833)) = (t192695 - a214835);
      t192697 = (t192676 + s92620);
      t192698 = (t192676 - s92620);
      t192699 = (s92613 + s92627);
      buf5((2 + a214833)) = (t192697 + t192699);
      buf5((10 + a214833)) = (t192697 - t192699);
      a214836 = (1.0i*(s92613 - s92627));
      buf5((6 + a214833)) = (t192698 + a214836);
      buf5((14 + a214833)) = (t192698 - a214836);
      t192700 = (t192678 + s92622);
      t192701 = (t192678 - s92622);
      t192702 = (s92615 + s92629);
      buf5((3 + a214833)) = (t192700 + t192702);
      buf5((11 + a214833)) = (t192700 - t192702);
      a214837 = (1.0i*(s92615 - s92629));
      buf5((7 + a214833)) = (t192701 + a214837);
      buf5((15 + a214833)) = (t192701 - a214837);
    }
    var a214862, t192719, t192720, t192721:complex;
    var a214861:int;
    t192719 = (buf5(0) + buf5(32));
    t192720 = (buf5(0) - buf5(32));
    t192721 = (buf5(16) + buf5(48));
    a214861 = (64*i125630);
    buf4(a214861) = (t192719 + t192721);
    buf4((a214861 + 32)) = (t192719 - t192721);
    a214862 = (1.0i*(buf5(16) - buf5(48)));
    buf4((16 + a214861)) = (t192720 + a214862);
    buf4((48 + a214861)) = (t192720 - a214862);
    for i125648 in [0..6] {
      var a214908, s92646, s92647, s92648, s92649, t192738, t192739, t192740:complex;
      var a214907, b45100:int;
      a214907 = (4*i125648);
      s92646 = (dat9(a214907)*buf5((1 + i125648)));
      s92647 = (dat9((1 + a214907))*buf5((33 + i125648)));
      t192738 = (s92646 + s92647);
      t192739 = (s92646 - s92647);
      s92648 = (dat9((2 + a214907))*buf5((17 + i125648)));
      s92649 = (dat9((3 + a214907))*buf5((49 + i125648)));
      t192740 = (s92648 + s92649);
      b45100 = ((64*i125630) + i125648);
      buf4((b45100 + 1)) = (t192738 + t192740);
      buf4((b45100 + 33)) = (t192738 - t192740);
      a214908 = (1.0i*(s92648 - s92649));
      buf4((b45100 + 17)) = (t192739 + a214908);
      buf4((b45100 + 49)) = (t192739 - a214908);
    }
    var s92654, s92655, t192757, t192758:complex;
    var a214938:int;
    t192757 = (buf5(8) + (1.0i*buf5(40)));
    t192758 = (buf5(8) + ((- 1.0i)*buf5(40)));
    s92654 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(buf5(24) + (1.0i*buf5(56))));
    s92655 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(buf5(24) + ((- 1.0i)*buf5(56))));
    a214938 = (64*i125630);
    buf4((8 + a214938)) = (t192757 + s92654);
    buf4((40 + a214938)) = (t192757 - s92654);
    buf4((24 + a214938)) = (t192758 + s92655);
    buf4((56 + a214938)) = (t192758 - s92655);
    for i125649 in [0..6] {
      var a214984, s92672, s92673, s92674, s92675, t192775, t192776, t192777:complex;
      var a214983, b45106:int;
      a214983 = (4*i125649);
      s92672 = (dat10(a214983)*buf5((9 + i125649)));
      s92673 = (dat10((1 + a214983))*buf5((41 + i125649)));
      t192775 = (s92672 + s92673);
      t192776 = (s92672 - s92673);
      s92674 = (dat10((2 + a214983))*buf5((25 + i125649)));
      s92675 = (dat10((3 + a214983))*buf5((57 + i125649)));
      t192777 = (s92674 + s92675);
      b45106 = ((64*i125630) + i125649);
      buf4((b45106 + 9)) = (t192775 + t192777);
      buf4((b45106 + 41)) = (t192775 - t192777);
      a214984 = (1.0i*(s92674 - s92675));
      buf4((b45106 + 25)) = (t192776 + a214984);
      buf4((b45106 + 57)) = (t192776 - a214984);
    }
  }
  var a214997, t192794, t192795, t192796:complex;
  t192794 = (buf4(0) + buf4(128));
  t192795 = (buf4(0) - buf4(128));
  t192796 = (buf4(64) + buf4(192));
  Y(0) = (t192794 + t192796);
  Y(128) = (t192794 - t192796);
  a214997 = (1.0i*(buf4(64) - buf4(192)));
  Y(64) = (t192795 + a214997);
  Y(192) = (t192795 - a214997);
  for i125628 in [0..30] {
    var a215038, s92692, s92693, s92694, s92695, t192813, t192814, t192815:complex;
    var a215033, a215034, a215035, a215036, a215037:int;
    a215033 = (1 + i125628);
    a215034 = (129 + i125628);
    a215035 = (4*i125628);
    s92692 = (dat7(a215035)*buf4(a215033));
    s92693 = (dat7((1 + a215035))*buf4(a215034));
    t192813 = (s92692 + s92693);
    t192814 = (s92692 - s92693);
    a215036 = (65 + i125628);
    a215037 = (193 + i125628);
    s92694 = (dat7((2 + a215035))*buf4(a215036));
    s92695 = (dat7((3 + a215035))*buf4(a215037));
    t192815 = (s92694 + s92695);
    Y(a215033) = (t192813 + t192815);
    Y(a215034) = (t192813 - t192815);
    a215038 = (1.0i*(s92694 - s92695));
    Y(a215036) = (t192814 + a215038);
    Y(a215037) = (t192814 - a215038);
  }
  var s92700, s92701, t192832, t192833:complex;
  t192832 = (buf4(32) + (1.0i*buf4(160)));
  t192833 = (buf4(32) + ((- 1.0i)*buf4(160)));
  s92700 = ((0.70710678118654757 + 1.0i * 0.70710678118654757)*(buf4(96) + (1.0i*buf4(224))));
  s92701 = ((-0.70710678118654757 + 1.0i * 0.70710678118654757)*(buf4(96) + ((- 1.0i)*buf4(224))));
  Y(32) = (t192832 + s92700);
  Y(160) = (t192832 - s92700);
  Y(96) = (t192833 + s92701);
  Y(224) = (t192833 - s92701);
  for i125629 in [0..30] {
    var a215095, s92718, s92719, s92720, s92721, t192850, t192851, t192852:complex;
    var a215090, a215091, a215092, a215093, a215094:int;
    a215090 = (33 + i125629);
    a215091 = (161 + i125629);
    a215092 = (4*i125629);
    s92718 = (dat8(a215092)*buf4(a215090));
    s92719 = (dat8((1 + a215092))*buf4(a215091));
    t192850 = (s92718 + s92719);
    t192851 = (s92718 - s92719);
    a215093 = (97 + i125629);
    a215094 = (225 + i125629);
    s92720 = (dat8((2 + a215092))*buf4(a215093));
    s92721 = (dat8((3 + a215092))*buf4(a215094));
    t192852 = (s92720 + s92721);
    Y(a215090) = (t192850 + t192852);
    Y(a215091) = (t192850 - t192852);
    a215095 = (1.0i*(s92720 - s92721));
    Y(a215093) = (t192851 + a215095);
    Y(a215094) = (t192851 - a215095);
  }

}
