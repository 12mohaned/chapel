#!/usr/bin/env perl

$memoryInKBytes = @ARGV[0];
$memoryInBytes = $memoryInKBytes * 1024;
$memoryInMBytes = int($memoryInKBytes / 1024);
$memoryInGBytes = int($memoryInMBytes / 1024);

print "memory is: $memoryInBytes\n";
print " in bytes: $memoryInBytes\n";
print "    in kb: $memoryInKBytes\n";
print "    in mb: $memoryInMBytes\n";
print "    in gb: $memoryInGBytes\n";

print "memory is: $memoryInBytes\n";
print " in bytes: $memoryInBytes\n";
print "    in kb: $memoryInKBytes\n";
print "    in mb: $memoryInMBytes\n";
print "    in gb: $memoryInGBytes\n";

print "memory is: $memoryInBytes\n";
print " in bytes: $memoryInBytes\n";
print "    in kb: $memoryInKBytes\n";
print "    in mb: $memoryInMBytes\n";
print "    in gb: $memoryInGBytes\n";

$realMemInKBytes = $memoryInKBytes;
$realMemInBytes = $realMemInKBytes * 1024;
$realMemInMBytes = $realMemInKBytes / 1024;
$realMemInGBytes = $realMemInMBytes / 1024;

printf "memory is: %g\n",$realMemInBytes;
printf " in bytes: %g\n",$realMemInBytes;
printf "    in kb: %g\n",$realMemInKBytes;
#
# The following two use $.1f so that if the
# number of MB or GB is precisely an integer,
# we get a trailing ".0" as when printing
# reals in Chapel.  The assumption here is
# that we'd never use exponential notation
# for these values.
#
printf "    in mb: %.1f\n",$realMemInMBytes;
printf "    in gb: %.1f\n",$realMemInGBytes;

