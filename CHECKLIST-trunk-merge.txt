                                   Checklist
                                       of
                             Issues to be Resolved

         prior to merging the hierarchical_locales branch back to trunk


NEW/CHANGED:

- Merge DefaultArchitecture, RootLocale out from trunk (to pick up Vass-inspired
  changes).

- Passes relevant regression tests
  * Standard
  * No-local
  - Multilocale
    - Patch launcher to use its own memory allocator [gbt]

* Review added futures
  * Delete test/memory/shannon/memmaxExceedsLineno2.future
  * Move to trunk test/classes/figueroa/RecordDestructor1.future [bradc]
  * test/classes/bradc/syncAsClass.future
    * Try removing cast from chpl_here_free.
      a Cannot resolve arguments of chpl_memhook_free_pre().
    * Give sync and single classes their own deallocators.
    * remove future
  * test/types/records/sungeun/destructor2.future
    * Try removing cast from chpl_here_free.
      a Cannot resolve to chpl_memhook_free_pre().
    * Add cast_to_void_pointer
      * Now gives an even less helpful error message.
    * See if we can get a better error message than a C compiler error.
      * Yes, updated semanticChecks to catch this error the right way
        (i.e. testing semantics rather than structure).
  * Clone and add execopts to force leaked iterator data error to appear on trunk (LeakedMemory6).
  * Resolve test/functions/deitz/nested/test_nested_var_iterator2.future
    * Add a future to get copy propagation error to appear on trunk.

o Investigate/understand changed comm counts
  o Characterize and report back to group.
  o Locales array not privatized?
  o What are the 12*k increased get counts?
  o Immediate fixes/workarounds
  o Proposal for better long-term solution(s)

o Ensure performance delta reasonable
  - Analyze differences
    - Understand causes
  - Group discussion
  o Memleaks testing: Similar output?
    o Format same?
    o Numbers comparable except in strings?
  o Increased comm counts.
    o Characterize and report back to group.
    o Locales array not privatized?
    o What are the 12*k increased get counts?

o Characterize main difference and get reviews on appropriate pieces
  - Break up in to logical components for review.


POST MERGE:

o Load allocator pointers in wrapon_fn.
o Start moved task through locale interface.
  - Package up allocator pointers with argument bundle


RESOLVED/UNCHANGED:

* Investigate/understand changed memory counts
  * Disable "shared local strings" kludge.
  * Try using ref intent
    a Simplest test case fails to build.
  * Disable string_copy in chpl__initCopy(a:string);
    * Works!!!
  * Resolve or futurize all regressions.
    * Standard (--local) build
    * No-local build.

* Merge to trunk environment setting of numThreadsPerLocale and callStackSize? [gbt]

* Replace all calls to PRIM_CHPL_ALLOC with chpl_here_alloc. [hilde]
  d Fix deallocation-before-breakLabel (memory leak) bug. (moved to trunk)
    * OK to leak memory pending fix on trunk
    d Create a future against trunk to demo the bug.
  * parallel.cpp 1 local, 2 global (unchanged).
  * wrappers.cpp
  * lowerIterators.cpp (2)
  * functionResolution.cpp
  * runtime

* Whether to interpose an alloc(loc, nbytes, md) layer between chpl_here_alloc()
  and locale.alloc() [yes]
  i The intent is to avoid dynamic dispatch through "here"
    i Works only if binding of code to allocators can be made at compile time
  a Have chpl_here_alloc() call an architecturally-defined alloc() routine after
    the architecture is initialized.
    a Implement alloc() as part of the DefaultArchitecture (part of architecture interface)
      a Allow that version to be controlled by a config param, to allow SxS
        testing of "flat" versus dynamically-dispatched allocations.
    a Use the config param to characterize the impact of flat MM vs. LAMM.
  * The above has been replaced by calls through task-private allocator
    interfaces.
  * Update generated wrapper code to redirect allocators to locale-specific versions.

* Move mem tracking into chpl_here_alloc.
  * Preserve filename/lineno information: md + filename + lineno.
  * Preserve pre/post checks.
  * Package pre/post checks in hook functions (restore control by CHPL_MEM_DEBUG &c).[gbt]
    * Call these functions from the module code.
      * Implement PRIM_CAST_TO_VOID_STAR.
  * Mem counts are different because we call string_copy when passing the
    filename arguments into chpl_here_alloc and chpl_here_free now.
    * Local strings are shared (and leaked).

* Characterize language impacts of allowing sync vars to be dispatched as objects.
  i Greg says this is OK.
  * Create a future for dispatch of sync as object. [bradc]

* Get allocCleanup patch reviewed and checked into trunk. [vass]

d Ensure that all important cases are covered by chpl_maybeAutoDestroyed().

* Whether to pass the destination locale to chpl_here_alloc() [no]
  i Not necessary using the "proxy" model


Key:    o -- open       - -- in progress    * -- done       ! -- blocked
    > -- dependency     i -- information    d -- deferred   a -- abandoned

