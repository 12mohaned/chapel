- how to support 'with' when the type isn't given??

- check rank for multi-dimensional array accesses

- support applications with more than required arguments as multiple-calls
  (add_application_constraints)

- handle structural types.  Generalize tuple handling to include ref etc. in
  patterns.

- constant propogation & generalized splitting
  also handle things like __make_vector which require constants
  in generic code

- inlining

- handle david's generics stuff

- AST rewrite to change '=' to '==' in expressions and to
  make sure no other assignments are in expressions. (??)

- use inlining to simplify te program graph so that SSU conversion
  is more effective.

- differentiate abstract ATypes (which have a single CreationSet and no defs)
  from concrete ones

- do we need the power of the creation_point in add_var_constraints?

- move build_map and add_vars out of prim_make
  - handle ref variables
  - maybe in creation_point?  

- handle constants in vector_application

- do constant propgation in fa.cpp

- odd thing about vectors: #[1] is rank 0 (make sense)

- describe type hierarchy.  symbols < a symbol < functions with symbol as name
-               classes as a separate hierarchy tied into the object
                hierarchy

         ObjectClass
         / |
   Object  |
      |    |
      |  AClass
      | /  |
      A    |
      |    |
      |  BClass
      | /
      B

- make_top_edge should call with the appropriate arguments.
  - should store the top level pnode in the database (somewhere)

- fixup methods "self" and "super" variables to work correctly

- add ast arg to if1_send

- figure out why adding $right 5200 to 'new' causes problems

- optimize function dispatch
- deal with "class_static"

- make the dispatch tables visibility specific ???

- document and do examples for functions returning lvals

- fix A(i,j) = (if (i==j) 1 else 0)

- handle bulltin constants so that they default to the default size

- debug type inference when dead code elimination is off.... or remove
  the flag

- for pattern matching: handle parameterized types & structural types
  - probably by recursing down the actual argument and checking
    if it matches. Maybe cache the results as well: true/false/maybe

- complex should have a size, same as float

- implements, includes, contraints for cloned types

- check handling of inheritance

- remove SUM types from implements etc.

- deal with "tuple" having having "has" for all possible tuples
