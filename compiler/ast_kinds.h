/*
  Copyright 2003 John Plevyak, All Rights Reserved, see COPYRIGHT file
*/

// module
S(in_module)
S(use_module)
S(import)
S(export)
S(as)
S(extern)
S(extern_include)
// identifier
S(const)
S(qualified_ident)
S(global)
S(scope)
S(ident)
S(def_ident)
S(declare_ident)
// function
S(def_fun)
S(pattern)
S(arg)
S(vararg)
// constructor
S(new)
S(object)
S(list)
S(vector)
// with
S(with)
S(with_scope)
// type
S(def_type)
S(where)
S(type)
S(def_type_param)
S(type_param)
S(inherits)
S(constraint)
S(implements)
S(includes)
S(vector_type)
S(index)
S(sum_type)
S(product_type)
S(record_type)
S(fun_type)
S(ref_type)
S(tagged_type)
S(type_application)
// arrays
S(array_descriptor)
// expression
S(op)
S(if)
S(loop)
S(loop_cond)
S(forall)
S(indices)
S(block)
S(conc)
S(seq)
// flow control
S(label)
S(break)
S(continue)
S(goto)
S(return)
