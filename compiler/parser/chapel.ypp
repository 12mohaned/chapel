//
// Chapel Parser Conventions
//
// _expr -- expression
// _ls   -- list
// _opt  -- optional
// _stmt -- statement
// _type -- type
//

%{

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <stdint.h>
#include "lexyacc.h" // all #includes here, for make depend

  static int query_uid = 1;
  int captureTokens;
  char captureString[1024];

#define YYLLOC_DEFAULT(Current, Rhs, N)                             \
  if (N) {                                                          \
    (Current).first_line   = (Rhs)[1].first_line;                   \
    if ((Current).first_line) yystartlineno = (Current).first_line; \
    (Current).first_column = (Rhs)[1].first_column;                 \
    (Current).last_line    = (Rhs)[N].last_line;                    \
    (Current).last_column  = (Rhs)[N].last_column;                  \
  } else (Current) = yylloc;

%}

%start program

%union {
  const char* pch;
  Vec<const char*>* vpch;
  RetTag retTag;
  bool b;
  IntentTag pt;
  Expr* pexpr;
  DefExpr* pdefexpr;
  CallExpr* pcallexpr;
  BlockStmt* pblockstmt;
  Type* ptype;
  EnumType* penumtype;
  FnSymbol* pfnsymbol;
};

//
// identifiers and literals
//
%token TIDENT
%token IMAGLITERAL INTLITERAL REALLITERAL
%token <pch> STRINGLITERAL

//
// keywords (alphabetical)
//
%token TATOMIC TBEGIN TBREAK TBY TCLASS TCOBEGIN TCOFORALL TCONFIG TCONST
%token TCONTINUE TDEF TDELETE TDISTRIBUTED TDO TDOMAIN TELSE TENUM TEXTERN TFOR
%token TFORALL TIF TIN TINDEX TINOUT TLABEL TLET TLOCAL TMINUSMINUS TMODULE
%token TNEW TNIL TON TOTHERWISE TOUT TPARAM TPLUSPLUS TPRAGMA TPRIMITIVE TRECORD
%token TREDUCE TRETURN TSCAN TSELECT TSERIAL TSINGLE TSPARSE TSUBDOMAIN TSYNC
%token TTHEN TTYPE TUNION TUSE TVAR TWHEN TWHERE TWHILE TYIELD

//
// operators and punctuation (alphabetical)
//
%token TALIAS TAND TASSIGN TASSIGNBAND TASSIGNBOR TASSIGNBXOR TASSIGNDIVIDE
%token TASSIGNEXP TASSIGNLAND TASSIGNLOR TASSIGNMINUS TASSIGNMOD TASSIGNMULTIPLY
%token TASSIGNPLUS TASSIGNSL TASSIGNSR TBAND TBNOT TBOR TBXOR TCOLON TCOMMA
%token TDIVIDE TDOT TDOTDOT TDOTDOTDOT TEQUAL TEXP TGREATER TGREATEREQUAL THASH
%token TLESS TLESSEQUAL TMINUS TMOD TNOT TNOTEQUAL TOR TPLUS TQUESTION TSEMI
%token TSHIFTLEFT TSHIFTRIGHT TSTAR TSWAP

//
// braces
//
%token TLCBR TRCBR TLP TRP TLSBR TRSBR

//
// keywords, operators, and punctuation that requires precedence
//
%left TNOELSE
%left TELSE
%left TCOMMA
%left TFOR TFORALL TIF
%left TBY THASH
%left TIN
%left TDOTDOT
%left TOR
%left TAND
%left TBOR
%left TBXOR
%left TBAND
%left TEQUAL TNOTEQUAL
%left TLESSEQUAL TGREATEREQUAL TLESS TGREATER
%left TSHIFTLEFT TSHIFTRIGHT
%left TPLUS TMINUS
%right TUPLUS TUMINUS 
%left TSTAR TDIVIDE TMOD
%right TBNOT TNOT
%left TREDUCE TSCAN TDISTRIBUTED
%right TEXP
%left TCOLON
%right TNEW
%left TDOT TLP TLSBR

%type <b> opt_config opt_extern
 
%type <pt> intent_tag

%type <retTag> ret_tag

%type <pch> identifier fn_identifier opt_identifier
%type <pch> pragma

%type <vpch> pragma_ls

%type <pblockstmt> program stmt_ls
%type <pblockstmt> class_body_stmt_ls

%type <pblockstmt> stmt empty_stmt label_stmt break_stmt continue_stmt
%type <pblockstmt> expr_stmt if_stmt param_for_stmt for_stmt forall_stmt coforall_stmt while_do_stmt do_while_stmt serial_stmt
%type <pblockstmt> select_stmt return_stmt yield_stmt assign_stmt swap_stmt class_body_stmt
%type <pblockstmt> type_select_stmt on_stmt non_empty_stmt use_expr_ls sync_stmt

%type <pblockstmt> decl_stmt type_alias_decl_stmt type_alias_decl_stmt_inner fn_decl_stmt class_decl_stmt mod_decl_stmt extern_fn_decl_stmt
%type <pblockstmt> enum_decl_stmt use_stmt delete_stmt array_alias_stmt

%type <pblockstmt> var_decl_stmt var_decl_stmt_inner_ls
%type <pblockstmt> var_decl_stmt_inner tuple_var_decl_stmt_inner_ls

%type <pblockstmt> block_stmt function_body_stmt
%type <pblockstmt> begin_stmt cobegin_stmt atomic_stmt local_stmt

%type <pexpr> when_stmt
%type <pblockstmt> when_stmt_ls

%type <pexpr> opt_type opt_formal_type array_type
%type <pexpr> type opt_domain
%type <ptype> class_tag
%type <penumtype> enum_ls

%type <pexpr> call_expr memberaccess_expr lvalue unary_op_expr binary_op_expr
%type <pexpr> paren_expr expr actual_expr
%type <pexpr> literal opt_where_part
%type <pexpr> variable_expr stmt_level_expr type_level_expr alias_expr
%type <pexpr> reduce_expr scan_expr reduce_scan_op_expr opt_init_expr opt_init_type var_arg_expr
%type <pdefexpr> formal enum_item
%type <pdefexpr> query_expr

%type <pcallexpr> opt_inherit expr_ls nonempty_expr_ls
%type <pcallexpr> actual_expr_ls nonempty_actual_expr_ls

%type <pfnsymbol> fn_decl_stmt_inner formal_ls opt_formal_ls

%% 

program:
  stmt_ls  { (void)@1.first_line; yyblock = $$; }
;

/** PRAGMAS ******************************************************************/

pragma_ls:
                    { $$ = new Vec<const char*>(); }
| pragma_ls pragma  { $1->add($2); }
;

pragma:
  TPRAGMA STRINGLITERAL  { $$ = astr($2); }
;

/** STATEMENTS ***************************************************************/

stmt_ls:
  /* nothing */
    { $$ = new BlockStmt(); }
| stmt_ls pragma_ls stmt
    {
      if (DefExpr* def = toDefExpr($3->body.first()))
        def->sym->addFlags($2);
      delete $2;
      $1->insertAtTail($3);
    }
;

stmt:
  empty_stmt
| non_empty_stmt
;

empty_stmt:
  TSEMI  { $$ = buildChapelStmt(new BlockStmt()); }
;

non_empty_stmt:
  array_alias_stmt
| assign_stmt
| atomic_stmt
| begin_stmt
| block_stmt
| break_stmt
| cobegin_stmt
| coforall_stmt
| continue_stmt
| decl_stmt
| delete_stmt
| do_while_stmt
| expr_stmt
| for_stmt
| forall_stmt
| if_stmt
| label_stmt
| local_stmt
| param_for_stmt
| on_stmt
| return_stmt
| select_stmt
| serial_stmt
| swap_stmt
| sync_stmt
| type_select_stmt
| use_stmt
| while_do_stmt
| yield_stmt
| error             { printf("syntax error"); clean_exit(1); }
;

array_alias_stmt:
  lvalue alias_expr TSEMI
    {
      $$ = buildChapelStmt(
             new CallExpr(new CallExpr(".", $1,
                                       new_StringSymbol("makeAlias")), $2));
    }
;

assign_stmt:
  lvalue TASSIGN expr TSEMI
    { $$ = buildChapelStmt(new CallExpr("=", $1, $3)); }
| lvalue TASSIGNPLUS expr TSEMI
    { $$ = buildCompoundAssignment("+", $1, $3); }
| lvalue TASSIGNMINUS expr TSEMI
    { $$ = buildCompoundAssignment("-", $1, $3); }
| lvalue TASSIGNMULTIPLY expr TSEMI
    { $$ = buildCompoundAssignment("*", $1, $3); }
| lvalue TASSIGNDIVIDE expr TSEMI
    { $$ = buildCompoundAssignment("/", $1, $3); }
| lvalue TASSIGNMOD expr TSEMI
    { $$ = buildCompoundAssignment("%", $1, $3); }
| lvalue TASSIGNEXP expr TSEMI
    { $$ = buildCompoundAssignment("**", $1, $3); }
| lvalue TASSIGNBAND expr TSEMI
    { $$ = buildCompoundAssignment("&", $1, $3); }
| lvalue TASSIGNBOR expr TSEMI
    { $$ = buildCompoundAssignment("|", $1, $3); }
| lvalue TASSIGNBXOR expr TSEMI
    { $$ = buildCompoundAssignment("^", $1, $3); }
| lvalue TASSIGNLAND expr TSEMI
    { $$ = buildLogicalAndExprAssignment($1, $3); }
| lvalue TASSIGNLOR expr TSEMI
    { $$ = buildLogicalOrExprAssignment($1, $3); }
| lvalue TASSIGNSR expr TSEMI
    { $$ = buildCompoundAssignment(">>", $1, $3); }
| lvalue TASSIGNSL expr TSEMI
    { $$ = buildCompoundAssignment("<<", $1, $3); }
;

atomic_stmt:
  TATOMIC stmt  { $$ = buildAtomicStmt($2); }
;

begin_stmt:
  TBEGIN stmt  { $$ = buildBeginStmt($2); }
;

block_stmt:
  TLCBR stmt_ls TRCBR  { $$ = buildChapelStmt($2); }
;

break_stmt:
  TBREAK opt_identifier TSEMI
    { $$ = buildChapelStmt(new GotoStmt(GOTO_BREAK, $2)); }
;

cobegin_stmt:
  TCOBEGIN block_stmt
    {
      $2->lineno = yystartlineno; /* capture line number in case there
                                   * is a need to issue a warning */
      $$ = buildCobeginStmt($2);
    }
;

coforall_stmt:
  TCOFORALL expr TIN expr block_stmt
    { $$ = buildCoforallLoopStmt($2, $4, $5); }
| TCOFORALL expr TIN expr TDO stmt
    { $$ = buildCoforallLoopStmt($2, $4, new BlockStmt($6)); }
| TCOFORALL expr block_stmt
    { $$ = buildCoforallLoopStmt(NULL, $2, $3); }
| TCOFORALL expr TDO stmt
    { $$ = buildCoforallLoopStmt(NULL, $2, new BlockStmt($4)); }
;

continue_stmt:
  TCONTINUE opt_identifier TSEMI
    { $$ = buildChapelStmt(new GotoStmt(GOTO_CONTINUE, $2)); }
;

delete_stmt:
  TDELETE expr TSEMI
    { $$ = buildChapelStmt(new CallExpr(PRIM_DELETE, $2)); }
;

do_while_stmt:
  TDO stmt TWHILE expr TSEMI  { $$ = buildDoWhileLoopStmt($4, $2); }
;

expr_stmt:
  stmt_level_expr TSEMI  { $$ = buildChapelStmt($1); }
;

for_stmt:
  TFOR expr TIN expr block_stmt
    { $$ = buildForLoopStmt($2, $4, $5); }
| TFOR expr TIN expr TDO stmt
    { $$ = buildForLoopStmt($2, $4, new BlockStmt($6)); }
| TFOR expr block_stmt
    { $$ = buildForLoopStmt(NULL, $2, $3); }
| TFOR expr TDO stmt
    { $$ = buildForLoopStmt(NULL, $2, new BlockStmt($4)); }
;

forall_stmt:
  TFORALL expr TIN expr block_stmt
    { $$ = buildForallLoopStmt($2, $4, $5); }
| TFORALL expr TIN expr TDO stmt
    { $$ = buildForallLoopStmt($2, $4, new BlockStmt($6)); }
| TFORALL expr block_stmt
    { $$ = buildForallLoopStmt(NULL, $2, $3); }
| TFORALL expr TDO stmt
    { $$ = buildForallLoopStmt(NULL, $2, new BlockStmt($4)); }
| TLSBR nonempty_expr_ls TIN expr TRSBR stmt
    {
      if ($2->argList.length != 1)
        USR_FATAL($4, "invalid index expression");
      $$ = buildForallLoopStmt($2->get(1)->remove(), $4, new BlockStmt($6));
    }
| TLSBR nonempty_expr_ls TRSBR non_empty_stmt
    {
      if ($2->argList.length != 1)
        USR_FATAL($4, "invalid loop expression");
      $$ = buildForallLoopStmt(NULL, $2->get(1)->remove(), new BlockStmt($4));
    }
;

if_stmt:
  TIF expr block_stmt %prec TNOELSE  { $$ = buildIfStmt($2, $3); }
| TIF expr TTHEN stmt %prec TNOELSE  { $$ = buildIfStmt($2, $4); }
| TIF expr block_stmt TELSE stmt     { $$ = buildIfStmt($2, $3, $5); }
| TIF expr TTHEN stmt TELSE stmt     { $$ = buildIfStmt($2, $4, $6); }
;

label_stmt:
  TLABEL identifier stmt  { $$ = buildLabelStmt($2, $3); }
;

local_stmt:
  TLOCAL stmt  { $$ = buildLocalStmt($2); }
;

param_for_stmt:
  TFOR TPARAM identifier TIN expr TDO stmt
    { $$ = buildParamForLoopStmt($3, $5, $7); }
| TFOR TPARAM identifier TIN expr block_stmt
    { $$ = buildParamForLoopStmt($3, $5, $6); }
;

on_stmt:
  TON expr TDO stmt    { $$ = buildOnStmt($2, $4); }
| TON expr block_stmt  { $$ = buildOnStmt($2, $3); }
;

return_stmt:
  TRETURN expr TSEMI
    { $$ = buildChapelStmt(new CallExpr(PRIM_RETURN, $2)); }
| TRETURN TSEMI
    { $$ = buildChapelStmt(new CallExpr(PRIM_RETURN, new SymExpr(gVoid))); }
;

select_stmt:
  TSELECT expr TLCBR when_stmt_ls TRCBR
    { $$ = buildChapelStmt(buildSelectStmt($2, $4)); }
;

when_stmt_ls:
                          { $$ = buildChapelStmt(); }
| when_stmt_ls when_stmt  { $1->insertAtTail($2); }
;

when_stmt:
  TWHEN nonempty_expr_ls TDO stmt
    { $$ = new CondStmt(new CallExpr(PRIM_WHEN, $2), $4); }
| TWHEN nonempty_expr_ls block_stmt
    { $$ = new CondStmt(new CallExpr(PRIM_WHEN, $2), $3); }
| TOTHERWISE stmt
    { $$ = new CondStmt(new CallExpr(PRIM_WHEN), $2); }
;

serial_stmt:
  TSERIAL expr block_stmt  { $$ = buildSerialStmt($2, $3); }
| TSERIAL expr TDO stmt    { $$ = buildSerialStmt($2, $4); }
;

swap_stmt:
  lvalue TSWAP lvalue TSEMI
    { $$ = buildChapelStmt(new CallExpr("_chpl_swap", $1, $3)); }
;

sync_stmt:
  TSYNC stmt  { $$ = buildSyncStmt($2); }
;

type_select_stmt:
  TTYPE TSELECT nonempty_expr_ls TLCBR when_stmt_ls TRCBR
    { $$ = buildTypeSelectStmt($3, $5); }
;

use_stmt:
  TUSE use_expr_ls TSEMI  { $$ = $2; }
;

use_expr_ls:
  lvalue                     { $$ = buildUseList($1); }
| use_expr_ls TCOMMA lvalue  { $$ = buildUseList($3, $1); }
;

while_do_stmt:
  TWHILE expr TDO stmt    { $$ = buildWhileDoLoopStmt($2, new BlockStmt($4)); }
| TWHILE expr block_stmt  { $$ = buildWhileDoLoopStmt($2, $3); }
;

yield_stmt:
  TYIELD expr TSEMI
    { $$ = buildChapelStmt(new CallExpr(PRIM_YIELD, $2)); }
| TYIELD TSEMI
    { $$ = buildChapelStmt(new CallExpr(PRIM_YIELD, new SymExpr(gVoid))); }
;

/** DECLARATION STATEMENTS ***************************************************/

decl_stmt:
  class_decl_stmt
| enum_decl_stmt
| fn_decl_stmt
| mod_decl_stmt
| type_alias_decl_stmt
| var_decl_stmt
;

class_decl_stmt:
  opt_extern class_tag identifier opt_inherit TLCBR class_body_stmt_ls TRCBR
    { $$ = buildChapelStmt(buildClassDefExpr($3, $2, $4, $6, $1)); }
;

opt_extern:
           { $$ = false; }
| TEXTERN  { $$ = true; }
;

class_tag:
  TCLASS   { $$ = new ClassType(CLASS_CLASS); }
| TRECORD  { $$ = new ClassType(CLASS_RECORD); }
| TUNION   { $$ = new ClassType(CLASS_UNION); }
;

opt_inherit:
                           { $$ = new CallExpr(PRIM_ACTUALS_LIST); }
| TCOLON nonempty_expr_ls  { $$ = $2; }
;

class_body_stmt_ls:
  /* nothing */
    { $$ = new BlockStmt(); }
| class_body_stmt_ls pragma_ls class_body_stmt
    {
      if (DefExpr* def = toDefExpr($3->body.first()))
        def->sym->addFlags($2);
      delete $2;
      $1->insertAtTail($3);
    }
;

class_body_stmt:
  fn_decl_stmt
| class_decl_stmt
| enum_decl_stmt
| type_alias_decl_stmt
| var_decl_stmt
;

enum_decl_stmt:
  TENUM identifier TLCBR enum_ls TRCBR TSEMI
    {
      EnumType* pdt = $4;
      TypeSymbol* pst = new TypeSymbol($2, pdt);
      $4->symbol = pst;
      $$ = buildChapelStmt(new DefExpr(pst));
    }
;

enum_ls:
  enum_item
    {
      $$ = new EnumType();
      $1->sym->type = $$;
      $$->constants.insertAtTail($1);
      $$->defaultValue = $1->sym;
    }
| enum_ls TCOMMA enum_item
    {
      $1->constants.insertAtTail($3);
      $3->sym->type = $1;
    }
;

enum_item:
  identifier               { $$ = new DefExpr(new EnumSymbol($1)); }
| identifier TASSIGN expr  { $$ = new DefExpr(new EnumSymbol($1), $3); }
;

fn_decl_stmt:
  extern_fn_decl_stmt
| TDEF
    {
      captureTokens = 1;
      captureString[0] = '\0';
    }
  fn_decl_stmt_inner
    {
      captureTokens = 0;
      $3->userString = astr(captureString);
    }
  ret_tag opt_type opt_where_part function_body_stmt
    {
      $3->retTag = $5;
      if ($5 == RET_VAR)
        $3->setter = new DefExpr(new ArgSymbol(INTENT_BLANK, "setter", dtBool));
      if ($6)
        $3->retExprType = new BlockStmt($6, BLOCK_SCOPELESS);
      if ($7)
        $3->where = new BlockStmt($7);
      $3->insertAtTail($8);
      $$ = buildChapelStmt(new DefExpr($3));
    }
;

extern_fn_decl_stmt:
  TEXTERN TDEF fn_decl_stmt_inner opt_type TSEMI
    {
      FnSymbol* fn = $3;
      fn->addFlag(FLAG_EXTERN);
      if ($4)
        fn->retExprType = new BlockStmt($4, BLOCK_SCOPELESS);
      else
        fn->retType = dtVoid;
      $$ = buildChapelStmt(new DefExpr(fn));
    }
;

fn_decl_stmt_inner:
  fn_identifier opt_formal_ls
    {
      $$ = $2;
      $$->name = astr($1);
      $$->cname = $$->name;
      if ($1[0] == '~' && $1[1] != '\0')
        $$->addFlag(FLAG_DESTRUCTOR);
    }
| identifier TDOT fn_identifier opt_formal_ls
    {
      $$ = $4;
      $$->name = astr($3);
      $$->cname = $$->name;
      if ($3[0] == '~' && $3[1] != '\0')
        $$->addFlag(FLAG_DESTRUCTOR);
      $$->_this = new ArgSymbol(INTENT_BLANK, "this", dtUnknown, new UnresolvedSymExpr($1));
      $$->insertFormalAtHead(new DefExpr($$->_this));
      $$->insertFormalAtHead(new DefExpr(new ArgSymbol(INTENT_BLANK, "_mt", dtMethodToken)));
    }
;

fn_identifier:
  identifier
| TBNOT identifier  { $$ = astr("~", $2); }
| TASSIGN           { $$ = "="; } 
| TBAND             { $$ = "&"; } 
| TBOR              { $$ = "|"; } 
| TBXOR             { $$ = "^"; } 
| TBNOT             { $$ = "~"; } 
| TEQUAL            { $$ = "=="; } 
| TNOTEQUAL         { $$ = "!="; } 
| TLESSEQUAL        { $$ = "<="; } 
| TGREATEREQUAL     { $$ = ">="; } 
| TLESS             { $$ = "<"; } 
| TGREATER          { $$ = ">"; } 
| TPLUS             { $$ = "+"; } 
| TMINUS            { $$ = "-"; } 
| TSTAR             { $$ = "*"; } 
| TDIVIDE           { $$ = "/"; } 
| TSHIFTLEFT        { $$ = "<<"; }
| TSHIFTRIGHT       { $$ = ">>"; }
| TMOD              { $$ = "%"; } 
| TEXP              { $$ = "**"; } 
| TNOT              { $$ = "!"; }
| TBY               { $$ = "by"; } 
| THASH             { $$ = "#"; }
;

opt_formal_ls:
                     { $$ = new FnSymbol("_"); $$->addFlag(FLAG_NO_PARENS); }
| TLP formal_ls TRP  { $$ = $2; }
;

formal_ls:
  /* nothing */
    { $$ = new FnSymbol("_"); }
| formal
    {
      $$ = new FnSymbol("_");
      $$->insertFormalAtTail($1);
    }
| TLP tuple_var_decl_stmt_inner_ls TRP
    {
      $$ = new FnSymbol("_");
      buildTupleArg($$, $2, NULL);
    }
| formal_ls TCOMMA formal
    { $1->insertFormalAtTail($3); }
| formal_ls TCOMMA TLP tuple_var_decl_stmt_inner_ls TRP
    { buildTupleArg($1, $4, NULL); }
;

formal:
  intent_tag identifier opt_formal_type opt_init_expr
    { $$ = buildArgDefExpr($1, $2, $3, $4, NULL); }
| intent_tag identifier opt_formal_type var_arg_expr
    { $$ = buildArgDefExpr($1, $2, $3, NULL, $4); }
;

intent_tag:
          { $$ = INTENT_BLANK; }
| TIN     { $$ = INTENT_IN; }
| TINOUT  { $$ = INTENT_INOUT; }
| TOUT    { $$ = INTENT_OUT; }
| TCONST  { $$ = INTENT_CONST; }
| TPARAM  { $$ = INTENT_PARAM; }
| TTYPE   { $$ = INTENT_TYPE; }
;

ret_tag:
            { $$ = RET_VALUE; }
| TCONST    { $$ = RET_VALUE; }
| TVAR      { $$ = RET_VAR; }
| TPARAM    { $$ = RET_PARAM; }
| TTYPE     { $$ = RET_TYPE; }
;

function_body_stmt:
  block_stmt
| return_stmt { $$ = new BlockStmt($1); }
;

query_expr:
  TQUESTION identifier
    { $$ = new DefExpr(new VarSymbol($2)); }
| TQUESTION
    { $$ = new DefExpr(new VarSymbol(astr("chpl__query", istr(query_uid++)))); }
;

var_arg_expr:
  TDOTDOTDOT expr
    { $$ = $2; }
| TDOTDOTDOT query_expr
    {
      $2->sym->addFlag(FLAG_PARAM);
      $$ = $2;
    }
;

opt_where_part:
               { $$ = NULL; }
| TWHERE expr  { $$ = $2; }
;

mod_decl_stmt:
  TMODULE identifier TLCBR stmt_ls TRCBR
    { $$ = buildChapelStmt(new DefExpr(buildModule($2, $4, yyfilename))); }
;

type_alias_decl_stmt:
  TTYPE type_alias_decl_stmt_inner TSEMI  { $$ = $2; }
;

type_alias_decl_stmt_inner:
  identifier opt_init_type
    {
      VarSymbol* var = new VarSymbol($1);
      var->addFlag(FLAG_TYPE_VARIABLE);
      DefExpr* def = new DefExpr(var, $2);
      $$ = buildChapelStmt(def);
    }
| identifier opt_init_type TCOMMA type_alias_decl_stmt_inner
    {
      VarSymbol* var = new VarSymbol($1);
      var->addFlag(FLAG_TYPE_VARIABLE);
      DefExpr* def = new DefExpr(var, $2);
      $4->insertAtHead(def);
      $$ = buildChapelStmt($4);
    }
;

opt_init_type:
                { $$ = NULL; }
| TASSIGN type  { $$ = $2; }
;

var_decl_stmt:
  opt_config TPARAM var_decl_stmt_inner_ls TSEMI
    { $$ = buildVarDecls($3, $1, true, false); }
| opt_config TCONST var_decl_stmt_inner_ls TSEMI
    { $$ = buildVarDecls($3, $1, false, true); }
| opt_config TVAR var_decl_stmt_inner_ls TSEMI
    { $$ = buildVarDecls($3, $1, false, false); }
;

opt_config:
           { $$ = false; }
| TCONFIG  { $$ = true; }
;
 
var_decl_stmt_inner_ls:
  var_decl_stmt_inner
| var_decl_stmt_inner_ls TCOMMA var_decl_stmt_inner
    {
      for_alist(expr, $3->body)
        $1->insertAtTail(expr->remove());
    }
;

var_decl_stmt_inner:
  identifier opt_type opt_init_expr
    {
      VarSymbol* var = new VarSymbol($1);
      $$ = buildChapelStmt(new DefExpr(var, $3, $2));
    }
| identifier opt_domain alias_expr
    {
      VarSymbol* var = new VarSymbol($1);
      var->addFlag(FLAG_ARRAY_ALIAS);
      $$ = buildChapelStmt(new DefExpr(var, $3, $2));
    }
| TLP tuple_var_decl_stmt_inner_ls TRP opt_type opt_init_expr
    { $$ = buildTupleVarDeclStmt($2, $4, $5); }
;

tuple_var_decl_stmt_inner_ls:
  identifier
    { $$ = buildChapelStmt(new DefExpr(new VarSymbol($1))); }
| TLP tuple_var_decl_stmt_inner_ls TRP
    { $$ = buildChapelStmt($2); }
| tuple_var_decl_stmt_inner_ls TCOMMA identifier
    { $1->insertAtTail(new DefExpr(new VarSymbol($3))); }
| tuple_var_decl_stmt_inner_ls TCOMMA TLP tuple_var_decl_stmt_inner_ls TRP
    { $1->insertAtTail($4); }
;

/** TYPES ********************************************************************/

array_type:
  TLSBR nonempty_expr_ls TIN expr TRSBR type
    { 
      if ($2->argList.length != 1)
        USR_FATAL($4, "invalid index expression");
      $$ = new CallExpr("chpl__buildArrayRuntimeType",
                        new CallExpr("chpl__buildDomainExpr", $4), $6, $2->get(1)->remove(),
                        new CallExpr("chpl__buildDomainExpr", $4->copy()));
    }
| TLSBR nonempty_expr_ls TRSBR type
    { $$ = new CallExpr("chpl__buildArrayRuntimeType", new CallExpr("chpl__buildDomainExpr", $2), $4); }
;

type:
  type_level_expr
| array_type
| TSINGLE type
    { $$ = new CallExpr( "_singlevar", $2); }
| TSYNC type
    { $$ = new CallExpr( "_syncvar", $2); }
;

alias_expr:
  TALIAS expr  { $$ = $2; }
;

opt_init_expr:
                { $$ = NULL; }
| TASSIGN expr  { $$ = $2; }
;

opt_domain:
    { $$ = NULL; }
| TCOLON TLSBR nonempty_expr_ls TRSBR
    { $$ = new CallExpr("chpl__buildDomainExpr", $3); }
;

opt_type:
               { $$ = NULL; }
| TCOLON type  { $$ = $2; }
;

opt_formal_type:
  /* nothing */
    { $$ = NULL; }
| TCOLON type
    { $$ = $2; }
| TCOLON query_expr
    { $$ = $2; }
| TCOLON TDOMAIN
    { $$ = new UnresolvedSymExpr("_domain"); }
| TCOLON TSINGLE
    { $$ = new UnresolvedSymExpr( "_singlevar"); }
| TCOLON TSYNC
    { $$ = new UnresolvedSymExpr( "_syncvar"); }
| TCOLON TLSBR TRSBR type
    { $$ = new CallExpr("chpl__buildArrayRuntimeType", gNil, $4); }
| TCOLON TLSBR query_expr TRSBR type
    { $$ = new CallExpr("chpl__buildArrayRuntimeType", $3, $5); }
| TCOLON TLSBR TRSBR
    { $$ = new CallExpr("chpl__buildArrayRuntimeType", gNil); }
| TCOLON TLSBR query_expr TRSBR
    { $$ = new CallExpr("chpl__buildArrayRuntimeType", $3); }
| TCOLON TLSBR nonempty_expr_ls TRSBR
    { $$ = new CallExpr("chpl__buildArrayRuntimeType",
             new CallExpr("chpl__buildDomainExpr", $3)); }
| TCOLON TLSBR TRSBR query_expr
    { $$ = new CallExpr("chpl__buildArrayRuntimeType", gNil, $4); }
| TCOLON TLSBR query_expr TRSBR query_expr
    { $$ = new CallExpr("chpl__buildArrayRuntimeType", $3, $5); }
| TCOLON TLSBR nonempty_expr_ls TRSBR query_expr
    { $$ = new CallExpr("chpl__buildArrayRuntimeType",
             new CallExpr("chpl__buildDomainExpr", $3), $5); }
;

/** EXPRESSIONS **************************************************************/

expr_ls:
                    { $$ = new CallExpr(PRIM_ACTUALS_LIST); }
| nonempty_expr_ls
;

nonempty_expr_ls:
  expr                          { $$ = new CallExpr(PRIM_ACTUALS_LIST, $1); }
| nonempty_expr_ls TCOMMA expr  { $1->insertAtTail($3); }
;

actual_expr_ls:
                           { $$ = new CallExpr(PRIM_ACTUALS_LIST); }
| nonempty_actual_expr_ls
;

nonempty_actual_expr_ls:
  actual_expr
    { $$ = new CallExpr(PRIM_ACTUALS_LIST, $1); }
| nonempty_actual_expr_ls TCOMMA actual_expr
    { $1->insertAtTail($3); }
;

actual_expr:
  identifier TASSIGN query_expr  { $$ = new NamedExpr($1, $3); }
| identifier TASSIGN expr        { $$ = new NamedExpr($1, $3); }
| query_expr                     { $$ = $1; }
| expr
;

expr:
  stmt_level_expr
| TLSBR nonempty_expr_ls TIN expr TRSBR expr %prec TFOR
    {
      if ($2->argList.length != 1)
        USR_FATAL($4, "invalid index expression");
      $$ = buildForallLoopExpr($2->get(1)->remove(), $4, $6);
    }
| TLSBR nonempty_expr_ls TRSBR expr %prec TFOR
    {
      if ($2->argList.length != 1)
        USR_FATAL($4, "invalid loop expression");
      $$ = buildForallLoopExpr(NULL, $2->get(1)->remove(), $4);
    }
| TLSBR nonempty_expr_ls TIN expr TRSBR TIF expr TTHEN expr %prec TNOELSE
    {
      if ($2->argList.length != 1)
        USR_FATAL($4, "invalid index expression");
      $$ = buildForallLoopExpr($2->get(1)->remove(), $4, $9, $7);
    }
| TLSBR nonempty_expr_ls TRSBR TIF expr TTHEN expr %prec TNOELSE
    {
      if ($2->argList.length != 1)
        USR_FATAL($5, "invalid loop expression");
      $$ = buildForallLoopExpr(NULL, $2->get(1)->remove(), $7, $5);
    }
| TFOR expr TIN expr TDO expr %prec TFOR
    { $$ = buildForLoopExpr($2, $4, $6); }
| TFOR expr TDO expr %prec TFOR
    { $$ = buildForLoopExpr(NULL, $2, $4); }
| TFOR expr TIN expr TDO TIF expr TTHEN expr %prec TNOELSE
    { $$ = buildForLoopExpr($2, $4, $9, $7); }
| TFOR expr TDO TIF expr TTHEN expr %prec TNOELSE
    { $$ = buildForLoopExpr(NULL, $2, $7, $5); }
| TFORALL expr TIN expr TDO expr %prec TFOR
    { $$ = buildForallLoopExpr($2, $4, $6); }
| TFORALL expr TDO expr %prec TFOR
    { $$ = buildForallLoopExpr(NULL, $2, $4); }
| TFORALL expr TIN expr TDO TIF expr TTHEN expr %prec TNOELSE
    { $$ = buildForallLoopExpr($2, $4, $9, $7); }
| TFORALL expr TDO TIF expr TTHEN expr %prec TNOELSE
    { $$ = buildForallLoopExpr(NULL, $2, $7, $5); }
| TIF expr TTHEN expr TELSE expr
    { $$ = new CallExpr(new DefExpr(buildIfExpr($2, $4, $6))); }
;

stmt_level_expr: 
  TLSBR nonempty_expr_ls TRSBR %prec TFOR
    { $$ = new CallExpr("chpl__buildDomainExpr", $2); }
| TLSBR nonempty_expr_ls TRSBR TDOT identifier %prec TDOT
    { // place holder until expr can be used on lhs of dot in member access
      $$ = buildDotExpr(new CallExpr("chpl__buildDomainExpr", $2), $5);
    }
| type_level_expr
;

type_level_expr:
  lvalue
| TDOMAIN TLP actual_expr_ls TRP
    { $$ = new CallExpr("chpl__buildDomainRuntimeType", new UnresolvedSymExpr("defaultDist"), $3); }
| TSUBDOMAIN TLP actual_expr_ls TRP
    { $$ = new CallExpr("chpl__buildSubDomainType", $3); }
| TSPARSE TSUBDOMAIN TLP actual_expr_ls TRP
    { $$ = new CallExpr("chpl__buildSparseDomainRuntimeType", new UnresolvedSymExpr("defaultDist"), $4); }
| TINDEX TLP expr_ls TRP
    { $$ = new CallExpr("chpl__buildIndexType", $3); }
| TNEW expr
    { $$ = new CallExpr(PRIM_NEW, $2); }
| TLP TDOTDOTDOT expr TRP
    { $$ = new CallExpr(PRIM_TUPLE_EXPAND, $3); }
| TNIL
    { $$ = new SymExpr(gNil); }
| TLET var_decl_stmt_inner_ls TIN expr
    { $$ = buildLetExpr($2, $4); }
| reduce_expr
| scan_expr
| expr TCOLON expr
    { $$ = new CallExpr("_cast", $3, $1); }
| expr TDOTDOT expr
    { $$ = new CallExpr("_build_range", $1, $3); }
| expr TDOTDOT
    { $$ = new CallExpr("_build_range", buildDotExpr("BoundedRangeType", "boundedLow"), $1); }
| TDOTDOT expr
    { $$ = new CallExpr("_build_range", buildDotExpr("BoundedRangeType", "boundedHigh"), $2); }
| TDOTDOT
    { $$ = new CallExpr("_build_range", buildDotExpr("BoundedRangeType", "boundedNone")); }
| unary_op_expr
| binary_op_expr
;

binary_op_expr:
  expr TPLUS expr          { $$ = new CallExpr("+", $1, $3); }
| expr TMINUS expr         { $$ = new CallExpr("-", $1, $3); }
| expr TSTAR expr          { $$ = new CallExpr("*", $1, $3); }
| expr TDIVIDE expr        { $$ = new CallExpr("/", $1, $3); }
| expr TSHIFTLEFT expr     { $$ = new CallExpr("<<", $1, $3); }
| expr TSHIFTRIGHT expr    { $$ = new CallExpr(">>", $1, $3); }
| expr TMOD expr           { $$ = new CallExpr("%", $1, $3); }
| expr TEQUAL expr         { $$ = new CallExpr("==", $1, $3); }
| expr TNOTEQUAL expr      { $$ = new CallExpr("!=", $1, $3); }
| expr TLESSEQUAL expr     { $$ = new CallExpr("<=", $1, $3); }
| expr TGREATEREQUAL expr  { $$ = new CallExpr(">=", $1, $3); }
| expr TLESS expr          { $$ = new CallExpr("<", $1, $3); }
| expr TGREATER expr       { $$ = new CallExpr(">", $1, $3); }
| expr TBAND expr          { $$ = new CallExpr("&", $1, $3); }
| expr TBOR expr           { $$ = new CallExpr("|", $1, $3); }
| expr TBXOR expr          { $$ = new CallExpr("^", $1, $3); }
| expr TAND expr           { $$ = buildLogicalAndExpr($1, $3); }
| expr TOR expr            { $$ = buildLogicalOrExpr($1, $3); }
| expr TEXP expr           { $$ = new CallExpr("**", $1, $3); }
| expr TBY expr            { $$ = new CallExpr("by", $1, $3); }
| expr THASH expr          { $$ = new CallExpr("#", $1, $3); }
| expr TDISTRIBUTED expr   { $$ = new CallExpr("chpl__distributed", $3, $1); }
;

unary_op_expr:
  TPLUS expr %prec TUPLUS         { $$ = new CallExpr("+", $2); }
| TMINUS expr %prec TUMINUS       { $$ = new CallExpr("-", $2); }
| TMINUSMINUS expr %prec TUMINUS  { $$ = buildPreDecIncWarning($2, '-'); }
| TPLUSPLUS expr %prec TUPLUS     { $$ = buildPreDecIncWarning($2, '+'); }
| TNOT expr                       { $$ = new CallExpr("!", $2); }
| TBNOT expr                      { $$ = new CallExpr("~", $2); }
;

lvalue:
  variable_expr
| call_expr
| memberaccess_expr
| paren_expr
| literal
;

variable_expr:
  identifier  { $$ = new UnresolvedSymExpr($1); }
;

identifier:
  TIDENT  { $$ = astr(yytext); }
;

opt_identifier:
              { $$ = NULL; }
| identifier
;

call_expr:
  lvalue TLP actual_expr_ls TRP      { $$ = new CallExpr($1, $3); }
| lvalue TLSBR actual_expr_ls TRSBR  { $$ = buildSquareCallExpr($1, $3); }
| TPRIMITIVE TLP expr_ls TRP         { $$ = buildPrimitiveExpr($3); }
;

memberaccess_expr:
  lvalue TDOT identifier  { $$ = buildDotExpr($1, $3); }
| lvalue TDOT TTYPE       { $$ = new CallExpr(PRIM_TYPEOF, $1); }
| lvalue TDOT TDOMAIN     { $$ = buildDotExpr($1, "_dom"); }
;

paren_expr:
  TLP nonempty_expr_ls TRP  { $$ = buildParenExpr($2); }
;

literal:
  INTLITERAL     { $$ = buildIntLiteral(yytext); }
| REALLITERAL    { $$ = buildRealLiteral(yytext); }
| IMAGLITERAL    { $$ = buildImagLiteral(yytext); }
| STRINGLITERAL  { $$ = buildStringLiteral($1); }
;

reduce_expr:
  expr TREDUCE expr                 { $$ = buildReduceExpr($1, $3); }
| reduce_scan_op_expr TREDUCE expr  { $$ = buildReduceExpr($1, $3); }
;

scan_expr:
  expr TSCAN expr                 { $$ = buildScanExpr($1, $3); }
| reduce_scan_op_expr TSCAN expr  { $$ = buildScanExpr($1, $3); }
;

reduce_scan_op_expr:
  TPLUS  { $$ = new UnresolvedSymExpr("SumReduceScanOp"); }
| TSTAR  { $$ = new UnresolvedSymExpr("ProductReduceScanOp"); }
| TAND   { $$ = new UnresolvedSymExpr("LogicalAndReduceScanOp"); }
| TOR    { $$ = new UnresolvedSymExpr("LogicalOrReduceScanOp"); }
| TBAND  { $$ = new UnresolvedSymExpr("BitwiseAndReduceScanOp"); }
| TBOR   { $$ = new UnresolvedSymExpr("BitwiseOrReduceScanOp"); }
| TBXOR  { $$ = new UnresolvedSymExpr("BitwiseXorReduceScanOp"); }
;

%%
