# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.h} 
code_name {.cxx}
comment {/*
 * Copyright 2016 Cray Inc.
 * Other additional copyright holders may be indicated within.
 *
 * The entirety of this work is licensed under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 *
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
} {in_source in_header
} 

decl {\#include <FL/Fl_File_Chooser.H>} {private local
} 

decl {\#include <FL/Fl_Multiline_Output.H>} {public local
} 

decl {\#include <FL/Fl_Sys_Menu_Bar.H>} {public local
} 

decl {\#include <FL/fl_ask.H>} {private local
} 

decl {\#include <FL/Fl_Color_Chooser.H>} {private local
} 

decl {\#include <unistd.h>} {public local
} 

decl {\#include "Fl_MultiGroup.H"} {public global
} 

decl {\#include "Settings.h"} {public local
} 

decl {\#include "DataModel.h"} {public global
} 

decl {\#include "InfoBar.h"} {public local
} 

decl {\#include "MenuManager.h"} {public global
} 

decl {\#include "ZoomScroll.h"} {public global
} 

decl {\#include "GraphView.h"} {public global
} 

decl {\#include "GridView.h"} {public global
} 

decl {\#include "LocaleWin.h"} {public global
} 

decl {\#include "CommWin.h"} {public local
} 

decl {\#include "ConcurrencyWin.h"} {public local
} 

decl {DataModel VisData;} {public local
} 

decl {MenuManager Menus;} {public local
} 

decl {SettingsData VisSettings;} {public local
} 

Function {mainWinCallback(Fl_Widget *)} {open return_type void
} {
  code {if (VisSettings.save_WH) {
   VisSettings.saveToFile();
}
exit(1);} {}
} 

Function {make_locale_window(int locnum, localeData *locInfo)} {open C
} {
  Fl_Window {} {
    xywh {904 50 180 130} type Double color 7 hide resizable
    class LocaleWin size_range {180 120 0 0}
  } {
    Fl_Box Locale_Title {
      label {Locale }
      private xywh {0 0 180 25}
    }
    Fl_Output cpuInfo {
      label { }
      private xywh {0 25 180 105} labeltype NO_LABEL resizable
      class Fl_Multiline_Output
    }
  }
  code {w->setMembers(Locale_Title,cpuInfo,locInfo,locnum);
w->updateWin(locInfo);} {}
} 

Function {make_comm_window(int fromLn, int toLn, struct commData *commdata)} {open
} {
  Fl_Window {} {
    xywh {1095 53 180 120} type Double color 7 hide resizable
    class CommWin
  } {
    Fl_Box Comm_Title {
      label Comm
      private xywh {0 0 180 25}
    }
    Fl_Output commInfo {
      label { }
      private xywh {0 25 180 95} labeltype NO_LABEL resizable
      class Fl_Multiline_Output
    }
  }
  code {w->setMembers(Comm_Title, commInfo, commdata, fromLn, toLn);
w->updateWin(commdata);} {}
} 

Function {make_concurrency_window(long locNum, long tagNum)} {open return_type {ConcurrencyWin *}
} {
  Fl_Window {} {open
    xywh {82 110 500 600} type Double color 7 hide resizable
    class ConcurrencyWin
  } {
    Fl_Box title {
      label Concurrency
      private xywh {0 0 500 30} box DOWN_FRAME
    }
    Fl_Scroll ConcScroll {open
      private xywh {0 30 500 570} box DOWN_BOX color 7 resizable
    } {
      Fl_Box scrollData {
        private xywh {2 32 460 900} box FLAT_BOX color 7 resizable
        class ConcurrencyData
      }
    }
  }
  code {w->setMembers(title, ConcScroll, scrollData);
w->updateData(locNum, tagNum);
return w;} {}
} 

Function {open_data_set(const char *name, bool fromArgv)} {open private return_type bool
} {
  code {printf("open_data_set ...\\n");

if (!VisData.LoadData(name,true)) {
       return false;
}

DataField->selectChild(GraphGrp);

Menus.makeTagsMenu();
Menus.setCurrentDataView(DbgView);
Menus.addPopUpTo(GraphGrp);
Menus.setCurrentZoom(DbgScroll);

DbgView->setNumLocales(VisData.NumLocales());
DbgView->selectData(DataModel::TagALL);
 
GrdView->setNumLocales(VisData.NumLocales());
GrdView->selectData(DataModel::TagALL);
 
Info->setFileName(name);
return true;} {}
} 

Function {} {open
} {
  Fl_Window MainWindow {
    label chplvis open
    xywh {1278 490 560 600} type Double color 7 hide resizable size_range {560 590 0 0}
  } {
    Fl_Menu_Bar MainMenuBar {open
      xywh {0 0 560 20} color 55
      class Fl_Sys_Menu_Bar
    } {
      Submenu {} {
        label File open
        xywh {0 0 70 21}
      } {
        MenuItem {} {
          label Open
          callback {char *selfile = fl_file_chooser("Open File", "*-0", "", 0);

if (selfile) {
   // User didn't cancel
   if (!open_data_set(selfile, false)) {
      fl_alert ("Could not open %s", selfile);
   }
}}
          xywh {0 0 34 21} shortcut 0x4006f
        }
        MenuItem {} {
          label Settings
          callback {SettingsGrp->copyIn();
DataField->pushChild(SettingsGrp);}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label Quit
          callback {if (VisSettings.save_WH) {
   VisSettings.saveToFile();
}
exit(0);}
          xywh {0 0 34 21} shortcut 0x40071
        }
      }
      Submenu {} {
        label View open
        xywh {0 0 70 21}
      } {
        MenuItem {} {
          label {Zoom In}
          callback {menu_cb_ZoomIn(o,v);}
          tooltip {Only choice at this time} xywh {0 0 34 21}
        }
        MenuItem {} {
          label {Zoom Out}
          callback {menu_cb_ZoomOut(o,v);}
          xywh {0 0 100 20}
        }
        MenuItem {} {
          label {Reset Zoom}
          callback {menu_cb_Reset(o,v);}
          xywh {0 0 100 20}
        }
      }
      Submenu {} {
        label Data open
        xywh {0 0 70 21}
      } {
        MenuItem {} {
          label Locales
          xywh {0 0 31 20} labeltype ENGRAVED_LABEL deactivate divider
        }
        MenuItem {} {
          label {Show Tasks}
          callback {menu_cb_ShowTasks(o,v);}
          xywh {0 0 36 21}
        }
        MenuItem {} {
          label {Show CPU}
          callback {menu_cb_ShowCpu(o,v);}
          xywh {0 0 36 21}
        }
        MenuItem {} {
          label {Show Clock}
          callback {menu_cb_ShowClock(o,v);}
          xywh {0 0 31 20}
        }
        MenuItem {} {
          label {Show Concurrency}
          callback {menu_cb_ShowConc(o,v);}
          xywh {0 0 31 20} divider
        }
        MenuItem {} {
          label Communication
          xywh {0 0 31 20} labeltype ENGRAVED_LABEL deactivate divider
        }
        MenuItem {} {
          label {Show Count}
          callback {menu_cb_ShowComm(o,v);}
          xywh {0 0 36 21}
        }
        MenuItem {} {
          label {Show Size}
          callback {menu_cb_ShowDsize(o,v);}
          xywh {0 0 36 21}
        }
      }
    }
    Fl_Group Info {open
      xywh {0 20 560 80} box BORDER_FRAME color 0
      class InfoBar
    } {}
    Fl_Group DataControl {open
      xywh {0 99 60 501} box BORDER_FRAME color 0
    } {
      Fl_Button {} {
        xywh {0 598 60 2} box NO_BOX resizable
        code0 {o->clear_visible_focus();}
      }
      Fl_Button {} {
        callback {DataField->selectChild(GraphGrp);
Menus.setCurrentDataView(DbgView);
Menus.addPopUpTo(GraphGrp);
Menus.setCurrentZoom(DbgScroll);
DbgView->selectData(Menus.currentTag());} selected
        tooltip {Graph View} image {Graph-2-40x40.png} xywh {10 110 40 40} box NO_BOX down_box FLAT_BOX selection_color 48
        code0 {o->clear_visible_focus();}
      }
      Fl_Button {} {
        callback {DataField->selectChild(GridGrp);
Menus.setCurrentDataView(GrdView);
Menus.addPopUpTo(GridGrp);
Menus.setCurrentZoom(GridScroll);
GrdView->selectData(Menus.currentTag());}
        tooltip {Grid View} image {Grid-40x40.png} xywh {10 160 40 40} box NO_BOX down_box FLAT_BOX selection_color 48
        code0 {o->clear_visible_focus();}
      }
    }
    Fl_Group DataField {open
      xywh {60 100 500 500} color 0 resizable
      class Fl_MultiGroup
    } {
      Fl_Group GraphGrp {open
        xywh {60 100 500 500} color 7
      } {
        Fl_Scroll DbgScroll {open
          xywh {60 100 500 500} color 7 resizable
          class ZoomScroll
        } {
          Fl_Box DbgView {user_data_type {void*}
            xywh {60 100 500 500} color 7 selection_color 48 resizable
            code0 {DbgScroll->setZoomWidget(o);}
            class GraphView
          }
        }
      }
      Fl_Group GridGrp {open
        xywh {60 100 500 500} color 7
      } {
        Fl_Scroll GridScroll {open
          xywh {60 100 500 500} color 7 resizable
          class ZoomScroll
        } {
          Fl_Box GrdView {
            xywh {85 125 25 25} color 7 resizable
            code0 {GridScroll->setZoomWidget(o);}
            class GridView
          }
        }
      }
      Fl_Group SettingsGrp {user_data_type {void*}
        xywh {60 100 500 500} color 0 hide
        class Settings
      } {
        Fl_Check_Button saveWH {
          label {  Restore main window size} user_data_type {void*}
          callback {SettingsGrp->toggleSaveWH();
saveWH->value(SettingsGrp->getSaveWH());}
          xywh {75 190 215 25} type Normal box FLAT_BOX down_box DOWN_BOX
          code0 {saveWH->value(SettingsGrp->getSaveWH());}
        }
        Fl_Button {} {
          label Cancel
          callback {DataField->popChild();}
          xywh {75 245 105 25}
        }
        Fl_Button {} {
          label Save
          callback {SettingsGrp->copyOut();
VisSettings.saveToFile();
DataField->popChild();}
          xywh {220 245 105 25}
        }
        Fl_Button {} {
          label {Use for this run only}
          callback {bool oldWH = VisSettings.save_WH;
SettingsGrp->copyOut();
VisSettings.save_WH = oldWH;
DataField->popChild();}
          xywh {370 245 170 25}
        }
        Fl_Button {} {
          label {Set Cool Color}
          callback {SettingsGrp->setCoolColor();}
          xywh {75 135 120 25}
        }
        Fl_Button {} {
          label {Set Hot Color}
          callback {SettingsGrp->setHotColor();}
          xywh {370 135 120 25}
        }
        Fl_Button {} {
          label {Reset Heat Colors}
          callback {SettingsGrp->reset();}
          xywh {370 190 165 25}
        }
        Fl_Button {} {
          xywh {550 575 10 25} box NO_BOX color 7 resizable
          code0 {o->clear_visible_focus();}
        }
      }
    }
  }
  code {if (argc > 1 && argv[1][1] != '-') {
    //printf ("argv[1] is %s\\n", argv[1]);
    if (!open_data_set(argv[1], true)) {
       exit(1);
    }
    argc--;
    argv++;
} else {
   // look for .Vdebug/.Vdebug-0
   if (access(".Vdebug/.Vdebug-0", R_OK) == 0)
      (void) open_data_set(".Vdebug/.Vdebug-0",false);
}
MainWindow->callback(mainWinCallback);
if (VisSettings.save_WH) {
   MainWindow->size(VisSettings.mainW,VisSettings.mainH);
   MainWindow->redraw();
}} {}
} 
