=====================================================
Initial support for Intel Phi (a.k.a Knight's Corner)
=====================================================

*** This document will probably change rapidly, but will be useful for
*** developers working on Phi support, so I've opted to commit
*** something early on rather than waiting until release time as I
*** normally would :)

This README describes how to use Chapel for Intel Phi.

The initial implementation runs in self-hosted mode only.  That is,
the entire Chapel program runs on the co-processor.  For multilocale,
GASNet must use the MPI conduit (segment everything) as all
communication must bounce through the host processor.

--------------
Current Status
--------------

Currently, this set up only works on Cray machines using PrgEnv-intel.
See below for the TODO.

---------------
Getting started
---------------

- Log into a Cray XC with KNC nodes.  Set CHPL_TARGET_PLATFORM=cray-xc
  and CHPL_HOME to the appropriate value.

- Load the proper modules. The order in which you do these module
  commands seems to matter:

  % module swap PrgEnv-cray PrgEnv-intel
  % module unload cray-libsci atp craype-sandybridge craype-ivybridge
  % module load craype-intel-knc

- Disable CHPL_GMP.  I could not find a pre-built GMP library, and I
  couldn't get the third-party GMP build to do quite what I wanted.

  % export CHPL_GMP=none

- Set the launcher to none.

  % export CHPL_LAUNCHER=none

- Build Chapel as normal.  Running printchplenv should look like this.

  CHPL_HOST_PLATFORM: linux64
  CHPL_HOST_COMPILER: gnu
  CHPL_TARGET_PLATFORM: cray-xc
  CHPL_TARGET_COMPILER: cray-prgenv-intel
  CHPL_TARGET_ARCH: knc
  CHPL_LOCALE_MODEL: flat
  CHPL_COMM: gasnet
    CHPL_COMM_SUBSTRATE: mpi
    CHPL_GASNET_SEGMENT: everything
  CHPL_TASKS: fifo
  CHPL_LAUNCHER: none
  CHPL_TIMERS: generic
  CHPL_MEM: default
  CHPL_MAKE: gmake
  CHPL_ATOMICS: intrinsics
    CHPL_NETWORK_ATOMICS: none
  CHPL_GMP: none
  CHPL_HWLOC: none
  CHPL_REGEXP: none
  CHPL_WIDE_POINTERS: struct
  CHPL_LLVM: none
  CHPL_AUX_FILESYS: none

- Build your Chapel program as normal.

  % chpl hello.chpl

- Request some nodes with KNCs.  You can get the node numbers using
  cnselect:

  % cnselect -e name.eq.XEON_PHI

  Then use qsub to request the nodes.  For example, to request nodes
  12-16 for interactive use:

  % qsub -I -l,nodes=2,hostlist='^[12-15]'

- Run your program using aprun or srun directly.  For the above
  example using aprun:

  % aprun -k -n 2 ./a.out -nl 2

----
TODO
----

- OpenMP 4.0 pragma annotated loops
- Vanilla Intel compiler support
  - Pass -mmic flag to third-party builds
- Figure out GMP story for Cray machines
- aprun/srun support
  - Need CHPL_TARGET_ARCH value used to compile the Chapel program
- non-Cray platform support (launcher)
  - ditto about CHPL_TARGET_ARCH
- Possible WLM support

