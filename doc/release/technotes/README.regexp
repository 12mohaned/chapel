======================================================
Initial support for regular expressions
======================================================

This README describes some initial support that we have added to Chapel for
regular expression operations on strings and channels.  It should be considered
prototype technology and will one day graduate to the language specification.

The regular expression support is built on top of the RE2 regular expression
library. As such, the exact regular expression syntax available is the syntax
from RE2, which is available at http://code.google.com/p/re2/wiki/Syntax and
pasted at the end of this document for your convenience.


Enabling Regular Expression Support
-----------------------------------

Setting the environment variable CHPL_REGEXP to re2 will enable regular
expression support with the RE2 library distributed with Chapel:

bash$ export CHPL_REGEXP=re2
 csh) setenv CHPL_REGEXP re2

Then, rebuild Chapel.

Using Regular Expression Support
--------------------------------

use Regexp;
var myRegexp = compile("a+");

Now you can use search, match, split, and matches routines on myRegexp or on a
string. In addition, you can use search, match, and matches routines on an I/O
channel. These methods are documented in the generated documentation for the
Regexp module. Lastly, you can include regular expressions in the format string
for readf.

RE2 regular expression syntax reference
---------------------------------------

Single characters:
.	any character, possibly including newline (s=true)
[xyz]	character class
[^xyz]	negated character class
\d	Perl character class
\D	negated Perl character class
[:alpha:]	ASCII character class
[:^alpha:]	negated ASCII character class
\pN	Unicode character class (one-letter name)
\p{Greek}	Unicode character class
\PN	negated Unicode character class (one-letter name)
\P{Greek}	negated Unicode character class

Composites:
xy	«x» followed by «y»
x|y	«x» or «y» (prefer «x»)

Repetitions:
x*	zero or more «x», prefer more
x+	one or more «x», prefer more
x?	zero or one «x», prefer one
x{n,m}	«n» or «n»+1 or ... or «m» «x», prefer more
x{n,}	«n» or more «x», prefer more
x{n}	exactly «n» «x»
x*?	zero or more «x», prefer fewer
x+?	one or more «x», prefer fewer
x??	zero or one «x», prefer zero
x{n,m}?	«n» or «n»+1 or ... or «m» «x», prefer fewer
x{n,}?	«n» or more «x», prefer fewer
x{n}?	exactly «n» «x»

Grouping:
(re)	numbered capturing group
(?P<name>re)	named & numbered capturing group
(?:re)	non-capturing group
(?flags)	set flags within current group; non-capturing
(?flags:re)	set flags during re; non-capturing

Flags:
i	case-insensitive (default false)
m	multi-line mode: «^» and «$» match begin/end line in addition to begin/end text (default false)
s	let «.» match «\n» (default false)
U	ungreedy: swap meaning of «x*» and «x*?», «x+» and «x+?», etc (default false)
Flag syntax is «xyz» (set) or «-xyz» (clear) or «xy-z» (set «xy», clear «z»).

Empty strings:
^	at beginning of text or line («m»=true)
$	at end of text (like «\z» not «\Z») or line («m»=true)
\A	at beginning of text
\b	at word boundary («\w» on one side and «\W», «\A», or «\z» on the other)
\B	not a word boundary
\z	at end of text

Escape sequences:
\a	bell (== \007)
\f	form feed (== \014)
\t	horizontal tab (== \011)
\n	newline (== \012)
\r	carriage return (== \015)
\v	vertical tab character (== \013)
\*	literal «*», for any punctuation character «*»
\123	octal character code (up to three digits)
\x7F	hex character code (exactly two digits)
\x{10FFFF}	hex character code
\C	match a single byte even in UTF-8 mode
\Q...\E	literal text «...» even if «...» has punctuation

Character class elements:
x	single character
A-Z	character range (inclusive)
\d	Perl character class
[:foo:]	ASCII character class «foo»
\p{Foo}	Unicode character class «Foo»
\pF	Unicode character class «F» (one-letter name)

Named character classes as character class elements:
[\d]	digits (== \d)
[^\d]	not digits (== \D)
[\D]	not digits (== \D)
[^\D]	not not digits (== \d)
[[:name:]]	named ASCII class inside character class (== [:name:])
[^[:name:]]	named ASCII class inside negated character class (== [:^name:])
[\p{Name}]	named Unicode property inside character class (== \p{Name})
[^\p{Name}]	named Unicode property inside negated character class (== \P{Name})

Perl character classes:
\d	digits (== [0-9])
\D	not digits (== [^0-9])
\s	whitespace (== [\t\n\f\r ])
\S	not whitespace (== [^\t\n\f\r ])
\w	word characters (== [0-9A-Za-z_])
\W	not word characters (== [^0-9A-Za-z_])

ASCII character classes:
[:alnum:]	alphanumeric (== [0-9A-Za-z])
[:alpha:]	alphabetic (== [A-Za-z])
[:ascii:]	ASCII (== [\x00-\x7F])
[:blank:]	blank (== [\t ])
[:cntrl:]	control (== [\x00-\x1F\x7F])
[:digit:]	digits (== [0-9])
[:graph:]	graphical (== [!-~] == [A-Za-z0-9!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])
[:lower:]	lower case (== [a-z])
[:print:]	printable (== [ -~] == [ [:graph:]])
[:punct:]	punctuation (== [!-/:-@[-`{-~])
[:space:]	whitespace (== [\t\n\v\f\r ])
[:upper:]	upper case (== [A-Z])
[:word:]	word characters (== [0-9A-Za-z_])
[:xdigit:]	hex digit (== [0-9A-Fa-f])

Unicode character class names--general category:
C	other
Cc	control
Cf	format
Co	private use
Cs	surrogate
L	letter
Ll	lowercase letter
Lm	modifier letter
Lo	other letter
Lt	titlecase letter
Lu	uppercase letter
M	mark
Mc	spacing mark
Me	enclosing mark
Mn	non-spacing mark
N	number
Nd	decimal number
Nl	letter number
No	other number
P	punctuation
Pc	connector punctuation
Pd	dash punctuation
Pe	close punctuation
Pf	final punctuation
Pi	initial punctuation
Po	other punctuation
Ps	open punctuation
S	symbol
Sc	currency symbol
Sk	modifier symbol
Sm	math symbol
So	other symbol
Z	separator
Zl	line separator
Zp	paragraph separator
Zs	space separator

Unicode character class names--scripts:
Arabic	Arabic
Armenian	Armenian
Balinese	Balinese
Bengali	Bengali
Bopomofo	Bopomofo
Braille	Braille
Buginese	Buginese
Buhid	Buhid
Canadian_Aboriginal	Canadian Aboriginal
Carian	Carian
Cham	Cham
Cherokee	Cherokee
Common	characters not specific to one script
Coptic	Coptic
Cuneiform	Cuneiform
Cypriot	Cypriot
Cyrillic	Cyrillic
Deseret	Deseret
Devanagari	Devanagari
Ethiopic	Ethiopic
Georgian	Georgian
Glagolitic	Glagolitic
Gothic	Gothic
Greek	Greek
Gujarati	Gujarati
Gurmukhi	Gurmukhi
Han	Han
Hangul	Hangul
Hanunoo	Hanunoo
Hebrew	Hebrew
Hiragana	Hiragana
Inherited	inherit script from previous character
Kannada	Kannada
Katakana	Katakana
Kayah_Li	Kayah Li
Kharoshthi	Kharoshthi
Khmer	Khmer
Lao	Lao
Latin	Latin
Lepcha	Lepcha
Limbu	Limbu
Linear_B	Linear B
Lycian	Lycian
Lydian	Lydian
Malayalam	Malayalam
Mongolian	Mongolian
Myanmar	Myanmar
New_Tai_Lue	New Tai Lue (aka Simplified Tai Lue)
Nko	Nko
Ogham	Ogham
Ol_Chiki	Ol Chiki
Old_Italic	Old Italic
Old_Persian	Old Persian
Oriya	Oriya
Osmanya	Osmanya
Phags_Pa	'Phags Pa
Phoenician	Phoenician
Rejang	Rejang
Runic	Runic
Saurashtra	Saurashtra
Shavian	Shavian
Sinhala	Sinhala
Sundanese	Sundanese
Syloti_Nagri	Syloti Nagri
Syriac	Syriac
Tagalog	Tagalog
Tagbanwa	Tagbanwa
Tai_Le	Tai Le
Tamil	Tamil
Telugu	Telugu
Thaana	Thaana
Thai	Thai
Tibetan	Tibetan
Tifinagh	Tifinagh
Ugaritic	Ugaritic
Vai	Vai
Yi	Yi

Vim character classes:
\d	digits (== [0-9]) vim
\D	not «\d» vim
\w	word character vim
\W	not «\w» vim

