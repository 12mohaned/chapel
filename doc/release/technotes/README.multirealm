

GENERAL CAVEATS:

Unfortunately, there are some portions of this process that assume the
file system structure is the same across all hosts.  Note that the
physical volume (disk) need not be the same, just the structure
(paths).  We are working on removing these assumptions, but for now
the following conditions must be met.

  - CHPL_HOME must reside in the same location on all hosts.

  - The directory from which you invoke a multi-realm compilation must
    exists on all hosts.

  - The Chapel source files being compiled (whether specified via
    relative or absolute path) must exist on all hosts in the same
    location.

In addition, all hosts used to run a multi-realm Chapel program must
use the same pointer size.  Again, we are currently working on
relaxing this assumption.



BUILDING CHAPEL MULTI-REALM

Build the Chapel compiler and runtime as you normally would, setting
CHPL_COMM appropriately (gasnet or pvm), on every host type you wish
to use (See note above regarding the location of CHPL_HOME).  Build
the necessary CHPL_COMM layer on each host.  A machine's host type can
be found by running '$CHPL_HOME/util/platform.pl --host'.

 SPECIAL NOTES ON PVM:

 PVM requires certain environment variables to be set in your shell's
 config file (e.g., .bashrc, .cshrc):

  PVM_ROOT  =  $CHPL_HOME/third-party/pvm/pvm-3.4.6/pvm3
  PVM_RSH   =  `which ssh`
  PVM_DPATH =  $PVM_ROOT/lib/pvmd

 In addition, you must add (prepend) $PVM_ROOT/bin and $PVM_ROOT/lib
 to your search path.

 It is strongly advised that you to test your PVM installation between
 the hosts that you wish to use for your Chapel program.  See the
 sample programs and Readme in
 $CHPL_HOME/third-party/pvm/pvm-3.4.6/pvm3/examples to test your PVM
 installation.



COMPILING A MULTI-REALM CHAPEL PROGRAM

You should first set up your environment so that you can ssh between
the nodes you are targeting without providing a password, for example
using ssh-agent/ssh-add (not strictly required for compilation, but
convenient, and required for running).

On the compile host, you can optionally specify a directory into which
each host type's binary should be copied.

  CHPL_MULTIREALM_LAUNCH_DIR_<hosttype> = <path to binary>

The paths do not have to be the same on all the hosts or in the same
physical location (though they can be as the binaries are named with
their host type).  If the variable is not specified for a particular
host, the binary will be put in the same directory from which
chpl-multirealm was launched.

Host names must be specified in a hostfile in $CHPL_HOME, one for each
host type, with a single host name per line.  It is advisable to use
fully qualified domain names in the hostfiles.

  hostfile.<hosttype1> -- lists all nodes of the first host type
  hostfile.<hosttype2> -- lists all nodes of the second host type
  ...

The first entry in each hostfile will be the host that is used to
compile Chapel multi-realm binaries.


Now you are ready to compile a multi-realm Chapel program!

When compiling a Chapel program for multi-realm execution, you must
invoke a wrapper script to the Chapel compiler, located in
$CHPL_HOME/util/chpl-multirealm.  This script is run from a single
machine (compile host) and will invoke the Chapel compiler on all
specified hosts (see below), generating a binary for each host type.
The script takes all the same arguments as the normal Chapel compiler
and one addition required argument, -srealmTypes, which takes a quoted
list of host types to build for.

  chpl-multirealm -srealmTypes='hosttype1 hosttype2 ..' <flags> <Chapel files>

For example, to compile a Chapel program called multirealm.chpl to run
between a Mac running darwin and a Linux host, you would use:

  % chpl-multirealm -srealmTypes='darwin linux' -o multirealm multirealm.chpl

Assume the first entry in your hostfile.darwin is
'darwinchapel.cray.com' and the first entry in your hostfile.linux is
'linuxchapel.cray.com'.

The above invocation of chpl-multirealm will launch a remote shell to
compile multirealm.chpl on darwinchapel.cray.com, generating the
binaries multirealm_darwin and multirealm_darwin_real.  The location
of these files will depend either on the environment variable
CHPL_MULTIREALM_LAUNCH_DIR_darwin, if specified, or as described
above.

Next, chpl-multirealm will launch a remote shell to compile
multirealm.chpl on linuxchapel.cray.com, generating the binaries
multirealm_linux and multirealm_linux_real.  The location of these
files will depend either on the environment variable
CHPL_MULTIREALM_LAUNCH_DIR_linux, if specified, or as described above.

The binaries ending with '_real' are the actual Chapel program and
multirealm_darwin and multirealm_linux are the launcher programs.  The
program may be started using either of the two launchers.




RUNNING A MULTI-REALM CHAPEL PROGRAM

Running a multi-realm Chapel program is similar to running a regular
Chapel program with the additional required argument,
--localesPerRealm, which takes a quoted list of locale per host type
to run (zero is a valid number of locales).

  launcher_hosttype --localesPerRealm='l1 l2 ..'

The enviroment variables CHPL_MULTIREALM_LAUNCH_DIR_<hosttype> may be
set for each host type (remote hosts) on the host that you are
launching from.  This specifies the path on the remote host in which
to find the '_real' binary.  If this environment variable is not set
for a particular host, launcher_hosttype will assume a symmetric file
system and look for the '_real' binary in the same directory that the
launcher program itself resides in.

For the example above, assume the following environment variables are
set:

  CHPL_MULTIREALM_LAUNCH_DIR_darwin = /home/chapel/bin/darwin
  CHPL_MULTIREALM_LAUNCH_DIR_linux  = /home/chapel/bin/linux

Assume the file multirealm_darwin_real is in the directory
/home/chapel/bin/darwin on darwinchapel.cray.com.  Assume the file
multirealm_linux_real is in the directory /home/chapel/bin/linux on
linuxchapel.cray.com.

You can launch the multirealm program from both a darwin host or a
linux host.  For example,

On linuxchapel.cray.com, run:

  % multirealm_linux --localesPerRealm='2 1'

This command will launch multirealm_darwin_real on the first two hosts
specified in $CHPL_HOME/hostfile.darwin and multirealm_linux_real on
the first host specified in $CHPL_HOME/hostfile.linux.

On darwinchapel.cray.con, run:

  % multirealm_darwin --localesPerRealm='2 4'

This command will launch multirealm_darwin_real on the first two hosts
specified in $CHPL_HOME/hostfile.darwin and multirealm_linux_real on
the first four hosts specified in $CHPL_HOME/hostfile.linux.



TROUBLESHOOTING

If your build does not succeed, look for lines like the following:

  Starting build on darwinchapel.cray.com.
  ...

  Finished build on darwinchapel.cray.com.

This should tell you for which host and host type the build error
occured.  For that host, check the required environment variables.  In
addition,

  - Make sure the CHPL_HOME is the same as it is on the host from
    which the build was launched.

  - Make sure you have built the compiler and runtime for the
    appropriate CHPL_COMM layer.

  - Make sure the source file(s) are in the same location as on the
    compile host.

  - Make sure the directory in which you have invoked chpl-multirealm
    exists on the remote host.


As suggested above, it is strongly recommended that you test your PVM
installation outside of the Chapel multi-realm environment.  The
following are the most common errors that occur when using PVM.

If you see this error:

   libpvm [pid15724] /tmp/pvmd.25134: No such file or directory
   <PVM launcher>: error: Problem starting PVM daemon (-29)

There was a problem starting the PVM binary on the remote host.

  - Make sure you have built the proper PVM for your architecture.

  - Make sure you have set all the PVM required environment variables
    on the remote host.

  - Make sure that your PATH on the remote host includes $PVM_ROOT/bin
    and $PVM_ROOT/lib.

If you see this error:

   <PVM launcher>: error: Remote error on darwinchapel (-6) -- shutting down host

PVM could not connect to the remote host (darwinchapel, in this
example).

  - Make sure your host name in the hostfile.<hosttype> is correct and
    reachable from the launch host.

  - Make sure you can execute a password-less ssh to and from the
    remote host.

