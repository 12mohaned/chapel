===============
chpldoc feature
===============

The term 'chpldoc' refers to a prototypical capability for generating
HTML- or text-based documentation for Chapel code from comments
embedded within the code, similar in spirit to Javadoc or Pydoc.  As
of the 1.6 release of Chapel, 'chpldoc' documentation can either be
created via compiler flags or a standalone 'chpldoc' symbolic link
that is put into $CHPL_HOME/bin/$CHPL_HOST_PLATFORM at build-time.


Prerequisites
-------------

Creating HTML-based documentation with chpldoc (which is the default)
requires the installation of helper Python packages Creoleparser and
Genshi.  We were not able to bundle these packages with the Chapel
sources in time for this release, but for convenience have set up
Makefiles to help install them within a third-party directory
($CHPL_HOME/third-party/creoleparser/) via the 'easy_install' tool.
To use these Makefiles for the installation, use:

  [g]make -C $CHPL_HOME/third-party creoleparser

You can also install these packages yourself (or user pre-installed
versions), as long as they are within your system or personal Python
path, or $CHPL_HOME/third-party/creoleparser/install.

For more information on Creoleparser or Genshi, please refer to the
creoleparser entry in $CHPL_HOME/third-party/README


Generating docs
---------------

To create chpldoc documentation, you can either add the '--doc' flag
to your normal Chapel compiler line or use the standalone 'chpldoc'
utility.  The primary difference between the two approaches is that
the former will compile the Chapel program as usual while the latter
will exit after creating the documentation.

By default, documentation created by chpldoc will end up in a
subdirectory of the current working directory named 'docs/'.  You can
specify a different directory name using the --docs-dir option.

Any Chapel source files specified with a relative or absolute path
will be saved in a directory named relative to the docs directory,
which can sometimes be confusing.  We intend to address this in future
versions of chpldocs.  For now, for best/simplest results, running
chpldoc on a single file local to the directory in question will
tend to yield the best results.

By default, docs will be created in HTML format.  If text-only docs
are preferred, use the --docs-text-only flag.


Documenting Chapel code
-----------------------

To document Chapel code, place a multi-line comment just prior to the
definition of the symbol --- module, class, function, method,
variable, etc. --- that you wish to comment.  By default, all
multi-line comments are considered potential documentation.  If you
would like to restrict documentation to multi-line comments starting
only with a special character sequence (say, '/***') use the
--docs-comment-style flag to indicate the desired prefix (e.g.,
--docs-comment-style=\/\*\*\*).  Setting a comment style in this way
also establishes that the closing comment style should have the same
number of characters (though they can be different ones).  This may
change in future versions.

Comment text can use the Creole Wiki markup notation to request
specific formatting choices within the generated HTML.  For example
**this text would appear bold** when rendered within the generated
HTML.  For more information on Creole, see http://www.wikicreole.org

By default, documentation elements will be emitted in code order.  If
the --docs-alphabetical flag is used, they will be sorted into
alphabetical order within each lexical scope.
