===============================================
Using Chapel on a Cray Cluster Solutions System
===============================================

The following information is assembled to help Chapel users get up and
running on a Cray Cluster Solutions (TM) machine.

If you are not familiar with Chapel, it is recommended that you try the
instructions in the top-level README first to get started with the
language.

1) Set CHPL_HOME and MANPATH as indicated in README.chplenv.


2) Set CHPL_HOST_PLATFORM to cray-cs, and set CHPL_COMM to gasnet.

   See README.multilocale for further information about running using
   multiple locales and GASNet.

3) By default, g++ will be used to compile code that runs on the login
   nodes, such as the Chapel compiler and launcher code.  Optionally,
   you can override this default by setting CHPL_HOST_COMPILER to one
   of the following values:

     gnu       : the GNU compiler suite -- gcc and g++
     cray      : the Cray compiler suite -- cc and CC
     intel     : the Intel compiler suite -- icc and icpc
     pgi       : the PGI compiler suite -- pgcc and pgCC

4) Make sure you're in the top-level chapel/ directory:

     cd $CHPL_HOME

   Make/re-make the compiler and runtime:

     gmake


5) Set your PATH to include the $CHPL_HOME/bin/$CHPL_HOST_PLATFORM
   directory which is created when you build the compiler.  For example:

     export PATH="$PATH":"$CHPL_HOME/bin/$CHPL_HOST_PLATFORM"


6)  Compile your Chapel program as usual.  See README.compiling for
    details.  For example:

      chpl -o hello6-taskpar-dist $CHPL_HOME/examples/hello6-taskpar-dist.chpl

7) When you compile a Chapel program for your Cray system, you should see
    two binaries (e.g., hello6-taskpar-dist and hello6-taskpar-dist_real). 
    The first binary contains code to launch the Chapel program onto the
    compute nodes, as specified by your CHPL_LAUNCHER setting.  The
    second contains the program code itself; it is not intended to be
    executed directly from the shell prompt.


8) Multi-locale executions require the number of locales to be
    specified on the command line.  Other than this, execute your
    Chapel program as usual.  For example:

      ./hello6-taskpar-dist -nl 2

   You can use the -v flag to see the commands used to launch your
   program.  See README.launcher for further details.


9) If your Cray system has compute nodes with varying numbers of cores,
    you can request nodes with at least a certain number of cores using
    the variable CHPL_LAUNCHER_CORES_PER_LOCALE.  For example, on a Cray
    XE system with at least 24 cores per compute node, to request nodes
    with at least 24 cores you would use:

      export CHPL_LAUNCHER_CORES_PER_LOCALE=24
