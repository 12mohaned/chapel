============================
Multilocale Chapel Execution
============================

To get started with running Chapel on multiple locales, you must take
the following steps:

1) Build the communication layer that you wish to use for
   communicating between the locales.  At the time of this writing,
   the only communication layer that works is GASNet, which can be
   built as follows:

     cd $CHPL_HOME/third-party
     make

   Note that this step currently builds GASNet in debug mode which
   will have a major detrimental impact on performance (but helps us
   with our development efforts).


2) Set up your environment to use the communication layer.  The first
   step is to tell Chapel that you want to use a communication layer
   via:

     setenv CHPL_COMM gasnet

   Then you need to set up variables for GASNet itself.  We recommend
   using either:

     setenv GASNET_SPAWNFN L

   to run all of the locales as separate processes on your host
   processor, or:

     setenv GASNET_SPAWNFN S
     setenv SSH_SERVERS "host1 host2 host3 ..."
     setenv SSH_CMD ssh
     setenv SSH_OPTIONS -x

   to run each of the locales on a separate host (named by the list of
   hosts in SSH_SERVERS).  We've also had best results with reading
   from stdin by setting:

     setenv GASNET_ROUTE_OUTPUT 0

   but your mileage may vary.


3) Make sure your Chapel runtime is built for GASNet (each make of the
   runtime currently builds only for your current (or default)
   settings of CHPL_COMM and CHPL_THREADS, so changing one of these
   settings can require rebuilding the runtime (if the runtime code
   has changed):

     cd $CHPL_HOME
     make runtime


4) Compile your Chapel program as usual:

     chpl -o hello examples/hello.chpl


5) Run your Chapel program using the -nl or --numLocales flags to set
   the number of locales to use:

     ./hello -nl 2


------------
Status Notes
------------

At the time of this writing...

* the numLocales config const and Locales() array are implemented

* the on clause can be used to force a computation to take place on a
  particular locale either by refering to a value of locale type, or
  in a data-driven manner


The main limitations are...

* writeln() on a remote locale does not work -- use _debugWriteln() as
  a workaround instead (which may result in races in a program's
  output if multiple tasks call it simultaneously)

* referring to remote sync vars does not work

* referring to remote strings does not work

* using an on clause to declare a remote variable does not work

* program termination may not work correctly if Locale(0) is not the
  final locale to be running

