================
Chapel launchers
================

When compiling Chapel programs for multiple locales, a launcher binary
is typically created that will execute the appropriate command(s) to
get your program started.  For example, when compiling for multiple
locales, typically two binaries will be generated by the compiler
(e.g., a.out and a.out_real).  The first binary contains code to get
your program up and running on multiple locales while the second
contains your actual program code.

The goals of the launcher binary are: 

(1) to wrap details of job startup in a portable way so that new users
    can quickly get Chapel programs up and running on an unfamiliar
    platform.

(2) to perform command-line parsing and error checking prior to
    waiting in a queue or firing off a parallel job in order to save
    time and resources related to simple errors/typos in the command
    line.

(3) to preserve Chapel's global-view programming model by permitting
    the user to run their program using a single binary (corresponding
    to the single logical task that executes main()) without getting
    bogged down in questions of numbers of nodes, numbers of cores per
    node, numbers of program instances to start up, etc.

Executing a Chapel program using the verbose (-v) flag will typically
print out the command(s) used to launch the program.  

Currently-supported launchers include:

  amudprun      : GASNet launcher for programs running over UDP
  aprun         : Cray XT application launcher using aprun
  gasnetrun_ibv : GASNet launcher for programs running over Infiniband
  loadleveler   : launch using IBM loadleveler
  pbs           : Cray XT application launcher using PBS (qsub) + aprun
  none          : do not use a launcher

A specific launcher can be requested by setting the CHPL_LAUNCHER
environment variable.  If left unset, a default is picked as follows:

  CHPL_COMM=gasnet...
  + CHPL_COMM_SUBSTRATE=ibv     -> gasnetrun_ibv
  + CHPL_COMM_SUBSTRATE=portals -> aprun
  + CHPL_COMM_SUBSTRATE=udp     -> amudprun
  + CHPL_TARGET_PLATFORM=pwr6   -> loadleveler
  (otherwise)                   -> none

If the launcher binary does not work for your system (due to an
installation-specific configuration, e.g.), you can often use the -v
flag to capture the commands that the launcher executes on your behalf
and customize them for your needs.  


----------------------
Bypassing the launcher
----------------------

If the Chapel launcher capability fails you completely, set
CHPL_LAUNCHER to none, recompile, and execute the a.out binary
according to the following rules using tools and queueing mechanisms
appropriate for your system:

* on most systems, the number of locales should be equal to the number
  of nodes on which you execute which should be equal to the number of
  copies of a.out (or a.out_real using a launcher) that you are
  running.

* some queueing systems require you to specify the number of cores to
  use per node.  For best results, you will typically want to use all
  of them.  All intra-node parallelism is typically implemented using
  Chapel's threading layer (e.g., pthreads), so extra copies of the
  binary are not required per core.
