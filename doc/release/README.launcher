================
Chapel launchers
================

When compiling Chapel programs for multiple locales, a launcher binary
is typically created that will execute the appropriate command(s) to
get your program started.  For example, when compiling for multiple
locales, typically two binaries will be generated by the compiler
(e.g., a.out and a.out_real).  The first binary contains code to get
your program up and running on multiple locales while the second
contains your actual program code.

The goals of the launcher binary are: 

(1) to wrap details of job startup in a portable way so that beginning
    users can quickly get Chapel programs up and running on an
    unfamiliar platform.

(2) to perform command-line parsing and error checking prior to
    waiting in a queue or firing off a parallel job in order to save
    time and resources related to simple errors/typos in the command
    line.

Executing a Chapel program using the verbose (-v) flag will typically
print out the command(s) used to launch the program.  The *_real
binary can always be launched manually if desired or if the launcher
capability fails you.

Current launchers supported include:

  amudprun      : GASNet launcher for programs running over UDP
  aprun         : Cray XT application launcher using aprun
  gasnetrun_ibv : GASNet launcher for programs running over Infiniband
  pbs           : Cray XT application launcher using PBS (qsub)
  zebra         : Cray XMT simulator launcher
  none          : do not use a launcher

A specific launcher can be requested by setting the CHPL_LAUNCHER
environment variable.  If left unset, a default is picked as follows:

  CHPL_COMM=gasnet...
  + CHPL_COMM_SUBSTRATE=ibv     -> gasnetrun_ibv
  + CHPL_COMM_SUBSTRATE=portals -> aprun
  + CHPL_COMM_SUBSTRATE=udp     -> amudprun
  CHPL_TARGET_PLATFORM=xt-sim   -> zebra
  (otherwise)                   -> none
