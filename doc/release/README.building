==========================================================
Building the Chapel Compiler and Runtime Support Libraries
==========================================================

To build the Chapel compiler, set up your environment as described in
the top-level README file or (README.chplenv), cd to $CHPL_HOME, and
type:

     gmake

(or simply "make" if your make utility is gmake-compatible, as on
Cygwin platforms).


If everything works as intended, you ought to see:

1) each of the compiler source subdirectories being compiled,

2) the compiler binary getting linked and stored as:

        $CHPL_HOME/bin/$CHPL_HOST_PLATFORM/chpl

3) the runtime support libraries being compiled, archived, and stored
   in:

   $CHPL_HOME/lib/$CHPL_TARGET_PLATFORM/threads-$CHPL_THREADS/comm-$CHPL_COMM/

Otherwise, if you get an error or failure during the make process,
please let us know about it at: chapel_bugs@cray.com (as well as
information about your system as described in README.bugs and any
workaround that you might come up with)


You should now be able to run the compiler and display its help
message using:

        chpl --help

In which case, you will be ready to move on to compiling with the
Chapel compiler (described in README.compiling).  The rest of this
file gives more information about Chapel's Makefiles for advanced
users or developers of Chapel.


----------------
Platform Support
----------------

Ccurrently supported platforms include 32- and 64-bit Linux, Mac OS X,
Cygwin (Windows), and SunOS.  Other UNIX-based environments ought to
work (subject to the assumptions in README.prereqs), but may not be
supported by our current Makefile structure.  See the section below on
platform-specific settings for more information on adding support for
another UNIX-compatible environment.

Note that a single Chapel installation can simultaneously support
Chapel for multiple platforms because all platform-specific files and
executables are stored in subdirectories named by $CHPL_HOST_PLATFORM
and $CHPL_TARGET_PLATFORM.


----------------
Makefile Targets
----------------

The Chapel sources are structured so that a GNU-compatible make
utility can be used in any source directory to build the sources
contained in that directory and its subdirectories.  Each of these
Makefiles support the following targets:

     (nothing)  \
     default     : Build all targets in subdirectores and this one
     all        /

     depend     : Compute dependences for targets and subdirectories

     clean      : Remove target files built by the Makefiles

     clobber    : Remove everything created by the Makefiles


--------------------------
Platform-specific Settings
--------------------------

The structure of Chapel's Makefiles is designed to factor any
architecture-specific settings in $CHPL_HOME/Makefile.<platform>.  If
you try making the compiler and runtime for an unsupported platform,
you will be asked by the Makefile whether the platform supports a gnu
toolsuite or not.  Based on your answer, a default
$CHPL_HOME/Makefile.<platform> will be created for you.  For non-gnu
platforms, it is likely that you will need to edit that file by hand
to get the correct suite of tools and settings.

We have been factoring architectural-specific assumptions out of the
Makefiles as we run into them, so it is likely that additional changes
will be required as Chapel starts getting used on a wider variety of
platforms and architectures.  We welcome your contributions to making
our make environment more portable at: chapel_info@cray.com

