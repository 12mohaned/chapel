======================================
Setting up your environment for Chapel
======================================

To get started with Chapel, there are four environment settings that
are strongly recommended for effective use of the release, and a few
other optional settings that are useful for cross-compiling or
overriding the default settings.


--------------------
Recommended Settings
--------------------

1) Set the CHPL_HOME environment variable to point to the location of
   the chapel/ directory that was created when you unpacked the
   release.  For example:

        setenv CHPL_HOME ~/chapel


2) Set the CHPL_HOST_PLATFORM environment variable to represent the
   platform on which you're working.  The simplest way to set this
   value is by running the $CHPL_HOME/util/platform.pl script.  For
   example:

        setenv CHPL_HOST_PLATFORM `$CHPL_HOME/util/platform.pl`

   This value is used to read platform-specific settings from
   Makefiles and to create subdirectories for storing
   platform-specific files during the build process.  The strings for
   our currently-supported host platforms are as follows:

        cygwin  : Cygwin (Windows) platforms
        darwin  : Macintosh OS X platforms
        linux   : 32-bit Linux platforms
        linux64 : 64-bit Linux platforms
        sunos   : SunOS platforms

   The Chapel Makefiles and sources are designed to work for any
   UNIX-compatible environment that supports a GNU-compatible make
   utility.  The list above represents the platforms that we access
   and test frequently.  We are interested in making our code
   framework portable to other platforms -- if you are working on a
   platform other than the ones listed above, please refer to the
   README.building file and/or contact us at: chapel_info@cray.com


3) Set your path to include the directory
   $CHPL_HOME/bin/$CHPL_HOST_PLATFORM which is created when you build
   the compiler.  For example:

        set path = ($path $CHPL_HOME/bin/$CHPL_HOST_PLATFORM)


4) Set your man path to include the directory $CHPL_HOME/man.  For
   example:

        setenv MANPATH "$MANPATH":"$CHPL_HOME"/man


The setchplenv.* scripts in the $CHPL_HOME/util/ directory contain
commands that set these variables up for various shells when they are
sourced from the $CHPL_HOME directory.  Frequent Chapel users will
likely want to copy these lines into their shell dotfile(s) by
hard-coding the definition of $CHPL_HOME and removing the check to
ensure that the script is being invoked from the chapel/ directory.


-----------------
Optional Settings
-----------------

1) If you are cross-compiling for a platform other than your
   $CHPL_HOST_PLATFORM, set the CHPL_TARGET_PLATFORM environment
   variable to describe that platform.  Currently supported
   cross-compilation target platforms include:

        mta    : Cray MTA-2
        x1     : Cray X1
        xmt    : Cray XMT
        xt-cle : Cray XT running Cray Linux Environment

   If CHPL_TARGET_PLATFORM is not set, the target platform defaults to
   be the same as $CHPL_HOST_PLATFORM.


2) Optionally, you can set CHPL_HOST_COMPILER and/or
   CHPL_TARGET_COMPILER to indicate the compiler suite that should be
   used to build the sources.  CHPL_HOST_COMPILER is the compiler used
   to build the Chapel compiler itself to run on CHPL_HOST_PLATFORM.
   CHPL_TARGET_COMPILER is the compiler used to build the runtime
   libraries and generated code for CHPL_TARGET_PLATFORM.  Currently
   supported values are as follows:

        cray-mta          : the Cray compiler for multithreaded architectures
        cray-vec          : the Cray compiler for vector architectures
        cray-xt-gnu       : the Cray XT compiler using the GNU backend
        cray-xt-pathscale : the Cray XT compiler using the Pathscale backend
        cray-xt-pgi       : the Cray XT compiler using the PGI backend
        intel             : the Intel compiler suite -- icc and icpc
        gnu               : the GNU compiler suite -- gcc and g++
	pathscale         : the Pathscale compiler suite -- pathcc and pathCC
	pgi               : the PGI compiler suite -- pgcc and pgCC

   The default for CHPL_HOST_COMPILER depends on the value of the
   CHPL_HOST_PLATFORM environment variable:

        platform      compiler
        --------      --------
        mta, xmt  ->  cray-mta
        x1        ->  cray-vec
        xt-cle    ->  cray-xt-$PE_ENV (PE_ENV is set by the PrgEnv-* module)
        other     ->  gnu

   The default for CHPL_TARGET_COMPILER is CHPL_HOST_COMPILER if it is
   set and CHPL_HOST_PLATFORM and CHPL_TARGET_PLATFORM are the same.
   Otherwise, it will default to a value based on CHPL_TARGET_PLATFORM
   according to the preceding table.


3) Optionally, set the CHPL_MAKE environment variable to indicate the
   GNU-compatible make utility that you want the compiler back-end to
   invoke when compiling the generated C code.  If not set, this will
   default to a value based on $CHPL_HOST_PLATFORM:

        platform            compiler
        --------            --------
        cygwin, darwin  ->  make
        linux, linux64  ->  gmake if available, otherwise make
        other           ->  gmake
        

4) Optionally, set the CHPL_THREADS environment variable to indicate
   what threading layer you want to use to implement parallelism.
   Current options are:

        mta      : use Cray MTA threads (futures and sync vars)
        none     : no threading (implies no support for multiple tasks)
        pthreads : use POSIX threads (pthreads)

   If unset, CHPL_THREADS defaults to a value based on
   $CHPL_TARGET_PLATFORM:

        platform      threads
        --------      -------
        mta, xmt  ->  mta
        other     ->  pthreads

   See README.threads for more information about executing using the
   various CHPL_THREADS options.


5) Optionally, set the CHPL_COMM environment variable to indicate what
   communication layer you want to use to implement inter-locale
   communication.  Current options are:

        none   : only supports single-locale execution
        gasnet : use the Berkeley GASNet-based runtime

   If unset, CHPL_COMM defaults to "none".  See README.multilocale for
   more information on executing Chapel programs using multiple
   locales.


-------------------------------------
Compiler Command Line Option Defaults
-------------------------------------

Most of the compiler's command line options support setting a default
value for the option via an environment variable.  To see a list of
the environment variables supported for each option, run the compiler
with the --help-env flag.  For boolean flags and toggles, setting the
environment variable to any value selects that flag.
