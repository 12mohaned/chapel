======================================
Setting up your environment for Chapel
======================================

To get started, there are four environment settings that you should
make in order to use this release effectively:

1) Set the CHPL_HOME environment variable to point to the location of
   the chapel/ directory that was created when you unpacked the
   release.  For example:

        setenv CHPL_HOME ~/chapel


2) Set the CHPL_HOST_PLATFORM environment variable to the string
   returned by the $CHPL_HOME/util/platform.pl script.  For example:

        setenv CHPL_HOST_PLATFORM `$CHPL_HOME/util/platform.pl`

   This script returns a string uniquely representing the platform in
   question, which is used to read platform-specific settings from
   Makefiles and to create platform-specific subdirectories for
   storing binaries during the build process.  The strings for our
   currently-supported platforms are as follows:

        cygwin  : Cygwin (Windows) platforms
        darwin  : Macintosh OS X platforms
        linux   : 32-bit Linux platforms
        linux64 : 64-bit Linux platforms
        sunos   : SunOS platforms
        unknown : other platforms

   The Chapel Makefiles and sources are designed to work for any
   UNIX-compatible environment that supports a GNU-compatible make
   utility.  The list above represents those platforms that we have
   access to and test.  We are interested in making our code framework
   portable to other platforms -- if you are working on a platform
   other than the ones listed above, please contact us at:
   chapel_info@cray.com


3) If you are cross-compiling for a platform other than
   $CHPL_HOST_PLATFORM, set the CHPL_TARGET_PLATFORM environment
   variable to describe that platform.  Common cross-compilation
   target platforms include:

        mta    : Cray MTA
        x1     : Cray X1
        x2     : Cray X2
        xmp    : Cray XMP
        xt-cnl : Cray XT running Compute Node Linux


4) Optionally, set the CHPL_THREADS environment variable to indicate
   what threading layer you want to use to implement tasks.  Current
   options are:

        none     : no runtime tasks
        pthreads : use POSIX threading (the default)


5) Optionally, set the CHPL_COMM environment variable to indicate what
   communication layer you want to use to implement inter-locale
   communication.  Current options are:

        none   : only supports single-locale execution (the default)
        gasnet : use the Berkeley GASNet-based runtime


6) Set your path to include the directory
   $CHPL_HOME/bin/$CHPL_HOST_PLATFORM which is created when you build
   the compiler.  For example:

        set path = ($path $CHPL_HOME/bin/$CHPL_HOST_PLATFORM)


7) Set your man path to include the directory $CHPL_HOME/man.  For
   example:

        setenv MANPATH "$MANPATH":"$CHPL_HOME"/man


The setchplenv.* scripts in the $CHPL_HOME/util/ directory contain
lines that make these settings for various shells when they are
sourced from the $CHPL_HOME directory.  For frequent Chapel users,
these lines can be inserted into a shell's dotfile by hard-coding the
definition of $CHPL_HOME and removing the check to see that the script
is being run from the chapel/ directory.
