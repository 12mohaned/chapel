=========================
Using Chapel on a Cray XT
=========================

The following information is assembled to help users get up and
running on multiple nodes of a Cray XT running the Cray Linux
Environment (CLE) as easily as possible.  If you are not familiar with
Chapel, it is recommended that you try the instructions in the
top-level README first to get started with the language.

If you are an XT user on an NCCS machine, please see the special notes
at the bottom of this file.  If you have any troubles, please let us
know at chapel_info@cray.com.


1) Set CHPL_HOME and MANPATH as usual.  See README.chplenv for
   details.


2) Set CHPL_HOST_PLATFORM to xt-cle and CHPL_COMM to gasnet.  For
   example:

     setenv CHPL_HOST_PLATFORM xt-cle
     setenv CHPL_COMM gasnet

   See README.multilocale for further information about the GASNet
   library.


3) If your XT requires PBS/qsub to launch jobs onto the compute nodes
   (or you prefer to use it as your job launcher and it's supported),
   set CHPL_LAUNCHER to pbs.  For example:

     setenv CHPL_LAUNCHER pbs

   If you are running on an NCCS system that uses its own qsub wrapper
   script, you will want to use 'pbs-nccs' instead:

     setenv CHPL_LAUNCHER pbs-nccs

   Without setting CHPL_LAUNCHER, it will default to 'aprun' on xt-cle
   systems (you can also request this explicitly by setting it to
   'aprun').


4) Ensure that you have one of the following Programming Environment
   modules loaded, based on the C compiler you want to use to compile
   for the compute nodes:

     - PrgEnv-gnu
     - PrgEnv-pathscale
     - PrgEnv-pgi


5) Make sure you're in the top-level chapel/ directory:

     cd $CHPL_HOME


6) Make/re-make the compiler and runtime:

     gmake


7) Compile your Chapel program as usual.  See README.compiling for
   details.  For example:

     chpl -o hello-multiloc $CHPL_HOME/examples/hello-multiloc.chpl


8) When you compile a Chapel program for the XT, you should see two
   binaries (e.g., a.out and a.out_real).  The first binary contains
   code to launch the Chapel program onto the compute nodes, as
   specified by your CHPL_LAUNCHER setting.  The second contains the
   program code itself.  You can use the -v flag to see the commands
   used to launch your program.  See README.launcher for further
   details.


9) Multi-locale executions require the number of locales to be
   specified on the command line.  Other than this, execute your
   Chapel program as usual.  For example:

     ./hello-multiloc -nl 2


--------------------------
Memory limits using GASNet
--------------------------

* GASNet executions over portals on the XT currently conservatively
  assume a maximum heap size of 2GB per locale even though many XT
  configurations can support a much larger heap size in practice.  If
  you are getting out-of-memory errors as a result of this limit, you
  can explicitly request a larger maximum heap size by setting the
  environment variable GASNET_MAX_SEGSIZE to the number of bytes you
  wish to use as a limit.  For example:

    setenv GASNET_MAX_SEGSIZE 4294967296

  would set the GASNet heap size limit to 4GB.  Note that this
  variable can be changed from run to run and need not be set at
  compile time.  Applications that set this limit too high may be
  terminated with the following error:

     [NID 18]Apid 49229: initiated application termination
     Application 49229 exit signals: Killed

  If you get this message, try reducing the GASNET_MAX_SEGSIZE value.
  For more details, please refer to:

    $CHPL_HOME/third-party/gasnet/GASNet-*/portals-conduit/README


---------------
NCCS user notes
---------------

* At the time of this release, NCCS XT machines use a different qsub
  mechanism in order to enforce their policies.  We have attempted to
  make our qsub launch code work with this version of qsub, but
  require the CHPL_LAUNCHER_ACCOUNT environment variable to be set to
  specify your NCCS account name.  For example:

    setenv CHPL_LAUNCHER_ACCOUNT MYACCOUNTID

  If our PBS launcher fails to work for you, you can always launch the
  a.out_real binary manually using aprun within a manually-generated
  qsub script -- or recompile using aprun as CHPL_LAUNCHER and execute
  a.out within a manually-generated qsub script.
