!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                !
! NOTE: This file is automatically maintained by the CVS system. !
! Please do not update and commit by hand                        !
!                                                                !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


---------------------------------------------------------------------------

04/01/21 13:28:16 -- bradc

Log message:
	This is a test.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

04/01/21 14:13:02 -- bradc

Log message:
	Set the script up to mail both John (here at Cray) and me.

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

04/01/21 14:22:46 -- bradc

Log message:
	Still ashamed for my former sloppiness, made Makefile.base even more
	bulletproof (perhaps overly so :).  Made a rule such that if PLATFORM
	is set to unknown, it prints out a message indicating that the
	platform is not recognized and exits.
	
	In order to make this rule not be the first (and therefore default)
	rule in every Makefile that includes Makefile.base, I added a rule
	"default:" that depends on "all".  Thus, "all" should be the first
	target of every Makefile that we make (this seems to be the convention
	we both favor anyway, so hopefully this isn't too much of an
	imposition).
	
	Also added a Makefile to the make/ directory that prints out all the
	PLATFORM/OS/ARCH information.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile 

---------------------------------------------------------------------------

04/01/21 14:40:16 -- bradc

Log message:
	Got rid of remaining DOS linefeeds.

Modified files:
	chapel/compiler/: prim_data.dat 
	chapel/make/: Makefile.cygwin Makefile.sun 

---------------------------------------------------------------------------

04/01/22 09:58:44 -- bradc

Log message:
	Switched mailing list to chapel_dev@cray.com (should happen on
	next check-in, not this one).

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

04/01/22 09:59:37 -- bradc

Log message:
	Just checking that mail to the new mailing list works.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

04/01/22 12:33:17 -- n10253

Log message:
	Continued work on type checking, parameterized
	types and type constraints on other types (e.g. some_var : some_type).

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h clone.cpp fa.cpp if1.cpp 
	                  sym.h v.g 
Added files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

04/01/22 13:48:26 -- bradc

Log message:
	Improved the Makefile so that clean would remove prim_data.cpp and so
	that a clean build would work without being run twice (previously, it
	seemed to trip over prim_data.cpp being missing the first time and
	then worked the second time).
	
	Improved the .cvsignore files to ignore things created during the
	run of the sample program.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/samples/: .cvsignore 

---------------------------------------------------------------------------

04/01/22 13:56:39 -- bradc

Log message:
	Took a cue from John's mail yesterday and removed the optional
	inclusion of Makefile.$(PLATFORM) to create errors on an unknown
	platform.  Then realized that by moving the rules I'd added to
	Makefile.base to create a nice error message to Makefile.unknown, I
	could still get nice error messages on an unknown platform.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile.unknown 

---------------------------------------------------------------------------

04/01/22 13:58:47 -- bradc

Log message:
	Added dparser's created BUILD_VERSION file to the list of files to be
	ignored in the d/ directory.

Added files:
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

04/01/23 11:49:33 -- n10253

Log message:
	add the binaries and "freebsd"

Modified files:
	chapel/compiler/: .cvsignore 

---------------------------------------------------------------------------

04/01/23 13:15:20 -- n10253

Log message:
	Little bug fixes in preparation for working on structural types.

Modified files:
	chapel/compiler/: fa.cpp if1.cpp 

---------------------------------------------------------------------------

04/01/23 14:46:22 -- n10253

Log message:
	Handle more sorts of argument type constraints.

Modified files:
	chapel/compiler/: TODO ast.cpp 

---------------------------------------------------------------------------

04/01/26 11:30:18 -- n10253

Log message:
	freebsd build directory and a couple more executables into cvsignore

Modified files:
	chapel/third-party/boehmgc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.2/: .cvsignore 
	chapel/third-party/dparser/: .cvsignore 
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

04/01/28 11:55:22 -- n10253

Log message:
	Added "path" argument type to args.*
	Added logging system: see log.h for details.

Modified files:
	chapel/compiler/: Makefile arg.cpp driver.cpp fa.cpp geysa.h 
	                  if1.cpp if1.h sym.h 
Added files:
	chapel/compiler/: log.cpp log.h 

---------------------------------------------------------------------------

04/01/28 12:02:43 -- n10253

Log message:
	Fix minor grammar ambiguity.

Modified files:
	chapel/compiler/: TODO v.g 

---------------------------------------------------------------------------

04/01/28 18:41:34 -- n10253

Log message:
	Implement constant folding.
	Dead code elimination does not yet take constant folding into account.

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h driver.cpp fa.cpp if1.h 
	                  prelude.v prim.cpp prim.h prim_data.dat sym.h 
Added files:
	chapel/compiler/: ast_cf.cpp cast.cpp 

---------------------------------------------------------------------------

04/01/29 15:23:45 -- n10253

Log message:
	Constant folding complete: converts the AST node to an AST_const.
	Abstracted v.g and made a copy in chpl.g in preparations for building
	chapel grammar.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast_cf.cpp chpl.g 
	                  driver.cpp fa_extras.cpp geysa.h if1.cpp map.h 
	                  sym.h v.g 
Added files:
	chapel/compiler/: grammar.cpp grammar.h prelude.chpl 

---------------------------------------------------------------------------

04/01/30 11:36:40 -- bradc

Log message:
	Establishing an examples/ directory for use in managing
	chapel examples and tracking their evolution.  Checking
	in matrix-vector multiplication-related milestone 0 codes,
	including the official consensus code, some interesting
	variations, and some baby steps that should help get us
	there.

Added files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 
	chapel/examples/pre-milestone0/: matadd.chpl matassign.chpl 
	                                 matvectadd.chpl 

---------------------------------------------------------------------------

04/02/03 13:48:58 -- n10253

Log message:
	fix bug in error recovery

Modified files:
	chapel/third-party/dparser/d/: parse.c 

---------------------------------------------------------------------------

04/02/03 15:11:32 -- bradc

Log message:
	Just inserted scripts to update BUILDNUM and CVSLOG files
	in the root chapel/ directory automatically, and inserted
	these files manually.  Just added a header to the top of
	CVSLOG requesting that people not change it manually
	(though it is possible to do so, to commit those changes,
	and then to have the script automatically tack your log to
	the end of those changes, as will happen with this entry.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

04/02/03 15:14:25 -- bradc

Log message:
	Oops, typo in previous log.  BUILDNUM should've
	been BUILD_VERSION.

Modified files:
	./: BUILD_VERSION 
Removed files:
	./: BUILDNUM 

---------------------------------------------------------------------------

04/02/03 16:15:41 -- n10253

Log message:
        casting decision tree

Added files:
        chapel/compiler/: cast_code.cpp 
---------------------------------------------------------------------------

04/02/03 16:29:46 -- bradc

Log message:
	John's last checkin failed to update these files due to a
	permission problem I created, so I've updated them by hand
	as penance.

Modified files:
	./: BUILD_VERSION CVSLOG 

---------------------------------------------------------------------------

04/02/03 16:39:17 -- bradc

Log message:
	Updated the compiler's version machinery from
	Makefile + -D-based technology to a header file
	(version.h) that includes the automatically
	updated BUILD_VERSION file in the parent
	directory.

Modified files:
	chapel/compiler/: Makefile version.cpp 
Added files:
	chapel/compiler/: version.h 
Removed files:
	chapel/compiler/: BUILD_VERSION 

---------------------------------------------------------------------------

04/02/03 16:58:42 -- bradc

Log message:
	Just noticed that when I check in files, it appears that their
	group gets changed from chapel back to criemp.  Am trying to
	fix it, and this checkin is essentially a test (albeit one
	that updates the structure file a bit).

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

04/02/03 17:34:35 -- bradc

Log message:
	Another attempt to fix my permissions problem.  Another small
	modification to the structure file.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

04/02/04 12:41:08 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	very preliminary chapel grammar and prelude
	sample/sample.chpl added, and compiles

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h builtin_symbols.h chpl.g 
	                  fa.cpp prelude.chpl prelude.v prim_data.dat 
	                  v.g 
Added files:
	chapel/compiler/samples/: sample.chpl 

---------------------------------------------------------------------------

04/02/04 14:00:36 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	start a prioritized TODO list

Modified files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

04/02/09 16:39:53 -- bradc

Log message:
	Changed dimension of reduction to be correct.

Modified files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 

---------------------------------------------------------------------------

04/02/10 14:53:16 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Extensive changes to the way assignment occurs.
	Assignment is now mediated through methods.  All variables
	are converted to references to be assigned.  This permits
	complex left-hand sides to be type infered correctly, e.g.
	
	a.b.c.d = 5;

Modified files:
	chapel/compiler/: ast.cpp ast_cf.cpp builtin_symbols.h chpl.g 
	                  fa.cpp fa_extras.cpp prelude.chpl prelude.v 
	                  prim_data.dat v.g 
Added files:
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

04/02/12 10:48:45 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for trailing context to scanner

Modified files:
	chapel/third-party/dparser/d/: CHANGES COPYRIGHT Makefile README 
	                               arg.c arg.h d.h dparse.h 
	                               dparse_tables.h dsymtab.h gram.c 
	                               gram.h gramgram.h grammar.g.c 
	                               index.html lex.c lex.h lr.c lr.h 
	                               make_dparser.c parse.c parse.h 
	                               sample_parser.c scan.c scan.h 
	                               symtab.c util.c util.h version.c 
	                               write_ctables.c write_ctables.h 
	chapel/third-party/dparser/d/python/: dparser_wrap.c test.py 
	chapel/third-party/dparser/d/verilog/: Makefile ambig.c main.c 
	                                       vparse.c 
Added files:
	chapel/third-party/dparser/d/tests/: g46.test.g g46.test.g.1 
	                                     g46.test.g.1.check 

---------------------------------------------------------------------------

04/02/12 15:38:21 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in the trailing context code.
	Updated test cases.

Modified files:
	chapel/third-party/dparser/d/: Makefile lex.c parse.c scan.c 
	chapel/third-party/dparser/d/tests/: g36.test.g.1.check 

---------------------------------------------------------------------------

04/02/12 15:39:15 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Update grammar to use trailing context.

Modified files:
	chapel/compiler/: chpl.g v.g 

---------------------------------------------------------------------------

04/02/12 18:31:40 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	add support for basic sequences of the form
	
	1..n by m
	
	some work on fa.cpp in preparation for more extensive changes
	to support analysis of sequences and vectors.

Modified files:
	chapel/compiler/: TODO chpl.g fa.cpp fa.h prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: seq.chpl 

---------------------------------------------------------------------------

04/02/13 15:48:39 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	cleaned up instance variable handling and
	updated instance variable test case

Modified files:
	chapel/compiler/: ast.cpp clone.cpp fa.cpp prelude.chpl 
	                  prelude.v 
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

04/02/19 10:36:58 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in d_ws_before

Modified files:
	chapel/third-party/dparser/d/: dparse_tables.h parse.c 

---------------------------------------------------------------------------

04/02/19 11:22:35 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	added support for analyzing vectors and vector operations
	added samples/vec.chpl as vector test case

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h chpl.g fa.cpp grammar.cpp 
	                  if1.cpp prelude.chpl prim.cpp sym.h v.g 
	chapel/compiler/samples/: iv.chpl 
Added files:
	chapel/compiler/samples/: vec.chpl 

---------------------------------------------------------------------------

04/02/19 11:28:53 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	

Removed files:
	chapel/third-party/dparser/: d-1.8-src.tar.gz 

---------------------------------------------------------------------------

04/02/20 10:00:47 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for immediate sequences 1..n by m.
	Reorganized primitive handling in type inference to support
	more complicated transition function more easily.
	Prep for more advanced splitting (type inference of abstract code).

Modified files:
	chapel/compiler/: ast.cpp cfg.cpp chpl.g fa.cpp fa.h grammar.cpp 
	                  make_prims.g prelude.chpl prelude.v prim.h 
	                  prim_data.dat vec.cpp vec.h 

---------------------------------------------------------------------------

04/02/25 16:26:23 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	made forv_Vec (the basis for all the forv_XXX vector iterators) safe with respect to
	changes to the underlying vector.
	- added a new primitive "index_vector" used by the vector class for indexing.
	- made calls on vectors into indexing into the vector, this will be inherited
	by domains.
	- specific symbols are now subtypes of "symbol", specific functions subtypes
	of "function", and functions/methods whose pattern contains an initial symbol
	are subtypes of that symbol (this permits the function to be pattern matched
	to that symbol.
	- fixed bugs in cloning, the type_diff function, etc.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h clone.cpp 
	                  fa.cpp fa.h fa_extras.cpp if1.cpp pnode.h 
	                  prelude.chpl prelude.v prim.cpp prim_data.dat 
	                  vec.h 

---------------------------------------------------------------------------

04/02/26 11:57:51 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	checkpoint for rework of implicit references (e.g. array access, Mat(1))

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h builtin_symbols.h 
	                  driver.cpp fa.cpp fa.h fa_extras.cpp fun.cpp 
	                  prelude.chpl prelude.v sym.h vec.cpp 

---------------------------------------------------------------------------

04/02/26 16:26:33 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Completely new method for handling implicit references (lvals).
	Differentiate using the class as a function (e.g. domain(1..n)) and
	using objects of the class as a function (e.g. Mat(1)).
	Added mvm1.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h fa.cpp fa.h if1.cpp 
	                  prelude.chpl var.cpp var.h 
Added files:
	chapel/compiler/samples/: mvm1.chpl 

---------------------------------------------------------------------------

04/02/27 14:04:26 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- change verbose levels so that -v only returns types
	- new "array" class which combines a domain and a vector
	- support for generalized point-wise operations on arrays
	- combine similar type violations
	- use standard error reporting syntax to report type violations
	- convert to using selectors instead of functions for globally declared
	functions

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h cfg.cpp fa.cpp 
	                  fa.h fa_extras.cpp fun.cpp if1.cpp 
	                  prelude.chpl prelude.v ssu_extra.cpp vec.cpp 

---------------------------------------------------------------------------

04/02/27 16:43:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- add samples/mat1.chpl
	- tweeks to handle samples/mat.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp chpl.g fa.cpp if1.cpp 
	                  prelude.chpl 

---------------------------------------------------------------------------

04/03/01 10:40:57 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fix bug with handling of simple expressions in false forks of conditionals

Modified files:
	chapel/compiler/: TODO ast.cpp if1.cpp 

---------------------------------------------------------------------------

04/03/01 11:07:13 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Chapel syntax for conditionals now: "if" expression "then" expression "else" expression
	Syntax for while loops now: "while" expression "do" expression
	Added samples/mat1.chpl.

Modified files:
	chapel/compiler/: TODO chpl.g 
	chapel/compiler/samples/: mvm1.chpl 
Added files:
	chapel/compiler/samples/: mat1.chpl 

---------------------------------------------------------------------------

04/03/05 16:02:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- integers are now "integer"
	- added sample/matassign1.chpl which is closer to what we have been discussing
	- matassign1.chpl type checks
	- fixed a pattern matching bug in fa.cpp

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp fa.cpp fa.h if1.cpp 
	                  prelude.chpl 
Added files:
	chapel/compiler/samples/: matassign1.chpl 

---------------------------------------------------------------------------

04/03/08 18:13:52 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Added samples/literals.v
	Fixed some bugs with literal handling, added characters, complex and strings as
	builtin types.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h chpl.g fa.cpp 
	                  if1.cpp prelude.chpl prelude.v v.g 
	chapel/third-party/dparser/d/: gram.c grammar.g grammar.g.c 
	chapel/third-party/dparser/d/tests/: g44.test.g 
Added files:
	chapel/compiler/samples/: literal.v 

---------------------------------------------------------------------------

04/03/09 15:00-ish -- bradc (this is a hand-generated message due to
                             problems in the CVS perl scripts when
                             moving to Linux)

Log message:
	Reincorporated changes from ver 1.5 of Makefile to (1) work in
	the face of a missing BUILD_VERSION file and (2) look in the
	Chapel installation of the GC stuff for libraries and headers.

Modified files:
	chapel/third-party/dparser/d/: Makefile



---------------------------------------------------------------------------

04/03/09 15:43:54 -- bradc

Log message:
	Ran into incompatibilities with the CVS perl scripts on Linux, so
	my previous log file got lost and I entered it by hand.  It
	concerned modifications to third-party/dparser/d/Makefile.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

04/03/09 16:21:13 -- jplevyak (a.k.a. n10253)

Log message:
	Removed unnecessary (and error causing) $name "complex"

Modified files:
	chapel/compiler/: v.g 

---------------------------------------------------------------------------

04/03/12 09:55:29 -- jplevyak (a.k.a. n10253)

Log message:
	Added new -t option which dumps the program as cross-linked HTML
	into the "log" directory as "dump.html".
	Fixed a number of bugs discovered by examining the HTML.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp builtin_symbols.h 
	                  clone.cpp driver.cpp driver.h fa.cpp fa.h 
	                  fun.cpp fun.h geysa.h if1.h log.cpp pdb.h 
	                  prelude.chpl prelude.v prim_data.dat sym.h 
	                  vec.cpp 
	chapel/compiler/samples/: literal.v 
Added files:
	chapel/compiler/: bullet.gif dump.cpp dump.h minus.gif 
	                  mktree.css mktree.js plus.gif 

---------------------------------------------------------------------------

04/03/12 15:08:09 -- jplevyak (a.k.a. n10253)

Log message:
	refactor headers for cast.cpp

Modified files:
	chapel/compiler/: TODO cast.cpp if1.h 
Added files:
	chapel/compiler/: num.h 

---------------------------------------------------------------------------

04/03/12 15:51:50 -- bradc

Log message:
	This change is a revamping of the make system, in an attempt to
	make it more modular and more understandable (to myself, at least,
	and hopefully to new implementors as well).
	
	This isn't a perfect check-in:  since compiler code is created
	dynamically, it is difficult to establish dependences for those
	bits of code that are dynamic.  It was hard enough to establish
	proper dependences for those bits of code that #include dynamically-
	created files.  So the main limitation of this version is that
	dependences for dynamically created files (make_prims.cpp,
	*.g.d_parser.cpp, cast_code.cpp) are not generated.  This will be
	fixed when I revisit the topic (probably by keeping these
	dependences under compiler control -- yuck; or simply by requiring
	developers who want such dependences to run make depend after
	they've completed a successful make (also yuck).  Alternatively,
	we could put all code under CVS control, even if it is dynamically
	generated (I'm not sure how fast some of these files change, so
	don't know if this makes sense).
	
	The general organization strategy here is:
	
	- put each binary in its own directory (for understandability)
	- teach the Makefiles how to make everything (so developers don't need
	to know how)
	- no automatic updating of dependences -- developers must do it
	manually
	
	The new directory structure is:
	
	compiler/     -- code for the compiler
	make/       -- stores common Makefile variables, rules
	cast/       -- code to build cast
	make_prims/ -- code to build make_prims
	test/       -- unit tests for the compiler
	
	where each of these subdirectories has a platform-specific
	subdirectory for storing object files, dependence information,
	etc.
	
	The Makefile in compiler/ currently responds to:
	
	all: recursively builds subdirectories, then builds self
	clean: cleans all subdirectories, self
	depend: updates dependences for CVS-controlled sources in
	subdirectories, self
	cleandeps: remove all dependence information in
	subdirectories, self
	clobber: clean up "everything" not under CVS control
	test: builds and runs unit tests
	
	The subdirectories are each structured in a fairly similar way so that
	they can share a bunch of common Makefile rules and variables (stored
	in the compiler/make/ subdirectory) and so that these rules can be
	changed once and affect all the subdirectories.
	
	This took way more work than I expected, due mostly to the existence
	of dynamically generated sources, which threw more monkey wrenches at
	me than I imagined.  I documented some of the problems I was running
	into in make/Makefile.NOTES so that in future changes I don't retread
	over the same path again.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/cast/: .cvsignore Makefile cast.cpp 
	chapel/compiler/make/: Makefile.NOTES Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: .cvsignore Makefile make_prims.cpp 
	                             make_prims.g 
	chapel/compiler/test/: .cvsignore Makefile test_lib.cpp 
Removed files:
	chapel/compiler/: cast.cpp cast_code.cpp make_prims.cpp 
	                  make_prims.g test_lib.cpp 

---------------------------------------------------------------------------

04/03/12 15:53:10 -- bradc

Log message:
	Oops, wasn't quite out at the root of the Chapel tree for that
	last checkin.  The changes to Makefile.base factor some of the
	make_dparser variables out to this level and switch from -L -l
	for libgc.a to simply specifying the library directly (for
	some reason, the former wasn't working for me on Linux).

Modified files:
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

04/03/12 16:26:36 -- jplevyak (a.k.a. n10253)

Log message:
	change recursive make invocations to use $(MAKE) so as to
	use the same version of make as the original invocation
	(necessary on FreeBSD where the default make is not gmake)

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

04/03/16 12:44:42 -- jplevyak (a.k.a. n10253)

Log message:
	remove "dead" cruft from dump

Modified files:
	chapel/compiler/: TODO dump.cpp 

---------------------------------------------------------------------------

04/03/16 18:16:38 -- jplevyak (a.k.a. n10253)

Log message:
	print out folded constants in dump.html
	add test case in samples for constant folding: samples/constant_folding.v

Modified files:
	chapel/compiler/: ast.cpp ast.h ast_cf.cpp builtin_symbols.h 
	                  dump.cpp fa.cpp prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: constant_folding.v 

---------------------------------------------------------------------------

04/03/17 12:58:45 -- jplevyak (a.k.a. n10253)

Log message:
	Begin work on indexing into tuples.  To get this to work I
	need to implement constant propogation and inlining.

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp dump.cpp fa.cpp if1.cpp 
	                  misc.cpp misc.h sym.h 

---------------------------------------------------------------------------

04/03/17 13:22:30 -- bradc

Log message:
	Broke argv[0] down into the program's name and its directory
	location.  Added a field for the latter in the ArgumentState
	descriptor, and used it to initialize the system_dir option.
	Eliminated a static variable in driver.cpp that duplicated
	the former.
	
	If a directory name isn't given in argv[0], "." is assumed
	(whereas the better behavior would be to search the path).
	I may add this in the future, but for now it seems no worse
	than it was before in such cases.

Modified files:
	chapel/compiler/: arg.cpp arg.h driver.cpp 

---------------------------------------------------------------------------

04/03/17 13:41:54 -- bradc

Log message:
	Squelched the creation of the log/ subdirectory unless the user
	requests the creation of a log or an HTML dump.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

04/03/18 10:13:06 -- jplevyak (a.k.a. n10253)

Log message:
	update __index_vector to __index.

Modified files:
	chapel/compiler/: prelude.chpl 

---------------------------------------------------------------------------

04/03/18 15:34:43 -- bradc

Log message:
	First version of the regression test system.
	
	Instructions for use (from the top of the start_test script):
	
	--------------------
	
	Executive Summary: The overall flow of the testing system is that it
	will recursively descend into subdirectories looking for Chapel
	programs to compile and run (*.chpl) as well as for other tests to
	run (sub_test).  The output of these runs will typically be logged
	in a file stored in the Logs/ subdirectory, as will a summary of the
	errors reported (determined by grepping for the string "[Error", so
	don't have your program print this out.
	
	Here's the directory structure:
	
	Bin/     -- contains binary files/scripts required by the testing
	system, such as the timedexec script which kills a
	test if it takes too long
	Logs/    -- logs of testing runs go here by default
	Samples/ -- sample tests go here; these are for illustration only
	and won't be run by default.  To try running the
	test system against these samples, use:
	start_test -startdir ./Samples
	*/       -- all other directories will contain tests
	
	The start_test script kicks off all the action.  With no arguments,
	it will run all the tests using the defaults.  The '-h' option lists
	the options that the script accepts and the default values.  Current
	options are:
	
	option     argument               default value
	---------  ---------------------  -------------
	-compiler  <compiler executable>  ../compiler/chpl
	-compopts  <option list>          ""
	-execopts  <option list>          ""
	-startdir  <test subdir>          .
	-logfile   <log filename>         ./Logs/<username>.log
	
	The -compiler option allows the user to specify the compiler to test
	if it is something other than the obvious one in the current CVS
	structure.  This lets one run other people's compilers, old copies
	of compilers, etc.
	
	The -compopts option allows the user to specify a set of compiler
	options that should be used on every invocation to the compiler.
	Additional compiler options can be specified on a directory-by-
	directory basis.
	
	The -execopts option allows the user to specify a set of execution
	options that should be used on every invocation of a program.  As
	with compiler options, these can be ammended in each subdirectory.
	
	The -startdir option allows the user to specify a subdirectory of
	the testing system to start in (and limit itself to).  Assuming
	that tests are sorted into subdirectories by useful features, this
	allows you to run a subset of the tests easily.
	
	The -logfile option indicates where the log of the test run should
	be kept.  By default it's based on the user's name.  If the log
	file already exists, you will be prompted at the beginning of the
	run whether you want to delete that file or not.  At the end of
	the run, a second log file named <logfile>.summary will be
	generated containing only the Errors that were logged.
	
	By default, setting up a subdirectory for testing simply consists
	of creating the directory, putting Chapel (.chpl) source files
	into it and an expected output file (.chk) for each source file
	(using the same base name).  Upon reaching such a directory, the
	testing system will run the specified compiler on each Chapel
	source file using the specified compiler options, then (assuming
	the compile completed successfully, execute the resulting program
	using the specified execution options.  The output from both the
	compilation and the execution are concatenated and diff'd against
	the .chk file.  This allows programs that are supposed to generate
	errors, warnings, and correct programs to all be tested using the
	same mechanisms.
	
	Particular subdirectories can also be customized if necessary.
	Note that such customizations are not inherited recursively by
	further subdirectories, but apply only to the directory in
	question (we might consider changing this in future versions).
	The customizations are as follows:
	
	- if the subdirectory contains an executable sub_test script,
	that script will be used to run the tests in that directory
	rather than the default sub_test script (located in this
	directory).  A sub_test script may take whatever actions it
	wants, and is simply expected to generate any errors using
	the "[Error ...]" format so that it will show up in the
	summary.  Similarly, the script should generate any warnings
	or successful tests using "[Warning ...]" "[Success ...]"
	messages for consistency.  The sub_test script will be
	sent two arguments: (1) the compiler to use, and (2) the
	location of this main test/ directory.  The compiler and
	execution options will be stored in environment variables
	named COMPOPTS and EXECOPTS, respectively.
	
	- if the subdirectory contains a NOTEST file, that directory
	will not be considered for testing.  This can be useful for
	disabling subdirectories containing tests that don't work
	yet, or subdirectories that contain input files for other
	tests (though they will also be ignored if they fail to
	contain any .chpl files...)
	
	- if the subdirectory contains a COMPOPTS or EXECOPTS file,
	the options listed in that file will be added to the compiler
	and execution options for that subdirectory.  NOTE: be sure
	not to end the file with a linefeed -- it should simply be a
	list of options on the first line, followed <eof>.
	
	- if the subdirectory contains a CATFILES file, then the files
	listed in that file will be concatenated to the end of the
	compiler/execution output for each test.  For tests that
	generate files (either as a result of the compilation or
	as part of the executable's behavior), this can be used to
	ensure that the generated file's contents are correct without
	writing a specialized sub_test script.  Again, this file should
	be a single line with no linefeeds.
	
	- if the subdirectory contains a TIMEOUT file, then that file
	will be read to determine the number of seconds that the tests
	in the directory should be allowed to run before being killed.
	The default is currently 5 minutes.
	
	- subdirectory-specific .cvsignore files can also be very
	helpful so that files generated during testing won't clutter
	the results of a cvs -nq update command.
	
	Also worth describing here is the start_clean script which walks
	the directory structure in a similar manner and cleans up --
	removing the generated executables, core files, and *.tmp files
	which store any mismatching output.  The user can also specify
	subdirectory-specific things to clean up usinng a CLEANFILES
	file that lists other targets to remove (called with the -rf
	flag, so subdirectories will work here as well).  The idea is
	that after start_clean runs, the testing system should be left
	in a state pretty close to what's checked into the CVS tree.
	
	Again, to see a sample run of the testing system, look through
	the Samples/ directory, then run:
	
	./start_test -startdir Samples
	
	and inspect the Samples/ and Logs/ subdirectories to see what
	was generated.  Then use:
	
	./start_clean -startdir Samples
	
	to clean back up again.
	
	--------------

Added files:
	chapel/test/: start_clean start_test sub_clean sub_test 
	chapel/test/Bin/: timedexec 
	chapel/test/Logs/: .keepme 
	chapel/test/Samples/ex1-astlog/: .cvsignore CATFILES CLEANFILES 
	                                 COMPOPTS astlog1.chk 
	                                 astlog1.chpl 
	chapel/test/Samples/ex2-notest/: NOTEST illegal.chk illegal.chpl 
	chapel/test/Samples/ex3-fails/: .cvsignore intendedToFail.chk 
	                                intendedToFail.chpl 

---------------------------------------------------------------------------

04/03/18 15:36:22 -- bradc

Log message:
	Added a command to run etags on the chapel compiler sources after
	chapel is linked.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

04/03/22 16:43:30 -- bradc

Log message:
	Learned that the time to build on an NFS-mounted directory was
	painfully slow (10x slowdown for some commands), so added the
	option to set an environment variable CHPLDEVTMP which, when
	set, gives a root directory for writing .o's, .a's, and
	executables.  For example, on lotus, I set CHPLDEVTMP
	to /ptmp.  When compiling, rather than creating linux/
	subdirectories in the various directories, the Makefiles
	create a directory /ptmp/chapel-bradc/, mirror my source tree's
	structure under that point, and then sets up symbolic links
	to these directories for my linux/ subdirectories.  If CHPLDEVTMP
	is not set, things behave as they previously did.
	
	Well, almost... Two other changes made by this check-in:
	
	1) binaries are now built in the platform-specific subdirectories
	first.  Thus, your link line will look something like:
	
	g++ -o linux/chpl foo.o boo.o goo.o ...
	
	Then, a symbolic link to the binary is set up in the directory
	you're working in.  (Could switch this to a copy if anyone
	prefers).
	
	2) I defined the rule for how to build or build&link a platform-
	specific subdirectory in the make/Makefile.base file, included
	by all our other Makefiles, so added a rule prior to it:
	
	default: all
	
	so that when make is typed in any of these directories, you
	get the same behavior as before (previously, the first target
	in each of our Makefiles was "all").  One effect this has is
	that if you're hacking on a local Makefile and insert a rule
	before all, thinking that it will be the default, you'll be
	wrong (unless you also put it before the include Makefile.base).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/cast/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	chapel/compiler/make_prims/: Makefile 
	chapel/compiler/test/: Makefile 
	chapel/make/: Makefile.base 
	chapel/third-party/: Makefile 
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/03/22 17:26:17 -- jplevyak (a.k.a. n10253)

Log message:
	This is a big checkin.
	
	1. Added graphing of internal data structures.
	2. Added interprocedural constant propogation
	3. The HTML dump and graphing show reaching interprocedural constants.
	Currently I am not limiting these... when the overhead get's too high
	I'll get around to writing the code to convert them into "some integer"
	which is already supported.
	4. Changed the way assignment works so that SSU form is useful (I was using
	references for all assignment).
	5. Added support for "inout" parameters, currently used for the
	(overloaded) make-reference operator.  This is indicated by
	putting a 'var' before the parameter.
	6. Added some support for 'const' to the Chapel grammar.  Now the AST is
	decorated with 'constness'.
	7. Added 'let' to the Chapel grammar.  This permits simple bindings instead
	of just non-SSA 'var' style bindings.  We can remove this if everyone
	hates it, but it is useful for testing.
	
	Graphing
	
	-G turns on graphing, graphs are put in the log directory
	two formats are supported, VCG and GraphViz.
	
	VCG is interactive, and let's you collapse and limit the
	graph dynamically.  It is described and the source code
	is available at:
	
	http://rw4.cs.uni-sb.de/users/sander/html/gsvcg1.html
	
	GraphViz is static, but it produces somewhat more pleasing
	files and outputs to postscript (amoung other formats).
	
	It is described and the source code is available at:
	
	http://www.research.att.com/sw/tools/graphviz/
	
	The output defaults to VCG, GraphViz is supported
	by --graphviz.
	
	Currently you can output the AST, the CFG, the SSU graph and
	the flow variables.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast.h ast_cf.cpp chpl.g 
	                  clone.cpp code.h driver.cpp driver.h dump.cpp 
	                  fa.cpp fa.h fa_extras.cpp geysa.h if1.cpp 
	                  parse.cpp parse.h prelude.chpl prelude.v 
	                  prim.cpp prim_data.dat sym.h v.g var.h vec.cpp 
	                  vec.h 
Added files:
	chapel/compiler/: graph.cpp graph.h 
	chapel/compiler/samples/: ref.v tuples.v 

---------------------------------------------------------------------------

04/03/24 12:59:18 -- bradc

Log message:
	This checkin adds some crufty support for some trivial code
	generation (disabled by default), but lays in support for
	creating that source in a temporary directory, runtime
	libraries to support the source, compiling the source against
	the runtime libraries and moving the resulting binary back to
	the current working directory.  So consider it more infrastructure
	than any true support for code generation.
	
	Added new files to the compiler sources:
	codegen.cpp : the seat of code generation, currently
	files.cpp : utilities related to the tmp directory, int. files
	mysystem.cpp : wrapper around system() for issuing subcommands
	stringutil.cpp : some simple string utilities
	
	Notes:
	
	1) The tmp directory used for intermediates is stored in
	/tmp/chpl-deleteme.<pid>, where <pid> is the process ID
	of the compiler.  It currently isn't removed when compiles
	fail (fail, show_error, INT_ERROR, etc.) because I have
	a nasty fear of blowing away John's root directory again.
	After gaining some confidence with this, it should be
	blown away in these cases as well.  For the time being,
	if you're messing with code generation, you may want to
	monitor your /tmp directory and clean up by hand.  (Note
	that since codegen is currently disabled, you won't get
	these at all unless you take pains to enable them).
	
	2) Added some support for "internal errors" in misc.h/cpp via
	the macro INT_FATAL(ast, format, ...), which takes an
	AST* (or NULL if no obvious AST* is related), a printf-style
	format string, and the supporting args.  This prints out
	where in the compiler source the internal failure occurred,
	the argument message, and the source location that the AST
	corresponds to.  These are perhaps redundant with assert(),
	but I've never been a big fan of assert() (hard to set
	breakpoints on).  I'm open to persuasion for other approaches
	or modifications to this one.
	
	3) mysystem() (defined in mysystem.cpp) is currently simply a
	wrapper around C's system() to handle return codes, print
	out messages to the user, etc.  Eventually, it'll also
	print out the commands it's executing given an appropriate
	flag once I get around to adding some flag.
	
	4) Currently the binary is always named a.out.  Something else
	I need to add a flag for.
	
	5) stringutil.cpp contains a routine called glomstrings() that
	takes the number of strings and a varags list of char*
	pointers, mallocs the right amount of buffer space for
	them, glomst them all together, and returns the new string.
	Useful for building filenames and commands for mysystem().
	
	6) Factored the platform-decision stuff out of make/Makefile.base
	in order to use it in building the generated sources as well.
	
	7) The runtime directory structure is currently organized:
	
	chapel/
	runtime/
	etc/ -- Makefiles and such for building generated code
	include/ -- header files for generated code/runtime libs
	src/ -- source code for runtime libs

Modified files:
	chapel/compiler/: Makefile driver.cpp misc.cpp misc.h 
	chapel/make/: Makefile.base 
Added files:
	chapel/compiler/: FILES codegen.cpp codegen.h files.cpp files.h 
	                  mysystem.cpp mysystem.h stringutil.cpp 
	                  stringutil.h 
	chapel/make/: Makefile.platform 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: chplio.h chpltypes.h stdchpl.h 
	chapel/runtime/src/: .cvsignore Makefile chplio.c main.c 

---------------------------------------------------------------------------

04/03/25 10:46:20 -- bradc

Log message:
	This checkin adds some flags to help control the compilation
	process (1).  It also adds some better error messages when flags
	are used improperly (2). Inserted some tests to protect these
	error messages (3) and added a new (minor) test feature (4).
	I also hoisted some code out of the geysa.h file into more specific
	header files (5).
	
	(1) The new flags are:
	
	-o --output <exename> : specify the name of the final binary
	--savec  <dir>    : save the intermediate C in the specified dir
	--print-commands  : print the system() commands executed
	
	(2) The changes to how flags are handled are:
	
	* if a flag that requires an argument isn't followed by an argument,
	an appropriate error message is printed out.
	
	* if an unrecognized flag is encountered, an appropriate error message
	is printed out.
	
	* if the copyright flag is used, the usage() information isn't printed
	
	(3) The first tests!  I put these in a directory called compflags/ to
	test compiler options.  I also added a DIRS file to the root test
	directory to serve as a guide to the directories and what their
	intention is.
	
	(4) The new feature in the testing system is support for a
	LASTCOMPOPTS file, similar to the COMPOPTS file, but which
	follows the source filename argument.  Thus, the most
	general compile line will be:
	
	chpl <-compopts> <COMPOPTS> source.chpl <LASTCOMPOPTS>
	
	(5) The code hoisted out of geysa.h is as follows:
	
	chplalloc.h : memory allocation routines
	chpltypes.h : basic integer typedefs (uint64, etc.)
	extern.h    : EXTERN-related stuff
	version.h   : moved get_version() prototype here

Modified files:
	chapel/compiler/: arg.cpp codegen.cpp driver.cpp files.cpp 
	                  files.h geysa.h mysystem.cpp mysystem.h 
	                  version.h 
	chapel/test/: start_test sub_test 
Added files:
	chapel/compiler/: chplalloc.h chpltypes.h extern.h 
	chapel/test/: DIRS 
	chapel/test/compflags/bradc/badflagdash/: COMPOPTS declint.chk 
	                                          declint.chpl 
	chapel/test/compflags/bradc/badflagddash/: COMPOPTS declint.chk 
	                                           declint.chpl 
	chapel/test/compflags/bradc/copyright/: COMPOPTS declint.chk 
	                                        declint.chpl 
	chapel/test/compflags/bradc/missingargdash/: LASTCOMPOPTS 
	                                             declint.chk 
	                                             declint.chpl 
	chapel/test/compflags/bradc/missingargddash/: LASTCOMPOPTS 
	                                              declint.chk 
	                                              declint.chpl 

---------------------------------------------------------------------------

04/03/25 17:05:43 -- bradc

Log message:
	Incidental changes.  Did some work in starting to make header files
	stand more independently so that if one wanted to write code using
	the "AST" type, they could #include "ast.h" without having to worry
	so much about what it depended on.  This is by no means complete,
	but will be a lazy-evaluation background task.
	
	Also found that "echo -n" didn't work by default on the Suns, which
	created illegal dependence files, so reworked the Makefiles so that
	platforms could define their own ECHO target for use with echo -n
	(lazily, I only changed those echo commands in Makefiles that actually
	use -n...)

Modified files:
	chapel/compiler/: Makefile ast.h code.h codegen.cpp codegen.h 
	                  fa.h files.cpp fun.h list.h map.h misc.h 
	                  mysystem.cpp region.h stringutil.cpp sym.h 
	                  var.h 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.base Makefile.freebsd Makefile.linux 
	              Makefile.sun 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

04/03/26 11:45:53 -- bradc

Log message:
	Minor changes.  codegen is still off by default:
	
	1) fixed the generation of write() calls to use the type_info of its
	arguments in generating the routine name (previously it was
	hard-wired to integer64).
	
	2) changed the runtime library's write() implementation to take a
	format flag in expectation of this need down the road.
	
	3) added a clean_exit() routine to use in place of exit() that blows
	away the /tmp directory created by code generation (if it exists)
	and switched error routines over to using this routine.  Also
	added a catch of SIGINT that calls fail() and will similarly blow
	away the /tmp directory (should probably add more signals, but
	I'm too lazy to try and come up with a portable list of signals
	that we'd want to catch today.

Modified files:
	chapel/compiler/: codegen.cpp files.cpp files.h misc.cpp 
	chapel/runtime/include/: chplio.h chpltypes.h 
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

04/03/26 11:56:47 -- jplevyak (a.k.a. n10253)

Log message:
	Bug in comparison routine passed to qsort.

Modified files:
	chapel/third-party/dparser/d/: lr.c 

---------------------------------------------------------------------------

04/03/26 12:01:21 -- jplevyak (a.k.a. n10253)

Log message:
	Suppression file for use with the Boehm GC and valgrind vr 2.0.0

Added files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

04/03/26 14:15:38 -- bradc

Log message:
	Found some portability problems on the Sun with the Makefiles
	and regression tests, so fixed these.  Updated some other
	files.

Modified files:
	./: Makefile 
	chapel/make/: Makefile Makefile.platform 
	chapel/test/: DIRS start_test sub_test 
Added files:
	./: DIRS 
	chapel/runtime/: Makefile 
Removed files:
	./: structure.txt 
	chapel/make/: Makefile.gcc 

---------------------------------------------------------------------------

04/03/26 14:18:14 -- bradc

Log message:
	Never seem to have gotten this file checked in.

Added files:
	chapel/test/Logs/: .cvsignore 

---------------------------------------------------------------------------

04/03/26 15:02:02 -- bradc

Log message:
	Enabled the testing system to run binaries produced by the
	compiler by default when testing a directory.  Also added
	support for a new feature:  When a NOEXEC file is placed
	in a subdirectory of the testing system, the source files
	in that directory will only be compiled and the compiler's
	output will be diff'd against the expected output -- any
	generated executables will not be run.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/compflags/bradc/copyright/: NOEXEC 

---------------------------------------------------------------------------

04/03/26 15:28:01 -- bradc

Log message:
	Cleaned up the handling of literals for now.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

04/03/26 15:28:57 -- bradc

Log message:
	Added support for printing strings (string literals, at least).

Modified files:
	chapel/runtime/include/: chplio.h chpltypes.h 

---------------------------------------------------------------------------

04/03/26 15:29:31 -- bradc

Log message:
	Oops, I'm getting too fast.  This should've gone with the
	last checkin.

Modified files:
	chapel/runtime/src/: chplio.c 

