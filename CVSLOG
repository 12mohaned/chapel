!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                !
! NOTE: This file is automatically maintained by the CVS system. !
! Please do not update and commit by hand                        !
!                                                                !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


---------------------------------------------------------------------------

01/21/04 13:28:16 -- bradc

Log message:
	This is a test.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

01/21/04 14:13:02 -- bradc

Log message:
	Set the script up to mail both John (here at Cray) and me.

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

01/21/04 14:22:46 -- bradc

Log message:
	Still ashamed for my former sloppiness, made Makefile.base even more
	bulletproof (perhaps overly so :).  Made a rule such that if PLATFORM
	is set to unknown, it prints out a message indicating that the
	platform is not recognized and exits.
	
	In order to make this rule not be the first (and therefore default)
	rule in every Makefile that includes Makefile.base, I added a rule
	"default:" that depends on "all".  Thus, "all" should be the first
	target of every Makefile that we make (this seems to be the convention
	we both favor anyway, so hopefully this isn't too much of an
	imposition).
	
	Also added a Makefile to the make/ directory that prints out all the
	PLATFORM/OS/ARCH information.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile 

---------------------------------------------------------------------------

01/21/04 14:40:16 -- bradc

Log message:
	Got rid of remaining DOS linefeeds.

Modified files:
	chapel/compiler/: prim_data.dat 
	chapel/make/: Makefile.cygwin Makefile.sun 

---------------------------------------------------------------------------

01/22/04 09:58:44 -- bradc

Log message:
	Switched mailing list to chapel_dev@cray.com (should happen on
	next check-in, not this one).

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

01/22/04 09:59:37 -- bradc

Log message:
	Just checking that mail to the new mailing list works.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

01/22/04 12:33:17 -- n10253

Log message:
	Continued work on type checking, parameterized
	types and type constraints on other types (e.g. some_var : some_type).

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h clone.cpp fa.cpp if1.cpp 
	                  sym.h v.g 
Added files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

01/22/04 13:48:26 -- bradc

Log message:
	Improved the Makefile so that clean would remove prim_data.cpp and so
	that a clean build would work without being run twice (previously, it
	seemed to trip over prim_data.cpp being missing the first time and
	then worked the second time).
	
	Improved the .cvsignore files to ignore things created during the
	run of the sample program.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/samples/: .cvsignore 

---------------------------------------------------------------------------

01/22/04 13:56:39 -- bradc

Log message:
	Took a cue from John's mail yesterday and removed the optional
	inclusion of Makefile.$(PLATFORM) to create errors on an unknown
	platform.  Then realized that by moving the rules I'd added to
	Makefile.base to create a nice error message to Makefile.unknown, I
	could still get nice error messages on an unknown platform.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile.unknown 

---------------------------------------------------------------------------

01/22/04 13:58:47 -- bradc

Log message:
	Added dparser's created BUILD_VERSION file to the list of files to be
	ignored in the d/ directory.

Added files:
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

01/23/04 11:49:33 -- n10253

Log message:
	add the binaries and "freebsd"

Modified files:
	chapel/compiler/: .cvsignore 

---------------------------------------------------------------------------

01/23/04 13:15:20 -- n10253

Log message:
	Little bug fixes in preparation for working on structural types.

Modified files:
	chapel/compiler/: fa.cpp if1.cpp 

---------------------------------------------------------------------------

01/23/04 14:46:22 -- n10253

Log message:
	Handle more sorts of argument type constraints.

Modified files:
	chapel/compiler/: TODO ast.cpp 

---------------------------------------------------------------------------

01/26/04 11:30:18 -- n10253

Log message:
	freebsd build directory and a couple more executables into cvsignore

Modified files:
	chapel/third-party/boehmgc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.2/: .cvsignore 
	chapel/third-party/dparser/: .cvsignore 
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

01/28/04 11:55:22 -- n10253

Log message:
	Added "path" argument type to args.*
	Added logging system: see log.h for details.

Modified files:
	chapel/compiler/: Makefile arg.cpp driver.cpp fa.cpp geysa.h 
	                  if1.cpp if1.h sym.h 
Added files:
	chapel/compiler/: log.cpp log.h 

---------------------------------------------------------------------------

01/28/04 12:02:43 -- n10253

Log message:
	Fix minor grammar ambiguity.

Modified files:
	chapel/compiler/: TODO v.g 

---------------------------------------------------------------------------

01/28/04 18:41:34 -- n10253

Log message:
	Implement constant folding.
	Dead code elimination does not yet take constant folding into account.

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h driver.cpp fa.cpp if1.h 
	                  prelude.v prim.cpp prim.h prim_data.dat sym.h 
Added files:
	chapel/compiler/: ast_cf.cpp cast.cpp 

---------------------------------------------------------------------------

01/29/04 15:23:45 -- n10253

Log message:
	Constant folding complete: converts the AST node to an AST_const.
	Abstracted v.g and made a copy in chpl.g in preparations for building
	chapel grammar.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast_cf.cpp chpl.g 
	                  driver.cpp fa_extras.cpp geysa.h if1.cpp map.h 
	                  sym.h v.g 
Added files:
	chapel/compiler/: grammar.cpp grammar.h prelude.chpl 

---------------------------------------------------------------------------

01/30/04 11:36:40 -- bradc

Log message:
	Establishing an examples/ directory for use in managing
	chapel examples and tracking their evolution.  Checking
	in matrix-vector multiplication-related milestone 0 codes,
	including the official consensus code, some interesting
	variations, and some baby steps that should help get us
	there.

Added files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 
	chapel/examples/pre-milestone0/: matadd.chpl matassign.chpl 
	                                 matvectadd.chpl 

---------------------------------------------------------------------------

02/03/04 13:48:58 -- n10253

Log message:
	fix bug in error recovery

Modified files:
	chapel/third-party/dparser/d/: parse.c 

---------------------------------------------------------------------------

02/03/04 15:11:32 -- bradc

Log message:
	Just inserted scripts to update BUILDNUM and CVSLOG files
	in the root chapel/ directory automatically, and inserted
	these files manually.  Just added a header to the top of
	CVSLOG requesting that people not change it manually
	(though it is possible to do so, to commit those changes,
	and then to have the script automatically tack your log to
	the end of those changes, as will happen with this entry.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

02/03/04 15:14:25 -- bradc

Log message:
	Oops, typo in previous log.  BUILDNUM should've
	been BUILD_VERSION.

Modified files:
	./: BUILD_VERSION 
Removed files:
	./: BUILDNUM 

---------------------------------------------------------------------------

02/03/04 16:15:41 -- n10253

Log message:
        casting decision tree

Added files:
        chapel/compiler/: cast_code.cpp 
---------------------------------------------------------------------------

02/03/04 16:29:46 -- bradc

Log message:
	John's last checkin failed to update these files due to a
	permission problem I created, so I've updated them by hand
	as penance.

Modified files:
	./: BUILD_VERSION CVSLOG 

---------------------------------------------------------------------------

02/03/04 16:39:17 -- bradc

Log message:
	Updated the compiler's version machinery from
	Makefile + -D-based technology to a header file
	(version.h) that includes the automatically
	updated BUILD_VERSION file in the parent
	directory.

Modified files:
	chapel/compiler/: Makefile version.cpp 
Added files:
	chapel/compiler/: version.h 
Removed files:
	chapel/compiler/: BUILD_VERSION 

---------------------------------------------------------------------------

02/03/04 16:58:42 -- bradc

Log message:
	Just noticed that when I check in files, it appears that their
	group gets changed from chapel back to criemp.  Am trying to
	fix it, and this checkin is essentially a test (albeit one
	that updates the structure file a bit).

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

02/03/04 17:34:35 -- bradc

Log message:
	Another attempt to fix my permissions problem.  Another small
	modification to the structure file.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

02/04/04 12:41:08 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	very preliminary chapel grammar and prelude
	sample/sample.chpl added, and compiles

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h builtin_symbols.h chpl.g 
	                  fa.cpp prelude.chpl prelude.v prim_data.dat 
	                  v.g 
Added files:
	chapel/compiler/samples/: sample.chpl 

---------------------------------------------------------------------------

02/04/04 14:00:36 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	start a prioritized TODO list

Modified files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

02/09/04 16:39:53 -- bradc

Log message:
	Changed dimension of reduction to be correct.

Modified files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 

---------------------------------------------------------------------------

02/10/04 14:53:16 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Extensive changes to the way assignment occurs.
	Assignment is now mediated through methods.  All variables
	are converted to references to be assigned.  This permits
	complex left-hand sides to be type infered correctly, e.g.
	
	a.b.c.d = 5;

Modified files:
	chapel/compiler/: ast.cpp ast_cf.cpp builtin_symbols.h chpl.g 
	                  fa.cpp fa_extras.cpp prelude.chpl prelude.v 
	                  prim_data.dat v.g 
Added files:
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

02/12/04 10:48:45 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for trailing context to scanner

Modified files:
	chapel/third-party/dparser/d/: CHANGES COPYRIGHT Makefile README 
	                               arg.c arg.h d.h dparse.h 
	                               dparse_tables.h dsymtab.h gram.c 
	                               gram.h gramgram.h grammar.g.c 
	                               index.html lex.c lex.h lr.c lr.h 
	                               make_dparser.c parse.c parse.h 
	                               sample_parser.c scan.c scan.h 
	                               symtab.c util.c util.h version.c 
	                               write_ctables.c write_ctables.h 
	chapel/third-party/dparser/d/python/: dparser_wrap.c test.py 
	chapel/third-party/dparser/d/verilog/: Makefile ambig.c main.c 
	                                       vparse.c 
Added files:
	chapel/third-party/dparser/d/tests/: g46.test.g g46.test.g.1 
	                                     g46.test.g.1.check 

---------------------------------------------------------------------------

02/12/04 15:38:21 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in the trailing context code.
	Updated test cases.

Modified files:
	chapel/third-party/dparser/d/: Makefile lex.c parse.c scan.c 
	chapel/third-party/dparser/d/tests/: g36.test.g.1.check 

---------------------------------------------------------------------------

02/12/04 15:39:15 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Update grammar to use trailing context.

Modified files:
	chapel/compiler/: chpl.g v.g 

---------------------------------------------------------------------------

02/12/04 18:31:40 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	add support for basic sequences of the form
	
	1..n by m
	
	some work on fa.cpp in preparation for more extensive changes
	to support analysis of sequences and vectors.

Modified files:
	chapel/compiler/: TODO chpl.g fa.cpp fa.h prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: seq.chpl 

---------------------------------------------------------------------------

02/13/04 15:48:39 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	cleaned up instance variable handling and
	updated instance variable test case

Modified files:
	chapel/compiler/: ast.cpp clone.cpp fa.cpp prelude.chpl 
	                  prelude.v 
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

02/19/04 10:36:58 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in d_ws_before

Modified files:
	chapel/third-party/dparser/d/: dparse_tables.h parse.c 

---------------------------------------------------------------------------

02/19/04 11:22:35 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	added support for analyzing vectors and vector operations
	added samples/vec.chpl as vector test case

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h chpl.g fa.cpp grammar.cpp 
	                  if1.cpp prelude.chpl prim.cpp sym.h v.g 
	chapel/compiler/samples/: iv.chpl 
Added files:
	chapel/compiler/samples/: vec.chpl 

---------------------------------------------------------------------------

02/19/04 11:28:53 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	

Removed files:
	chapel/third-party/dparser/: d-1.8-src.tar.gz 

---------------------------------------------------------------------------

02/20/04 10:00:47 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for immediate sequences 1..n by m.
	Reorganized primitive handling in type inference to support
	more complicated transition function more easily.
	Prep for more advanced splitting (type inference of abstract code).

Modified files:
	chapel/compiler/: ast.cpp cfg.cpp chpl.g fa.cpp fa.h grammar.cpp 
	                  make_prims.g prelude.chpl prelude.v prim.h 
	                  prim_data.dat vec.cpp vec.h 

---------------------------------------------------------------------------

02/25/04 16:26:23 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	made forv_Vec (the basis for all the forv_XXX vector iterators) safe with respect to
	changes to the underlying vector.
	- added a new primitive "index_vector" used by the vector class for indexing.
	- made calls on vectors into indexing into the vector, this will be inherited
	by domains.
	- specific symbols are now subtypes of "symbol", specific functions subtypes
	of "function", and functions/methods whose pattern contains an initial symbol
	are subtypes of that symbol (this permits the function to be pattern matched
	to that symbol.
	- fixed bugs in cloning, the type_diff function, etc.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h clone.cpp 
	                  fa.cpp fa.h fa_extras.cpp if1.cpp pnode.h 
	                  prelude.chpl prelude.v prim.cpp prim_data.dat 
	                  vec.h 

---------------------------------------------------------------------------

02/26/04 11:57:51 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	checkpoint for rework of implicit references (e.g. array access, Mat(1))

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h builtin_symbols.h 
	                  driver.cpp fa.cpp fa.h fa_extras.cpp fun.cpp 
	                  prelude.chpl prelude.v sym.h vec.cpp 

---------------------------------------------------------------------------

02/26/04 16:26:33 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Completely new method for handling implicit references (lvals).
	Differentiate using the class as a function (e.g. domain(1..n)) and
	using objects of the class as a function (e.g. Mat(1)).
	Added mvm1.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h fa.cpp fa.h if1.cpp 
	                  prelude.chpl var.cpp var.h 
Added files:
	chapel/compiler/samples/: mvm1.chpl 

---------------------------------------------------------------------------

02/27/04 14:04:26 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- change verbose levels so that -v only returns types
	- new "array" class which combines a domain and a vector
	- support for generalized point-wise operations on arrays
	- combine similar type violations
	- use standard error reporting syntax to report type violations
	- convert to using selectors instead of functions for globally declared
	functions

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h cfg.cpp fa.cpp 
	                  fa.h fa_extras.cpp fun.cpp if1.cpp 
	                  prelude.chpl prelude.v ssu_extra.cpp vec.cpp 

---------------------------------------------------------------------------

02/27/04 16:43:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- add samples/mat1.chpl
	- tweeks to handle samples/mat.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp chpl.g fa.cpp if1.cpp 
	                  prelude.chpl 

---------------------------------------------------------------------------

03/01/04 10:40:57 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fix bug with handling of simple expressions in false forks of conditionals

Modified files:
	chapel/compiler/: TODO ast.cpp if1.cpp 

---------------------------------------------------------------------------

03/01/04 11:07:13 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Chapel syntax for conditionals now: "if" expression "then" expression "else" expression
	Syntax for while loops now: "while" expression "do" expression
	Added samples/mat1.chpl.

Modified files:
	chapel/compiler/: TODO chpl.g 
	chapel/compiler/samples/: mvm1.chpl 
Added files:
	chapel/compiler/samples/: mat1.chpl 

---------------------------------------------------------------------------

03/05/04 16:02:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- integers are now "integer"
	- added sample/matassign1.chpl which is closer to what we have been discussing
	- matassign1.chpl type checks
	- fixed a pattern matching bug in fa.cpp

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp fa.cpp fa.h if1.cpp 
	                  prelude.chpl 
Added files:
	chapel/compiler/samples/: matassign1.chpl 

---------------------------------------------------------------------------

03/08/04 18:13:52 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Added samples/literals.v
	Fixed some bugs with literal handling, added characters, complex and strings as
	builtin types.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h chpl.g fa.cpp 
	                  if1.cpp prelude.chpl prelude.v v.g 
	chapel/third-party/dparser/d/: gram.c grammar.g grammar.g.c 
	chapel/third-party/dparser/d/tests/: g44.test.g 
Added files:
	chapel/compiler/samples/: literal.v 

---------------------------------------------------------------------------

03/09/04 15:00-ish -- bradc (this is a hand-generated message due to
                             problems in the CVS perl scripts when
                             moving to Linux)

Log message:
	Reincorporated changes from ver 1.5 of Makefile to (1) work in
	the face of a missing BUILD_VERSION file and (2) look in the
	Chapel installation of the GC stuff for libraries and headers.

Modified files:
	chapel/third-party/dparser/d/: Makefile



---------------------------------------------------------------------------

03/09/04 15:43:54 -- bradc

Log message:
	Ran into incompatibilities with the CVS perl scripts on Linux, so
	my previous log file got lost and I entered it by hand.  It
	concerned modifications to third-party/dparser/d/Makefile.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

03/09/04 16:21:13 -- jplevyak (a.k.a. n10253)

Log message:
	Removed unnecessary (and error causing) $name "complex"

Modified files:
	chapel/compiler/: v.g 

---------------------------------------------------------------------------

03/12/04 09:55:29 -- jplevyak (a.k.a. n10253)

Log message:
	Added new -t option which dumps the program as cross-linked HTML
	into the "log" directory as "dump.html".
	Fixed a number of bugs discovered by examining the HTML.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp builtin_symbols.h 
	                  clone.cpp driver.cpp driver.h fa.cpp fa.h 
	                  fun.cpp fun.h geysa.h if1.h log.cpp pdb.h 
	                  prelude.chpl prelude.v prim_data.dat sym.h 
	                  vec.cpp 
	chapel/compiler/samples/: literal.v 
Added files:
	chapel/compiler/: bullet.gif dump.cpp dump.h minus.gif 
	                  mktree.css mktree.js plus.gif 

---------------------------------------------------------------------------

03/12/04 15:08:09 -- jplevyak (a.k.a. n10253)

Log message:
	refactor headers for cast.cpp

Modified files:
	chapel/compiler/: TODO cast.cpp if1.h 
Added files:
	chapel/compiler/: num.h 

---------------------------------------------------------------------------

03/12/04 15:51:50 -- bradc

Log message:
	This change is a revamping of the make system, in an attempt to
	make it more modular and more understandable (to myself, at least,
	and hopefully to new implementors as well).
	
	This isn't a perfect check-in:  since compiler code is created
	dynamically, it is difficult to establish dependences for those
	bits of code that are dynamic.  It was hard enough to establish
	proper dependences for those bits of code that #include dynamically-
	created files.  So the main limitation of this version is that
	dependences for dynamically created files (make_prims.cpp,
	*.g.d_parser.cpp, cast_code.cpp) are not generated.  This will be
	fixed when I revisit the topic (probably by keeping these
	dependences under compiler control -- yuck; or simply by requiring
	developers who want such dependences to run make depend after
	they've completed a successful make (also yuck).  Alternatively,
	we could put all code under CVS control, even if it is dynamically
	generated (I'm not sure how fast some of these files change, so
	don't know if this makes sense).
	
	The general organization strategy here is:
	
	- put each binary in its own directory (for understandability)
	- teach the Makefiles how to make everything (so developers don't need
	to know how)
	- no automatic updating of dependences -- developers must do it
	manually
	
	The new directory structure is:
	
	compiler/     -- code for the compiler
	make/       -- stores common Makefile variables, rules
	cast/       -- code to build cast
	make_prims/ -- code to build make_prims
	test/       -- unit tests for the compiler
	
	where each of these subdirectories has a platform-specific
	subdirectory for storing object files, dependence information,
	etc.
	
	The Makefile in compiler/ currently responds to:
	
	all: recursively builds subdirectories, then builds self
	clean: cleans all subdirectories, self
	depend: updates dependences for CVS-controlled sources in
	subdirectories, self
	cleandeps: remove all dependence information in
	subdirectories, self
	clobber: clean up "everything" not under CVS control
	test: builds and runs unit tests
	
	The subdirectories are each structured in a fairly similar way so that
	they can share a bunch of common Makefile rules and variables (stored
	in the compiler/make/ subdirectory) and so that these rules can be
	changed once and affect all the subdirectories.
	
	This took way more work than I expected, due mostly to the existence
	of dynamically generated sources, which threw more monkey wrenches at
	me than I imagined.  I documented some of the problems I was running
	into in make/Makefile.NOTES so that in future changes I don't retread
	over the same path again.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/cast/: .cvsignore Makefile cast.cpp 
	chapel/compiler/make/: Makefile.NOTES Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: .cvsignore Makefile make_prims.cpp 
	                             make_prims.g 
	chapel/compiler/test/: .cvsignore Makefile test_lib.cpp 
Removed files:
	chapel/compiler/: cast.cpp cast_code.cpp make_prims.cpp 
	                  make_prims.g test_lib.cpp 

---------------------------------------------------------------------------

03/12/04 15:53:10 -- bradc

Log message:
	Oops, wasn't quite out at the root of the Chapel tree for that
	last checkin.  The changes to Makefile.base factor some of the
	make_dparser variables out to this level and switch from -L -l
	for libgc.a to simply specifying the library directly (for
	some reason, the former wasn't working for me on Linux).

Modified files:
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

03/12/04 16:26:36 -- jplevyak (a.k.a. n10253)

Log message:
	change recursive make invocations to use $(MAKE) so as to
	use the same version of make as the original invocation
	(necessary on FreeBSD where the default make is not gmake)

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

03/16/04 12:44:42 -- jplevyak (a.k.a. n10253)

Log message:
	remove "dead" cruft from dump

Modified files:
	chapel/compiler/: TODO dump.cpp 

---------------------------------------------------------------------------

03/16/04 18:16:38 -- jplevyak (a.k.a. n10253)

Log message:
	print out folded constants in dump.html
	add test case in samples for constant folding: samples/constant_folding.v

Modified files:
	chapel/compiler/: ast.cpp ast.h ast_cf.cpp builtin_symbols.h 
	                  dump.cpp fa.cpp prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: constant_folding.v 

---------------------------------------------------------------------------

03/17/04 12:58:45 -- jplevyak (a.k.a. n10253)

Log message:
	Begin work on indexing into tuples.  To get this to work I
	need to implement constant propogation and inlining.

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp dump.cpp fa.cpp if1.cpp 
	                  misc.cpp misc.h sym.h 

---------------------------------------------------------------------------

03/17/04 13:22:30 -- bradc

Log message:
	Broke argv[0] down into the program's name and its directory
	location.  Added a field for the latter in the ArgumentState
	descriptor, and used it to initialize the system_dir option.
	Eliminated a static variable in driver.cpp that duplicated
	the former.
	
	If a directory name isn't given in argv[0], "." is assumed
	(whereas the better behavior would be to search the path).
	I may add this in the future, but for now it seems no worse
	than it was before in such cases.

Modified files:
	chapel/compiler/: arg.cpp arg.h driver.cpp 

---------------------------------------------------------------------------

03/17/04 13:41:54 -- bradc

Log message:
	Squelched the creation of the log/ subdirectory unless the user
	requests the creation of a log or an HTML dump.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

03/18/04 10:13:06 -- jplevyak (a.k.a. n10253)

Log message:
	update __index_vector to __index.

Modified files:
	chapel/compiler/: prelude.chpl 

---------------------------------------------------------------------------

03/18/04 15:34:43 -- bradc

Log message:
	First version of the regression test system.
	
	Instructions for use (from the top of the start_test script):
	
	--------------------
	
	Executive Summary: The overall flow of the testing system is that it
	will recursively descend into subdirectories looking for Chapel
	programs to compile and run (*.chpl) as well as for other tests to
	run (sub_test).  The output of these runs will typically be logged
	in a file stored in the Logs/ subdirectory, as will a summary of the
	errors reported (determined by grepping for the string "[Error", so
	don't have your program print this out.
	
	Here's the directory structure:
	
	Bin/     -- contains binary files/scripts required by the testing
	system, such as the timedexec script which kills a
	test if it takes too long
	Logs/    -- logs of testing runs go here by default
	Samples/ -- sample tests go here; these are for illustration only
	and won't be run by default.  To try running the
	test system against these samples, use:
	start_test -startdir ./Samples
	*/       -- all other directories will contain tests
	
	The start_test script kicks off all the action.  With no arguments,
	it will run all the tests using the defaults.  The '-h' option lists
	the options that the script accepts and the default values.  Current
	options are:
	
	option     argument               default value
	---------  ---------------------  -------------
	-compiler  <compiler executable>  ../compiler/chpl
	-compopts  <option list>          ""
	-execopts  <option list>          ""
	-startdir  <test subdir>          .
	-logfile   <log filename>         ./Logs/<username>.log
	
	The -compiler option allows the user to specify the compiler to test
	if it is something other than the obvious one in the current CVS
	structure.  This lets one run other people's compilers, old copies
	of compilers, etc.
	
	The -compopts option allows the user to specify a set of compiler
	options that should be used on every invocation to the compiler.
	Additional compiler options can be specified on a directory-by-
	directory basis.
	
	The -execopts option allows the user to specify a set of execution
	options that should be used on every invocation of a program.  As
	with compiler options, these can be ammended in each subdirectory.
	
	The -startdir option allows the user to specify a subdirectory of
	the testing system to start in (and limit itself to).  Assuming
	that tests are sorted into subdirectories by useful features, this
	allows you to run a subset of the tests easily.
	
	The -logfile option indicates where the log of the test run should
	be kept.  By default it's based on the user's name.  If the log
	file already exists, you will be prompted at the beginning of the
	run whether you want to delete that file or not.  At the end of
	the run, a second log file named <logfile>.summary will be
	generated containing only the Errors that were logged.
	
	By default, setting up a subdirectory for testing simply consists
	of creating the directory, putting Chapel (.chpl) source files
	into it and an expected output file (.chk) for each source file
	(using the same base name).  Upon reaching such a directory, the
	testing system will run the specified compiler on each Chapel
	source file using the specified compiler options, then (assuming
	the compile completed successfully, execute the resulting program
	using the specified execution options.  The output from both the
	compilation and the execution are concatenated and diff'd against
	the .chk file.  This allows programs that are supposed to generate
	errors, warnings, and correct programs to all be tested using the
	same mechanisms.
	
	Particular subdirectories can also be customized if necessary.
	Note that such customizations are not inherited recursively by
	further subdirectories, but apply only to the directory in
	question (we might consider changing this in future versions).
	The customizations are as follows:
	
	- if the subdirectory contains an executable sub_test script,
	that script will be used to run the tests in that directory
	rather than the default sub_test script (located in this
	directory).  A sub_test script may take whatever actions it
	wants, and is simply expected to generate any errors using
	the "[Error ...]" format so that it will show up in the
	summary.  Similarly, the script should generate any warnings
	or successful tests using "[Warning ...]" "[Success ...]"
	messages for consistency.  The sub_test script will be
	sent two arguments: (1) the compiler to use, and (2) the
	location of this main test/ directory.  The compiler and
	execution options will be stored in environment variables
	named COMPOPTS and EXECOPTS, respectively.
	
	- if the subdirectory contains a NOTEST file, that directory
	will not be considered for testing.  This can be useful for
	disabling subdirectories containing tests that don't work
	yet, or subdirectories that contain input files for other
	tests (though they will also be ignored if they fail to
	contain any .chpl files...)
	
	- if the subdirectory contains a COMPOPTS or EXECOPTS file,
	the options listed in that file will be added to the compiler
	and execution options for that subdirectory.  NOTE: be sure
	not to end the file with a linefeed -- it should simply be a
	list of options on the first line, followed <eof>.
	
	- if the subdirectory contains a CATFILES file, then the files
	listed in that file will be concatenated to the end of the
	compiler/execution output for each test.  For tests that
	generate files (either as a result of the compilation or
	as part of the executable's behavior), this can be used to
	ensure that the generated file's contents are correct without
	writing a specialized sub_test script.  Again, this file should
	be a single line with no linefeeds.
	
	- if the subdirectory contains a TIMEOUT file, then that file
	will be read to determine the number of seconds that the tests
	in the directory should be allowed to run before being killed.
	The default is currently 5 minutes.
	
	- subdirectory-specific .cvsignore files can also be very
	helpful so that files generated during testing won't clutter
	the results of a cvs -nq update command.
	
	Also worth describing here is the start_clean script which walks
	the directory structure in a similar manner and cleans up --
	removing the generated executables, core files, and *.tmp files
	which store any mismatching output.  The user can also specify
	subdirectory-specific things to clean up usinng a CLEANFILES
	file that lists other targets to remove (called with the -rf
	flag, so subdirectories will work here as well).  The idea is
	that after start_clean runs, the testing system should be left
	in a state pretty close to what's checked into the CVS tree.
	
	Again, to see a sample run of the testing system, look through
	the Samples/ directory, then run:
	
	./start_test -startdir Samples
	
	and inspect the Samples/ and Logs/ subdirectories to see what
	was generated.  Then use:
	
	./start_clean -startdir Samples
	
	to clean back up again.
	
	--------------

Added files:
	chapel/test/: start_clean start_test sub_clean sub_test 
	chapel/test/Bin/: timedexec 
	chapel/test/Logs/: .keepme 
	chapel/test/Samples/ex1-astlog/: .cvsignore CATFILES CLEANFILES 
	                                 COMPOPTS astlog1.chk 
	                                 astlog1.chpl 
	chapel/test/Samples/ex2-notest/: NOTEST illegal.chk illegal.chpl 
	chapel/test/Samples/ex3-fails/: .cvsignore intendedToFail.chk 
	                                intendedToFail.chpl 

---------------------------------------------------------------------------

03/18/04 15:36:22 -- bradc

Log message:
	Added a command to run etags on the chapel compiler sources after
	chapel is linked.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

03/22/04 16:43:30 -- bradc

Log message:
	Learned that the time to build on an NFS-mounted directory was
	painfully slow (10x slowdown for some commands), so added the
	option to set an environment variable CHPLDEVTMP which, when
	set, gives a root directory for writing .o's, .a's, and
	executables.  For example, on lotus, I set CHPLDEVTMP
	to /ptmp.  When compiling, rather than creating linux/
	subdirectories in the various directories, the Makefiles
	create a directory /ptmp/chapel-bradc/, mirror my source tree's
	structure under that point, and then sets up symbolic links
	to these directories for my linux/ subdirectories.  If CHPLDEVTMP
	is not set, things behave as they previously did.
	
	Well, almost... Two other changes made by this check-in:
	
	1) binaries are now built in the platform-specific subdirectories
	first.  Thus, your link line will look something like:
	
	g++ -o linux/chpl foo.o boo.o goo.o ...
	
	Then, a symbolic link to the binary is set up in the directory
	you're working in.  (Could switch this to a copy if anyone
	prefers).
	
	2) I defined the rule for how to build or build&link a platform-
	specific subdirectory in the make/Makefile.base file, included
	by all our other Makefiles, so added a rule prior to it:
	
	default: all
	
	so that when make is typed in any of these directories, you
	get the same behavior as before (previously, the first target
	in each of our Makefiles was "all").  One effect this has is
	that if you're hacking on a local Makefile and insert a rule
	before all, thinking that it will be the default, you'll be
	wrong (unless you also put it before the include Makefile.base).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/cast/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	chapel/compiler/make_prims/: Makefile 
	chapel/compiler/test/: Makefile 
	chapel/make/: Makefile.base 
	chapel/third-party/: Makefile 
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

03/22/04 17:26:17 -- jplevyak (a.k.a. n10253)

Log message:
	This is a big checkin.
	
	1. Added graphing of internal data structures.
	2. Added interprocedural constant propogation
	3. The HTML dump and graphing show reaching interprocedural constants.
	Currently I am not limiting these... when the overhead get's too high
	I'll get around to writing the code to convert them into "some integer"
	which is already supported.
	4. Changed the way assignment works so that SSU form is useful (I was using
	references for all assignment).
	5. Added support for "inout" parameters, currently used for the
	(overloaded) make-reference operator.  This is indicated by
	putting a 'var' before the parameter.
	6. Added some support for 'const' to the Chapel grammar.  Now the AST is
	decorated with 'constness'.
	7. Added 'let' to the Chapel grammar.  This permits simple bindings instead
	of just non-SSA 'var' style bindings.  We can remove this if everyone
	hates it, but it is useful for testing.
	
	Graphing
	
	-G turns on graphing, graphs are put in the log directory
	two formats are supported, VCG and GraphViz.
	
	VCG is interactive, and let's you collapse and limit the
	graph dynamically.  It is described and the source code
	is available at:
	
	http://rw4.cs.uni-sb.de/users/sander/html/gsvcg1.html
	
	GraphViz is static, but it produces somewhat more pleasing
	files and outputs to postscript (amoung other formats).
	
	It is described and the source code is available at:
	
	http://www.research.att.com/sw/tools/graphviz/
	
	The output defaults to VCG, GraphViz is supported
	by --graphviz.
	
	Currently you can output the AST, the CFG, the SSU graph and
	the flow variables.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast.h ast_cf.cpp chpl.g 
	                  clone.cpp code.h driver.cpp driver.h dump.cpp 
	                  fa.cpp fa.h fa_extras.cpp geysa.h if1.cpp 
	                  parse.cpp parse.h prelude.chpl prelude.v 
	                  prim.cpp prim_data.dat sym.h v.g var.h vec.cpp 
	                  vec.h 
Added files:
	chapel/compiler/: graph.cpp graph.h 
	chapel/compiler/samples/: ref.v tuples.v 

---------------------------------------------------------------------------

03/24/04 12:59:18 -- bradc

Log message:
	This checkin adds some crufty support for some trivial code
	generation (disabled by default), but lays in support for
	creating that source in a temporary directory, runtime
	libraries to support the source, compiling the source against
	the runtime libraries and moving the resulting binary back to
	the current working directory.  So consider it more infrastructure
	than any true support for code generation.
	
	Added new files to the compiler sources:
	codegen.cpp : the seat of code generation, currently
	files.cpp : utilities related to the tmp directory, int. files
	mysystem.cpp : wrapper around system() for issuing subcommands
	stringutil.cpp : some simple string utilities
	
	Notes:
	
	1) The tmp directory used for intermediates is stored in
	/tmp/chpl-deleteme.<pid>, where <pid> is the process ID
	of the compiler.  It currently isn't removed when compiles
	fail (fail, show_error, INT_ERROR, etc.) because I have
	a nasty fear of blowing away John's root directory again.
	After gaining some confidence with this, it should be
	blown away in these cases as well.  For the time being,
	if you're messing with code generation, you may want to
	monitor your /tmp directory and clean up by hand.  (Note
	that since codegen is currently disabled, you won't get
	these at all unless you take pains to enable them).
	
	2) Added some support for "internal errors" in misc.h/cpp via
	the macro INT_FATAL(ast, format, ...), which takes an
	AST* (or NULL if no obvious AST* is related), a printf-style
	format string, and the supporting args.  This prints out
	where in the compiler source the internal failure occurred,
	the argument message, and the source location that the AST
	corresponds to.  These are perhaps redundant with assert(),
	but I've never been a big fan of assert() (hard to set
	breakpoints on).  I'm open to persuasion for other approaches
	or modifications to this one.
	
	3) mysystem() (defined in mysystem.cpp) is currently simply a
	wrapper around C's system() to handle return codes, print
	out messages to the user, etc.  Eventually, it'll also
	print out the commands it's executing given an appropriate
	flag once I get around to adding some flag.
	
	4) Currently the binary is always named a.out.  Something else
	I need to add a flag for.
	
	5) stringutil.cpp contains a routine called glomstrings() that
	takes the number of strings and a varags list of char*
	pointers, mallocs the right amount of buffer space for
	them, glomst them all together, and returns the new string.
	Useful for building filenames and commands for mysystem().
	
	6) Factored the platform-decision stuff out of make/Makefile.base
	in order to use it in building the generated sources as well.
	
	7) The runtime directory structure is currently organized:
	
	chapel/
	runtime/
	etc/ -- Makefiles and such for building generated code
	include/ -- header files for generated code/runtime libs
	src/ -- source code for runtime libs

Modified files:
	chapel/compiler/: Makefile driver.cpp misc.cpp misc.h 
	chapel/make/: Makefile.base 
Added files:
	chapel/compiler/: FILES codegen.cpp codegen.h files.cpp files.h 
	                  mysystem.cpp mysystem.h stringutil.cpp 
	                  stringutil.h 
	chapel/make/: Makefile.platform 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: chplio.h chpltypes.h stdchpl.h 
	chapel/runtime/src/: .cvsignore Makefile chplio.c main.c 

---------------------------------------------------------------------------

03/25/04 10:46:20 -- bradc

Log message:
	This checkin adds some flags to help control the compilation
	process (1).  It also adds some better error messages when flags
	are used improperly (2). Inserted some tests to protect these
	error messages (3) and added a new (minor) test feature (4).
	I also hoisted some code out of the geysa.h file into more specific
	header files (5).
	
	(1) The new flags are:
	
	-o --output <exename> : specify the name of the final binary
	--savec  <dir>    : save the intermediate C in the specified dir
	--print-commands  : print the system() commands executed
	
	(2) The changes to how flags are handled are:
	
	* if a flag that requires an argument isn't followed by an argument,
	an appropriate error message is printed out.
	
	* if an unrecognized flag is encountered, an appropriate error message
	is printed out.
	
	* if the copyright flag is used, the usage() information isn't printed
	
	(3) The first tests!  I put these in a directory called compflags/ to
	test compiler options.  I also added a DIRS file to the root test
	directory to serve as a guide to the directories and what their
	intention is.
	
	(4) The new feature in the testing system is support for a
	LASTCOMPOPTS file, similar to the COMPOPTS file, but which
	follows the source filename argument.  Thus, the most
	general compile line will be:
	
	chpl <-compopts> <COMPOPTS> source.chpl <LASTCOMPOPTS>
	
	(5) The code hoisted out of geysa.h is as follows:
	
	chplalloc.h : memory allocation routines
	chpltypes.h : basic integer typedefs (uint64, etc.)
	extern.h    : EXTERN-related stuff
	version.h   : moved get_version() prototype here

Modified files:
	chapel/compiler/: arg.cpp codegen.cpp driver.cpp files.cpp 
	                  files.h geysa.h mysystem.cpp mysystem.h 
	                  version.h 
	chapel/test/: start_test sub_test 
Added files:
	chapel/compiler/: chplalloc.h chpltypes.h extern.h 
	chapel/test/: DIRS 
	chapel/test/compflags/bradc/badflagdash/: COMPOPTS declint.chk 
	                                          declint.chpl 
	chapel/test/compflags/bradc/badflagddash/: COMPOPTS declint.chk 
	                                           declint.chpl 
	chapel/test/compflags/bradc/copyright/: COMPOPTS declint.chk 
	                                        declint.chpl 
	chapel/test/compflags/bradc/missingargdash/: LASTCOMPOPTS 
	                                             declint.chk 
	                                             declint.chpl 
	chapel/test/compflags/bradc/missingargddash/: LASTCOMPOPTS 
	                                              declint.chk 
	                                              declint.chpl 

---------------------------------------------------------------------------

03/25/04 17:05:43 -- bradc

Log message:
	Incidental changes.  Did some work in starting to make header files
	stand more independently so that if one wanted to write code using
	the "AST" type, they could #include "ast.h" without having to worry
	so much about what it depended on.  This is by no means complete,
	but will be a lazy-evaluation background task.
	
	Also found that "echo -n" didn't work by default on the Suns, which
	created illegal dependence files, so reworked the Makefiles so that
	platforms could define their own ECHO target for use with echo -n
	(lazily, I only changed those echo commands in Makefiles that actually
	use -n...)

Modified files:
	chapel/compiler/: Makefile ast.h code.h codegen.cpp codegen.h 
	                  fa.h files.cpp fun.h list.h map.h misc.h 
	                  mysystem.cpp region.h stringutil.cpp sym.h 
	                  var.h 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.base Makefile.freebsd Makefile.linux 
	              Makefile.sun 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

03/26/04 11:45:53 -- bradc

Log message:
	Minor changes.  codegen is still off by default:
	
	1) fixed the generation of write() calls to use the type_info of its
	arguments in generating the routine name (previously it was
	hard-wired to integer64).
	
	2) changed the runtime library's write() implementation to take a
	format flag in expectation of this need down the road.
	
	3) added a clean_exit() routine to use in place of exit() that blows
	away the /tmp directory created by code generation (if it exists)
	and switched error routines over to using this routine.  Also
	added a catch of SIGINT that calls fail() and will similarly blow
	away the /tmp directory (should probably add more signals, but
	I'm too lazy to try and come up with a portable list of signals
	that we'd want to catch today.

Modified files:
	chapel/compiler/: codegen.cpp files.cpp files.h misc.cpp 
	chapel/runtime/include/: chplio.h chpltypes.h 
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

03/26/04 11:56:47 -- jplevyak (a.k.a. n10253)

Log message:
	Bug in comparison routine passed to qsort.

Modified files:
	chapel/third-party/dparser/d/: lr.c 

---------------------------------------------------------------------------

03/26/04 12:01:21 -- jplevyak (a.k.a. n10253)

Log message:
	Suppression file for use with the Boehm GC and valgrind vr 2.0.0

Added files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

03/26/04 14:15:38 -- bradc

Log message:
	Found some portability problems on the Sun with the Makefiles
	and regression tests, so fixed these.  Updated some other
	files.

Modified files:
	./: Makefile 
	chapel/make/: Makefile Makefile.platform 
	chapel/test/: DIRS start_test sub_test 
Added files:
	./: DIRS 
	chapel/runtime/: Makefile 
Removed files:
	./: structure.txt 
	chapel/make/: Makefile.gcc 

---------------------------------------------------------------------------

03/26/04 14:18:14 -- bradc

Log message:
	Never seem to have gotten this file checked in.

Added files:
	chapel/test/Logs/: .cvsignore 

---------------------------------------------------------------------------

03/26/04 15:02:02 -- bradc

Log message:
	Enabled the testing system to run binaries produced by the
	compiler by default when testing a directory.  Also added
	support for a new feature:  When a NOEXEC file is placed
	in a subdirectory of the testing system, the source files
	in that directory will only be compiled and the compiler's
	output will be diff'd against the expected output -- any
	generated executables will not be run.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/compflags/bradc/copyright/: NOEXEC 

---------------------------------------------------------------------------

03/26/04 15:28:01 -- bradc

Log message:
	Cleaned up the handling of literals for now.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

03/26/04 15:28:57 -- bradc

Log message:
	Added support for printing strings (string literals, at least).

Modified files:
	chapel/runtime/include/: chplio.h chpltypes.h 

---------------------------------------------------------------------------

03/26/04 15:29:31 -- bradc

Log message:
	Oops, I'm getting too fast.  This should've gone with the
	last checkin.

Modified files:
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

03/26/04 16:36:52 -- bradc

Log message:
	Fixed a bug in which running the compiler using a relative
	directory was breaking the "make" of the generated code.
	In doing so, turned up and fixed a subtle buffer overrun
	error that I'd missed previously (in the one place that
	I wasn't using the -- so far -- bulletproof "glomstrings()"
	function... :)

Modified files:
	chapel/compiler/: files.cpp 

---------------------------------------------------------------------------

03/31/04 19:01:09 -- jplevyak (a.k.a. n10253)

Log message:
	Added dominator computation a la Tarjan
	Added loop recognition a la modified Sreedhar-Gao-Lee Algorithm
	Added simple inlining
	Added interprocedural constant propogation
	Added new graph types:
	loops (procudural loops)
	rec (interprocedural loops)
	dom (dominators)
	calls (call graph)
	Added frequency estimation based on loop analysis
	Added the ability to annotate the graphs with frequency estimates.
	
	You may be wondering why I did procedural loop analysis instead
	of using the AST.  Well, in addition to being able to recognize
	loops constructed from goto and the like, I needed to do interprocedural
	loop recognition to handle recursion, and it is the same algorithm.
	
	Fixed a number of bugs in numeric coersion, constrol region nesting,
	SSU conversion, the grammars, etc.

Modified files:
	chapel/compiler/: Makefile TODO ast.h chpl.g clone.cpp clone.h 
	                  driver.cpp driver.h dump.cpp dump.h fa.cpp 
	                  fa.h fun.cpp fun.h geysa.h grammar.cpp 
	                  graph.cpp graph.h map.h num.h pdb.h pnode.cpp 
	                  pnode.h prelude.v region.h scope.h ssu.cpp v.g 
	                  valgrind.suppressions var.h vec.cpp vec.h 
Added files:
	chapel/compiler/: dom.cpp dom.h inline.cpp inline.h loop.cpp 
	                  loop.h 
	chapel/compiler/samples/: bug1.v const.v inline.v loop1.v 
	                          loop2.v loop_endless.v rec.v 

---------------------------------------------------------------------------

04/01/04 16:08:10 -- bradc

Log message:
	Updated the astlog example a bit to (1) get the log file in
	synch with, well, my latest version of the compiler (I still
	haven't merged in John's latest changes), and (2) now that
	we're looking for an executable to run, added the NOEXEC file
	to indicate that this test is only meant to be compiled, not
	run.

Modified files:
	chapel/test/Samples/ex1-astlog/: .cvsignore astlog1.chk 
Added files:
	chapel/test/Samples/ex1-astlog/: NOEXEC 

---------------------------------------------------------------------------

04/01/04 17:07:05 -- bradc

Log message:
	Broke version number stuff out into its own header file because
	the way I previously set it up, everything got recompiled
	whenever BUILD_NUMBER changed.  Now only version.cpp will be.

Modified files:
	chapel/compiler/: version.cpp version.h 
Added files:
	chapel/compiler/: version_num.h 

---------------------------------------------------------------------------

04/02/04 14:09:28 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in flow analysis which was causing the vec.chpl test to fail.

Modified files:
	chapel/compiler/: driver.cpp fa.cpp 

---------------------------------------------------------------------------

04/02/04 16:09:32 -- bradc

Log message:
	Added a new 0-argument option to the testing system: -valgrind
	When used, the compiler is run under valgrind with the -q option
	and the valgrind.suppressions file in the compiler directory.
	Errors reported by valgrind will be part of the compilation output
	and therefore mismatch the expected output by definition.
	
	Also added -h/-help options.  It seems before that help was printed
	when there were an odd number of arguments (!?).  I'd never noticed
	this before.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/02/04 16:20:00 -- bradc

Log message:
	Turned on codegen (and therefore binary generation) by default.
	Use the --no-codegen flag to suppress code generation.
	
	Also switched the building of generated code to use gmake
	rather than make.
	
	Checked in a few trivial tests in test/trivial/bradc to test
	end-to-end behavior.

Modified files:
	chapel/compiler/: driver.cpp files.cpp 
Added files:
	chapel/test/trivial/bradc/: declprintint.chk declprintint.chpl 
	                            printstring.chk printstring.chpl 

---------------------------------------------------------------------------

04/02/04 16:29:03 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed issue with assuming the suffix was ".chpl"

Modified files:
	chapel/compiler/: driver.cpp files.cpp 

---------------------------------------------------------------------------

04/05/04 10:41:27 -- bradc

Log message:
	Removed a debug printing line that I accidentally checked in.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

04/05/04 13:22:34 -- jplevyak (a.k.a. n10253)

Log message:
	Add Sym::internal field which is defined in internal.h which covers
	internal non-primitive types (currently Domain and Sequence).
	Print out the internal type in dump.html
	Handle toggle environment variables in arg.c

Modified files:
	chapel/compiler/: TODO arg.cpp ast.cpp clone.cpp driver.cpp 
	                  dump.cpp geysa.h sym.h v.g 
Added files:
	chapel/compiler/: internal.h 

---------------------------------------------------------------------------

04/05/04 13:50:38 -- jplevyak (a.k.a. n10253)

Log message:
	Add simple parsing test cases

Modified files:
	chapel/test/: sub_test 
Added files:
	chapel/test/parsing/jplevyak/: COMPOPTS NOEXEC extern.chk 
	                               extern.v for1.chk for1.v for2.chk 
	                               for2.v literal.chk literal.v 
	                               mat1.chk mat1.chpl module.chk 
	                               module.v tuples.chk tuples.v 
	                               vec.chk vec.chpl 

---------------------------------------------------------------------------

04/05/04 15:52:28 -- jplevyak (a.k.a. n10253)

Log message:
	Fix building of concrete types so that instance variables point
	to the concrete type instead of the abstract one!

Modified files:
	chapel/compiler/: clone.cpp 

---------------------------------------------------------------------------

04/09/04 15:12:01 -- bradc

Log message:
	Fixed a bug that Shannon found in which I wasn't quoting
	the -compopts and -execopts arguments, causing problems
	when they were more than a single string.  This change
	should re-enable the ability to do things like:
	
	start_test -compopts "--savec myoutputdir"

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

04/09/04 17:20:17 -- bradc

Log message:
	Fixed two simple driver problems:
	
	(1) changed the search for the input file's extension to use
	strrchr so that relative paths including .. will work properly.
	
	(2) moved code generation after the HTML dump so that if codegen
	fails requested HTML dumps won't be squelched.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

04/09/04 18:09:50 -- bradc

Log message:
	Wrote a bunch of simple programs that declare and initialize
	a 1D domain and array using a variety of notations to serve
	as initial codes.  Generated expected output by hand which
	(if I got them all right) approximates what we might expect
	from the compiler (and might need to be updated later if I
	got them wrong).
	
	Similarly, maybe some of these programs are illegal for one
	reason or another.  They reflect my current understanding
	of how one might program such things, so to the extent
	that they cause problems, we should discuss which should
	perhaps be illegal, result in compile errors, etc.

Added files:
	chapel/test/trivial/bradc/arrinit/: NOTEST README 
	                                    arrinit.notype.notype.chk 
	                                    arrinit.notype.notype.chpl 
	                                    arrinit.notypep.notype.chk 
	                                    arrinit.notypep.notype.chpl 
	                                    arrinit.notypep.notypeind.chk 
	                                    arrinit.notypep.notypeind.chpl 
	                                    arrinit.notypep.notypeind2.chk 
	                                    arrinit.notypep.notypeind2.chpl 
	                                    arrinit.notypep.typepr.chk 
	                                    arrinit.notypep.typepr.chpl 
	                                    arrinit.notypep.typeprind.chk 
	                                    arrinit.notypep.typeprind.chpl 
	                                    arrinit.notypep.typeprind2.chk 
	                                    arrinit.notypep.typeprind2.chpl 
	                                    arrinit.type.notype.chk 
	                                    arrinit.type.notype.chpl 
	                                    arrinit.typep.notype.chk 
	                                    arrinit.typep.notype.chpl 
	                                    arrinit.typep.type.chk 
	                                    arrinit.typep.type.chpl 
	                                    arrinit.typep.typeind.chk 
	                                    arrinit.typep.typeind.chpl 
	                                    arrinit.typep.typepr.chk 
	                                    arrinit.typep.typepr.chpl 

---------------------------------------------------------------------------

05/03/04 11:52:47 -- bradc

Log message:
	Took a new sweep through the simple arrinit codes to update based
	on new requirement that domains and arrays must be identified as
	such at declaration time.

Modified files:
	chapel/test/trivial/bradc/arrinit/: README 
	                                    arrinit.notype.notype.chpl 
	                                    arrinit.notypep.notype.chpl 
	                                    arrinit.notypep.notypeind.chpl 
	                                    arrinit.notypep.notypeind2.chpl 
	                                    arrinit.notypep.typepr.chpl 
	                                    arrinit.notypep.typeprind.chpl 
	                                    arrinit.notypep.typeprind2.chpl 
	                                    arrinit.type.notype.chpl 
	                                    arrinit.typep.notype.chpl 
Added files:
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.nodom.chpl 
	                                    arrinit.notype.noelem.chpl 
	                                    arrinit.notypes.notype.chpl 
	                                    arrinit.types.notype.chpl 

---------------------------------------------------------------------------

05/03/04 12:04:00 -- jplevyak (a.k.a. n10253)

Log message:
	Change the system directory option letter since it conflicts with
	the (preexisting) -D for parser debugging.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

05/03/04 12:48:58 -- bradc

Log message:
	Some small changes that have been festering in my directory
	for awhile:
	
	(1) added support for writeln() in addition to write() as
	our placeholder output routines.
	
	(2) added some support for codegen-ing parenthesized expressions.

Modified files:
	chapel/compiler/: ast.h codegen.cpp prelude.chpl
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/trivial/bradc/: declprintint2.chk declprintint2.chpl 
	                            pareninit.chk pareninit.chpl 

---------------------------------------------------------------------------

05/03/04 12:53:43 -- bradc

Log message:
	Did an abort partway through the last checkin, and so some mods
	in compiler/ weren't reflected in the log file.  The files that
	changed there were: ast.h, codegen.cpp, and prelude.chpl.
	Modified the CVSLOG file by hand to reflect this (ugh!).

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

05/03/04 13:01:43 -- bradc

Log message:
	Changed some of my flags (--nocodgen, --print-commands) from
	toggles to "set true" flags to avoid problems with double-
	toggling them via an environment variable (as that seems like
	the preferable semantics for these).

Modified files:
	chapel/compiler/: driver.cpp mysystem.cpp 

---------------------------------------------------------------------------

05/04/04 19:25:23 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug with trailing context (use to handle 1..n)

Modified files:
	chapel/third-party/dparser/d/: lex.c parse.c 

---------------------------------------------------------------------------

05/04/04 19:32:42 -- jplevyak (a.k.a. n10253)

Log message:
	updated tests for changes in the grammar and parser.

Modified files:
	chapel/test/parsing/jplevyak/: literal.chk literal.v mat1.chk 
	                               tuples.chk 

---------------------------------------------------------------------------

05/05/04 13:00:24 -- jplevyak (a.k.a. n10253)

Log message:
	Begin support for incremnetalization: cdb.{h,cpp} save cloning info
	between compiles
	Fixed code which maps AST -> flow analysis information
	Added support for relative system_dir paths in dump.cpp
	Added support for cloning of data structures dependant on
	the typing of other data structures (currently 1 level)
	Fixed several bugs in type inference discovered when implementing above

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp clone.cpp clone.h 
	                  dump.cpp fa.cpp fa.h fa_extras.cpp fun.cpp 
	                  fun.h pnode.h sym.h v.g vec.cpp 
Added files:
	chapel/compiler/: cdb.cpp cdb.h 

---------------------------------------------------------------------------

05/05/04 16:20:56 -- jplevyak (a.k.a. n10253)

Log message:
	updated TODO list
	now I just need to do all those things :)

Modified files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

05/07/04 11:18:23 -- bradc

Log message:
	Found that the path to the javascript stuff in the HTML dump
	was still not working for compiler invocations like:
	
	compiler/chpl -t foo.chpl
	
	so took a pass at fixing it.  I've tested the following four
	variations and they all seem to be working:
	
	/users/.../chpl -t foo.chpl
	compiler/chpl -t foo.chpl
	chpl -t foo.chpl (where chpl is in cwd)
	./chpl -t foo.chpl
	
	Hopefully I haven't broken any other cases.

Modified files:
	chapel/compiler/: dump.cpp 

---------------------------------------------------------------------------

05/07/04 17:05:01 -- bradc

Log message:
	Started working on a script that will perform nightly regressions.

Modified files:
	chapel/test/: start_test 
Added files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/07/04 17:20:43 -- bradc

Log message:
	Oops, accidentally introduced a typo in the start_test script.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/07/04 17:48:52 -- bradc

Log message:
	Added support for a valgrind run to the nightly script.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/10/04 09:10:50 -- jplevyak (a.k.a. n10253)

Log message:
	Add handling of value "clases" as per David's mail to TODO list
	Fix bug in setter path computation flow analysis

Modified files:
	chapel/compiler/: TODO fa.cpp vec.cpp 

---------------------------------------------------------------------------

05/10/04 10:59:22 -- jplevyak (a.k.a. n10253)

Log message:
	Added new log for flow analysis testing
	Added 3 new test cases for flow analysis using new log
	Increased support for .v files in test/sub_test

Modified files:
	chapel/compiler/: ast.cpp driver.cpp fa.h fa_extras.cpp log.h 
	chapel/test/: start_test 
Added files:
	chapel/test/flowanalysis/jplevyak/: CATFILES CLEANFILES COMPOPTS 
	                                    NOEXEC cs1.chk cs1.v cs2.chk 
	                                    cs2.v cs3.chk cs3.v 

---------------------------------------------------------------------------

05/10/04 16:16:40 -- jplevyak (a.k.a. n10253)

Log message:
	Extend flow analyis to N levels of complex data structures.

Modified files:
	chapel/compiler/: fa.cpp 

---------------------------------------------------------------------------

05/10/04 17:50:26 -- bradc

Log message:
	Updated nightly test script to compare each night's results
	against the previous night's, to mail the results of the
	run out (currently just to me, but once everything's
	debugged, to chapel_dev), and to append stats on the run
	to a file that can be gnuplotted.

Modified files:
	chapel/test/Bin/: nightly 

Log message:
	Updated nightly test script to compare each night's results
	against the previous night's, to mail the results of the
	run out (currently just to me, but once everything's
	debugged, to chapel_dev), and to append stats on the run
	to a file that can be gnuplotted.
	
	Also, added a few .cvsignore files to ignore files that
	are currently left due to broken tests.

Added files:
	chapel/test/flowanalysis/jplevyak/: .cvsignore 
	chapel/test/parsing/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

05/11/04 13:57:56 -- bradc

Log message:
	Added generation of graph showing regression status.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/11/04 14:20:14 -- bradc

Log message:
	Added a new feature to the testing scripts -- if a subdirectory
	contains an executable PREDIFF script, that script will be run
	prior to performing the diff for each test in the directory.
	The name of the test being run and the name of the log file
	being diffed will be passed to the scripts as parameters.
	
	Added a use of this to John's flowanalysis directory which
	previously printed things out in a platform-specific order.
	The PREDIFF script in that directory sorts the log file
	prior to doing the diff (and compares against new, sorted
	.chk files) to ensure that the test's result is not influenced
	by this platform-specific order.

Modified files:
	chapel/test/: start_test sub_test 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 
Added files:
	chapel/test/flowanalysis/jplevyak/: PREDIFF 

---------------------------------------------------------------------------

05/12/04 12:19:34 -- bradc

Log message:
	Introducing a purposeful bug to see if the nightly regression
	testing works in the presence of a compiler build failure.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

05/12/04 12:37:19 -- bradc

Log message:
	Removed purposeful bug in driver.cpp and checking in new
	nightly test script that handles build errors gracefully.

Modified files:
	chapel/compiler/: driver.cpp 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/13/04 10:32:15 -- bradc

Log message:
	Made the testing system exit with an error if valgrind is
	not available.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/13/04 11:22:46 -- bradc

Log message:
	Made nightly regression runs more resilient in the face of
	failures (for example, last night valgrind was missing,
	making the reported results pretty inaccurate).  Also
	added support for a debug mode so that I wouldn't have
	to mess up the running tally of statistics every time
	the testing system failed.

Modified files:
	chapel/test/Bin/: nightly 
Added files:
	chapel/test/trivial/bradc/: .cvsignore 

---------------------------------------------------------------------------

05/14/04 10:03:21 -- bradc

Log message:
	I believe the nightly regressions are now working well
	enough that it's safe to send the results to chapel_dev
	without bothering anyone, so I turned that on by
	default.  This should result in a regressions test
	status message showing up in the middle of the night
	every night.
	
	You can see the running tally of tests run, tests passing,
	and tests passing with valgrind at:
	
	http://insidecray.mw.cray.com/~bradc/chapel.html
	
	It's not all that interesting now, but should look good
	as we continue to add tests.  John, if you're reading
	this far, I haven't yet had a chance to look into the
	one valgrind run that's currently failing to see if
	it's a real problem or something else needing suppressing.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/19/04 17:31:05 -- jplevyak (a.k.a. n10253)

Log message:
	Remove builtin complex (will be implemented in standard header)
	and updated tests.

Modified files:
	chapel/compiler/: ast.cpp builtin_symbols.h chpl.g chpltypes.h 
	                  prelude.chpl prelude.v sym.h vec.cpp vec.h 
	chapel/compiler/samples/: sample.chpl 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 

---------------------------------------------------------------------------

05/25/04 16:08:56 -- bradc

Log message:
	Making sure that we blow away /tmp directories on segfaults.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

05/25/04 16:23:07 -- bradc

Log message:
	Put in code so that if we try to codegen something that we
	don't understand, an internal error is thrown and we don't
	bother trying to compile the generated C code.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

05/25/04 17:15:07 -- bradc

Log message:
	Added initial code generation support for conditionals.  Added
	a simple test to try different conditional idioms.  Also added
	short-term support for the unary negation op.
	
	Touched up support for seg faults slightly from my previous
	version which was laid in in a rush a week or two ago.
	
	In writing my conditional code, found what appears to be a bug
	with empty strings on linux -- when strlen is taken of their
	compile-time representation, it seg faults.  I assume that this
	is due to our storage of them as opposed to a bug in strlen,
	but filed this as a placeholder.  It seemed I could get around
	it by writing my own strlen that checked against NULL and the
	empty string before sending the string in to the real strlen(),
	but this seems bogus, so I'm not checking that code in.  I
	did check the bug in though (test/trivial/bradc/printempty.chpl.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/: conditional.chk conditional.chpl 
	                            printempty.chk printempty.chpl 

---------------------------------------------------------------------------

05/26/04 11:39:10 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed two bugs which were causing problems in the front end.
	First, cannonicalize string was returning NULL in some cases.
	Second, vector expansion was not clearing the new space correctly.

Modified files:
	chapel/compiler/: map.h vec.cpp 

---------------------------------------------------------------------------

05/26/04 11:47:16 -- jplevyak (a.k.a. n10253)

Log message:
	Missing semi-colon

Modified files:
	chapel/test/trivial/bradc/: printempty.chpl 

---------------------------------------------------------------------------

05/26/04 14:17:01 -- jplevyak (a.k.a. n10253)

Log message:
	new supression in boehm GC

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

05/26/04 16:09:39 -- jplevyak (a.k.a. n10253)

Log message:
	New data structure for handling data polymorophism which is simpler and
	has better termination properites.

Modified files:
	chapel/compiler/: fa.cpp fa.h vec.cpp 

---------------------------------------------------------------------------

05/27/04 14:41:54 -- bradc

Log message:
	Changed the test system to use .good files to store the expected
	output rather than .chk files to avoid the common prefix conflict
	with the .chpl files.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/Samples/ex1-astlog/: astlog1.good 
	chapel/test/Samples/ex2-notest/: illegal.good 
	chapel/test/Samples/ex3-fails/: intendedToFail.good 
	chapel/test/compflags/bradc/badflagdash/: declint.good 
	chapel/test/compflags/bradc/badflagddash/: declint.good 
	chapel/test/compflags/bradc/copyright/: declint.good 
	chapel/test/compflags/bradc/missingargdash/: declint.good 
	chapel/test/compflags/bradc/missingargddash/: declint.good 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	chapel/test/parsing/jplevyak/: extern.good for1.good for2.good 
	                               literal.good mat1.good 
	                               module.good tuples.good vec.good 
	chapel/test/trivial/bradc/: conditional.good declprintint.good 
	                            declprintint2.good pareninit.good 
	                            printempty.good printstring.good 
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.notype.good 
	                                    arrinit.notypep.notype.good 
	                                    arrinit.notypep.notypeind.good 
	                                    arrinit.notypep.notypeind2.good 
	                                    arrinit.notypep.typepr.good 
	                                    arrinit.notypep.typeprind.good 
	                                    arrinit.notypep.typeprind2.good 
	                                    arrinit.type.notype.good 
	                                    arrinit.typep.notype.good 
	                                    arrinit.typep.type.good 
	                                    arrinit.typep.typeind.good 
	                                    arrinit.typep.typepr.good 
Removed files:
	chapel/test/Samples/ex1-astlog/: astlog1.chk 
	chapel/test/Samples/ex2-notest/: illegal.chk 
	chapel/test/Samples/ex3-fails/: intendedToFail.chk 
	chapel/test/compflags/bradc/badflagdash/: declint.chk 
	chapel/test/compflags/bradc/badflagddash/: declint.chk 
	chapel/test/compflags/bradc/copyright/: declint.chk 
	chapel/test/compflags/bradc/missingargdash/: declint.chk 
	chapel/test/compflags/bradc/missingargddash/: declint.chk 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 
	chapel/test/parsing/jplevyak/: extern.chk for1.chk for2.chk 
	                               literal.chk mat1.chk module.chk 
	                               tuples.chk vec.chk 
	chapel/test/trivial/bradc/: conditional.chk declprintint.chk 
	                            declprintint2.chk pareninit.chk 
	                            printempty.chk printstring.chk 
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.notype.chk 
	                                    arrinit.notypep.notype.chk 
	                                    arrinit.notypep.notypeind.chk 
	                                    arrinit.notypep.notypeind2.chk 
	                                    arrinit.notypep.typepr.chk 
	                                    arrinit.notypep.typeprind.chk 
	                                    arrinit.notypep.typeprind2.chk 
	                                    arrinit.type.notype.chk 
	                                    arrinit.typep.notype.chk 
	                                    arrinit.typep.type.chk 
	                                    arrinit.typep.typeind.chk 
	                                    arrinit.typep.typepr.chk 

---------------------------------------------------------------------------

05/27/04 16:04:20 -- jplevyak (a.k.a. n10253)

Log message:
	fix bug with handling of references
	minor cleanups

Modified files:
	chapel/compiler/: TODO fa.cpp 

---------------------------------------------------------------------------

06/01/04 13:03:36 -- jplevyak (a.k.a. n10253)

Log message:
	most of test/trivial/bradc/arrinit now "compile"

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h chpl.g 

---------------------------------------------------------------------------

06/01/04 14:33:58 -- jplevyak (a.k.a. n10253)

Log message:
	fixup tests to match new grammar for parsing trivial/bradc

Modified files:
	chapel/compiler/: chpl.g 
	chapel/test/parsing/jplevyak/: mat1.good 

---------------------------------------------------------------------------

06/01/04 16:50:47 -- bradc

Log message:
	Fixed a bug in the testing system in which -startdir was only
	causing subdirectories of the named directory to be examined,
	not the directory itself.  This particularly caused problems
	when a leaf directory was specified, which would cause no
	tests to be run since it had no subdirectories.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/01/04 17:20:28 -- jplevyak (a.k.a. n10253)

Log message:
	All of trivial/bradc/arrinit now parse.
	There are typing issues which I am going to work on next.

Modified files:
	chapel/compiler/: chpl.g prelude.chpl 
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/02/04 11:26:41 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for value types.
	Modified format of internal errors to work with gdb's compile mode

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h builtin_symbols.h chpl.g 
	                  codegen.cpp misc.cpp prelude.chpl prelude.v 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 

---------------------------------------------------------------------------

06/02/04 13:20:01 -- bradc

Log message:
	Improved dependences for *.g.d_parser.o files.  These are
	dependent on geysa.h and all the things that it includes,
	but this dependence wasn't reflected in the Makefiles due
	to the challenges in listing the dependences of a dynamically-
	generated source file.
	
	The approach I took was to run g++ -MM on geysa.h, fudging
	the output format so that it defines a Makefile variable
	giving all the include files it includes rather than
	generating a standard dependence rule (which would have
	had no effect since geysa.h would be considered up-to-date
	since there's no rule to rebuild it).  Then, by giving
	this variable name in the rule to build *.g.d_parser.o,
	it will be recompiled whenever the any of the component
	header files change.  This should take care of most of
	the recent cases where a "make clean" was required.  If
	you come across more (and can reproduce them), please
	let me know.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 

---------------------------------------------------------------------------

06/02/04 13:24:46 -- bradc

Log message:
	Changed the sub_test script to remove the ihgfedcba from
	the generated output files.  This was originally designed
	by the ZPL implementor to avoid name conflicts, but my
	suspicion is that those name conflicts aren't a real problem
	and that the simpler filenames are less confusing.  The
	result is that the output filenames are one of:
	
	testname.comp.out.tmp
	testname.exec.out.tmp
	
	depending on whether the test was compiled only, or was
	compiled and executed.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/02/04 16:09:23 -- bradc

Log message:
	Found a bug in my previous check-in -- in trying to minimize
	redundancy I put in an assumption that the user would have
	necessarily run "make depend".  Took this out by re-adding in
	the explicit dependence that causes make_prims to be run before
	compiling the output of the v or chpl grammar files.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

06/02/04 16:25:06 -- bradc

Log message:
	Found that I never could get used to the date format
	that was used by the ZPL folks in their CVS system,
	so switched to a more standard format.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

06/03/04 09:39:35 -- bradc

Log message:
	Reordered some actions in sub_test -- previously, if we
	successfully built a binary but the .good file didn't
	exist, we wouldn't bother running the binary.  I switched
	the order around so that we'd run the binary (putting
	its output in the *.exec.out.tmp file) then complain
	about the missing .good file just before executing the
	diff.  This allows us to inspect the output that was
	generated to consider copying it into the .good file.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/03/04 12:03:29 -- bradc

Log message:
	Added support for writing multiple expressions in a
	call to write()/writeln().  For example:
	
	write("The current value of n is: ", n,
	"  the old value was: ", oldn);

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/arrinit/: .cvsignore 
	chapel/test/trivial/bradc/write/: .cvsignore writen.chpl 
	                                  writen.good writetwo.chpl 
	                                  writetwo.good 

---------------------------------------------------------------------------

06/03/04 15:07:18 -- shannon

Log message:
        Implemented code generation of binary operators
        and implemented tests.  Used a table mapping of
        AST representations of the operators to their
        corresponding representation in C.  Initial
        mechanisms for the handling of operators not
        implemented in C are present but not currently
        in use.

Modified files:
        chapel/compiler/: codegen.cpp 
Added files:
        chapel/test/trivial/shannon/: .cvsignore arithmetic_ops.chpl 
                                      arithmetic_ops.good 
                                      bitwise_ops.chpl bitwise_ops.good 
                                      equality_ops.chpl 
                                      equality_ops.good 
                                      relational_ops.chpl 
                                      relational_ops.good 
---------------------------------------------------------------------------

06/03/04 15:31:54 -- shannon

Log message:
	Didn't have RCS in path so edited CVSLOG by hand to reflect changes.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

06/04/04 12:44:43 -- jplevyak (a.k.a. n10253)

Log message:
	trivial/bradc/arrinit now produces (reasonably) correct types
	for domains and arrays.  There are some limitations, in particular
	domains initialized from sequences are not converted into domains.
	This will be corrected when the new function lookup code is implemented.
	
	Note: there are several new AST nodes.  These include
	AST_array_descriptor, AST_domain and AST_cross_product.
	
	Again, the implementation of these codes is incomplete pending the
	new function lookup code.  It is sufficient for the test cases
	but likely little else.  If you want a particular test case to work
	in the near term, tell me and I'll see if I can finess it.

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h builtin_symbols.h chpl.g 
	                  fa.cpp prelude.chpl prelude.v sym.h 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	chapel/test/parsing/jplevyak/: mat1.good 

---------------------------------------------------------------------------

06/04/04 12:47:47 -- bradc

Log message:
	Added support for easily running the chpl compiler
	within gdb via a --gdb flag.  This is designed for
	cases when you are working with a long set of compile
	line flags and suddenly want to run it within gdb:
	
	lotus% chpl --savec output --print-commands ../test/foo.chpl
	fail: seg fault
	
	Typically, to debug this, you'd have to run "gdb chpl"
	and then within gdb cut and paste your whole command-line
	into the run command:
	
	(gdb) run --savec output --print-commands ../test/foo.chpl
	
	With this change, you can now run your original
	command line again, adding --gdb to it somewhere:
	
	lotus% chpl --savec output --print-commands ../test/foo.chpl --gdb
	
	This will cause the chpl compiler to launch a gdb
	session with the arguments automatically set up to
	be those you included on the command line (except
	for any occurrences of the --gdb flag, of course).
	Thus, upon running the compiler, you'll be whisked
	into gdb, and upon getting a gdb prompt, you can
	simply type run:
	
	(gdb) run
	
	You can use the "show args" command to verify what
	the arguments being used are.  Obviously, you can
	override the arguments by hand simply by specifying
	them with the "run" command or using the "set args"
	command.
	
	The other benefit of debugging the compiler in this
	mode is that it will set up hooks for the "run" and
	"quit" commands such that any /tmp directories that
	the compiler creates during the debugging session
	will be deleted when the program is re-run or you
	quit out of gdb.
	
	All this work was developed under gdb v5.3.  If you
	have a different version and have conflicts with
	what's been done here, let me know and we can look
	into supporting your version.
	
	In making this change, some other changes occurred
	as well:
	
	* Changed all instances of exit() to clean_exit(),
	which cleans up the compiler state before exiting.
	exit() should not be used anywhere in the program
	(but I haven't yet gone so far as to #define it
	out in a header file yet).
	
	* Made our current argument parsing routines make
	copies of the arguments that they are working
	with because they are fairly destructive with
	them (and we want to pass them on to gdb in their
	original form).
	
	* Previously, catching of SEGV and INT signals
	was only done during codegen.  I switched this
	to cover the whole program because it seems
	right and because Chapel's temp directory may
	now get created earlier, due to the --gdb flag.
	
	* Added a test to see that the --gdb command
	causes gdb to be fired up.  In doing so, added
	a new capability to the testing system: a
	COMPSTDIN file can be added to a test directory
	to specify an input file to be piped in as stdin
	during the compile invocation.  As need warrants
	it, I can add a similar feature, EXECSTDIN, for
	the invocation of the executable.

Modified files:
	chapel/compiler/: arg.cpp arg.h codegen.cpp driver.cpp files.cpp 
	                  files.h misc.cpp misc.h 
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/compflags/bradc/gdbddash/: .cvsignore COMPOPTS 
	                                       COMPSTDIN NOEXEC 
	                                       declint.chpl declint.good 
	                                       gdb.in 

---------------------------------------------------------------------------

06/04/04 13:17:49 -- jplevyak (a.k.a. n10253)

Log message:
	Fixes for ~shannon/CHAPEL/chapel/test/trivial/shannon/assignment_expr.chpl

Modified files:
	chapel/compiler/: prelude.chpl 

---------------------------------------------------------------------------

06/04/04 13:29:34 -- jplevyak (a.k.a. n10253)

Log message:
	exponentiation now supported.
	note: constant folding is not yet done for exponentiation... should it be?

Modified files:
	chapel/compiler/: TODO chpl.g codegen.cpp prelude.chpl 
	                  prim_data.dat 

---------------------------------------------------------------------------

06/04/04 13:36:25 -- jplevyak (a.k.a. n10253)

Log message:
	fix mod, left and right shift

Modified files:
	chapel/compiler/: prelude.chpl prim_data.dat 

---------------------------------------------------------------------------

06/04/04 13:45:17 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed up &&.

Modified files:
	chapel/compiler/: chpl.g 

---------------------------------------------------------------------------

06/04/04 16:44:28 -- bradc

Log message:
	Got some extremely initial support for code generating
	domains in.  It's fairly crufty and is hardwired to 1D
	domains in  several places, but it makes some simple
	1D domain declarations work correctly, and seems like
	a reasonable stopping place to synch into before the
	weekend.
	
	This change also involved some minor side changes:
	
	* Turned on debugging and a bunch of warning flags for
	the compilation of the runtime and compiler-generated
	sources -- eventually, we'll want a more interesting
	mechanism for turning these on and off (like a -g
	flag in the compiler at minimum), but it's a start.
	
	* Made the gcc commands issued by the compiler via its
	generated Makefile show up on the console when the
	--show-commands flag is used.

Modified files:
	chapel/compiler/: Makefile codegen.cpp files.cpp 
	chapel/runtime/: Makefile 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: chplio.h stdchpl.h 
	chapel/runtime/src/: Makefile chplio.c 
Added files:
	chapel/compiler/: datatype.cpp datatype.h 
	chapel/runtime/etc/: Makefile.macros 
	chapel/runtime/include/: domain.h 
	chapel/runtime/src/: domain.c 
	chapel/test/trivial/bradc/: declprintdom.chpl declprintdom.good 

---------------------------------------------------------------------------

06/04/04 17:11:52 -- jplevyak (a.k.a. n10253)

Log message:
	forgot to checkin the parsing .good files corresponding to the parser
	changes... oops.

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/07/04 12:44:53 -- bradc

Log message:
	Made codegen handle dead variables cleanly.  Added a test
	to make sure this works.

Modified files:
	chapel/compiler/: codegen.cpp 
	chapel/test/trivial/bradc/: .cvsignore 
Added files:
	chapel/test/trivial/bradc/: deadvar.chpl deadvar.good 

---------------------------------------------------------------------------

06/07/04 17:55:41 -- bradc

Log message:
	Added initial support for code generation of functions and
	inserted a few tests to pin down this behavior.
	
	In order to make this work, I had to generate function
	prototypes at the top of the code because (a) we
	currently generate functions in a nondeterministic
	order such that functions won't necessarily be defined
	in the generated code before their calls, even if the
	user's code has the definition before the use, and
	(b) the current language concept allows functions to be
	called before they're used, so even if code generation
	followed the user's code directly, a prototype could
	still be required.
	
	I made code generation create two new header files to
	support these prototypes -- one that gives the external
	interface for the .c file (foo.h) and a second that
	contains internal prototypes for the .c file -- ones
	that are only meant to be included by the .c file itself,
	and not external clients (foo-internal.h).
	
	A few other minor changes that are going in with this:
	
	* I'd been using my glomstrings() in a degenerate way to
	copy strings -- glomstrings(1, stringToCopy) -- I
	wrapped this in an explicit copystring() function to
	make the code more readable.
	
	* Updated the compiler/FILES file to mention the new
	datatype.c file that I added yesterday.

Modified files:
	chapel/compiler/: FILES arg.cpp codegen.cpp driver.cpp files.cpp 
	                  files.h prelude.chpl stringutil.cpp 
	                  stringutil.h 
Added files:
	chapel/test/trivial/bradc/functions/: .cvsignore onearg.chpl 
	                                      onearg.good 
	                                      usebeforedef.chpl 
	                                      usebeforedef.good 

---------------------------------------------------------------------------

06/08/04 10:11:31 -- bradc

Log message:
	Added a new Share/ directory to the test system which will not
	be run by default when start_test is run.  The intention of
	this directory is to share tests with each other via CVS so
	that we don't have to deal with cutting and pasting example
	programs into and out of email, and so that John won't have
	to log into a Cray machine to see files in our personal
	directories.
	
	Currently, I haven't put any structure in place under the
	Share directory -- if the idea proves to be useful and
	popular and full of more tests than we can keep track of,
	then we might imagine a structure in which subdirectories
	were used to indicate the author of the test and/or the
	person that the test is being published for.
	
	I'm checking a few codes into the Share/ directory for now
	that I'll email John about in a bit.

Modified files:
	chapel/test/: start_test 
Added files:
	chapel/test/Share/: chain.chpl mutrec.chpl noargs.chpl 

---------------------------------------------------------------------------

06/08/04 11:11:56 -- jplevyak (a.k.a. n10253)

Log message:
	noarg.chpl now gets through parser and type checking... though not codegen

Modified files:
	chapel/compiler/: TODO chpl.g 

---------------------------------------------------------------------------

06/08/04 11:20:15 -- bradc

Log message:
	Implemented variables at the file scope of the chapel input
	file as global variables in the generated C code rather
	than local variables to the _init() procedure, as had been
	done previously.  These should be made static by default,
	but this checkin doesn't address that issue.  Added a test
	to lock in this behavior.
	
	Broke code related to code generating functions into a file
	called cg_funs.cpp.  As Shannon and I move forward with
	code generation, we should continue to make cg_*.cpp/h files
	to avoid making codegen too monolithic and having to wrestle
	with bad CVS merges very often.

Modified files:
	chapel/compiler/: FILES Makefile codegen.cpp codegen.h 
Added files:
	chapel/compiler/: cg_funs.cpp cg_funs.h 
	chapel/test/Share/: .cvsignore 
	chapel/test/trivial/bradc/functions/: globalref.chpl 
	                                      globalref.good 

---------------------------------------------------------------------------

06/08/04 11:30:30 -- shannon

Log message:
	Implemented further testing of binary operator
	code generation with the addition of four tests.
	These files test the assignment operators such
	as "+=", as well as the "&&", "<<", and ">>"
	operators.
	
	Also cleaned up my prior tests using the new
	functionality of write() and writeln().
	Added further testing of boundary conditions.

Modified files:
	chapel/test/trivial/shannon/: arithmetic_ops.chpl 
	                              bitwise_ops.chpl bitwise_ops.good 
	                              equality_ops.chpl 
	                              equality_ops.good 
	                              relational_ops.chpl 
	                              relational_ops.good 
Added files:
	chapel/test/trivial/shannon/: assignment_expr.chpl 
	                              assignment_expr.good 
	                              bitwise_assignment.chpl 
	                              bitwise_assignment.good 
	                              logical_and.chpl logical_and.good 
	                              shift_ops.chpl shift_ops.good 

---------------------------------------------------------------------------

06/08/04 11:45:45 -- jplevyak (a.k.a. n10253)

Log message:
	Fix test/Share/mutrec.chpl

Modified files:
	chapel/compiler/: fun.cpp 

---------------------------------------------------------------------------

06/08/04 13:17:45 -- bradc

Log message:
	Got code generation for zero-argument functions working.
	Added a test to check this behavior and removed the
	sample from the Share/ directory.  Also changed instances
	of writeln("") and write("\n") to writeln() in tests
	that used these other idioms (and weren't testing
	that they worked).

Modified files:
	chapel/compiler/: cg_funs.cpp codegen.cpp datatype.cpp 
	                  datatype.h 
	chapel/test/trivial/bradc/: conditional.chpl 
	chapel/test/trivial/bradc/functions/: globalref.chpl 
	chapel/test/trivial/shannon/: arithmetic_ops.chpl 
	                              bitwise_assignment.chpl 
	                              bitwise_ops.chpl equality_ops.chpl 
	                              relational_ops.chpl shift_ops.chpl 
Added files:
	chapel/test/trivial/bradc/functions/: noargs.good 
Removed files:
	chapel/test/Share/: noargs.chpl 

---------------------------------------------------------------------------

06/08/04 15:11:17 -- jplevyak (a.k.a. n10253)

Log message:
	update counts

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/08/04 15:12:37 -- jplevyak (a.k.a. n10253)

Log message:
	FreeBSD fix

Modified files:
	chapel/compiler/: fa.h 

---------------------------------------------------------------------------

06/08/04 15:15:16 -- jplevyak (a.k.a. n10253)

Log message:
	Changes to support GCC 3.4

Modified files:
	chapel/compiler/: list.h log.h map.h ssu.cpp ssu.h 

---------------------------------------------------------------------------

06/08/04 15:27:18 -- bradc

Log message:
	Somehow this file slipped out of my last checkin.

Added files:
	chapel/test/trivial/bradc/functions/: noargs.chpl 

---------------------------------------------------------------------------

06/08/04 15:39:36 -- jplevyak (a.k.a. n10253)

Log message:
	Turn off cloning for constants as requirested by brad.
	We can figure out an interface for specifying this later.

Modified files:
	chapel/compiler/: fa.cpp fa.h 

---------------------------------------------------------------------------

06/08/04 15:49:39 -- bradc

Log message:
	Ripped ZPL's beautify.c code out, which performs indentation
	on generated C code.  Reworked this to work within the Chapel
	framework better and applied it to our generated code to ease
	with debugging code generation.
	
	Also reworked some of the file interfaces a bit, though they
	could still use some more work.

Modified files:
	chapel/compiler/: Makefile codegen.cpp files.cpp files.h 
Added files:
	chapel/compiler/: beautify.cpp beautify.h 

---------------------------------------------------------------------------

06/08/04 16:28:27 -- bradc

Log message:
	Added tests to look at functions calling other functions
	and removed these from the Share/ directory thanks to
	John's disabling of cloning based on values.

Added files:
	chapel/test/trivial/bradc/functions/: chain.chpl chain.good 
	                                      mutrec.chpl mutrec.good 
Removed files:
	chapel/test/Share/: chain.chpl mutrec.chpl 

---------------------------------------------------------------------------

06/08/04 16:46:46 -- bradc

Log message:
	Beefed up domain support ever-so-slightly to handle cases
	with constraint nodes attached (basically by skipping
	over the constraint node and looking at the initializer
	for now).

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/: declprintdom2.chpl 
	                            declprintdom2.good 

---------------------------------------------------------------------------

06/08/04 17:34:22 -- jplevyak (a.k.a. n10253)

Log message:
	updated for non-cloning of constants

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 

---------------------------------------------------------------------------

06/09/04 11:09:14 -- jplevyak (a.k.a. n10253)

Log message:
	fix segv when handling globals

Modified files:
	chapel/compiler/: ast.cpp 

---------------------------------------------------------------------------

06/10/04 12:30:51 -- jplevyak (a.k.a. n10253)

Log message:
	Update dparser to 1.10 to sync up with public release.
	dparser ported to x86_64
	Update Makefiles/depend to work with gcc 3.4

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.gnu 
	chapel/third-party/dparser/d/: CHANGES Makefile d.h 
	                               dparse_tables.h grammar.g.c 
	                               index.html make_dparser.c parse.c 
	                               sample.g scan.c symtab.c util.c 
	                               util.h 
	chapel/third-party/dparser/d/python/: Makefile README dparser.i 
	                                      dparser.py dparser_wrap.c 
	                                      index.html 
	                                      py_dparser_manual.html 
	                                      pydparser.c pydparser.h 
	                                      setup.py 
	chapel/third-party/dparser/d/tests/: sample.test.g 
Added files:
	chapel/third-party/dparser/d/: write_tables.c write_tables.h 
	chapel/third-party/dparser/d/python/: make_tables.c 
	chapel/third-party/dparser/d/python/contrib/: 
	                                              dparserpy-syntax_error.py 
	                                              dparserpy.el 
	chapel/third-party/dparser/d/python/tests/: test.py test2.py 
	                                            test3.py test4.py 
	                                            test5.py test6.py 
	                                            test7.py test8.py 
Removed files:
	chapel/third-party/dparser/d/: write_ctables.c write_ctables.h 
	chapel/third-party/dparser/d/python/: dparser_swig.py test.py 
	                                      test2.py test3.py test4.py 
	                                      test5.py test6.py test7.py 

---------------------------------------------------------------------------

06/10/04 12:38:32 -- jplevyak (a.k.a. n10253)

Log message:
	only add the -Wno-invalid-offsetof for gcc 3.4

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

06/10/04 12:47:33 -- jplevyak (a.k.a. n10253)

Log message:
	forgot the add read_binary.{c,h}

Added files:
	chapel/third-party/dparser/d/: read_binary.c read_binary.h 

---------------------------------------------------------------------------

06/10/04 14:21:05 -- bradc

Log message:
	Fixed up depend rules to work with g++ 3.4 -- used a new trick
	to get geysa.h's dependences by adding an unused .cpp file that
	#includes geysa.h.  For future reference, this is because (a)
	g++ 3.3 (and previous) didn't allow the -M commands to be applied
	to .h files, (b) because g++ 3.4 created a warning due to the
	-Wno-invalid-offsetof flag, and (c) it uses a more similar CCDEP
	command as the rest of our source files (which will make it easier
	to refactor this when the day finally comes that I get around to it).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
Added files:
	chapel/compiler/: geysa.cpp 

---------------------------------------------------------------------------

06/10/04 16:13:55 -- jplevyak (a.k.a. n10253)

Log message:
	new supressions for gcc 3.4?

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

06/10/04 16:28:18 -- jplevyak (a.k.a. n10253)

Log message:
	one last supression to get a clean run through the tests

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

06/10/04 16:29:09 -- jplevyak (a.k.a. n10253)

Log message:
	added CHPL_VALGRIND_OPTIONS to permit valgrind-2.1.1 to work which
	requires an extra argument.  Someday will have to generalize this.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/10/04 17:19:47 -- bradc

Log message:
	Fixed undefined CHPL_VALGRIND_OPTIONS error when the env. var
	wasn't set (John, you may want to make sure this still works
	for you).

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/10/04 17:51:53 -- bradc

Log message:
	Making start_test unsetenv CHPL_SYSTEM_DIR to ensure that
	the nightly tests don't run using my development environment.
	If this works, we may want to do the same for other env. vars
	in the testing system (since they can always be set using the
	-compargs flag for testing purposes).

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/10/04 17:54:33 -- bradc

Log message:
	Added the -Werror flag when using g++ 3.4 to guard against
	future warnings.

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

06/11/04 13:56:41 -- shannon

Log message:
	Implemented further testing of binary operator
	code generation with the addition of two tests.
	These files test the mod and logical not
	operators.

Added files:
	chapel/test/trivial/shannon/: logical_not.chpl logical_not.good 
	                              mod.chpl mod.good 

---------------------------------------------------------------------------

06/11/04 17:10:37 -- shannon

Log message:
	Implemented code generation of the unary
	operators.  Added a test for bitwise negation.
	
	Added conditions to the findUnOp and findBinOp
	functions so that they can't dereference a
	null pointer.
	
	Fixed a bug in my generation of the mod function
	resulting from fprintf not printing my "%"
	symbol since it is a special character.
	
	Inserted a couple of blank lines because I
	accidentally committed a minute ago without
	including this message.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/shannon/: bitwise_negation.chpl 
	                              bitwise_negation.good 

---------------------------------------------------------------------------

06/12/04 11:41:36 -- jplevyak (a.k.a. n10253)

Log message:
	Cleaned up x86_64 issues.  Working and warning free.

Modified files:
	chapel/compiler/: fa.h fa_extras.cpp geysa.h graph.cpp list.h 
	                  map.h ssu_extra.cpp vec.cpp vec.h 
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

06/14/04 11:02:38 -- shannon

Log message:
	Add two failing tests to the Share directory.

Added files:
	chapel/test/Share/: increment.chpl unary_plusMinus.chpl 

---------------------------------------------------------------------------

06/14/04 12:47:25 -- jplevyak (a.k.a. n10253)

Log message:
	Fix up trivial/shannon/{increment.chpl,unary_plusMinus.chpl}.

Modified files:
	chapel/compiler/: ast.cpp chpl.g 

---------------------------------------------------------------------------

06/14/04 13:16:17 -- jplevyak (a.k.a. n10253)

Log message:
	update stupid counts again.

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/14/04 14:23:17 -- jplevyak (a.k.a. n10253)

Log message:
	minor FreeBSD compatibility issues

Modified files:
	chapel/compiler/: list.h 
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

06/15/04 09:54:32 -- bradc

Log message:
	This is a bunch of prototype code that I've been working on
	to look at alternate AST structures.  It isn't anywhere near
	prime-time, but I feel naked not having it checked into CVS,
	so am dropping it in for the revision control features.

Added files:
	chapel/compiler/AST/: Makefile chapel.lex chapel.y expr.cpp 
	                      expr.h lexyacc.h link.cpp link.h main.cpp 
	                      stmt.cpp stmt.h stringutil.cpp 
	                      stringutil.h symbol.cpp symbol.h type.cpp 
	                      type.h yy.c yy.h 

---------------------------------------------------------------------------

06/15/04 11:16:32 -- bradc

Log message:
	Prototype AST checkpoint.

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp expr.h 
	                      main.cpp yy.h 

---------------------------------------------------------------------------

06/15/04 12:54:59 -- bradc

Log message:
	AST Prototype checkpoint.

Modified files:
	chapel/compiler/AST/: Makefile chapel.lex chapel.y expr.cpp 
	                      expr.h lexyacc.h stmt.cpp stmt.h type.cpp 
	                      type.h 
Added files:
	chapel/compiler/AST/: .cvsignore symtab.cpp symtab.h 

---------------------------------------------------------------------------

06/15/04 13:33:52 -- shannon

Log message:
	Added a condition to the top of the AST_op case to
	check for NULL ast pointers.
	
	Added two tests of the +, -, ++, and -- unary
	operators to the test/trivial/shannon directory,
	and removed them from the test/Share directory.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/shannon/: increment.chpl increment.good 
	                              unary_plusMinus.chpl 
	                              unary_plusMinus.good 
Removed files:
	chapel/test/Share/: increment.chpl unary_plusMinus.chpl 

---------------------------------------------------------------------------

06/15/04 14:01:00 -- bradc

Log message:
	prototype AST checkpoint (mg-seq parses).

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp expr.h 
	                      symbol.cpp symbol.h type.h 

---------------------------------------------------------------------------

06/16/04 10:27:57 -- bradc

Log message:
	AST prototyping -- some minor cleanup and fixes.

Modified files:
	chapel/compiler/AST/: chapel.y expr.cpp expr.h stmt.cpp 
	                      symbol.cpp symbol.h type.cpp 

---------------------------------------------------------------------------

06/16/04 12:01:57 -- bradc

Log message:
	AST prototype checkpoint.

Modified files:
	chapel/compiler/AST/: chapel.y expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp expr.h stmt.h symbol.h type.h 

---------------------------------------------------------------------------

06/16/04 12:56:38 -- bradc

Log message:
	Lunchtime prototype AST checkpoint.

Modified files:
	chapel/compiler/AST/: Makefile chapel.lex chapel.y main.cpp 
	                      stmt.cpp stmt.h symbol.cpp symbol.h 
	                      type.cpp type.h yy.h 
Added files:
	chapel/compiler/AST/: TODO 

---------------------------------------------------------------------------

06/16/04 15:05:26 -- bradc

Log message:
	mid-afternoon AST prototype checkin.

Modified files:
	chapel/compiler/AST/: TODO chapel.y expr.cpp expr.h link.cpp 
	                      link.h main.cpp stmt.cpp stmt.h symbol.cpp 
	                      symbol.h type.cpp type.h 

---------------------------------------------------------------------------

06/16/04 15:48:36 -- bradc

Log message:
	late afternoon prototype AST checkin (mg-seq mostly codegens)

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp main.cpp 
	                      stmt.cpp stmt.h type.h 

---------------------------------------------------------------------------

06/16/04 17:22:43 -- bradc

Log message:
	Almost end-of-day prototype AST checkin.

Modified files:
	chapel/compiler/AST/: Makefile TODO chapel.lex chapel.y expr.cpp 
	                      expr.h link.h main.cpp stmt.cpp stmt.h 
	                      symbol.cpp symbol.h type.cpp type.h yy.c 
	                      yy.h 
Added files:
	chapel/compiler/AST/: loc.cpp loc.h 

---------------------------------------------------------------------------

06/16/04 17:26:24 -- bradc

Log message:
	This is a really minor checkin that I've been sitting on
	for awhile, waiting for a bigger checkin to attach it to.
	It changes the way domains are set up to use a reference
	parameter rather than returning a structure, for performance
	reasons.

Modified files:
	chapel/compiler/: codegen.cpp 
	chapel/runtime/include/: domain.h 
	chapel/runtime/src/: domain.c 
	chapel/test/trivial/bradc/: .cvsignore 
	chapel/test/trivial/bradc/arrinit/: .cvsignore 

---------------------------------------------------------------------------

06/16/04 17:55:41 -- bradc

Log message:
	Last checkin of the day -- minor stuff: fixed a valgrind-found
	problem with the prototype AST, and commented some debug
	printing out of start_test.

Modified files:
	chapel/compiler/AST/: .cvsignore expr.cpp 
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/17/04 14:25:16 -- bradc

Log message:
	Got lists of params/vars working better with prototype AST.

Modified files:
	chapel/compiler/AST/: chapel.y stmt.cpp symbol.cpp symbol.h 
	                      symtab.cpp symtab.h type.cpp type.h 

---------------------------------------------------------------------------

06/17/04 15:49:49 -- bradc

Log message:
	Beefed up symboltable for prototype AST a bit; removed some NULLs.

Modified files:
	chapel/compiler/AST/: TODO chapel.y expr.cpp expr.h main.cpp 
	                      stmt.cpp stmt.h symbol.cpp symbol.h 
	                      symtab.cpp symtab.h 

---------------------------------------------------------------------------

06/18/04 13:02:59 -- bradc

Log message:
	Lunch break.  Continued populating symboltable.

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y link.cpp 
	                      symbol.cpp symbol.h symtab.cpp symtab.h 

---------------------------------------------------------------------------

06/18/04 16:23:22 -- bradc

Log message:
	Checkpoint time.  Continuing to populate the symboltable.

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y expr.cpp expr.h 
	                      link.cpp main.cpp stmt.cpp stmt.h 
	                      symbol.cpp symbol.h symtab.cpp symtab.h 
	                      type.cpp yy.c 

---------------------------------------------------------------------------

06/18/04 18:19:20 -- bradc

Log message:
	Improved handling of def-before-use cases in AST prototype.

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y expr.cpp expr.h 
	                      main.cpp symbol.cpp symbol.h symtab.cpp 
	                      symtab.h 

---------------------------------------------------------------------------

06/18/04 18:41:15 -- bradc

Log message:
	Last check-in for the weekend.  Changed order of
	symboltable dumps to match definition order rather
	than alphabetical (with option for the latter).

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y symtab.cpp 
Added files:
	chapel/compiler/AST/: prelude.chpl 

---------------------------------------------------------------------------

06/21/04 09:56:24 -- bradc

Log message:
	Shannon pointed out that my Makefile no longer worked from
	a clean state.  This should fix it.

Modified files:
	chapel/compiler/AST/: Makefile 

---------------------------------------------------------------------------

06/21/04 11:38:14 -- bradc

Log message:
	Removed some reduce/reduce problems and added in BoehmGC.

Modified files:
	chapel/compiler/AST/: Makefile TODO chapel.y expr.h loc.h 

---------------------------------------------------------------------------

06/21/04 17:01:18 -- bradc

Log message:
	Merged my prototype AST code with the main compiler.  By default,
	it is not used.  However, it can be selected using the --newast
	flag.  Currently this causes the new parser and AST to be used
	and the AST to be printed out, but no code to be generated or
	compiled.
	
	Added a few tests that I've been using to monitor its evolution
	and ensure that I don't go down the wrong path.
	
	Changed the Makefile structure slightly so that the AST code
	could continue to live in its own subdirectory, for organizational
	purposes.

Modified files:
	chapel/compiler/: Makefile driver.cpp driver.h files.cpp files.h 
	                  misc.cpp 
Added files:
	chapel/compiler/: createAST.cpp createAST.h 

Log message:
	Merged my prototype AST code with the main compiler.  By default,
	it is not used.  However, it can be selected using the --newast
	flag.  Currently this causes the new parser and AST to be used
	and the AST to be printed out, but no code to be generated or
	compiled.
	
	Added a few tests that I've been using to monitor its evolution
	and ensure that I don't go down the wrong path.
	
	Changed the Makefile structure slightly so that the AST code
	could continue to live in its own subdirectory, for organizational
	purposes.
	
	Changed the name of my Link class to ILink (Inheritance-based
	Link) to avoid conflicts with the previous instance.

Modified files:
	chapel/compiler/AST/: Makefile expr.h link.cpp link.h stmt.h 
	                      symbol.h symtab.cpp type.h 
Added files:
	chapel/compiler/AST/: Makefile.include Makefile.share 
	chapel/test/trivial/bradc/protoast/: COMPOPTS NOEXEC 
	                                     mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl mvm-seq.good 
	                                     test.chpl test.good 

---------------------------------------------------------------------------

06/21/04 17:04:56 -- bradc

Log message:
	Dang, broke my own build right before checking in!  This
	should fix it.

Modified files:
	chapel/compiler/AST/: Makefile 

---------------------------------------------------------------------------

06/22/04 15:17:04 -- bradc

Log message:
	Cleaning up AST prototype: integrated with compiler's
	warning/error mechanisms; removed code from header
	files.

Modified files:
	chapel/compiler/AST/: Makefile TODO expr.cpp expr.h link.cpp 
	                      main.cpp stmt.cpp stmt.h stringutil.cpp 
	                      symbol.cpp symbol.h symtab.cpp type.cpp 
	                      type.h 

---------------------------------------------------------------------------

06/22/04 17:23:00 -- bradc

Log message:
	Generalized our handling of reductions by specifying
	reduction classes in the standard prelude (which are
	currently empty) and having the parser cue on these
	rather than building "sum" in by hand as I was
	previously and assuming that all other symbols used
	in the reduction context were also reductions.

Modified files:
	chapel/compiler/: createAST.cpp createAST.h driver.cpp 
	chapel/compiler/AST/: Makefile TODO chapel.lex chapel.y loc.cpp 
	                      prelude.chpl symbol.cpp symbol.h 
	                      symtab.cpp symtab.h type.cpp type.h 

---------------------------------------------------------------------------

06/23/04 10:13:01 -- jplevyak (a.k.a. n10253)

Log message:
	Added new option to permit cloning for constants.
	Fixed bug related to specializing classes.
	Added test cases related to above bug.

Modified files:
	chapel/compiler/: driver.cpp fa.cpp fa.h 
Added files:
	chapel/test/flowanalysis/jplevyak/: cs4.chpl cs4.good cs5.chpl 
	                                    cs5.good 

---------------------------------------------------------------------------

06/23/04 11:22:25 -- jplevyak (a.k.a. n10253)

Log message:
	new flow analysis test cases based on proposed review example
	fixed tuple handling to allow recursive destructuring of tuples
	fixed flow analysis test log to avoid NULL reference

Modified files:
	chapel/compiler/: ast.cpp fa.cpp 
Added files:
	chapel/test/flowanalysis/jplevyak/: review1.chpl review1.good 

---------------------------------------------------------------------------

06/23/04 14:47:49 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a couple bugs in the graphing subsystem triggered by larger programs.

Modified files:
	chapel/compiler/: fa.cpp graph.cpp 

---------------------------------------------------------------------------

06/23/04 18:03:13 -- bradc

Log message:
	Improved identification of reductions in the parser.  In doing
	so, added a new field to class Symbol that keeps track of the
	scope level in which it was introduced.  Symbols of scope level
	0 are defined in the standard prelude.

Modified files:
	chapel/compiler/AST/: TODO symbol.cpp symbol.h symtab.cpp 
	                      symtab.h 
Added files:
	chapel/test/trivial/bradc/protoast/: badred.chpl badred.good 

---------------------------------------------------------------------------

06/23/04 22:11:21 -- jplevyak (a.k.a. n10253)

Log message:
	additional flow analysis test case based on review example

Added files:
	chapel/test/flowanalysis/jplevyak/: review2.chpl review2.good 

---------------------------------------------------------------------------

06/23/04 22:30:04 -- jplevyak (a.k.a. n10253)

Log message:
	Fix for bad sort.

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs1.good cs3.good cs4.good 
	                                    cs5.good review1.good 
	                                    review2.good 

---------------------------------------------------------------------------

06/28/04 12:04:17 -- jplevyak (a.k.a. n10253)

Log message:
	Improved number of analysis clones created for polymorphic classes.

Modified files:
	chapel/compiler/: fa.cpp 

---------------------------------------------------------------------------

06/30/04 10:31:32 -- jplevyak (a.k.a. n10253)

Log message:
	update flow analysis test

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs4.good 

---------------------------------------------------------------------------

06/30/04 13:00:27 -- jplevyak (a.k.a. n10253)

Log message:
	Eliminate extra work done because of analysis of unused lvalues

Modified files:
	chapel/compiler/: fa.cpp 

---------------------------------------------------------------------------

06/30/04 15:16:19 -- jplevyak (a.k.a. n10253)

Log message:
	remove an incomplete (buggy) optimization

Modified files:
	chapel/compiler/: fa.cpp 
	chapel/test/flowanalysis/jplevyak/: cs4.good 

---------------------------------------------------------------------------

07/01/04 12:54:43 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed compilation warning in graph.cpp from %x instead of %p.
	Fixed bug in flow anlysis related to cloning of classes.

Modified files:
	chapel/compiler/: fa.cpp graph.cpp 

---------------------------------------------------------------------------

07/08/04 16:44:44 -- shannon

Log message:
	Added code generation using the new AST.  The double
	operators, like assignment expressions or shift operators,
	do not yet work.  Currently if type is not given explicitly
	for a variable it is assumed to be an integer.  Other
	types are generated using a string comparison.

Modified files:
	chapel/compiler/AST/: expr.cpp expr.h link.cpp link.h stmt.cpp 
	                      stmt.h symbol.cpp symbol.h symtab.cpp 
	                      type.cpp type.h 

---------------------------------------------------------------------------

07/09/04 11:58:37 -- jplevyak (a.k.a. n10253)

Log message:
	Big checkin.
	
	This adds the new dispatch mechanism and updates all the surrounding
	code to use it.  This is a multiple dispatch mechanism that support
	destructuring and multiple inheritance.  It reports ambiguties.
	
	Error reporting for typing has been completely overhauled.
	Errors are now reported in a manner compatible with gcc (and
	hence emacs compilation).  Errors are reported by location in
	the code and include a (configurable) call tree depth to help
	the user differentiate versions of generic calls.
	
	The testing system has been changed to do sub_clean before a
	run so as to cleanup from the last run (necessary since I am
	testing the error system and erroroneous compilations don't necessarily
	overwrite the previous tests files).

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h builtin_symbols.h 
	                  cfg.cpp cg_funs.cpp clone.cpp codegen.cpp 
	                  driver.cpp driver.h dump.cpp fa.cpp fa.h 
	                  fa_extras.cpp fun.cpp fun.h geysa.h graph.cpp 
	                  if1.cpp misc.cpp misc.h pnode.cpp pnode.h 
	                  prelude.chpl prelude.v ssu_extra.cpp sym.h 
	                  var.h vec.cpp vec.h 
	chapel/test/: start_clean start_test 
	chapel/test/flowanalysis/jplevyak/: PREDIFF cs1.good cs4.good 
	                                    cs5.good review1.good 
	                                    review2.good 
Added files:
	chapel/compiler/: pattern.cpp pattern.h 

---------------------------------------------------------------------------

07/09/04 12:01:40 -- jplevyak (a.k.a. n10253)

Log message:
	new test cases for dispatch system and error reporting

Added files:
	chapel/test/flowanalysis/jplevyak/: badcall.good badcall.v 
	                                    badprimitive.good 
	                                    badprimitive.v cs6.good 
	                                    cs6.v 

---------------------------------------------------------------------------

07/09/04 12:02:26 -- jplevyak (a.k.a. n10253)

Log message:
	new tests for dispatch system

Added files:
	chapel/test/flowanalysis/jplevyak/: dispatch1.good dispatch1.v 
	                                    dispatch2.good dispatch2.v 
	                                    dispatch3.good dispatch3.v 
	                                    dispatch4.good dispatch4.v 

---------------------------------------------------------------------------

07/09/04 14:59:19 -- bradc

Log message:
	Checking in some code to do token-counting and other static
	code statistics that I've been playing with as a background
	activity to putting review slides together.

Added files:
	chapel/util/tokencount/: .cvsignore Makefile tokencount.c 
	                         tokencount.h tokencount.l tokencount.y 

---------------------------------------------------------------------------

07/12/04 16:27:49 -- jplevyak (a.k.a. n10253)

Log message:
	Member function support (as opposed to multi-methods).
	Class initialize support (0 args currently).

Modified files:
	chapel/compiler/: ast.cpp ast.h builtin_symbols.h codegen.cpp 
	                  fa.cpp fa_extras.cpp if1.cpp pattern.cpp 
	                  prelude.chpl prelude.v prim_data.dat scope.cpp 
	                  scope.h sym.h v.g 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	                                    cs6.good cs6.v 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 

---------------------------------------------------------------------------

07/12/04 16:29:54 -- jplevyak (a.k.a. n10253)

Log message:
	new test cases for member functions

Added files:
	chapel/test/flowanalysis/jplevyak/: memberfun.v 

---------------------------------------------------------------------------

07/13/04 12:52:09 -- bradc

Log message:
	Adding three scripts to the token counting utility directory:
	
	checkdiff : runs the tokencounter over a C++ file (or group
	of files) and verifies that the output is the same
	as the input (assumes tokencounter is doing nothing
	other than passing tokens through).
	
	tokctnightly: a script that does the nightly token counting
	of the compiler and runtime.
	
	countrange: a script that will do token counting for the
	past n days (used to generate token counting graphs
	for the span of time that we didn't yet have these
	utilities).

Added files:
	chapel/util/tokencount/: checkdiff countrange tokctnightly 

---------------------------------------------------------------------------

07/13/04 14:30:53 -- jplevyak (a.k.a. n10253)

Log message:
	Cache upper limit on possible callees for each call.
	Fixed bugs dealing with object creation.

Modified files:
	chapel/compiler/: ast.cpp builtin_symbols.h fa.cpp fa.h 
	                  pattern.cpp pnode.h prelude.chpl prelude.v 
	                  sym.h 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	                                    cs4.good cs5.good cs6.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good review1.good 
	                                    review2.good 

---------------------------------------------------------------------------

07/14/04 08:43:47 -- jplevyak (a.k.a. n10253)

Log message:
	forgot good output file for test case

Added files:
	chapel/test/flowanalysis/jplevyak/: memberfun.good 

---------------------------------------------------------------------------

07/14/04 09:08:39 -- jplevyak (a.k.a. n10253)

Log message:
	eliminate instability in types log which was causing random test failures

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs6.good memberfun.good 
	                                    review2.good 

---------------------------------------------------------------------------

07/14/04 09:16:05 -- jplevyak (a.k.a. n10253)

Log message:
	Remove instability from type log reporting

Modified files:
	chapel/compiler/: TODO fa.cpp fa_extras.cpp 

---------------------------------------------------------------------------

07/14/04 10:41:38 -- jplevyak (a.k.a. n10253)

Log message:
	Deal with one more instability in the valgrind output

Modified files:
	chapel/compiler/: pattern.cpp 

---------------------------------------------------------------------------

07/15/04 10:14:54 -- jplevyak (a.k.a. n10253)

Log message:
	Add 'make clean' target

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

07/16/04 13:20:53 -- jplevyak (a.k.a. n10253)

Log message:
	named arguments work
	new test case for named arguments

Modified files:
	chapel/compiler/: ast.cpp clone.cpp fa.cpp pattern.cpp pattern.h 
	                  sym.h v.g vec.cpp 
	chapel/test/flowanalysis/jplevyak/: badcall.good 
	                                    badprimitive.good cs2.good 
	                                    cs3.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: named.good named.v 

---------------------------------------------------------------------------

07/19/04 12:49:19 -- jplevyak (a.k.a. n10253)

Log message:
	Support for destructuring of non-tuple types in function calls.
	Test case for destructring of non-tuple types.

Modified files:
	chapel/compiler/: TODO ast.cpp ast_kinds.h fa.cpp pattern.cpp 
	                  v.g 
	chapel/test/flowanalysis/jplevyak/: dispatch3.good 
	chapel/test/parsing/jplevyak/: literal.good tuples.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: structtype.good structtype.v 

---------------------------------------------------------------------------

07/19/04 13:45:08 -- bradc

Log message:
	Updated sub_test to use the --tools option by default with
	valgrind to support newer versions of valgrind such as 1.2.1
	(now selected on lotus when using Brad's .chapelcshrc-env
	file...).

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

07/19/04 14:36:24 -- bradc

Log message:
	Two small fixes to token-counting scripts:
	
	1) Made tokctnightly take the cast/ and make_prims/ subdirectories
	into account, because they were being overlooked before.
	
	2) Made tokencount.c work better in the presence of wildcards
	which the shell doesn't expand (which sh doesn't seem to do
	when there are no matches) -- previously this was causing a
	seg fault.

Modified files:
	chapel/util/tokencount/: tokctnightly tokencount.c 

---------------------------------------------------------------------------

07/20/04 13:12:44 -- bradc

Log message:
	* added more operators to the scanner, parser, and Expr classes (&=,
	|=, ^=, <<, >>).
	
	* fixed op= operators so that the op is no longer dropped on the floor
	and implemented code generation and pretty-printing for them.
	Updated the protoast/mg tests appropriately.
	
	* refactored the "Type" field of Symbol's subclasses into Symbol.
	Currently all Symbols are assumed to have a type of some sort,
	though that type may be dtUnknown;
	
	* started implementing a type_info() method on the Expr classes which
	will return the Type of that expression.  Currently this only works
	for the most basic of expressions and dtUnknown is returned when we
	don't know.
	
	* continued special casing write/writeln statements by making them a
	subclass of FnCall.  Implemented codegen for them using the same
	runtime mechanisms as the boostrap AST.
	
	* set up code generation framework for the new AST -- opened files,
	set up init procedure, etc.  Codegen is not very implemented for the
	new AST, so it would be naive to expect it to work.  The
	--no-codegen flag is currently your friend (as is the fact that you
	still only get the new AST with the --newast flag).  When using
	--newast and --no-codegen, the code will pretty-print to the screen
	as before.  It's worth noting that currently, the way that the init
	procedure is generated is very naive -- all code is assumed to be in
	init, which is just plain wrong.
	
	* put a rule into the Makefile that generates an error when "return"
	is used in chapel.y, because it's a mistake that I often make
	(rather than assigning to $$), and it sometimes takes me far too
	long to realize why the parser has suddenly broken.
	
	* changed the generation of the emacs TAGS file to include new AST
	sources.

Modified files:
	chapel/compiler/: Makefile codegen.cpp codegen.h createAST.cpp 
	                  createAST.h driver.cpp 
	chapel/compiler/AST/: Makefile TODO chapel.lex chapel.y expr.cpp 
	                      expr.h stmt.cpp symbol.cpp symbol.h 
	                      type.cpp type.h 
	chapel/test/trivial/bradc/protoast/: COMPOPTS 
	                                     mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/test/trivial/bradc/protoast/: .cvsignore 

---------------------------------------------------------------------------

07/20/04 14:04:54 -- bradc

Log message:
	Replaced all the bad casting code that I was using to traverse links
	with a macro implemented using dynamic casts.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp link.h stmt.cpp symbol.cpp 
	                      symbol.h symtab.cpp type.cpp 

---------------------------------------------------------------------------

07/20/04 16:49:07 -- bradc

Log message:
	* Fixed up implementation of init() routine by sorting
	through all statements at the file scope and making
	those that shouldn't be part of the global scope part
	of the init() routine's body.  Updated tests in
	trivial/bradc/protoast to reflect this.
	
	* Laid in a rough implementation of codegen for a FnDefStmt.

Modified files:
	chapel/compiler/: codegen.cpp createAST.cpp 
	chapel/compiler/AST/: link.cpp link.h stmt.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

07/20/04 17:05:09 -- bradc

Log message:
	Added a test to lock in some of my work today.  Fixed a small
	bug in Shannon's VarDefStmt code generation in which the
	semicolon was lost if the variable had no initializer.

Modified files:
	chapel/compiler/AST/: TODO stmt.cpp 
Added files:
	chapel/test/trivial/bradc/protoast/codegen/: .cvsignore COMPOPTS 
	                                             test.chpl test.good 

---------------------------------------------------------------------------

07/21/04 14:23:49 -- jplevyak (a.k.a. n10253)

Log message:
	Work on adding support for destructring return arguments (not done).
	Added new review3.chpl test case.
	Make sure that tuples sizes match during destructuring.

Modified files:
	chapel/compiler/: ast.cpp clone.cpp dump.cpp fa.cpp 
	                  fa_extras.cpp fun.cpp if1.cpp pattern.cpp 
	                  prim_data.dat scope.cpp sym.h v.g 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: review3.chpl review3.good 

---------------------------------------------------------------------------

07/21/04 16:47:39 -- jplevyak (a.k.a. n10253)

Log message:
	Support for destructuring of return values.
	Test case for destructuring of return values.
	Test case for multiple definitions in one statement.

Modified files:
	chapel/compiler/: ast.cpp builtin_symbols.h fa.cpp fa.h 
	                  fa_extras.cpp prelude.chpl prelude.v 
	                  prim_data.dat 
Added files:
	chapel/test/flowanalysis/jplevyak/: multipledef.good 
	                                    multipledef.v 
	                                    multiplereturn.good 
	                                    multiplereturn.v 

---------------------------------------------------------------------------

07/21/04 17:10:07 -- jplevyak (a.k.a. n10253)

Log message:
	test cases for error messages for unmatch return destructuring

Modified files:
	chapel/compiler/: fa.cpp fa_extras.cpp 
	chapel/test/flowanalysis/jplevyak/: review3.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: badreturn.good badreturn.v 

---------------------------------------------------------------------------

07/21/04 17:38:50 -- jplevyak (a.k.a. n10253)

Log message:
	Named destrcturing of classes in return arguments.
	Test case for named destructuring in return arguments.

Modified files:
	chapel/compiler/: ast.cpp ast.h fa.cpp sym.h v.g 
	chapel/test/flowanalysis/jplevyak/: badreturn.good 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: destruct.good destruct.v 
	                                    destruct2.good destruct2.v 

---------------------------------------------------------------------------

07/23/04 16:57:47 -- bradc

Log message:
	Changes made yesterday (and reflected in last night's test) to
	make the cron job depend less on CHPL* environment variables
	and my personal chapel environment (this change also involved
	changing my crontab entries).

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

07/23/04 17:06:07 -- bradc

Log message:
	Improved function code generation routines:
	
	* added notion of Symbols codegening their definition (rather than
	their use, which has been the default) via the codegenDef() method.
	
	* refactored function definition code away from FnDefStmt's codegen()
	method and into FunSymbol's codegenDef() method (but why do I use
	Fun in some places and Fn in others!?!?)
	
	* added notion of whether a symbol is exported or not (from the scope
	it's declared in) to the AST.
	
	* added #ifndef protection to compiler-generated header files.

Modified files:
	chapel/compiler/: createAST.cpp files.cpp 
	chapel/compiler/AST/: Makefile TODO stmt.cpp symbol.cpp symbol.h 
	                      symtab.cpp symtab.h 
	chapel/test/trivial/bradc/protoast/codegen/: test.good 

---------------------------------------------------------------------------

07/26/04 10:45:28 -- bradc

Log message:
	Trivial update: renamed Fun* to Fn* in my code for uniformity.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: chapel.y expr.cpp stmt.cpp stmt.h 
	                      symbol.cpp symbol.h symtab.cpp symtab.h 

---------------------------------------------------------------------------

07/26/04 11:14:42 -- bradc

Log message:
	More housecleaning: Wrapped ILink append() routine in a
	macro (appendLink()) which handles NULL and isNull()
	links more cleanly.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: TODO chapel.y link.cpp link.h symtab.cpp 

---------------------------------------------------------------------------

07/26/04 14:36:30 -- bradc

Log message:
	Small fix to string literals in scanner.

Modified files:
	chapel/compiler/AST/: chapel.lex 

---------------------------------------------------------------------------

07/26/04 17:33:46 -- jplevyak (a.k.a. n10253)

Log message:
	1. Changed -lF to log the results after cloning.
	2. Changed the Makefiles to have separate CXX and CXXFLAGS variables so
	that we can compile straight C files using the C compiler and appropriate
	flags.
	3. Revived the low level code generator.  This was a great test for cloning
	as it pointed out a couple minor issues with respect to the new features
	(member functions, constructors).
	4. Added 3 new test cases for the low level code generator, including review3.chpl

Modified files:
	chapel/compiler/: Makefile c_runtime.h cg.cpp cg.h cg_funs.cpp 
	                  clone.cpp clone.h driver.cpp dump.cpp fa.cpp 
	                  fa.h fa_extras.cpp fun.cpp fun.h geysa.h 
	                  graph.cpp map.h pattern.h pnode.cpp pnode.h 
	                  vec.cpp 
	chapel/compiler/AST/: Makefile 
	chapel/compiler/cast/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: Makefile 
	chapel/compiler/test/: Makefile 
	chapel/make/: Makefile.base Makefile.gnu 
	chapel/test/compflags/bradc/badflagdash/: COMPOPTS declint.good 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	                                    cs4.good cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good 
Added files:
	chapel/compiler/: Makefile.cg 
	chapel/test/lowlevelcg/jplevyak/: 1.good 1.v COMPOPTS 
	                                  Makefile.cg review3.chpl 
	                                  review3.good sample.good 
	                                  sample.v 

---------------------------------------------------------------------------

07/26/04 17:59:11 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed compilation warning in vec.cpp.
	Fix CXXFLAGS which did not contain -Werror which would have prevented
	the issue above from being checked in.
	Fixed issue in the low level code generator and updated the tests.

Modified files:
	chapel/compiler/: cg.cpp clone.cpp fun.cpp map.h pattern.cpp 
	chapel/test/flowanalysis/jplevyak/: review1.good review2.good 
	                                    review3.good 
	chapel/test/lowlevelcg/jplevyak/: review3.good 

---------------------------------------------------------------------------

07/27/04 12:44:50 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in IF1 creation for the <= and >= operators.
	Fixed a bug in low level code generation.

Modified files:
	chapel/compiler/: ast.cpp cg.cpp 

---------------------------------------------------------------------------

07/27/04 13:24:11 -- jplevyak (a.k.a. n10253)

Log message:
	Some cleanup.
	Removed explicit template instantiation.

Modified files:
	chapel/compiler/: cg.cpp clone.cpp dump.cpp fa.cpp fun.cpp fun.h 
	                  graph.cpp list.cpp list.h pattern.cpp 
	                  pattern.h pnode.h vec.cpp vec.h 

---------------------------------------------------------------------------

07/27/04 13:27:57 -- jplevyak (a.k.a. n10253)

Log message:
	Updated to take into account mysystem, stringutil, etc.

Modified files:
	chapel/compiler/test/: Makefile 

---------------------------------------------------------------------------

07/27/04 17:20:13 -- jplevyak (a.k.a. n10253)

Log message:
	Added test cases for support of "value" semantics.
	Fixed a couple bugs in IF1 generation of "value" variables.

Modified files:
	chapel/compiler/: ast.cpp fa.cpp prelude.chpl sym.h 
	chapel/test/flowanalysis/jplevyak/: cs4.good cs5.good 
	                                    review1.good review2.good 
	                                    review3.good 
	chapel/test/lowlevelcg/jplevyak/: review3.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: classvar.good classvar.v 
	                                    var.chpl var.good var2.chpl 
	                                    var2.good 

---------------------------------------------------------------------------

07/28/04 10:59:37 -- jplevyak (a.k.a. n10253)

Log message:
	sorted many of the internal data structures so as to limit the effects
	of hash table locations on the intermediate results of analysis.

Modified files:
	chapel/compiler/: code.h fa.cpp fa.h fun.cpp fun.h if1.cpp 
	                  pnode.cpp pnode.h var.cpp var.h 

---------------------------------------------------------------------------

07/28/04 16:21:08 -- bradc

Log message:
	Broke code generation of variables into two steps: the
	C declaration of the variable, and the initialization
	of the variable.  This is in part because C's variable
	declarations still need to be at the top of the scope,
	and in part because not all legal Chapel initializations
	are legal C initializations (as a TODO, noted in stmt.cpp,
	those variables that could be handled using C declarations
	+ initializations could be handled in this way down the
	road...).  Also moved VarDefStmts in the global scope into
	the __init() procedure, and hoisted the definition of the
	variable into the generated internal header file.  Updated
	the protoast tests to reflect this change.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: TODO stmt.cpp stmt.h 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

07/28/04 17:48:21 -- bradc

Log message:
	Some random stuff:
	
	* parenthesize all codegen'd binary expressions as a
	conservative way to get operator precedence correct
	for the time being.
	
	* implemented type_info() for UnOp
	
	* implemented some very simple and naive type inference
	for variables with initializers whose type is elided.
	This is a stop-gap until we get John's inference stuff
	hooked into the high-level AST.
	
	* these changes allow Shannon's tests to work correctly,
	so turned on the --newast flag in her directory and
	removed her preincrement/postincrement tests, as we
	don't have them in the current language spec (or
	front-end).
	
	* dropped in some .cvsignore files to ignore test-generated
	files in the lowlevelcg directory, and output/ directories
	in the trivial subdirectories (because I often test with
	--compopts "--savec output" so I can see the generated code
	that failed.

Modified files:
	chapel/compiler/AST/: expr.cpp expr.h symtab.cpp 
	chapel/test/trivial/bradc/functions/: chain.chpl mutrec.chpl 
	chapel/test/trivial/bradc/protoast/: .cvsignore 
	chapel/test/trivial/bradc/write/: .cvsignore 
	chapel/test/trivial/shannon/: .cvsignore 
Added files:
	chapel/test/lowlevelcg/jplevyak/: .cvsignore 
	chapel/test/trivial/shannon/: COMPOPTS 
Removed files:
	chapel/test/trivial/shannon/: increment.chpl increment.good 

---------------------------------------------------------------------------

07/28/04 18:02:52 -- bradc

Log message:
	Oops, didn't mean to check this one in.

Modified files:
	chapel/test/trivial/bradc/functions/: mutrec.chpl 

---------------------------------------------------------------------------

07/29/04 10:08:52 -- jplevyak (a.k.a. n10253)

Log message:
	Upgrade BoehmGC to version 6.3
	This corrects an issue I am seeing where non-free objects are being collected.
	(could be a gcc 3.4.1,Linux 2.6,or AMD64 issue)

Modified files:
	chapel/compiler/: pattern.cpp 
	chapel/make/: Makefile.base 
Added files:
	chapel/third-party/boehmgc/: gc6.3.tar.gz 
	chapel/third-party/boehmgc/gc6.3/: AmigaOS.c BCC_MAKEFILE 
	                                   EMX_MAKEFILE MacOS.c 
	                                   MacProjects.sit.hqx 
	                                   Makefile.DLLs Makefile.am 
	                                   Makefile.direct Makefile.dj 
	                                   Makefile.in NT_MAKEFILE 
	                                   NT_STATIC_THREADS_MAKEFILE 
	                                   NT_THREADS_MAKEFILE 
	                                   OS2_MAKEFILE PCR-Makefile 
	                                   README.QUICK SMakefile.amiga 
	                                   WCC_MAKEFILE acinclude.m4 
	                                   aclocal.m4 add_gc_prefix.c 
	                                   aix_irix_threads.c allchblk.c 
	                                   alloc.c alpha_mach_dep.S 
	                                   backgraph.c base_lib 
	                                   blacklst.c callprocs 
	                                   checksums.c config.guess 
	                                   config.sub configure 
	                                   configure.host configure.in 
	                                   darwin_stop_world.c dbg_mlc.c 
	                                   depcomp digimars.mak 
	                                   dyn_load.c finalize.c gc.a 
	                                   gc.mak gc_cpp.cc gc_cpp.cpp 
	                                   gc_dlopen.c gcc_support.c 
	                                   gcj_mlc.c gcname.c headers.c 
	                                   hpux_test_and_clear.s 
	                                   ia64_save_regs_in_stack.s 
	                                   if_mach if_mach.c 
	                                   if_not_there if_not_there.c 
	                                   install-sh libtool.m4 
	                                   ltmain.sh mach_dep.c malloc.c 
	                                   mallocx.c mark.c mark_rts.c 
	                                   mips_sgi_mach_dep.s 
	                                   mips_ultrix_mach_dep.s misc.c 
	                                   missing mkinstalldirs 
	                                   new_hblk.c obj_map.c os_dep.c 
	                                   pc_excludes pcr_interface.c 
	                                   powerpc_darwin_mach_dep.s 
	                                   pthread_stop_world.c 
	                                   pthread_support.c ptr_chck.c 
	                                   real_malloc.c reclaim.c 
	                                   rs6000_mach_dep.s setjmp_t.c 
	                                   solaris_pthreads.c 
	                                   solaris_threads.c 
	                                   sparc_mach_dep.S 
	                                   sparc_netbsd_mach_dep.s 
	                                   sparc_sunos4_mach_dep.s 
	                                   specific.c stubborn.c 
	                                   threadlibs threadlibs.c 
	                                   typd_mlc.c version.h 
	                                   win32_threads.c 
	chapel/third-party/boehmgc/gc6.3/Mac_files/: MacOS_Test_config.h 
	                                             MacOS_config.h 
	                                             dataend.c 
	                                             datastart.c 
	chapel/third-party/boehmgc/gc6.3/cord/: cordbscs.c cordprnt.c 
	                                        cordtest.c cordxtra.c 
	                                        de.c de_cmds.h 
	                                        de_win.ICO de_win.RC 
	                                        de_win.c de_win.h 
	chapel/third-party/boehmgc/gc6.3/doc/: Makefile.am Makefile.in 
	                                       README README.DGUX386 
	                                       README.Mac README.MacOSX 
	                                       README.OS2 README.amiga 
	                                       README.arm.cross 
	                                       README.autoconf 
	                                       README.changes 
	                                       README.contributors 
	                                       README.cords 
	                                       README.darwin README.dj 
	                                       README.environment 
	                                       README.ews4800 README.hp 
	                                       README.linux 
	                                       README.macros 
	                                       README.rs6000 README.sgi 
	                                       README.solaris2 
	                                       README.uts README.win32 
	                                       barrett_diagram 
	                                       debugging.html gc.man 
	                                       gcdescr.html 
	                                       gcinterface.html 
	                                       leak.html scale.html 
	                                       simple_example.html 
	                                       tree.html 
	chapel/third-party/boehmgc/gc6.3/include/: Makefile.am 
	                                           Makefile.in cord.h 
	                                           ec.h gc.h gc_alloc.h 
	                                           gc_allocator.h 
	                                           gc_amiga_redirects.h 
	                                           gc_backptr.h 
	                                           gc_config_macros.h 
	                                           gc_cpp.h gc_gcj.h 
	                                           gc_inl.h gc_inline.h 
	                                           gc_local_alloc.h 
	                                           gc_mark.h 
	                                           gc_pthread_redirects.h 
	                                           gc_typed.h javaxfc.h 
	                                           leak_detector.h 
	                                           new_gc_alloc.h 
	                                           weakpointer.h 
	chapel/third-party/boehmgc/gc6.3/include/private/: cord_pos.h 
	                                                   darwin_semaphore.h 
	                                                   darwin_stop_world.h 
	                                                   dbg_mlc.h 
	                                                   gc_hdrs.h 
	                                                   gc_locks.h 
	                                                   gc_pmark.h 
	                                                   gc_priv.h 
	                                                   gcconfig.h 
	                                                   pthread_stop_world.h 
	                                                   pthread_support.h 
	                                                   solaris_threads.h 
	                                                   specific.h 
	chapel/third-party/boehmgc/gc6.3/tests/: leak_test.c middle.c 
	                                         test.c test.o 
	                                         test_cpp.cc 
	                                         thread_leak_test.c 
	                                         trace_test.c 

---------------------------------------------------------------------------

07/29/04 10:32:24 -- jplevyak (a.k.a. n10253)

Log message:
	Fix bad deallocation issue.

Modified files:
	chapel/compiler/: fa.cpp pnode.h 

---------------------------------------------------------------------------

07/29/04 12:28:29 -- jplevyak (a.k.a. n10253)

Log message:
	New valgrind suppressions for v6.3

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

07/29/04 12:38:43 -- jplevyak (a.k.a. n10253)

Log message:
	one more to get a clean run

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

07/29/04 12:39:42 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for running valgrind on x86_64 on 32 bit executables.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

07/29/04 15:22:50 -- bradc

Log message:
	Added .cvsignore files for new version of boehmgc.

Added files:
	chapel/third-party/boehmgc/gc6.3/: .cvsignore 
	chapel/third-party/boehmgc/gc6.3/doc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.3/include/: .cvsignore 

---------------------------------------------------------------------------

07/29/04 16:05:04 -- bradc

Log message:
	* implemented some basic code generation for domains in the
	new AST.  This isn't guaranteed to work for much more than
	simple 1D domains for the time being...
	
	* started adding some new methods to the Expr hierarchy, though
	didn't implement them for many subclasses:
	isComputable() -- indicates whether the expression's value
	is computable at runtime
	intVal() -- returns the computable value for integer
	expressions
	
	* added better support for INT_FATAL() macro -- can still send
	in an AST* as the first argument, but can also send in a Loc*
	(root-ish class from the new AST that defines a filename and
	linenumber), or leave off any location indicator (previously,
	lots of calls sent in NULL...).
	
	* renamed type_info() to typeInfo() in new AST stuff and did
	a little more implementation of it for
	
	* changed default stride expression for SimpleSeqExpr from a
	NullExpr to stride "1" in hopes of reducing special cases.
	
	* fixed up generation of types in variable declarations
	(Shannon, this was the note that I was referring to when
	we talked on Tuesday.  I couldn't hold off any longer, but
	it would be worth doing a diff between these two files to
	see waht I did and why -- look for your name in the old
	version of the file).

Modified files:
	chapel/compiler/: beautify.cpp codegen.cpp createAST.cpp 
	                  datatype.cpp files.cpp misc.cpp misc.h 
	                  stringutil.cpp 
	chapel/compiler/AST/: TODO expr.cpp expr.h stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp type.h 

---------------------------------------------------------------------------

07/29/04 17:51:03 -- bradc

Log message:
	* The main change in this check-in is the implementation of
	code generation for enumerated types, including the ability
	to print them out.  This change involved the following three
	steps which are more general:
	
	* Moved generation of default format strings for write statements
	from WriteCall to Type hierarchy so that things like enums and
	arrays could generate appopriate formats.
	
	* Started implementing codegen for TypeDefStmt's, and put
	methods to the Type hierarchy to generate IO routines for
	that type.
	
	* Specialized the symbols stored by EnumType to be EnumSymbols
	rather than simply Symbols.
	
	* As a side issue, added codegen for cast expressions.
	
	* Added a simple test of declaring, assigning, and printing
	enumerated type variables, as well as checking their integer
	values.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp expr.h stmt.cpp type.cpp 
	                      type.h 
	chapel/runtime/include/: chpltypes.h 
	chapel/test/lowlevelcg/jplevyak/: .cvsignore 
	chapel/test/trivial/bradc/protoast/codegen/: .cvsignore 
Added files:
	chapel/test/trivial/bradc/protoast/codegen/: enum.chpl enum.good 

---------------------------------------------------------------------------

07/30/04 11:48:17 -- bradc

Log message:
	Updated lowlevelcg tests to squelch printing of gcc compile
	line to make these tests more portable to different platforms
	(in particular with different directories used for the include
	paths...)

Modified files:
	chapel/test/lowlevelcg/jplevyak/: 1.good Makefile.cg 
	                                  review3.good sample.good 

---------------------------------------------------------------------------

08/02/04 15:10:09 -- jplevyak (a.k.a. n10253)

Log message:
	handle inheritance of functions and member variables
	add test case for above
	begin work on parametric types

Modified files:
	chapel/compiler/: ast.cpp ast.h builtin_symbols.h fa.cpp if1.cpp 
	                  pattern.cpp prelude.chpl prelude.v 
	                  prim_data.dat scope.cpp sym.h v.g 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: memberfun2.good memberfun2.v 

---------------------------------------------------------------------------

08/03/04 12:30:46 -- jplevyak (a.k.a. n10253)

Log message:
	Add new option "analyzenewast" to complement "newast".
	Added field in ILink "AInfo *ainfo" initailize to NULL.
	Add placeholder "analysis.{cpp,h}" files.
	Cleanup some of the header includes to include fewer files.

Modified files:
	chapel/compiler/: Makefile arg.cpp builtin.cpp builtin.h cdb.cpp 
	                  driver.cpp if1.cpp num.h sym.h 
	chapel/compiler/AST/: link.cpp link.h 
Added files:
	chapel/compiler/: analysis.cpp analysis.h 

---------------------------------------------------------------------------

08/04/04 10:38:05 -- jplevyak (a.k.a. n10253)

Log message:
	Moved a bunch of stuff out of geysa.h.
	Compartmentalized many of the header files to eliminate cross dependencies.

Modified files:
	chapel/compiler/: TODO analysis.cpp analysis.h arg.cpp ast.cpp 
	                  ast_cf.cpp beautify.cpp cdb.cpp cfg.cpp cg.cpp 
	                  chpl.g chpltypes.h clone.cpp dom.cpp 
	                  driver.cpp dump.cpp fa.cpp files.cpp fun.h 
	                  geysa.h grammar.cpp graph.cpp if1.cpp if1.h 
	                  inline.cpp list.cpp log.h loop.cpp misc.cpp 
	                  misc.h parse.cpp parse.h parse_structs.h 
	                  pdb.cpp pdb.h pnode.h prim.cpp region.h 
	                  ssu.cpp ssu.h ssu_extra.cpp sym.h v.g 
	chapel/compiler/AST/: expr.h link.cpp link.h stmt.h symbol.h 

---------------------------------------------------------------------------

08/04/04 11:30:12 -- jplevyak (a.k.a. n10253)

Log message:
	Missing include files

Modified files:
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

08/04/04 11:45:54 -- bradc

Log message:
	Improved dependences for make_prims.o which depends on geysa.h
	and all the header files that it includes.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

08/04/04 14:17:26 -- jplevyak (a.k.a. n10253)

Log message:
	second part of massive header reorganization
	geysa.h is now a minimal environment containing
	some basic containers, GC, types etc, but nothing
	particular to any module (new AST, analysis, etc.)
	Header files are now as independant as reasonable, and
	most headers are accessed directly in the .cpp files.
	This should improve recompilation time for small changes.

Modified files:
	chapel/compiler/: ast.cpp ast.h ast_cf.cpp cdb.cpp cfg.cpp 
	                  cg.cpp clone.cpp code.h dom.cpp driver.cpp 
	                  dump.cpp fa.cpp fa.h fun.cpp fun.h geysa.h 
	                  grammar.h graph.cpp if1.cpp inline.cpp 
	                  inline.h internal.h log.cpp log.h loop.cpp 
	                  loop.h misc.cpp pattern.cpp pattern.h pdb.cpp 
	                  pdb.h pnode.cpp pnode.h prim.cpp prim.h 
	                  region.cpp region.h scope.cpp ssu.cpp sym.h 
	                  var.cpp 
	chapel/compiler/make/: Makefile.compiler.head 

---------------------------------------------------------------------------

08/04/04 15:40:25 -- bradc

Log message:
	A bunch of changes designed to get an initial 2D domain/array
	code through the compiler.  It's not quite there yet, but close
	and stable (and I'm getting distracted by other things, so time
	to check in):
	
	* added ability to query an Expr or Type's rank() (only
	partially implemented) -- the idea being that scalars are rank
	0 and arrays are whatever rank they are.  (There's some
	question about what an array of an array's rank should be, but
	we'll cross that bridge when we get there...)
	
	* Added basic implementations of typeInfo() and codegen() for
	ArrayRef expressions.
	
	* Improved typeInfo() for DomainExpr expressions
	
	* Added some basic codegen() for ForLoopStmt's
	
	* Improved the implementation of VarDefStmt's codegen() method.
	
	* Implemented codegenDefaultFormat() for arrays, since they
	want to generate strings for their element types, not the
	array as a whole.
	
	* Added some stuff to the runtime: float types, some basic array
	code, basic forall loop macros, 2D domains.  Lots of this stuff
	needs to be generalized and/or emitted on an as-needed basis,
	but it seemed easier to lay in some specific instantiations
	first and generalize later.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp expr.h stmt.cpp stmt.h 
	                      symbol.cpp type.cpp type.h 
	chapel/runtime/include/: chplio.h chpltypes.h domain.h stdchpl.h 
	chapel/runtime/src/: Makefile chplio.c domain.c 
	chapel/test/trivial/bradc/: conditional.chpl 
Added files:
	chapel/runtime/include/: array.h forall.h 
	chapel/runtime/src/: array.c 

---------------------------------------------------------------------------

08/04/04 15:49:31 -- bradc

Log message:
	Oops, this one snuck in with that last check-in accidentally.
	Reverting.

Modified files:
	chapel/test/trivial/bradc/: conditional.chpl 

---------------------------------------------------------------------------

08/04/04 15:54:09 -- jplevyak (a.k.a. n10253)

Log message:
	regularize include files for generated files

Modified files:
	chapel/compiler/: chpl.g parse.h v.g 
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

08/04/04 16:09:38 -- jplevyak (a.k.a. n10253)

Log message:
	make inclusion of ast.h explicit for all files so that this can
	be abstracted to allow for different types of AST's.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h ast.cpp ast.h 
	                  ast_cf.cpp cg_funs.cpp clone.cpp codegen.cpp 
	                  datatype.cpp datatype.h dump.cpp fa.cpp fa.h 
	                  fun.cpp graph.cpp inline.cpp parse.h prim.cpp 
	                  sym.h 

---------------------------------------------------------------------------

08/04/04 16:10:42 -- jplevyak (a.k.a. n10253)

Log message:
	oops, forgot the new file

Added files:
	chapel/compiler/: prim_data_incs.h 

---------------------------------------------------------------------------

08/05/04 12:35:40 -- bradc

Log message:
	Thanks to John's refactoring of include files for generated
	source code yesterday, this change improves our Makefiles
	so that (I believe) dependences will be correct for all
	generated source.  The one caveat is that if the third-party
	code changes, I don't think it's guaranteed that generated
	sources will correctly recompile.  This seemed like a
	reasonable step to take given that the third-party stuff
	is reasonably static, but the moral would be, if you remake
	your third-party directory, you might want to do a make
	clean in the compiler directory to be absolutely safe.
	
	The general strategy is that dummy .cpp files were introduced
	that #include only the single header file that is included
	by each generated source file, our make depend step is run
	on the .cpp file, and the output is sed-ited to define a
	Makefile variable.  Dependences are then added for the .o
	files for the generated files based on these variables to
	get the dependences correct.  This is actually what we
	were doing previously with geysa.h, but with John's recent
	refactoring of headers, this logic needed to be reproduced
	for other files rather than geysa.h.
	
	Since this doesn't use any new Makefile technology, I don't
	expect this to cause any problems for people, but if it does
	(or if you find things aren't getting remade when they should),
	give a shout.

Modified files:
	./: Makefile 
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	chapel/runtime/: Makefile 
Added files:
	chapel/compiler/: parse_incs.cpp prim_data_incs.cpp 
Removed files:
	chapel/compiler/: geysa.cpp 

---------------------------------------------------------------------------

08/05/04 16:43:51 -- jplevyak (a.k.a. n10253)

Log message:
	massive reorganization
	created new ParseAST as a subclass of the abstract superclass AST which
	will encapsulate the new AST (and the old AST) from the point of view of
	analysis, graphing, and dumping.
	Many files are converted, but a few functions still have to
	be reorganized.  In particular, codegen and inlining.  I have
	tried to callout these cases by using dynamic_cast<ParseAST*>

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h ast_cf.cpp cg_funs.cpp 
	                  chpl.g clone.cpp clone.h codegen.cpp codegen.h 
	                  driver.cpp dump.cpp dump.h fa.cpp 
	                  fa_extras.cpp fun.cpp grammar.cpp grammar.h 
	                  graph.cpp graph.h inline.cpp misc.cpp 
	                  parse.cpp parse.h parse_structs.h prim.cpp 
	                  prim.h sym.h v.g 
Added files:
	chapel/compiler/: parse_ast.cpp parse_ast.h 

---------------------------------------------------------------------------

08/05/04 19:58:01 -- shannon

Log message:
	Added the codegen method for the if-then-else statement.  Updated
	the tests to reflect the currently-supported syntax for
	conditionals.  Added the --newast compiler option to several
	more test directories.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/test/trivial/bradc/: conditional.chpl 
Added files:
	chapel/test/trivial/bradc/: COMPOPTS 
	chapel/test/trivial/bradc/arrinit/: COMPOPTS 
	chapel/test/trivial/bradc/write/: COMPOPTS 

---------------------------------------------------------------------------

08/06/04 13:07:53 -- bradc

Log message:
	Switched new parser/AST over to be the default.  The old AST
	is automatically selected when compiling .v source files, or
	when using the --oldast flag.  Switched the COMPOPTS files
	in the test hierarchy to reflect this reversal (removed
	--newast from the trivial directories and added --oldast to
	John's directories that contain .chpl files).
	
	This required two hacks to get around types that haven't been
	inferred.  In the following cases, when the type is unknown,
	it's been hardwired to integer:
	- unknown parameter types
	- write()'s of unknown types
	
	This check in also removed the interactive removal of the
	log file when running start_test.

Modified files:
	chapel/compiler/: driver.cpp 
	chapel/compiler/AST/: expr.cpp symbol.cpp symbol.h type.cpp 
	chapel/test/: start_test 
	chapel/test/flowanalysis/jplevyak/: COMPOPTS 
	chapel/test/lowlevelcg/jplevyak/: COMPOPTS 
	chapel/test/parsing/jplevyak/: COMPOPTS 
	chapel/test/trivial/bradc/functions/: mutrec.chpl 
	chapel/test/trivial/bradc/protoast/: COMPOPTS 
	chapel/test/trivial/bradc/protoast/codegen/: COMPOPTS 
Removed files:
	chapel/test/trivial/bradc/: COMPOPTS 
	chapel/test/trivial/bradc/arrinit/: COMPOPTS 
	chapel/test/trivial/bradc/write/: COMPOPTS 
	chapel/test/trivial/shannon/: COMPOPTS 

---------------------------------------------------------------------------

08/06/04 14:09:10 -- jplevyak (a.k.a. n10253)

Log message:
	Moved ParseAST implementation into parse_ast.cpp
	Encapsulated ->pathname and ->line into Sym and Code.

Modified files:
	chapel/compiler/: ast.cpp ast.h clone.cpp code.h dump.cpp 
	                  fa_extras.cpp fun.cpp fun.h graph.cpp if1.cpp 
	                  misc.cpp parse_ast.cpp parse_ast.h sym.h 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 

---------------------------------------------------------------------------

08/06/04 16:32:46 -- bradc

Log message:
	Implemented an AST traversal framework and a few tiny
	tests to convince myself that it was working at least
	a little bit.  The scheme is as follows:
	
	ILink is a superclass of all the new AST classes.  It
	would've been called "Link" except that John had already
	used that name.  The "I" stands for "inheritance-based"
	(because template-based would be the other way to do it,
	but I've been trying to avoid templates).
	
	The ILink class now supports a traverse() method which
	is meant to walk around things in a reasonably
	intelligent manner.  Call it on a statement, and it
	will traverse the components of that statement (Exprs,
	Symbols, Types), as well as the statements that follow
	it.  Call it on an Expr, Symbol, or Type, and it will
	do similarly.
	
	The traverse() method takes a single argument which is
	an instance of a subclass of the Traversal class
	(implemented in the new files traversal.h and traversal.cpp).
	The idea is that anyone who wants to write a traversal of
	the AST will subclass Traversal, implementing methods that
	implement the traversal they want to do.  The Traversal
	class is quite abstract and looks like this:
	
	class Traversal {
	public:
	bool exploreStmts;
	bool exploreExprs;
	bool exploreSymbols;
	bool exploreTypes;
	
	Traversal(void);
	
	virtual void preProcessStmt(Stmt* stmt);
	virtual void postProcessStmt(Stmt* stmt);
	virtual void preProcessExpr(Expr* expr);
	virtual void postProcessExpr(Expr* expr);
	virtual void preProcessSymbol(Symbol* sym);
	virtual void postProcessSymbol(Symbol* sym);
	virtual void preProcessType(Type* type);
	virtual void postProcessType(Type* type);
	};
	
	Note that the methods are not pure virtual, so
	that you don't have to define all of these methods.
	
	Each of the four main components of the AST
	(Stmt, Expr, Symbol, and Type) has two methods
	associated with it: one that processes the
	class before all the things it contains, and a
	second that processes it after all the things
	it contains.  Thus, one can initialize state in
	the "pre" method and analyze it in the "post"
	method, or simply use pre alone (or post alone),
	or ...
	
	The four booleans indicate whether or not to
	explore the components that make the thing up.
	By default they are all set to true.  For
	example, if you merely wanted to explore a list
	of statements without diving into all of their
	internals, you would set exploreStmts to false,
	which would cause the traversal to merely walk
	the statement list that you point it at.  If
	you wanted to dive into certain statement types
	(say "write()" statements) but not others, you
	could do that explicitly by making your pre-/post-
	ProcessStmt() calls traverse the arguments
	explicitly.  In simple traversals, these booleans
	will probably be set once in the constructor and
	never changed.  More complex ones could change
	them as they go, though the concept frightens me
	a bit.
	
	Note that the traversal may contain cycles that
	I haven't debugged yet.  I found a few, but haven't
	run traversals on all the codes that we've written
	(and obviously there are lots of codes we haven't
	written yet).  There's also a chance that it may
	iterate over things in a weird order or multiple
	times, though I think I've weeded out the most
	egregious examples of this.
	
	The files findUnknownTypes.cpp/h contain two
	sample traversals -- one simply prints statements
	as the traversal comes to them; the second is
	slightly more interesting -- it walks around
	looking for symbols of type dtUnknown and complains
	about them (eventually, this is intended to call
	down to the low-level stuff when it finds such
	symbols to ask it what their types should be and
	fix them up, but for now it just complains).  It
	also has a method that will print out expressions
	whose typeInfo() method returns dtUnknown, but
	that is currently commented out.
	
	Feel free to try out at your own peril -- I think
	you should get something interesting and useful,
	but perhaps not something perfect.  When I get
	back, I'll continue to make use of this and debug
	it in the process.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: Makefile.share expr.cpp expr.h link.h 
	                      stmt.cpp stmt.h symbol.cpp symbol.h 
	                      symtab.cpp type.cpp type.h 
	chapel/test/trivial/bradc/protoast/codegen/: .cvsignore 
Added files:
	chapel/compiler/AST/: findUnknownTypes.cpp findUnknownTypes.h 
	                      traversal.cpp traversal.h 

---------------------------------------------------------------------------

08/09/04 14:03:07 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed regression problem by using filenames instead of pathnames
	for the flow analysis log.
	Continued work on connecting analysis to new AST with Sym regorganization.

Modified files:
	chapel/compiler/: Makefile c_runtime.h cg.cpp clone.cpp code.h 
	                  driver.cpp dump.cpp fa.cpp fa_extras.cpp 
	                  fun.cpp fun.h graph.cpp if1.cpp parse_ast.cpp 
	                  prelude.v sym.h 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs2.v cs3.good 
	                                    cs3.v cs4.good cs5.good 
	                                    cs6.good destruct.good 
	                                    destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 

---------------------------------------------------------------------------

08/09/04 14:09:55 -- jplevyak (a.k.a. n10253)

Log message:
	Add file for Sym methods

Added files:
	chapel/compiler/: sym.cpp 

---------------------------------------------------------------------------

08/11/04 10:14:27 -- jplevyak (a.k.a. n10253)

Log message:
	Reorganize Sym class in preparation for port to new AST

Modified files:
	chapel/compiler/: ast_cf.cpp cg.cpp cg_funs.cpp clone.cpp 
	                  driver.cpp dump.cpp fa.cpp fa_extras.cpp 
	                  fun.cpp fun.h graph.cpp if1.cpp num.h 
	                  parse_ast.cpp parse_ast.h pattern.cpp prim.cpp 
	                  sym.cpp sym.h v.g var.h 
	chapel/compiler/cast/: cast.cpp 

---------------------------------------------------------------------------

08/12/04 13:02:17 -- jplevyak (a.k.a. n10253)

Log message:
	Fix tests for latest change to Sym

Modified files:
	chapel/test/flowanalysis/jplevyak/: dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 

---------------------------------------------------------------------------

08/16/04 16:14:46 -- bradc

Log message:
	* got first multidimensional domain/array code compiling through the
	compiler correctly.  There are currently things specialized that
	should be generalized in the runtime -- in particular, the definition
	of array descriptors and their supporting routines for initialization
	and output -- but this is a start.
	
	* fixed codegen for octal literals -- we currently don't have a notion
	of octal literals in Chapel, so care has to be taken when generating
	such literals in our C code so that the C compiler doesn't interpret
	them as such.
	
	* added tests to lock in this behavior

Modified files:
	chapel/compiler/: .cvsignore 
	chapel/compiler/AST/: TODO expr.cpp expr.h stmt.cpp 
	chapel/runtime/include/: array.h chplio.h 
	chapel/runtime/src/: array.c chplio.c 
Added files:
	chapel/test/trivial/bradc/: octalliteral.chpl octalliteral.good 
	chapel/test/trivial/bradc/domarr/: .cvsignore domarr.chpl 
	                                   domarr.good 

---------------------------------------------------------------------------

08/16/04 17:06:14 -- bradc

Log message:
	Added a Tuple subclass to the Expr class hierarchy.  Currently,
	parenthesized, comma-separated expressions are stored as Tuples.
	Eventually, we'll want to relax the requirement that parenthesis
	be used to define a tuple, but I didn't do it this time around.
	
	Added the ability to format expressions fed to a write statement
	by supporting a 2-tuple argument format in which the first
	element of the tuple is a format string and the second element
	is the argument.  Thus:
	
	write(a, b, c);
	
	will write out the a, b, and c arguments using some reasonable
	default formatting.  If the user wanted to control this
	formatting better, they could use:
	
	write(("%.2d", a), b, ("%12.6f", c));
	
	which would format a as a %.2d integer, use the default formatting
	for b, and format c as a %12.6f float.  The formats are currently
	identical to those supported by C.  Note that if the argument
	expression (a or c in this example) is an array, the formatting
	is applied to every element in the array.

Modified files:
	chapel/compiler/AST/: chapel.y expr.cpp expr.h 
	chapel/test/trivial/bradc/domarr/: .cvsignore 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/test/trivial/bradc/: formatoutput.chpl formatoutput.good 

---------------------------------------------------------------------------

08/16/04 17:25:29 -- bradc

Log message:
	Implemented typeInfo() for CastExprs.
	
	Added a test that creates a domain using an enumerated
	type.

Modified files:
	chapel/compiler/AST/: expr.cpp expr.h 
Added files:
	chapel/test/trivial/bradc/domarr/: enumarray.chpl enumarray.good 

---------------------------------------------------------------------------

08/16/04 18:11:39 -- bradc

Log message:
	Improved the testing system so that the -valgrind flag uses
	valgrind not only to test the compiler, but also the generated
	binary (when one is created by the test).  This new feature
	may be suppressed for a particular subdirectory by adding a
	NOVGRBIN file to the directory in question, which will suppress
	the use of valgrind on the generated binary.  I added one of
	these files to John's lowlevelcg directory since valgrinding
	its binaries is not as important (and, since they use GC, it
	raises difficulties even if we did want to valgrind it).
	
	With this change, found a subtle bug in some of the I/O code
	for arrays that I had just checked in, and updated output
	to reflect the fix.

Modified files:
	chapel/runtime/src/: chplio.c 
	chapel/test/: start_test sub_test 
	chapel/test/trivial/bradc/: formatoutput.good 
	chapel/test/trivial/bradc/domarr/: enumarray.good 
Added files:
	chapel/test/lowlevelcg/jplevyak/: NOVGRBIN 

---------------------------------------------------------------------------

08/16/04 18:16:03 -- bradc

Log message:
	Ooops, previous check-in had a problem that I didn't detect
	because I'd only tested it on a directory with a NOVGRBIN
	file...

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

08/18/04 17:55:39 -- shannon

Log message:
	Removed repeat...until from the scanner and parser, since
	this is no longer supported.  Now that there are only
	two types of while loops, while...do and do...while,
	we no longer need to enumerate the type.  Changed this
	to a boolean throughout.  Also changed the switch statement
	to an if-else in the codegen and print methods of
	whileLoopStmt for the same reason.  Added a test to the
	suite.

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp stmt.cpp 
	                      stmt.h 
Added files:
	chapel/test/trivial/shannon/: whileLoop.chpl whileLoop.good 

---------------------------------------------------------------------------

08/20/04 13:56:35 -- bradc

Log message:
	Removing a line from the nightly regression test script that
	was inserted as a debugging measure but had the effect of
	inadvertantly preventing the /tmp directory created for the
	tests from getting reclaimed.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/20/04 14:16:20 -- bradc

Log message:
	Two very minor changes:
	
	* made it so that when the compiler is built, it is copied from
	the platform-specific subdirectory to the compiler directory
	(rather than being symbolically linked).  This was causing
	shannon and me some grief since our platform-specific
	directories are stored on /ptmp which isn't exported.
	
	* added no-op statements to the compiler and a test for them.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: chapel.y stmt.cpp 
	chapel/runtime/include/: stdchpl.h 
Added files:
	chapel/runtime/include/: chplboolean.h 
	chapel/test/trivial/bradc/: noop.chpl noop.good 

---------------------------------------------------------------------------

08/20/04 15:51:05 -- bradc

Log message:
	Inserted a template function for the ILink class which
	collects siblings of the template type and returns them
	in a Vec<> argument by reference per John's request.

Modified files:
	chapel/compiler/: createAST.cpp vec.h 
	chapel/compiler/AST/: TODO link.h 

---------------------------------------------------------------------------

08/20/04 16:30:23 -- bradc

Log message:
	Updated the Makefile so that whenever the compiler is built,
	ebrowse is run on the sources to create a BROWSE file in the
	compiler directory.  If you're not familiar with EBROWSE, it's
	a surprisingly nice class browser for emacs.  Mouse over a
	class definition to get a list of things you can do (expand
	collapse parts of the tree, list methods, jump to source code,
	etc.)  It's pretty sweet.  Let me know if you have any
	questions about it.  (NOTE: I also drop an AST-specific BROWSE
	file into the AST directory to prune away John's stuff for my
	own reference).

Modified files:
	chapel/compiler/: .cvsignore Makefile 
	chapel/compiler/AST/: .cvsignore 

---------------------------------------------------------------------------

08/23/04 17:29:25 -- bradc

Log message:
	Added a new common base class for all AST (Stmt, Expr, Symbol, Type)
	classes named "BaseAST".  Currently, this only has a single member
	variable, "astType" which is an enumerated type (defined in baseAST.h)
	indicating what class the class instance is.  This is designed to
	avoid the overhead of using the typeid() feature and to support switch
	statements over AST node types.
	
	Wrote a traversal routine that verifies that all classes have their
	enumeration set as expected and ran this over the current test tree
	to make sure I had set things up as intended, but then commented
	this traversal out for the check-in.  Eventually we may want to make
	this a flag or (better) support a passlist that can be specified
	dynamically to indicate what passes should be run for a particular
	test.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: Makefile.share chapel.lex chapel.y 
	                      expr.cpp expr.h stmt.cpp stmt.h symbol.cpp 
	                      symbol.h type.cpp type.h 
Added files:
	chapel/compiler/AST/: baseAST.cpp baseAST.h verifyASTType.cpp 
	                      verifyASTType.h 

---------------------------------------------------------------------------

08/23/04 21:36:54 -- jplevyak (a.k.a. n10253)

Log message:
	Added code to the new AST to retrieve Symbols/Types/Stmts/Exprs in a generic way.
	Modified constant folding to be more generic (and potentially reusable).
	Added ASymbol and AInfo classes which are the shadow objects for
	analysis on the new AST.
	Added code to collect and shodow symbols using the retrival code.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h ast_cf.cpp driver.cpp 
	                  fa.cpp sym.h 
	chapel/compiler/AST/: baseAST.cpp baseAST.h expr.cpp expr.h 
	                      stmt.cpp stmt.h symbol.cpp symbol.h 
	                      type.cpp type.h 

---------------------------------------------------------------------------

08/24/04 11:12:15 -- jplevyak (a.k.a. n10253)

Log message:
	Implemeneted HashMap, which is a map which takes hash and comparison functions
	as a template parameter.

Modified files:
	chapel/compiler/: analysis.cpp map.cpp map.h misc.cpp 
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp type.h 

---------------------------------------------------------------------------

08/24/04 12:12:31 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug in HashMap.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h ast.cpp ast.h map.cpp 
	                  map.h 
	chapel/compiler/AST/: stmt.h 

---------------------------------------------------------------------------

08/24/04 12:51:28 -- bradc

Log message:
	Made some improvements to the symboltable and symbols.
	
	In particular, I hadn't yet linked symbols back to their scope.
	Have now done so -- each Symbol has a "scope" link of type
	SymScope* (defined in symscope.h) which links back to the scope
	in which it was defined.  The most useful bits of information
	in this scope are:
	
	(1) its "type" an enumeration of type scopeType that indicates
	whether the scope is:
	
	SCOPE_INTRINSIC == builtins at the global level
	SCOPE_FILE      == defined at the file level
	SCOPE_PARAM     == a function's parameter scope
	SCOPE_FUNCTION  == a function's top-level scope
	SCOPE_LOCAL     == a local scope to a function (compound stmt)
	SCOPE_FORLOOP   == the scope for a for loop's indices
	
	There will be more scope types as we move forward (SCOPE_CLASS is
	notably absent currently...).
	
	(2) its "level" -- an integer indicating the depth of the scope.
	
	-1 == SCOPE_INTRINSIC
	0 == SCOPE_FILE
	>0 == some scope within the file
	
	Note that this numbering has changed by 1 in this checkin
	(SCOPE_INTRINSIC used to be 0).  For convenience, the
	SCOPE_INTRINSIC and SCOPE_FILE symbols are defined to be -1
	and 0, respectively.
	
	In this check-in, I also moved away from STL maps and strings
	to avoid problems with GC that I hadn't anticipated initially,
	but which has been on my TODO list since I had the realization
	one morning that I was probably causing problems in this
	respect.  I'm now using John's HashMap class instead.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp stmt.cpp symbol.cpp symbol.h 
	                      symtab.cpp symtab.h 
Added files:
	chapel/compiler/AST/: symscope.h 

---------------------------------------------------------------------------

08/24/04 13:46:48 -- shannon

Log message:
	Modified the operator precedence per the current Chapel
	specifications.
	
	Added a test of precedence of binary operators which
	consists of many small computations in varying orders.

Modified files:
	chapel/compiler/AST/: chapel.y 
Added files:
	chapel/test/trivial/shannon/: compSampler.chpl compSampler.good 

---------------------------------------------------------------------------

08/24/04 13:54:03 -- shannon

Log message:
	Woops!  I meant to include these in the last commit.
	These test output files were changed to reflect
	the new operator precedence.

Modified files:
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

08/24/04 14:24:46 -- jplevyak (a.k.a. n10253)

Log message:
	Added new ChainHashMap which is robuts with respect to hash collisions.

Modified files:
	chapel/compiler/: fa.cpp fa.h if1.h map.cpp map.h pattern.cpp 

---------------------------------------------------------------------------

08/24/04 15:28:19 -- jplevyak (a.k.a. n10253)

Log message:
	add ChainHashMap::get_keys and ChainHashMap::get_values

Modified files:
	chapel/compiler/: analysis.cpp map.cpp map.h 

---------------------------------------------------------------------------

08/24/04 15:53:48 -- bradc

Log message:
	John pointed out that I wasn't being particularly consistent
	about storing function return types as dtVoid if they didn't
	return anything, using a new NullType() instead from time to
	time.  Unified this so that dtVoid is now the return type from
	all functions that return nothing.  NullType() is really
	meant to be a sentinel in place of a NULL Type* pointer (and
	its use is very limited as a result).

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: chapel.y stmt.cpp symbol.cpp type.cpp 

---------------------------------------------------------------------------

08/24/04 15:56:58 -- bradc

Log message:
	Per John's suggestion, changed my use of hashtable for the
	symboltable from a HashMap to a ChainHashMap.

Modified files:
	chapel/compiler/AST/: symscope.h symtab.cpp 

---------------------------------------------------------------------------

08/25/04 13:08:03 -- jplevyak (a.k.a. n10253)

Log message:
	Code to import Types and builtins from the new AST to analysis.

Modified files:
	chapel/compiler/: analysis.cpp ast.cpp ast.h clone.cpp 
	                  driver.cpp dump.cpp fa.cpp parse_ast.cpp sym.h 
	chapel/compiler/AST/: type.cpp 
Removed files:
	chapel/compiler/: internal.h 

---------------------------------------------------------------------------

08/25/04 17:04:34 -- bradc

Log message:
	Reworked the way I was handling "NullClasses", based on my continuing
	worries that I'd taken a bad approach and discussions with John
	yesterday that made me more sure of it the more I thought about it.
	The goal behind this work (both the past approach and my new one) was
	to avoid using NULL pointers as much as possible in hopes of catching
	erroneous conditions via method calls to inappropriate objects rather
	than Seg Faults.  Thus, anywhere one would normally use a "NULL"
	pointer value, the idea was that you'd use this mechanism to protect
	yourself.
	
	My approach up until today had been to have a subclass of any such
	class that I was concerned about.  So for example, the Expr class had
	a NullExpr class which would indicate a Null Expr pointer.  All
	classes had an isNull() method which would indicate whether or not
	they were a NullClass (defined to return false at one of the base
	classes, and over-ridden by all of the NullClasses).
	
	The disadvantages to this approach that were becoming increasingly
	apparent to me were: (1) there was a fair amount of effort to
	implementing one of these NullClasses -- the class definition,
	defining a bunch of standard virtual functions, etc.  This was bad
	enough that at some point I started getting very lazy about
	introducing them and using NULL instead, defeating the entire point;
	(2) the runtime overhead of storing a new class instance every time I
	wanted one of these NULL classes (I would create them dynamically on
	an as-needed basis; and (3) as John noticed yesterday, I wasn't being
	particularly careful about when I used them, and started using them in
	places other than where I'd originally intended (in particular to
	indicate void return types -- though I'm still waffling on that one --
	and to represent no-op statements).
	
	For these reasons, I revisited the uses, thought about it a lot last
	night, and have removed all NullClasses from the compiler.  What I've
	done instead is create a single, special instance of each class in
	question called "nil<Class>" (e.g., nilExpr).  The name is not meant
	to be anything deep, but is meant to be easily distinguished from
	NullClass, and partially to reflect David's concept of "nil" in
	Chapel.
	
	The isBool() methods are still supported, but are now implemented by
	comparison via the appropriate nil variable rather than via overridden
	functions that simply return true or false.  This approach seems to be
	lighter weight to implement (addressing problem 1 above), eliminates
	all but O(1) of the runtime overhead, supports quick pointer
	comparisons if desired, and caused me to revisit all uses of the
	NullClasses to see if they made sense.  In doing so, I'm now thinking
	more and more that John is probably right about the thought that
	dtVoid and nilType are really the same thing (assuming we have no
	"void" type in Chapel), but haven't made that change yet.
	
	The main disadvantage to this approach is the possibility that nil
	variables might be corrupted by compiler bugs, leading to subtle
	internal problems downstream.  I'm optimistically hoping that this
	won't be the case, but have implemented a verifyNilsUncorrupted()
	function (in nils.cpp) which can be run to assert that the nil
	variables still have the values they ought to (this is currently run
	after codegen(), but can obviously be inserted by developers in other
	places as an assertion while debugging).
	
	The main semantic change that goes into this switch is that I've now
	introduced a NoOpStmt class, since NullStmt was overloaded for this
	purpose previously.  As with dtVoid, there's some question as to
	whether this is overkill, but for now I decided to represent no-ops in
	the user code explicitly rather than using nilStmt.
	
	As a side change to this, I introduced an "id" field to the BaseAST
	class so that all objects created in the AST will be uniquely
	identified.  No current plans for this, but it seemed like a good
	thing to have in place before it is needed.

Modified files:
	chapel/compiler/: analysis.cpp codegen.cpp createAST.cpp 
	chapel/compiler/AST/: Makefile.share baseAST.cpp baseAST.h 
	                      chapel.y expr.cpp expr.h link.cpp link.h 
	                      main.cpp stmt.cpp stmt.h symbol.cpp 
	                      symbol.h symtab.cpp symtab.h type.cpp 
	                      type.h verifyASTType.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	chapel/compiler/AST/: nils.cpp nils.h 

---------------------------------------------------------------------------

08/26/04 13:17:28 -- bradc

Log message:
	Some minor Makefile changes.  Per a discussion with John, fixed up the
	way the Makefile in the compiler/test directory works by having it
	copy sources from the compiler directory into the test directory and
	remaking them there -- this fixes a dependence problem that we were
	having in that directory.  Also removed symbolic linking of targets
	from the subdirectory Makefiles, which I had missed when I did this
	for the compiler/Makefile.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/cast/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: Makefile 
	chapel/compiler/test/: .cvsignore Makefile 

---------------------------------------------------------------------------

08/26/04 15:44:30 -- bradc

Log message:
	Added a table of built-in types (builtinTypes) for
	John's benefit.  These are types which are built
	into the language, and currently includes booleans,
	integers, floats, complexes, strings, and locales.
	I also threw in the "unknown" type placeholder,
	though am not certain that this should go into the
	table (John, let me know if you have an opinion),
	as well as the "void" type (which I continue to
	think should be switched to nilType as John suggested).
	
	As part of this addition, I pulled all the type
	keywords out of the lexer and parser, introduced
	them as symbols in the implicit scope, and moved
	boolean from being an enumerated type defined in
	the prelude to being a built-in type (it was
	sortof straddling the two erroneously previously).

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y prelude.chpl 
	                      symtab.cpp symtab.h type.cpp type.h 

---------------------------------------------------------------------------

08/26/04 15:57:02 -- bradc

Log message:
	Minor check-in renaming boolean in the runtime and fixing
	"make depend" for the runtime.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: chpltypes.h stdchpl.h 
	chapel/runtime/src/: Makefile 
Removed files:
	chapel/runtime/include/: chplboolean.h 

---------------------------------------------------------------------------

08/26/04 17:34:45 -- bradc

Log message:
	Started working on implementing SymScope context pointers
	that link a SymScope back to the context in which it was
	declared.  Each SymScope now has two context variables:
	
	stmtContext -> points to the statement context
	symContext -> points to the symbol context
	
	For code like this:
	
	function foo(x, y) { /* scope 1 */
	var a;
	{ /* scope 2 */
	var b;
	
	forall i { ... }
	}
	}
	
	These are currently set up as follows:
	stmtContext           symContext
	SCOPE_INTRINSIC   nilStmt               nilSymbol
	SCOPE_FILE        nilStmt               nilSymbol
	SCOPE_PARAM       foo's FnDefStmt       foo's FnSymbol
	SCOPE_FUNCTION    scope 1's BlockStmt   foo's FnSymbol
	SCOPE_LOCAL       scope 2's BlockStmt   nilSymbol
	SCOPE_FORLOOP     forall stmt           nilSymbol
	
	Looking forward for classes:
	
	class bar { ... }
	
	we should imagine:
	
	SCOPE_CLASS       bar's TypeDefStmt     bar's ClassSymbol
	
	I'm toying with whether or not it would make sense to have
	multiple subclasses of SymScope for each context so that
	these pointers could be more specific than generic Stmt*
	and Symbol* pointers, but am not convinced that it would
	get rid of the necessity for dynamic casts (might just move
	them from the access of the context variables to the grabbing
	of the scope from the variable, which seems like it could be
	a wash).  If anyone has a stronger opinion, let me know.

Modified files:
	chapel/compiler/AST/: chapel.y symscope.h symtab.cpp symtab.h 

---------------------------------------------------------------------------

08/26/04 18:50:58 -- bradc

Log message:
	Updated the table from my last checkin so that all scopes internal
	to a function have their symContext pointing to that function.
	This involved a nice refactoring of complicated scope
	pushing/popping/context-setting code out of chapel.y and into the
	symboltable code, which seems appropriate and attractive.  Here's
	the new table:
	
	scope type        stmtContext           symContext
	------------------------------------------------------
	SCOPE_INTRINSIC   nilStmt               nilSymbol
	SCOPE_FILE        nilStmt               nilSymbol
	SCOPE_PARAM       foo's FnDefStmt       foo's FnSymbol
	SCOPE_FUNCTION    scope 1's BlockStmt   foo's FnSymbol
	SCOPE_LOCAL       scope 2's BlockStmt   foo's FnSymbol
	SCOPE_FORLOOP     forall stmt           foo's FnSymbol

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: chapel.y nils.cpp symbol.cpp symbol.h 
	                      symtab.cpp symtab.h 

---------------------------------------------------------------------------

08/27/04 10:23:51 -- bradc

Log message:
	I believe I've just changed
	  the CVS checkin scripts
	    so that leading whitespace in log messages
	      will be preserved.
		This change has no other substance.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

08/27/04 11:57:38 -- jplevyak (a.k.a. n10253)

Log message:
	Interm checkin for porting analysis to the new AST.
	Dead code elimination in CFG construction.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h cfg.cpp cg.cpp fa.cpp 
	                  if1.cpp parse_ast.cpp parse_ast.h sym.h var.h 
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/flowanalysis/jplevyak/: cs1.good 
Added files:
	chapel/test/lowlevelcg/jplevyak/: cs2.good cs2.v 

---------------------------------------------------------------------------

08/27/04 12:40:18 -- bradc

Log message:
	Two changes here:
	
	(1) modified the Traversal class so that there are now two
	    booleans per major AST class (Stmt, Expr, Symbol, Type):
	    one that controls whether or not the class' siblings
	    should be explored (e.g., exploreSiblingStmts) and a
	    second which indicates whether children that are of a
	    given class type should be explored (e.g., exploreChildStmts
	    would control whether or not member variables that are
	    statements would be explored).  The goal here is to
	    offer more control over what is explored.  This may still
	    not be quite right -- it could be that we want
	    "exploreStmtChildren" instead, which would indicate whether
	    or not to look at any of a statement's children rather than
	    whether to explore children that are statements.  My goal
	    is to write John's getXXXs() methods using traversals, which
	    was the motivation for this change, and should probably
	    make it clearer which is preferable.
	
	(2) introduced a new subclass of Type -- TupleType -- which
	    stores the component types of a tuple type.  This doesn't
	    do much yet, but improves upon the previous storage of
	    tuple types by just linking the types together.

Modified files:
	chapel/compiler/AST/: baseAST.h chapel.y expr.cpp expr.h 
	                      link.cpp link.h stmt.cpp stmt.h symbol.cpp 
	                      symbol.h symtab.cpp traversal.cpp 
	                      traversal.h type.cpp type.h 
	                      verifyASTType.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

08/27/04 12:56:15 -- bradc

Log message:
	Added a back pointer for all statements "parentFn" that
	points to the function that contains it.  This may
	render the two context pointers yesterday redundant
	(the statement pointer may now suffice), but I'm leaving
	both in for now.

Modified files:
	chapel/compiler/AST/: loc.cpp stmt.cpp stmt.h symtab.cpp 
	                      symtab.h 

---------------------------------------------------------------------------

08/27/04 15:35:43 -- jplevyak (a.k.a. n10253)

Log message:
	Primitives which are operators are now called "operator"
	Some work on loops.

Modified files:
	chapel/compiler/: analysis.cpp ast.cpp ast.h builtin_symbols.h 
	                  fa.cpp parse_ast.cpp prelude.chpl prelude.v 
	                  prim.cpp prim_data.dat 
	chapel/test/flowanalysis/jplevyak/: badprimitive.v 

---------------------------------------------------------------------------

08/27/04 16:45:59 -- jplevyak (a.k.a. n10253)

Log message:
	Got the basic Expr's converted.

Modified files:
	chapel/compiler/: TODO analysis.cpp if1.cpp parse_ast.cpp 
	                  prim_data.dat 

---------------------------------------------------------------------------

08/27/04 17:47:08 -- bradc

Log message:
	Took another pass at cleaning up the Traversal mechanism, motivated by
	the work in the next paragraph.  Rather than continuing to document
	each incremental change, let me wait until I've converged slightly
	better, and I'll document it at that point.
	
	Used the new Traversal mechanism to write a GetStuff traversal which
	will walk around the AST grabbing Stmts/Exprs/Symbols/Types as
	directed by the client.  This is intended as a replacement of John's
	GetXXXX() routines if I can get them to a state which he finds
	reasonable and useful.  Again, I'll hold off on documenting this until
	I'm more sure that we've reached that reasonable state (it's currently
	not in use, and I'm checking it in simply as a sanity check before the
	weekend).
	
	Turned GC on for a few AST classes for which it had slipped through
	the cracks.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      link.cpp link.h stmt.cpp symbol.cpp 
	                      symscope.h traversal.cpp traversal.h 
	                      type.cpp 
Added files:
	chapel/compiler/AST/: getstuff.cpp getstuff.h testGetStuff.cpp 

---------------------------------------------------------------------------

08/30/04 15:53:25 -- bradc

Log message:
	Unified some inconsistencies in naming my enumerated
	types that John pointed out.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: chapel.y expr.h 

---------------------------------------------------------------------------

08/30/04 16:09:15 -- bradc

Log message:
	Removed SubDomainType and SubIndexType and implemented them
	by adding a parent link to DomainType which can be set to
	nilExpr for domains and indices that have no parent.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: baseAST.h chapel.y type.cpp type.h 
	                      verifyASTType.cpp 

---------------------------------------------------------------------------

08/30/04 16:14:45 -- bradc

Log message:
	Minor change: unified printWithType with printDef for
	variables...

Modified files:
	chapel/compiler/AST/: TODO stmt.cpp symbol.cpp symbol.h 

---------------------------------------------------------------------------

08/30/04 16:57:55 -- bradc

Log message:
	Cleaned up parsing of conditionals and added a dangling else
	test.

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y 
Added files:
	chapel/test/trivial/bradc/: danglingelse.chpl danglingelse.good 

---------------------------------------------------------------------------

08/30/04 17:06:31 -- bradc

Log message:
	Small refactoring of function definition functions to simplify
	things slightly.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: TODO symtab.cpp symtab.h 

---------------------------------------------------------------------------

08/30/04 17:34:28 -- bradc

Log message:
	Simply housecleaning.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp 
	chapel/test/trivial/bradc/domarr/: domarr.chpl 

---------------------------------------------------------------------------

08/31/04 11:27:33 -- jplevyak (a.k.a. n10253)

Log message:
	Added traversal and print code using getXXX functions.
	 -- test on chain.chpl with options chpl -vv --analyzenewast chain.chpl
	Finished code generation for Expr's (untested).

Modified files:
	chapel/compiler/: FILES analysis.cpp builtin_symbols.h fa.cpp 
	                  prelude.v prim_data.dat 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 
	chapel/test/lowlevelcg/jplevyak/: review3.good 
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

08/31/04 15:19:49 -- jplevyak (a.k.a. n10253)

Log message:
	Initialize builtin symbols in code instead of in the standard prelude.
	Use a generic "primitive" to allow transfer functions to be put
	in the translation module instead of in the analysis module.
	Test above with "print".

Modified files:
	chapel/compiler/: TODO analysis.cpp ast.cpp builtin_symbols.h 
	                  c_runtime.h driver.cpp fa.cpp fa.h 
	                  parse_ast.cpp pdb.cpp pdb.h prelude.chpl 
	                  prelude.v prim_data.dat 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 
	chapel/test/lowlevelcg/jplevyak/: review3.good 
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

08/31/04 18:07:09 -- bradc

Log message:
	Before making further changes to the parser, I wanted
	to clean what we've got up a bit to reduce the number
	of shift/reduce and reduce/reduce conflicts.  This
	represents the result of struggling with it for a few
	hours, and knocking the number of shift/reduces down by
	about 25%.  The main substantive change is that I switched
	to David's proposed cast syntax:
	
		expr : type
	
	rather than
	
		type(expr)
	
	for the time being.  Otherwise things should work about
	the same.
	
	Some other minor changes go in along with this, but are
	not worth mentioning, I think.

Modified files:
	chapel/compiler/: prim_data.dat 
	chapel/compiler/AST/: chapel.y expr.cpp expr.h getstuff.cpp 
	                      getstuff.h link.cpp symbol.cpp type.cpp 
	                      type.h 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 

---------------------------------------------------------------------------

09/01/04 13:51:53 -- jplevyak (a.k.a. n10253)

Log message:
	First new AST program through analysis.
	test/flowanalysis/newast/chain.chpl

Modified files:
	chapel/compiler/: Makefile TODO analysis.cpp analysis.h ast.cpp 
	                  ast.h driver.cpp fa_extras.cpp if1.cpp if1.h 
	                  parse_ast.cpp pattern.h pdb.cpp pdb.h 
	                  prim_data.dat 
	chapel/compiler/AST/: symscope.h symtab.cpp 
Added files:
	chapel/test/flowanalysis/newast/: CATFILES CLEANFILES COMPOPTS 
	                                  NOEXEC PREDIFF chain.chpl 
	                                  chain.good 

---------------------------------------------------------------------------

09/01/04 17:12:17 -- jplevyak (a.k.a. n10253)

Log message:
	4 more test cases working for analysis over the new AST.

Modified files:
	chapel/compiler/: analysis.cpp 
Added files:
	chapel/test/flowanalysis/newast/: arithmetic_ops.chpl 
	                                  arithmetic_ops.good 
	                                  assignment_expr.chpl 
	                                  assignment_expr.good 
	                                  bitwise_assignment.chpl 
	                                  bitwise_assignment.good 
	                                  compSampler.chpl 
	                                  compSampler.good 

---------------------------------------------------------------------------

09/02/04 13:06:00 -- jplevyak (a.k.a. n10253)

Log message:
	Analysis now working for a large number of the test cases.

Modified files:
	chapel/compiler/: analysis.cpp fa.cpp fa.h 
Added files:
	chapel/test/flowanalysis/newast/: bitwise_negation.chpl 
	                                  bitwise_negation.good 
	                                  bitwise_ops.chpl 
	                                  bitwise_ops.good 
	                                  conditional.chpl 
	                                  conditional.good 
	                                  danglingelse.chpl 
	                                  danglingelse.good deadvar.chpl 
	                                  deadvar.good declprintdom.chpl 
	                                  declprintdom.good 
	                                  declprintdom2.chpl 
	                                  declprintdom2.good 
	                                  declprintint.chpl 
	                                  declprintint.good 
	                                  declprintint2.chpl 
	                                  declprintint2.good 
	                                  equality_ops.chpl 
	                                  equality_ops.good 
	                                  logical_and.chpl 
	                                  logical_and.good 
	                                  logical_not.chpl 
	                                  logical_not.good mod.chpl 
	                                  mod.good octalliteral.chpl 
	                                  octalliteral.good 
	                                  pareninit.chpl pareninit.good 
	                                  printempty.chpl 
	                                  printempty.good 
	                                  printstring.chpl 
	                                  printstring.good 
	                                  relational_ops.chpl 
	                                  relational_ops.good 
	                                  shift_ops.chpl shift_ops.good 
	                                  unary_plusMinus.chpl 
	                                  unary_plusMinus.good 
	                                  whileLoop.chpl whileLoop.good 
	                                  writen.chpl writen.good 
	                                  writetwo.chpl writetwo.good 

---------------------------------------------------------------------------

09/02/04 15:14:07 -- bradc

Log message:
	Added some initial support for non-empty classes.  Classes can
	currently have bodies that are a list of statements (no filtering is
	done to determine if the statements are legal class body elements or
	not as of yet).  Classes that have member variables but no methods
	are currently code generated in a rudimentary fashion that works for
	some simple cases.
	
	In making this change, I hoisted the "." operator out of the
	SpecialBinOp case (which is a placeholder of sorts for things I
	haven't had time to deal with yet) and into a new subclass of Expr
	called MemberAccess which takes a base Expr and a Symbol member.
	Thus, an expression like:
	
	  a.x
	
	would have a base variable expression representing "a" and a member
	symbol represenging "x".  Note that x's symbol is not currently shared
	with the original symbol from the class definition because in general
	we can't determine a's type and therefore cannot find the correct x.
	Type inference should be able to help with this moving forward, though
	there are some cases that could be determined without type analysis
	(we'll see who gets to them first... :)
	
	Killed the BINOP_DOT enumeration as a result of this change and
	stubbed out code to handle this case in analysis.cpp for John to fix
	up as appropriate.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: TODO baseAST.h chapel.lex chapel.y 
	                      expr.cpp expr.h nils.cpp stmt.cpp 
	                      symtab.cpp symtab.h type.cpp type.h 
	                      verifyASTType.cpp 
	chapel/runtime/include/: stdchpl.h 

---------------------------------------------------------------------------

09/02/04 17:00:08 -- bradc

Log message:
	Fixed a bug that John found in which ArrayRef::typeInfo() was
	hitting an assertion due to an array type that had been given
	a user-defined name in mg-seq-concrete.chpl.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

09/03/04 11:46:03 -- bradc

Log message:
	Added an internal_prelude concept which will allow us
	to add symbols that are for internal use only and not
	visible to the user's code.  Currently this is populated
	with a coarse approximation to the array method that John
	requested (the precise definition couldn't be added
	currently due to lack of syntactic support in the
	front-end for method definitions outside of a class
	definition...  Consider this a placeholder.  The file
	currently lives in compiler/AST/internal_prelude.chpl.
	
	This internal prelude is stored in the symboltable as
	follows:
	
	  SCOPE_INTERNAL --sib-> SCOPE_INTRINSIC
	    --child-> ...          --child-> ...prelude symbols...
	                           --child-> SCOPE_FILE
	                                     ...userfile symbols...
	                           --child-> SCOPE_FILE
	                                     ...userfile symbols...
	
	Added a Symboltable::dump() method that will print out
	not just the currently visible symbols (as
	Symboltable::print() does), but all scopes defined in
	the symboltable; also added indentation for symboltable
	scopes when they are printed out to help parse them
	visually.
	
	Typical Symboltable::lookup() steps will only search up
	the scopes on the right until they hit the intrinsic
	scope.  To look up a symbol from the internal scope,
	use Symboltable::lookupInternal().
	
	This check-in also introduces new scopes for class
	definitions -- SCOPE_CLASS.  Instance variables and
	methods for classes will be defined in this scope.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: chapel.y nils.cpp symscope.h symtab.cpp 
	                      symtab.h type.cpp type.h 
Added files:
	chapel/compiler/AST/: internal_prelude.chpl 
	chapel/test/flowanalysis/newast/: .cvsignore 

---------------------------------------------------------------------------

09/03/04 14:28:08 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for EXPR_MEMBERACCESS.
	Print out functions in the AST in verbose mode.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: expr.cpp expr.h 

---------------------------------------------------------------------------

09/03/04 15:43:52 -- bradc

Log message:
	Stopped dropping prelude code on the ground and reorganized
	the symboltable to make a bit more sense.
	
	As a placeholder until a better multi-file compilation
	strategy takes place, tucked all AST code parsed out of
	the internal prelude into internalPreludeStmts, that
	parsed from the normal prelude into preludeStmts, and
	that corresponding to the (currently single) source file
	into program, as always.  Previously, code from the
	prelude files was dropped on the ground.  These variables
	are defined in createAST.h and createAST.cpp.
	
	Realized that in my last checkin, symbols defined by
	the compiler like "integer" were no longer being placed
	into a reasonable scope, so reorganized scopes as follows:
	
	SCOPE_INTRINSIC -- contains compiler defined things like integer
	  SCOPE_PRELUDE_INTERNAL -- contains internal prelude symbols
	  SCOPE_PRELUDE -- contains prelude symbols
	    SCOPE_FILE -- contains user symbols for first file
	    etc.

Modified files:
	chapel/compiler/: createAST.cpp createAST.h 
	chapel/compiler/AST/: chapel.y expr.cpp prelude.chpl symscope.h 
	                      symtab.cpp symtab.h yy.h 

---------------------------------------------------------------------------

09/03/04 16:06:36 -- jplevyak (a.k.a. n10253)

Log message:
	Updated DParser to the latest version (fixes some bugs).

Modified files:
	chapel/compiler/make_prims/: Makefile 
	chapel/third-party/dparser/d/: CHANGES Makefile d.h gram.c 
	                               gram.h grammar.g grammar.g.c 
	                               index.html make_dparser.c my.g 
	                               parse.c read_binary.c 
	                               read_binary.h util.c util.h 
	                               write_tables.c write_tables.h 
	chapel/third-party/dparser/d/python/: dparser.py dparser_wrap.c 
	                                      make_tables.c pydparser.h 
	chapel/third-party/dparser/d/python/tests/: test.py 
	chapel/third-party/dparser/d/verilog/: Makefile ambig.c main.c 
	                                       vparse.c 
Added files:
	chapel/third-party/dparser/d/: mkdparse.h test_parser.c 
Removed files:
	chapel/third-party/dparser/d/: x.c 

---------------------------------------------------------------------------

09/07/04 13:23:31 -- jplevyak (a.k.a. n10253)

Log message:
	Fix build problem with dparser which was breaking tests.
	
	Convert remaining oldast flow analysis tests to V or move
	to the newast directory (where appropriate).
	
	The codes from the first review are not simply mapped to V
	and do not compile with the new AST, these I have moved to
	test/reviews/jplevyak/*.chpl with NOTEST set.  We can
	decide what we want to do with these later.

Modified files:
	chapel/compiler/: grammar.cpp parse_ast.cpp parse_ast.h 
	                  prelude.v v.g 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good structtype.good 
	                                    var.good 
	chapel/third-party/dparser/d/: Makefile 
Added files:
	chapel/test/flowanalysis/newast/: var.chpl var.good var2.chpl 
	                                  var2.good 
	chapel/test/reviews/jplevyak/: NOTEST review1.chpl review2.chpl 
	                               review3.chpl 
	chapel/third-party/dparser/d/: mkdparse.c 
Removed files:
	chapel/test/flowanalysis/jplevyak/: cs4.chpl cs5.chpl 
	                                    review1.chpl review1.good 
	                                    review2.chpl review2.good 
	                                    review3.chpl review3.good 
	                                    var.chpl var2.chpl var2.good 

---------------------------------------------------------------------------

09/07/04 15:35:16 -- jplevyak (a.k.a. n10253)

Log message:
	Add back in code to handle empty BUILD_VERSION

Modified files:
	chapel/third-party/dparser/d/: Makefile 

---------------------------------------------------------------------------

09/07/04 17:15:24 -- jplevyak (a.k.a. n10253)

Log message:
	Add test code to print out types of Expresions in Functions for the
	new AST.
	Fix bug in type_info which prevented types form being found in new AST.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h parse_ast.h 

---------------------------------------------------------------------------

09/08/04 08:18:17 -- jplevyak (a.k.a. n10253)

Log message:
	Tests converted from old ast chpl to v

Added files:
	chapel/test/flowanalysis/jplevyak/: cs4.v cs5.v 

---------------------------------------------------------------------------

09/08/04 11:42:33 -- jplevyak (a.k.a. n10253)

Log message:
	Added new interfaces for extracting type/callgraph/constants information
	for the new AST: in analysis.h.
	Note: these haven't been tested!
	Added new callback facility for callbacks from the analysis to
	the AST representation, also in alysis.h.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h clone.cpp driver.cpp 
	                  if1.h parse_ast.cpp parse_ast.h sym.cpp sym.h 
Added files:
	chapel/compiler/: callbacks.h 

---------------------------------------------------------------------------

09/08/04 12:23:12 -- jplevyak (a.k.a. n10253)

Log message:
	OK, new AST type_info works on arithmentic_ops.chpl

Modified files:
	chapel/compiler/: analysis.cpp driver.cpp 

---------------------------------------------------------------------------

09/09/04 11:38:48 -- jplevyak (a.k.a. n10253)

Log message:
	Use callbacks for all Sym allocations to ensure that we have the
	  appropriate shadow variables for the new AST.
	Apply the analysis to the internalPrelude, prelude and program.
	Note: I changed the name of program to programStmts to be more
	  in keeping with internalPreludeStmts and preludeStmts... hope that is OK.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h ast.cpp callbacks.h 
	                  createAST.cpp createAST.h driver.cpp fa.cpp 
	                  if1.cpp if1.h parse_ast.cpp parse_ast.h 
	                  sym.cpp 

---------------------------------------------------------------------------

09/09/04 17:41:19 -- bradc

Log message:
	Added rudimentary support for running compiler passes
	over the AST.  This was motivated by the fact that I've
	been writing more and more traversals, but have been
	calling them by explicitly inserting calls to the
	traversal into the code somewhere between parsing and
	code generation.  The passlist concept is designed to
	make it easy to select what passes/traversals are
	applied to the AST in what order.
	
	Currently every pass is an instance of a class Pass
	that supports a "run()" method which takes the program
	statements (Stmt*) passed in as their single argument.
	I expect this interface to get richer as the needs and
	abilities of passes are improved.
	
	Traversals have been reconceived as a subclass of Pass,
	where the default run method calls into the traversal
	machinery on the program.  Thus, every Traversal is a
	legal pass.
	
	The passes that are run by the compiler are specified
	in the passlist.h file.  This file has the general
	structure:
	
	  Pass* passlist[] = {
	    FIRST,
	    ...
	    LAST
	  };
	
	where "..." represents the list of passes that should
	be run.  For example, to run a pass called "Foo",
	followed by a pass called "Bar", one would use:
	
	  Pass* passlist[] = {
	    FIRST,
	    RUN(Foo),
	    RUN(Bar),
	    LAST
	  };
	
	where Foo and Bar are the names of Pass or Traversal
	subclasses (or subclasses of either).
	
	Passlists may also be specified dynamically without
	recompiling the compiler.  This is done with the
	--passlist flag and a specification of a file with
	the same structure as the passlist.h file.  Thus,
	imagine that the passlist shown above is the one
	that is compiled into the compiler and I wanted to
	run a new pass BradsDebugPass between Foo and Bar.
	I could do this by making a copy of passlist.h (call
	it mypasslist.h) and editing it to read:
	
	  Pass* passlist[] = {
	    FIRST,
	    RUN(Foo),
	    RUN(BradsDebugPass),
	    RUN(Bar),
	    LAST
	  };
	
	By running the compiler using "--passlist mypasslist.h",
	the passes Foo, BradsDebugPass, and Bar would be run on
	the AST.
	
	Currently, no passes are used (because all the ones that
	I've implemented are debugging traversals), but if you
	uncomment out the CheckTypeInfo pass listed in
	passlist.h, you'll run a simple pass that walks the AST
	looking for expressions that have a NULL type_info according
	to John's type inference engine.  The TestGetStuff pass was
	written to test the GetStuff pass, and will walk the AST
	printing things out as it goes.  Neither of these are meant
	to be particularly deep or meaningful, just things I've
	written along the way.
	
	To add a new pass to be supported by the dynamic passlist
	feature:
	
	(1) create your pass/traversal class by subclassing either
	    Pass or Traversal.
	
	(2) edit passlist.h to #include the header file that defines
	    the class.
	
	(3) register the pass by adding a REGISTER(PassName) line
	    to the passlist.cpp file.  This registers the pass as
	    being a legal pass to appear in a dynamically-specified
	    passlist.h file.
	
	(4) *ONLY IF YOU WANT THE PASS TO BE RUN AS PART OF THE
	    STANDARD COMPILE*, add a RUN(PassName) line to the
	    passlist.h file in the appropriate position(s) in the list.

Modified files:
	chapel/compiler/: Makefile ast.h driver.cpp 
	chapel/compiler/AST/: Makefile.share expr.cpp loc.cpp loc.h 
	                      testGetStuff.cpp traversal.cpp traversal.h 
	chapel/test/flowanalysis/jplevyak/: .cvsignore 
	chapel/third-party/dparser/d/: .cvsignore 
Added files:
	chapel/compiler/: pass.cpp pass.h passlist.cpp passlist.h 
	chapel/compiler/AST/: checkTypeInfo.cpp checkTypeInfo.h 
	                      testGetStuff.h 

---------------------------------------------------------------------------

09/09/04 17:53:33 -- bradc

Log message:
	Oops -- some fixes to last checkin (who taught me to modify
	code while writing my CVS commit log...?).  Sorry about
	that.
	
	Took out some debugging and placeholder INT_FATAL code that
	I forgot to pull before checking in.
	
	Added a dummy pass (DummyPass) and wrote a test that checks
	the ability to specify a dynamic passfile to run.

Modified files:
	chapel/compiler/: pass.cpp pass.h passlist.cpp 
	chapel/compiler/AST/: traversal.cpp 
Added files:
	chapel/test/compflags/bradc/passlist/: .cvsignore COMPOPTS 
	                                       passlist.h test.chpl 
	                                       test.good 

---------------------------------------------------------------------------

09/09/04 18:15:37 -- bradc

Log message:
	Modified the statement lists for the prelude files so that
	appropriate statements would be refactored into an init
	procedure, as in the user code.  Rather than combining
	these into a single prelude init function, I made a separate
	init function for each prelude.  The internal prelude's
	function is named __initIntPrelude, while the normal prelude
	is simply __initPrelude.  John, let me know whether or not
	this is acceptible for what you need.  Thanks.

Modified files:
	chapel/compiler/: createAST.cpp 

---------------------------------------------------------------------------

09/10/04 12:43:27 -- bradc

Log message:
	Added two debugging passes:
	
	  PrintAST : pretty-prints the AST to stdout using
	             print() methods for each statement
	  PrintSymtab : dumps the entire symboltable to stdout
	
	These passes also got my local compiler into the state
	where it would seg fault on review3.chpl.  Don't know
	how reproducible that will be for others...
	
	-Brad

Modified files:
	chapel/compiler/: passlist.cpp passlist.h 
	chapel/compiler/AST/: Makefile.share 
Added files:
	chapel/compiler/AST/: printAST.cpp printAST.h printSymtab.cpp 
	                      printSymtab.h 

---------------------------------------------------------------------------

09/10/04 14:24:29 -- bradc

Log message:
	Created a single top-level list of statements pointed to by
	the variable entryPoint (defined in createAST.h).  This
	currently contains calls to the three _init procedures --
	the internal prelude one, the prelude one, and the user
	code's entry point.  As we start to support more files
	and/or a concept of modules, this will be expanded to
	handle those entities as well.
	
	Note that this top-level statement list is not currently
	wrapped in a function (John, if you need this, let me
	know).

Modified files:
	chapel/compiler/: createAST.cpp createAST.h 

---------------------------------------------------------------------------

09/10/04 15:29:38 -- jplevyak (a.k.a. n10253)

Log message:
	Worked on class member functions.
	type_info now returns dtUnknown when it has incomplete information.
	Fixed (hopefully) the instability which was causing random failures for Brad.

Modified files:
	chapel/compiler/: analysis.cpp fa.cpp 
	chapel/compiler/AST/: type.cpp type.h 

---------------------------------------------------------------------------

09/10/04 16:28:37 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed up scoping of global variables.

Modified files:
	chapel/compiler/: analysis.cpp 

---------------------------------------------------------------------------

09/11/04 09:38:53 -- jplevyak (a.k.a. n10253)

Log message:
	Remove debugging code which was messing up the tests
	  (don't know how that happened, since I tested it before I checked
	   in... and I retested when I saw the regression errors but
	   after cvs update and build I get the same error, but it was
	   something I checked in ?!?, so it should have been in my source tree!)
	Added new test case for analysis of global variables.

Modified files:
	chapel/compiler/: analysis.cpp 
Added files:
	chapel/test/flowanalysis/newast/: globalref.chpl globalref.good 

---------------------------------------------------------------------------

09/13/04 11:07:27 -- jplevyak (a.k.a. n10253)

Log message:
	Remove old Chapel front end and all support files
	  This is to cleanup the directories in preparation for the reorg
	  The files are still in CVS if anyone wants to consult them
	  I did not remove the codegen routines for the old AST since I
	    dont' know all the files which are involved.
	Removed the last couple tests which used the old Chapel front end.
	  These will get rewritten/ported to the new front end as part of the
	    coverage suite I am going to write.

Modified files:
	chapel/compiler/: TODO ast_kinds.h codegen.cpp driver.cpp 
	                  parse_ast.cpp 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/test/flowanalysis/jplevyak/: COMPOPTS 
	chapel/test/lowlevelcg/jplevyak/: COMPOPTS 
	chapel/test/parsing/jplevyak/: COMPOPTS 
Removed files:
	chapel/compiler/: chpl.g prelude.chpl 
	chapel/test/lowlevelcg/jplevyak/: review3.chpl review3.good 
	chapel/test/parsing/jplevyak/: mat1.chpl mat1.good vec.chpl 
	                               vec.good 

---------------------------------------------------------------------------

09/13/04 12:20:03 -- bradc

Log message:
	Removed old code generation stuff made dead by removal of
	the bootstrap AST.

Modified files:
	chapel/compiler/: cg.h codegen.cpp codegen.h 
Removed files:
	chapel/compiler/: cg_funs.cpp cg_funs.h 

---------------------------------------------------------------------------

09/13/04 12:22:02 -- bradc

Log message:
	Whoops, forgot to check in the Makefile change.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

09/13/04 13:56:59 -- jplevyak (a.k.a. n10253)

Log message:
	Added new test cases for analysis.

Added files:
	chapel/test/flowanalysis/newast/: codegen_test.chpl 
	                                  codegen_test.good enum.chpl 
	                                  enum.good mutrec.chpl 
	                                  mutrec.good noargs.chpl 
	                                  noargs.good onearg.chpl 
	                                  onearg.good usebeforedef.chpl 
	                                  usebeforedef.good 

---------------------------------------------------------------------------

09/13/04 14:21:49 -- bradc

Log message:
	Improved the FindUnknownTypes pass so that it not only finds
	symbols of unknown type, but also uses John's type_info pass
	to fill in the type of such symbols, if it knows.  This pass
	is currently run by default, but of course will only add any
	information to the AST if --analyzenewast is used.  If it is
	not, John's work returns dtUnknown, so no substantive change
	is made.  Once --analyzenewast is the default, this pass
	should allow us to remove most of our type-oriented hacks
	involving dtUnknown.
	
	Also added a println() method to links which prints a newline
	after printing the AST node.

Modified files:
	chapel/compiler/: passlist.h 
	chapel/compiler/AST/: checkTypeInfo.cpp expr.cpp 
	                      findUnknownTypes.cpp findUnknownTypes.h 
	                      link.cpp link.h symbol.cpp 
	chapel/test/flowanalysis/newast/: chain.good globalref.good 
	                                  mutrec.good onearg.good 
	                                  usebeforedef.good 

---------------------------------------------------------------------------

09/13/04 15:04:42 -- bradc

Log message:
	Added four abstract types to the internal prelude scope just
	prior to parsing the prelude.  These are:
	
		Identifier	Type* variable	purpose
		----------	--------------	-----------
		Tuple		dtTuple		abstract Tuple type
		Index		dtIndex		abstract Index type
		Domain		dtDomain	abstract Domain type
		Array		dtArray		abstract Array type
	
	It is reasonable to think of these types as being parent types
	of which all actual tuples, index-es, domains, and arrays are
	subtypes, although no explicit subtype information is currently
	stored in the high-level AST.
	
	Because these symbols are declared in the internal prelude, they are
	not currently visible in user source code (i.e., the user cannot
	declare a variable of type "Tuple"), though the dtTuple pointer will
	exist and be valid for the compiler internals throughout the
	compilation process.
	
	I had to change the Array class name in the internal_prelude to
	_Array to avoid conflicts with this new variable (though I
	suspect that John will change it further to suit his needs...).

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: internal_prelude.chpl type.cpp type.h 

---------------------------------------------------------------------------

09/13/04 17:17:36 -- bradc

Log message:
	Beefed up class support a slight bit.  First, created a link
	from ClassType to the SymScope that contains its members,
	and also initialized the SymScope's context to point back to
	the class symbol and statement, which I had forgotten to do
	when introducing the SCOPE_CLASS.
	
	Improved creation of the MemberAccess expression so that if
	the base expression is a class and the member is a member
	of that class, the member symbol refers to the original
	symbol in the class and not a brand new symbol in limbo (as
	was the case before).  If these conditions are not met, the
	symbol-in-limbo approach is still taken.  Next step will be
	to handle these cases more elegantly.
	
	Added a first test of classes with member variables but no
	methods.
	
	As a side effect of this change, noticed that I'd never
	implemented write() for floats, so tucked this in.

Modified files:
	chapel/compiler/: .cvsignore 
	chapel/compiler/AST/: chapel.y expr.cpp expr.h symtab.cpp 
	                      symtab.h type.cpp type.h 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/: .cvsignore 
	chapel/test/classes/bradc/: .cvsignore trivialclass.chpl 
	                            trivialclass.good 

---------------------------------------------------------------------------

09/13/04 18:16:26 -- bradc

Log message:
	Fixed "make depend" rule to work on Suns (and, I expect, other
	non-bash platforms?).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.base 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

09/13/04 18:32:06 -- jplevyak (a.k.a. n10253)

Log message:
	Support TYPE_TUPLE astType.
	Make Expr return 'null'.
	Add preliminary support for "self" methods in classes.
	Analysis now treats forall variables as being of type Index
	New dead code elimination for IF1 (more robuts).
	Made entryPoint into a single statement which defines the function
	__entryPoint (to be similar to __init).
	Move definitions for Array, Tuple, Domain and Index into
	  internal_prelude.chpl, and added a new function
	  "findInternalTypes" which finds them instead of
	  "initInternalTypes" which creates them.
	Moved noop.chpl into list of working code.

Modified files:
	chapel/compiler/: analysis.cpp ast.cpp ast.h builtin_symbols.h 
	                  cfg.cpp cg.cpp code.h createAST.cpp driver.cpp 
	                  fa.cpp if1.cpp parse_ast.cpp prelude.v 
	                  prim_data.dat 
	chapel/compiler/AST/: internal_prelude.chpl prelude.chpl 
	                      symtab.cpp type.cpp type.h 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noargs.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/test/flowanalysis/newast/: noop.chpl noop.good 

---------------------------------------------------------------------------

09/14/04 12:13:15 -- jplevyak (a.k.a. n10253)

Log message:
	Checkpoint.
	Index, Domain, Array, Tuple classes created in internal_perlude.chpl
	These classes are hidden superclasses for all Chapel objects of the
	corresponding type and can be used to provide builtin behavior.
	Support for these classes has been moved into analysis.{cpp,h}
	Primitives now can have more than one return value, this is to
	  support domain_start_index since domain indexing can be over
	  multiple degenerate (integer) indexes.
	Added partial support for complex numbers, complex now defaults
	  to 64-bit complex numbers.
	Removed support for 80-bit floats (we can add this back, but 128 is
	  probably more useful).

Modified files:
	chapel/compiler/: analysis.cpp builtin_symbols.h chpltypes.h 
	                  fa.cpp parse.cpp parse_ast.cpp prelude.v 
	                  prim.cpp prim.h prim_data.dat sym.h v.g 
	chapel/compiler/AST/: internal_prelude.chpl 
	chapel/compiler/make_prims/: make_prims.g 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good structtype.good 
	                                    var.good 

---------------------------------------------------------------------------

09/14/04 14:46:54 -- jplevyak (a.k.a. n10253)

Log message:
	Some work on enumerations (store their values as integers).
	Import declared types on parameters.

Modified files:
	chapel/compiler/: analysis.cpp 

---------------------------------------------------------------------------

09/14/04 14:49:15 -- jplevyak (a.k.a. n10253)

Log message:
	Load variables by moving into a temporary.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noop.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 

---------------------------------------------------------------------------

09/14/04 15:15:07 -- bradc

Log message:
	Made the testing system accept the double-dash (--) versions
	of the flags in addition to the normal ones.  I find more
	and more that I've been typing --compopts, having gotten used
	to the double-dash syntax with the compiler's longer flags.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

09/14/04 15:23:12 -- bradc

Log message:
	Took out call from Expr::getTypes() to Expr::typeInfo(),
	because typeInfo() may not be determinable until after
	type analysis has run.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

09/14/04 16:01:28 -- jplevyak (a.k.a. n10253)

Log message:
	All literals are moved into temporaries (symbolically) before
	functions are called.  This cleans up some difficult cases for
	analysis.

Modified files:
	chapel/compiler/: analysis.cpp fa.cpp 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

09/14/04 17:44:24 -- bradc

Log message:
	Checking in a small change to symtab.cpp in which member
	accesses which are unresolvable without help from the
	low-level analysis are made UseBeforeDef symbols rather
	than unadorned symbols as they were before (note to self:
	should really change this name to UnresolvedSymbol).
	
	Also checked a case into the test/Share directory for
	John to look at -- it's a case where I don't/can't
	do the resolution, so leave the field as a UseBeforeDef
	symbol
	
	(note that when running in the current compiler,
	a bunch of stuff is generated as integers incorrectly,
	because of all my hacks which say "if type analysis
	hasn't run, assume everything is an integer").

Modified files:
	chapel/compiler/AST/: symtab.cpp 
Added files:
	chapel/test/Share/: ambiguousclass.chpl 

---------------------------------------------------------------------------

09/15/04 12:30:02 -- jplevyak (a.k.a. n10253)

Log message:
	Some nasty hacks, but I got domarr.chpl, formatoutput.chpl and protoast_test.chpl compiling.
	- Switched primitive_transfer_function table to use strings instead of Sym's so
	  that __primitive("array_index") as we have in the internal header would work.
	- turned off lookup of the "y", in "x.y" when analyzeNewAST is on (HACK)
	- added transfer function for array_index'ing
	- made "self" variable lookup to pickup the hidden "self" argument (HACK)
	- used a global to hold the current function to work parentFn issue (HACK)
	- stored the elementType for arrays and used to initialize "element" pseudo-variable

Modified files:
	chapel/compiler/: analysis.cpp driver.cpp fa.cpp fa.h 
	                  parse_ast.cpp sym.h 
	chapel/compiler/AST/: internal_prelude.chpl symtab.cpp 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  whileLoop.good writen.good 
	                                  writetwo.good 
Added files:
	chapel/test/flowanalysis/newast/: domarr.chpl domarr.good 
	                                  formatoutput.chpl 
	                                  formatoutput.good 
	                                  protoast_test.chpl 
	                                  protoast_test.good 

---------------------------------------------------------------------------

09/15/04 13:35:07 -- bradc

Log message:
	Added a new Pass and a new Traversal:
	
		RunAnalysis : is a pass that runs John's analysis work
			if the analyzenewast flag is set.  This is
			essentially what we had before, but I moved it
			to a pass so that we could put it between other
			passes.  Such as:
	
		SetupStmtLinks : is a traversal that walks the AST,
			ensuring that expressions' stmt pointers point
			to their parent statement.  These are difficult
			to set up while parsing since the expressions
			are created before the statements, so this
			seemed like a clean way to do it.  Can/should
			be run directly after parsing.

Modified files:
	chapel/compiler/: Makefile driver.cpp driver.h pass.cpp pass.h 
	                  passlist.cpp passlist.h 
	chapel/compiler/AST/: Makefile.share type.cpp type.h 
Added files:
	chapel/compiler/: runAnalysis.cpp runAnalysis.h 
	chapel/compiler/AST/: setupStmtLinks.cpp setupStmtLinks.h 

---------------------------------------------------------------------------

09/15/04 15:17:26 -- jplevyak (a.k.a. n10253)

Log message:
	Add shadow types for Locales and Timers.
	Use a representative meta-class for class names which appear in code (ClassSymbol).
	Little bit of bulletproofing from a smoke run on some of the protoast files.

Modified files:
	chapel/compiler/: analysis.cpp fa.cpp 

---------------------------------------------------------------------------

09/15/04 15:45:33 -- jplevyak (a.k.a. n10253)

Log message:
	Make CastExpr the identify function for now.
	enumarray.chpl is now working.
	Made array accesses accept objects of any type (for now).

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: internal_prelude.chpl 

---------------------------------------------------------------------------

09/15/04 15:45:59 -- jplevyak (a.k.a. n10253)

Log message:
	enumarray.chpl now working

Modified files:
	chapel/test/flowanalysis/newast/: domarr.good formatoutput.good 
	                                  protoast_test.good 
Added files:
	chapel/test/flowanalysis/newast/: enumarray.chpl enumarray.good 

---------------------------------------------------------------------------

09/15/04 16:41:44 -- shannon

Log message:
	Changed the enumerated binOpType BINOP_EQUALS to BINOP_EQUAL
	for naming consistency.
	
	Modified code generation of parentheses.  In the past we were
	parenthesizing all code generated binary expressions to ensure
	precedence correctness.  Now they are only generated when necessary
	or to suppress warnings from the C compiler.
	
	Wrote a test generator which generates all combinations of pairs of
	binary operators with and without parentheses.  It generates either
	C or Chapel code.  Generated and ran C and Chapel versions of the
	test in order to compare output.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: chapel.y expr.cpp expr.h 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
	chapel/test/trivial/shannon/: compSampler.chpl compSampler.good 
Added files:
	chapel/test/trivial/shannon/gentest/: NOTEST compTest.c 
	                                      genCompTest.c 

---------------------------------------------------------------------------

09/15/04 17:20:45 -- jplevyak (a.k.a. n10253)

Log message:
	Worked on support for domain expressions.
	Fixed getExpr and getSymbol for DomainExpr (they were not getting
	 all the elements of the list).
	Updated tests results for enumarray and domarr

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: expr.cpp 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 

---------------------------------------------------------------------------

09/16/04 08:21:49 -- jplevyak (a.k.a. n10253)

Log message:
	Failure caused by print order issue.
	This addresses the symptom, I'll get to the cause tomorrow.

Modified files:
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

09/16/04 19:18:58 -- bradc

Log message:
	Big source code reorganization.  The main goal here
	was to take all the source code that was getting
	piled up in compiler/ and compiler/AST and tease it
	out into subdirectories which are a little smaller
	and more topically organized.  The directory structure
	under compiler/ now looks like this (also reflected in
	the DIRS file in that directory):
	
	----------------------------
	
	code directories:
	
	AST/            : high-level AST & symboltable classes
	adt/            : abstract data types (vector, map, etc.)
	analysis/       : low-level analysis code
	  make_prims/   : makes prim_data stuff
	backend/        : back-end stuff (codegen, dump, graph output)
	include/        : public interface header files
	main/           : main compiler control (main, passlist, etc.)
	parser/         : new parser
	passes/         : pass classes
	traversals/     : traversal classes
	util/           : utility code
	vparser/        : bootstrap parser
	  cast/         : cast stuff
	
	other directories:
	
	etc/            : miscellaneous non-code stuff (web, lowlevel cg help)
	make/           : common makefile stuff
	samples/        : sample codes  (perhaps outdated now that test is here?)
	test/           : unit tests (perhaps should be moved under a source dir?)
	
	----------------------------
	
	I did my best to sort code into these categories,
	but it could be that I got some wrong, or additional
	directories should be added to reflect other
	functions.
	
	Note that I implemented the movement of these files
	by removing them from their old location and adding
	them in their new location -- thus the history of
	the file will be difficult to trace across this
	boundary.  The alternative was to move internal CVS
	files around, but this fairly terrifies me, so I'm
	hoping we'll all be able to deal with the bother.
	
	Our stance for include files is as discussed on email:
	header files that are part of a public interface should
	go in the include/ directory.  Header files that are
	part of a private interface can/should go into the
	source directory directly.  I did a quick scan of all
	header files, looking for those that only appeared in
	a single directory's Makefile.cvs.depend file, and moved
	those files into the directory in question.  There
	weren't very many of these, as it turns out.  Could be
	that if we looked more carefully, we'd find false
	dependences that could allow more headers to be teased
	into code directories.  This would be a good background
	activity for all of us -- moving code into the most
	appropriate place for it.
	
	The current assumption is that all source directories
	for the compiler will be siblings under the compiler/
	directory.  Subdirectories under those are used to
	create dynamically-generated sources (like the make_prims
	and cast stuff).
	
	To add new directories, take a look at something like
	main (which is an exceptionally normal directory) and
	copy its Makefile, Makefile.share, and Makefile.include
	files, replacing "main" with your directory name
	(capitalized appropriately -- emacs will do amazing
	things here with a query replace).  Then go to the
	top-level compiler/Makefile and search on main,
	creating a new line for your new directory as required.
	Everything should then fall out.
	
	This reorg is not perfect yet -- it compiles and tests,
	and I need to get home so am checking in before people
	come in to do development tomorrow to reflect the
	structure.  However, some of the printing done by
	the Makefiles comes out in an unintuitive order (when
	there are sub-subdirectories), and I haven't had a
	chance to check the dependences deeply yet (though I
	believe I've got them approximately correct).  I'll
	continue to work on improving this stuff as a background
	activity or as others request it.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: .cvsignore Makefile Makefile.include 
	                      Makefile.share stmt.cpp 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/make/: Makefile.base Makefile.gnu 
	chapel/test/: sub_test 
	chapel/test/lowlevelcg/jplevyak/: Makefile.cg 
Added files:
	chapel/compiler/: DIRS 
	chapel/compiler/adt/: FILES Makefile Makefile.include 
	                      Makefile.share list.cpp map.cpp vec.cpp 
	chapel/compiler/analysis/: FILES Makefile Makefile.include 
	                           Makefile.share TODO analysis.cpp 
	                           ast.cpp cdb.cpp cdb.h cfg.cpp cg.cpp 
	                           clone.cpp dom.cpp fa.cpp 
	                           fa_extras.cpp fun.cpp if1.cpp 
	                           inline.cpp loop.cpp pattern.cpp 
	                           pdb.cpp pnode.cpp prim.cpp 
	                           prim_data.cpp prim_data.dat 
	                           prim_data.h prim_data_incs.cpp 
	                           prim_data_incs.h region.cpp region.h 
	                           ssu.cpp ssu.h ssu_extra.cpp sym.cpp 
	                           var.cpp 
	chapel/compiler/analysis/make_prims/: .cvsignore Makefile 
	                                      make_prims.cpp 
	                                      make_prims.g 
	chapel/compiler/backend/: FILES Makefile Makefile.include 
	                          Makefile.share beautify.cpp 
	                          codegen.cpp dump.cpp graph.cpp 
	chapel/compiler/etc/: c_runtime.h valgrind.suppressions 
	chapel/compiler/etc/www/: bullet.gif minus.gif mktree.css 
	                          mktree.js plus.gif 
	chapel/compiler/include/: analysis.h ast.h ast_kinds.h baseAST.h 
	                          beautify.h builtin.h builtin_symbols.h 
	                          callbacks.h cg.h checkTypeInfo.h 
	                          chplalloc.h chpltypes.h clone.h code.h 
	                          codegen.h createAST.h dom.h driver.h 
	                          dump.h expr.h extern.h fa.h files.h 
	                          findUnknownTypes.h fun.h getstuff.h 
	                          geysa.h grammar.h graph.h if1.h 
	                          inline.h link.h list.h loc.h log.h 
	                          loop.h map.h misc.h mysystem.h nils.h 
	                          num.h parse.h parse_ast.h 
	                          parse_structs.h pass.h pattern.h pdb.h 
	                          pnode.h prim.h printAST.h 
	                          printSymtab.h runAnalysis.h scope.h 
	                          setupStmtLinks.h stmt.h stringutil.h 
	                          sym.h symbol.h symscope.h symtab.h 
	                          testGetStuff.h traversal.h type.h 
	                          var.h vec.h verifyASTType.h yy.h 
	chapel/compiler/main/: FILES Makefile Makefile.include 
	                       Makefile.share arg.cpp arg.h 
	                       createAST.cpp driver.cpp pass.cpp 
	                       passlist.cpp passlist.h version.cpp 
	                       version.h version_num.h 
	chapel/compiler/parser/: .cvsignore Makefile Makefile.include 
	                         Makefile.share chapel.lex chapel.y 
	                         internal_prelude.chpl lexyacc.cpp 
	                         lexyacc.h prelude.chpl yy.c 
	chapel/compiler/passes/: Makefile Makefile.include 
	                         Makefile.share printAST.cpp 
	                         printSymtab.cpp runAnalysis.cpp 
	chapel/compiler/test/: beautify.cpp files.cpp list.cpp map.cpp 
	                       misc.cpp mysystem.cpp stringutil.cpp 
	                       vec.cpp 
	chapel/compiler/traversals/: Makefile Makefile.include 
	                             Makefile.share checkTypeInfo.cpp 
	                             findUnknownTypes.cpp getstuff.cpp 
	                             setupStmtLinks.cpp testGetStuff.cpp 
	                             traversal.cpp verifyASTType.cpp 
	chapel/compiler/util/: FILES Makefile Makefile.include 
	                       Makefile.share files.cpp log.cpp misc.cpp 
	                       mysystem.cpp stringutil.cpp 
	chapel/compiler/vparser/: FILES Makefile Makefile.include 
	                          Makefile.share ast_cf.cpp builtin.cpp 
	                          c.g cast_code.cpp grammar.cpp 
	                          parse.cpp parse_ast.cpp parse_incs.cpp 
	                          prelude.v scope.cpp v.g 
	                          v.g.d_parser.cpp 
	chapel/compiler/vparser/cast/: .cvsignore Makefile cast.cpp 
Removed files:
	chapel/compiler/: CHANGES FILES Makefile.cg TODO analysis.cpp 
	                  analysis.h arg.cpp arg.h ast.cpp ast.h 
	                  ast_cf.cpp ast_kinds.h beautify.cpp beautify.h 
	                  builtin.cpp builtin.h builtin_symbols.h 
	                  bullet.gif c.g c_runtime.h callbacks.h cdb.cpp 
	                  cdb.h cfg.cpp cg.cpp cg.h chplalloc.h 
	                  chpltypes.h clone.cpp clone.h code.h 
	                  codegen.cpp codegen.h createAST.cpp 
	                  createAST.h datatype.cpp datatype.h dom.cpp 
	                  dom.h driver.cpp driver.h dump.cpp dump.h 
	                  extern.h fa.cpp fa.h fa_extras.cpp files.cpp 
	                  files.h fun.cpp fun.h geysa.h grammar.cpp 
	                  grammar.h graph.cpp graph.h if1.cpp if1.h 
	                  inline.cpp inline.h list.cpp list.h log.cpp 
	                  log.h loop.cpp loop.h map.cpp map.h minus.gif 
	                  misc.cpp misc.h mktree.css mktree.js 
	                  mysystem.cpp mysystem.h num.h parse.cpp 
	                  parse.h parse_ast.cpp parse_ast.h 
	                  parse_incs.cpp parse_structs.h pass.cpp pass.h 
	                  passlist.cpp passlist.h pattern.cpp pattern.h 
	                  pdb.cpp pdb.h plus.gif pnode.cpp pnode.h 
	                  prelude.v prim.cpp prim.h prim_data.dat 
	                  prim_data_incs.cpp prim_data_incs.h region.cpp 
	                  region.h runAnalysis.cpp runAnalysis.h 
	                  scope.cpp scope.h ssu.cpp ssu.h ssu_extra.cpp 
	                  stringutil.cpp stringutil.h sym.cpp sym.h v.g 
	                  valgrind.suppressions var.cpp var.h vec.cpp 
	                  vec.h version.cpp version.h version_num.h 
	chapel/compiler/AST/: baseAST.h chapel.lex chapel.y 
	                      checkTypeInfo.cpp checkTypeInfo.h expr.h 
	                      findUnknownTypes.cpp findUnknownTypes.h 
	                      getstuff.cpp getstuff.h 
	                      internal_prelude.chpl lexyacc.h link.h 
	                      loc.h main.cpp nils.h prelude.chpl 
	                      printAST.cpp printAST.h printSymtab.cpp 
	                      printSymtab.h setupStmtLinks.cpp 
	                      setupStmtLinks.h stmt.h stringutil.cpp 
	                      stringutil.h symbol.h symscope.h symtab.h 
	                      testGetStuff.cpp testGetStuff.h 
	                      traversal.cpp traversal.h type.h 
	                      verifyASTType.cpp verifyASTType.h yy.c 
	                      yy.h 
	chapel/third-party/boehmgc/: gc6.2.tar.gz 
	chapel/third-party/boehmgc/gc6.2/: AmigaOS.c BCC_MAKEFILE 
	                                   EMX_MAKEFILE MacOS.c 
	                                   MacProjects.sit.hqx 
	                                   Makefile.DLLs Makefile.am 
	                                   Makefile.direct Makefile.dj 
	                                   Makefile.in NT_MAKEFILE 
	                                   NT_THREADS_MAKEFILE 
	                                   OS2_MAKEFILE PCR-Makefile 
	                                   README.QUICK SMakefile.amiga 
	                                   WCC_MAKEFILE acinclude.m4 
	                                   aclocal.m4 add_gc_prefix.c 
	                                   aix_irix_threads.c allchblk.c 
	                                   alloc.c alpha_mach_dep.S 
	                                   backgraph.c base_lib 
	                                   blacklst.c callprocs 
	                                   checksums.c config.guess 
	                                   config.sub configure 
	                                   configure.host configure.in 
	                                   darwin_stop_world.c dbg_mlc.c 
	                                   depcomp digimars.mak 
	                                   dyn_load.c finalize.c gc.mak 
	                                   gc_cpp.cc gc_cpp.cpp 
	                                   gc_dlopen.c gcc_support.c 
	                                   gcj_mlc.c gcname.c headers.c 
	                                   hpux_test_and_clear.s 
	                                   ia64_save_regs_in_stack.s 
	                                   if_mach.c if_not_there.c 
	                                   install-sh libtool.m4 
	                                   ltconfig ltmain.sh mach_dep.c 
	                                   malloc.c mallocx.c mark.c 
	                                   mark_rts.c 
	                                   mips_sgi_mach_dep.s 
	                                   mips_ultrix_mach_dep.s misc.c 
	                                   missing mkinstalldirs 
	                                   new_hblk.c obj_map.c os_dep.c 
	                                   pc_excludes pcr_interface.c 
	                                   powerpc_darwin_mach_dep.s 
	                                   pthread_stop_world.c 
	                                   pthread_support.c ptr_chck.c 
	                                   real_malloc.c reclaim.c 
	                                   rs6000_mach_dep.s setjmp_t.c 
	                                   solaris_pthreads.c 
	                                   solaris_threads.c 
	                                   sparc_mach_dep.S 
	                                   sparc_netbsd_mach_dep.s 
	                                   sparc_sunos4_mach_dep.s 
	                                   specific.c stubborn.c 
	                                   threadlibs.c typd_mlc.c 
	                                   version.h win32_threads.c 
	chapel/third-party/boehmgc/gc6.2/Mac_files/: MacOS_Test_config.h 
	                                             MacOS_config.h 
	                                             dataend.c 
	                                             datastart.c 
	chapel/third-party/boehmgc/gc6.2/cord/: cordbscs.c cordprnt.c 
	                                        cordtest.c cordxtra.c 
	                                        de.c de_cmds.h 
	                                        de_win.ICO de_win.RC 
	                                        de_win.c de_win.h 
	chapel/third-party/boehmgc/gc6.2/doc/: Makefile.am Makefile.in 
	                                       README README.DGUX386 
	                                       README.Mac README.MacOSX 
	                                       README.OS2 README.amiga 
	                                       README.arm.cross 
	                                       README.autoconf 
	                                       README.changes 
	                                       README.contributors 
	                                       README.cords 
	                                       README.darwin README.dj 
	                                       README.environment 
	                                       README.ews4800 README.hp 
	                                       README.linux 
	                                       README.macros 
	                                       README.rs6000 README.sgi 
	                                       README.solaris2 
	                                       README.uts README.win32 
	                                       barrett_diagram 
	                                       debugging.html gc.man 
	                                       gcdescr.html 
	                                       gcinterface.html 
	                                       leak.html scale.html 
	                                       tree.html 
	chapel/third-party/boehmgc/gc6.2/include/: Makefile.am 
	                                           Makefile.in cord.h 
	                                           ec.h gc.h gc_alloc.h 
	                                           gc_allocator.h 
	                                           gc_amiga_redirects.h 
	                                           gc_backptr.h 
	                                           gc_config_macros.h 
	                                           gc_cpp.h gc_gcj.h 
	                                           gc_inl.h gc_inline.h 
	                                           gc_local_alloc.h 
	                                           gc_mark.h 
	                                           gc_pthread_redirects.h 
	                                           gc_typed.h javaxfc.h 
	                                           leak_detector.h 
	                                           new_gc_alloc.h 
	                                           weakpointer.h 
	chapel/third-party/boehmgc/gc6.2/include/private/: cord_pos.h 
	                                                   darwin_semaphore.h 
	                                                   darwin_stop_world.h 
	                                                   dbg_mlc.h 
	                                                   gc_hdrs.h 
	                                                   gc_locks.h 
	                                                   gc_pmark.h 
	                                                   gc_priv.h 
	                                                   gcconfig.h 
	                                                   pthread_stop_world.h 
	                                                   pthread_support.h 
	                                                   solaris_threads.h 
	                                                   specific.h 
	chapel/third-party/boehmgc/gc6.2/tests/: leak_test.c test.c 
	                                         test_cpp.cc 
	                                         thread_leak_test.c 
	                                         trace_test.c 

---------------------------------------------------------------------------

09/16/04 19:26:34 -- bradc

Log message:
	Fixed a problem in which the arch-specific directory
	was not being made from a clean build.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

09/17/04 11:14:52 -- jplevyak (a.k.a. n10253)

Log message:
	1. Sort classes before writing flow analysis log so as to prevent
	   random "diff" mismatches in the regressions.
	2. Checked in new test files with the sorted lists.
	3. Use inttypes.h instead of stdint.h which is only a C99 standard and
	   not available on all platforms.
	4. worked around compilation errors in compiler/parser by commenting
	   out a check and adding -Wno-error to the parser table compilation line.

Modified files:
	chapel/compiler/analysis/: fa_extras.cpp 
	chapel/compiler/include/: vec.h 
	chapel/compiler/make_prims/: make_prims.g 
	chapel/compiler/parser/: Makefile 
	chapel/test/flowanalysis/jplevyak/: classvar.good 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

09/17/04 11:43:17 -- bradc

Log message:
	Took another pass over the Makefiles to clean up some stuff
	from last night's check-in.  Printing of subdirectories now
	makes more sense; recursive Makefile structure is now more
	common across Makefiles.  Fixed dependences in analysis/Makefile
	so that certain files are not rebuilt if two makes are done
	back-to-back.  Moved John's recent changes to
	make_prims/make_prims.g to analysis/make_prims.g and removed
	the contents of cast/ and make_prims/ as I believe they are
	no longer used.  Once I verify this, I'll pull the empty
	directories from the CVSROOT.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
	chapel/compiler/AST/: Makefile expr.cpp type.cpp 
	chapel/compiler/adt/: Makefile 
	chapel/compiler/analysis/: Makefile Makefile.share 
	chapel/compiler/analysis/make_prims/: Makefile make_prims.g 
	chapel/compiler/backend/: Makefile 
	chapel/compiler/main/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: Makefile 
	chapel/compiler/passes/: Makefile 
	chapel/compiler/traversals/: Makefile 
	chapel/compiler/util/: Makefile 
	chapel/compiler/vparser/: Makefile Makefile.share 
	chapel/compiler/vparser/cast/: Makefile 
Removed files:
	chapel/compiler/cast/: Makefile cast.cpp 
	chapel/compiler/make_prims/: Makefile make_prims.cpp 
	                             make_prims.g 

---------------------------------------------------------------------------

09/20/04 11:41:52 -- jplevyak (a.k.a. n10253)

Log message:
	Move the remaining useful bits of compiler/samples into chapel/test.

Modified files:
	chapel/compiler/vparser/: parse_ast.cpp 
Added files:
	chapel/test/flowanalysis/jplevyak/: bug1.good bug1.v 
	                                    literal.good literal.v 
	                                    ref.good ref.v sample.good 
	                                    sample.v tuples.good 
	                                    tuples.v var.v vector.good 
	                                    vector.v 
	chapel/test/flowanalysis/jplevyak/constants/: CATFILES 
	                                              CLEANFILES 
	                                              COMPOPTS NOEXEC 
	                                              PREDIFF const.good 
	                                              const.v 
	                                              constant_folding.good 
	                                              constant_folding.v 
	chapel/test/flowanalysis/jplevyak/loop/: CATFILES CLEANFILES 
	                                         COMPOPTS NOEXEC PREDIFF 
	                                         loop1.good loop1.v 
	                                         loop2.good loop2.v 
	                                         loop_endless.good 
	                                         loop_endless.v rec.good 
	                                         rec.v 

---------------------------------------------------------------------------

09/20/04 13:02:37 -- bradc

Log message:
	Prior to this checkin, using the --no-codegen flag would cause
	the AST to be pretty-printed to the console in lieu of code
	generation.  This was a handy debugging tool early on, but has
	become increasingly bothersome.  Now, --no-codegen simply means
	don't do code generation.
	
	Added a pass PrintProgram which will print the program in the
	same way that --no-codegen used to.  Set up the
	test/trivial/protoast subdirectory to run this pass and only
	this pass, since that's what this directory has been testing
	up to this point ("can we parse and pretty-print out some
	substantial programs").
	
	Modified John's flowanalysis test output, which also used
	--no-codegen, so that the pretty-printed output is no
	longer intermixed with his analysis pass' output.
	
	Moved the printAST.cpp file from passes to traversals, since
	it actually is a traversal (I mistakenly put it in the wrong
	place last week).

Modified files:
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: COMPOPTS 
Added files:
	chapel/compiler/include/: printProgram.h 
	chapel/compiler/passes/: printProgram.cpp 
	chapel/compiler/traversals/: printAST.cpp 
	chapel/test/trivial/bradc/protoast/: mypasslist.h 
Removed files:
	chapel/compiler/passes/: printAST.cpp 

---------------------------------------------------------------------------

09/20/04 15:12:40 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for multiple returns of lvalues in the same function.
	Currently only in the test parser.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: parse_ast.h scope.h 
	chapel/compiler/vparser/: parse_ast.cpp scope.cpp v.g 
	chapel/test/flowanalysis/jplevyak/: badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good classvar.good 
	                                    cs4.good cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    literal.good memberfun.good 
	                                    memberfun2.good 
	                                    structtype.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: assign1.good assign1.v 
	                                    assign2.good assign2.v 
Removed files:
	chapel/compiler/vparser/: v.g.d_parser.cpp 

---------------------------------------------------------------------------

09/20/04 16:21:11 -- bradc

Log message:
	Got John's analysis stuff working with the GetStuff pass
	rather than the getXXXX() calls.  This involved some
	tweaking of the way traversals are done (for the better)
	since this is the most aggressive use of traversals so
	far.  There are still some questions in my mind about
	how far one wants to walk into types (should one walk
	into their names?) and symbols (should one walk into
	their types?) in order to get completeness without
	ending up in loops or doing too much redundant work,
	but this seems OK for now and we can improve it as
	time goes on.
	
	The one thing I had to do that was a little funny was to
	explicitly add nilClassType into John's list of symbols
	because the traversal won't do anything at nil nodes.
	This raises a question about whether the unspecified
	parent class should be a non-nil sentinel rather than
	a nil sentinel, and/or whether we should just add all
	the nils into John's list in close_symbols.
	
	I didn't actually go so far as to pull out the getXXX()
	calls yet, though I believe we now could.  I just wanted
	to get this change out of my directory as it's been in
	the way of other work for awhile now.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h type.h 
	chapel/compiler/main/: createAST.cpp 
Added files:
	chapel/compiler/vparser/: .cvsignore 

---------------------------------------------------------------------------

09/20/04 18:47:41 -- bradc

Log message:
	Added some initial support for default constructors for
	classes.  These currently do nothing apart from allocating
	memory for the class.  Eventually, they should also
	initialize the member variables as appropriate, call
	constructors recursively, etc.
	
	In order to do this:
	
	* the constructor (currently only one, the default one,
	  is supported) is stored as a FnDefStmt* in ClassType.
	
	* once again, ran into traversal issues because
	  traversing a type traverses its constructor which
	  returns the same type, leading to an infinite loop.
	  For now, I fail to traverse the constructor.  It
	  seems like the fix for this will be to split
	  traversal of types into two cases: a deep traversal
	  that looks at its composition, and a shallow
	  traversal that merely notes its Type*.
	
	* added a function malloc() to the standard prelude.
	  I could see wanting to change this to be some sort
	  of wrapper function for our internal purposes (I
	  like a malloc wrapper that takes an element type
	  and a number of elements, for reasons of logging),
	  but this will do for now.
	
	* added a new Expr type -- SizeofExpr -- to represent
	  sizeof() expressions in the generated C.  I didn't
	  implement this using the internal_prelude because I
	  wasn't confident that we could handle a function
	  that takes a type as its parameter yet (if we ever
	  need to be able to).  This seemed like an easy
	  workaround for now (NOTE FOR JOHN: I added a case
	  for SizeofExpr in analysis.cpp that flags an
	  internal error for now)
	
	* added support for "function calls" to constructors
	  by having the ParenOpExpr's classify routine convert
	  such calls into function calls to the constructor
	  in question.
	
	* fixed some bugs in codegen() routines that were
	  calling into print() routines rather than other
	  codegen() routines.
	
	* improved allocation of array types to use a new
	  type initialization interface that I introduced
	  awhile back, but failed to use very widely (until
	  now).
	
	* implemented code generation for return statements,
	  which I'd apparently never gotten to previously.
	  Added a trivial test to lock this in.
	
	* fixed old trivialclass.chpl code to call a
	  constructor (previously, it was incorrect as
	  the class would have been nil).

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h type.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/classes/bradc/: trivialclass.chpl 
Added files:
	chapel/test/trivial/bradc/functions/: retstmt.chpl retstmt.good 

---------------------------------------------------------------------------

09/21/04 12:30:47 -- bradc

Log message:
	Adding a new traversal -- checkIDs -- that does a traversal of
	the AST and then prints out which baseASTs it did and did not
	hit.  This is of limited worth, but is interesting to me today.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/main/: passlist.h passlist.cpp 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/include/: checkIDs.h 
	chapel/compiler/traversals/: checkIDs.cpp 

---------------------------------------------------------------------------

09/21/04 14:22:49 -- shannon

Log message:
	Implemented code generation of the exponentiation
	binary operator, and added a test.
	
	Added a variable to the binOp codegen method to
	hold the return of a call to the precedence method,
	instead of needlessly calling the method repeatedly.
	
	Added the math libraries to the list of included
	headers in stdchpl.h and to the link line in the
	runtime/etc Makefile.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: stdchpl.h 
Added files:
	chapel/test/trivial/shannon/: exp.chpl exp.good 

---------------------------------------------------------------------------

09/21/04 14:23:11 -- jplevyak (a.k.a. n10253)

Log message:
	Updated analysis/TODO to remove things that have gotten done
	Got low level code generation working for some new AST chapel files
	  (with the same .good test files used with the standard code generator).
	Fixed bugs in mapping of types from the AST to the low level representation.
	Added support for "bool" as a 1 bit unsigned numeric type including
	  support for constant folding in the old parser.
	Fixed bug in assignment to variables of primitive type.
	
	**** NOTE ****
	
	When we want to overload assignment for other value objects, we
	are going to need an assignment function.  If we do it like C++
	we can reuse a "copy constructor" which takes a single argument of
	the same type.
	
	Currently assignment is always interpreted as assigment to a
	primitive numeric type.  To overcome this limitation and permit
	assignment to be analyzed, assignment needs to be mapped to an
	overloaded function, and that overloaded function needs to be
	defined for primitive numeric types to correspond to the builtin
	version like (from the old prelude.chpl):
	
	function operator(a:anynum, #"=", b:anynum) { return __operator(a, #"=", b:anynum); }
	
	The __operator represents primitive assignment while other objects can
	overload the "operator" function.
	
	This is just a sample syntax, and we don't even have to have make this
	public, but it would be easiest for analysis if something like this
	existed in the internal prelude.

Modified files:
	chapel/compiler/analysis/: TODO analysis.cpp cg.cpp clone.cpp 
	                           fa.cpp if1.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/include/: if1.h num.h parse.h sym.h 
	chapel/compiler/vparser/: ast_cf.cpp cast_code.cpp parse.cpp 
	                          parse_ast.cpp 
	chapel/test/flowanalysis/jplevyak/: literal.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  danglingelse.good 
	                                  equality_ops.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good var.good 
	                                  var2.good whileLoop.good 
	chapel/test/lowlevelcg/jplevyak/: COMPOPTS 
Added files:
	chapel/test/lowlevelcg/jplevyak/: arithmetic_ops.chpl 
	                                  arithmetic_ops.good 
	                                  assignment_expr.chpl 
	                                  assignment_expr.good 
	                                  bitwise_assignment.chpl 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.chpl 
	                                  bitwise_negation.good 
	                                  bitwise_ops.chpl 
	                                  bitwise_ops.good 

---------------------------------------------------------------------------

09/21/04 16:48:04 -- jplevyak (a.k.a. n10253)

Log message:
	Unify my handling of forall loops and EXPR_DOMAIN.
	Handle multiple domains (naively).
	Move GetStuff to the stack.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

09/21/04 17:00:15 -- jplevyak (a.k.a. n10253)

Log message:
	Add support and test case for multiple return sites.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Added files:
	chapel/test/flowanalysis/newast/: multiple_return.chpl 
	                                  multiple_return.good 

---------------------------------------------------------------------------

09/21/04 17:28:03 -- bradc

Log message:
	Improved the traversal mechanism so that (a) it now
	traverses a class' default constructor, and (b) it
	does not go into any infinite loops.  Details follow
	for my own sake and nobody else need read them unless
	they're terminally bored.
	
	I made it so that when types are traversed, their
	definitions are typically not traversed (thus, whenever
	one comes across a reference to a class name in the
	code, the traversal will not, by default, walk down
	the entire class definition).  I did this by splitting
	the traverse() method for classes into traverse() and
	traverseDef(), much like codegen() and codegenDef().
	Thus, a statement like a TypeDefStmt would call
	traverseDef, because that's a reasonable place to look
	at the class definition, whereas a variable definition
	of that class type would not traverse the class
	definition.
	
	There are some exceptions to this, however.  If a type
	has no name (and therefore, I'm assuming, no TypeDefStmt),
	then the type's definition will be traversed when the
	traverse() method is called.  This should be useful for
	anonymous type specifiers in casts, sizeof statements,
	etc.
	
	The second is that if a client explicitly requests to
	traverse() a type (as analysis.cpp does), the type's
	definition will be traversed.  This may be the wrong
	choice, but it's the current one (the other approach
	would be to have analysis.cpp call traverseDef -- I'm
	not sure which is more appropriate, so am punting
	until we get more cases to weigh).  The rationale for
	the current decision is that a client need never know
	about traverseDef... they just call traverse().

Modified files:
	chapel/compiler/: DIRS 
	chapel/compiler/AST/: expr.cpp nils.cpp stmt.cpp symtab.cpp 
	                      type.cpp 
	chapel/compiler/include/: stmt.h symtab.h type.h 

---------------------------------------------------------------------------

09/21/04 18:43:48 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for SizeofExpr.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

09/22/04 09:38:03 -- bradc

Log message:
	Shannon pointed out that I broke the ebrowse BROWSE file
	when I reorganized the source trees.  This should fix it
	(I forgot to include the headers).  I did the same for
	the etags TAGS file, and this should fix that too.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

09/22/04 13:59:00 -- bradc

Log message:
	A bunch of work related to back pointers:
	
	* recoded the implementation of default constructors so that
	  their parentFn pointers would be set up properly as pointed
	  out by John.
	
	* implemented more parent pointers for Expr subclasses
	
	* added two new methods to the Stmt subclasses:
	
	  - canLiveAtFileScope -- whether or not the statement is a legal
	    top-level statement, or would need to be moved into an __init
	    procedure of sorts (this was hardcoded using dynamic casts
	    previously)
	
	  - topLevelExpr -- takes an expression as an argument and tells
	    whether or not it's one of the "top" expressions in the
	    statement -- which is to say, an expression with no parent
	    expression.
	
	* added an INT_WARNING macro which works like INT_FATAL, except
	  that it only prints out warnings and doesn't halt execution
	  of the compiler.
	
	* added parentFn pointers for all statements appearing in the
	  __init functions.
	
	* added a new traversal -- checkBackLinks -- that walks over the AST
	  and checks back pointers to make sure that they are not nil when
	  they are not supposed to be nil.  This is not yet implemented
	  correctly for parentFn pointers, unfortunately, because we don't
	  have sufficient information to squelch the warning for class member
	  statements.  Turned this on to run by default before calling into
	  John's analysis pass.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp stmt.cpp symtab.cpp type.cpp 
	chapel/compiler/include/: misc.h stmt.h symtab.h 
	chapel/compiler/main/: createAST.cpp passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/compiler/util/: misc.cpp 
Added files:
	chapel/compiler/include/: checkBackLinks.h 
	chapel/compiler/traversals/: checkBackLinks.cpp 

---------------------------------------------------------------------------

09/22/04 14:35:11 -- bradc

Log message:
	Moved header files for all passes and traversals to the passes/
	and traversals/ directories, respectively, as I expect this number
	to grow, and typically these passes and traversals are only
	used in passlist.h and passlist.cpp.  Since their interface is
	typically so narrow, it makes sense to not pollute the main include/
	directory with them.
	
	Also fixed a dependence problem in the parser/ Makefile that John
	pointed out.  I can never remember which aspects of Makefiles
	have def-before-use requirements and which don't.  Variable
	definitions do and I used the variable before defining it, causing
	it to be interpreted as an empty value.

Modified files:
	chapel/compiler/AST/: TODO 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: Makefile 
Added files:
	chapel/compiler/passes/: printProgram.h printSymtab.h 
	                         runAnalysis.h 
	chapel/compiler/traversals/: checkBackLinks.h checkIDs.h 
	                             checkTypeInfo.h findUnknownTypes.h 
	                             getstuff.h printAST.h 
	                             setupStmtLinks.h testGetStuff.h 
	                             verifyASTType.h 
Removed files:
	chapel/compiler/include/: checkBackLinks.h checkIDs.h 
	                          checkTypeInfo.h findUnknownTypes.h 
	                          getstuff.h printAST.h printProgram.h 
	                          printSymtab.h runAnalysis.h 
	                          setupStmtLinks.h testGetStuff.h 
	                          verifyASTType.h 

---------------------------------------------------------------------------

09/22/04 15:46:01 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in cloning which was causing flow analysis of literal.v to
	fail periodically.  Basically, I was not cloning correctly for basic
	types.  Cloning will build a new clone to eliminate dynamic dispatch
	or to ensure that a variable only drawn from a descrete set of types
	(float(8), integer(8), integer(4), string, bool, any by reference thing
	including classes and tuples).  This ensures that we can build an
	efficient implementation by being able to specialize the storage
	and access requirements for this objects.  In the future we can
	change these groupings for the convenience of code generation.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good cs3.good 
	                                    cs4.good cs5.good cs6.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good tuples.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop2.good 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

09/22/04 16:22:01 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in AST/expr.cpp which was using type_info to get the
	type of the WriteCall expression itself instead of the type
	of the arguments (funny, it was always coming back integer(8)).
	
	!!!!!!!! Switch over to --analyzeNewAST !!!!!!!!!

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/test/flowanalysis/newast/: COMPOPTS 
	chapel/test/lowlevelcg/jplevyak/: COMPOPTS 

---------------------------------------------------------------------------

09/22/04 19:04:57 -- jplevyak (a.k.a. n10253)

Log message:
	Add more suppressions to cover the collector when GC actually occurs.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

09/23/04 12:31:42 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug in cloning which prevented clones from being created
	for functions containing calls to (other) different clones from
	the same call site.
	This should fix the cs4.v issue.

Modified files:
	chapel/compiler/analysis/: clone.cpp fa.cpp 
	chapel/test/flowanalysis/jplevyak/: COMPOPTS cs4.good cs5.good 
	                                    cs6.good 

---------------------------------------------------------------------------

09/27/04 13:19:13 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in cloning where the out_edge_map was not getting
	cleared of values cached between analysis passes before cloning,
	resulting in unstable results.
	Added a new option -m# for preallocating memory so as to change
	memory hash values to help find such unstable bugs.

Modified files:
	chapel/compiler/analysis/: clone.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/test/flowanalysis/jplevyak/: cs3.good cs4.good 

---------------------------------------------------------------------------

10/01/04 15:18:03 -- shannon

Log message:
	Added functionality to the regression test harness so
	that now the tester can supply a test.stdin file that
	is piped into stdin when running the executable created
	from the test.chpl file.  (Brad added this, I typed.)
	
	Generated read statement for ints and floats, and added
	a test that uses the new test.stdin functionality.
	Added the read() function to the prelude.chpl file.
	
	Changed the WriteCall class bool data member to an
	enumeration to accommodate the added possibility of the
	instance being a read.  Changed the name of the class
	to IOCall.
	
	Changed several if-else statements to switch statements
	to accommodate the added read.
	
	Added read versions of the default formats in
	chpltypes.h, and changed the variable names to reflect
	whether a read or write format.  Added a bool argument
	to the Type::codegenDefaultFormat methods.  Changed the
	default format of domains to a write default format for
	now, since we cannot read domains.
	
	In IOCall::codegen changed the way that the argument list
	is traversed so that the list pointer is advanced only
	within the method.
	
	Removed extra semicolons generated at the end of certain
	IO statements.
	
	Recklessly modified some of John's code using the
	cut-and-paste method.  The read_transfer_function was
	especially scary looking.  John, you might want to take
	a peek at analysis.cpp.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h type.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/runtime/include/: chplio.h chpltypes.h domain.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/: start_test sub_test 
	chapel/test/flowanalysis/newast/: noop.good 
Added files:
	chapel/test/flowanalysis/jplevyak/constants/: .cvsignore 
	chapel/test/flowanalysis/jplevyak/loop/: .cvsignore 
	chapel/test/trivial/shannon/: readWriteFloatInt.chpl 
	                              readWriteFloatInt.good 
	                              readWriteFloatInt.stdin 

---------------------------------------------------------------------------

10/01/04 17:48:24 -- bradc

Log message:
	Updated the nightly token-counting script and removed
	some generated files that I'd accidentally checked into
	CVS when reorganizing the source tree.

Modified files:
	chapel/compiler/vparser/: .cvsignore 
	chapel/util/tokencount/: tokctnightly 
Added files:
	chapel/compiler/analysis/: .cvsignore 
Removed files:
	chapel/compiler/analysis/: prim_data.cpp prim_data.h 
	chapel/compiler/vparser/: cast_code.cpp 

---------------------------------------------------------------------------

10/05/04 15:39:23 -- bradc

Log message:
	* added a notion of a Type having a default initializer because I've
	  been concerned about stuff being uninitialized, and the language
	  spec now has a reasonably accepted proposal for this.  Currently the
	  implementation isn't as rich as in David's proposal, but built-in
	  types now have default initializers and user types have support for
	  simple initializers (ones that are independent of where they are
	  evaluated).
	
	* In doing this, I made several incidental changes:
	
	  - added a notion of a BoolLiteral (which is fairly useless) and a
	    ComplexLiteral to the AST.
	
	  - added support for parsing complex (imaginary) literals, and for
	    folding trivial additions and subtractions of float literals into
	    a single complex literal with real and imaginary parts.
	
	  - added a codegenComplex() method to expressions which will print
	    out the real or imaginary portion of an expression, based on the
	    toggle passed in.  This is implemented only for the simplest of
	    cases, and will rely on some good hoisting of tricky complex
	    expressions to work in general.
	
	  - added better support for UserType's -- codegen now supported
	
	  - changed exponentiation to be right- rather than left-associative

Modified files:
	chapel/compiler/AST/: expr.cpp nils.cpp stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symtab.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/runtime/include/: chplio.h chpltypes.h domain.h 
	chapel/runtime/src/: Makefile chplio.c 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
Added files:
	chapel/runtime/src/: chpltypes.c 
	chapel/test/trivial/bradc/: defaultinit.chpl defaultinit.good 
	                            defaultinit2.chpl defaultinit2.good 

---------------------------------------------------------------------------

10/05/04 15:51:51 -- bradc

Log message:
	Oops, forgot to check in the test of operator associativity
	that I'd written.

Added files:
	chapel/test/trivial/bradc/: opAssociativity.chpl 
	                            opAssociativity.good 

---------------------------------------------------------------------------

10/06/04 15:04:24 -- shannon

Log message:
	Generated read statement for strings.  I chose an arbitrary
	maximum string size of 256 for this implementation.  I
	added two tests - one fails when given a string greater
	than the maximum string size.

Modified files:
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/trivial/shannon/: readStringOverflow.chpl 
	                              readStringOverflow.good 
	                              readStringOverflow.stdin 
	                              readWriteString.chpl 
	                              readWriteString.good 
	                              readWriteString.stdin 

---------------------------------------------------------------------------

10/06/04 17:34:27 -- bradc

Log message:
	A couple of housekeeping things while killing time for my ride
	to come:
	
	- moved timers out of the compiler's internals and into the
	  prelude as a library class (a poorly defined one, currently,
	  but nonetheless... :)
	
	- added a lookupInternalType() method to the symboltable to
	  avoid some dynamic casting.

Modified files:
	chapel/compiler/AST/: symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

10/12/04 17:39:38 -- bradc

Log message:
	Checking in some initial AST cloning code -- no guarantees that it
	works in any realistic way yet, but got enough making sense and
	working stably that it made sense to take a snapshot.  All AST nodes
	now support a copy() method (though it may not always be implemented)
	which is designed to make a reasonable, deep copy of that node.  Those
	AST nodes which will support cloning (like FnDefStmts and
	TypeDefStmts), will also support a clone() function that does
	lower-level stuff like inserting new symboltable scopes into the
	correct place and linking the new statement into the statement list.
	Currently, only FnDefStmt supports this clone() function -- the
	interface may also become richer as we determine how this will
	interact with John's code.
	
	Cloning of fairly flat functions seems to work fine, but I haven't
	done careful testing for functions that contain deeply nested scopes.
	Cloning of classes is unimplemented, and copying of classes is
	unlikely to be correct, currently.
	
	I added a new debugging traversal -- cloneAllFns -- that simply walks
	the AST looking for functions that don't being with an underscore and
	clones them.  This works when applied to all tests in the test system.
	
	Renamed UseBeforeDefSymbol to be UnresolvedSymbol, and its astType to
	SYMBOL_UNRESOLVED.
	
	Killed the old getXXXX() code, which we seem to be living without, and
	because I'd prefer to put future effort into improving the GetStuff
	pass rather than maintaining getXXXX().

Modified files:
	chapel/compiler/AST/: TODO baseAST.cpp expr.cpp link.cpp 
	                      nils.cpp stmt.cpp symbol.cpp symtab.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	                          symbol.h symscope.h symtab.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: Makefile.share verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: cloneAllFns.cpp cloneAllFns.h 

---------------------------------------------------------------------------

10/13/04 09:56:53 -- bradc

Log message:
	Reordered classes in expr.cpp and expr.h to prepare for
	some refactoring. I'm checking this in separately in
	order to make the cvs diff for the refactoring changes
	readable.
	
	Also changed nightly regression test script to use a
	different log filename when it is run in debug mode.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

10/13/04 10:37:14 -- bradc

Log message:
	Moved CastExpr out from under ParenOpExpr in the
	AST class hierarchy, as it was becoming
	increasingly clear that it was out of place
	there.  Also, removed assumptions that it
	would have a list of arguments rather than
	a single argument -- this came from a guess
	that casts might look like constructors in the
	language.  As this became less true, it seemed
	less reasonable to anticipate this.  Changed
	analysis.cpp by pattern-matching in this
	regard -- John, you may want to take a quick
	look to make sure I got things correct.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

10/13/04 12:12:33 -- bradc

Log message:
	Made the code that parses files into the AST into a pass,
	moving towards the goal of supporting multi-file
	compilation.

Modified files:
	chapel/compiler/AST/: TODO 
	chapel/compiler/include/: createAST.h pass.h 
	chapel/compiler/main/: createAST.cpp driver.cpp pass.cpp 
	                       passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	chapel/test/compflags/bradc/passlist/: COMPOPTS test.good 
	chapel/test/trivial/bradc/protoast/: mypasslist.h 
Added files:
	chapel/compiler/passes/: filesToAST.cpp filesToAST.h 
	chapel/test/compflags/bradc/passlist/: NOEXEC 

---------------------------------------------------------------------------

10/13/04 13:54:53 -- bradc

Log message:
	* added a new AST node -- the Module.  This is meant to
	  correspond to the language's module concept, though
	  for the short-term, it's likely to correspond more
	  closely with an input file.  Currently these are
	  unused except at code generation time.  Eventually,
	  this is what code will be parsed into, and modules
	  will be passed to subsequent compiler passes.  Those
	  of us working on codegen, note that the previously
	  global variables intheadfile, extheadfile have been
	  moved into the Module class, and can typically be
	  accessed in codegen() methods via:
	    currentModule->[int/ext]headfile
	
	* made codegen into a pass and moved the related code
	  out of backend/codegen.cpp and into passes/codegen.cpp
	  and the Module class respectively.
	
	* moved the pass.h and traversal.h files into passes/
	  and traversals/ respectively, as that's where they
	  really belong.
	
	* renamed main/pass.cpp into main/runpasses.cpp because
	  the old filename impled to me that it implemented the
	  (abstract) Pass class, and I could never find the
	  runPass-related code.
	
	* corrected PrintSymtab from a Traversal to a Pass

Modified files:
	chapel/compiler/AST/: Makefile.share stmt.cpp type.cpp 
	chapel/compiler/backend/: Makefile.share 
	chapel/compiler/include/: link.h symbol.h 
	chapel/compiler/main/: Makefile.share driver.cpp passlist.cpp 
	                       passlist.h 
	chapel/compiler/passes/: Makefile.share printSymtab.h 
Added files:
	chapel/compiler/AST/: module.cpp 
	chapel/compiler/include/: module.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: codegen.cpp codegen.h pass.h 
	chapel/compiler/traversals/: traversal.h 
Removed files:
	chapel/compiler/backend/: codegen.cpp 
	chapel/compiler/include/: codegen.h pass.h traversal.h 
	chapel/compiler/main/: pass.cpp 

---------------------------------------------------------------------------

10/13/04 17:37:36 -- jplevyak (a.k.a. n10253)

Log message:
	Removed some dead code and move a few lines around... no real change.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

10/14/04 14:21:14 -- shannon

Log message:
	Generated read statement for enumerations.  I continued
	with the arbitrary maximum string size of 256 for the
	enums that I used when reading strings.  Added a test.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: chplio.h stdchpl.h 
	chapel/test/: .cvsignore 
Added files:
	./: .cvsignore 
	chapel/test/trivial/shannon/: readWriteEnum.chpl 
	                              readWriteEnum.good 
	                              readWriteEnum.stdin 

---------------------------------------------------------------------------

10/14/04 15:37:12 -- bradc

Log message:
	Removed Shannon's .cvsignore which I think she
	checked in by accident (Shannon, if this isn't
	true, let me know).
	
	TIP: I find a .cvsignore in the root level of
	a project can be very helpful, but also very
	user-specific, so I suggest making your own
	.cvsignore file which contains .cvsignore,
	and then you can add stuff to it, and it'll
	never try to check itself in.  Hope that's
	true now that a .cvsignore file exists in
	this directory.  If not I'll yank it from the
	CVS tree manually.

Removed files:
	./: .cvsignore 

---------------------------------------------------------------------------

10/15/04 17:24:37 -- bradc

Log message:
	Increased the use of modules in the compiler by creating
	a module per file at the outset of compilation (if all
	of the files use the .chpl extension), and then passing
	the resulting list of modules to all subsequent passes.
	Haven't actually tested this for multiple files yet (and
	it wouldn't necessarily do anything useful even if it
	did all work), but I believe the structure is what we
	want going forward (with the caveat that a file may
	contain multiple modules, so the one module per file
	assumption is currently a limited one).
	
	Some changes that are folded in with this:
	
	* all files are opened before any are processed and an
	  error message is generated if there are any problems.
	  Inserted a test to guard this behavior.
	
	* moved all the createAST.cpp code either into parser.cpp,
	  a new file that parses a .chpl file, or into the
	  filesToAST pass.
	
	* made all passes and traversals take a Module* list
	  rather than a Stmt* list.  The only one of these
	  that I think has an open question is that the
	  RunAnalysis pass that calls John's analysis code
	  passes a filename to that routine, so it wasn't
	  clear what to do in the presence of multiple files.
	  For now, I just pass in the first filename
	  arbitrarily.  To the extent that I looked at this,
	  it seems to be used mostly to create new filenames
	  (for dumps and graphs), so maybe this is acceptable?

Modified files:
	chapel/compiler/AST/: TODO module.cpp 
	chapel/compiler/include/: driver.h module.h 
	chapel/compiler/main/: Makefile.share driver.cpp runpasses.cpp 
	chapel/compiler/parser/: Makefile.share 
	chapel/compiler/passes/: Makefile.share codegen.cpp codegen.h 
	                         filesToAST.cpp filesToAST.h pass.h 
	                         printProgram.cpp printProgram.h 
	                         printSymtab.cpp printSymtab.h 
	                         runAnalysis.cpp runAnalysis.h 
	chapel/compiler/traversals/: checkBackLinks.cpp checkBackLinks.h 
	                             checkIDs.cpp checkIDs.h 
	                             traversal.cpp traversal.h 
	chapel/test/flowanalysis/newast/: .cvsignore arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/compiler/include/: parser.h 
	chapel/compiler/main/: runpasses.h 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: pass.cpp 
	chapel/test/compflags/bradc/missinginfile/: COMPOPTS test.chpl 
	                                            test.good 
Removed files:
	chapel/compiler/include/: createAST.h 
	chapel/compiler/main/: createAST.cpp 

---------------------------------------------------------------------------

10/15/04 17:30:10 -- bradc

Log message:
	Replaced some extern declarations in .cpp files
	with inclusions of #include files.
	
	Also, forgot to mention on the last check-in
	that I fixed the creation of AST nodes so that
	if they are created by the compiler, they are
	given the filename "<internal>" and the line
	number 0 by default.  (Certain things like
	cloning will want to override these defaults,
	but this was an improvement over what used to
	happen which is that they'd be listed as being
	on the last line of the last file that was
	parsed.  This resuled in cosmetic changes to all
	of the flowanalysis/newast tests.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

10/15/04 17:45:22 -- bradc

Log message:
	Fixed a seg fault that was occurring when trying
	to compile multiple files due to things not being
	initialized in the right order.  Now multiple
	files make it through the chapel compiler but
	don't make it through the C compiler because
	we generate an _init function per file.

Modified files:
	chapel/compiler/AST/: TODO module.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: filesToAST.cpp 

---------------------------------------------------------------------------

10/18/04 14:44:22 -- shannon

Log message:
	Generated read statement for booleans and complex
	numbers.  Added four tests; one for the boolean
	and three for the complex numbers.  Tested both
	the standard 'a + bi' and tuple (a, b) versions
	of complex number reads.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/trivial/shannon/: readStringOverflow.good 
Added files:
	chapel/test/trivial/shannon/: readWriteBool.chpl 
	                              readWriteBool.good 
	                              readWriteBool.stdin 
	                              readWriteComplex.chpl 
	                              readWriteComplex.good 
	                              readWriteComplex.stdin 
	                              readWriteComplexFail1.chpl 
	                              readWriteComplexFail1.good 
	                              readWriteComplexFail1.stdin 
	                              readWriteComplexTuple.chpl 
	                              readWriteComplexTuple.good 
	                              readWriteComplexTuple.stdin 

---------------------------------------------------------------------------

10/20/04 14:22:46 -- shannon

Log message:
	Wrote a traversal routine that identifies all
	symbols of type UnresolvedSymbol.  When an
	unresolved symbol is found an error message
	identifying the symbol is printed.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: findUnresolvedSymbols.cpp 
	                             findUnresolvedSymbols.h 

---------------------------------------------------------------------------

10/21/04 09:51:36 -- shannon

Log message:
	Added a test of read of a user-defined type.

Added files:
	chapel/test/trivial/shannon/: readWriteUserType.chpl 
	                              readWriteUserType.good 
	                              readWriteUserType.stdin 

---------------------------------------------------------------------------

10/22/04 16:29:19 -- jplevyak (a.k.a. n10253)

Log message:
	Test files for the first part of SSCA #2, up to the kernels.
	For your consideration.

Added files:
	chapel/test/Share/: arrayfun-1.chpl assert-1.chpl 
	                    assert-2-assert.chpl builtins-1.chpl 
	                    class-1.chpl class-2.chpl class-3.chpl 
	                    config-1.chpl constant-folding-1.chpl 
	                    constructor-1.chpl count-1.chpl 
	                    destruct-1.chpl destruct-2.chpl 
	                    domain-1.chpl domain-2-rangeerror.chpl 
	                    domain-2.chpl domain-3.chpl domain-4.chpl 
	                    domain-5.chpl domain-6.chpl domain-7.chpl 
	                    error-1.chpl funcall-1.chpl funcall-2.chpl 
	                    funcall-3.chpl intent-1.chpl intent-2.chpl 
	                    intent-3.chpl intent-4.chpl 
	                    intent-5-error.chpl intent-6-error.chpl 
	                    intent-7-error.chpl intent-8-error.chpl 
	                    let-1.chpl main-1.chpl module-1.chpl 
	                    module-2-error.chpl namedargs-1.chpl 
	                    noinitdecl-1.chpl noinitdecl-2.chpl 
	                    noinitdecl-3-error.chpl 
	                    noinitdecl-4-error.chpl print-1.chpl 
	                    record-1.chpl record-2.chpl record-3.chpl 
	                    scan-1.chpl seq-1.chpl seq-2.chpl seq-3.chpl 
	                    strdomain-1.chpl string-1.chpl 
	                    typeselect-1.chpl typevar-1.chpl 
	                    typevar-2.chpl union-1.chpl union-2.chpl 
	                    union-3.chpl with-1.chpl with-2.chpl 

---------------------------------------------------------------------------

10/25/04 16:41:41 -- bradc

Log message:
	Checking in some code I penciled in Friday, but didn't get
	to check in due to networks going down.
	
	Revamped some symboltable stuff to make the type/level
	components of a SymScope to be more appropriate and rely
	less on the integer values of the scope types.  Added a
	scope after all user code is parsed so that if new
	symbols are added after parsing they will be put into this
	scope by default.  We may want to put in an assertion that
	this scope is empty at codegen time, but I haven't done
	so yet.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp stmt.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/passes/: filesToAST.cpp 

---------------------------------------------------------------------------

10/27/04 15:38:17 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for complex numbers in vparser and low level CG.
	Fixed bug in "return" handling in vparser.
	Added test cases for dispatch covering basic overloading.
	  I am going to get them working with the test front-end then
	  translate them to Chapel when we are ready for that.

Modified files:
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/vparser/: parse_ast.cpp v.g 
Added files:
	chapel/test/dispatch/jplevyak/: COMPOPTS Makefile.cg NOVGRBIN 
	                                dispatch-1.good dispatch-1.v 
	                                dispatch-2.good dispatch-2.v 
	                                dispatch-3.good dispatch-3.v 
	                                dispatch-4.good dispatch-4.v 
	                                dispatch-5.good dispatch-5.v 
	                                dispatch-6.good dispatch-6.v 

---------------------------------------------------------------------------

10/29/04 15:47:40 -- jplevyak (a.k.a. n10253)

Log message:
	Added basic support for intents and default arguments to the vparser.
	Removed symbol table from the parser -- do all symbol table resolution
	 at the AST level.
	Added support for "let" and multiple "var" declarations at the same time.

Modified files:
	chapel/compiler/analysis/: TODO pattern.cpp 
	chapel/compiler/include/: ast_kinds.h parse_ast.h sym.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/vparser/: grammar.cpp parse_ast.cpp v.g 
	chapel/test/flowanalysis/jplevyak/: assign1.v assign2.v cs4.v 
	                                    cs5.v cs6.v 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 

---------------------------------------------------------------------------

11/01/04 15:44:21 -- shannon

Log message:
	Added functionality to the regression test harness so
	that now the tester can supply a test.execopts or
	test.compopts file to add executable or compile time
	options on a per-test basis.
	
	Implemented code generation of configuration variables
	of integer type.  Added a bunch of tests that use the
	new test.execopts functionality.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: main.c 
	chapel/test/: sub_test 
Added files:
	chapel/test/execflags/shannon/configs/: EXECOPTS configVar.chpl 
	                                        configVar.execopts 
	                                        configVar.good 
	                                        configVarDash.chpl 
	                                        configVarDash.execopts 
	                                        configVarDash.good 
	                                        configVarDashS.chpl 
	                                        configVarDashS.execopts 
	                                        configVarDashS.good 
	                                        configVarDashSVarEquals.chpl 
	                                        configVarDashSVarEquals.execopts 
	                                        configVarDashSVarEquals.good 
	                                        configVarWithSpaces.chpl 
	                                        configVarWithSpaces.execopts 
	                                        configVarWithSpaces.good 
	                                        configVarY.chpl 
	                                        configVarY.execopts 
	                                        configVarY.good 

---------------------------------------------------------------------------

11/04/04 17:07:08 -- jplevyak (a.k.a. n10253)

Log message:
	Reorganize files to better compartmentalize the test parser since
	no parts of the system should depend on it other than a call in the
	driver.

Modified files:
	chapel/compiler/analysis/: Makefile.share inline.cpp prim.cpp 
	chapel/compiler/include/: builtin.h driver.h if1.h parse.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/compiler/vparser/: Makefile.share grammar.cpp parse.cpp 
	                          parse_ast.cpp v.g 
Added files:
	chapel/compiler/analysis/: builtin.cpp 
	chapel/compiler/vparser/: ast_kinds.h parse_ast.h 
	                          parse_structs.h scope.h 
Removed files:
	chapel/compiler/include/: ast_kinds.h parse_ast.h 
	                          parse_structs.h scope.h 
	chapel/compiler/vparser/: builtin.cpp 

---------------------------------------------------------------------------

11/05/04 15:09:00 -- jplevyak (a.k.a. n10253)

Log message:
	More work on adding to the test parser bits of Chapel.
	In this case "subtype" and reworked how 'var' was handled.
	Also made = a statement instead of an expression.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: sym.h 
	chapel/compiler/vparser/: ast_kinds.h parse_ast.cpp parse_ast.h 
	                          prelude.v v.g 
	chapel/test/flowanalysis/jplevyak/: sample.good sample.v var.v 
	chapel/test/lowlevelcg/jplevyak/: sample.v 
	chapel/test/parsing/jplevyak/: literal.good tuples.good 

---------------------------------------------------------------------------

11/05/04 19:14:07 -- bradc

Log message:
	Checking in some entry point work that I started on this
	week, in part motivated by the "implement main()" item in
	our SSCA2 task list, and in part because it seems wise to
	get entry points working properly sooner rather than later.
	We may still change our strategy on this, but since I'll
	be at SC next week, I wanted to get this off my plate and
	mind for now.
	
	The current implementation looks for a module-level function
	called main() and uses that as the entry point for the
	program if it exists (renaming it to _chpl_main() when
	generating C code, and inserting a call to the module's
	initialization routine at the top.  If there is no
	module-level main(), it currently runs the module's
	initialization routine which contains all module-level code
	(thus, our current tests with no main() will still work).
	If it finds two module-level main() functions, or two
	modules but no main function, then it complains.  Added
	tests to guard this behavior for now.  All of this may be
	revisited depending on what we decide to do going forward.
	
	This change involved a number of changes:
	
	* changed the "Module" AST node that I checked in the other
	  week into a "ModuleSymbol" subclass of Symbol since
	  modules need to be treated as symbols in naming constructs
	  (the original implementation was using Modules as a loose
	  concept corresponding to files -- the new implementation
	  is meant to be more related to modules in the true Chapel
	  sense).  All passes now take a ModuleSymbol list as the
	  argument to their run() routine...
	
	* moved the codegen output files (codefile, intheadfile,
	  extheadfile) from instance variables of a module to global
	  variables, since they only have a limited useful lifespan
	  (only one module is codegen-ed at a time), and didn't seem
	  to truly be part of a module (might make sense to make
	  them part of some other structure/class, though...)
	
	* added a static class member to FnSymbol that keeps track
	  of the "main" function.
	
	* changed SCOPE_FILE to SCOPE_MODULE since files are no
	  longer a semantically meaningful concept in Chapel -- all
	  files are treated as modules by default.
	
	* added a USR_FATAL call to match INT_FATAL because I couldn't
	  find an appropriate error message generator.  We need to
	  unify these moving forward (fail, str_error, USR_FATAL, etc.)
	
	* refactored the parsing code to return modules rather than
	  statement lists.
	
	* added a pass RenameCSymbols that is intended to rename
	  symbols that have special meaning in C (like main).  This
	  should also be used eventually to rename Chapel's built-in
	  types (like integer) to their Chapel runtime representation
	  (like _integer64).
	
	* renamed a module's init function from __init to
	  __init_<modulename> in anticipation of supporting multiple
	  modules.  This required updating the output of all
	  flowanalysis/ and protoast/ tests.
	
	* added a "halt" command to the gdb environment set up by the
	  --gdb flag -- I was finding that in certain cases of
	  infinite recursion the "quit" command wouldn't work.  The
	  "halt" command is more heavy-handed -- will get you out
	  no matter what, but won't clean up after itself (i.e.,
	  you might have a /tmp directory to clean up by hand).

Modified files:
	chapel/compiler/AST/: Makefile.share loc.cpp stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h files.h loc.h misc.h 
	                          parser.h symbol.h symscope.h symtab.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	                       runpasses.cpp runpasses.h 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: Makefile.share codegen.cpp codegen.h 
	                         filesToAST.cpp filesToAST.h pass.cpp 
	                         pass.h printProgram.cpp printProgram.h 
	                         printSymtab.cpp printSymtab.h 
	                         runAnalysis.cpp runAnalysis.h 
	chapel/compiler/traversals/: checkBackLinks.cpp checkBackLinks.h 
	                             checkIDs.cpp checkIDs.h 
	                             traversal.cpp traversal.h 
	                             verifyASTType.cpp 
	chapel/compiler/util/: files.cpp misc.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: main.c 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	chapel/compiler/passes/: renameCSymbols.cpp renameCSymbols.h 
	chapel/test/compflags/bradc/onebadfile/: LASTCOMPOPTS 
	                                         badfile.chpl 
	                                         badfile.good 
	chapel/test/compflags/bradc/twomodulesnomain/: COMPOPTS 
	                                               module1.chpl 
	                                               module1.good 
	chapel/test/compflags/bradc/twomodulesnomain/module2/: NOTEST 
	                                                       module2.chpl 
	chapel/test/trivial/bradc/entrypoint/: main.chpl main.good 
	                                       nomain.chpl nomain.good 
	                                       twomains.chpl 
	                                       twomains.good 
Removed files:
	chapel/compiler/AST/: module.cpp 
	chapel/compiler/include/: module.h 

---------------------------------------------------------------------------

11/09/04 14:51:43 -- jplevyak (a.k.a. n10253)

Log message:
	Front-end specific transfer functions are now a Struct so that
	they can have additional annotations (e.g. "has sideeffects" vs not).
	Low level CG a bit more robust when dealing with sum-types.
	Fixed a bug in cloning which was causing some excess data structure
	  cloning.
	'void' is now not a subtype of 'any'; added a new type 'all' which
	  includes 'void'.  'all' is not accessible to the user.
	Added template iterator to iterate through all low level variables
	  in a program.
	Sum types which include "void" after analysis are set to "void"
	  This makes sense because things which contain 'void' cannot be
	  used for any purpose and are essentially dead.
	Low Level intermediate for build function for 'if' now has option
	  for if expression vs if statement.
	Added basic level of dead code tagging based on the interprocedural
	  dataflow graph.  This could be reflected to the higher level.
	Reoganized the V grammar a bit to make it more like Chapel.

Modified files:
	chapel/compiler/analysis/: Makefile.share analysis.cpp cg.cpp 
	                           clone.cpp fa.cpp if1.cpp 
	                           prim_data.dat 
	chapel/compiler/include/: fa.h if1.h pnode.h prim.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/vparser/: ast_kinds.h parse_ast.cpp v.g 
	chapel/test/flowanalysis/jplevyak/: assign2.v cs3.good cs4.good 
	                                    sample.good sample.v 
	chapel/test/flowanalysis/jplevyak/constants/: const.v 
	chapel/test/flowanalysis/jplevyak/loop/: rec.v 
	chapel/test/lowlevelcg/jplevyak/: sample.v 
	chapel/test/parsing/jplevyak/: for1.good for2.good module.good 
Added files:
	chapel/compiler/analysis/: dead.cpp 
	chapel/compiler/include/: dead.h 

---------------------------------------------------------------------------

11/09/04 15:50:36 -- jplevyak (a.k.a. n10253)

Log message:
	Low level code generator now outputs code in SSU form instead of
	  dropping the PHI and PHY functions.  This is a better test of the
	  intermediate form.

Modified files:
	chapel/compiler/analysis/: cg.cpp 
	chapel/compiler/include/: pnode.h 
Added files:
	chapel/test/lowlevelcg/jplevyak/: ssu.good ssu.v 

---------------------------------------------------------------------------

11/15/04 10:27:19 -- bradc

Log message:
	Small change to --gdb flag test to make it work with gdb 6.x
	which seems to be becoming the default on Cray systems.
	Basically, had to grep out a line that it printed indicating
	what thread_db  library it was using...

Modified files:
	chapel/test/compflags/bradc/gdbddash/: declint.good 
Added files:
	chapel/test/compflags/bradc/gdbddash/: PREDIFF 

---------------------------------------------------------------------------

11/15/04 11:40:02 -- deitz

Log message:
	Fixed the precedence of tokens in the parser so as to be the same as
	in the Chapel specification and updated several test outputs.  Made
	unary plus and minus higher in precedence than times and divide and
	made the bitwise operators higher in precedence than the comparison
	operators.  Added ':' and bitwise shift left and right.
	
	Changed use of ':' in domains to 'in' in keeping with the language and
	updated a couple of test programs.  So [i: D] is now written [i in D].
	
	Improved the parser in general.  Lowered the shift/reduce errors from
	358 to 185.  Lowered the reduce/reduce errors from 4 to 2.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl 
	chapel/test/trivial/shannon/: compSampler.good 

---------------------------------------------------------------------------

11/15/04 17:11:57 -- deitz

Log message:
	Renamed all tokens in the parser so that they begin with a "T" which
	stands for either token, terminal, or terminal token.  This change
	will let us avoid name space collisions later and makes it easier to
	read and work with the parser.
	
	Added all single-character tokens to the lexer.  We should eventually
	remove the catch-all "." case but I left this in so that a bug will
	regress (see below).
	
	Added the keyword "call" to the language.  This is optional and may
	precede a function call at the statement level.
	
	Refactored how "by" is handled in the parser.  It is now not
	associated with a range.  A range is an expression and it is already
	associated with an expression.
	
	With this checkin, the number of shift-reduce errors has fallen to 123
	from 185.
	
	This checkin seems to uncover a strange bug in the test case
	classes/bradc/trivialclass and hopefully this will regress.  When I
	run this bug with the command /users/deitz/chapel/compiler/chpl (as is
	done by the test system when I call it), there is the fatal error
	"program does not type."  When I run this test just using the command
	chpl (shorter argv[0]), it works.  When I removed the "." case from
	the file chapel.lex (see file), I got the error in the latter case,
	but not the former.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 

---------------------------------------------------------------------------

11/15/04 18:22:15 -- bradc

Log message:
	A bunch of changes related to copyright messages and
	notices, in anticipation of (a) sending a tarball to
	Roxana as soon as I get clearance and (b) moving the
	CVS tree to UW.
	
	* Added a top-level COPYRIGHT and LICENSE file, replacing
	  the file that was previously in the compiler/ directory,
	  and making Cray the copyright owner.
	
	* Made the build conver the LICENSE file into #include-able
	  C++ code rather than storing it in that format in CVS
	
	* Removed copyright messages from all code apart from
	  vec/list/arg, which retain John's copyright message (minus
	  the all rights reserved part) and the beautify code which
	  retains the ZPL copyright message.
	
	* In .cpp files, also removed the Mode comment, since emacs
	  can be set up to automatically go into this mode.  Let me
	  know if anyone needs this .emacs text, or if I've made too
	  strong of an assumption in pulling this out.  I resisted
	  pulling them out in .h files that contain them, since one
	  might want to make emacs load .h files in C mode (I use
	  C++ for all .h files as well...).
	
	* Added some top level make targets: tarball, which builds
	  a tarball of the CVS tree, pulling out the CVS directories,
	  and adding the COPYRIGHT line to the tops of all .cpp, .c,
	  .h, .y, .l, .lex, .g, and Make* files as a comment.  Also
	  release, which builds a similar tarball, but blows away
	  certain directories and files (and should probably do more...
	  this is a placeholder to be revisited when we actually
	  start doing releases).  Added a prepend script to the util/
	  directory to help with this.
	
	* Switched order of actions in sub_test so that a PREDIFF
	  script could construct a test's .good file.
	
	* Changed the test of --copyright to create the .good output
	  from the LICENSE file to make sure the two messages match.
	
	* Added some new .cvsignore entries to the test directory to
	  keep cvs -nq update clean

Modified files:
	./: Makefile 
	chapel/compiler/adt/: list.cpp map.cpp vec.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp builtin.cpp 
	                           cdb.cpp cdb.h cfg.cpp cg.cpp 
	                           clone.cpp dead.cpp dom.cpp fa.cpp 
	                           fa_extras.cpp fun.cpp if1.cpp 
	                           inline.cpp loop.cpp pattern.cpp 
	                           pdb.cpp pnode.cpp prim.cpp 
	                           prim_data.dat prim_data_incs.h 
	                           region.cpp region.h ssu.cpp ssu.h 
	                           ssu_extra.cpp sym.cpp var.cpp 
	chapel/compiler/analysis/make_prims/: make_prims.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: analysis.h ast.h builtin.h 
	                          builtin_symbols.h callbacks.h cg.h 
	                          clone.h code.h dead.h dom.h driver.h 
	                          dump.h fa.h fun.h geysa.h grammar.h 
	                          graph.h if1.h inline.h list.h log.h 
	                          loop.h map.h misc.h num.h parse.h 
	                          pattern.h pdb.h pnode.h prim.h sym.h 
	                          var.h vec.h 
	chapel/compiler/main/: Makefile arg.cpp arg.h driver.cpp 
	                       version.cpp 
	chapel/compiler/test/: list.cpp map.cpp misc.cpp vec.cpp 
	chapel/compiler/util/: log.cpp misc.cpp 
	chapel/compiler/vparser/: ast_cf.cpp ast_kinds.h grammar.cpp 
	                          parse.cpp parse_ast.cpp parse_ast.h 
	                          parse_structs.h scope.cpp scope.h v.g 
	chapel/test/: .cvsignore sub_test 
Added files:
	./: COPYRIGHT LICENSE 
	chapel/compiler/main/: .cvsignore 
	chapel/make/: Makefile.release 
	chapel/test/compflags/bradc/copyright/: .cvsignore PREDIFF 
	chapel/test/dispatch/jplevyak/: .cvsignore 
	chapel/util/: prepend 
Removed files:
	chapel/compiler/: COPYRIGHT 
	chapel/test/compflags/bradc/copyright/: declint.good 

---------------------------------------------------------------------------

11/16/04 13:36:07 -- jplevyak (a.k.a. n10253)

Log message:
	null is now a primitive type instead of a gobal value.
	null is now nolonger of type void since things of type
	"void" cannot be used as arguments to functions.
	Fixed a bug which was causing instability that Steve saw:
	  I was accidentially updating lists while I was traversing them.

Modified files:
	chapel/compiler/analysis/: TODO analysis.cpp ast.cpp fa.cpp 
	chapel/compiler/vparser/: prelude.v 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

11/16/04 16:12:01 -- deitz

Log message:
	Removed operators &&, ||, !, and % from the compiler, replacing them
	with "and", "or", "not", and "mod" as per the language spec.  Note mod
	is not in the language spec.  Updated some test cases to reflect this
	change.
	
	Eliminated the last two reduce-reduce errors in the parser.  These had
	to do with problems parsing index variables in domains.  They are now
	parsed as expressions and it is made sure that they are just tuples or
	variables.  For example, [i,j in D] and [(i,j) in D] are legal, but
	[i+j in D] is not.

Modified files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/Samples/ex1-astlog/: astlog1.good 
	chapel/test/Samples/ex2-notest/: illegal.chpl 
	chapel/test/flowanalysis/newast/: bitwise_ops.chpl 
	                                  bitwise_ops.good 
	                                  compSampler.chpl 
	                                  conditional.chpl 
	                                  conditional.good 
	                                  logical_and.chpl 
	                                  logical_and.good 
	                                  logical_not.chpl 
	                                  logical_not.good mod.chpl 
	                                  mod.good 
	chapel/test/lowlevelcg/jplevyak/: bitwise_ops.chpl 
	                                  bitwise_ops.good 
	chapel/test/trivial/bradc/: conditional.chpl conditional.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
	chapel/test/trivial/shannon/: bitwise_ops.chpl bitwise_ops.good 
	                              compSampler.chpl compSampler.good 
	                              logical_and.chpl logical_and.good 
	                              logical_not.chpl logical_not.good 
	                              mod.chpl mod.good 
	                              readWriteBool.chpl 

---------------------------------------------------------------------------

11/16/04 16:48:52 -- deitz

Log message:
	Removed support for the bitwise shift operators << and >> from the
	compiler and updated or removed several test cases.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl mvm-seq.good 
Removed files:
	chapel/test/flowanalysis/newast/: shift_ops.chpl shift_ops.good 
	chapel/test/trivial/shannon/: shift_ops.chpl shift_ops.good 

---------------------------------------------------------------------------

11/17/04 12:29:11 -- deitz

Log message:
	Changed the parser support for reductions so it more closely resembles
	the syntax in the specification.  It remains slightly different but
	can easily be changed since there is no implementation of reductions
	yet.
	
	Continued to improve parsing.  Specifically, ranges that have
	expressions in them are now parsed correctly.  The number of
	shift-reduce errors is currently 30, down from 92.
	
	Added a small test case to see if identifiers only one character in
	length work.  They do.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/trivial/bradc/protoast/: badred.chpl badred.good 
	                                     mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
Added files:
	chapel/test/trivial/deitz/: test_short_identifiers.chpl 
	                            test_short_identifiers.good 

---------------------------------------------------------------------------

11/17/04 14:43:15 -- jplevyak (a.k.a. n10253)

Log message:
	Work to separate the type, includes and specialization hierarchies.
	Dispatch now uses the specialization hierarchy.  There are now
	separate specialization and type constraints for arguments a la Cecil.
	Initial work on building true LUB and GLB types.  Fixed a bug in low
	level code gen which was trying to build names for types which where not
	directly used (and currently unsupported) like float128.

Modified files:
	chapel/compiler/analysis/: TODO analysis.cpp ast.cpp cg.cpp 
	                           clone.cpp fa.cpp if1.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: analysis.h callbacks.h sym.h 
	chapel/compiler/vparser/: ast_kinds.h parse_ast.cpp parse_ast.h 
	                          v.g 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               tuples.good 

---------------------------------------------------------------------------

11/17/04 15:03:33 -- shannon

Log message:
	Refactored much of the code implemented previously for
	integer configuration variable code generation.
	
	All of the code but one line was moved out of main into
	separate files.  Main calls the parseArgs function (in arg.c)
	which parses the command-line argument and stores it in
	a hash table.  The hash table is made up of configVar structs
	with the variable name and value stored as strings.
	
	The setInCommandLine function (in config.c) now simply checks
	the table to determine if the variable has been set.

Modified files:
	chapel/runtime/include/: chplio.h stdchpl.h 
	chapel/runtime/src/: Makefile main.c 
Added files:
	chapel/runtime/include/: arg.h config.h 
	chapel/runtime/src/: arg.c config.c 

---------------------------------------------------------------------------

11/18/04 11:06:26 -- deitz

Log message:
	Removed the shift-reduce error associated with the else-statement of
	an if-statement.  Added the optional keyword "then" which can be used
	between the expression and the then-statement in an "if" statement.
	The AST is unchanged.  Added two test cases for using if, then, and
	else.
	
	Removed parsing support for functions with no known type as given by
	the syntax "function foo(): { }" in which a type did not follow the
	colon.  This removes two problematic shift-reduce errors.
	
	Added two scripts to the test directory, cat_tests and cat_goods,
	which print to standard out all of the test programs and their good
	outputs.  On each line, the file name and line number are displayed.
	These scripts allow for easy grepping of features in the test
	directory.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	                         internal_prelude.chpl 
Added files:
	chapel/test/: cat_goods cat_tests 
	chapel/test/trivial/deitz/: test_if_else.chpl test_if_else.good 
	                            test_if_then_else.chpl 
	                            test_if_then_else.good 

---------------------------------------------------------------------------

11/19/04 10:34:06 -- bradc

Log message:
	Updated LICENSE as requested by Cray legal.  The license is
	currently worded quite strictly.  The assumption is that when
	we're ready to drop an open source release, the license will
	change accordingly (so this license is merely to prevent
	copies of the code that escape from being used improperly --
	not that we expect copies to escape).

Modified files:
	./: LICENSE 

---------------------------------------------------------------------------

11/19/04 10:43:08 -- jplevyak (a.k.a. n10253)

Log message:
	Annother GC suppression

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

11/19/04 10:52:23 -- deitz

Log message:
	Updated parsing of domains so that they can be initialized by
	sequences but not by constructs enclosed in square brackets.  So
	
	  var D : domain(1) = (1..n);
	
	is legal but
	
	  var D : domain(1) = [1..n];
	
	is not.  This is more inline with the current thinking of Chapel.
	
	Added a stopgap measure to the parser function that creates variables
	and constants.  If the variable or constant has a domain type, the
	initializer expression is converted into a domain.  This is not the
	place to handle this, but this meshes with how domains and sequences
	are currently handled.
	
	This checking brings the total number of shift/reduce errors in the
	parser down to zero.

Modified files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/test/flowanalysis/newast/: declprintdom.chpl 
	                                  declprintdom.good 
	                                  declprintdom2.chpl 
	                                  declprintdom2.good domarr.chpl 
	                                  enumarray.good 
	                                  formatoutput.good noop.chpl 
	                                  protoast_test.good 
	chapel/test/trivial/bradc/: declprintdom.chpl declprintdom2.chpl 
	                            noop.chpl 
	chapel/test/trivial/bradc/domarr/: domarr.chpl 
	chapel/test/trivial/bradc/protoast/: badred.chpl 
	                                     mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl test.good 

---------------------------------------------------------------------------

11/19/04 13:05:37 -- shannon

Log message:
	A few minor changes related to my recently-committed
	config var code.
	
	* Changed how I handle the case where extra characters
	  are tacked to the value given to a config var on
	  the command line, e.g. "-sx=123garbage".  This is
	  now an error.
	
	* Added a test case where I force a hash collision of
	  the config var's names.  I wrote a test to determine
	  what names would collide, and then used these variable
	  names in the chapel test.
	
	* Made the error messages printed for incorrectly formatted
	  config vars more specialized.

Modified files:
	chapel/runtime/src/: config.c 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarDashSVarEquals.good 
Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarHashCollision.chpl 
	                                        configVarHashCollision.execopts 
	                                        configVarHashCollision.good 

---------------------------------------------------------------------------

11/19/04 15:22:26 -- deitz

Log message:
	Removed the ReduceSymbol class.  Reductions are now no longer special
	cased in the parser or the AST.  This simplifies the construction of
	classes since they are no longer special-cased for reductions.
	
	Moved the test trivial/bradc/protoast/badred to a future directory so
	that it is not checked.  This test used to report a syntax error when
	the parser encountered a reduction by a class that was not a
	reduction.  This should eventually be taken care of in type checking.

Modified files:
	chapel/compiler/AST/: symbol.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symbol.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/flowanalysis/newast/: domarr.good noop.good 
Added files:
	chapel/test/trivial/bradc/protoast/future/: NOTEST badred.chpl 
	                                            badred.good 
Removed files:
	chapel/test/trivial/bradc/protoast/: badred.chpl badred.good 

---------------------------------------------------------------------------

11/19/04 15:47:57 -- bradc

Log message:
	Fixed C/C++ compilation flags so that gcc versions prior to
	3.4 don't use the -Werror flag.  Also turned -Werror back on
	for the runtime src directory.

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/make/: Makefile.gnu 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

11/20/04 13:14:14 -- jplevyak (a.k.a. n10253)

Log message:
	Functions and symbols are now true types in their own right, further unifying
	  flow analysis and type inference.
	Further separated out "must_implement" (type checking) and "must_specialize"
	  dispatch constraints.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp if1.cpp 
	chapel/compiler/backend/: dump.cpp 
	chapel/compiler/include/: sym.h 
	chapel/compiler/vparser/: parse_ast.cpp v.g 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               tuples.good 

---------------------------------------------------------------------------

11/22/04 07:30:54 -- jplevyak (a.k.a. n10253)

Log message:
	Seperated out "must_implement" (type checking), "must_specialize" (dispatch)
	and true type (concrete type) in the low level code translators and in dispatch.
	Updated logging and type warning code to differentiate them, and updated
	test cases.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp cg.cpp clone.cpp 
	                           fa.cpp fa_extras.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good classvar.good 
	                                    cs1.good cs2.good cs3.good 
	                                    cs4.good cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch3.good 
	                                    memberfun.good 
	                                    memberfun2.good sample.good 
	                                    structtype.good 

---------------------------------------------------------------------------

11/22/04 11:46:57 -- bradc

Log message:
	Removed three hacks that assumed variables of unknown types were
	integers which stemmed from the days before the analysis pass was
	running.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 

---------------------------------------------------------------------------

11/22/04 12:18:04 -- deitz

Log message:
	Removed ClassSymbol.  Classes are now TypeSymbols.  This simplifies
	the information associated with the symbol table.  Most of the
	information associated with class types is now in the ClassType.
	
	Note that classes are TypeSymbols and objects are VarSymbols; the type
	of each is a ClassType.
	
	Removed special parsing of classes from the compiler.

Modified files:
	chapel/compiler/AST/: expr.cpp nils.cpp symbol.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symbol.h symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 

---------------------------------------------------------------------------

11/22/04 12:38:32 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed test cases (Steve, did you forget to checkin the test changes?)
	Fixed "config" so that it doesn't propagate constants, and assumes
	that the variable can take on any legal value, and added test
	case to that effect.
	Removed unnecessary variables in Sym.

Modified files:
	chapel/compiler/analysis/: analysis.cpp dead.cpp fa.cpp 
	                           pattern.cpp 
	chapel/compiler/backend/: graph.cpp 
	chapel/compiler/include/: sym.h 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/newast/: domarr.good noop.good 
Added files:
	chapel/test/flowanalysis/jplevyak/config/: CATFILES CLEANFILES 
	                                           COMPOPTS NOEXEC 
	                                           PREDIFF 
	                                           configVar.chpl 
	                                           configVar.good 

---------------------------------------------------------------------------

11/22/04 16:39:02 -- jplevyak (a.k.a. n10253)

Log message:
	Move the code which creates the type hierarchy into analysis/ast.cpp (the
	AST support code).  Move common function symbol initialization into
	if1_closure (closure creation).

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp fun.cpp 
	                           if1.cpp 
	chapel/compiler/include/: ast.h 
	chapel/compiler/vparser/: ast_cf.cpp parse_ast.cpp 

---------------------------------------------------------------------------

11/22/04 16:49:45 -- deitz

Log message:
	Added a couple of test cases that create basic classes.  One of these
	test cases tries to put executable code in the class definition.
	Added parser support to identify this as a syntax error.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/classes/deitz/: test_badclass1.chpl 
	                            test_badclass1.good test_class1.chpl 
	                            test_class1.good 

---------------------------------------------------------------------------

11/22/04 17:54:32 -- bradc

Log message:
	Added -l and -L flags to the compiler which are fed to the
	back-end C compiler, allowing additional libraries to be
	linked into the generated C code.  For example, to run the
	generated executable using efence, one could do:
	
		chpl myfile.chpl -lefence
	
	(though on the Cray systems, you would also have to use
	the -L flag and LD_LIBRARY_PATH envvar to get efence to
	work properly...  Hopefully this module will be touched
	up to fix this).
	
	This replaces the previous use of -l which was to specify
	logs.  Switched this flag to -d (think of them as "debugging
	logs"), and removed the old -d flag (which nobody was using
	anyway... and wouldn't you really prefer a log to debug
	anyway?  :).  And of course the longer form --log still
	works (and I changed the flowanalysis tests to use this
	form in case someone reclaims -d later...).
	
	Touched up the arg.cpp file so that if no long-form of a
	flag is supplied (-l and -L currently have no long form),
	the printout is cleaner.

Modified files:
	chapel/compiler/include/: files.h geysa.h 
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/compiler/util/: files.cpp misc.cpp 
	chapel/runtime/etc/: Makefile.include 
	chapel/test/Samples/ex1-astlog/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/constants/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/loop/: COMPOPTS 
	chapel/test/flowanalysis/newast/: COMPOPTS 

---------------------------------------------------------------------------

11/22/04 17:59:23 -- bradc

Log message:
	Oops, missed this one because I hadn't updated -d in awhile.

Modified files:
	chapel/test/flowanalysis/jplevyak/config/: COMPOPTS 

---------------------------------------------------------------------------

11/23/04 12:44:09 -- jplevyak (a.k.a. n10253)

Log message:
	Print out "must_specialize" and "must_implement" in the "i" log.
	Fix the collapseable nested structures in the HTML dump (-t) by
	fixing up the paths to point to compiler/etc/www.

Modified files:
	chapel/compiler/analysis/: if1.cpp pattern.cpp 
	chapel/compiler/backend/: dump.cpp 

---------------------------------------------------------------------------

11/23/04 16:51:07 -- bradc

Log message:
	Checking in code before the holidays: found with Shannon
	that complex literals don't pretty-print properly, so
	checked in a fix for that.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

11/23/04 20:25:25 -- jplevyak (a.k.a. n10253)

Log message:
	Some cleanup of naming and the test parser.

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/compiler/vparser/: parse_ast.cpp v.g 

---------------------------------------------------------------------------

11/24/04 08:37:40 -- shannon

Log message:
	Woops.  This didn't make it into yesterday's preholiday
	commit.  This is a fix for pretty-printing complex
	literals.

Modified files:
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

11/24/04 10:27:10 -- deitz

Log message:
	Added initial support for methods.  These don't work yet but are stored.
	
	The main addition in this checkin is a new pass MethodsToFunctions
	that should eventually change method calls to function calls, or
	something like that.
	
	Added a couple of tests in test/classes/deitz/future that will not yet
	be run but show the initial code that I am trying to get to work.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 
Added files:
	chapel/compiler/traversals/: methodsToFunctions.cpp 
	                             methodsToFunctions.h 
	chapel/test/classes/deitz/future/: NOTEST test_method1.chpl 
	                                   test_method2.chpl 

---------------------------------------------------------------------------

11/24/04 10:43:04 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed issue whereby "float" declared funcions were abstract instead
	of defined to be "float64" float(8).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Added files:
	chapel/test/dispatch/jplevyak/: dispatch-8.good dispatch-8.v 

---------------------------------------------------------------------------

11/24/04 13:32:11 -- deitz

Log message:
	Changed parsing of enum types so that they are constructed with commas
	rather than bars.  Added a couple of new tests to test enums.  The one
	in the future directory currently doesn't typecheck.
	
	Made a superficial change to how integer literals are parsed just so
	they are handled in the same way as the other literals.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/flowanalysis/newast/: enum.chpl enumarray.chpl 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
	chapel/test/trivial/bradc/protoast/codegen/: enum.chpl 
	chapel/test/trivial/shannon/: readWriteEnum.chpl 
Added files:
	chapel/test/types/enum/deitz/: test_enum1.chpl test_enum1.good 
	chapel/test/types/enum/deitz/future/: NOTEST test_enum2.chpl 

---------------------------------------------------------------------------

11/25/04 09:07:38 -- jplevyak (a.k.a. n10253)

Log message:
	Enum now inherit from "eum_element" which is an alias for int64.
	"size" is now an alias to int64 for Chapel (I don't know if we are
	going to have a "sizeof" for structures, but if we do we should have
	a "size" type).
	unaliasing of types now correctly unaliases 'specializes' and 'includes'.
	For variable assignment, the LHS is not unnecessarily copied.
	Sym::constant is now a documentation string and can be NULL
	  (instead of having "<folded>" or some other indicator of where the
	   constant came from)
	Updated tests for the above changes.
	
	Fix analysis of Steve's test_enum2.chpl.
	
	I did this by extending the builtin = primitive.  In the future
	we should implement operator overloading which would make it possible
	to solve these problems in a perlude.
	
	We need to implement operator overloading anyway, and doing it
	now rather than increasing the number of special cases would save
	time overall.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	                           fa_extras.cpp if1.cpp 
	chapel/compiler/vparser/: ast_cf.cpp parse_ast.cpp parse_ast.h 
	chapel/test/flowanalysis/jplevyak/constants/: 
	                                              constant_folding.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  equality_ops.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good var.good 
	                                  var2.good whileLoop.good 

---------------------------------------------------------------------------

11/29/04 10:33:29 -- deitz

Log message:
	Added the ability to assign values to enumerated type symbols.  The
	values by default start at zero:
	
		enum adjectives = good, bad, soso;
	
	The values are good is 0, bad is 1, and soso is 2.  These values can
	now be overridden as in:
	
		enum adjectives = good, bad = 2, soso;
	
	In this case, good is 0, bad is 2, and soso is 3.
	
	Added a test case to make sure this works.  Also, moved
	test_enum2.chpl out of the no-testing future directory.
	
	Note that the syntax is slightly different than in the spec in which
	the initial equal does not belong but the symbols should be wrapped in
	curly brackets.  This should be changed.

Modified files:
	chapel/compiler/AST/: symbol.cpp symtab.cpp type.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/types/enum/deitz/: .cvsignore test_enum2.chpl 
	                               test_enum2.good test_enum3.chpl 
	                               test_enum3.good 
Removed files:
	chapel/test/types/enum/deitz/future/: test_enum2.chpl 

---------------------------------------------------------------------------

11/29/04 12:56:53 -- deitz

Log message:
	Update the syntax of enumerated types in the Chapel compiler to match
	the Chapel specification.  Also added another test case.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/flowanalysis/newast/: enum.chpl enumarray.chpl 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
	chapel/test/trivial/bradc/protoast/codegen/: enum.chpl 
	chapel/test/trivial/shannon/: readWriteEnum.chpl 
	chapel/test/types/enum/deitz/: test_enum1.chpl test_enum2.chpl 
	                               test_enum3.chpl 
Added files:
	chapel/test/classes/deitz/future/: .cvsignore 
	chapel/test/types/enum/deitz/: test_enum4.chpl test_enum4.good 

---------------------------------------------------------------------------

11/29/04 13:32:10 -- jplevyak (a.k.a. n10253)

Log message:
	new resolve_symbol function which works on MemberAccess ASTs.
	tested with test_class1.chpl

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

11/29/04 13:39:21 -- deitz

Log message:
	Extended the intVal and isComputable functions to work on unary
	expressions so expressions like -1 are now computable.  Made the
	decision that the unary operators -, +, and ! on computable integers
	return computable integers but that the unary operator ~ does not.  Is
	this a good choice?  My reasoning is for cross-compilation and
	portability.
	
	Added a couple more tests on enumerated types in which the enumerator
	value is negative or not computable.  In the latter case, the compiler
	generates a descriptive error message.
	
	Changed the USR_FATAL function so it now prints out a newline at the
	end of the error message.  Removed newline symbols from the calls to
	this function.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp symtab.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/util/: misc.cpp 
Added files:
	chapel/test/types/enum/deitz/: test_enum5.chpl test_enum5.good 
	                               test_enum6.chpl test_enum6.good 

---------------------------------------------------------------------------

11/29/04 13:45:37 -- jplevyak (a.k.a. n10253)

Log message:
	Record creation sets which correspond to cloned types.
	Bug fix in resolve_symbol.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 

---------------------------------------------------------------------------

11/29/04 13:57:29 -- deitz

Log message:
	Made a few changes to MemberAccess::codegen to use John's
	resolve_symbol function.  This makes no substantive changes (yet).

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

11/29/04 14:47:51 -- jplevyak (a.k.a. n10253)

Log message:
	Handle simple member function resolution in resolve_symbol.
	Handles test_method1.chpl

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

11/30/04 08:04:29 -- shannon

Log message:
	Added support for configuration variables of type float64,
	boolean, complex128, and string.  Specifically:
	
	* in stmt.cpp changed the code generation for the
	  setInCommandLine function to append the name of the variable
	  type to the function.
	
	* in chplio.c added a function, _string_to_boolean, which converts
	  a string to boolean type.
	
	* in sub_test fixed a bug with handling a quoted string as an
	  execution option.
	
	* in start_test added a comment to explain the prior addition of
	  test-specific compilation and execution options.
	
	* added a bunch of tests.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/runtime/include/: chplio.h config.h 
	chapel/runtime/src/: chplio.c config.c 
	chapel/test/: start_test sub_test 
	chapel/test/execflags/shannon/configs/: configVar.execopts 
	                                        configVarDashS.execopts 
	                                        configVarDashSVarEquals.execopts 
	                                        configVarDashSVarEquals.good 
	                                        configVarHashCollision.chpl 
	                                        configVarHashCollision.execopts 
	                                        configVarHashCollision.good 
	                                        configVarWithSpaces.execopts 
Added files:
	chapel/test/Share/: configVarComplex.chpl 
	chapel/test/execflags/shannon/configs/: configVarBoolean.chpl 
	                                        configVarBoolean.execopts 
	                                        configVarBoolean.good 
	                                        configVarComplex.chpl 
	                                        configVarComplex.execopts 
	                                        configVarComplex.good 
	                                        configVarFloat.chpl 
	                                        configVarFloat.execopts 
	                                        configVarFloat.good 
	                                        configVarInvalidBoolean.chpl 
	                                        configVarInvalidBoolean.execopts 
	                                        configVarInvalidBoolean.good 
	                                        configVarInvalidComplex.chpl 
	                                        configVarInvalidComplex.execopts 
	                                        configVarInvalidComplex.good 
	                                        configVarInvalidFloat.chpl 
	                                        configVarInvalidFloat.execopts 
	                                        configVarInvalidFloat.good 
	                                        configVarInvalidInteger.chpl 
	                                        configVarInvalidInteger.execopts 
	                                        configVarInvalidInteger.good 
	                                        configVarInvalidName.chpl 
	                                        configVarInvalidName.execopts 
	                                        configVarInvalidName.good 
	                                        configVarString.chpl 
	                                        configVarString.execopts 
	                                        configVarString.good 
Removed files:
	chapel/test/execflags/shannon/configs/: EXECOPTS configVarY.chpl 
	                                        configVarY.execopts 
	                                        configVarY.good 

---------------------------------------------------------------------------

11/30/04 09:08:59 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug in LL code generation of COMPLEX and BOOLEAN literals.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

11/30/04 09:20:00 -- shannon

Log message:
	Moved a test from the Share directory, after John fixed the analysis
	bug, to nightly testing.

Modified files:
	chapel/test/execflags/shannon/configs/: configVarComplex.chpl 
Removed files:
	chapel/test/Share/: configVarComplex.chpl 

---------------------------------------------------------------------------

11/30/04 09:26:49 -- jplevyak (a.k.a. n10253)

Log message:
	SEGV in debug output of some constants

Modified files:
	chapel/compiler/analysis/: fa_extras.cpp 

---------------------------------------------------------------------------

11/30/04 09:45:38 -- jplevyak (a.k.a. n10253)

Log message:
	destructured return values must either be by position (for tuples) or
	by name (for records and classes).

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/test/flowanalysis/jplevyak/: destruct.good destruct.v 
	                                    destruct2.good destruct2.v 

---------------------------------------------------------------------------

11/30/04 10:01:30 -- jplevyak (a.k.a. n10253)

Log message:
	Shift to using Sym::alt_name for named parameters to match
	named destructured return values.

Modified files:
	chapel/compiler/vparser/: v.g 
	chapel/test/flowanalysis/jplevyak/: destruct2.v 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 

---------------------------------------------------------------------------

11/30/04 15:39:55 -- deitz

Log message:
	Added a new pass that runs after analysis and resolves symbols that
	were not resolved before analysis.  These include methods and fields
	in MemberAccess variables.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: resolveSymbols2.cpp 
	                             resolveSymbols2.h 

---------------------------------------------------------------------------

11/30/04 16:35:32 -- jplevyak (a.k.a. n10253)

Log message:
	Fix bug in cloning which could cause an bogus error during low level CG
	  by removing duplicates from the Fun::calls array
	Add :TYPE_KIND to the debugging output of IF1
	Use => for named arguments in the V parser.

Modified files:
	chapel/compiler/analysis/: clone.cpp if1.cpp pattern.cpp 
	chapel/compiler/vparser/: parse_ast.cpp v.g 
	chapel/test/flowanalysis/jplevyak/: cs4.good destruct2.v 
	                                    named.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop2.good 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 

---------------------------------------------------------------------------

12/01/04 06:41:48 -- shannon

Log message:
	Forgot to change the expected output when I modified this test
	yesterday.

Modified files:
	chapel/test/execflags/shannon/configs/: configVarComplex.good 

---------------------------------------------------------------------------

12/01/04 10:22:33 -- deitz

Log message:
	Added immature support for methods within classes along with an
	illustrative test case.  In addition to other limitations, the methods
	cannot currently access the fields within the class.
	
	Added a new field in the base Symbol class called cname.  This is
	different than name which is the Chapel name.  The cname is the
	mangled name, the name that is code generated.  By default, it is set
	to the same thing as name.  For the main symbol, cname is set to
	_chpl_main whereas name is left as main.  For the class methods, cname
	becomes an underscore followed by the name of the class followed by an
	underscore followed by the name of the method.  A more sophisticated
	name mangling scheme is desirable (eventually).
	
	The bulk of this checkin concerns the transformation from methods to
	functions.  The method definitions are moved outside the class
	definition, immediately after it, the name is mangled as above, and a
	parameter called _this is put in the first position of the formals
	parameter list.  Additionally, all method calls are changed into
	function calls.  The base of the MemberAccess becomes the first
	argument to the actuals parameter list and the member becomes simply
	the function.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: renameCSymbols.cpp 
	chapel/compiler/traversals/: methodsToFunctions.cpp 
Added files:
	chapel/test/classes/deitz/: test_method1.chpl test_method1.good 
Removed files:
	chapel/test/classes/deitz/future/: test_method1.chpl 

---------------------------------------------------------------------------

12/01/04 14:26:41 -- deitz

Log message:
	Improved support for methods so that they can now refer to fields
	within the class.
	
	With this checkin, method support now only works when analysis is not
	run.  The method test from before has been pushed back into the future
	directory.  This needs to be resolved--we need to determine what
	should be done before analysis and what should be done after analysis.
	This will probably be resolved on the 6th when John is back and in
	Seattle.
	
	Added an virtual procedure for expressions called replace that is used
	to replace children expressions of an expression.  The function takes
	an old expression and a new expression and checks to see if the old
	expression matches any of its children; if so, the child is replaced
	with the new expression.  This is crufty.  A better procedure would
	probably compare deeply using an "equals" function and replace on
	these matches.  This is more versatile.  In addition, how this
	procedure can be used recursively (such as in a traversal) is not
	well-understood.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             methodsToFunctions.cpp 
	                             methodsToFunctions.h 
Added files:
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 
	chapel/test/classes/deitz/future/: test_method1.chpl 
	                                   test_method1.good 
	                                   test_method2.good 
Removed files:
	chapel/test/classes/deitz/: test_method1.chpl test_method1.good 

---------------------------------------------------------------------------

12/02/04 00:12:45 -- bradc

Log message:
	Added support for keyword-based modules.  Before this
	checkin, modules were only associated with files.  Now
	they can also be created using the module keyword.  This
	checkin does not allow modules to be nested.  This means
	that module declarations may not themselves contain
	modules, and that files which contain keyword-based modules
	may not also contain top-level code.  As before, each module
	is codegened to its own set of C files.
	
	Changes include:
	
	* added a ModuleDefStmt to mark the place where the module
	  was defined.  This has little or no purpose, though it
	  may once nested modules are supported (or perhaps not)
	
	* moved the creation of a module's init function from
	  the parser/filesToAST code that it was in before and
	  into a method on ModuleSymbol, called during module
	  creation.
	
	* changed the line number that's used when creating a
	  file's module from 0 to 1 to distinguish it from a
	  keyword-based module defined on line 1.
	
	* added start and finishModuleDef routines into the
	  symboltable to match all the other creation routines.
	  This will need to be cleaned up (and should be much
	  cleaner) when we add support for nested modules.
	  The grodiness is largely due to the need to check
	  for whether there is top-level code in a file before
	  or after a keyword-based module.
	
	* changed modules' init routines so they are all called
	  __init_moduleName.  Previously, the init routines for
	  the prelude modules were special and different.  No
	  longer!  This resulted in lots of cosmetic changes to
	  the output of most flowanalysis tests, so their output
	  was updated.
	
	* added a handful of new tests in a new (modules)
	  test directory to lock in some of this behavior.
	  As we support nested modules and the use of one
	  module by another, these tests and their output
	  should evolve (in particular, since one module
	  cannot use another, there is currently no way
	  other than inspection to determine that the
	  modules are being codegened properly.
	
	And this checkin also includes these somewhat
	vaguely-related changes:
	
	* made codegenList() of empty lists work properly
	
	* added a static method to the ExprStmt class that creates
	  a statement that's a standalone function call because
	  this was a common case in the compiler (in particular
	  for creating calls to module initialization code and
	  the user's entry point)
	
	* took advantage of Steve's new cname field on Symbols
	  to create main() to have a c name of _chpl_main()
	  rather than locating it and converting it in the
	  renameCSymbols pass as we did before.  This made the
	  renameCSymbols pass currently pointless, so it was
	  removed from passlist.h.  However, I expect it might
	  become useful again later if/when we strive to
	  avoid identifiers that match C keywords, so I didn't
	  completely remove the file.
	
	* also took advantage of Steve's new field by having
	  builtin types declare their c name.  This removed
	  a bunch of special-casing that existed in the codegen
	  routine for types.
	
	* put a check in to complain about duplicate symbols,
	  but then took it out because it caused the protoast
	  tests to fail since the indices declared by [i in D]
	  expressions aren't put into a new scope yet.  Started
	  to make this change, but decided this checkin was
	  big enough as-is.  Put a test in that checks for an
	  error when two variables of the same name are declared
	  in a scope to serve as a personal placeholder.
	
	* added the ability to define a symbol in a certain
	  scope (rather than in the current scope), and the
	  ability to look up a symbol in the current scope
	  without recursing to parent scopes.
	
	* added a new pass -- createEntryPoint -- that is
	  responsible for creating the appropriate entry point
	  for the program.  Previously this was done right
	  after parsing, and in a somewhat more haphazard way.
	  I believe it was also incorrect when the user actually
	  defined a main function.  The new approach more
	  correctly models the dynamic behavior of the program.
	
	* as alluded to in other bullets, cleaned up the
	  filesToAST pass by moving lots of the code that
	  was cluttering it up into the ModuleSymbol creation
	  code and/or the entryPoint creation pass.
	
	* made the entry point from a global variable to a static
	  member of the createentrypoint class.
	
	* fixed some error messages that were missing their
	  description in verifyASTType.cpp.
	
	* changed flags used by runtime Makefile so that library
	  code is compiled with very strict warnings, but the
	  compiler-generated C code is not (since users are
	  free to declare unused functions and variables, etc.)
	
	* added linefeeds to the ends of COMPOPTS files that
	  didn't have them so it would be easier to grep for
	  particular compilation options in the test system.

Modified files:
	chapel/compiler/AST/: TODO link.cpp stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h files.h stmt.h symbol.h 
	                          symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y parser.cpp 
	chapel/compiler/passes/: Makefile.share codegen.cpp 
	                         filesToAST.cpp filesToAST.h 
	                         renameCSymbols.cpp runAnalysis.cpp 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/etc/: Makefile.macros 
	chapel/runtime/src/: Makefile 
	chapel/test/: .cvsignore 
	chapel/test/Samples/ex1-astlog/: COMPOPTS 
	chapel/test/compflags/bradc/badflagddash/: COMPOPTS 
	chapel/test/compflags/bradc/copyright/: COMPOPTS 
	chapel/test/compflags/bradc/missinginfile/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: COMPOPTS 
	chapel/test/trivial/bradc/protoast/codegen/: COMPOPTS 
Added files:
	chapel/compiler/passes/: createEntryPoint.cpp createEntryPoint.h 
	chapel/test/flowanalysis/jplevyak/config/: .cvsignore 
	chapel/test/modules/bradc/: .cvsignore nestedmodule.chpl 
	                            nestedmodule.good 
	                            twomodulesonefile.chpl 
	                            twomodulesonefile.good 
	chapel/test/modules/bradc/manymodules/: flatmodules.chpl 
	                                        flatmodules.compopts 
	                                        flatmodules.good 
	                                        manymodules.chpl 
	                                        manymodules.compopts 
	                                        manymodules.good 
	                                        twomodulestwofiles.chpl 
	                                        twomodulestwofiles.compopts 
	                                        twomodulestwofiles.good 
	chapel/test/modules/bradc/manymodules/modules/: .cvsignore 
	                                                NOTEST a.chpl 
	                                                b.chpl c.chpl 
	                                                d.chpl e.chpl 
	                                                g.chpl main.chpl 
	                                                z.chpl 
	chapel/test/trivial/bradc/: redefinevar.chpl redefinevar.good 

---------------------------------------------------------------------------

12/02/04 13:47:50 -- bradc

Log message:
	Fixed a bug that Shannon found in which imaginary
	numbers expressed with an integer value were not
	being parsed correctly (e.g., 4i rather than 4.0i).
	Added a test to lock this in.
	
	Also, renamed the --analyzeNewAST flag and variable
	to --noanalysis and analyzeAST respectively, since
	the sense of the flag has been reversed for awhile
	now, and the emphasis on "new" ast seems less
	important now.

Modified files:
	chapel/compiler/AST/: expr.cpp symtab.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: runAnalysis.cpp 
Added files:
	chapel/test/types/complex/bradc/: intfloatelement.chpl 
	                                  intfloatelement.good 

---------------------------------------------------------------------------

12/02/04 14:50:10 -- deitz

Log message:
	Added immature support for records.  In particular, assignment over
	records is not supported and the compiler needs to be run with the
	-noanalysis flag when using records.  Methods are not yet supported in
	records.
	
	Accessing fields from records is supported and is handled using "."
	rather than "->" in the generated C code.
	
	Eliminated support for inheritance in classes.  It was only really
	implemented in the parser.  It no longer is since the scheme has
	changed.  A parent pointer remains in the AST (although this will
	probably change eventually too).
	
	Got rid of a print line I accidentally left in the
	fieldsToMemberAccesses pass.

Modified files:
	chapel/compiler/AST/: expr.cpp symtab.cpp type.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y prelude.chpl 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
Added files:
	chapel/test/classes/deitz/: .cvsignore 
	chapel/test/classes/deitz/future/: test_record1.chpl 
	                                   test_record1.good 

---------------------------------------------------------------------------

12/02/04 15:47:31 -- deitz

Log message:
	Fixed a bug in which methods with no arguments were handled
	incorrectly.  Added a couple test cases to test methods with no
	arguments for both classes and records.  Note that methods with
	records work except for the case where they access their fields.

Modified files:
	chapel/compiler/AST/: link.cpp 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             methodsToFunctions.cpp 
Added files:
	chapel/test/classes/deitz/future/: test_method1a.chpl 
	                                   test_method1a.good 
	                                   test_record_method1.chpl 
	                                   test_record_method1.good 

---------------------------------------------------------------------------

12/02/04 16:01:51 -- deitz

Log message:
	Added a test for records with methods that access their fields.  On second glance, I've decided that these do work.  What is broken is inout parameters in general and specifically as it pertains to records.

Added files:
	chapel/test/classes/deitz/future/: test_record_method2.chpl 
	                                   test_record_method2.good 

---------------------------------------------------------------------------

12/03/04 09:43:21 -- deitz

Log message:
	Moved some of the record tests around.  In the future directory, the tests are run with the --noanalysis flag.  In the future/future directory, the tests are not run.

Added files:
	chapel/test/classes/deitz/future/: COMPOPTS 
	chapel/test/classes/deitz/future/future/: NOTEST 
	                                          test_record_method2.chpl 
	                                          test_record_method2.good 
Removed files:
	chapel/test/classes/deitz/future/: NOTEST 
	                                   test_record_method2.chpl 
	                                   test_record_method2.good 

---------------------------------------------------------------------------

12/03/04 11:31:06 -- bradc

Log message:
	Turned on an error message if two symbols with the
	same name are defined in the same scope and the
	symbols are not function names.
	
	Made forall expressions (e.g., [i in D] A(i) ) push
	their own symboltable scope (of type SCOPE_FORALLEXPR)
	so that symbols defined in the forall expression wouldn't
	conflict with symbols in the parent scope.  These scopes
	store a context pointer to the forall expression that
	they are associated with.
	
	Previously, the forall expression concept was being
	stored in an Expr named DomainExpr.  This change
	renamed this to be ForallExpr, which more closely matches
	the way we think of the concept.
	
	Also, refactored the way some statements are created
	and their contexts stored so that line numbers more
	closely relate to the beginning of the statement and
	not the end.  Improved the printing of the symboltable
	so that each scope not only prints out its type, but
	also some indication of what it's associated with --
	for things with symbol contexts (modules, classes),
	this is the name of that symbol and its location in
	the source file.  For things with expression or
	statement contexts, this is just the location in the
	source file.  In making this change, found that some
	of the scopes were storing a symcontext that was the
	function name, which seemed like a bad idea to me
	(since the context is more specific than that, and
	there ought to be another way to climb to the function
	if necessary), so I removed these contexts and it
	didn't seem to break anything...  If this represents
	a problem, let's discuss a different approach.
	
	Refactored the way foralls and assignments are
	handled in the parser to be a bit cleaner and
	have fewer repeated cases.
	
	Renamed the U class in one of the protoast/mg codes
	because it conflicted with the U array declared later
	in the same program.
	
	A few things not done in this checkin:
	
	- the scope for a forall expression used to define an
	  array type does not currently cover its initializer.
	  Thus, if the language supports:
	
	     var A: [i in D] float = i;
	
	  the "i" scope that i is defined in would not currently
	  be open when we parse the initializer.
	
	- I find myself wondering whether it's sufficient to have
	  every SymScope have a single BaseAST context pointer
	  rather than a Symbol, Stmt, Expr context pointer.  Do
	  some scopes actually want to store multiple context
	  pointers?  Or do we store all of them and the SymScope
	  type indicates which one is dominant (in which case a
	  function context could be stored even though it's
	  overly general for a ForallExpr).

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symscope.h 
	                          symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq.chpl mg-seq.good 

---------------------------------------------------------------------------

12/03/04 13:17:07 -- deitz

Log message:
	Added parsing support for simple with-statements.  Added a new
	subclass of Stmt called a WithStmt used for with-statements.  Added a
	new pass ProcessWithStatements which eliminates the with-statements by
	including the symbols wherever they should go.  Note that this pass is
	not implemented and is currently a space-holder.
	
	Fixed a bug in the creation of MemberAccesses where the member is not
	in the class scope.  In this case, the member was left as NULL and is
	now made an unresolved symbol.

Modified files:
	chapel/compiler/AST/: stmt.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: Makefile.share verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: processWithStatements.cpp 
	                             processWithStatements.h 

---------------------------------------------------------------------------

12/06/04 09:51:27 -- deitz

Log message:
	Added a new pass called Fixup that sets back-pointers from expressions
	to the statements they are in (previously done in SetupStmtLinks) and
	that sets back-pointers from statements to the symbols they are in
	(previously done in a limited way within the parser).
	
	Removed two passes SetupStmtLinks and CheckBackLinks which are no
	longer necessary.  Though not with this checkin, the Fixup pass will
	eventually take a parameter which can be optionally set in order that
	the Fixup pass merely check that everything is in order, not put
	everything in order.  This support will be added when passes can take
	parameters (see one of Brad's future commits).
	
	Changed the function symbol pointer of statements to point to, more
	generally, a symbol.  This symbol can be either a function or a class
	(since a class has a statement body as well).

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             fieldsToMemberAccesses.cpp 
Added files:
	chapel/compiler/traversals/: fixup.cpp fixup.h 
Removed files:
	chapel/compiler/traversals/: checkBackLinks.cpp checkBackLinks.h 
	                             setupStmtLinks.cpp setupStmtLinks.h 

---------------------------------------------------------------------------

12/06/04 16:27:28 -- shannon

Log message:
	Added support for files of config vars.  The filename is passed via the
	new -f option, e.g. "-ffilename".  The file should contain config var
	initializations of the form "variableName=value" separated by whitespace.
	
	At this time the code for quoted strings doesn't work and is commented out.
	
	*  arg.c:  Added a function to handle the parsing of the argument string.
	   This function breaks the string down into variable name and value, and
	   installs these values into the config var hash table.  Added a switch
	   statement to handle the now two known command-line flags, -s and -f.
	
	*  chplio.h:  Added a #define value for default string length which is
	   now used by both chplio.c and arg.c.
	
	*  config.c:  Changed the malloc to sizeof(configVarType) instead of
	   sizeof(*configVar).

Modified files:
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: arg.c chplio.c config.c 
	chapel/test/trivial/shannon/: readStringOverflow.good 
Added files:
	chapel/test/execflags/shannon/configs/: configVarFile.chpl 
	                                        configVarFile.execopts 
	                                        configVarFile.good 
	                                        configVarFile.input 

---------------------------------------------------------------------------

12/07/04 12:09:28 -- deitz

Log message:
	Added compiler support for simple usage of "with" inside of a class.
	Variable fields are now copied from a class into another class.  The
	variables are put in the scope of the new class.  This support should
	also work with records, though the tests are faltering.
	
	Added a new traversal called DefineSymbols which takes a scope and
	adds symbols to it that are defined in the statements being traversed.
	This currently only handles VarDefStmts and the variables they define.
	
	Added two new functions to the ILink, preinsert and postinsert.  Only
	preinsert is completed and tested.  This inserts a statement LIST into
	another statement LIST before a specified statement.  The function
	postinsert should do the same thing after the specified statement.
	
	Added a new test case test_class_with1 that successfully tests a
	simple usage of the with construct in classes.  Added two new
	unsuccessful tests in a future directory that act on records.

Modified files:
	chapel/compiler/AST/: link.cpp 
	chapel/compiler/include/: link.h 
	chapel/compiler/traversals/: Makefile.share 
	                             processWithStatements.cpp 
Added files:
	chapel/compiler/traversals/: defineSymbols.cpp defineSymbols.h 
	chapel/test/classes/deitz/: test_class_with1.chpl 
	                            test_class_with1.good 
	chapel/test/classes/deitz/future/future/: test_record2.chpl 
	                                          test_record_with1.chpl 

---------------------------------------------------------------------------

12/09/04 09:55:57 -- deitz

Log message:
	This checkin makes a few small improvements and prepares to support
	"with" on records and classes with functions.
	
	The "_this" is now "this" and it is added to the scopes of the
	functions in which it is inserted.
	
	The DefineSymbols traversal now inserts function symbols into the new
	scope (though this doesn't seem to be found by all subsequent passes).
	
	The fixup pass now assigns non-null parentSymbols to every statement
	that points to either a class/record, function, or module depending on
	where the statement is located.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/traversals/: defineSymbols.cpp 
	                             fieldsToMemberAccesses.cpp 
	                             fixup.cpp fixup.h 
	                             methodsToFunctions.cpp 

---------------------------------------------------------------------------

12/09/04 10:26:35 -- deitz

Log message:
	Fixed up the Fixup pass so that it just sets new Stmt parent symbols
	for function, class, and module definitions,

Modified files:
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

12/09/04 14:08:08 -- bradc

Log message:
	Beefed up the passlist stuff a bit.
	
	All Passes now have a char* args field which can be
	used to specify arguments for that pass.  When
	invoking a Pass through the default passlist.h that
	is compiled into the compiler or specified with the
	--passlist option, the argument string is currently
	specified as follows:
	
	  ...
	  RUN(MyPass, "arguments"),
	  ...
	
	which will cause "arguments" to be stored in the
	Pass' args field before the Pass' run() method
	is invoked.
	
	Reorganized the way the passlist.h and passlist.cpp
	files work a bit so that the #inclusion of the
	header file and the REGISTER-ation of the new pass
	are both done in passlist.cpp, making the passlist.h
	file shorter and sweeter (which seemed important
	since this is a file that developers will be modifying
	by hand if they use the --passlist flag.
	
	Added a new flag, --print-passes, which causes the
	Pass names to be print out as they are run along
	with timing information for how long they took.  In
	the ZPL compiler we found this a nice, quick way to
	find out which pass was Seg Faulting and/or causing
	a huge performance bottleneck.

Modified files:
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	                       runpasses.cpp runpasses.h 
	chapel/compiler/passes/: pass.cpp pass.h 
	chapel/test/compflags/bradc/passlist/: passlist.h test.good 
	chapel/test/trivial/bradc/protoast/: mypasslist.h 

---------------------------------------------------------------------------

12/09/04 14:24:48 -- jplevyak (a.k.a. n10253)

Log message:
	Add a _this variable to FnSymbol to point to the added "this" field.
	This also serves as an indicator that the function is a bound function.
	
	For non-primitive value classes declared as variables generate a "new"
	primitive to allocate the object.
	
	Complex numbers of various sizes are now registered in IF1 so that
	they can be declared as variables.
	
	Removed --noanalysis flag from classes/deitz/future.... this
	results in 2 errors, both of which are caused by the way
	x.grow() is handled.  I have already sent mail to Steve on this,
	and the fix is simple depending on what the language spec says.
	I think it is OK to checkin with broken tests if the problems are
	known and we can expect to solve them relatively quickly.
	
	This checkin also fails for everything which uses array indexing.
	The problem is that the "fixup" pass is not being run on the internal
	prelude.  Again, Steve knows about this, but I want to checkpoint
	my work, hence the checkin.
	
	Changed the way MemberAcceses are handled.  I now convert
	 x.foo(...)
	
	to be foo(x, ...)
	
	We need to rename all member accesses "foo" to be something like "_member_foo"
	as agreed in the last meeting to put them in different namespaces.
	
	Fixed a bug in IF1 printing which was mislabelling symbols.
	
	Fixed test cases classes/deitz/future/tesT_method_chpl, test_record1.chpl
	  test_method2.chpl by handling instance variables and the new
	  "this" parameter.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp if1.cpp 
	                           sym.cpp 
	chapel/compiler/include/: if1.h sym.h symbol.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/classes/deitz/future/: COMPOPTS 

---------------------------------------------------------------------------

12/09/04 14:24:50 -- bradc

Log message:
	Added a new valgrind suppression for a new BoehmGC
	warning that's generated by the latest checkin.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

12/09/04 14:53:41 -- bradc

Log message:
	Oops -- I had a typo on the suppression on the last
	checkin, but didn't notice because when I was testing
	it, I forgot to use the -valgrind flag, so thought
	everything was OK.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

12/09/04 16:10:00 -- bradc

Log message:
	Changed passes so that they are passed the complete
	list of modules including the two internal modules
	corresponding to the internal prelude and standard
	prelude by default.  A pass may then choose to
	ignore the internal modules in its run() method by
	checking the "internal" flag that's set on a module
	symbol if it's internal.
	
	Added a mechanism for traversals so that if they
	want to use the default run() method, but want to
	skip the internal modules, then they can set their
	Traversal::processInternalModules flag to false
	at constructor time.
	
	Used this flag for fieldsToMemberAccesses, which
	currently doesn't work when called on internal
	modules (but Steve will hopefully have it in working
	order soon enough).
	
	Also, moved the compilation of the generated C code
	into its own pass -- buildBinary -- previously this
	was part of the Codegen pass, which seems inappropriate.

Modified files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share codegen.cpp 
	                         createEntryPoint.cpp printProgram.cpp 
	                         runAnalysis.cpp 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 
	                             traversal.cpp traversal.h 
Added files:
	chapel/compiler/passes/: buildBinary.cpp buildBinary.h 

---------------------------------------------------------------------------

12/09/04 16:35:33 -- deitz

Log message:
	Fixed a bug in methodsToFunctions in which everything after the method
	was removed from a class type, not just the function.  Added a new
	method to ILink called extract which removes a statement from a
	statement list.
	
	Improved the implementation of copy and copyList for statements.
	These procedures can now take an optional scope.  If set, this is used
	as the scope for the copied statements, expressions, symbols, and
	types.
	
	Implemented a test against codegening with statements.
	
	Renamed ResolveSymbols2 to ResolveSymbols.  Originally this pass was
	just going to run after analysis and a pass called ResolveSymbols1 was
	going to run before analysis.  Now this single pass can be run
	anywhere and it will behave differently if run before or after (in
	that it will only use information gleaned from analysis after analysis
	has run).  This pass currently only does anything after analysis; it
	resolves members in MemberAccesses then.
	
	Added a static field to the RunAnalysis pass that records whether it
	has been run or not.

Modified files:
	chapel/compiler/AST/: link.cpp stmt.cpp 
	chapel/compiler/include/: link.h stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: runAnalysis.cpp runAnalysis.h 
	chapel/compiler/traversals/: Makefile.share cloneAllFns.cpp 
	                             defineSymbols.cpp defineSymbols.h 
	                             methodsToFunctions.cpp 
	                             processWithStatements.cpp 
Added files:
	chapel/compiler/traversals/: resolveSymbols.cpp resolveSymbols.h 
Removed files:
	chapel/compiler/traversals/: resolveSymbols2.cpp 
	                             resolveSymbols2.h 

---------------------------------------------------------------------------

12/10/04 10:38:52 -- deitz

Log message:
	Fixed a bug that showed up when classes were declared with more than
	one method.  Added a test case that declares more methods; I'm working
	on others.  Added a pointer to the scope of parameters in the FnSymbol
	which also has a pointer, like all symbols, to its scope.  This
	parameter scope may be better off in a function type rather than the
	function symbol, but there is no function type yet.
	
	Unfortunately, this fix does not fix the 7 regressions in flowanalysis
	and trivial that I though it might.

Modified files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
Added files:
	chapel/test/classes/deitz/future/: test_method3.chpl 
	                                   test_method3.good 

---------------------------------------------------------------------------

12/10/04 11:28:50 -- deitz

Log message:
	Removed the disable flag on fieldsToMemberAccesses so it now runs on
	the internal_prelude.  This pass, among other things, puts "this"
	around members in bound functions.
	
	Fixed a bug in which this was put around this (to transform it into
	this.this).  This now does not happend, though I think bad things may
	still happen to this.a (becoming maybe this.this.a).
	
	Unfortunately, the 7 tests in trivial and flowanalysis are still not
	working.  However they seem to be closer in the diff.

Modified files:
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 

---------------------------------------------------------------------------

12/10/04 14:20:30 -- shannon

Log message:
	Added support for reading files of config vars of type string,
	where the string is quoted.  Strings may use either the
	single or double quote, but will throw an error if the quotes
	are mismatched.  A string may include embedded quotes if
	they differ from the enclosing quote.  Strings may not
	include a newline.
	
	*  arg.c:  Refactored much of the parseArgs function,
	   pulling all the code that handled strings into a
	   separate function.
	
	* config.c:  Fixed a bug where a newly-malloced string sent
	  to the _copy_string function was not first set to NULL.
	
	* Added a bunch of tests.

Modified files:
	chapel/runtime/src/: arg.c config.c 
	chapel/test/execflags/shannon/configs/: configVarFile.good 
	                                        configVarFile.input 
Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarFileStrings.chpl 
	                                        configVarFileStrings.execopts 
	                                        configVarFileStrings.good 
	                                        configVarFileStrings.input 
	                                        configVarFileStringsMismatch.chpl 
	                                        configVarFileStringsMismatch.execopts 
	                                        configVarFileStringsMismatch.good 
	                                        configVarFileStringsMismatch.input 
	                                        configVarFileStringsNoEquals.chpl 
	                                        configVarFileStringsNoEquals.execopts 
	                                        configVarFileStringsNoEquals.good 
	                                        configVarFileStringsNoEquals.input 

---------------------------------------------------------------------------

12/13/04 12:29:54 -- jplevyak (a.k.a. n10253)

Log message:
	New interface for copying AST's.  Here is my problem: I need to pass
	some context down for the copy, so I have two functions:
	
	  AST *copy_tree(ASTCopyContext* context);
	  AST *copy_node(ASTCopyContext* context);
	
	Where the former is called on the root of the AST and the
	latter is called for each node.  I am going to implement
	copy_node, but I was thinking you guys would want to
	implement the traversal which copies your AST and then
	just callback my stuff (or give me a place to put a callout
	to copy my stuff).
	
	Basically, I need to pass down some context (ASTCopyContext) which is
	then passed to a callback on each AInfo along with the old node.
	
	The root call is at fun.cpp:192, and the AST node which I am storing
	with each function is the FnDefStmt (at analysis.cpp:1169).

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: analysis.h ast.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 

---------------------------------------------------------------------------

12/13/04 17:12:09 -- jplevyak (a.k.a. n10253)

Log message:
	Fix compilation issue... don't know how it got past the dependencies.

Modified files:
	chapel/compiler/vparser/: v.g 

---------------------------------------------------------------------------

12/13/04 17:34:49 -- bradc

Log message:
	In debugging a dependence problem, noticed that
	v.g.d_parser.cpp is not getting blown away on a
	make clean, as it probably should.

Modified files:
	chapel/compiler/vparser/: Makefile.share 

---------------------------------------------------------------------------

12/14/04 10:35:35 -- deitz

Log message:
	Beefed up the traversal mechanism so that changes can easily be made
	during a traversal.  The preProcess* and postProcess* routines now
	take their arguments by reference so that they can be changed.  For
	example, this is used in the fieldsToMemberAccesses traversal in which
	fields of a class accessed within a bound function are changed to
	member accesses where the base is "this."
	
	This change was complicated by the fact that these routines were
	always called with "this" as a parameter and "this" cannot be changed
	(or passed as a reference).  Thus traversals now take this as a
	reference parameter alongside their call.  The proper usage is
	redundantly specified as
	
	  expr->traverse(expr, traversal, atTop);
	
	where _expr_ is the expression that will be traversed by _traversal_
	and _atTop_ is the boolean saying whether this is the first node in
	the traversal or not.
	
	To make this easier to call, especially since the parameters now have
	to match more exactly (because of the first parameter), I added two
	routines in a new file AST/ast_util.cpp (header: include/ast_util.h)
	{I don't like these locations, suggestions?}.  These routines called
	TRAVERSE and TRAVERSE_LS let you specify a call to a traversal without
	the redundancy.  They also resolve more dynamically using dynamic
	casts to Expr*, Stmt*, Symbol*, or Type*.  The above example would be
	called as
	
	  TRAVERSE(expr, traversal, atTop);
	
	Removed the old replace methods for Expr and its subtypes that needed
	it.  This mechanism only worked when the expression being replaced had
	a parent that was also an expression.  This failed when, for example,
	the expression was attached to a return statement.  The new mechanism
	replaces the reference passed into a traversal using a static replace
	function associated with Expr.
	
	Added a static replace function to Expr that replaces one expression
	(passed as a reference) with another.  This function updates the prev,
	next, and parent pointers if necessary.
	
	Added three new tests to classes/deitz/future/future/ that try to
	print the return values of bound functions, but don't currently work.
	Added a test case trivial/deitz/test_write_return that prints the
	return values of a function.  This does work.

Modified files:
	chapel/compiler/AST/: Makefile.share expr.cpp link.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h type.h 
	chapel/compiler/traversals/: checkIDs.cpp checkIDs.h 
	                             checkTypeInfo.cpp checkTypeInfo.h 
	                             cloneAllFns.cpp cloneAllFns.h 
	                             defineSymbols.cpp defineSymbols.h 
	                             fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 
	                             findUnknownTypes.cpp 
	                             findUnknownTypes.h 
	                             findUnresolvedSymbols.cpp 
	                             findUnresolvedSymbols.h fixup.cpp 
	                             fixup.h getstuff.cpp getstuff.h 
	                             methodsToFunctions.cpp 
	                             methodsToFunctions.h printAST.cpp 
	                             printAST.h 
	                             processWithStatements.cpp 
	                             processWithStatements.h 
	                             resolveSymbols.cpp resolveSymbols.h 
	                             testGetStuff.cpp testGetStuff.h 
	                             traversal.cpp traversal.h 
	                             verifyASTType.cpp verifyASTType.h 
Added files:
	chapel/compiler/AST/: ast_util.cpp 
	chapel/compiler/include/: ast_util.h 
	chapel/test/classes/deitz/future/future/: test_method4.chpl 
	                                          test_method5.chpl 
	                                          test_method6.chpl 
	chapel/test/trivial/deitz/: test_write_return.chpl 
	                            test_write_return.good 

---------------------------------------------------------------------------

12/14/04 10:43:12 -- deitz

Log message:
	Removed a reference to file that does not exist in fieldsToMemberAccesses.cpp

Modified files:
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 

---------------------------------------------------------------------------

12/14/04 11:23:25 -- deitz

Log message:
	Updated two tests which took an argument but shouldn't

Modified files:
	chapel/test/classes/deitz/future/future/: test_method4.chpl 
	                                          test_method6.chpl 

---------------------------------------------------------------------------

12/14/04 11:30:39 -- jplevyak (a.k.a. n10253)

Log message:
	Convert an assert caused by the (x.foo)() construction into
	a typing error.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

12/14/04 11:43:59 -- jplevyak (a.k.a. n10253)

Log message:
	Remove hack used to obtain surrounding function.  Now use parentSymbol.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

12/15/04 12:10:35 -- deitz

Log message:
	Removed symbol resolution from the parser.  When the parser encounters
	an identifier, it creates an unresolved symbol.  These will be
	resolved in a new pass called Cleanup.  In addition, the parser does
	not try to resolve member symbols in dot-expressions and does not try
	to "classify" parentheses-expressions.  These are handled in CleanUp
	as well.  This is a large, essential change to the compiler.
	
	Added a new pass called Cleanup (Name change? PostParse, CleanParsing)
	that should be run after the parser.  This pass calls a bunch of small
	traversals enumerated in order here:
	
	1. ApplyWith: This traversal expands with-statements that appear in
	   class definitions; it replaces them with the definitions in the
	   included class.  This traversal replaces ProcessWithStatements.
	
	2. InsertThis: This traversal inserts "this" as the first parameter in
	   bound functions.  This traversal replaces half of
	   FieldsToMemberAccesses.
	
	3. ResolveEasy: This traversal resolves unresolved symbols that are
	   easy to resolve, i.e., functions and members where the base has
	   unknown type are left to analysis.
	
	4. SpecializeParens: This traversal changes all ParenOpExpr that are
	   arrays to ArrayRef and changes all ParenOpExpr that are write,
	   writeln, and read to IOCall.  Also, this traversal corrects
	   constructors.
	
	5. ApplyThis: This traversal changes all references to variables and
	   functions defined in a class within the definitions of bound
	   functions.  They are changed to MemberAccess objects where the base
	   is "this" and the member is the variable or function.  This
	   traversal replaces the other half of FieldsToMemberAccesses.
	
	Removed the following two traversals: ProcessWithStatements and
	FieldsToMemberAccesses.
	
	Added replace functionality for symbols that is similar to the replace
	functionality for expressions.  Namely, the current symbol being
	traversed can now be replaced using static routine
	Symbol::replace(old, new) which replaces old with new where old can be
	the symbol being traversed.  This replacement does not change the
	prev, next, and parent links like expression's replacement does since
	the links mean something altogether different for symbols.
	
	Added a new procedure Symboltable::lookupFromScope which looks up a
	symbol starting from a given scope.  It is similar to
	Symboltable::lookup which uses the current scope as a starting place.
	It is different from Symboltable::lookupInScope which looks up a
	symbol by only looking in a given scope.  A name change is desirable.
	
	Removed strange procedure ParenOpExpr::classify which used to attempt
	to determine what a parentheses-expression was doing, be it an I/O, a
	constructor, an array reference.  This is now done in CleanUp's
	SpecializeParens traversal.
	
	Removed strange procedure Symboltable::defineMemberAccess which used
	to attempt to resolve member symbols in dot-expressions.  This is now
	done in CleanUp's ResolveEasy traversal.
	
	Removed long-gone Symboltable::defineEnumList.
	
	Improved fixup which now can be called with the argument "verify"
	which asks fixup to ensure that the AST does not need to be fixed up
	rather than actually fixing it up.  Errors are reported fatally.
	There are currently two calls to fixup in the compiler, one before
	cleanup and one after cleanup.  The second one should be changed to a
	verify-fixup but insertion needs to be modestly improved: The problem
	is that when a copied list of statements is inserted into a new place
	in the AST, its parents are not set.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp symtab.cpp 
	chapel/compiler/include/: expr.h symbol.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: Makefile.share fixup.cpp fixup.h 
	                             resolveSymbols.cpp 
Added files:
	chapel/compiler/traversals/: cleanup.cpp cleanup.h 
Removed files:
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 
	                             processWithStatements.cpp 
	                             processWithStatements.h 

---------------------------------------------------------------------------

12/15/04 14:25:36 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in low level code generation which was setting up
	a parameter after the call (whoops).

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 

---------------------------------------------------------------------------

12/15/04 14:42:52 -- bradc

Log message:
	Started working on implementing a new AST transformation
	traversal -- processParameters -- that makes the different
	parameter intents (in, out, inout), work as they should.
	This isn't yet working, but I got temporarily stuck at a
	reasonable stopping point, so this is just a synch point
	(the new traversal isn't run by default).  Some changes
	that go in with this:
	
	* fixed a bug in which parameter intents were being
	  parsed and passed to the parameter creation routines,
	  but then dropped on the floor
	
	* removed ref and val intents from the parser since they
	  never made it into the language.
	
	* added a PARAM_BLANK intent to the internal enumeration
	  since BLANK != CONST in the language spec, as
	  anticipated
	
	* with Steve's help, fixed a subtle problem in his new
	  traversal stuff in which the next field of this rather
	  than _this was used for traversing lists of Stmt and Type
	  nodes.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp symtab.cpp 
	                      type.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/compiler/traversals/: processParameters.cpp 
	                             processParameters.h 

---------------------------------------------------------------------------

12/15/04 16:03:42 -- deitz

Log message:
	Added new (broken?) replace functionality for statements.  I'm
	checking in for synching purposes.  It works fine for the checked in
	tests.  Next step: Unify replace across the different AST subtypes
	(statements, expressions, symbols, types, etc.) and make sure they are
	right.
	
	Changed with resolution to use new statement replace.  This gets rid
	of the with-statement (which was previously left).  It works as well
	as the other way of doing it.
	
	Fixed a bug in which the scope of "this" added to bound function
	parameter lists was incorrectly set.  It is now set to the parameter
	scope (where it is defined).  Hopefully this won't be decoupled for
	too much longer--See Brad's next checkin.
	
	This checkin resolves seven of the nine failures we've been having.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: cleanup.cpp 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 
	                                  formatoutput.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

12/16/04 07:37:10 -- shannon

Log message:
	Added support for configuration variables of type enum,
	set either on the command line or in a file.  Specifically:
	
	* type.cpp:  Added the codegenConfigVarRoutines and codegenStringToType
	  methods to the necessary AST classes.
	
	* Added a bunch of tests.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/runtime/include/: config.h 
	chapel/runtime/src/: config.c 
Added files:
	chapel/test/execflags/shannon/configs/: configVarBadEnum.chpl 
	                                        configVarBadEnum.execopts 
	                                        configVarBadEnum.good 
	                                        configVarFileBadEnum.chpl 
	                                        configVarFileBadEnum.execopts 
	                                        configVarFileBadEnum.good 
	                                        configVarFileBadEnum.input 
	                                        configVarFileGoodEnum.chpl 
	                                        configVarFileGoodEnum.execopts 
	                                        configVarFileGoodEnum.good 
	                                        configVarFileGoodEnum.input 
	                                        configVarGoodEnum.chpl 
	                                        configVarGoodEnum.execopts 
	                                        configVarGoodEnum.good 

---------------------------------------------------------------------------

12/17/04 09:38:26 -- deitz

Log message:
	Beefed up the traversal mechanism so that the functions TRAVERSE and
	TRAVERSE_LS can be used with impunity.  Unfortunately, the old
	TRAVERSE and TRAVERSE_LS procedures did not work well.  Because the
	traverse and traverseList member functions take a first argument
	(_this) that changes in each class (It must be a reference to a
	pointer to an object of the same type as this.), the dispatch could
	not correctly handle the variations.  These same functions are now
	replicated throughout the hierarchy.  The macro at the beginning of
	classes derived from Stmt, Expr, Symbol, and Type create these
	traversal functions.
	
	Fixed a major-league subtle bug in the new replace mechanism.  The
	problem had to do with changing a pointer inside the function that
	could be aliased to the parameter by the pass-pointer-by-reference
	semantics.  The fix is to use an internal function that does not use
	pass-pointer-by-reference semantics.  This keeps the same
	functionality on replace.  So replacing one statement with another
	results in the pointer being changed as well.  This is good when the
	function is used inside a traversal on the statement being processed.
	The same holds for expressions.
	
	The replace mechanism now works seemingly very well for statements and
	expressions using Stmt::replace(old_stmt, new_stmt) and
	Expr::replace(old_expr, new_expr).  ILink::replace should never be
	called (except within the implementations of these other replace
	routines).
	
	Removed Symbol::replace (which had other semantics and was not
	necessary).  It can be rebuilt later and could be used, for example,
	to replace formal parameters in a function.
	
	Removed the ast_util files which used to contain the traverse
	functions TRAVERSE and TRAVERSE_LS.  These are now macros in link.h
	that should be used simply because they are a less redundant way to
	call these methods that require _this, i.e., write TRAVERSE(a, b, c)
	rather than a->traverse(a, b, c).  Changed most, if not all, calls to
	the methods traverse and traverseList to these macros.  Eliminated
	some static casts.
	
	Added a new test case that uses a with-statement in a class definition
	where it is the first statement in the class.
	
	Added a few .cvsignore files to certain test directories where my
	"tmp" directories kept showing up.

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      link.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	                          symbol.h type.h 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             testGetStuff.cpp traversal.cpp 
	chapel/test/classes/deitz/: .cvsignore 
	chapel/test/classes/deitz/future/: .cvsignore 
	chapel/test/trivial/bradc/: .cvsignore 
Added files:
	chapel/test/classes/deitz/: test_class_with3.chpl 
	                            test_class_with3.good 
	chapel/test/classes/deitz/future/future/: .cvsignore 
	chapel/test/trivial/deitz/: .cvsignore 
Removed files:
	chapel/compiler/AST/: ast_util.cpp 
	chapel/compiler/include/: ast_util.h 

---------------------------------------------------------------------------

12/17/04 09:54:35 -- deitz

Log message:
	Moved tests out of classes/deitz/future and into classes/deitz/ since
	they now work with analysis.

Added files:
	chapel/test/classes/deitz/: test_method1.chpl test_method1.good 
	                            test_method1a.chpl 
	                            test_method1a.good test_method2.chpl 
	                            test_method2.good test_method3.chpl 
	                            test_method3.good test_record1.chpl 
	                            test_record1.good 
	                            test_record_method1.chpl 
	                            test_record_method1.good 
Removed files:
	chapel/test/classes/deitz/future/: test_method1.chpl 
	                                   test_method1.good 
	                                   test_method1a.chpl 
	                                   test_method1a.good 
	                                   test_method2.chpl 
	                                   test_method2.good 
	                                   test_method3.chpl 
	                                   test_method3.good 
	                                   test_record1.chpl 
	                                   test_record1.good 
	                                   test_record_method1.chpl 
	                                   test_record_method1.good 

---------------------------------------------------------------------------

12/17/04 10:32:22 -- deitz

Log message:
	Fixed a small bug in which "this" in a record's constructor was
	defined in the wrong scope.  Moved the test
	classes/deitz/test_record_with1.chpl out of a future directory.  Move
	a bunch of tests in future/future to future.

Modified files:
	chapel/compiler/AST/: type.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_with1.chpl 
	                            test_record_with1.good 
	chapel/test/classes/deitz/future/: NOTEST test_class_with2.chpl 
	                                   test_method4.chpl 
	                                   test_method5.chpl 
	                                   test_method6.chpl 
	                                   test_record2.chpl 
	                                   test_record_method2.chpl 
	                                   test_record_method2.good 
Removed files:
	chapel/test/classes/deitz/future/: COMPOPTS 
	chapel/test/classes/deitz/future/future/: test_method4.chpl 
	                                          test_method5.chpl 
	                                          test_method6.chpl 
	                                          test_record2.chpl 
	                                          test_record_method2.chpl 
	                                          test_record_method2.good 
	                                          test_record_with1.chpl 

---------------------------------------------------------------------------

12/17/04 10:43:55 -- deitz

Log message:
	Added an output file for test_class_with2.good which only fails in
	analysis.

Added files:
	chapel/test/classes/deitz/future/: test_class_with2.good 

---------------------------------------------------------------------------

12/17/04 15:10:16 -- bradc

Log message:
	Fixed a small problem I introduced in which the filename
	passed to runAnalysis.cpp had changed from the user's
	first filename to the first standard prelude due to the
	inclusion of internal modules in the list passed to a
	pass.  This is the reason that you've probably seen an
	internal_prelude.chpl.c file in your parser/ directory
	lately.  If you delete it now, it should not reappear.

Modified files:
	chapel/compiler/passes/: runAnalysis.cpp 

---------------------------------------------------------------------------

12/17/04 16:29:57 -- bradc

Log message:
	Re-fixed dependences for v.g and v.g.d_parser.cpp -- all
	#includes for v.g should now be specified in v.g.h (was
	parse.h at some point, but that changed).  v.g_incs.cpp
	is a C++ file that exists only for the sake of generating
	dependences for v.g and should not be needed.

Modified files:
	chapel/compiler/vparser/: Makefile v.g 
Added files:
	chapel/compiler/vparser/: v.g.h v.g_incs.cpp 
Removed files:
	chapel/compiler/vparser/: parse_incs.cpp 

---------------------------------------------------------------------------

12/20/04 12:14:39 -- bradc

Log message:
	Added a rerun command to our set of gdb commands available
	when using the --gdb flag.  "rerun" runs the compiler without
	cleaning up after itself (i.e., the /tmp directory it created
	may need to be cleaned up by hand).

Modified files:
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

12/20/04 15:52:23 -- jplevyak (a.k.a. n10253)

Log message:
	1. Complete rewrite of the dispatch code to support generic
	   instantiation, default arguments, destructring (better)
	   and point-wise evaluation.  This just restores the original
	   functionality with hooks for the new features.
	
	2. Error messages are now produced for intermediate expressions
	   which fail to type correctly so that better error messages
	   are produced for things like the currently failing 0-arity
	   functions.
	
	3. reogainized the util directory to get it to compile test_lib
	   which had gone stagnent.
	
	4. Added a form_Map which allows iteration over maps more
	   easily.

Modified files:
	chapel/compiler/adt/: map.cpp 
	chapel/compiler/analysis/: fa.cpp fa_extras.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/include/: ast.h fa.h fun.h map.h pattern.h vec.h 
	chapel/compiler/test/: Makefile files.cpp map.cpp misc.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

12/20/04 15:54:57 -- jplevyak (a.k.a. n10253)

Log message:
	removed verified question comment

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

12/20/04 17:08:08 -- jplevyak (a.k.a. n10253)

Log message:
	Error messages have changed for the new dispatch system.

Modified files:
	chapel/test/flowanalysis/jplevyak/: badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good 
	                                    dispatch3.good 
	chapel/test/parsing/jplevyak/: module.good 

---------------------------------------------------------------------------

12/21/04 12:31:17 -- jplevyak (a.k.a. n10253)

Log message:
	enhance "no type" error message when -v is given to include expression number
	which can be looked up in log.i

Modified files:
	chapel/compiler/analysis/: fa_extras.cpp 

---------------------------------------------------------------------------

12/21/04 12:56:15 -- jplevyak (a.k.a. n10253)

Log message:
	Added the ability to determine how application and partial appplication are
	allowed on a SEND by SEND bases: Partial_OK, Partial_NEVER, Partial_ALWAYS.
	Currently x.foo is turned into a Partial_ALWAYS which means that
	x.foo() is the only way to call a member function (since the () is required
	to evaluate the resulting partially applied closure).   For other
	function calls in Chapel, Partial_NEVER is set.  When we get support
	for =>, this will set Partial_ALWAYS.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	                           prim_data.dat 
	chapel/compiler/include/: code.h pattern.h 

---------------------------------------------------------------------------

12/21/04 13:31:29 -- bradc

Log message:
	Big symboltable changes...
	
	Made the symboltable more tightly integrated with
	traversals and beefed up/cleaned up several other
	things related to the symboltable and its scope.
	
	First off, let me start by documenting the different
	contexts in which a SymScope can be introduced:
	
	CONTEXT                      ABBREVIATION  SCOPE_...
	-------------------------------------------------------
	module                       mod           SCOPE_MODULE
	class                        class         SCOPE_CLASS
	function formal parameters   function      SCOPE_PARAM
	for/forall stmt index scope  for stmt      SCOPE_FORLOOP
	block statement              block stmt    SCOPE_LOCAL*
	forall expr index scope      forall expr   SCOPE_FORALLEXPR
	let expr                     let expr
	
	* = could also be SCOPE_FUNCTION if it's the block
	    statement defining a function's body
	
	All of these are currently implemented other than the let
	expression which the parser doesn't yet recognize.  The
	following table is to help us remember some things about
	where scopes are referred to:
	
	SCOPE         SymScope* name    field location
	----------------------------------------------
	mod           modScope          ModuleSymbol
	class         classScope        ClassType
	function      paramScope        FnSymbol
	for stmt      indexScope        ForLoopStmt
	block stmt    blkScope          BlockStmt
	forall expr   indexScope        ForallExpr
	let expr      <unimplemented>   <unimplemented>
	
	The first change of this pass was to rename all variables
	named "scope" to something else, since it was often very
	easy to say "I need a scope that tells me...." and then
	say "aha!  a field named `scope'!" only to find out later
	that it wasn't the scope you'd intended.  So the table
	above tells the name of each scope variable.  The one
	other place we store a scope is that every Symbol has a
	pointer to the scope that it's defined in.  This is now
	called parentScope (not the most descriptive name, but
	declarationScope was a bit long -- suggestions?).
	
	The second change was to make sure that all of the places
	where a scope was defined store their scope (in many
	places we didn't do so, so the scope would point to its
	context, but the context would not point to its scope).
	
	The third change was to make it so that when a traversal
	is running, it automatically keeps the Symboltable's
	sense of what the "currentScope" is up-to-date, with the
	intent that traversals which do things like define new
	symbols or functions or clone things will more-or-less
	automatically put them in the right place and be able
	to reuse more of the same code that the parser uses to
	create things.  I didn't actually change any existing
	traversals to use this, however, with the one
	exception that I made one of Steve's lookupFromScope()
	calls in Cleanup into a lookup() call.
	
	The fourth change was that previously when Symbols were
	constructed, they automatically went to the Symboltable
	to grab the currentScope as their own.  This caused
	subtle bugs when people created Symbols in traversals
	(prior to the traversals tracking the Symboltable), and
	then inserted them manually into a different scope
	because the parent was never patched up.  So the new
	scheme is that Symbols are created with a NULL
	parentScope, and only upon being inserted into the
	Symboltable is their parentScope set.  This is much
	more sane and I apologize to Steve for not doing this
	straight off.  I've also added a check to the Fixup
	("verify") traversal so that it will ensure that every
	symbol is declared in the scope that it thinks it is.
	
	Added a test to try and test all scopes (at least
	all that work -- as others start to work better,
	the test should be updated).
	
	Some (somewhat) tangential changes that were made
	along the way:
	
	* added the ability to parse and store overloaded
	  functions.  This hasn't been tested very heavily,
	  but previously, the redefinition of a function
	  was causing the original to be replaced in the
	  Symboltable, as far as lookup goes (the linked
	  list representation still had both entries).  Now,
	  each FnSymbol has an "overload" field that
	  points to overloads of it that may exist in that
	  scope.  Thus, when a second function "foo" is
	  defined within a given scope, the first "foo"'s
	  overload pointer is set up to point to the
	  second function "foo".  This is currently a
	  singly-linked list.  It may be that more robust
	  support will be needed as we spend more effort
	  on this.  This change had to be inserted now
	  in order to handle the overloading of "this" in
	  the Array class of the internal prelude.
	
	* added a "startTraversal" method to the ModuleSymbol
	  class, which does the TRAVERSE_LS call that was
	  previously found at the top level of all traversals.
	  This was done (a) to hide the TRAVERSE_LS call a
	  bit (since it was nontrivial), and to (b) update
	  the Symboltable with the Module's scope as the
	  current Scope to avoid replicating this in every
	  traversal that had to write its own run() method.
	
	* moved each module's init function out of the
	  global scope (where it was declared before) and
	  into the module's scope.  This is more correct,
	  and now more necessary so that Steve's symbol
	  resolution code can call a normal "lookup()"
	  rather than looking up into a specific scope.
	  In making this change, also had to move the code
	  which inserts the main module's init call into
	  main out of createInitFn() and into
	  createEntryPoint.cpp (which is a more appropriate
	  place for it anyway, and the place where one
	  would go looking for it).
	
	* SymScopes used to keep track of symbols that were
	  used before they were defined (back when I
	  conceived of the parser resolving all top-level
	  symbols).  This no longer makes sense, and is
	  unnecessary, so I killed the code related to it.
	  Steve's resolution of unresolveds now trumps this.
	
	* added a global variable, printEmpty, to the
	  Symboltable which indicates whether or not
	  empty scopes should be printed out.  Previously
	  they never were, however for debugging purposes,
	  I found that printing them out was sometimes
	  very helpful.  Currently, it's set to false and
	  the only way to set it to true is to change it
	  by hand and recompile.
	
	* Cleaned up Symboltable's lookup calls somewhat --
	  implemented lookup() in terms of lookupFromScope()
	  since they were virtually identical; added the
	  ability to have lookupInScope() throw an internal
	  error if it fails; killed a dead symbol; had the
	  lookup...Scope() calls throw an internal fatal
	  if the scope they are passed is NULL (previously
	  they would fail quietly...)
	
	Some (very) tangential changes that were made along
	the way:
	
	* made UnresolvedSymbols throw an internal error when
	  someone tries to codegen them -- previously we
	  simply codegen'd their name because we weren't
	  resolving all symbols.  Now that we are, we should
	  prevent against letting them fall through the
	  compiler to codegen.
	
	* added an isInternal() method to SymScope that
	  tells whether or not it's part of an internal
	  module (the prelude or internal prelude) --
	  this is not just the top-level scopes, but also
	  all scopes that they contain.  This is currently
	  unused, but was useful for debugging and a few
	  lines to implement, so I left it in.
	
	* claned up the passlist.h file a bit by adding
	  categorizations of what groups of passes are
	  aiming to accomplish in the form of comments.
	  Also, added a call to Fixup ("verify") before
	  analysis in hopes of giving John a sane AST.
	  Added a second call to Fixup ("verify") in
	  hopes of ensuring the same for code generation,
	  but it currently fails (hmmm...), so commented
	  it out for now.
	
	* fixed a bug in the lexer in which line numbers
	  were not being maintained properly for multi-
	  line comments that actually spanned multiple
	  lines.  I think I must've copied this out of
	  a C lexer that didn't maintain a linecount...

Modified files:
	chapel/compiler/AST/: TODO expr.cpp stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h symbol.h symscope.h 
	                          symtab.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp fixup.h 
	                             traversal.cpp 

---------------------------------------------------------------------------

12/21/04 13:44:55 -- jplevyak (a.k.a. n10253)

Log message:
	Reorganized the code which detects functions which subsume other
	functions.  The code is now smaller and (I think) easier to understand.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

12/21/04 15:14:47 -- bradc

Log message:
	Forgot to check in my test with my last checkin related
	to Symboltable stuff.
	
	As long as I'm at it, here is a guide to the different
	SymScope types and the contexts which they currently
	store, to indicate what they are associated with:
	
	Scope Type        Stmt           Expr       Symbol
	-------------------------------------------------------
	SCOPE_MODULE      ModuleDefStmt  ---        ModuleSymbol
	SCOPE_CLASS       ClassDefStmt   ---        TypeSymbol
	SCOPE_PARAM       FnDefStmt      ---        FnSymbol
	SCOPE_FORLOOP     ForLoopStmt    ---        ---
	SCOPE_LOCAL*      BlockStmt      ---        ---
	SCOPE_FORALLEXPR  ---            ForallExpr ---

Added files:
	chapel/test/trivial/bradc/: testAllScopes.chpl 
	                            testAllScopes.good 

---------------------------------------------------------------------------

12/21/04 15:21:49 -- bradc

Log message:
	Added support for C++-style single-line comments to a
	passlist file specified with the --passlist option.

Modified files:
	chapel/compiler/main/: runpasses.cpp 

---------------------------------------------------------------------------

12/21/04 16:30:25 -- deitz

Log message:
	Removed TYPE_IDENT from the parser.  Type identifiers are now good old
	identifiers.
	
	Added UnresolvedType as a new kind of type that is somewhat symmetric
	to UnresolvedSymbol.  The name field, a Symbol, for an UnresolvedType
	always points to an UnresolvedSymbol.  When that symbol is resolved,
	the UnresolvedType is resolved.  The new UnresolvedType is created
	during parsing and resolved during Cleanup's ResolveEasiest traversal.
	
	Broke up the ResolveEasy traversal in the Cleanup Pass into two
	traversals: ResolveEasiest and ResolveEasy.  ResolveEasiest tries to
	resolve top-level symbols.  ResolveEasy tries to resolve members in
	dot-expressions by looking at the type of the base.  Extended
	ResolveEasiest to also try to resolve UnresolvedTypes.
	
	The following errors regress (whenn analysis is run):
	[Error matching compiler output for flowanalysis/newast/domarr]
	[Error matching compiler output for flowanalysis/newast/enumarray]
	[Error matching compiler output for flowanalysis/newast/formatoutput]
	[Error matching compiler output for flowanalysis/newast/noop]
	[Error matching compiler output for flowanalysis/newast/protoast_test]
	[Error matching compiler output for trivial/bradc/formatoutput]
	[Error matching compiler output for trivial/bradc/domarr/domarr]
	[Error matching compiler output for trivial/bradc/domarr/enumarray]

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: cleanup.cpp verifyASTType.cpp 

---------------------------------------------------------------------------

12/21/04 16:41:49 -- deitz

Log message:
	Added pre-preliminary support for unions.  Basically a union is
	treated as a record so correct code works correctly but inefficiently.
	I'm checking this in only so that I have only one working version.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/classes/deitz/: test_union1.chpl test_union1.good 

---------------------------------------------------------------------------

12/21/04 17:09:10 -- deitz

Log message:
	Fixed a small bug in which symbols were resolved before "this" was
	inserted into bound functions.  Updated the line numbers in a couple
	of flowanalysis tests which probably changed in the checkin before my
	last one.

Modified files:
	chapel/compiler/traversals/: cleanup.cpp 
	chapel/test/flowanalysis/newast/: domarr.good noop.good 

---------------------------------------------------------------------------

12/22/04 10:44:44 -- deitz

Log message:
	Added a few type variable in function tests and a NOTEST since they don't work

Added files:
	chapel/test/types/type_variables/deitz/: NOTEST 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function4.chpl 

---------------------------------------------------------------------------

12/22/04 11:59:00 -- deitz

Log message:
	Moved a few of the method tests that used to fail with analysis but now don't out of the future directory.

Added files:
	chapel/test/classes/deitz/: test_method4.chpl test_method4.good 
	                            test_method5.chpl test_method5.good 
	                            test_method6.chpl test_method6.good 
Removed files:
	chapel/test/classes/deitz/future/: test_method4.chpl 
	                                   test_method5.chpl 
	                                   test_method6.chpl 

---------------------------------------------------------------------------

12/22/04 12:58:14 -- deitz

Log message:
	Fixed a bug in copy in which the type of a parameter symbol was copied
	when a parameter symbol was copied and the return type of a function
	was copied when the function definition statement was copied.  These
	types are now shared, copying them led to an infinite recursion.
	
	Quick-fixed with-statement application so that it can be applied
	before resolving symbols by having it resolve the class that is
	applied via the with-expression.
	
	Moved the with-statement application traversal first in the suite of
	Cleanup traversals.
	
	Moved test_class_with2.chpl out of the future directory.  This test
	tests with on classes when the classes have methods.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/traversals/: cleanup.cpp 
Added files:
	chapel/test/classes/deitz/: test_class_with2.chpl 
	                            test_class_with2.good 
Removed files:
	chapel/test/classes/deitz/future/: test_class_with2.chpl 
	                                   test_class_with2.good 

---------------------------------------------------------------------------

12/22/04 14:50:35 -- jplevyak (a.k.a. n10253)

Log message:
	form_XXX marco for looping over Map's now skips empty MapElem's correctly.
	Added additional functions to MPosition class: last(), prefix_to_last().
	More work on support for default arguments.

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/compiler/include/: fa.h fun.h map.h pattern.h 

---------------------------------------------------------------------------

12/22/04 16:23:42 -- bradc

Log message:
	Made two minor but substantial changes to the
	AST traversal machinery:
	
	1) fixed a bug in which a traversal that removed
	   the last node in a list resulted in a core
	   dump due to failure to check for end-of-list
	   prior to exploring the next node
	
	2) improved the clarity and perhaps performance
	   of the traverseList calls by not having them
	   drop down to ILink, then BaseAST, then Stmt,
	   Expr, Symbol, Type via dynamic casts.  Now,
	   a traverseList of type Stmt should call the
	   traverseList of type Stmt.  The result is
	   that the callstack isn't littered with calls
	   to ILink's traversal calls when you're
	   traversing a list of statements, for example.
	
	Also made the code management change:
	
	3) factored a lot of the code that was common
	   to the various traversal macros into macros
	   so that fixes like the above only have to be
	   made in one place
	
	And the organizational change:
	
	4) moved all traversal macros into the traversal.h
	   file (both because they're more similar than
	   different, so it's nice to have them all in one
	   place, and because it's the obvious place to look
	   for them).
	
	Food for thought question for Steve: are the
	traverseList methods used for any classes apart
	from Stmt, Expr, Type, Symbol, and possibly ILink,
	and BaseAST?  (in particular, would BlockStmt's
	traverseList call ever be used?  My guess is not,
	and that we could remove those calls.

Modified files:
	chapel/compiler/traversals/: traversal.h 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h type.h 

---------------------------------------------------------------------------

12/23/04 11:19:41 -- deitz

Log message:
	A few test cases for function cloning, two of these work because only one clone is made, the third needs two clones.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function1.chpl 
	                                         test_clone_function2.chpl 
	                                         test_clone_function3.chpl 

---------------------------------------------------------------------------

12/23/04 13:09:54 -- deitz

Log message:
	Added pre-analysis and post-analysis support for overloaded functions.
	That said, the new test case works incorrectly because both calls to
	the overloaded function resolve to the same one.  Cleanup's
	ResolveEasiest traversal modifies the "cname" fields of every function
	that is overloaded with a unique string _user_overload_# where # is a
	unique integer increasing from 1.  Note that this simple name mangling
	scheme is not foolproof.
	
	Added a new string utility routine char* intstring(int i) that returns
	a string whose contents are the digits in an integer i.
	
	Removed the parentFn pointer from FnSymbol because it does not
	currently do anything.  It may later be generalized to something that
	points to a parent function for nested functions.  Nested functions
	are not currently supported.
	
	Added a new test case test_overload_function1.chpl that tests a simple
	overloaded function on integers and floats.

Modified files:
	chapel/compiler/AST/: nils.cpp symbol.cpp symtab.cpp 
	chapel/compiler/include/: stringutil.h symbol.h 
	chapel/compiler/traversals/: cleanup.cpp 
	chapel/compiler/util/: stringutil.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_function1.chpl 

---------------------------------------------------------------------------

12/23/04 14:03:17 -- jplevyak (a.k.a. n10253)

Log message:
	The filename and line number associated with a Sym is now
	resolved against any associated Symbol first, then any associated
	defining BaseAST.  This eliminates many "unknown"s reported in
	the analysis and debugging output.  Also, do not print the
	filename and line number for things (like constants) which may not
	have a unique definition point.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa_extras.cpp 
	chapel/compiler/include/: analysis.h sym.h 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/parsing/jplevyak/: module.good 

---------------------------------------------------------------------------

12/23/04 15:04:19 -- deitz

Log message:
	Moved resolution of ParenOpExpr function symbols after analysis.
	Previously only resolution of MemberAccess symbols was done after
	analysis.  In this post-analysis resolution, analysis's call_info
	function is called to determine which function to resolve to.  This
	supports overloading of functions.  For example, the test
	test_overload_function1.chpl now works.
	
	Moved around a few test cases motivating type variables,
	instantiation, and cloning.  These are now in a future directory,
	though the overloading test is set to run.
	
	Made a slight change to call_info, directed by John, so that the
	interface now only requires a ParenOpExpr, not a ParenOpExpr and the
	containing function.  This is because the containing function can be
	determined from the ParenOpExpr (it's statement's parentSymbol (which
	is hopefullly a function and not a class--no function calls in class
	definitions)).
	
	This checkin breaks one test:
	[Error matching compiler output for trivial/deitz/test_write_return]
	Here the problem is that we're not resolving this function until after
	analysis.  Still, analysis should be able to give us the type?  I'm
	going to look for this bug, but I'm checking in for help.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/traversals/: cleanup.cpp resolveSymbols.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function1.good 
	                                         test_clone_function2.good 
	                                         test_overload_function1.good 
	chapel/test/types/type_variables/deitz/future/: NOTEST 
	                                                test_clone_function3.chpl 
	                                                test_typevar_function1.chpl 
	                                                test_typevar_function2.chpl 
	                                                test_typevar_function3.chpl 
	                                                test_typevar_function4.chpl 
Removed files:
	chapel/test/types/type_variables/deitz/: NOTEST 
	                                         test_clone_function3.chpl 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function4.chpl 

---------------------------------------------------------------------------

12/23/04 17:38:11 -- bradc

Log message:
	Continued work on parameter intents, and got them
	working for an interesting integer case, but don't
	have it working cleanly enough to not cause other
	regressions, and don't have it working for non-scalar
	types.  To that extent, this is a placeholder to
	wipe my slate clean for the holdays.  Changes include:
	
	- improved AST rewrite to insert temps for the
	  parameters, though still not perfect (in
	  particular, Stmt::replace() wasn't working as
	  I'd anticipated it to, so I use a hackier
	  approach).
	
	- added a codegen method for the FnCall class that
	  starts to understand what intents are and the
	  different code that needs to be generated for
	  them.
	
	- added a (commented out) INT_FATAL for attempts to
	  codegen a ParenOpExpr.  ParenOpExprs should be
	  converted to FnCalls or ArrayRefs prior to codegen.
	  One big hole in our current code is that the
	  methodsToFunctions conversion converts methods to
	  parenOpExprs rather than FnCalls (which I believe
	  would require an Expr::replace rather than the
	  dynamic cast that is there now).  We should get
	  this INT_FATAL uncommented sooner rather than later.
	
	- started adding methods to ParamSymbol and the
	  Type hierarchy to interpret what different intents
	  on different types mean in terms of codegen.
	  These are currently only implemented for scalars
	  which is a big part of why intents for non-scalar
	  types don't work right yet.
	
	- changed the "this" parameter inserted for methods
	  from a PARAM_INOUT (which means copy-in/copy-out)
	  to a PARAM_BLANK (which, for classes at least,
	  means pass-by-reference).  Perhaps I should've
	  distinguished based on whether it was a class or
	  a record?  I'm not sure -- do records' bound
	  functions get a "this" inserted?  Perhaps I've
	  fixed one case only to have broken another...
	
	- made cleanup convert obvious function calls from
	  ParenOpExpr to FnCall.
	
	- fixed the copy methods for SizeofExpr and CastExpr,
	  which were copying the types (which we don't want
	  to do).  We should do a complete sweep of type
	  copies at some point...
	
	- made an INT_FATAL message in ILink::replace() more
	  succinct and arguably more understandable

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp link.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: expr.h symbol.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: cleanup.cpp processParameters.cpp 
Added files:
	chapel/test/functions/bradc/: intents.chpl intents.good 

---------------------------------------------------------------------------

12/27/04 12:58:14 -- deitz

Log message:
	Fixed the MethodsToFunctions traversal to replace a ParenOpExpr of a
	bound function with a FnCall of the bound function rather than just
	modifying the ParenOpExpr and keeping it.
	
	Made codegen of ParenOpExpr flag an INT_FATAL error.  This basically
	gets rid of Brad's "THE_FOLLOWING_IS_A_HACK" code that implemented
	codegen on ParenOpExpr.  All ParenOpExpr are now resolved, before
	codegen (before and after analysis), to IOCall, FNCall, or ArrayRef.
	
	Fixed codegen of IOCall so that if the type of the expression being
	read or written is unknown, the compiler flags an INT_FATAL error
	rather than calling into Analysis's type_info routine.  These calls
	are made earlier if necessary.
	
	This checkin resolves trivial/deitz/test_write_return.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: methodsToFunctions.cpp 

---------------------------------------------------------------------------

12/27/04 14:33:22 -- deitz

Log message:
	Added a clone function
	
	  FnDefStmt* FnDefStmt::clone(void)
	
	that clones a function definition.  This function can be called during
	analysis to create a cloned function where necessary.  As a first test
	that I'd like to get working, we can look at
	
	  test/types/type_variables/deitz/future/test_clone_function4.chpl

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: cleanup.cpp 
Added files:
	chapel/test/types/type_variables/deitz/future/: 
	                                                test_clone_function4.chpl 

---------------------------------------------------------------------------

12/27/04 17:02:36 -- deitz

Log message:
	Added rudimentary support for unions (without runtime typechecking)
	from parsing to code generation.  The single test case currently fails
	in analysis, but I'm not sure why.  Expect a regression:
	classes/deitz/test_union1.chpl.
	
	Unions are now generated as structs with an id tag (for runtime
	typechecking) and a union for efficient storage of the union fields.
	In the AST, the union is a class just like a record.  In the case of
	the record, a bool flag value is set to true.  Similarly, for unions,
	a bool flag union_value is set set to true.
	
	Fixed a bug in the setup of nilClassType in which uninitialized
	nilClassType was passed to its own constructor.  This was coerced to
	false, but now that there are two parameters required by this
	constructor, it no longer worked.

Modified files:
	chapel/compiler/AST/: expr.cpp nils.cpp symtab.cpp type.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

12/28/04 16:00:13 -- deitz

Log message:
	Added support for runtime type checking of union types.  A union is
	declared as a struct which contains a C union of the variables in the
	union and a tag that is of an enumerated type based on the names of
	the variables in the union.  This tag is set on writes to the union
	variable and checked on reads of the union variable.  A write is taken
	to be the LHS of an assignment statement or an OUT or INOUT parameter
	to a function.  A read is taken to be an INOUT parameter to a function
	and anything else that is not a write.
	
	The current implementation of determining whether an expression is
	being read, written, or both, is lacking.  A known bug--the indexing
	expression of a LHS array access.  The current mechanism simply checks
	for assignment and INOUT/OUT actuals during the traversal.  The
	improved mechanism may be a separate traversal but I have to think
	about this a little more.  I'd like to write it without having to
	write too much difficult-to-maintain code.
	
	Added two macros to new runtime file union.h _SET_UNION and
	_CHECK_UNION which implement the runtime type check.  The traversal
	that adds the runtime checks is called InsertUnionChecks.  This uses
	the replace function (see discussion below) to insert calls to
	_SET_UNION and _CHECK_UNION.
	
	Added a bit of code to ResolveSymbols that is only used if analysis
	has not been run.  This code tries to resolve functions, and does a
	decent job if the functions are not overloaded.  This improves
	stability of codes being compiled with --noanalysis.
	
	Fixed a bug in MemberAccess copy in which it attempted to copy the
	member symbol.
	
	Added a Fixup pass after MethodsToFunctions because this uses the
	replace mechanism and that does not currently fixup the new inserted
	AST.
	
	Implemented a bad version of postinsert.  It is similar to preinsert.
	These either need to be robustified like replace was or, given that
	replace still needs some work, they should be implemented with
	replace.  For example, rather than using preinsert and postinsert in
	InsertUnionChecks, the following substitutions are done:
	     expr->stmt->postinsert(set_stmt);
	  IS
	     Stmt* copy_stmt = expr->stmt->copy();
	     copy_stmt->append(set_stmt);
	     Stmt::replace(expr->stmt, copy_stmt);
	  AND
	     expr->stmt->preinsert(check_stmt);
	  IS
	     check_stmt->append(expr->stmt->copy());
	     Stmt::replace(expr->stmt, check_stmt);
	The advantage to this approach is that it uses a single mechanism that
	we can make really stable.  The disadvantage is that it's a bit of
	rigmarole.
	
	Implemented a support procedure for VarDefStmt classes called
	codegenVarNames.  This procedure prints out the variable names that
	are declared in a statement list as a list of names separated by
	commas.  Additional parameters premod and postmod allow for strings to
	be prepended and appended to the names.  This procedure is currently
	used to create the enumerated type for unions containing the names of
	the variables in a union.  The runtime type checking tag is then based
	on these names.
	
	Updated flowanalysis test cases because line numbers have changed in
	the prelude.
	
	Added 3 tests, one for records that is exactly like a union but works
	with analysis, and two that test the runtime type checking of unions.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp stmt.cpp type.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: Makefile.share resolveSymbols.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/compiler/traversals/: insertUnionChecks.cpp 
	                             insertUnionChecks.h 
	chapel/runtime/include/: union.h 
	chapel/test/classes/deitz/: test_record2.chpl test_record2.good 
	                            test_union2.chpl test_union2.good 
	                            test_union3.chpl test_union3.good 

---------------------------------------------------------------------------

12/28/04 20:20:08 -- jplevyak (a.k.a. n10253)

Log message:
	Initial set of changes to support intents.
	- separate out arg_name (for named arguments) from
	  destruct_name (for destructuring assignment)
	- remove extra moves for parameters which were used
	  to allow each parameter to be tagged to a particular
	  call site.  The tagging is now done internal to analysis
	- added a notion of "internal" analysis variables which are
	  not reported as having no type.
	- added intents to Sym, and copy the intents from Symbol's
	- unified the way named arguments are handled in pattern
	  matching and analysis
	- fixed a bug in low level code generation with the handling
	  of closures
	- the true type of INOUT and OUT parameter arguments are not
	  considered for dispatch purposes since it is quite possible for
	  such variables to be uninitialized.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp fa.cpp 
	                           fa_extras.cpp pattern.cpp var.cpp 
	chapel/compiler/include/: builtin_symbols.h fa.h pattern.h sym.h 
	                          var.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h prelude.v 
	                          v.g 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

12/29/04 14:15:04 -- jplevyak (a.k.a. n10253)

Log message:
	Phase 2 of support for intents.
	Added an extra layer of analysis variables to permit filtering
	at the call boundary to not effect what can be assigned into
	variables in the function.

Modified files:
	chapel/compiler/analysis/: cg.cpp clone.cpp fa.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: fa.h fun.h pattern.h 

---------------------------------------------------------------------------

12/29/04 15:06:19 -- jplevyak (a.k.a. n10253)

Log message:
	Finished intents as per our discussions.
	Checked in a bunch of intent test cases.
	These go through analysis, but fail in codegen.
	Some of them are supposed to generate errors, but don't.

Modified files:
	chapel/compiler/analysis/: ast.cpp fa.cpp pattern.cpp 
	chapel/compiler/include/: sym.h 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 
	                                    var.good 
Added files:
	chapel/test/functions/jplevyak/: intent-1.chpl intent-1.good 
	                                 intent-2.chpl intent-2.good 
	                                 intent-3.chpl intent-3.good 
	                                 intent-4.chpl intent-4.good 
	                                 intent-5-error.chpl 
	                                 intent-5-error.good 
	                                 intent-6-error.chpl 
	                                 intent-6-error.good 
	                                 intent-7-error.chpl 
	                                 intent-7-error.good 
	                                 intent-8-error.chpl 
	                                 intent-8-error.good 
	                                 intent-9.chpl intent-9.good 

---------------------------------------------------------------------------

12/30/04 11:49:29 -- deitz

Log message:
	Added "back" to all AST pieces (though it is only used for expressions
	and statements so far (and maybe that's the way it should be)).  This
	field, in an expression or statement, contains a pointer to the
	forward pointer to the expression or statement.  It is useful for
	making modifications to the AST because it lets us keep all the
	forward pointers correct and call fixup to reconnect the back
	pointers.  The "back" field is maintained in Fixup.
	
	Changed preinsert to insertBefore and postinsert to insertAfter.
	Robustified replace, insertBefore and insertAfter so that the forward
	pointers are maintained and fixup is called.  Removed extra calls to
	Fixup from the passlist though the last Fixup-verify is not called
	because of a problem in MethodsToFunctions.
	
	There is a major problem with the interaction between the traversal
	and insertBefore.  Advise using insertAfter for the time being.  This
	problem has to do with what statement is traversed after the new
	statements are inserted.  It turns out that the statement to which the
	statement was inserted before is traversed again.  This can lead to
	infinite loops if a traversal inserts something before a statement.
	For example, it is a problem in the InsertUnionChecks traversal
	because the checks should be inserted before any statement with a
	union access.
	
	Fixed handling of unions in analysis by special-casing them similar to
	how records are already special-cased.  The problem is with their
	constructor.  Expect the handling of their constructors to be unified
	with the handling of class constructors in the near term.
	
	Added a new test case for unions, test_union4.chpl.  This checkin
	fixes two regressions:
	  [Error matching compiler output for classes/deitz/test_union1]
	  [Error matching compiler output for classes/deitz/test_union3]
	
	The new test and test_union2.chpl fail because insertBefore is not
	working and the union checks use insertAfter instead.
	
	Added several .cvsignore files to the test directores.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: link.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: fixup.cpp insertUnionChecks.cpp 
	                             processParameters.cpp 
	chapel/test/trivial/deitz/: .cvsignore 
Added files:
	chapel/test/classes/deitz/: test_union4.chpl test_union4.good 
	chapel/test/functions/bradc/: .cvsignore 
	chapel/test/types/type_variables/deitz/: .cvsignore 
	chapel/test/types/type_variables/deitz/future/: .cvsignore 

---------------------------------------------------------------------------

12/30/04 16:18:09 -- deitz

Log message:
	Fixed two bugs and got the call to fixup-verify to work before code
	generation.
	
	Fixed a bug in the call to fixup that is applied during calls to
	insertAfter, insertBefore, and replace.  This call was only fixing up
	the first statement in a module or function in which a statement or
	expression was modified.  It now fixes up the list of statements.
	
	Changed the call to 'append' in MethodsToFunctions to be 'insertAfter'
	instead since append is not really necessary and has not yet been
	robustified.
	
	Fixed a bug in extract and generally robustified extract so that it is
	just as versatile as insertAfter, insertBefore, and replace.
	
	Caution: brain dump.  The remaining difficulty with these four
	functions (insertAfter, insertBefore, extract, and replace) shows up
	in traversals.  Specifically, it is difficult to determine what will
	be traversed when a change is made to the AST during a traversal.  It
	would be nice if this could be better defined and I have some ideas to
	talk over with Brad next week.  The two major problems show up in
	replace (if it is used to replace a piece of the AST containing a
	piece that is being traversed though the current piece that is being
	traversed can be replaced) and insertBefore (since if that is used
	immediately before the statement being traversed, there is a good
	likelihood for an infinite loop).  Though not as common, insertAfter
	could cause an infinite loop if it is applied to the statement before
	the one being traversed.  This has to do with the reference parameter
	which is changed in fixup and makes the same statement be traversed
	again.

Modified files:
	chapel/compiler/AST/: link.cpp 
	chapel/compiler/include/: link.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: methodsToFunctions.cpp 
Added files:
	chapel/test/functions/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

01/03/05 10:48:04 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug in building of the type hiearchy with respect to uninitialized values.

Modified files:
	chapel/compiler/analysis/: ast.cpp 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 
	                                    var.good 

---------------------------------------------------------------------------

01/03/05 14:33:04 -- bradc

Log message:
	Checking in a small change that Steve and I did today
	during a side discussion -- made passes initialize
	their argument lists to "" in their constructor so
	that traversals called manually wouldn't have to call
	the setArgs() method.

Modified files:
	chapel/compiler/AST/: link.cpp 
	chapel/compiler/passes/: pass.cpp pass.h 

---------------------------------------------------------------------------

01/04/05 09:04:00 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed occasionally uninitialized variable which was causing
	regression failure for structype test case.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

01/04/05 16:33:51 -- shannon

Log message:
	Shannon's test of UW server.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

01/04/05 16:48:52 -- bradc

Log message:
	Took out Shannon's UW test line.  This will also serve
	as a test of our ability to mail chapel_dev from UW (it
	may be restricted to not accept external mails...?)

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

01/04/05 16:52:43 -- deitz

Log message:
	Left my mark on the top-level Makefile to test committing at UW and
	mailing at the list.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

01/04/05 18:30:54 -- bradc

Log message:
	Updated the nightly regression suite script to run
	using UW's CVSROOT rather than Cray's.  Also
	put in code to snag a copy of the sources every
	night (deleting ones that are a month old), and
	renamed the /tmp directory used slightly.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

01/05/05 11:15:06 -- bradc

Log message:
	Updated nightly token-counting script to use new UW
	location.

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

01/05/05 13:29:43 -- deitz

Log message:
	Motivation: Remove references to pointers from the traversal since the
	back pointer pointer makes them unncessary and they are error prone.
	Expect a later checkin to do just this.
	
	Removed the setting of the back pointer pointer (back) from the Fixup
	traversal.  It is now done manually in constructors and AST
	manipulation routines including insertBefore, insertAfter, replace,
	append, and extract.  Fixup merely checks that it is probably correct.
	The back field of an AST makes it easy to update the AST structure
	because it points to the pointer that is linking its node into the
	AST.  (Note- because the AST is a Tree there is only one parent of any
	given node.)
	
	Created a macro for setting back for an Expr or Stmt field of an AST
	class since it duplicates the name of the ast.  For example, to set
	back for the left expression in a Binop, write "SET_BACK(left)" rather
	than "left->back = &left."
	
	Moved back out of the ILink class and into statements and expressions.
	Its type is now either Stmt** or Expr** rather than ILink**.  This is
	motivated by the following error:
	
		class C { };
		class A : C { void foo1(); };
		class B : C { void foo2(); };
	
		A* a = new A();
		C** c = &a;                   -- ERROR: requires static cast
		*c = new B();                 -- UH OH: a points to a B
	
	When back was in ILink, it was a pointer to a pointer to ILink and
	could result in statement pointers pointing to expressions or vice
	versa.  With this change, this can't happen, though there are still a
	few places where static casts are used unsafely.  Namely, when dealing
	with the next pointer which points to an ILink.  Also, since the
	constructor field is a FnDefStmt and not just a Stmt, the same kind of
	static cast is necessary.
	
	Moved replace, insertBefore, insertAfter, append, and extract out of
	ILink and into Expr and Stmt since these update back.  Append is
	virtual and a copy exists in ILink that does not touch back; this
	version works on Symbols and Types.  A later checkin should rewrite
	all of these when generic AST lists are added.  The replace function
	is no longer a static method and can now be called as the others.  So
	to replace a Stmt old with a Stmt new, write old->replace(new).
	
	Removed ILink::add since it's never used.  Added utilities ILink::head
	and ILink::tail to find the start and finish of a list.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             methodsToFunctions.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

01/05/05 14:15:40 -- deitz

Log message:
	Fixed an oversight in Expr::insertBefore and Stmt::insertBefore in
	which the back pointer for this was not set.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 

---------------------------------------------------------------------------

01/05/05 16:35:17 -- jplevyak

Log message:
	More work on handling generics and point-wise application.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: fun.h pattern.h 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

01/06/05 07:59:01 -- shannon

Log message:
	Wrote a traversal that creates and populates a config var
	hash table.  This traversal generates the rtconfig.c file
	containing the CreateConfigVarTable function which in turn
	calls initConfigVarTable() and installConfigVar().
	
	Specifically:
	
	* arg.c:  Minor cleanup.  Changed some function names to
	  make their use more apparent and moved variable declarations
	  closer to their usage.
	
	* codegen.cpp:  Created and called a new createConfigVarTable
	  traversal.
	
	* config.c:  Added another data member to the configVarType
	  structure, setValue, and changed the name of value to
	  defaultValue.  Also added another pointer so I could make
	  a list of config vars in the order they were installed in
	  the hash table.  Added the printConfigVarTable function which
	  prints out the config vars with both set and default values
	  in the order they were declared.
	
	* config.h:  Minor changes.  Changed some function names and
	  removed a flag that was no longer necessary.
	
	* createConfigVarTable.cpp,h:  Added the CreateConfigVarTable
	  traversal.
	
	* expr.cpp,h:  Added the printCfgInitString method to the Expr
	  and StringLiteral classes.  This was necessary so that I
	  could generate strings as arguments to installConfigVar
	  in the rtconfig.c file without double quotes.
	
	* type.cpp:  Made some minor changes in code generation of the
	  setInCommandLine function for type enum.  Changed some
	  function names and removed an unnecessary flag.
	
	* Added a bunch of tests.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/runtime/include/: config.h 
	chapel/runtime/src/: arg.c config.c main.c 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarInvalidComplex.chpl 
Added files:
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	chapel/test/execflags/shannon/configs/: configVarHelp.chpl 
	                                        configVarHelp.execopts 
	                                        configVarHelp.good 
	                                        configVarNonLiteralConfigs.chpl 
	                                        configVarNonLiteralConfigs.execopts 
	                                        configVarNonLiteralConfigs.good 
	                                        configVarNonLiteralInit.chpl 
	                                        configVarNonLiteralInit.good 
	                                        configVarSetNotDeclared.chpl 
	                                        configVarSetNotDeclared.execopts 
	                                        configVarSetNotDeclared.good 
	                                        configVarTwoModules.chpl 
	                                        configVarTwoModules.execopts 
	                                        configVarTwoModules.good 

---------------------------------------------------------------------------

01/06/05 13:22:55 -- deitz

Log message:
	Removed referenceness from the parameters to preProcess* and
	postProcess* in the traversal apparatus.  Removed _this pointer
	reference from traverse and traverseList.  Removed the macro mess
	surrounding the traversal apparatus.  This greatly simplifies how the
	traversal mechanism works.
	
	Fixed the InsertUnionChecks traversal to use insertBefore instead of
	insertAfter since that now works.  Made union checks return a
	zero-status at runtime so that the test system (which checks for this
	status) works.  This fix and change fixes the following two regressions:
	
	[Error executing program classes/deitz/test_union2]
	[Error executing program classes/deitz/test_union4]

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp link.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	                          symbol.h type.h 
	chapel/compiler/traversals/: checkIDs.cpp checkIDs.h 
	                             checkTypeInfo.cpp checkTypeInfo.h 
	                             cleanup.cpp cloneAllFns.cpp 
	                             cloneAllFns.h 
	                             createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	                             defineSymbols.cpp defineSymbols.h 
	                             findUnknownTypes.cpp 
	                             findUnknownTypes.h 
	                             findUnresolvedSymbols.cpp 
	                             findUnresolvedSymbols.h fixup.cpp 
	                             fixup.h getstuff.cpp getstuff.h 
	                             insertUnionChecks.cpp 
	                             insertUnionChecks.h 
	                             methodsToFunctions.cpp 
	                             methodsToFunctions.h printAST.cpp 
	                             printAST.h processParameters.cpp 
	                             processParameters.h 
	                             resolveSymbols.cpp resolveSymbols.h 
	                             testGetStuff.cpp testGetStuff.h 
	                             traversal.cpp traversal.h 
	                             verifyASTType.cpp verifyASTType.h 

---------------------------------------------------------------------------

01/06/05 13:23:33 -- deitz

Log message:
	Checking in change to runtime related to last checkin

Modified files:
	chapel/runtime/include/: union.h 

---------------------------------------------------------------------------

01/06/05 15:48:01 -- jplevyak

Log message:
	More support for generics and point-wise uses.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: pattern.h 

---------------------------------------------------------------------------

01/06/05 15:54:28 -- deitz

Log message:
	Factored copy in Stmt, Expr, Symbol, Type, and their subclasses into
	two pieces like traverse.  There is now an external copy that should
	be used, along with copyList, and internal copyStmt, etc., that does
	the actual copying.
	
	Added a callback to analysis for cloning functions so that the ainfo
	part of the BaseAST can be maintained in clone functions.  This uses a
	new class called CloneCallback.  It is passed into copy with a default
	value of NULL.  In the NULL case, nothing happens.  If it's not NULL,
	then the external factor of copy calls back into analysis to update
	the ainfo.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h expr.h stmt.h symbol.h 
	                          type.h 
	chapel/compiler/traversals/: cleanup.cpp 

---------------------------------------------------------------------------

01/06/05 16:21:40 -- bradc

Log message:
	Checking in "future" files for tests that have never
	worked.  This is in preparation for checking in test
	system code that has a notion of future tests.

Added files:
	chapel/test/functions/bradc/: intents.future 
	chapel/test/functions/jplevyak/: intent-1.future intent-2.future 
	                                 intent-3.future intent-4.future 
	                                 intent-5-error.future 
	                                 intent-6-error.future 
	                                 intent-8-error.future 
	                                 intent-9.future 

---------------------------------------------------------------------------

01/06/05 16:25:20 -- deitz

Log message:
	Made new class CloneCallback in my last checkin a subclass of gc so
	that it is garbage collected.

Modified files:
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

01/06/05 16:33:51 -- bradc

Log message:
	(Realized I couldn't finish my testing of "future tests"
	without checking this in too...)
	
	Modified the test system so that for a test named foo.chpl,
	if its directory also contains a file foo.future, then the
	test will be run, and the result will show up in the test
	summary, but its success or failure will not be counted in
	the test summary.  This information is used in the nightly
	regression mailing to list future tests that are passing,
	new, and continuing to fail at the bottom of the mail.
	
	The .future file should contain the userid of the developer
	who's currently supposed to be working on the test on its
	first line.  Subsequent lines are intended to store notes
	(as tests are passed from developer to developer, e.g.),
	and are ignored by the testing system.
	
	The intent is that .future files will be used to mark files
	that we're working on in the near-term.  Once a test is
	working and stable, its .future tag should be removed,
	adding it to the test system.  Further failures of the
	test should be considered regressions and the future tag
	should not be re-instated.
	
	In order to keep nightly and personal test summaries readable
	and not too overwhelming, I'd suggest we avoid using this as
	a mechanism to check in every test we can think of that should
	work someday, and use it only for tests that we're actively
	working on (or should be).

Modified files:
	chapel/test/: sub_test start_test 

---------------------------------------------------------------------------

01/06/05 16:49:53 -- jplevyak

Log message:
	Bad declaration inside conditional shadows return variable.

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

01/06/05 16:51:13 -- bradc

Log message:
	Fixed the nightly regression test script so that it
	understands the concept of future tests.  This wraps
	up my first stab at supporting future tests.  Feel
	free to send feedback, etc. as you start using it.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

01/06/05 16:53:57 -- jplevyak

Log message:
	Interface to new clone() function... still not working.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: analysis.h ast.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 

---------------------------------------------------------------------------

01/06/05 17:04:34 -- deitz

Log message:
	Added two methods to Expr, isRead and isWritten, that say whether an
	expression is read or written, respectively.  An expression passed to
	an inout parameter would return true to both of these methods.  Though
	not implemented, this should return a different value for blank
	parameters depending on the type of the expression.
	
	These functions are now used in InsertUnionChecks, replacing the
	facilities that were in that traversal.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: insertUnionChecks.cpp 
	                             insertUnionChecks.h 

---------------------------------------------------------------------------

01/06/05 17:18:30 -- bradc

Log message:
	Checking in a new directory map for the test/ directory
	to see if my last change worked.

Modified files:
	chapel/test/: DIRS 

---------------------------------------------------------------------------

01/06/05 17:24:26 -- bradc

Log message:
	Removing Steve's comment from the top-level
	Makefile as a second check.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

01/07/05 08:09:47 -- shannon

Log message:
	Fixed a bug in my config var hash table generation code where
	I forgot to initialize the data members of the configVar
	class.

Modified files:
	chapel/runtime/src/: config.c 

---------------------------------------------------------------------------

01/07/05 09:40:37 -- deitz

Log message:
	Moved _UNION_CHECK and _UNION_SET (the union runtime typechecking
	macros) out of the prelude and into the internal_prelude.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 

---------------------------------------------------------------------------

01/07/05 10:09:12 -- deitz

Log message:
	Updated .good files in flowanalysis/newast tests based on my last changes

Modified files:
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

01/07/05 10:29:06 -- deitz

Log message:
	Proving that no change is too small to make it worth testing...
	
	Updated the InsertUnionChecks traversal to lookup the symbols
	internally (since they moved to the internal prelude).  Fixed one last
	.good file in a flowanalysis test.

Modified files:
	chapel/compiler/traversals/: insertUnionChecks.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 

---------------------------------------------------------------------------

01/07/05 10:41:34 -- deitz

Log message:
	Moved two tests out of classes/deitz/future and into classes/deitz
	with .future files.

Added files:
	chapel/test/classes/deitz/: test_nested_record1.chpl 
	                            test_nested_record1.future 
	                            test_record_method2.chpl 
	                            test_record_method2.future 
	                            test_record_method2.good 
Removed files:
	chapel/test/classes/deitz/future/: test_record2.chpl 
	                                   test_record_method2.chpl 
	                                   test_record_method2.good 

---------------------------------------------------------------------------

01/07/05 10:47:13 -- deitz

Log message:
	Moved some tests out of types/type_variables/deitz/future and into
	types/type_variables/deitz with .future files.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function3.chpl 
	                                         test_clone_function3.future 
	                                         test_clone_function4.chpl 
	                                         test_clone_function4.future 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function1.future 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function2.future 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function3.future 
	                                         test_typevar_function4.chpl 
	                                         test_typevar_function4.future 
Removed files:
	chapel/test/types/type_variables/deitz/future/: 
	                                                test_clone_function3.chpl 
	                                                test_clone_function4.chpl 
	                                                test_typevar_function1.chpl 
	                                                test_typevar_function2.chpl 
	                                                test_typevar_function3.chpl 
	                                                test_typevar_function4.chpl 

---------------------------------------------------------------------------

01/07/05 11:18:59 -- deitz

Log message:
	Removed Symboltable::copyParams and handle the copying of parameters
	in the copying of a FnDefStmt.  The parameters are now copied with the
	CloneCallback for the case of a function being called.  This uses
	copyList rather than copyParams which basically did the same thing.
	
	Added a guard against copying the NilSymbol so that it is just
	returned.
	
	Changed the error message in codegen having to do with unresolved
	types.  If the type of an expression is unknown at codegen time, we
	now say "unknown type encountered in codegen" rather than " shouldn't
	be calling into analysis now".

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp symtab.cpp 
	chapel/compiler/include/: symtab.h 

---------------------------------------------------------------------------

01/07/05 11:38:04 -- bradc

Log message:
	NOTE: This commit requires an update -d in the compiler
	directory
	
	Added a new type of Pass -- the SymtabTraversal -- which
	traverses the symboltable's SymScopes in a preorder,
	depth-first manner, traversing the Symbols in the order
	that they were declared.  Users may specify routines to
	pre- and post-process the SymScopes, and to process the
	Symbols as they are encountered.  Note that the pre-
	and post-processing of a scope is done before and after
	its Symbols are traversed -- not before and after its
	contained scopes are traversed.
	
	During traversal, the scopes encountered are pushed and
	popped as the "current" scope from the Symboltable's
	point of view (thus, insertions performed during a
	traversal will be performed in the scope currently being
	traversed).
	
	Like other traversals, SymtabTraversals must be registered
	in the passlist.cpp file and may be included in the
	passlist.h file.
	
	As part of this change, reorganized the Symboltable code
	so that the component classes have been moved from
	AST/symtab.cpp into a number of files (one per class)
	in a new compiler directory symtab/.  This directory
	also contains the SymtabTraversal code, and new
	SymtabTraversals should be stored here, organizationally.
	
	Rewrote the PrintSymtab pass to be a SymtabTraversal as
	proof-of-concept, though we may want more features as
	time goes on (such as the ability to skip over internal
	scopes, or have the pre- and post-processing steps take
	place relative to the enclosed scopes, or to traverse
	the Symboltable in different orders).
	
	One side change:
	
	- made the tmp directory created by the compiler embed
	  the userid of the user so that users' tmp directories
	  can never collide (if one is left around, stale, e.g.)

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: Makefile.share 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/util/: files.cpp 
Added files:
	chapel/compiler/symtab/: Makefile Makefile.include 
	                         Makefile.share printSymtab.cpp 
	                         printSymtab.h symlink.cpp symlink.h 
	                         symscope.cpp symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
	chapel/test/execflags/shannon/configs/: .cvsignore 
Removed files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/passes/: printSymtab.cpp printSymtab.h 

---------------------------------------------------------------------------

01/07/05 11:54:58 -- deitz

Log message:
	Added .good files for new future tests

Added files:
	chapel/test/classes/deitz/: test_nested_record1.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function3.good 
	                                         test_clone_function4.good 
	                                         test_typevar_function1.good 
	                                         test_typevar_function2.good 
	                                         test_typevar_function3.good 
	                                         test_typevar_function4.good 

---------------------------------------------------------------------------

01/07/05 13:59:08 -- deitz

Log message:
	Added three tests for unions with bound functions.  These all work
	though the runtime typechecking error message printed out for the
	third test doesn't have a line number or filename.  The problem has to
	do with copying.  When AST structures such as statements are copied,
	the line number and filename is lost.

Added files:
	chapel/test/classes/deitz/: test_union_method1.chpl 
	                            test_union_method1.good 
	                            test_union_method2.chpl 
	                            test_union_method2.good 
	                            test_union_method3.chpl 
	                            test_union_method3.future 
	                            test_union_method3.good 

---------------------------------------------------------------------------

01/07/05 14:20:39 -- deitz

Log message:
	Removed .future for test_typevar_function3 which uses ?t for a type in
	the parameter to a function.  Since the function is not cloned (only
	called once), it works.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function3.future 

---------------------------------------------------------------------------

01/07/05 15:01:43 -- jplevyak

Log message:
	Interm checkin of cloning code which clones Sym(s).

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: ast.h baseAST.h 

---------------------------------------------------------------------------

01/07/05 16:01:18 -- deitz

Log message:
	Added code to preserve the line number and filename of copied
	statements, expressions, symbols, and types.  Also added code to
	preserve the line number and filename for fields within methods for
	which a this is place before, the new MemberAccess gets the old
	expression's line number and filename.
	
	Removed the .future for test_union_method3 since it now works,
	printing out the right line number and filename.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/traversals/: cleanup.cpp 
Removed files:
	chapel/test/classes/deitz/: test_union_method3.future 

---------------------------------------------------------------------------

01/10/05 10:29:49 -- deitz

Log message:
	Added more support for copied symbols.  In particular, function
	symbols are now explicitly copied when function definition statements
	are copied and the clone callback is used.  Note that this checkin
	does not fix the problem with resolving symbols in copied statements
	and expressions.  That's next.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

01/10/05 11:43:16 -- bradc

Log message:
	Made a small change (fixed a thinko?) in the dparser
	Makefile to make it work on cygwin, in preparation
	for this week's travel.

Modified files:
	chapel/third-party/dparser/d/: Makefile 

---------------------------------------------------------------------------

01/10/05 12:01:14 -- bradc

Log message:
	Added a doc/ directory with an internal/ subdirectory, and
	added the high-level (meaning parsing/AST/codegen-oriented)
	SSCA2 task breakdown that Steve and I put together in
	November.  This is both to provide a controlled version to
	store it, and to support discussion on what our next
	implementation tasks should be.

Added files:
	chapel/doc/internal/: SSCA2.HLtasks.txt 

---------------------------------------------------------------------------

01/10/05 13:27:53 -- deitz

Log message:
	Improved support for copying the AST.  Copied statements and
	expressions are now cleaned.  This means that variables that are
	copied are re-resolved.  So, for example, if a function is cloned,
	expressions in the new clone are resolved against the new parameter
	list.
	
	Is it possible that inside a symbol constructor, the symbol should be
	defined?  Definining symbols in the symboltable currently seems ad
	hoc.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/traversals/: cleanup.cpp cleanup.h 
	                             methodsToFunctions.cpp 

---------------------------------------------------------------------------

01/10/05 14:01:22 -- jplevyak

Log message:
	Fixed types/type_variables/deitz/test_clone_function3/4
	Fixed bug in cloning which used the old method Sym::in == Fun::sym to
	determine that a variable was function local.  Switch to Sym::function_scope.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fun.cpp 

---------------------------------------------------------------------------

01/10/05 16:29:28 -- jplevyak

Log message:
	Added is_scalar() and element_type() to ASymbol interface.  Currently
	taking a switch on astType, and only handling TYPE_ARRAY for element_type().
	Fixed regressions from last checkin.   Still have one
	in enumarray which I am looking into.  It may be simply a difference
	in functionality, or a real issue.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp fun.cpp 
	                           pattern.cpp sym.cpp 
	chapel/compiler/include/: analysis.h sym.h 
	chapel/compiler/vparser/: parse_ast.cpp 

---------------------------------------------------------------------------

01/10/05 19:02:35 -- jplevyak

Log message:
	Fixed a bug with whereby analysis of enumerations was splitting
	for each enumeration element instead of folding them together.
	This fixes the regression on enumarray.chpl

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/test/flowanalysis/newast/: enum.good enumarray.good 

---------------------------------------------------------------------------

01/11/05 11:01:22 -- jplevyak

Log message:
	Work on function visibility, stalled on issues with getting the scope
	for arbitrary EXPR_FNCALL.

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h ast.h symscope.h 

---------------------------------------------------------------------------

01/12/05 15:46:31 -- jplevyak

Log message:
	move to new interface for combining wrappers and instantiation

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: fun.h 

---------------------------------------------------------------------------

01/12/05 17:04:00 -- jplevyak

Log message:
	Added initial structural subtyping test (only on names at this time)
	for records and unions.   Added some test cases... these fail, but
	there are similar tests which are listed as "future" so I made these
	future as well.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp pattern.cpp 
	chapel/compiler/include/: sym.h 
Added files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-1.chpl 
	                               record_type_hierarchy-1.future 
	                               record_type_hierarchy-1.good 
	                               record_type_hierarchy-2.chpl 
	                               record_type_hierarchy-2.future 
	                               record_type_hierarchy-2.good 
	                               union_type_hierarchy-1.chpl 
	                               union_type_hierarchy-1.future 
	                               union_type_hierarchy-1.good 
	                               union_type_hierarchy-2.chpl 
	                               union_type_hierarchy-2.future 
	                               union_type_hierarchy-2.good 

---------------------------------------------------------------------------

01/13/05 10:04:03 -- jplevyak

Log message:
	Cleanup IF1 generation by eliminating some unnecessary moves.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

01/13/05 10:40:17 -- deitz

Log message:
	Removed .future files for three cloning tests that are now working.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function3.future 
	                                         test_clone_function4.future 
	                                         test_typevar_function4.future 

---------------------------------------------------------------------------

01/13/05 12:10:30 -- deitz

Log message:
	Added a new cloning test that attempts to clone three functions, over
	an integer, a float, and a string.  It succeeds, but the function
	calls do not resolve to the cloned ones.  This is happening in all of
	our cloning tests, but it only shows up as an error here.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function5.chpl 
	                                         test_clone_function5.future 
	                                         test_clone_function5.good 

---------------------------------------------------------------------------

01/13/05 14:52:34 -- deitz

Log message:
	Added a few tests, three new futures.
	
	The test test_method7 calls an overloaded function from within a
	method.  It currently works.
	
	The overload_integerfloat tests test overloading foo(i, i), foo(i, f),
	and foo(f, f) where f is a float and i is an integer.  One problem
	with these is that when a float is initialized with an integer value,
	it is taken to be an integer by analysis even though it should be
	taken to be a float.  The declared type should override the inferred
	type from initialization.  Right?
	
	The second problem is that when foo is called as in foo(f, i), it
	fails to resolve even though it should resolve to foo(f, f).  Right?

Added files:
	chapel/test/classes/deitz/: test_method7.chpl test_method7.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat1.chpl 
	                                         test_overload_integerfloat1.good 
	                                         test_overload_integerfloat2.chpl 
	                                         test_overload_integerfloat2.future 
	                                         test_overload_integerfloat2.good 
	                                         test_overload_integerfloat3.chpl 
	                                         test_overload_integerfloat3.future 
	                                         test_overload_integerfloat3.good 
	                                         test_overload_integerfloat4.chpl 
	                                         test_overload_integerfloat4.future 
	                                         test_overload_integerfloat4.good 

---------------------------------------------------------------------------

01/14/05 11:07:46 -- jplevyak

Log message:
	Fixed up another backpointer to get call_info to report the correct
	clones.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: ast.h 

---------------------------------------------------------------------------

01/14/05 11:11:59 -- jplevyak

Log message:
	Fixed stupid SEGV.
	Removed .future for test_clone_function5 which is now working.

Modified files:
	chapel/compiler/analysis/: fun.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function5.future 

---------------------------------------------------------------------------

01/14/05 12:49:34 -- jplevyak

Log message:
	Fix 'var x : float = 1;'  Coersion in initialization.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/14/05 12:50:24 -- jplevyak

Log message:
	Works no.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat2.future 

---------------------------------------------------------------------------

01/14/05 12:52:08 -- deitz

Log message:
	January task list and January future tests.
	
	This is a draft version of what we should get done in January.  There
	is alot here, including the holdover stuff from Nov/Dec.  Comments,
	changes?
	
	I moved SSCA2.HLtasks.txt to SSCA2.tasks and removed the tasks we've
	completed (into 2004.NovDec.tasks).  I figure this can be a shrinking
	list of what's left.  I left the HLtasks file there for reference.

Added files:
	chapel/doc/internal/: 2004.NovDec.tasks 2005.Feb.tasks 
	                      2005.Jan.tasks SSCA2.tasks 
	chapel/test/arrays/deitz/: test_basic1d1.chpl test_basic1d1.good 
	                           test_basic1d2.chpl 
	                           test_basic1d2.future 
	                           test_basic1d2.good test_basic1d3.chpl 
	                           test_basic1d3.future 
	                           test_basic1d3.good test_basic1d4.chpl 
	                           test_basic1d4.future 
	                           test_basic1d4.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1.chpl 
	                                         test_clone_class1.future 
	                                         test_clone_class1.good 
	                                         test_clone_class2.chpl 
	                                         test_clone_class2.future 
	                                         test_clone_class2.good 
	                                         test_typevar_class1.chpl 
	                                         test_typevar_class1.future 
	                                         test_typevar_class1.good 

---------------------------------------------------------------------------

01/14/05 14:17:44 -- jplevyak

Log message:
	Fix regression

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/14/05 15:16:28 -- jplevyak

Log message:
	Implement numeric coercions on initialization to a typed 'var'.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	                           prim_data.dat 
	chapel/compiler/include/: builtin_symbols.h sym.h 
	chapel/compiler/vparser/: ast_cf.cpp 
	chapel/test/flowanalysis/newast/: enum.good noop.good 
	                                  pareninit.good 
	                                  unary_plusMinus.good 
Added files:
	chapel/test/types/type_variables/jplevyak/: test_coerse1.chpl 
	                                            test_coerse1.good 

---------------------------------------------------------------------------

01/14/05 15:54:43 -- jplevyak

Log message:
	Coercion of numerics during assignment supported along with test cases.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  danglingelse.good 
	                                  equality_ops.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  relational_ops.good var.good 
	                                  var2.good whileLoop.good 

---------------------------------------------------------------------------

01/14/05 17:20:01 -- bradc

Log message:
	For now, making all module global variables static in
	the generated C code, to avoid conflicts between
	multiple variables with the same name in different
	modules.  Eventually, we'll need to take a more
	sophisticated approach to this problem (either
	munging the names, or being very careful about what
	variables we allow to escape what scopes).

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

01/14/05 18:02:26 -- bradc

Log message:
	Forgot to add symtab to the directories looked at in our
	nightly token counts last week.

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

01/14/05 18:06:25 -- bradc

Log message:
	

Added files:
	chapel/test/arrays/deitz/: .cvsignore 
	chapel/test/classes/jplevyak/: .cvsignore 
	chapel/test/modules/bradc/: twomodulessamevar.chpl 
	                            twomodulessamevar.good 

---------------------------------------------------------------------------

01/17/05 14:24:27 -- deitz

Log message:
	Expected regression! This checkin breaks the following test(s):
	  trivial/bradc/protoast/mg-seq-concrete
	See note(s) below.
	
	Changed the mechanism through which symbols are defined in the
	symboltable.  Previously, the creation of symbols was decoupled from
	defining them in the symboltable.  They are now defined in the
	symboltable when they are constructed.  This greatly simplifies many
	aspects of the compiler.
	
	Made a new scope called nilsScope for declaring nilSymbol,
	nilFnSymbol, and nilVarSymbol.
	
	Implemented copy for VarSymbol and TypeSymbol.  The others are already
	implemented.
	
	Added a new procedure "TypeDefStmt* TypeDefStmt::clone(CloneCallback*
	clone_callback)" for cloning types such as classes.  This is ready
	(pending bugs) to be called by analysis in order to clone classes with
	underspecified types, e.g., a class with a variable field with no
	type.  Handed the futures of
	test/types/type_variables/deitz/test_clone_class[1|2] to John.
	
	Fixed a small bug in which the back pointer was not set for
	ForallExprs that were modified by setForallExpr.
	
	Partially cleaned up how unions are handled.  The enums for unions
	should eventually be made statements of their own rather than be
	handled in code generation.  Now at least the symbols are added to the
	symboltables.  The InsertUnionChecks looks up these symbols rather
	than creating but not defining its own.
	
	Changed how parameters to procedures are parsed.  Commas, rather than
	semicolons, are now used between intent-variable-type formals.
	Multiple variables will eventually be allowed with blank space.  This
	change breaks mg-seq-concrete.
	
	Removed long-dead traversal DefineSymbols.

Modified files:
	chapel/compiler/AST/: expr.cpp nils.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: stmt.h symtab.h 
	chapel/compiler/parser/: Makefile chapel.y internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share cleanup.cpp 
	                             insertUnionChecks.cpp 
	chapel/doc/internal/: 2005.Feb.tasks 
	chapel/test/classes/deitz/: test_union3.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1.future 
	                                         test_clone_class2.future 
	                                         test_overload_integerfloat1.chpl 
	                                         test_overload_integerfloat2.chpl 
	                                         test_overload_integerfloat3.chpl 
	                                         test_overload_integerfloat4.chpl 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	chapel/test/types/type_variables/jplevyak/: test_coerse1.chpl 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function6.chpl 
	                                         test_clone_function6.good 
Removed files:
	chapel/compiler/traversals/: defineSymbols.cpp defineSymbols.h 

---------------------------------------------------------------------------

01/17/05 14:39:42 -- shannon

Log message:
	Added support for config vars with the same name in
	different modules.  Changed the output of the -h
	flag to include the module name followed by a list
	of its config vars, in order of declaration.
	
	Specifically:
	
	* arg.c:  Wrote a function to parse out the module
	  name from the var name string.  Broke the
	  installConfigVar function into two, adding
	  initSetValue to initialize the value of a config
	  var set on the command line.
	
	* config.c:  Added the module name to a bunch of
	  functions, and removed the isDefaultValue flag.
	
	  Added the print of the module name to the -h flag.
	  Chose to not print out the module name if there is
	  but one module in the program.
	
	  Made error messages more specific in the case of
	  the variable name not being found on lookup, instead
	  of telling the user, "well, it could be this or that."
	
	* createConfigVarTable.cpp:  Replaced the
	  isDefaultValue flag from the codegen of a call to
	  installConfigVar with the module name.
	
	* stmt.cpp:  Added the moduleName variable to the
	  codegen for the call to setInCommandLine.
	
	* type.cpp:  Added the moduleName variable to the
	  codegen for the call to lookupSetValue.
	
	* Added a bunch of tests.  Updated expected output
	  for several tests after changing error messages.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	chapel/runtime/include/: config.h 
	chapel/runtime/src/: arg.c config.c 
	chapel/test/execflags/shannon/configs/: configVarHelp.good 
	                                        configVarInvalidName.good 
	                                        configVarSetNotDeclared.good 
	                                        configVarTwoModules.chpl 
	                                        configVarTwoModules.execopts 
	                                        configVarTwoModules.good 
Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarModStrings1.chpl 
	                                        configVarModStrings1.execopts 
	                                        configVarModStrings1.good 
	                                        configVarModStrings2.chpl 
	                                        configVarModStrings2.execopts 
	                                        configVarModStrings2.good 
	                                        configVarSetOver.chpl 
	                                        configVarSetOver.execopts 
	                                        configVarSetOver.good 
	                                        configVarSetTwoTypes.chpl 
	                                        configVarSetTwoTypes.execopts 
	                                        configVarSetTwoTypes.good 
	                                        configVarTwoModsNoneSpecified.chpl 
	                                        configVarTwoModsNoneSpecified.execopts 
	                                        configVarTwoModsNoneSpecified.good 

---------------------------------------------------------------------------

01/17/05 15:07:43 -- jplevyak

Log message:
	Put my notes under CVS.

Added files:
	chapel/doc/internal/: notes.callbacks notes.functioncalls 
	                      notes.generics_pointwise notes.todo 

---------------------------------------------------------------------------

01/17/05 15:19:44 -- jplevyak

Log message:
	Update notes.callbacks to include wrapper interfaces covering
	promotions.

Modified files:
	chapel/doc/internal/: notes.callbacks 

---------------------------------------------------------------------------

01/17/05 17:20:31 -- bradc

Log message:
	Continued working on parameter intents.  Got integers
	and records passed with various intents working except
	for the fact that FnCall::copy() causes a function to
	be unresolved (Steve and I are working on this issue).
	Thus, processParameters is still not enabled in
	passlist.h and intent-based tests still do not work,
	though we're closer.
	
	Some changes made to help this happen:
	
	* Fixed the parameter intent of the "this parameter" for
	ClassTypes (fixing the break I made in the broken code
	previously).  For records and unions, "this" is passed
	as an inout parameter; for classes, it is passed as a
	blank intent parameter (which we take to mean by reference).
	
	* Made Expr::copyListInternal() bail if it gets a nilExpr --
	previously it would try to copy the nilExpr.
	
	* Made Stmt:: and Expr::replace() no longer nil-out the
	next and prev pointers in the node.  This used to be done
	for cleanliness, but it tends to trim traversals and loops
	over the nodes unless they take pains to cache the values
	prior to calling replace().  We posit that the common case
	will be to continue the traversal/loop after the replace()
	has been performed, so leave them as-is.  (A sanity check
	that a node is still part of a list would therefore be to
	see if next->prev == this and prev->next == this).

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: cleanup.cpp processParameters.cpp 

---------------------------------------------------------------------------

01/17/05 22:04:19 -- jplevyak

Log message:
	Added:
	  Type *return_type_info(FnSymbol *fn)
	to analysis.h.  Should return the type of the return type
	of the function.  If you want a different interface, tell me.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

01/18/05 10:40:22 -- jplevyak

Log message:
	Interm checkin for default promotion feature.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/include/: pattern.h sym.h 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

01/18/05 11:31:22 -- deitz

Log message:
	Added new field 'Stmt* defPoint' to Symbols.  This field contains a
	pointer to the statement in which the symbol was defined.
	Fixup-verify makes sure that it is correct for every symbol.
	
	Changed how the index symbols are stored in ForallExpr.  Rather than
	being simply Symbols, they are now Stmts that must be VarDefStmts.
	Note that in the ForLoopStmts, this is not the case, they are symbols,
	but they should probably be Stmts there as well.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 

---------------------------------------------------------------------------

01/18/05 11:48:37 -- jplevyak

Log message:
	Tests for default promotion.

Added files:
	chapel/test/types/type_variables/jplevyak/: test_coerse2.chpl 
	                                            test_coerse2.good 

---------------------------------------------------------------------------

01/18/05 16:50:50 -- jplevyak

Log message:
	Fix SEGV in return_type_info

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/19/05 11:10:16 -- jplevyak

Log message:
	update as per recent discussions

Modified files:
	chapel/doc/internal/: notes.todo 

---------------------------------------------------------------------------

01/19/05 14:39:32 -- deitz

Log message:
	This is an up-for-air checkin.  It greatly increases the stability of
	copying things in the AST though more work is still needed.
	
	Added a new fixup verification called using fixup "hyper verify".
	This does the regular fixup "verify" but also copies and replaces
	every statement and expression in the AST.  The point of "hyper
	verify" is to catch bugs in copy, replace, and elsewhere.  I am
	finding it hugely useful.  Though I have a number of things left to
	fix (that are caught when "hyper verify" is used), this checkin fixes
	many things and is stable without the "hyper verify" pass.
	
	The copy interface is undergoing major changes.  These will be
	documented when they are finished.  The basic idea is to get copying
	working well either before or after analysis and when the symbols and
	types should or should not be copied.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h stmt.h symbol.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	chapel/test/functions/jplevyak/: intent-7-error.good 

---------------------------------------------------------------------------

01/19/05 16:15:05 -- bradc

Log message:
	Got parameter passing intents for integers working (finally!).
	Modified Steve's new copy() protocol so that when his clone
	flag is false, Variable Expr's Symbols are not changed into
	UnresolvedSymbols, but merely re-used as-is.  In my case, I
	just want to make a trivial copy of a Stmt without adding any
	new symbols or re-resolving anything, so this seems to be
	sufficient.
	
	Added a new helper function to the Symboltable --
	defineSingleVarDefStmtwhich -- which defines a single variable
	(for instance a compiler-introduced temporary) using a char*
	name rather than a Symbol, to remove a few steps in this
	common case.  The new variable is returned through a final
	parameter.
	
	Turned on the processParameters pass by default.
	
	Fixed the output for Steve's test_record_method2 test.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: processParameters.cpp 
	chapel/test/classes/deitz/: test_record_method2.good 

---------------------------------------------------------------------------

01/19/05 16:57:23 -- jplevyak

Log message:
	Interm checkin.
	
	1. Fixed a bug in ExprStmt::createFnCallStmt where the ->stmt
	   of the expression was not being set to the surrounding statement.
	   Since it was still nilStmt, this prevented the code which
	   determined which functions were in scope from working.
	
	2. Implemented function scoping during dispatch.  Prior to this
	   all functions were global.
	
	3. Added a great deal of support for cloning of types.
	   This code is not being called yet because the underlying AST
	   call is cloning the functions with the type and this is
	   causing problems.
	
	4. Added code in findUnknownTypes which is based on what Brad
	   was doing to show that the return_type_info call works.
	
	   Brad: you should remove this when you get the conflict :)

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp sym.cpp 
	chapel/compiler/include/: analysis.h baseAST.h sym.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	chapel/test/flowanalysis/newast/: domarr.good enum.good 
	                                  enumarray.good 
	                                  formatoutput.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

01/19/05 17:21:09 -- bradc

Log message:
	With John's help, made functions whose return
	types are undeclared work properly (to the
	extent that they've been tested).  All FnSymbols
	now have a retType field which indicates their
	return type, or dtUnknown if the user didn't
	specify one.  After analysis is run, it is
	queried for all functions whose retType is
	dtUnknown to fill in their return types.  This
	complements our ability to elide parameter
	types nicely and is an important step to
	getting the remaining intent tests working.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: cleanup.cpp findUnknownTypes.cpp 
	                             findUnknownTypes.h 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/test/functions/bradc/: inferReturn.chpl 
	                              inferReturn.future 
	                              inferReturn.good 

---------------------------------------------------------------------------

01/19/05 17:45:15 -- bradc

Log message:
	My earlier checkin today caused a regression that I'd
	forgotten about due to the way we codegen VarDeclStmts
	in two passes currently.  We've talked about splitting
	VarDeclStmts into two statements before C codegen --
	one to declare the variable and a second to initialize
	it.  For cases where a variable's initializer is a
	function call, this becomes more necessary, as the
	processParameters pass inserts a new statement block
	around the function call statement, and thereby
	pushes the original variable into an inappropriate scope.
	Doing this correctly will fix this problem (exercised
	in testAllScopes.chpl).
	
	Since this wasn't the original intent of
	testAllScopes.chpl, I rewrote it to not cause this
	bug, and commited a copy of the original test as
	a future test to serve as a placeholder for me
	to get this working.

Modified files:
	chapel/test/trivial/bradc/: testAllScopes.chpl 
Added files:
	chapel/test/trivial/bradc/: testAllScopes2.chpl 
	                            testAllScopes2.future 
	                            testAllScopes2.good 

---------------------------------------------------------------------------

01/20/05 12:02:38 -- bradc

Log message:
	Changed "this" to be passed as a new parameter intent
	(unavailable to the user) PARAM_REF, regardless of
	whether it is a class, a record, or a union.  Updated
	processParameters traversal to handle intents of type
	PARAM_REF, and removed futures for currently-working
	tests of parameter intents.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/traversals/: cleanup.cpp processParameters.cpp 
Removed files:
	chapel/test/classes/deitz/: test_record_method2.future 
	chapel/test/functions/bradc/: inferReturn.future intents.future 

---------------------------------------------------------------------------

01/20/05 13:14:38 -- deitz

Log message:
	Added a new compiler flag --devel that is to be used by Chapel
	developers.  When used, it gives the filename and line number in the
	compiler where the error happened and, for internal errors, gives the
	description.  The environment variable CHPL_DEVELOPER can be set to
	always use this flag.
	
	Updated start_test so that it doesn't look at CHPL_DEVELOPER.  Fixed a
	bug in sub_test in which concatenating compopts and execopts was done
	without an intermediary space.
	
	This should make debugging easier since we now print out the compiler
	line number on user errors, e.g., undefined symbols.
	
	For example, the error on arrays/deitz/test_basic1d2.chpl looks like
	
	  Internal error: LIN0056 chpl Version 0.2.640
	
	without the developer flag, but
	
	  [../include/link.h:56] Internal error: Unexpected type in getElements (test_basic1d2.chpl:7)
	
	with the developer flag.
	
	This checkin updates the errors printed out for tests that use
	USR_FATAL since I seem to have moved the filename after the error and
	printed out "Error".

Modified files:
	chapel/compiler/include/: driver.h misc.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: cleanup.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/: start_test sub_test 
	chapel/test/functions/jplevyak/: intent-7-error.good 
	chapel/test/modules/bradc/: nestedmodule.good 
	chapel/test/modules/bradc/manymodules/: manymodules.good 
	chapel/test/trivial/bradc/: redefinevar.good 
	chapel/test/trivial/bradc/entrypoint/: twomains.good 
	chapel/test/types/enum/deitz/: test_enum6.good 

---------------------------------------------------------------------------

01/20/05 16:29:19 -- deitz

Log message:
	Added a new Type subtype called VariableType.  These signal
	type-variables.  Thus a TypeSymbol t declared as "type t" has type
	VariableType.
	
	Added support for parsing type variables as formal parameters and
	elsewhere.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: fixup.cpp verifyASTType.cpp 

---------------------------------------------------------------------------

01/20/05 17:11:28 -- deitz

Log message:
	Added a test case that clones the four possibilities of calling a
	function with two parameters with strings and integers.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function_multiargs1.chpl 
	                                         test_clone_function_multiargs1.good 

---------------------------------------------------------------------------

01/21/05 10:55:27 -- deitz

Log message:
	Added a test that shows an error with declaring a string.  This simple
	test declares a string, initializes it in a different statement, and
	prints it out.
	
	John, this seems to fail in analysis.

Added files:
	chapel/test/trivial/deitz/: test_var_decl4.chpl 
	                            test_var_decl4.good 
	                            test_var_decl4.future 

---------------------------------------------------------------------------

01/21/05 11:01:30 -- deitz

Log message:
	Added support for declaring multiple parameters of the same type as in
	
	  function foo(x y : integer);
	
	If a comma were between x and y, y would have type integer and x would
	have no specified type.
	
	Updated variable definitions so that commas between variables
	following a var have their own types.  So
	
	  var x y : integer;
	
	declares two integer variables x and y.  If a comma were between x and
	y, y would have type integer and x would have no specified type.
	
	Fixed variable and function definitions in mg-seq and mg-seq-concrete.
	Added few test cases to look at space separated variables and
	parameters.
	
	This checkin fixes the mg-seq-concrete regression.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
Added files:
	chapel/test/trivial/deitz/: test_var_decl1.chpl 
	                            test_var_decl1.good 
	                            test_var_decl2.chpl 
	                            test_var_decl2.good 
	                            test_var_decl3.chpl 
	                            test_var_decl3.good 

---------------------------------------------------------------------------

01/21/05 11:08:38 -- deitz

Log message:
	Removed futures for test_overload_integerfloat3 and 4.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat3.future 
	                                         test_overload_integerfloat4.future 

---------------------------------------------------------------------------

01/21/05 15:29:53 -- shannon

Log message:
	Added a traversal that converts Chapel variable names that include a '?'
	to valid C Names.  (A variable name may not start with a question mark.)
	Filenames containing a '-' were also converted so they now generate
	legal C.  Added a few tests.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/symtab/: Makefile.share 
Added files:
	chapel/compiler/symtab/: legalizeCNames.cpp legalizeCNames.h 
	chapel/test/execflags/shannon/configs/: configVar-Dash.chpl 
	                                        configVar-Dash.execopts 
	                                        configVar-Dash.good 
	                                        varNameEnumQM.chpl 
	                                        varNameEnumQM.execopts 
	                                        varNameEnumQM.good 
	                                        varNameQMark.chpl 
	                                        varNameQMark.execopts 
	                                        varNameQMark.good 

---------------------------------------------------------------------------

01/21/05 15:52:36 -- jplevyak

Log message:
	This checkin adds a good deal of support for the
	combined wrapper/generics interface that I proposed.
	I know we have been going back and forth on it, but
	I did promise to checkin an example and here it is.
	It is being called for :
	
	test/types/type_variables/deitz/test_overload_integerfloat3
	test/types/type_variables/deitz/test_overload_integerfloat4
	
	where a wrapper is required to coerce an integer argument into a float.
	Currently this causes an assertion because the AST bit is stubbed out.
	
	Check out the notes in the .future.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h fun.h pattern.h 
	                          stmt.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat3.future 
	                                         test_overload_integerfloat4.future 

---------------------------------------------------------------------------

01/21/05 16:22:53 -- deitz

Log message:
	Removed the init expression for a variable from the VarDefStmt and put
	it in the VarSymbol.  It seems to make more sense here because it has
	little or nothing to do with the statement and everything to do with
	VarSymbol.  This is motivated by changing the ClassType which now
	stores a Stmt definition containing its variables, functions, and
	types, but which will eventually contain individual vectors of
	pointers to these symbols.
	
	Removed Stmt:: functions canLiveAtFileScope and topLevelExpr since
	these are not necessary.
	
	Added a new future test for bradc on intents since Shannon removed
	most of his other outstanding ones.  This test is called
	trivial/deitz/test_var_decl_init1.chpl that makes two function calls
	in the same statement.  (Their results are added together and
	returned.)  The bug seems to be coming from ProcessParameters.
	
	Added a couple of other tests for initialization on variables.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h symbol.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp 
	                             createConfigVarTable.cpp 
Added files:
	chapel/test/trivial/deitz/: test_var_decl_init1.chpl 
	                            test_var_decl_init1.future 
	                            test_var_decl_init1.good 
	                            test_var_decl_init2.chpl 
	                            test_var_decl_init2.good 
	                            test_var_decl_init3.chpl 
	                            test_var_decl_init3.good 

---------------------------------------------------------------------------

01/24/05 09:52:10 -- deitz

Log message:
	Changed FnDefStmt::build to use INT_FATAL instead of assert.
	
	Added one test of out parameters.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
Added files:
	chapel/test/functions/deitz/: .cvsignore 
	                              test_out_parameter1.chpl 
	                              test_out_parameter1.good 

---------------------------------------------------------------------------

01/24/05 10:14:02 -- bradc

Log message:
	Removed future indicators for intent tests that are
	now working.

Removed files:
	chapel/test/functions/jplevyak/: intent-1.future intent-2.future 
	                                 intent-3.future intent-4.future 
	                                 intent-9.future 

---------------------------------------------------------------------------

01/24/05 11:17:38 -- jplevyak

Log message:
	bug in cast of FnDefStmt

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/24/05 11:50:15 -- jplevyak

Log message:
	fixed trivial/deitz/test_var_decl4.chpl
	had to treat strings more like immediates and less like objects

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: ast.h 
Removed files:
	chapel/test/trivial/deitz/: test_var_decl4.future 

---------------------------------------------------------------------------

01/24/05 11:57:19 -- jplevyak

Log message:
	These two are now deitz/jplevyak since they require that cloning
	of types not clone all the member functions of the type, just
	the type proper.  If you uncomment #define CLONE 1 in clone.cpp
	it will make the call and then crash if the member functions are
	cloned.  If we need to change the interface or make a new call
	we need to decided what it is and implement it.  That is why
	I have assigned it to deitz/jplevyak.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1.future 
	                                         test_clone_class2.future 

---------------------------------------------------------------------------

01/24/05 12:08:55 -- jplevyak

Log message:
	Fix bug in HTML output which has suffered bit rot.

Modified files:
	chapel/compiler/backend/: dump.cpp 

---------------------------------------------------------------------------

01/24/05 14:04:31 -- jplevyak

Log message:
	Fix casting bug in coercion_substitutions calculationstitutions calculation

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/24/05 14:54:39 -- jplevyak

Log message:
	return_type_info() now correctly return dtVoid for those
	functions which do not return a value.
	
	In making this change, 2 regressions have occured, both
	of which I have make .future and assigned to Brad.
	
	   test/classes/deitz/test_class_with2.future
	   test/modules/bradc/manymodules/flatmodules.future
	
	The issue here is that we are trying to generate code for functions
	which are never used.  Analysis will tell you the types
	for functions which are called, but dtUnknown for things in functions which
	are never called.  I can tell you if a function is never called
	so that you can avoid generating code.
	
	I have added a new function to analysis.h:
	
	int function_is_used(FnSymbol *fn);
	
	for this purpose.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/test/classes/deitz/: test_class_with2.future 
	chapel/test/modules/bradc/manymodules/: flatmodules.future 

---------------------------------------------------------------------------

01/24/05 15:09:32 -- deitz

Log message:
	Initial interface support for wrappers for type coercions in function
	calls.  This creates the wrapper function through John's build call
	from analysis, but the body of the wrapper function is not correctly
	created yet.  Just its formals.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 

---------------------------------------------------------------------------

01/24/05 15:28:03 -- bradc

Log message:
	Squelched codegen of functions that are not used, as
	determined by John's new function_is_used() interface.
	
	Also, modified comments in passlist.h slightly for
	inclusion in the TAR whitepaper.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

01/24/05 15:32:42 -- bradc

Log message:
	Removed future tags for these tests, now fixed.
	
	Note that I'd prefer to restrict the .future tag
	for use on new files that have never worked, not
	as a way of making new regressions seem less bad.
	If we need a way of assigning regressions to
	specific people, I can implement one.  I didn't
	add it at the same time as futures out of laziness,
	and because to this point we've had few enough
	regressions and developers that it hasn't been
	difficult to keep track of which are in whose
	court.

Removed files:
	chapel/test/classes/deitz/: test_class_with2.future 
	chapel/test/modules/bradc/manymodules/: flatmodules.future 

---------------------------------------------------------------------------

01/24/05 16:09:02 -- deitz

Log message:
	Initial implementation of wrapper function for implicit type
	coercions in function calls.

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

01/24/05 16:29:56 -- jplevyak

Log message:
	Fixup the symbols after a ->build call (this was causing
	crashes for Steve during the test_overload_integerfloat3 test.
	Those tests now fail because of an unresolved call in the
	wrapper (which I think is to be expected at this point?).

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: pattern.h 

---------------------------------------------------------------------------

01/24/05 17:05:17 -- jplevyak

Log message:
	Temporary assert to prevent memory thrashing for this test case.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/25/05 11:18:38 -- jplevyak

Log message:
	Changed over from ::build to ::coercion_wrapper (the new seperate wrapper construction API)
	Added caching for coercion wrappers so they are only built once.
	The test cases now fail in a new place, I am going to continue
	working on this but perhaps Steve could take a look as well.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h stmt.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 

---------------------------------------------------------------------------

01/25/05 11:38:17 -- deitz

Log message:
	Fixed a bug in the coercion_wrapper function in which the temporary
	variable used to do the coercion assignment was not declared in a
	VarDefStmt.
	
	Need to go back with a broom through this procedure as I know it won't
	work if multiple variables need to be declared.  Also, some of the
	code can be modularized to make it even easier for us to build up new
	AST later.

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

01/25/05 12:44:58 -- deitz

Log message:
	Added a new top-level module called commonModule and an associated
	scope.  The new scoping scheme now looks like
	
	                     Intrinsic
	                     /       \
	                    /         \
	      Internal Prelude        Prelude
	                                 |
	                                 |
	                               Common
	                                / | \
	                               /  |  \
	                            User Modules
	
	The Intrinsic is defined within the compiler.  Internal Prelude and
	Prelude are defined in prelude files.  The things defined in Prelude
	are visible to the user, the things in Internal Prelude are not.
	
	Common is for things that we'll define on a program specific basis.
	These things will be codegened which is basically why it is
	distinguished from the prelude.
	
	Common is currently not used.  The output file _chpl_common.h is thus
	always empty.
	
	In the near term, Common will be used for creating array types where
	the base type of the array is something defined in the preludes or the
	intrinsic scope such as integers and also domain types.
	
	In general, the plan for declaring array types is to do so after the
	primitive type is declared.  We'll use name mangling and will
	determine if the array type was already declared by looking for the
	mangled name.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

01/25/05 15:03:50 -- deitz

Log message:
	Removed usage of clone_callback from the coercion wrapper creation
	routine.  Also cleaned it up a little; removed the assignment to the
	temp, folding that in to the initializer, and made the temp names a
	little more descriptive.  This cleans up the intermediate C code a
	bit.
	
	Made a superficial change to the ClassType constructor.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 

---------------------------------------------------------------------------

01/25/05 16:16:37 -- jplevyak

Log message:
	Implemented caching for the 3 wrappers and instantiation.
	Stubbed out the calls in stmt.h.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp if1.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h if1.h pattern.h 
	                          stmt.h 
	chapel/compiler/vparser/: parse_ast.h 

---------------------------------------------------------------------------

01/25/05 16:24:06 -- deitz

Log message:
	Removed futures for test_overload_integerfloat3,4

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat3.future 
	                                         test_overload_integerfloat4.future 

---------------------------------------------------------------------------

01/26/05 16:21:02 -- jplevyak

Log message:
	Add future test for function visibility

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
Added files:
	chapel/test/functions/jplevyak/scoping/: COMPOPTS scoping-1.chpl 
	                                         scoping-1.future 
	                                         scoping-1.good 

---------------------------------------------------------------------------

01/26/05 16:50:24 -- jplevyak

Log message:
	Store pre-wrap function in Fun.
	Export type diff/intersection/union/cannonicalize from fa.cpp
	Rebuild Match after wrappers/cloning.
	Cleanup unused variables in Fun.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/include/: fa.h fun.h 

---------------------------------------------------------------------------

01/27/05 10:35:13 -- deitz

Log message:
	Passed futures for these tests to John.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function1.future 
	                                         test_typevar_function2.future 

---------------------------------------------------------------------------

01/27/05 11:03:14 -- jplevyak

Log message:
	Terminate gracefully before IF1 translation if dead code elimination is
	turned off as the translation will fail.

Modified files:
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

01/27/05 11:40:08 -- jplevyak

Log message:
	Visible function calculation now treats all functions which
	are specialized with respect to a reference type (class) as
	being globally available (as per the spec).
	
	Currently 'Array' is considered to be a reference variable because it
	passes the test:
	
	  t->astType == TYPE_CLASS &&
	  !dynamic_cast<ClassType*>(t)->union_value &&
	  !dynamic_cast<ClassType*>(t)->value
	
	That is of the code in internal_prelude.  At some point when
	we model Array's better, this will have to be fixed.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h ast.h callbacks.h 

---------------------------------------------------------------------------

01/27/05 15:25:35 -- jplevyak

Log message:
	Map type symbols in IF1 conversion.  This causes the two test cases
	  test_typevar_function1.chpl
	  test_typevar_function2.chpl
	to make it through analysis up to codegen.  This is not a
	real implementation of type variables but rather an artifact
	of the simple test cases.  If someone working on codegen
	has nothing better to do, they could take a look a them, but
	otherwise hold off till instantiation is fully implemented.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/28/05 14:29:25 -- deitz

Log message:
	Major restructuring of the AST.
	
	Decoupled declarations from FnDefStmts, VarDefStmts, and TypeDefStmts.
	These are now declared when the scope is entered.  VarDefStmts are
	still used by codegen to initialize variables.  The other statements
	are NOOPS by the time we get to codegen.
	
	Added support for traversing the definitions of symbols to go
	alongside traversing the definitions of types.  This is necessary
	because we want to traverse the definition of VarSymbols and FnSymbols
	without necessarily traversing a VarDefStmt or a FnDefStmt.
	
	Unfortunately this checkin breaks support for methods and some support
	for arrays.  Hopefully John and I will get this working again soon.
	The problem is that the way analysis has to figure out what methods
	are where has changed.
	
	[Error matching compiler output for arrays/deitz/test_basic1d1]
	[Error matching compiler output for classes/deitz/test_class_with2]
	[Error matching compiler output for classes/deitz/test_method1]
	[Error matching compiler output for classes/deitz/test_method1a]
	[Error matching compiler output for classes/deitz/test_method2]
	[Error matching compiler output for classes/deitz/test_method3]
	[Error matching compiler output for classes/deitz/test_method4]
	[Error matching compiler output for classes/deitz/test_method5]
	[Error matching compiler output for classes/deitz/test_method6]
	[Error matching compiler output for classes/deitz/test_method7]
	[Error matching compiler output for classes/deitz/test_record_method1]
	[Error matching compiler output for classes/deitz/test_record_method2]
	[Error matching compiler output for classes/deitz/test_union_method1]
	[Error matching compiler output for classes/deitz/test_union_method2]
	[Error matching compiler output for classes/deitz/test_union_method3]
	[Error matching compiler output for flowanalysis/newast/domarr]
	[Error matching compiler output for flowanalysis/newast/enumarray]
	[Error matching compiler output for flowanalysis/newast/formatoutput]
	[Error matching compiler output for flowanalysis/newast/protoast_test]
	[Error matching compiler output for trivial/bradc/formatoutput]
	[Error matching compiler output for trivial/bradc/testAllScopes]
	[Error matching compiler output for trivial/bradc/domarr/domarr]
	[Error matching compiler output for trivial/bradc/domarr/enumarray]

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp nils.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h 
	                          symscope.h type.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             methodsToFunctions.cpp traversal.h 

---------------------------------------------------------------------------

01/28/05 16:02:00 -- deitz

Log message:
	Reverting from last checkin.  This puts the code back to the way I had
	it and eliminates the regressions.
	
	The reason to revert is that the fix was not trivial (like I thought
	it would be) and John didn't agree that I should checkin broken code.
	In retrospect, I'm not sure how I got it in my head that he did think
	it would be easy or that I should checkin broken.  Sorry about that.
	
	Hopefully we can work past this change in some way.  I'm concerned
	about the brittleness of the compiler as this change was mostly
	superficial but paved the way for better support.  Cloning and
	otherwise manipulating symbols directly.  And supporting bound and
	embedded functions without the unnecessary statements.
	
	SJD: To revert back, checkout at 15:45 on Friday Jan 28, 2005.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp nils.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h 
	                          symscope.h type.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             methodsToFunctions.cpp traversal.h 

---------------------------------------------------------------------------

01/31/05 13:40:44 -- jplevyak

Log message:
	Moved wrappers and instantiation to FnSymbol, moved from
	using FnDefStmt to FnSymbol as the basis for talking about
	a function in the AST within analysis.  Used FnSymbol::defPoint
	when a statement was needed to represent the entire function definition.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h sym.h symbol.h 

---------------------------------------------------------------------------

01/31/05 14:51:57 -- deitz

Log message:
	Basically a re-checkin of my big backed-out checkin.  Modest changes
	to keep methods working.
	
	Downgrades the idea of *DefStmt AST structures to be worked out
	eventually.
	
	Note that with this checkin, cloning of classes no longer copies the
	functions.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp nils.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h 
	                          symscope.h type.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             methodsToFunctions.cpp traversal.h 

---------------------------------------------------------------------------

01/31/05 15:13:20 -- jplevyak

Log message:
	Added support for simple type_variables in a form sufficien to handle
	test_typevar_function{1,2}.chpl to analysis.
	
	I have put a simple implementation of Type::instantiate_generic
	in place which is sufficient for this test case.
	I have also made a stub for FnSymbol::instantiate_generic
	which currently returns NULL.  This causes these
	two test cases to SEGV.  The implementation (which
	I am leaving to Steve) could be a modification
	of FnSymbol::clone() (or perhaps a call to a shared
	produced).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h symbol.h type.h 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function1.future 
	                                         test_typevar_function2.future 

---------------------------------------------------------------------------

01/31/05 16:18:46 -- deitz

Log message:
	Removed commented out versions of FnDefStmt::clone,etc.
	
	Removed unused currentFn in Symboltable since this was out-of-date and
	not used.
	
	Added commented out version FnSymbol::clone which doesn't work because
	analysis stores the type information of a cloned FnSymbol in its
	FnDefStmt.  Thus the cloned version must create a FnDefStmt even if it
	is ignored.  This has to do with the recent changes.
	
	I now see analysis's representation as being more tightly coupled to
	the high-level representation than I thought.  This explains much.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

01/31/05 18:08:44 -- jplevyak

Log message:
	Removed unused functions related to point-wise function application.
	Made is_function_used and return_type_info work with the
	"no analysis" flag.

Modified files:
	chapel/compiler/analysis/: TODO analysis.cpp fun.cpp inline.cpp 
	                           sym.cpp 
	chapel/compiler/include/: analysis.h fun.h sym.h 

---------------------------------------------------------------------------

01/31/05 18:49:03 -- jplevyak

Log message:
	IN intent parameters can be assigned in the function, but
	the assigned value does not propagate out of the function.

Added files:
	chapel/test/functions/jplevyak/: intent-6.chpl intent-6.good 
Removed files:
	chapel/test/functions/jplevyak/: intent-6-error.chpl 
	                                 intent-6-error.future 
	                                 intent-6-error.good 

---------------------------------------------------------------------------

02/01/05 10:34:49 -- deitz

Log message:
	Changed traversing of class component variables to traverse the
	definition of the VarSymbol rather than traverse the VarDefStmt and,
	via this, the definition of the VarSymbol.
	
	This coincidentally fixes one of the class-with-statement regressions.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

02/01/05 11:31:37 -- deitz

Log message:
	Added two support functions:
	
	void collect_symbols(Vec<Symbol*>* syms);
	void collect_functions(Vec<FnSymbol*>* functions);
	
	The first one collects all the symbols in the program.  The second one
	collects all the functions in the program.  The results are returned
	in a vector of symbol or function symbol pointers.
	
	Usage:
	
	 #include "../symtab/collectSymbols.h"
	 Vec<Symbol*> all_syms;
	 collect_symbols(&all_syms);
	
	 #include "../symtab/collectFunctions.h"
	 Vec<FnSymbol*> all_functions;
	 collect_functions(&all_functions);

Modified files:
	chapel/compiler/symtab/: Makefile.share 
Added files:
	chapel/compiler/symtab/: collectFunctions.cpp collectFunctions.h 
	                         collectSymbols.cpp collectSymbols.h 

---------------------------------------------------------------------------

02/01/05 13:01:45 -- jplevyak

Log message:
	Reorganized ASymbol so that it is now an interface object which points
	to a Sym instead of being a Sym.  This decreases the coupling between
	the AST and analysis and should simplify the interface.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp if1.cpp 
	                           sym.cpp 
	chapel/compiler/include/: analysis.h ast.h sym.h 
	chapel/compiler/vparser/: ast_cf.cpp parse_ast.cpp 

---------------------------------------------------------------------------

02/01/05 13:53:28 -- deitz

Log message:
	Added the following support function:
	
	void collect_symbols(Vec<Symbol*>* syms, FnSymbol* function);
	
	This function collects a vector of all the symbols defined inside the
	specified function.  Note the function symbol itself is not collected.
	
	Usage:
	
	 #include "../symtab/collectSymbols.h"
	 Vec<Symbol*> all_syms;
	 FnSymbol* function = ...;
	 collect_symbols(&all_syms, function);
	
	Added functionality to the relatively new symboltable traversal
	mechanism.  A traversal can now be run on a function.
	
	Added one small test case of functions with and without local
	variables and parameters.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/symtab/: collectSymbols.cpp collectSymbols.h 
	                         symtab.cpp symtabTraversal.cpp 
	                         symtabTraversal.h 
Added files:
	chapel/test/trivial/deitz/: test_a_few_functions.chpl 
	                            test_a_few_functions.good 

---------------------------------------------------------------------------

02/01/05 14:42:11 -- jplevyak

Log message:
	Cleanup mapping of types in analysis.cpp

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 
	                                  formatoutput.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

02/01/05 15:05:40 -- deitz

Log message:
	Added the following interface parameter to clone:
	
	  Map<BaseAST*,BaseAST*>* map
	
	This results in the following cloning interfaces:
	
	  TypeDefStmt* clone(CloneCallback* clone_callback, Map<BaseAST*,BaseAST*>* map);
	  FnSymbol* clone(CloneCallback* clone_callback, Map<BaseAST*,BaseAST*>* map);
	
	Currently, clone_callback is used by analysis but, with this checkin,
	map is ready to be used instead.  It contains a mapping of everything
	that was copied in the clone call.
	
	Souped up the copying mechanism to create a mapping between everything
	that is duplicated if the map parameter is not NULL.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h symbol.h type.h 

---------------------------------------------------------------------------

02/01/05 15:19:05 -- deitz

Log message:
	Forgot to clear the maps when clone is called.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 

---------------------------------------------------------------------------

02/01/05 16:19:12 -- bradc

Log message:
	Steve's recent checkins have fixed this future,
	saving me some work.

Removed files:
	chapel/test/trivial/bradc/: testAllScopes2.future 

---------------------------------------------------------------------------

02/01/05 16:58:24 -- deitz

Log message:
	Added the following support function (which may or may not be used):
	
	void collect_asts(Vec<BaseAST*>* asts, FnSymbol* function);
	
	USAGE:
	 Vec<BaseAST*> all_asts;
	 FnSymbol* function = ...;
	 collect_asts(&all_asts, function);
	
	This function returns the expressions and statements in the body of a
	function.
	
	Moved all collect_* functions to baseAST.h so that they are together
	and don't require funny includes.

Modified files:
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/symtab/: collectFunctions.cpp collectFunctions.h 
	                         collectSymbols.cpp collectSymbols.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: collectASTS.cpp collectASTS.h 

---------------------------------------------------------------------------

02/01/05 17:05:51 -- bradc

Log message:
	Added initial support for default values for parameters.
	There is still no support for named parameters, so this
	gives a C++-style default parameter mechanism at best.
	Since analysis doesn't yet know where to look for these
	default values, functions that rely on them will fail.
	
	Checked in two simple variations of my intents tests:
	One tries to elide parameters that have default values,
	which fails in analysis.  This is currently marked as a
	future test for John, though there may be more work for
	me down the road.  The second passes in arguments even
	though the default parameter values are there, which
	demonstrates that they are used to initialize an out
	parameter in this case.
	
	The processParameters pass has been updated to deal with
	default parameter values, but has not been tested
	extensively.
	
	* fixed John's safety nets for return_type_info and
	  function_is_used, which seem to have broken during
	  today's code shuffle.  Someone may want to check
	  that what I've done is reasonable.
	
	* added an Expr* init to ParamSymbol which stores its
	  default value if it has one
	
	* factored the setting of a ParenOpExpr's argument list
	  into a separate routine -- ParenOpExpr::setArgs -- so
	  that it can be re-set earlier
	
	* made a small change to legalizeCNames so that names
	  in the intrinsic scope (in particular dtUnknown) are
	  not renamed.
	
	* also checked in a test that exercises declaring
	  multiple parameters of the same type now that Steve's
	  implemented that in the parser.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: legalizeCNames.cpp symtab.cpp 
	chapel/compiler/traversals/: processParameters.cpp 
Added files:
	chapel/test/functions/bradc/: defaultParam.chpl 
	                              defaultParam.future 
	                              defaultParam.good 
	                              defaultParam2.chpl 
	                              defaultParam2.good 
	                              multipleParamsSameType.chpl 
	                              multipleParamsSameType.good 

---------------------------------------------------------------------------

02/02/05 08:50:18 -- jplevyak

Log message:
	Fix Vec::set_count() (variable name aliasing bug)

Modified files:
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

02/02/05 10:23:46 -- bradc

Log message:
	A small checkin to clean up my directory
	
	* added an automatic set of curly brackets in codegen-ing
	  functions' bodies to (a) handle the case when the function
	  body is not a compound statement, and (b) support local
	  variables with the same name as a formal parameter (in C
	  these conflict).
	
	* added a future test which tests some different variable
	  scoping rules.  This currently doesn't work due to the
	  fact that we don't initialize variables with their type's
	  default initializer at their declaration point.  This is
	  currently assigned to me and/or Steve.
	
	* removed the future mark from one of John's tests that
	  started working and seems like it ought to work.  I'm
	  not quite sure what fixed it.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
Added files:
	chapel/test/trivial/bradc/: vardecls.chpl vardecls.future 
	                            vardecls.good 
	chapel/test/types/complex/bradc/: .cvsignore 
Removed files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-1.future 

---------------------------------------------------------------------------

02/02/05 13:41:49 -- jplevyak

Log message:
	Fixed BlockHash's which were not using GC.

Modified files:
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

02/02/05 14:44:34 -- jplevyak

Log message:
	dded option to decrease memory usage by Sym(s) objects
	(currently disabled).
	
	Turns out that valgrind does not detect accesses outside the object
	in the heap when we use the Boehm GC.  This is a bit of a problem,
	and it makes detecting errors in this optimization difficult (hence
	the disabled status).  I am looking into that problem.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp cg.cpp clone.cpp 
	                           fa.cpp if1.cpp 
	chapel/compiler/include/: sym.h 

---------------------------------------------------------------------------

02/02/05 16:04:10 -- deitz

Log message:
	Added initial support for secondary methods, bound functions that are
	not embedded in a class.
	
	Beefed up the noanalysis flag so that class member accesses can now be
	resolved most of the time without analysis and so that functions that
	don't return anything don't require analysis to determine this.
	
	Added several test cases of secondary methods.  These are not
	supported in analysis yet.  And one of the tests still has problems
	without analysis.  Futures are set.
	
	Fixed collect_asts to call collect_symbols.  John: This is the code I
	sent you.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h symscope.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: cleanup.cpp collectASTS.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             methodsToFunctions.cpp 
	                             resolveSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_primary_method1.chpl 
	                            test_primary_method1.good 
	                            test_secondary_method1.chpl 
	                            test_secondary_method1.future 
	                            test_secondary_method1.good 
	                            test_secondary_method2.chpl 
	                            test_secondary_method2.future 
	                            test_secondary_method2.good 

---------------------------------------------------------------------------

02/03/05 08:11:59 -- jplevyak

Log message:
	"fixed" scoping-1.chpl so that it fails in the expected manner:
	<internal>:0: unresolved call 'main'
	<internal>:0: unresolved call '__init_internal_prelude'
	<internal>:0: unresolved call '__init_prelude'

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/03/05 10:22:32 -- jplevyak

Log message:
	Default parameters now implemented up to FnSymbol::default_wrapper.
	Shifted the future on the test to Steve.
	Added TRAVERSE(init, traversal, fails) to ParamSymbol::traverseDefSymbol
	Cleanup of ASymbol::xsymbol -> ASymbol::symbol.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: analysis.h callbacks.h symbol.h 
	chapel/test/functions/bradc/: defaultParam.future 

---------------------------------------------------------------------------

02/03/05 10:31:23 -- jplevyak

Log message:
	update the .future file to reflect what (I think) is the issue.

Modified files:
	chapel/test/classes/deitz/: test_secondary_method1.future 

---------------------------------------------------------------------------

02/03/05 16:57:03 -- deitz

Log message:
	Added the statement of declarations back to ClassType.  Renamed it
	declarationList instead of definition.
	
	Changed the storage of class variables, methods, and types to use
	vectors rather than the symbol links.  This was essential if we are
	going to keep the DefStmts.  I changed the names while doing this.
	The ClassType fields are now called fields (previously
	classVarSymbols), types (classTypeSymbols), primaryMethods
	(embeddedFnSymbols), and secondaryMethods (boundFnSymbols).
	
	Cleaned up how class types are handled in the compiler.  The
	addDeclarations procedure, previously addDefinition, now can be called
	multiple times to continue adding to a class.  This is used for
	with-statement resolution in classes.
	
	This checkin fixes the test_class_with2 regression and improves the
	stability of with in classes.  It is likely that withing a class that
	withs will now work even though I think it didn't before.  There are
	no tests of this.
	
	Removed future for test_secondary_method1.  Secondary methods now have
	stronger support though are still not complete.
	
	Backing down from removing the FnDefStmt, I think it is worth keeping
	around for the short-term and maybe even the long-term.  I do believe
	all of the DefStmts should become a single class (though will hold off
	on this change as it doesn't seem terribly important).
	
	I also believe we should now maintain the defPoint, maybe calling it
	defStmt, as a pointer from a symbol back to the statement where it was
	defined.  Note that this was only added by me a couple weeks ago, so
	this is still small.
	
	How the traversal will work is still in play though so it is essential
	to continue working on the interface between analysis and the
	compiler.

Modified files:
	chapel/compiler/AST/: nils.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp methodsToFunctions.cpp 
Added files:
	chapel/test/classes/deitz/: test_secondary_method3.chpl 
	                            test_secondary_method3.good 
Removed files:
	chapel/test/classes/deitz/: test_secondary_method1.future 

---------------------------------------------------------------------------

02/03/05 17:01:46 -- deitz

Log message:
	Made a minor change to future test_secondary_method2 so it now works.
	I was trying to initialize a variable in the class which is not yet
	supported:
	
	class foo {
	  var i : integer = 4;
	  ...
	}
	...

Modified files:
	chapel/test/classes/deitz/: test_secondary_method2.chpl 
Removed files:
	chapel/test/classes/deitz/: test_secondary_method2.future 

---------------------------------------------------------------------------

02/03/05 17:07:02 -- jplevyak

Log message:
	Checked in code which uses collect_asts (currently if-def'ed out
	till we decided how to handle Type(s)).
	Changed the order of precidence of type information in type_info.
	Tweak of collectAST to use Vec::append

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: collectASTS.cpp 

---------------------------------------------------------------------------

02/03/05 17:29:04 -- jplevyak

Log message:
	Cleanup of type cloning code.
	Still not enabled because TypeDefStmt::clone() is still cloning
	methods.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp sym.cpp 
	chapel/compiler/include/: analysis.h sym.h 

---------------------------------------------------------------------------

02/03/05 18:13:10 -- bradc

Log message:
	Blowing off steam after an afternoon of TAR work,
	and continuing in the ongoing struggle to remove
	my name from the future list... :)
	
	Added a new traversal to check the semantics of
	the program after analysis has run and we've
	incorporated its results into the AST.  Currently,
	the only thing that this pass checks for is
	assignment to constant expressions.  Added an
	isConst() method to the Expr and Symbol class
	hierarchies to help with this effort (and renamed
	the old isConst field to be isConstant to avoid
	conflicts).
	
	Known problems: blank parameter intents that
	should be interpreted as const are not classified
	correctly by the current isConst() implementation
	(a note to that effect was placed in
	ParamSymbol::isConst().

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/functions/jplevyak/: intent-5-error.good 
Added files:
	chapel/compiler/traversals/: checkSemantics.cpp checkSemantics.h 
	chapel/test/functions/jplevyak/scoping/: .cvsignore 

---------------------------------------------------------------------------

02/04/05 09:55:50 -- deitz

Log message:
	Added two more class cloning tests.  In one, a member of the same
	instance is assigned a float and an integer.  It becomes a float
	correctly.  In the other one, a class needs to be cloned because one
	instance treats a field as a string and the other as a float.

Added files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.chpl 
	                                         test_clone_class1a.good 
	                                         test_clone_class2a.chpl 
	                                         test_clone_class2a.future 
	                                         test_clone_class2a.good 

---------------------------------------------------------------------------

02/04/05 10:23:38 -- deitz

Log message:
	Cloning of classes no longer copies the methods, just the fields.  For
	methods, it creates a new FnDefStmt, but leaves the single FnSymbol.
	
	I expect problems down the road, after cloning is enabled, since I
	think we will try to code-generate the same function twice.  Need to
	think about this a little more.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

02/04/05 11:08:30 -- bradc

Log message:
	Removing future test marker.

Removed files:
	chapel/test/functions/jplevyak/: intent-5-error.future 

---------------------------------------------------------------------------

02/04/05 11:43:50 -- deitz

Log message:
	Unified primaryMethods and secondarMethods in ClassType to methods.
	Added a method_type field to FnSymbol that is either NON_METHOD,
	PRIMARY_METHOD, or SECONDARY_METHOD.  This change was suggested by
	John and makes sense since we'll treat these the same most, if not
	all, of the time.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/traversals/: cleanup.cpp methodsToFunctions.cpp 

---------------------------------------------------------------------------

02/04/05 12:11:42 -- bradc

Log message:
	Changed our write() implementation for floats so that
	floats with 0 fractional bits (e.g., 3.0) would be
	printed out as 3.0 rather than 3.  Updated test output
	to reflect this change.
	
	Some notes: in order to do this, I used a pointer
	comparison on the formatting string so that we
	could tell whether it was the default format (which
	we control so it makes sense to do this), or the user's
	format (in which case we should do what they request).
	Most of our formatting strings are stored as #defines,
	which makes the pointer compare impossible, though we
	wouldn't want a strcmp, because we'd want the user's
	"%g" to behave as a true C "%g".  Thus, I made the format
	for writing floats a char* variable rather than a #define.
	
	I didn't do this for all of the format strings because
	in other cases (particularly reading), we rely on the
	default format value to be a string literal so that we
	can glom two of them together when looking for errors.
	
	In retrospect, the correct way to go might be to pass
	in NULL as the format string if the user hasn't specified
	one, and store all the format strings as #defines, plugging
	the appropriate one in if a NULL is passed in.  This would
	make detection of the default trivial, and would allow us
	to keep using #defines for all format strings.  I didn't
	make this change at this time, though.

Modified files:
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/classes/deitz/: test_class_with1.good 
	                            test_class_with2.good 
	                            test_class_with3.good 
	                            test_method2.good test_record1.good 
	                            test_record_method1.good 
	                            test_record_method2.good 
	                            test_record_with1.good 
	chapel/test/trivial/bradc/: defaultinit.good 
	chapel/test/trivial/shannon/: exp.good readWriteUserType.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_overload_integerfloat1.good 
	                                         test_overload_integerfloat2.good 
	                                         test_overload_integerfloat3.good 
	                                         test_overload_integerfloat4.good 
	chapel/test/types/type_variables/jplevyak/: test_coerse1.good 
	                                            test_coerse2.good 
Added files:
	chapel/test/trivial/bradc/: declprintfloat.chpl 
	                            declprintfloat.good 
	                            defaultinit1a.chpl 
	                            defaultinit1a.future 
	                            defaultinit1a.good 

---------------------------------------------------------------------------

02/04/05 12:49:44 -- deitz

Log message:
	Changed test_clone_class1a to assign the float first and then the
	integer second.  If I'm right, this class has member of type float.
	The second assignment is an implicit coercion.

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.chpl 
	                                         test_clone_class1a.good 

---------------------------------------------------------------------------

02/04/05 13:14:06 -- deitz

Log message:
	Added former version of test test_clone_class1a as future test test_clone_class1b which is waiting for a compiler error.

Added files:
	chapel/test/types/type_variables/deitz/: test_clone_class1b.chpl 
	                                         test_clone_class1b.future 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

02/04/05 13:46:13 -- deitz

Log message:
	Added future to test_clone_class1a and an error message

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1a.future 

---------------------------------------------------------------------------

02/04/05 16:02:57 -- deitz

Log message:
	Cloning of classes no longer clones functions.  It mangles the name of
	the class.  It builds a new constructor.
	
	Issues for when analysis calls clone:
	
	-When analysis clones methods, we're going to have to be able to
	insert these methods into the class.
	
	-We need to handle the "this" pointer.  We need to make it possible to
	call methods that were not cloned with "this" from the cloned class.
	We need to make sure the common variables are at the top of the class.
	
	-It may be best to handle this via inheritance.
	
	Question. Can you override fields using implements or are they hidden
	as in Java?
	
	If we need to clone a class should we do it twice so that we can use
	inheritance without overriding?

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: methodsToFunctions.cpp 

---------------------------------------------------------------------------

02/07/05 08:29:46 -- jplevyak

Log message:
	Fix bug in Class cloning.  It now seems to work up to codegen.
	
	To turn it ON, uncomment #define CLONE at the top of analysis/clone.cpp
	
	This causes:
	
	[Error matching compiler output for classes/deitz/test_union1]
	[Error matching compiler output for classes/deitz/test_union2]
	[Error matching compiler output for classes/deitz/test_union3]
	[Error matching compiler output for classes/deitz/test_union4]
	[Error matching compiler output for classes/deitz/test_union_method1]
	[Error matching compiler output for classes/deitz/test_union_method2]
	[Error matching compiler output for classes/deitz/test_union_method3]
	[Error matching compiler output for classes/jplevyak/record_type_hierarchy-1]
	
	I have not investigated yet why (I am working on it), so
	I have left #define CLONE commented out, but if anyone else is
	interested feel free to take a look.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/07/05 10:10:43 -- jplevyak

Log message:
	Fix SEGV in test_typevar_function1.chpl, expected all formals to
	be ParamSymbols.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/07/05 10:23:13 -- jplevyak

Log message:
	Sum Type support checkin.
	
	1. Added basic SumType class in type.h and type.cpp patterned after
	   TupleType.
	
	2. modified enumarray.chpl to cast before indexing:
	   writeln("probSize(", i:classVals, ") = ", ("%3d", probSize(i:classVals)));
	                                                              ^^^^^^^^^^^
	since the domain of probSize is integer... is this correct/necessary?
	
	3. Added Vec::first() to vec.h
	
	4. added comapr_baseasts to permit qsort to be used over all BaseASTs::id
	
	5. added find_or_make_sum_type to type.h  look in type.cpp for
	   a block of comments describing the issue of making sure that
	   sum types are treated structurally (the same type when summed over
	   the same types).
	
	6. Fixed some issues handling enums in flow analysis and cloning

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: analysis.h baseAST.h callbacks.h 
	                          clone.h fa.h type.h vec.h 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/newast/: enumarray.chpl enumarray.good 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 

---------------------------------------------------------------------------

02/07/05 10:44:11 -- jplevyak

Log message:
	Type cloning now enabled by default.  All the old test cases work,
	new ones fail in new and interesting ways :)

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

02/07/05 15:30:23 -- deitz

Log message:
	Initial implementation of FnSymbol::instantiate_generic.  The
	functions appear to be instantiated but they are not code generated.
	Not sure why unless it is later marked as never used.
	
	Added two traversals to remove type variables after analysis has run
	and presumably called FnSymbol::instantiate_generic.  These traversals
	remove the type variables as formals and actuals in expressions.
	
	This initial implementation piggybacks on clone.  The function is
	first cloned.  Then the type variable types in the cloned function are
	changed to real types based on the instantiation.
	
	Note.  Since the cloned function potentially clones the types (for
	parameters for example), the map that clone returns of all copied
	AST's is traversed in order to find all the types that need to change.
	How robust is this? will have to be answered.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	                             findUnknownTypes.h 

---------------------------------------------------------------------------

02/07/05 15:38:49 -- deitz

Log message:
	Fixed a small bug in which functions having the same name (overloaded,
	cloned or instantiated functions) may not be code generated if any of
	the functions were marked as unused.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

02/07/05 15:46:10 -- jplevyak

Log message:
	1) #ifdef'd out the code in ResolveEasy::preProcessExprs
	  at Steve's suggestion, I don't think this is necessary any more
	2) changed MemberAccess::codegen to just use member->name as the
	   struct field since MemberAccess::member is not being updated
	   and doesn't have an analogous bit of data in the low level intermediate form,
	   so it isn't clear how it might be updated (at least to me).
	3) in resolve_symbols() handle the special case where the
	   Stmt::parentSymbol points to a module instead of a function
	   ... this is kind of lame, perhaps we should have a member
	   parentFunction() which returns the parent function even for
	   modules.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: cleanup.cpp 

---------------------------------------------------------------------------

02/07/05 17:28:54 -- jplevyak

Log message:
	Bug fix handling of code in module init functions.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/08/05 10:32:14 -- deitz

Log message:
	Removed ResolveEasy traversal from Cleanup.  This used to resolve
	MemberAccess expressions where the type of the base expression was
	known.  It is not necessary as this is resolved after analysis.
	
	Fixed a small bug in the ResolveSymbols traversal.  It used a
	preprocess function rather than a postprocess function.  The
	postprocess functions are preferred for traversals that modify the
	AST.  What was happening in this case was that the expression being
	traversed was replaced in the preprocess.  Then the old expression was
	traversed deeply.  By putting it in the postprocess, the expression is
	traversed deeply and then replaced.  This was a problem because some
	other modification was done in the deeper traversal but was done on
	the old AST and thus lost.
	
	Removed John's quick-fix change to codegening MemberAccess expressions
	(just print out member->name) back to calling codegen on it
	(member->codegen()).

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: cleanup.cpp resolveSymbols.cpp 
	                             resolveSymbols.h 

---------------------------------------------------------------------------

02/08/05 14:30:08 -- jplevyak

Log message:
	Added a pass to determine when a variable is inferred to be of
	mixed primitive types (e.g. float + integer).
	Fixed the test cases to show the correct error messages.
	Remove 2 .future files for the test cases.
	Integrated fa_extras.cpp and ssu_extras.cpp.
	  Turns out that GDB 6.3 doesn't have problems with #includes of code....
	  but for those stuck with 6.1, this should fix the problem.

Modified files:
	chapel/compiler/analysis/: fa.cpp ssu.cpp 
	chapel/compiler/include/: fa.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Removed files:
	chapel/compiler/analysis/: fa_extras.cpp ssu_extra.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1a.future 
	                                         test_clone_class1b.future 

---------------------------------------------------------------------------

02/09/05 11:40:06 -- jplevyak

Log message:
	Fixed the way argument types are filtered as the actuals are passed to the
	formals.  The old technique used a single filter at the head of the function.
	This could result in some values being permitted which should not have been
	be permitted:
	
	function f(x, y) ... // f1
	function f(x:A, y:A) .. // f2
	
	var a = A();
	var b = B();
	var c = ... ? then A() : B();
	
	f(a,c); // c1
	f(b,c); // c2
	
	Here in the old technique, c2 would have cause the single
	filter on f1.y to permit both A's and B's so that the call
	c1 would pass both values to f1.  In the new technique all
	the filters are independent, so that c1 correctly passes
	only the x : { A }, y : { B } types to f1 instead of
	x : { A }, y : { A, B } which includes the combination
	x : { A }, y : { A } which is handled by f2.

Modified files:
	chapel/compiler/analysis/: fa.cpp fun.cpp pattern.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: fa.h fun.h var.h 
	chapel/test/flowanalysis/jplevyak/: cs1.good 

---------------------------------------------------------------------------

02/09/05 12:04:15 -- deitz

Log message:
	Added initial support for generalized arrays and domains.  Arrays and
	domains are supported currently up to rank three but can easily be
	extended to any rank with few changes---additional access macros in
	the array macros runtime header and additional "this" functions in the
	internal prelude.
	
	Added a pass to InsertAnonymousTypes.  This handles array and domain
	types put on variables.  Given
	  var D : domain(1) = 1..n;
	  var A : [D] integer;
	It puts the following in commonModule for use by any modules.
	  type _domain_1d = domain(1);
	  type _array_integer_1d = [D] integer;
	It does this when the array's type is a primitive.  If the array type
	is defined by the programmer, the array type declaration follows that
	declaration.
	
	Note that the type of D is part of the type of _array_integer_1d even
	though D is not.
	
	Removed functionality of 2D arrays of floats and 1D arrays of integers
	and 1D and 2D domains from the runtime files.  These are now generated
	in the compiler.
	
	Added a test case for 3D array of integers.  Currently, arrays do not
	seem to work if the elements are assigned values other than zero.
	
	The flowanalysis tests changed because of the change to the internal
	prelude and because array and domain types are now in the compiler.
	They have associated type symbols with real names.
	
	There is a fair amount of cleanup and generalization work left to do
	but this checkin constitutes a significant portion of array/domain
	support.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: files.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/include/: array.h chplio.h domain.h forall.h 
	chapel/runtime/src/: chplio.c domain.c 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertAnonymousTypes.h 
	chapel/test/arrays/deitz/: test_array_integer_3d.chpl 
	                           test_array_integer_3d.good 

---------------------------------------------------------------------------

02/09/05 12:20:53 -- jplevyak

Log message:
	Fix handling of constants: constants were requiring coersion wrappers.
	Changed .v test cases so that they would not result in boxing (to be like Chapel).

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/jplevyak/: classvar.good classvar.v 
	                                    tuples.good tuples.v 
	chapel/test/parsing/jplevyak/: tuples.good tuples.v 

---------------------------------------------------------------------------

02/09/05 12:45:00 -- deitz

Log message:
	Fixed a bug in arrays of higher dimensions having trouble storing
	their values that I introduced in the last checkin.
	
	Added a test case that stores values other than zero in an array.
	Unfortunately this test case fails in analysis (future for John)
	because the index variables used in the forall expression are added
	and assigned to the array of integers.  Can the index type be treated
	symmetrically to integers?

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: array.h 
Added files:
	chapel/test/arrays/deitz/: test_array_integer_2d.chpl 
	                           test_array_integer_2d.future 
	                           test_array_integer_2d.good 

---------------------------------------------------------------------------

02/09/05 15:13:50 -- bradc

Log message:
	This is a minor cleanup from my last checkin, to make sure
	that I haven't broken the logging/mailing hooks in CVSROOT.

Modified files:
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

02/09/05 16:49:51 -- jplevyak

Log message:
	Fix test case test/arrays/deitz/test_array_integer_2d.chpl
	Need to generalize handling of forall loops over tuples of indices.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: sym.h 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_integer_2d.future 

---------------------------------------------------------------------------

02/10/05 10:57:49 -- deitz

Log message:
	Added Jacobi computation to test suite.
	
	Removed futures for function type variable tests.

Added files:
	chapel/test/arrays/deitz/: jacobi.chpl jacobi.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function1.future 
	                                         test_typevar_function2.future 

---------------------------------------------------------------------------

02/10/05 11:11:53 -- jplevyak

Log message:
	Use the FnSymbol as the function to be called by an  EXPR_FNCALL/EXPR_PARENOP
	if it is available.  Update the test cases accordingly.  Fix issue with
	hard coded functions in low level code generation.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

02/10/05 17:17:37 -- deitz

Log message:
	Added a field parentType to the Type class.  This field will store a
	subtype relationship for a Type; The Type is a subtype of its
	parentType.  This field is currently the nilType in all cases.
	
	Added two tuple future tests.  Failing in analysis and beyond
	analysis.
	
	Improved parser support for tuples.  They can now be used on the left
	hand side of assignment statements.  This resulted in the following
	two changes to the Spec.
	
	1. The statement in a function definition must be one of the following:
	  A compound statement ({ ... })
	  An empty statement (;)
	  A conditional statement (if ...)
	  A for, forall, or while loop (for ..., forall ..., while ..., do ...)
	  A call statement (call ...)
	  A return statement (return ...)
	
	Rationale. I originally made it just a block statement to get around
	the parser ambiguities.  David suggested it could also be a return
	statement.  I added the rest (at least in the implementation for now).
	
	The ambiguity stems from starting assignment statements with tuples
	clashing with the return type (domains and indexes) of the function:
	  function foo() : domain(expr);
	  function foo() : domain(i,j) = (k,l);
	Types that can be qualified by expressions clash with the tuples
	starting the next statement in one-lookahead parsers.
	
	2. The while-, for-, forall-, and if-statements now require a "do" or
	"then" to avoid using curly brackets around the bodies of the loops or
	the conditional "then" clause.
	
	The ambiguity can be seen in the example
	  while foo(a,b) = (j,k);
	Is foo a function call with actuals a and b or a boolean with a tuple
	assignment as the body.  Of course, again, we know the answer, but
	we're using a one-lookahead parser.
	
	Changed test cases to reflect language changes.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/test/arrays/deitz/: .cvsignore 
	chapel/test/classes/jplevyak/: .cvsignore 
	chapel/test/execflags/shannon/configs/: .cvsignore 
	chapel/test/flowanalysis/newast/: compSampler.chpl 
	                                  conditional.chpl 
	                                  danglingelse.chpl domarr.chpl 
	                                  domarr.good 
	                                  multiple_return.chpl noop.chpl 
	                                  noop.good whileLoop.chpl 
	chapel/test/functions/jplevyak/scoping/: .cvsignore 
	chapel/test/trivial/bradc/: conditional.chpl danglingelse.chpl 
	                            noop.chpl 
	chapel/test/trivial/bradc/domarr/: domarr.chpl 
	chapel/test/trivial/deitz/: test_if_else.chpl 
	                            test_if_then_else.chpl 
	chapel/test/trivial/shannon/: whileLoop.chpl 
Added files:
	chapel/test/types/tuple/deitz/: .cvsignore 
	                                test_tuple_simple1.chpl 
	                                test_tuple_simple1.future 
	                                test_tuple_simple1.good 
	                                test_tuple_simple2.chpl 
	                                test_tuple_simple2.future 
	                                test_tuple_simple2.good 

---------------------------------------------------------------------------

02/11/05 09:59:45 -- deitz

Log message:
	Added a flag --ignore_errors which lets the compiler attempt to
	continue past all errors, including internal errors.  This is useful
	for development.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

02/11/05 11:07:05 -- shannon

Log message:
	Refactored the code that legalizes C names.

Modified files:
	chapel/compiler/symtab/: legalizeCNames.cpp 

---------------------------------------------------------------------------

02/11/05 16:29:49 -- deitz

Log message:
	Improved the ignore_errors flag.  It now only applies to INT_FATAL and
	USR_FATAL.  It no longer causes infinitely many seg faults.

Modified files:
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

02/11/05 16:44:09 -- deitz

Log message:
	Implemented limited and initial but moderately robust support for
	tuples from parsing to code generation with the --noanalysis flag.
	Passed the futures for three of the five tuple tests to John.  The
	remaining two do not work because variable initialization is not
	turned into assignment statements before tuple assignment statements
	are turned into multiple assignment statements of tuple indexing
	expressions.
	
	Added a new Expr called TupleSelect.  This corresponds to indexing
	into Tuples.  Currently, the indexing must be done with IntLiterals.
	Like the ArrayRef and the FnCall, the TupleSelect derives from
	ParenOpExpr.  Unlike other ParenOpExprs however, the argList on the
	TupleSelect should only contain a single index expression.
	
	Added two general utilities to ILink.  The method length() returns the
	number of ILinks in a list of ILinks starting from it inclusive.  The
	method get(int i) returns the ith ILink where the first one is
	numbered as one.
	
	Made the InsertAnonymousTypes traversal handle anonymous tuple types.
	Added support for generating code for tuple type definitions.
	
	Added a new traversal pass DestructureTupleAssignments to turn single
	assignments of Tuple expressions to multiple assignments of
	TupleSelect expressions.
	
	Unrelated, moved the mangling of method names out of
	MethodsToFunctions (post-analysis) and into InsertThis (pre-analysis).
	This has little impact since the name mangling only changes the cname
	(the name to be generated).  It is a step in the right direction for
	class cloning which I did at some point.
	
	Added three more tuple tests, two of which work.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share cleanup.cpp 
	                             insertAnonymousTypes.cpp 
	                             methodsToFunctions.cpp 
	                             methodsToFunctions.h 
	                             verifyASTType.cpp 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.chpl 
	                                test_tuple_simple1.good 
	                                test_tuple_simple2.chpl 
	                                test_tuple_simple2.future 
Added files:
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 
	                             destructureTupleAssignments.h 
	chapel/test/types/tuple/deitz/: COMPOPTS test_tuple_simple3.chpl 
	                                test_tuple_simple3.future 
	                                test_tuple_simple3.good 
	                                test_tuple_simple4.chpl 
	                                test_tuple_simple4.future 
	                                test_tuple_simple4.good 
	                                test_tuple_simple5.chpl 
	                                test_tuple_simple5.future 
	                                test_tuple_simple5.good 

---------------------------------------------------------------------------

02/11/05 16:50:23 -- deitz

Log message:
	Added --noanalysis flag temporarily to test/types/tuple/deitz/ making
	three future tests pass (but not for real).
	
	Fixed good for test_tuple_simple2.

Modified files:
	chapel/test/types/tuple/deitz/: COMPOPTS test_tuple_simple2.good 

---------------------------------------------------------------------------

02/14/05 10:12:40 -- deitz

Log message:
	Started implementing "Type* find_or_make_sum_type(Vec<Type*>* types)"
	which works but currently always makes a new sum type, never looking
	to see if it already created it.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

02/14/05 15:38:55 -- deitz

Log message:
	Added a new traversal pass InsertVariableInitializations which inserts
	up to two assignment statements for every variable declaration
	statement.  It inserts a statement at the top of the variable's scope
	that initializes it to the default value of its type.  It inserts a
	statement at the place it is declared to initialize it to whatever the
	user may initialize it too.  Eventually, dead assignment elimination
	could help with excess computation.
	
	Added default values to tuple types.
	
	Added a couple of more error checks to DestructureTupleAssignments.
	
	Removed Stmt::codegenVarDefs, Stmt::codegenVarDef, and
	VarDefStmt::codegenVarDef since it is not used.  It wasn't used before
	this checkin.
	
	Removed code for handling initialization of variables within codegen
	except for variables that are domains, arrays, or config.
	
	Fixed a couple bugs in which the stmtContexts for scopes were not
	created when block statements were copied and new coercion wrapper
	functions were created.
	
	Fixed good for defaultinit1a.  Removed futures for defaultinit1a and
	vardecls.  Passed futures for test_tuple_simple1 and
	test_tuple_simple4 to John.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: stmt.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share cleanup.cpp 
	                             destructureTupleAssignments.cpp 
	chapel/test/trivial/bradc/: defaultinit1a.good 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple4.future 
Added files:
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	                             insertVariableInitializations.h 
Removed files:
	chapel/test/trivial/bradc/: defaultinit1a.future vardecls.future 

---------------------------------------------------------------------------

02/14/05 15:55:13 -- deitz

Log message:
	Added a few strange declaration test cases (all working):
	
	  var x : integer = y;
	  var y : integer = x;
	---
	  var x = y;
	  var y = 3.0;
	---
	  x = 12.0;
	  var x = y;
	  var y = x;

Added files:
	chapel/test/trivial/deitz/: test_var_decl_strange1.chpl 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.chpl 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.chpl 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.chpl 
	                            test_var_decl_strange4.good 

---------------------------------------------------------------------------

02/15/05 13:04:28 -- deitz

Log message:
	Removed special-case code for initializing config variables and
	variables of array or domain types.  Instead of assignments, it uses
	function calls (runtime macros) and conditional assignments to
	initialize these variables.
	
	VarDefStmt::codegen() does nothing now.  The pre-codegen pass
	InsertVariableInitializations now removes VarDefStmts.
	
	Added a new test case to test using a config var before it is declared.
	
	Removed Type:: and ArrayType:: needsInit and generateInit.
	
	Made the CreateConfigVarTable traversal traverse the symboltable
	instead of the AST since it is just collecting variables.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/symtab/: symtabTraversal.cpp 
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	                             insertVariableInitializations.cpp 
	                             traversal.cpp 
	chapel/runtime/include/: config.h 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/test/trivial/deitz/: test_config_use_before_decl.chpl 
	                            test_config_use_before_decl.good 

---------------------------------------------------------------------------

02/15/05 13:14:10 -- deitz

Log message:
	Eliminated dead runtime code based on my changes to generalize arrays
	and domains.

Modified files:
	chapel/runtime/include/: array.h chplio.h domain.h 
	chapel/runtime/src/: array.c domain.c 

---------------------------------------------------------------------------

02/15/05 14:56:00 -- deitz

Log message:
	Made ForallExpr store indices as Symbol* rather than Stmt* of
	VarDefStmts.  This gets rid of the Stmts in Exprs.  Made defPoint in
	Symbol point to BaseAST rather than Stmt since it may point to either
	an Expr or a Stmt now.
	
	Made Fixup-verify once again check to make sure that all defPoints are
	correct.
	
	In coping with this change, modified analysis to see whether the
	defPoint is an Expr or a Stmt before grabbing the ainfo.  This is a
	tad verbose but seems necessary.  The other option is to put ainfo and
	asymbol in BaseAST and have them only active for Expr/Stmt and
	Symbol/Type respectively.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

02/16/05 11:15:37 -- shannon

Log message:
	Added wrappers to the memory functions malloc, calloc,
	realloc, and free.  At present the only benefit is error
	checking with hopefully descriptive error messages,
	but we have great plans for these functions in the future.
	
	The arguments to _chpl_malloc, _chpl_calloc, and _chpl_realloc
	differ from the originals.  Instead of being passed the size
	of the entire chunk of memory being requested they take the
	number of elements and then the size of the element.
	_chpl_malloc and _chpl_calloc also take a string which
	is a description of the type of memory requested.
	
	Example:
	--------
	  arr.base = (elemtype*)_chpl_malloc(arr.size, sizeof(elemtype), "array")
	
	Corresponding error message:
	----------------------------
	  ***Error:  Out of memory allocating array***

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: array.h stdchpl.h 
	chapel/runtime/src/: Makefile arg.c chplio.c chpltypes.c 
	                     config.c main.c 
Added files:
	chapel/runtime/include/: chplmem.h chplrt.h 
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

02/16/05 14:48:40 -- deitz

Log message:
	Added robust support for let expressions from parsing to code
	generation.
	
	Added a new traversal TransformLetExprs that hoists let expressions
	into compound statements.  This traversal is called before analysis,
	thus analysis need not even know let expressions exist.  I think we
	may want to call this traversal again later if we can use let
	expressions to make optimizations easier.
	
	Though multiple let expressions in the same statement and nested let
	expressions work correctly, there is one case that is not handled
	correctly (depending on the language definition):
	   function foo(i : integer) : integer) {
	     i += 1;
	     return i;
	   }
	   writeln(foo(a) - let b = foo(a) in b)
	If we are evaluating expressions left to right, this should output -1,
	but it outputs 1.  The reason for this is that we move the let
	expression into a compound statement outside the whole statement.
	Thus the second foo is evaluated before the first foo, reading left to
	right.
	
	Added a future test, test_let8, to capture this problem.
	
	Added 7 new test cases pertaining to let expressions that work:
	... 128.0 * let x:float = a*b, y = x*x in 1.0/y ...
	... let x = a*a in x*x ...
	... let x = a*a in x*x ... let y = a+a in y*y ...
	... let x = a*a in x*x ... let x = a+a in x*x ...
	... let x : integer = a*a in x*x ... let x : integer = a+a in x*x ...
	... let x : integer = a*a in x*x ...
	... let x = a * b * c in let y = a * b in x * y ...
	
	Patched a bug encountered in analysis in which the parentSymbol was
	incorrectly set to the module rather than the initFn.  Added a test
	case, test_block_call, to guard for this.
	
	Updated setDefPoint to take a BaseAST rather than a Stmt since
	sometimes it will be called with an Expr.  For example, ForallExpr and
	LetExpr.
	
	To Do:
	
	1. Improve copy resolution.  When copying statements or expressions
	that enter scopes, the symbols are copied.  For example, when copying
	the compound statement given by
	
		{
		  var x = 12;
		  writeln(x);
		}
	
	the symbol x is copied.  If copy did not re-resolve the symbols, the
	copied compound statement's argument to writeln would refer to the
	symbol in the old block statement, a potential problem in all but the
	simplest of cases.
	
	The old copy resolution worked by calling cleanup's resolveSymbols
	traversal.  This is overly complicated and easily broken.  For
	example, if the name of the symbol that is copied is changed it can't
	be re-resolved.
	
	The new copy resolution (future work) will use copy's Map argument to
	replace uses of a symbol in the copied compound statement with the
	copied symbols.  The advantages are numerous when we start doing more
	complicated things.  Even now, it is advantageous because we do not
	have to special-case the resolution depending on whether we are before
	or after analysis.
	
	2. Add a new argument to copy (default NULL) that is a Vec of BaseAST
	pointers.  These will be updated by the copy if they are copied.  So,
	for example, the Vec may contain a bunch of LetExprs that were found
	and will be transformed.  Then whenever anything is copied, the
	LetExprs should be updated accordingly.  This is currently done by
	hand at the call-site to copy but is general enough that it should be
	moved inside.
	
	3. Add a preProcess and postProcess method to the Traversal class that
	is called when atTop is true.  This will be very useful for traversals
	that first collect information and then do transformations.  They can
	do the transformations on the postProcess method.  The advantage to
	not overloading run() (how it is done currently) is that the traversal
	can be called on a subsection of the AST and it will still work.
	
	4. Fix parentSymbol fixup.  The parentSymbols are not always being set
	up correctly.  In particular, functions that are nested in a scope
	inside the module and not in a function, have the wrong parentSymbol.
	This should be set to the initFn when this is put in.  I made a cheapo
	fix in analysis.cpp until this is working.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symbol.h symscope.h 
	                          symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share fixup.cpp 
	                             traversal.cpp verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: transformLetExprs.cpp 
	                             transformLetExprs.h 
	chapel/test/trivial/deitz/: test_block_call.chpl 
	                            test_block_call.good test_let1.chpl 
	                            test_let1.good test_let2.chpl 
	                            test_let2.good test_let3.chpl 
	                            test_let3.good test_let4.chpl 
	                            test_let4.good test_let5.chpl 
	                            test_let5.good test_let6.chpl 
	                            test_let6.good test_let7.chpl 
	                            test_let7.good test_let8.chpl 
	                            test_let8.future test_let8.good 

---------------------------------------------------------------------------

02/17/05 11:42:02 -- deitz

Log message:
	Added support for forall statements using the forall expression syntax
	as in "[i in D] A(i) = B(i)."  This fixes three future array tests
	(with some modifications requiring indices).

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/arrays/deitz/: test_basic1d2.chpl test_basic1d3.chpl 
	                           test_basic1d4.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Removed files:
	chapel/test/arrays/deitz/: test_basic1d2.future 
	                           test_basic1d3.future 
	                           test_basic1d4.future 

---------------------------------------------------------------------------

02/17/05 13:45:50 -- deitz

Log message:
	Improved copy resolution.  (2/16 TO DO #1) This checkin changes the
	way in which copied symbols are re-resolved after copy is called.
	
	At the end of copy, when called on an Expr or Stmt, a new traversal
	called UpdateSymbols runs through the new Expr or Stmt, replacing
	Variable references to old symbols with variable references to the new
	symbols (if the symbol was copied).
	
	In support of this, copying of Variable expressions no longer make its
	symbol unresolved.  They keep the symbol the same.
	
	This new way of handling copying things like block statements (things
	that need their scopes copied) is much more sane.
	
	Removed functions call_cleanup and call_cleanup_ls which used to be
	called by copy.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/traversals/: Makefile.share cleanup.cpp 
	                             cleanup.h 
Added files:
	chapel/compiler/traversals/: updateSymbols.cpp updateSymbols.h 

---------------------------------------------------------------------------

02/17/05 14:37:24 -- deitz

Log message:
	[#2 on 2/16/05 TO DO]
	
	Extended the copy interface to take another optional parameter,
	update_list.  This Vec<BaseAST*>* contains a list of BaseAST pointers.
	They are updated by copy so that if any point to a BaseAST that is
	copied, it will point to the copied BaseAST.
	
	This parameter is used by the TransformLetExprs traversal.  This
	traversal finds all the let expressions in the AST.  Then it changes
	these LetExprs into BlockStmts.  Because there could be nested
	LetExprs it is useful to update the list of LetExprs when any are
	copied.
	
	This should be a fairly general implementation strategy.  Hi ho.
	
	Just musing here, but it's too bad C++ makes you put the default
	parameters at the end and only not specify starting from the back.
	For copy, there are three sets of parameters that it would be nice to
	specify any of these sets in different situations.  Chapel's named
	default parameters will be perfect when we're ready to bootstrap.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/traversals/: transformLetExprs.cpp 
	                             transformLetExprs.h 

---------------------------------------------------------------------------

02/18/05 10:24:10 -- jplevyak

Log message:
	Squelch line numbers for all files containing "prelude" in the
	flow analysis regression logs (on request from Brad).

Modified files:
	chapel/compiler/analysis/: clone.cpp fa.cpp fun.cpp if1.cpp 
	                           sym.cpp 
	chapel/compiler/include/: code.h fun.h sym.h 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.chpl 
	                                  enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

02/18/05 16:48:26 -- deitz

Log message:
	Added modest support for anonymous domains.  They can be used in
	forall and for statements and a domain is not created.  They can be
	used in array types and a domain variable is created.  Currently only
	1D domains are supported in this latter case.
	
	Made the common module more like other modules.  It is now codegened
	like other modules and passes act on it like other modules.
	
	Added a new traversal InsertAnonymousDomains that runs before
	InsertAnonymousTypes.  The domains are inserted right before the
	arrays that are declared over them.
	
	Improved InsertAnonymousTypes though it is still not very recursive.
	Anonymous types of anonymous types are not yet fully supported.
	Almost there.
	
	Added new future cases using anonymous domains and assigning arrays.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: codegen.cpp createEntryPoint.cpp 
	                         runAnalysis.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             insertAnonymousTypes.cpp 
	                             insertAnonymousTypes.h 
	chapel/runtime/include/: forall.h 
	chapel/test/compflags/bradc/twomodulesnomain/: module1.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertAnonymousDomains.h 
	chapel/test/arrays/deitz/: test_anon_domain1.chpl 
	                           test_anon_domain1.good 
	                           test_anon_domain2.chpl 
	                           test_anon_domain2.future 
	                           test_anon_domain2.good 
	                           test_array_assign1.chpl 
	                           test_array_assign1.future 
	                           test_array_assign1.good 
	                           test_array_assign2.chpl 
	                           test_array_assign2.future 
	                           test_array_assign2.good 

---------------------------------------------------------------------------

02/19/05 11:55:49 -- jplevyak

Log message:
	Fix off-by-one error found by valgrind + GC.

Modified files:
	chapel/compiler/vparser/: grammar.cpp 

---------------------------------------------------------------------------

02/19/05 11:56:46 -- jplevyak

Log message:
	add chplalloc.h to catch stray malloc's if they are added.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

02/19/05 11:57:19 -- jplevyak

Log message:
	Fix SEGV in log routine.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

02/19/05 17:37:40 -- jplevyak

Log message:
	Iterate over the ->var->next field of a VarDefStmt.
	In general how should I know which fields are lists?  Could
	we rename the ones that are lists XXX_list.  In this
	instance if we had VarDefStmt::var_list then I would
	know to iterate over it.  Or should I iterate over every field?

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_array_assign1.future 

---------------------------------------------------------------------------

02/21/05 17:56:00 -- jplevyak

Log message:
	Fixed a couple issues with class cloning and resolve symbols.
	test/types/type_variables/deitz/test_clone_class1 is now working correctly.
	Updated .future files for test/types/type_variables/deitz/test_clone_class2(a)
	since I fixed a couple issues.  Here is the new .future:
	
	"The problem here is that classes have already been cloned, but
	the original class (from which the clones were derived) still
	exists in the AST via the TypeDefStmt.  Like unused functions
	there will be unused types which should not be resolved.
	
	If you need an interface to query which types are actually
	used in the program, ask me."

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class2.future 
	                                         test_clone_class2a.future 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1.future 

---------------------------------------------------------------------------

02/22/05 12:08:07 -- jplevyak

Log message:
	Fix cloning so that the uncloned type is always the abstract one in cases
	  where multiple clones are required.
	Fix a bug where Sym(s) were registered twice during cloning.
	Modified type_is_used and function_is_used to use a flag
	  to check whether or not analysis was run (for safety).
	
	**************
	Hacked type cloning to manually callback the callback for the TypeSymbol which
	  was not being done.  Should this be removed????
	**************
	
	Add type_is_used() to analysis.h/cpp
	Add some #ifdef'd out test code into runAnalysis.cpp to call type_is_used();

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/passes/: runAnalysis.cpp 

---------------------------------------------------------------------------

02/22/05 15:45:54 -- jplevyak

Log message:
	Some work on tuples.
	TypeType maps to the PRODUCT type of analysis.
	Set the AST::sym for EXPR_TUPLE.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/22/05 16:55:01 -- deitz

Log message:
	Replaced the Cleanup traversal with the following traversals:
	
	  ExpandClassWiths
	  InsertThisParameters
	  ScopeResolveSymbols
	  RenameOverloadedFunctions
	  SpecializeParenOpExprs
	  ApplyThisParameters
	
	These traversals used to be embedded in Cleanup, but now show up in
	the Passlist.  This makes the design slightly more modular and
	uniform.
	
	Removed four lines that fix the back pointer after Cleanup was called
	on copied expressions and statements.  Since Cleanup is no longer
	called there, these are no longer necessary.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             expandClassWiths.cpp 
	                             expandClassWiths.h 
	                             insertThisParameters.cpp 
	                             insertThisParameters.h 
	                             renameOverloadedFunctions.cpp 
	                             renameOverloadedFunctions.h 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
Removed files:
	chapel/compiler/traversals/: cleanup.cpp cleanup.h 

---------------------------------------------------------------------------

02/22/05 17:04:05 -- jplevyak

Log message:
	More prep work for tuples and overloaded =.
	Added support for calling builtin primitives using the __primitive
	  extension in the preludes.
	Changed the way global variables are analyzed so that their
	  types are tracked more precisely.
	Changed the way return values work so that multiple returns of
	  lvalue expressions will work.
	Changed the way assignment works so that the RHS is moved to a temporarly
	  to clear its ability to pass lvalues.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

02/23/05 10:30:46 -- jplevyak

Log message:
	Change the "index_object" primitive to index into anything derived
	from "Tuple" (i.e. Tuple subtypes).

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

02/25/05 16:49:46 -- deitz

Log message:
	Added intrinsic "numeric" which will be used by analysis to constrain
	types.  It is an integer or float or boole?
	
	Type* dtNumeric points to this type.
	
	At this point, I think I exposed it to the user.  Perhaps we shouldn't
	do this and it should be put in the InternalPrelude.  How should it be
	specified there if that is the case?

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

02/28/05 10:00:53 -- deitz

Log message:
	Moved TransformLetExprs after analysis.
	
	This breaks test_let[1-7].  I added futures for each of these tests
	for John.
	
	Note to whom-will-be-concerned: I'm not letting them regress (adding
	futures instead), because this will require new functionality.  It was
	premature to remove the futures before.  Therefore, these are not
	regressions, but rather not yet fully implemented.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/test/trivial/deitz/: test_let8.future 
Added files:
	chapel/test/trivial/deitz/: test_let1.future test_let2.future 
	                            test_let3.future test_let4.future 
	                            test_let5.future test_let6.future 
	                            test_let7.future 

---------------------------------------------------------------------------

02/28/05 10:45:34 -- deitz

Log message:
	Renamed field Type::name to Type::symbol to better differentiate it
	from Symbol::name.  I've messed up because of these similarities so
	I'm just taking the time to fix it.

Modified files:
	chapel/compiler/AST/: nils.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertThisParameters.cpp 
	                             insertUnionChecks.cpp 
	                             insertVariableInitializations.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

02/28/05 11:42:08 -- jplevyak

Log message:
	Grab bag checkin.
	
	1. added new interfaces for resolving members:
	
	void resolve_member_access(MemberAccess *ma, int *offset, Type **type);
	void resolve_member(ClassType *t, VarSymbol *v, int *offset, Type **type);
	
	we should switch over from
	
	int resolve_symbol(UnresolvedSymbol *us, MemberAccess *ma, Symbol *&sym);
	
	at some point.
	
	2. Added Stmt::parentFunction() to handle the special case where the
	   stmt->parentSymbol is a module.
	
	3. Added a "type" field to VariableType to handle type constraints of the form:
	
	function foo(type t : A, i : t) ....
	
	4. Added code which computes the layouts for ClassType objects which includes
	   the offset of each field.  Those offsets are returned by the above new
	   APIs.
	
	   Currently I use the provided order to build the layouts, but that could
	   change as/when we decided to optimize layouts.
	
	   Layout compatiibility is now used to build function clones.
	
	   Pointer size is take from the build environment as sizeof(void *)...
	   we may have to make this configurable at some point for cross compilation.
	
	5. Add a flag to report an error when an instance variable is
	   unused (and hence has no type).
	
	6. Added TQUESTION to chapel.lex in preparation for supporting
	   the alternate type variable syntax.
	
	7. Added support in the parser for the "type" field of VariableType's defined as:
	
	function foo(type t : A, i : t) ....

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp clone.cpp fa.cpp 
	                           if1.cpp pattern.cpp sym.cpp 
	chapel/compiler/include/: analysis.h clone.h fa.h if1.h stmt.h 
	                          sym.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y 

---------------------------------------------------------------------------

02/28/05 11:46:48 -- jplevyak

Log message:
	Fixed the union type hierarchy tests and added a new error test
	for bad structural typing.
	Added a new test for sum types which is currently failing
	(invisibly) because of the way "with" variables are inserted.
	Added a new (future) test for type variable constraints which
	failes because inheritance is not yet implemented.

Modified files:
	chapel/test/classes/jplevyak/: union_type_hierarchy-1.chpl 
	                               union_type_hierarchy-2.chpl 
Added files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.chpl 
	                               record_type_hierarchy-3-error.good 
	                               sum_type-1.chpl sum_type-1.good 
	                               union_type_hierarchy-3-error.chpl 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/type_variables/jplevyak/: 
	                                            typevar_constraint-1.chpl 
	                                            typevar_constraint-1.future 
	                                            typevar_constraint-1.good 

---------------------------------------------------------------------------

02/28/05 12:09:29 -- deitz

Log message:
	Fixed a bug in how fixup is called after modifications to the AST are
	made.
	
	Updated enumarray.good.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

02/28/05 12:09:31 -- jplevyak

Log message:
	Add 2 new tests for object layout conformance testing.
	The first fails because of the order of 'with' variables.

Added files:
	chapel/test/flowanalysis/newast/: sum_type-1.chpl 
	                                  sum_type-1.future 
	                                  sum_type-1.good 
	                                  sum_type-2.chpl 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

02/28/05 12:12:07 -- jplevyak

Log message:
	sum_type-2 should fail as well (as it is the dual of the previous test).

Modified files:
	chapel/test/flowanalysis/newast/: sum_type-2.good 
Added files:
	chapel/test/flowanalysis/newast/: sum_type-2.future 

---------------------------------------------------------------------------

02/28/05 13:36:57 -- shannon

Log message:
	Changed the last outstanding malloc to _chpl_malloc.
	
	Added a script to the runtime Makefile to print an error
	if there exists a runtime source file that does not
	include the chplrt.h header file.
	
	In symtab.cpp added some error checking to lookupInternal,
	per Brad's instructions.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/runtime/include/: chplrt.h 
	chapel/runtime/src/: Makefile array.c domain.c 

---------------------------------------------------------------------------

02/28/05 16:10:09 -- jplevyak

Log message:
	Add support for let expressions.   This required hacking
	my traversal code to traverse through the symbols and
	expressions for the LET_EXPR.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/28/05 16:39:53 -- deitz

Log message:
	Made ExpandClassWiths put the fields inserted by a with statement in
	the place that the with statement was.  They may be rearranged later
	by analysis, but this is a good default.
	
	Added insert for Vec templates.  It inserts a new element of the Vec
	before an existing one.
	
	Removed double traversal of symbols (def and regular).
	
	Replaced old resolve_symbol with resolve_member_access.

Modified files:
	chapel/compiler/AST/: nils.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: type.h vec.h 
	chapel/compiler/traversals/: expandClassWiths.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

02/28/05 16:49:34 -- jplevyak

Log message:
	Add option to
	
	   HAND_TRAVERSE_EXPR_LET

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/28/05 17:06:22 -- jplevyak

Log message:
	Stupid bug, forgot to update backpointer.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/28/05 17:09:23 -- deitz

Log message:
	Moved TransformLetExprs after ResolveSymbols etc.

Modified files:
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

02/28/05 17:12:04 -- deitz

Log message:
	Commented out HAND_TRAVERSE_EXPR_LET.
	
	Fixed two small but major bugs in traversals of symbols and types.  A
	little surprised it was working.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/28/05 17:21:36 -- jplevyak

Log message:
	Remove me from .future, I think I am done with this one... if I am
	wrong tell me.

Modified files:
	chapel/test/trivial/deitz/: test_let8.future 

---------------------------------------------------------------------------

03/01/05 08:45:05 -- deitz

Log message:
	Removed futures for test_let[1-7].

Removed files:
	chapel/test/trivial/deitz/: test_let1.future test_let2.future 
	                            test_let3.future test_let4.future 
	                            test_let5.future test_let6.future 
	                            test_let7.future 

---------------------------------------------------------------------------

03/01/05 08:49:10 -- jplevyak

Log message:
	Remove HAND_TRAVERSE_EXPR_LET define since traverse is now fixed.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/01/05 09:46:23 -- jplevyak

Log message:
	Make sum_type-1 a .future test case since it requires moving
	to a new interface.

Added files:
	chapel/test/classes/jplevyak/: sum_type-1.future 

---------------------------------------------------------------------------

03/01/05 11:50:20 -- deitz

Log message:
	Initial implementation of default_wrapper for functions that are
	called without parameters that have default values.  This function is
	called from analysis.  There is now a problem later on in the
	defaultParam test case.
	
	Fixed a bug in copying ParamSymbols.  The init expression was lost
	prior to this fix.
	
	Simplified resolution of MemberAccesses while we work in the new
	interface.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

03/01/05 11:51:24 -- deitz

Log message:
	Passed defaultParam test case future to John.

Modified files:
	chapel/test/functions/bradc/: defaultParam.future 

---------------------------------------------------------------------------

03/01/05 12:26:16 -- deitz

Log message:
	Made a change so that types that are not used are not code-generated.
	This uses analysis's type_is_used function.
	
	Patched type_is_used so that it works.  John, please take a look at my
	changes.  I'll send you what breaks without them in a separate mail.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/01/05 13:14:31 -- deitz

Log message:
	Changed the interface for cloning types from
	  TypeDefStmt::clone(...)
	to
	  TypeSymbol::clone(...)
	
	Removed some old commented out code.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h symbol.h 

---------------------------------------------------------------------------

03/01/05 15:55:15 -- deitz

Log message:
	Changed the contents of TypeDefStmt from a Type to a TypeSymbol.  This
	brings it more inline with FnDefStmt, VarDefStmt, and ModuleDefStmt.
	All of these contain the symbols they define.
	
	Reworked TypeSymbol::clone so that it creates a new name for the type
	symbol.  Previously this was hacky and done in the copy mechanism.
	
	There is a deep difference between TypeSymbol::clone used to clone
	classes and FnSymbol::clone used to clone functions.  When a class is
	cloned, the name is changed.  When a function is cloned, the name is
	not changed, the clone is treated like any other overloaded function,
	and the cname is changed.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

03/01/05 16:47:20 -- bradc

Log message:
	Adding document sources for compiler architecture
	paper written for the TAR, as well as for the
	unabridged section on analysis that John prepared
	for it.

Added files:
	chapel/doc/internal/analysisOverview/: .cvsignore analysis.tex 
	                                       group.bib 
	chapel/doc/internal/chapelCompArch/: .cvsignore bib.bib 
	                                     chapel2c.eps chapel2c.fig 
	                                     chapelCompArch.tex 
	                                     nightly.eps overview.eps 
	                                     overview.fig symtab.eps 
	                                     symtab.fig tokctnightly.eps 

---------------------------------------------------------------------------

03/01/05 17:25:39 -- jplevyak

Log message:
	Improve notion of "scalar" to include things derived from scalars.
	This handles cases like:
	  type myinteger : integer = 5;
	as well as enumerations.

Modified files:
	chapel/compiler/analysis/: sym.cpp 
	chapel/compiler/include/: sym.h 

---------------------------------------------------------------------------

03/01/05 18:48:11 -- jplevyak

Log message:
	GC patches to support valgrind.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 
	chapel/third-party/boehmgc/gc6.3/: configure malloc.c mallocx.c 
	                                   mark.c os_dep.c reclaim.c 
	chapel/third-party/boehmgc/gc6.3/include/private/: gc_priv.h 

---------------------------------------------------------------------------

03/01/05 18:50:36 -- jplevyak

Log message:
	Patch to support valgrind.

Added files:
	chapel/third-party/boehmgc/: gc-valgrind.patch 

---------------------------------------------------------------------------

03/02/05 09:37:47 -- bradc

Log message:
	Changed check for chplrt.h in the runtime srcs to check
	the sources used to build the runtime (CVS_SRCS) rather
	than all .c files in the directory so that people may
	have stray .c files in the directory that haven't been
	worked into the runtime yet.

Modified files:
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

03/02/05 09:40:06 -- bradc

Log message:
	Restoring enumarray.chpl back to its preferred form.

Modified files:
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 

---------------------------------------------------------------------------

03/02/05 10:27:34 -- bradc

Log message:
	Fixed last night's valgrind regression, which related to complex
	literals that were expressed using integer sub-values.  The problem
	was related to an idiom in my coding that I started out using, but
	have since shied away from (though haven't completely eradicated
	yet).  In particular, I used to do:
	
		if (typeid(foo) == typeid(DesiredType)) {
		  DesiredType foo2 = (DesiredType)(foo);
		  ...
		}
	
	using a static rather than a dynamic cast, having proved it was
	safe to do so.  I started to worry that this was a fragile
	construct since someone might modify the conditional without
	modifying the code.  It turns out that in this case, I did just
	that.  So now I use dynamic casts inside of these conditionals
	as an extra safety check (and performance be damned! :)

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

03/02/05 13:40:31 -- jplevyak

Log message:
	Add support for label/goto/break/continue.
	This support works through analysis and partially through
	code generation.  There is a question as to how best to
	store the resolved target of jumps.  I compute them
	(I resolve them to build the IF1 representation), but I
	don't know how you would like to store them.
	
	I have left the following .future files:
	
	deitz/bradc
	
	Support for basic control flow.  Need to resolve
	the targets.  I can do this for you if you decide what
	sort of data structure you want (e.g. do you
	want a "Stmt *target" in GotoStmt, BreakStmt, ContinueStmt).
	These things would have to be fixed up during copy and
	inlining, so I have left it to you to decided how you
	want to handle it.  The other alternative is to
	uniquify the labels in some manner and to have different
	labels for break and continue for each loop....

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/compiler/include/: pragma.h 
	chapel/test/trivial/jplevyak/: break-1.chpl break-1.good 
	                               break-2.chpl break-2.good 
	                               break-3.chpl break-3.good 
	                               break-4.chpl break-4.good 
	                               break-5.chpl break-5.good 
	                               continue-1.chpl continue-1.good 
	                               continue-2.chpl continue-2.good 
	                               continue-3.chpl continue-3.good 
	                               continue-4.chpl continue-4.good 
	                               continue-5.chpl continue-5.good 
	                               goto-1.chpl goto-1.good 
	                               goto-2.chpl goto-2.good 
	                               label-1.chpl label-1.good 
	                               label-2.chpl label-2.good 

---------------------------------------------------------------------------

03/02/05 16:22:35 -- jplevyak

Log message:
	.future files for the control flow tests

Added files:
	chapel/test/trivial/jplevyak/: break-1.future break-2.future 
	                               break-3.future break-4.future 
	                               break-5.future continue-2.future 
	                               continue-4.future 

---------------------------------------------------------------------------

03/02/05 16:23:40 -- jplevyak

Log message:
	test for parsing of string constants with embedded "

Added files:
	chapel/test/trivial/jplevyak/: string-1.chpl string-1.future 
	                               string-1.good 

---------------------------------------------------------------------------

03/02/05 17:30:54 -- jplevyak

Log message:
	Add pragmas.  These are stored off of Stmt(s) and Symbol(s) and use the
	syntax
	  pragma "inline" function foo(pragma "register" x) { ... }
	which is to say they are currently strings.  Most Symbol definition
	situations allow pragmas, in particular variable and and parameter
	definitions.  If there is interest we can attach them to Expr(s) as well.

Modified files:
	chapel/compiler/AST/: Makefile.share 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: misc.h pragma.h symbol.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/util/: misc.cpp 
Added files:
	chapel/test/trivial/jplevyak/: pragma-1.chpl pragma-1.good 
	                               pragma-2.chpl pragma-2.good 
	                               pragma-3.chpl pragma-3.good 
	                               pragma-4.chpl pragma-4.future 
	                               pragma-4.good pragma-5.chpl 
	                               pragma-5.good pragma-6.chpl 
	                               pragma-6.good 

---------------------------------------------------------------------------

03/03/05 09:04:13 -- jplevyak

Log message:
	Forgotten file

Added files:
	chapel/compiler/AST/: pragma.cpp 

---------------------------------------------------------------------------

03/03/05 10:51:25 -- deitz

Log message:
	Reworked ClassType::copy to not  build a TypeDefStmt and symbol.  This
	is done elsewhere now and caused some duplicate copying.
	
	Cleaned VarDefStmt traversal.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 

---------------------------------------------------------------------------

03/03/05 12:06:22 -- jplevyak

Log message:
	Cleaned up all the conflicts in the grammar.
	Made the compile fail if there are conflicts in the grammar.
	Added pragmas to Expressions.
	
	All pragmas are prefixes:
	
	  pragma "foo" pragma "bar" writeln(1);  // on statements
	  var pragma "biz" pragma "baz" x = 4;   // on symbols (the symbol "x")
	  x = (pragma "tiz" 45 + 76 ); // on expressions "45 + 76"
	
	Note: for expressions pragmas must appear after an opening paran or a ',' comman
	      and then they refer to the following expression.  To make sure you
	      are getting the right one, just add some parans.

Modified files:
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: Makefile chapel.y 

---------------------------------------------------------------------------

03/03/05 13:23:07 -- deitz

Log message:
	Added new Stmt called DefStmt.  This will replace TypeDefStmt,
	ModuleDefStmt, VarDefStmt, and FnDefStmt bringing us more inline with
	Brad's compiler architecture paper.  The real motivation behind this
	change is to move over to DefExprs so that symbols defined in
	ForallExprs and LetExprs will be defined via DefExprs along with all
	other symbols.
	
	Moved print functionality into VarSymbol's and FnSymbol's printDef
	routine and out of VarDefStmt's and FnDefStmt's printDef routine.
	
	Added a few .cvsignores.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symbol.h 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/flowanalysis/newast/: .cvsignore 
Added files:
	chapel/test/trivial/jplevyak/: .cvsignore 
	chapel/test/types/type_variables/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

03/03/05 15:46:12 -- jplevyak

Log message:
	Support pragmas on decls.
	Add support for cloning for manifest constants.
	Added "clone_for_manifest_constants" pragma to functions
	  in the internal_prelude.
	Fixed a bug : needed to dupstr the pragma string.

Modified files:
	chapel/compiler/AST/: pragma.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp fun.cpp 
	chapel/compiler/include/: fa.h fun.h 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 

---------------------------------------------------------------------------

03/03/05 16:56:04 -- jplevyak

Log message:
	Added a new function to "finalize" the if1 representation by doing
	dead code removal.   Lack of this was causing some instantiated functions to
	fail (in particular pragm-4.chpl).
	Remove the .future on pragma-4.

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp 
	chapel/compiler/include/: if1.h 
Removed files:
	chapel/test/trivial/jplevyak/: pragma-4.future 

---------------------------------------------------------------------------

03/04/05 10:19:31 -- jplevyak

Log message:
	Fixed another issue with generic instantiation having to do with constants.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/04/05 11:35:18 -- jplevyak

Log message:
	Moved the wrapper caches into the Fun class to make them function specific.
	Fixed default parameters, removed the .future file.

Modified files:
	chapel/compiler/analysis/: fun.cpp pattern.cpp 
	chapel/compiler/include/: fun.h 
Removed files:
	chapel/test/functions/bradc/: defaultParam.future 

---------------------------------------------------------------------------

03/04/05 12:50:13 -- deitz

Log message:
	Removed nils from the compiler, including nilType, nilStmt, nilILink,
	nilExpr, nilSymbol, nilFnSymbol, ..., replacing references to them
	with NULL.  Removed isNull() method.
	
	This checkin simplifies the implementation removing the need for
	double checks like '(indices && !indices->isNull()).'

Modified files:
	chapel/compiler/AST/: Makefile.share expr.cpp link.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	                          symbol.h symscope.h symtab.h type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: codegen.cpp createEntryPoint.cpp 
	chapel/compiler/symtab/: symlink.h symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             expandClassWiths.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp traversal.h 
Removed files:
	chapel/compiler/AST/: nils.cpp 
	chapel/compiler/include/: nils.h 

---------------------------------------------------------------------------

03/04/05 14:41:36 -- jplevyak

Log message:
	Add support for functions with operator (symbol) names.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

03/04/05 15:03:27 -- deitz

Log message:
	Added functionality to print the AST.  This can be used in debugging
	with the print_view function by passing it a Stmt or an Expr.
	
	For example, I can print out the TypeDefStmt for the class Array in
	the internal_prelude just after parsing and I get something like:
	
	(gdb) p print_view(stmt)
	
	(TypeDefStmt 'Array' 'Array'
	  (FnDefStmt 'this' 'this' 'i'
	    (BlockStmt
	      (ReturnStmt
	        (ParenOp
	          (Variable '__primitive')
	          (StringLiteral)
	          (Variable 'this')
	          (Variable 'i')))))
	  (FnDefStmt 'this' 'this' 'i' 'j'
	    (BlockStmt
	      (ReturnStmt
	        (ParenOp
	          (Variable '__primitive')
	          (StringLiteral)
	          (Variable 'this')
	          (Variable 'i')
	          (Variable 'j')))))
	  (FnDefStmt 'this' 'this' 'i' 'j' 'k'
	    (BlockStmt
	      (ReturnStmt
	        (ParenOp
	          (Variable '__primitive')
	          (StringLiteral)
	          (Variable 'this')
	          (Variable 'i')
	          (Variable 'j')
	          (Variable 'k'))))))

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

03/04/05 15:39:41 -- jplevyak

Log message:
	Switch over to using overloaded operators for all binary
	operations.  These are dispatched through system defined
	functions using the new "numeric" type (dtNumeric) in
	the internal_prelude.
	This will permit us to define operators over strings/arrays/domsin
	etc. in the future.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_ops.good 
	                                  compSampler.good 
	                                  danglingelse.good 
	                                  equality_ops.good 
	                                  logical_and.good mod.good 
	                                  mutrec.good pareninit.good 
	                                  relational_ops.good var.good 
	                                  var2.good whileLoop.good 

---------------------------------------------------------------------------

03/07/05 13:25:40 -- deitz

Log message:
	Added initial infrastructure support for looking at compiler code
	coverage of the test suite.  Read Coverage.readme for how to do this.

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/make/: Makefile.gnu 
Added files:
	chapel/compiler/: Coverage.pl Coverage.readme 

---------------------------------------------------------------------------

03/07/05 16:40:43 -- deitz

Log message:
	Unified BreakStmt, ContinueStmt, and GotoStmt to be GotoStmt with an
	enumeration as to whether it is a break, continue, or normal goto.
	This cleans up the code since these will be handled identically for
	the most part.
	
	Implemented codegen for break statements so that they act differently
	than a continue and jump to the point after the loop.  Labels now
	generate twice.  Before their statement, they generate the normal
	label.  After their statement, they append _post to it.  This after
	label is the target of a break statement.
	
	Changed the label name (char*) to be a Symbol that should resolve to a
	new LabelSymbol (new AST symbol).  Like all symbols, these are
	originally UnresolvedSymbols.
	
	Added functionality to the ScopeResolveSymbols traversal so that it
	also resolves labels, matching the labels of GotoStmts to LabelSymbols
	defined in LabelStmts.  Also, this traversal creates LabelStmts around
	ForLoops and WhileLoops that have break or continue statements
	(without labels) within them.  These are then made the target of the
	break and continue statements without labels.
	
	Changed .good files for break-2 and break-3 tests since they seemed
	wrong to me.
	
	Removed futures for break-1, break-2, break-3, break-4, break-5,
	continue-2, and continue-4.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	                             verifyASTType.cpp 
	chapel/test/trivial/jplevyak/: break-2.good break-3.good 
Removed files:
	chapel/test/trivial/jplevyak/: break-1.future break-2.future 
	                               break-3.future break-4.future 
	                               break-5.future continue-2.future 
	                               continue-4.future 

---------------------------------------------------------------------------

03/07/05 17:23:26 -- deitz

Log message:
	Simplified ClassType so that the order of the fields is defined by the
	order of the statements in the DeclarationList.  The fields vector no
	longer needs to be in order.
	
	Removed less-than-robust Vec template insert method.
	
	Simplified ExpandClassWiths.
	
	Short-circuited InsertVariableInitializations for variables declared
	within class types.  These will have to be put treated specially and
	put in the constructor.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h vec.h 
	chapel/compiler/traversals/: expandClassWiths.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

03/09/05 09:27:48 -- deitz

Log message:
	Added a new pass InsertFunctionTemps that inserts temporaries for
	cases where multiple functions are called from the same statement.
	This makes sure we use the right order of evaluation and makes it
	easier to manipulate function calls.  This maybe should be changed
	eventually to deal only with side-affecting functions.
	
	Added scope functions findEnclosingSymContext,
	findEnclosingStmtContext, and findEnclosingExprContext to search up
	from a scope looking for contexts.  Cleaned up code that did the same
	thing by hand.
	
	Updated typeName array so that print_view works again.  I should add
	something to make sure this stays up-to-date when new AST classes are
	added or removed.
	
	Fixed, with a stopgap, the check in fixup for the parentSymbol
	pointer.  This is now lenient allowing either the module or initFn to
	be the parent for top-level code.  The __init function should be
	inserted and then fixed up like other things.
	
	Added two new tests to look at deeply nesting function calls as in
	
	  foo(foo(foo(foo(foo(2)))))
	  foo(foo(foo(foo(foo(2) + foo(2)) + foo(2)) + foo(2)) + foo(2)) + foo(2)
	
	Updated test_var_decl_init1 to obey new parsing rules for
	if-statements.  Namely, if-statements must use a 'then' keyword or use
	curly brackets.
	
	Removed futures for trivial/deitz/test_var_decl_init1 and
	trivial/deitz/test_let8.  Note that the first test only works because
	of the fntemps pass breaking up two function calls in a statement.
	They are not side-affecting so don't have to be broken up.  The
	ProcessParameters pass fails in that case though.  This is still a
	problem.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share fixup.cpp 
	                             processParameters.cpp 
	chapel/test/trivial/deitz/: test_var_decl_init1.chpl 
Added files:
	chapel/compiler/traversals/: insertFunctionTemps.cpp 
	                             insertFunctionTemps.h 
	chapel/test/trivial/deitz/: test_nested_function_call.chpl 
	                            test_nested_function_call.good 
	                            test_nested_function_call2.chpl 
	                            test_nested_function_call2.good 
Removed files:
	chapel/test/trivial/deitz/: test_let8.future 
	                            test_var_decl_init1.future 

---------------------------------------------------------------------------

03/09/05 10:20:10 -- deitz

Log message:
	Added three tests for default parameters.  The first two work (though
	an extra function is cloned).  The third prints out a good error
	message but the line numbers don't exist for one of the functions.
	Line numbers need to be cleaned up as regards this future.

Added files:
	chapel/test/functions/deitz/: test_default_param1.chpl 
	                              test_default_param1.good 
	                              test_default_param2.chpl 
	                              test_default_param2.good 
	                              test_default_param3.chpl 
	                              test_default_param3.future 
	                              test_default_param3.good 

---------------------------------------------------------------------------

03/09/05 11:01:50 -- bradc

Log message:
	Trying to ease back into implementation, I worked on
	getting parameter intents working correctly for class
	arguments.  This was mostly fairly straightforward --
	I ammended the logic that determines how formal arguments
	should be codegened and how blank parameters are
	interpreted to handle the class cases correctly (in
	particular, blank intents imply pass-by-reference for
	classes).
	
	This fix also revealed some subtle problems in call_fixup
	within stmt.cpp which Steve helped me correct.
	
	I'm checked in four tests: 2 work correctly; 1 fails
	in analysis because it uses equality (==) on class
	instances, which seems to trip analysis up.  This is
	a future I've assigned to John;  a second test fails
	because it tries to refer to "nil" which we haven't
	implemented yet.  I've put that one in my name.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: internal_prelude.chpl 
Added files:
	chapel/test/functions/bradc/: intents-classes.chpl 
	                              intents-classes.good 
	                              intents-classes2.chpl 
	                              intents-classes2.good 
	                              intents-classes3.chpl 
	                              intents-classes3.future 
	                              intents-classes3.good 
	                              intents-classes4.chpl 
	                              intents-classes4.future 
	                              intents-classes4.good 

---------------------------------------------------------------------------

03/09/05 11:18:26 -- deitz

Log message:
	Removed stmtParent vector in fixup because the parentSymbol of Stmts
	is now set by looking up the symboltable scopes.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

03/09/05 11:59:08 -- deitz

Log message:
	Moved the setup of Expr's parent pointer (which points to its parent
	expr) to Fixup with a corresponding checkin in Fixup-Verify.  This was
	previously done in some constructors and was not always correct.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

03/09/05 14:50:55 -- bradc

Log message:
	I'm working on checking in some future tests that
	have been festering in my local directory, and found
	that this one was a trivial fix -- it seems as though
	we haven't supported constants in Chapel for quite
	some time -- at least since initializers were hoisted
	away from declarations.  In particular, we were
	codegening them using the "const" keyword in C, but
	not initializing them (and of course, Chapel consts
	can be less static than parameters, so that wouldn't
	work anyway.  This fix is therefore to simply not
	codegen the "const" tag for constants right now.  A
	later optimization would be to determine cases where
	a C const could be used and codegen the tag in that
	case.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/trivial/bradc/: declprintconst.chpl 
	                            declprintconst.good 

---------------------------------------------------------------------------

03/09/05 14:53:01 -- deitz

Log message:
	Added initial front-end support for named parameters.  These build up
	NamedExprs, a new class of Exprs.
	
	Added two tests which currently fail in analysis.  Assigned the
	futures to John.  When the function to create the wrappers is called,
	I'll take it back.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/functions/deitz/: test_named_param1.chpl 
	                              test_named_param1.future 
	                              test_named_param1.good 
	                              test_named_param2.chpl 
	                              test_named_param2.future 
	                              test_named_param2.good 

---------------------------------------------------------------------------

03/09/05 14:55:24 -- bradc

Log message:
	Checking in two future class tests that don't seem to be
	working in weird ways:
	
	- noinit declares a class variable but doesn't initialize
	  it, which causes analysis to complain.  Seems like this
	  shouldn't be a problem, so I assigned this one to John
	  for the time being.  John, let me know if I'm missing
	  something here, please.
	
	- weirdinit declares a class variable and initializes it
	  by calling it as though it was a constructor name. This
	  was a typo on my part in another test that I didn't
	  notice because -- amazingly! -- it worked.  Somehow
	  the call to the class name became a call to the class
	  constructor.  I assume that this is accidental, but
	  don't know where the fault lies.  John, Steve, could you
	  each look at this and let me know if you have any
	  insights as to why it isn't causing an actual problem?

Added files:
	chapel/test/classes/bradc/: noinit.chpl noinit.future 
	                            noinit.good weirdinit.chpl 
	                            weirdinit.future weirdinit.good 

---------------------------------------------------------------------------

03/11/05 08:37:00 -- jplevyak

Log message:
	Remove bogus error message and the .future for the test which
	illicited it.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/classes/bradc/: noinit.chpl 

---------------------------------------------------------------------------

03/11/05 12:05:55 -- deitz

Log message:
	Improved parsing of strings starting with ' and ".  Also, " can now be
	inserted as \" between "s and ' can now be inserted as \' between 's.
	Between 's, the " can be inserted without a \, but one is put in by
	the lexer.
	
	Removed trivial/jplevyak/string-1.future as it now works.

Modified files:
	chapel/compiler/parser/: chapel.lex 
Added files:
	chapel/test/trivial/deitz/: test_write_quotes.chpl 
	                            test_write_quotes.good 
	                            test_write_slash_n.chpl 
	                            test_write_slash_n.good 
Removed files:
	chapel/test/trivial/jplevyak/: string-1.future 

---------------------------------------------------------------------------

03/11/05 16:57:17 -- deitz

Log message:
	Fixed a small bug in which a class instance could be used as the
	constructor for a class.  This is now checked for more thoroughly.
	
	Removed .future for classes/bradc/weirdinit.

Modified files:
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 
	chapel/test/classes/bradc/: weirdinit.good 
Removed files:
	chapel/test/classes/bradc/: weirdinit.future 

---------------------------------------------------------------------------

03/13/05 13:26:48 -- jplevyak

Log message:
	Re-add noinit.chpl and remove noinit.future.

Added files:
	chapel/test/classes/bradc/: noinit.chpl 
Removed files:
	chapel/test/classes/bradc/: noinit.future 

---------------------------------------------------------------------------

03/14/05 11:30:08 -- jplevyak

Log message:
	Complete function visibility code.
	All PRIMARY_MEMBER functions are universally available
	(this works for classes where all members are universally available
	 and for records and unions because the primary method signature is
	 part of the type and hence any primary method will selected during dispatch).
	
	NOTE: I believe this exposes a bug in the symbol table as
	  trivial/deitz/test_block_call is failing.  Steve: you can
	  set a breakpoint in AInfo::visibile_functions in analysis.cpp
	  and wait for arg0->name to be "foo" and then watch the call
	  to Symboltable::lookupFromScope.  It is returning NULL.
	  Take a look and tell me what you see and if you think it is
	  a bug or not.  Thanx.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: fun.h symtab.h 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

03/14/05 13:57:47 -- deitz

Log message:
	Fixed a bug in which a new TypeSymbol was not created for a new
	SumType when one was created.
	
	Fixed a bug in which the context for the scope for a cloned class was
	not set.
	
	Put in an error for generating constructors when none exist.
	
	Added a new pass (unfinished) to remove dead functions and types after
	analysis has run.
	
	Added a commented out #define of ANALYSIS_MATCH that when uncommented
	makes sure the types that analysis returns via type_info match the
	types in the AST and are not unknown.  John, try uncommenting this.
	It breaks every test because __init and _main are said to have unknown
	return type.  It also catches some errors in the class cloning tests,
	test_class_clone2.chpl, in which there are numerous errors on both
	sides of analysis.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share findUnknownTypes.cpp 
	                             resolveSymbols.cpp 
Added files:
	chapel/compiler/traversals/: removeDeadSymbols.cpp 
	                             removeDeadSymbols.h 

---------------------------------------------------------------------------

03/14/05 14:07:29 -- deitz

Log message:
	Fixed the scope that is used to lookup visible functions in
	analysis.cpp.  It is the modScope of a module and the paramScope of a
	function, not the parentScope.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/14/05 14:30:37 -- bradc

Log message:
	Steve points out that I failed to fix the
	initializers for my classes in these tests
	after filing the weirdinit.chpl test the
	other day.

Modified files:
	chapel/test/functions/bradc/: intents-classes2.chpl 
	                              intents-classes3.chpl 
	                              intents-classes4.chpl 

---------------------------------------------------------------------------

03/14/05 14:46:45 -- bradc

Log message:
	A few small Makefile changes:
	
	1) added support for "make depend" in the top-level runtime
	   directory, as I always want this without cd-ing into the
	   src/ subdirectory.
	
	2) added top-level targets for those of us who work on both
	   the compiler and runtime directories: comprt will cd into
	   both directories and build them.  depend will cd into both
	   directories and build dependences for them.

Modified files:
	./: Makefile 
	chapel/runtime/: Makefile 

---------------------------------------------------------------------------

03/14/05 15:07:26 -- bradc

Log message:
	Added a bunch of platforms to the compiler's .cvsignore
	files.  At Cray, we tend to write our platform-specific
	files out to a local directory partition using the
	CHAPELDEVTMP environment variable, and the symbolic links
	that are set up are ignored by cvs by default.  These
	.cvsignore files should prevent such directories from
	being paid attention to when this env var isn't used.

Modified files:
	chapel/compiler/AST/: .cvsignore 
	chapel/compiler/analysis/: .cvsignore 
	chapel/compiler/analysis/make_prims/: .cvsignore 
	chapel/compiler/main/: .cvsignore 
	chapel/compiler/parser/: .cvsignore 
	chapel/compiler/vparser/: .cvsignore 
	chapel/compiler/vparser/cast/: .cvsignore 
Added files:
	chapel/compiler/adt/: .cvsignore 
	chapel/compiler/backend/: .cvsignore 
	chapel/compiler/passes/: .cvsignore 
	chapel/compiler/symtab/: .cvsignore 
	chapel/compiler/traversals/: .cvsignore 
	chapel/compiler/util/: .cvsignore 

---------------------------------------------------------------------------

03/14/05 16:57:23 -- jplevyak

Log message:
	Some algorithmic improvements to the code which detects incompletely
	covered argument types.  This is what was causing the problem with
	compSample running out of time.  The new algorithm is still not linear
	in the size of the program, but I will continue to work on it.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: fa.h 

---------------------------------------------------------------------------

03/14/05 17:06:00 -- jplevyak

Log message:
	Fix error messages from last checkin

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

03/14/05 17:33:04 -- bradc

Log message:
	Changed configuration of third-party/boehmgc build
	so that valgrind support is enabled only if
	valgrind is available (determined by checking the
	user's path for valgrind and assuming that the
	include directory is ../include from there).  The
	hope is that this will allow the compiler to be
	built once again on platforms that don't support
	valgrind (like cygwin and sun).
	
	John, if this doesn't work on your setup, please
	let me know how it fails (and maybe send the full
	result of a "make clean all" from the third-party
	directory?).  I suspect that the old version
	didn't work either due to the hard-coding of the
	Cray valgrind path into the include path?

Modified files:
	chapel/third-party/boehmgc/gc6.3/: configure 
	chapel/third-party/boehmgc/gc6.3/include/private/: gc_priv.h 

---------------------------------------------------------------------------

03/14/05 17:44:12 -- jplevyak

Log message:
	Add new tests for record ==.
	Future assigned to Steve for want of a better disposition.

Added files:
	chapel/test/classes/jplevyak/: record_equal-1.chpl 
	                               record_equal-1.future 
	                               record_equal-1.good 
	                               record_equal-2.chpl 
	                               record_equal-2.future 
	                               record_equal-2.good 

---------------------------------------------------------------------------

03/14/05 18:41:50 -- bradc

Log message:
	A slight improvement to my last checkin
	that doesn't rely on the status code of
	"which" being correct (as it seems that
	the which command on our Sun boxes does
	not set the status code).  Ammended the
	scheme by also seeing if valgrind --help
	works.

Modified files:
	chapel/third-party/boehmgc/gc6.3/: configure 

---------------------------------------------------------------------------

03/15/05 10:18:32 -- jplevyak

Log message:
	Regorganized the loops used to determine which formals arguments types
	are not covered by the potential target functions.  The algorithm is
	now linear in the number of edges in the call tree and the number of
	function arguments.
	
	PROFILE says that it is now inconsequential.  compSampler still
	takes a fair amount of time, but it is now dominated by GC with
	the highest non-GC function ILink::tail().

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 

---------------------------------------------------------------------------

03/15/05 10:29:03 -- deitz

Log message:
	Unified VarDefStmt, TypeDefStmt, FnDefStmt, and ModuleDefStmt into
	DefStmt.  The next step is to add DefExpr which will give a definition
	expression for all symbols.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symtab.h type.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             applyThisParameters.cpp fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeDeadSymbols.cpp 
	                             renameOverloadedFunctions.cpp 
	                             specializeParenOpExprs.cpp 
	                             transformLetExprs.cpp 
	                             verifyASTType.cpp 
Removed files:
	chapel/compiler/traversals/: cloneAllFns.cpp cloneAllFns.h 

---------------------------------------------------------------------------

03/15/05 11:20:47 -- jplevyak

Log message:
	Add "object" type which is the builtin parent of all "class" objects.
	Use the "object" type to implement == and != as pointer == and !=.
	Remove test/functions/bradc/intents-classes3.future which now passes.
	Added support for named arguments.
	Named arguments now fail in codegen.
	Moved the .future files for named arguments over to Steve.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/test/functions/deitz/: test_named_param1.future 
	                              test_named_param2.future 
Removed files:
	chapel/test/functions/bradc/: intents-classes3.future 

---------------------------------------------------------------------------

03/15/05 12:19:58 -- bradc

Log message:
	A few changes to make the compiler work on the Sun boxes
	again.  Added an explicit cast to files.cpp, made some of
	the commands executed by the test scripts more portable.
	
	The one change that might affect users is that the
	test environment variable CHPL_VALGRIND_OPTIONS was
	shortened to CHPL_VALGRIND_OPTS because the former name
	was too long for the Sun boxes.  John, I think you might
	have used this at one point when we had a version skew?
	I'm not sure whether you still do or not.

Modified files:
	chapel/compiler/util/: files.cpp 
	chapel/test/: start_test sub_clean sub_test 

---------------------------------------------------------------------------

03/15/05 12:24:41 -- deitz

Log message:
	Added new test for operator overloading.  This is a basic test to see
	if we can code generate a call to the overloaded function.

Added files:
	chapel/test/functions/deitz/: test_operator_overloading1.chpl 
	                              test_operator_overloading1.future 
	                              test_operator_overloading1.good 

---------------------------------------------------------------------------

03/15/05 14:55:29 -- bradc

Log message:
	Fixed tests that weren't working on the Sun to
	improve portability.  These are minor changes:
	Sun's grep didn't tack a newline onto the end
	of files while Linux's does, so had to modify
	a PREDIFF file to make things worked.  Suns
	byte ordering also pointed out that in some
	tests I was printing out 64-bit integers using
	%d formatting strings rather than %lld.  This
	implies that for the long-term, we should
	probably invent our own formatting strings for
	Chapel to avoid relying on the fact that C's
	betray too much about the underlying types
	used to represent Chapel's types.  For now,
	C's seem fine, though.

Modified files:
	chapel/test/compflags/bradc/gdbddash/: PREDIFF 
	chapel/test/trivial/bradc/: formatoutput.chpl 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 

---------------------------------------------------------------------------

03/15/05 14:55:39 -- jplevyak

Log message:
	Make handling of coerce more robust, fixes functions/deitz/test_operator_overloading1
	Change .future since it now fails in codegen.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/test/functions/deitz/: test_operator_overloading1.future 

---------------------------------------------------------------------------

03/16/05 11:22:47 -- deitz

Log message:
	Added DefExpr.  All symbols that were previously defined through
	DefStmts are now defined through DefExprs within DefStmts.  Symbols
	defined in Forall expressions and statements, let expression, and
	formal parameters are still defined without DefExprs.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symtab.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeDeadSymbols.cpp 
	                             renameOverloadedFunctions.cpp 
	                             renameOverloadedFunctions.h 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
	                             transformLetExprs.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

03/16/05 11:58:08 -- jplevyak

Log message:
	call_info now takes any Expr so that it can be used with BinOpExpr
	among others.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

03/16/05 12:00:43 -- deitz

Log message:
	Added skeleton for a new pass ResolveOverloadedOperators that will
	change uses of overloaded operators into function calls and mangle the
	name of those functions so they can be generated in C.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             insertFunctionTemps.h 
Added files:
	chapel/compiler/traversals/: resolveOverloadedOperators.cpp 
	                             resolveOverloadedOperators.h 

---------------------------------------------------------------------------

03/16/05 13:59:15 -- deitz

Log message:
	Implemented post-analysis support for operator overloading.  There are
	some issues, discussed below.
	
	The ResolveOverloadedOperator pass now mangles the C names of
	functions that are overloading operators.  In addition, it replaces a
	use of an overloaded operator with a function call using analysis's
	recently-enhanced call_info function.
	
	Improved copy so that ainfo is copied (shallowly) when expressions or
	statements are copied.  This didn't work always when analysis makes a
	callback to do the copy.  So it is currently guarded against doing
	this shallow copy when analysis is running, i.e., when we are in the
	analysis pass.  I need it post-analysis to avoid a pass-ordering
	problem between the passes that normalize the AST after analysis.  We
	do copies in many of these passes and they all rely on the ainfo field
	being maintained.  John, do you think this guard is necessary?  If
	not, feel free to remove it, but then analysis fails on some cases.  I
	don't have any objections to it.
	
	This checkin is currently special-casing the functions in the internal
	prelude as if they all have the pragma that I added there.  I can't
	seem to find the pragmas.  I tried maintaining pragmas when
	expressions and statements are copied, but ran into some problems.
	I'll look into this further.
	
	This fixes test_operator_overloading1 so I removed the future.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: runAnalysis.cpp runAnalysis.h 
	chapel/compiler/traversals/: resolveOverloadedOperators.cpp 
	chapel/test/functions/deitz/: test_operator_overloading1.chpl 
Removed files:
	chapel/test/functions/deitz/: test_operator_overloading1.future 

---------------------------------------------------------------------------

03/16/05 14:46:24 -- deitz

Log message:
	Added the pragma "builtin" to mean that this overloaded operator
	function should not replace the operator.  It is used on all the
	overloaded operator functions in the internal prelude.  The
	ResolveOverloaedOperators ignores operators that are overloaded with
	"builtin" functions.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: resolveOverloadedOperators.cpp 

---------------------------------------------------------------------------

03/16/05 15:18:46 -- deitz

Log message:
	Added a new pass to remove NamedExpr (named parameters) from the AST.
	These need to be removed after analysis.  If the order has changed, a
	wrapper function has already been created.
	
	This fixes test_named_param1 and I passed the future pf
	test_named_param2 over to John.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/functions/deitz/: test_named_param2.future 
Added files:
	chapel/compiler/traversals/: removeNamedParameters.cpp 
	                             removeNamedParameters.h 
Removed files:
	chapel/test/functions/deitz/: test_named_param1.future 

---------------------------------------------------------------------------

03/16/05 17:21:47 -- roxana

Log message:
	Added Support for parameters. They are treated as variable declaration
	with different degrees of "constness": var, const, parameter. In
	particular parameter should only be compile time constant. This does
	not work perfectly now. In particular, parameter should have a
	mandatory initializer, unlike variables which have an optional one. I
	put this in a future test so that I can work on it without having CVS
	insert in >>>> and === in my files.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             insertFunctionTemps.cpp 
	                             processParameters.cpp 
	                             insertUnionChecks.h 
	chapel/compiler/include/: code.h sym.h vec.h expr.h pnode.h 
	                          baseAST.h symbol.h symtab.h symscope.h 
	chapel/compiler/passes/: filesToAST.cpp runAnalysis.cpp 
	chapel/third-party/dparser/d/: make_dparser.cat 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/trivial/roxana/: test_param_decl.good 
	                             test_param_decl1.chpl 
	                             test_param_decl3.future 
	                             test_param_init.chpl 
	                             test_param_decl1.good 
	                             test_dead_var_decl.future 
	                             test_param_decl.chpl 
	                             test_param_decl2.good 
	                             test_param_decl2.chpl 

---------------------------------------------------------------------------

03/16/05 18:00:06 -- roxana

Log message:
	Commented out a debugging statement.

Modified files:
	chapel/compiler/traversals/: checkSemantics.cpp 

---------------------------------------------------------------------------

03/16/05 18:44:21 -- roxana

Log message:
	Added NL to the good files. I still did not get how to check
	in files that check for errors. For now, these are test_param_decl2.chpl
	and good. It looks like this is not the right way...

Modified files:
	chapel/test/trivial/roxana/: test_param_init.chpl 
	                             test_param_decl.good 
	                             test_param_decl2.good 
	                             test_param_decl1.good 
Added files:
	chapel/test/trivial/roxana/: test_param_init.good 

---------------------------------------------------------------------------

03/16/05 20:07:06 -- jplevyak

Log message:
	Fix printDecl to only print "var" when not "const" or "param".

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

03/17/05 09:22:20 -- roxana

Log message:
	Added blank line to test_param_decl2.good -- UST_FATAL
	seems to do that.

Modified files:
	chapel/test/trivial/roxana/: test_param_decl2.good 

---------------------------------------------------------------------------

03/17/05 10:32:34 -- roxana

Log message:
	Improved support for parameters to require an initializer upon
	declaration.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
Added files:
	chapel/test/trivial/roxana/: test_param_decl3.chpl 
	                             test_param_decl3.good 
Removed files:
	chapel/test/trivial/roxana/: test_param_decl3.future 

---------------------------------------------------------------------------

03/17/05 11:51:13 -- deitz

Log message:
	Added a new pass BuildClassConstructorsEtc which is currently only
	used to build an == function for records.  This function overloads ==
	for records.
	
	This pass is currently commented out because of an error that I'm
	getting in analysis and can't figure out.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	chapel/test/classes/deitz/: test_record3.chpl test_record3.good 

---------------------------------------------------------------------------

03/17/05 12:34:16 -- deitz

Log message:
	Enabled BuildClassConstructorsEtc which currently just builds an ==
	function for records.
	
	Made it so that RemoveDeadSymbols now removes dead functions as well
	as dead types right after analysis.
	
	Added a guard against codegening an empty list of statements for a
	module.  Added a guard against codegening constructors if there are
	none.  (For records, the constructor might be dead and thus removed.)
	
	Made a couple of superficial changes to BuildClassConstructorsEtc.
	
	Added a new test test_record_equal1 to test if we can use == on records.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             removeDeadSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_equal1.chpl 
	                            test_record_equal1.good 

---------------------------------------------------------------------------

03/17/05 15:47:50 -- jplevyak

Log message:
	test_named_param2 now calls the function to create a reorder wrapper
	(which is currently not implemented)
	Passed .future over to Steve.
	Instituted naming conventions to differentiate various types of MPositions:
	// Key to names of position variables
	//  ABCD
	//   A = a | f, actual or formal (MANDITORY)
	//   B = c, cannonical (OPTIONAL)
	//   C = p, positional (OPTIONAL)
	//   D = p, position (MANDITORY)
	// Examples:
	//  acpp - actual, cannonical, positional position
	//  acnp - actual, cannonical, named position
	//  ap - actual non-cannonical, positional or named position
	Did a full review of pattern.cpp to ensure that all positions were being
	used correctly.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: cg.cpp clone.cpp fa.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/backend/: dump.cpp 
	chapel/compiler/include/: fun.h pattern.h 
	chapel/test/functions/deitz/: test_named_param2.future 

---------------------------------------------------------------------------

03/17/05 16:31:58 -- deitz

Log message:
	Extended BuildClassConstructorsEtc to build the class constructors.
	These are no longer built from a call when the ClassType was created.
	
	The constructors now also initialize the members of a class.  For
	classes that will be cloned and don't have all the type info for their
	fields, we punt on initializing that field.  I think what we need to
	do is actually not create the constructor for cloned classes until
	they are cloned.  John, do you agree with this?
	
	I left commented a #define at the top of BuildClassConstructorsEtc
	
	   //#define CONSTRUCTOR_WITH_PARAMETERS 1
	
	When this is uncommented, the constructor is created with parameters
	so that it can be called with parameters.  The parameters are given
	default values.  However, I don't think a default wrapper is built for
	constructors that are called without the parameters.
	
	I left a future classes/deitz/test_class3.future for John.  This
	future uses the named parameters to call the class constructor.  If
	you uncomment the above line, this test will succeed but all the tests
	that call class constructors without arguments will fail.
	
	Reenabled checking in Fixup to make sure that the defPoint is
	correctly set.  This was accidentally turned off in my removal of the
	nils.
	
	I also extended BuildClassConstructorsEtc to create the enum of tag
	ids for our typesafe unions.  These were previously hardcoded in code
	generation.  One thing I had to do because of this was to force
	codegen to codegen all enums before everything else.  I think we
	should spend some time thinking about how we're going to codegen
	things in an order so as to work with C.
	
	Moved BuildClassConstructorsEtc down a little in the passlist so that
	the symbols are scope resolved first and so we know the types of
	fields within classes.
	
	Passed .futures for record_equal-1,2 over to John as per my last
	checkin of creating == for records.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp 
	chapel/test/classes/jplevyak/: record_equal-1.future 
	                               record_equal-2.future 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/classes/deitz/: test_class2.chpl test_class2.good 
	                            test_class3.chpl test_class3.future 
	                            test_class3.good test_class4.chpl 
	                            test_class4.good test_record4.chpl 
	                            test_record4.good test_record5.chpl 
	                            test_record5.good 

---------------------------------------------------------------------------

03/18/05 09:31:39 -- deitz

Log message:
	Fixed a bug in the creation of tuple types in which the default values
	were not replaced correctly, i.e., with replace.
	
	Fixed a bug in inserting anonymous types in which the type definition
	statements were not inserted correctly, i.e., with insertBefore.
	
	Fixed a bug in Fixup caused by secondary methods not always having a
	parentScope.
	
	Removed the --noanalysis flag from my tuple tests directory.  Added a
	new tuple test subdirectory called noanalysis which replicates these
	tests.  This will make it so incomplete changes on my part will cause
	regressions to the tuple tests even before analysis handles them.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: fixup.cpp insertAnonymousTypes.cpp 
Added files:
	chapel/test/types/tuple/deitz/noanalysis/: COMPOPTS 
	                                           test_tuple_simple1.chpl 
	                                           test_tuple_simple1.good 
	                                           test_tuple_simple2.chpl 
	                                           test_tuple_simple2.good 
	                                           test_tuple_simple3.chpl 
	                                           test_tuple_simple3.good 
	                                           test_tuple_simple4.chpl 
	                                           test_tuple_simple4.good 
	                                           test_tuple_simple5.chpl 
	                                           test_tuple_simple5.good 
Removed files:
	chapel/test/types/tuple/deitz/: COMPOPTS 

---------------------------------------------------------------------------

03/18/05 10:35:43 -- deitz

Log message:
	Fixed a bug in which we tried but failed to put extra parentheses
	around the following operators: or, and, |, ^, and &.
	
	Fixed a bug in codegening of MemberAccess in which the type of the
	base expression was not found using the typeInfo facility but rather
	done in limited way.
	
	Simplified the == function for records from something like
	
	  if (record1.field1 != record2.field1) return false;
	  if (record1.field2 != record2.field2) return false;
	  ...
	  return true;
	
	to something like
	
	  return (record1.field1 == record2.field1) &&
	         (record1.field2 == record2.field2) && ...;
	
	Fixed the --noanalysis symbol resolution to resolve MemberAccess
	member symbols in a more robust way.
	
	Passed future for test_nested_record1 over to John.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/test/classes/deitz/: test_nested_record1.future 

---------------------------------------------------------------------------

03/18/05 11:29:59 -- jplevyak

Log message:
	Remove "clone_for_manifest_constant" and use "clone_for_constants" intead.
	Attach "clone_for_constants" pragma to tuple indexing function argument.
	Move Symbol pragmas from temporary Symbol to ParamSymbol in defineFun...
	  I don't understand this code, so I hope I didn't overlook something.
	Cleanup analysis.cpp a bit.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp fun.cpp 
	                           var.cpp 
	chapel/compiler/include/: fa.h fun.h sym.h var.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

03/18/05 11:34:51 -- deitz

Log message:
	Adding a test for John to look at.

Added files:
	chapel/test/functions/deitz/: test_named_param3.chpl 
	                              test_named_param3.future 
	                              test_named_param3.good 

---------------------------------------------------------------------------

03/18/05 12:21:02 -- jplevyak

Log message:
	remove some cluttern from named argument handling

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

03/18/05 13:21:08 -- jplevyak

Log message:
	Fixed a bug in handling named arguments which are constants.
	Fixed a bug in the way destructured arguments are handled.

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 

---------------------------------------------------------------------------

03/18/05 13:27:08 -- jplevyak

Log message:
	Changed to:
	
	deitz
	
	This test will work if CONSTRUCTOR_WITH_PARAMETERS is undefined.
	However, lots of other tests will fail because the wrapper which
	is created doesn't return the result of the call to the
	wrapped function.
	
	The result is that "void" is coming back from the "construct" wrapper:
	
	b:compiler [649] % chpl ../test/classes/bradc/noinit.chpl
	noinit.chpl:9: unresolved member 'x'  class 'void'
	noinit.chpl:10: unresolved member 'y'  class 'void'
	noinit.chpl:11: unresolved member 'x'  class 'void'
	noinit.chpl:11: expression has no type
	noinit.chpl:11: unresolved member 'y'  class 'void'
	noinit.chpl:11: expression has no type
	fail: fatal error, program does not type
	
	The IF1 code is:
	
	(SYMBOL (var "_construct_pair" 592) :TYPE_KIND FUN :TYPE (var "_construct_pair" 592) :HAS ((var "_construct_pair" 599)) :RET (temp 596) :CONT (temp 595) :GLOBAL true :CODE
	 (CONC
	  (MOVE (const "0.0" 597) (var "_default_param_temp_y" 593))
	  (MOVE (const "0" 526) (var "_default_param_temp_x" 594))
	  (SEND (FUTURE (temp 598)) (var "_construct_pair" 196) (var "_default_param_temp_x" 594) (var "_default_param_temp_y" 593))
	  (MOVE (var "void" 138) (temp 596))
	  (SEND (var "reply" 1) (temp 595) (temp 596))))
	
	which is returning "void"
	
	I am assuming this is Steve's problem... if it isn't assign it back to me :)

Modified files:
	chapel/test/classes/deitz/: test_class3.future 

---------------------------------------------------------------------------

03/18/05 13:40:19 -- jplevyak

Log message:
	Changed to:
	
	deitz
	
	record of record is not working
	
	The problem here is that buildClassConstructorsEtc is
	not calling the constructor for the embedded record.
	Analysis is using the constructor call to setup the
	type information, so even if we don't want to make
	a full "__new" call we could make an "__init" call
	with the embedded type to tell analysis what it is.
	Basically I would like a hook so that I can initialize
	the type of "coordinates".
	
	I am passing this back to Steve to make the call
	to the sub-constructor.  If we want to handle this
	some other way, let's talk about it.

Modified files:
	chapel/test/classes/deitz/: test_nested_record1.future 

---------------------------------------------------------------------------

03/18/05 13:57:10 -- jplevyak

Log message:
	in analysis.h there is a new function:
	void structural_subtypes(Type *t, Vec<Type *> subtypes);
	which tells which things are structural subtypes of others.
	If two things are mutually structural subtypes of each other
	then they are equivalent.
	Updated .future files for Steve to use the above function.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/test/classes/jplevyak/: record_equal-1.future 
	                               record_equal-2.future 

---------------------------------------------------------------------------

03/18/05 13:58:44 -- shannon

Log message:
	Added functionality to the memory wrapper functions with
	the addition of a table that stores the address, number,
	size, and description of allocated memory.  This
	information will eventually be made available to the chpl
	programmer per runtime flags.
	
	Specifically:
	
	* chplmem.c:  Added the data structure, memTableEntry, to
	  hold memory information which is then stored in a table
	  (hashed per memory address).  Added the usual hash table
	  functions.  Modified _chpl_free to delete the memory
	  information from the table.  Modified _chpl_realloc
	  so that if a new pointer is returned the prior entry is
	  removed from the table.  Also modified _chpl_realloc so
	  that if memory of size 0 is requested the address is
	  freed.
	
	* Added some tests.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/runtime/include/: chplmem.h config.h stdchpl.h 
	chapel/runtime/src/: Makefile chplmem.c chpltypes.c config.c 
	                     main.c 
Added files:
	chapel/runtime/include/: chplmem_tests.h 
	chapel/runtime/src/: chplmem_tests.c 
	chapel/test/memory/shannon/: freedMalloc.chpl freedMalloc.good 
	                             freedWithoutMalloc.chpl 
	                             freedWithoutMalloc.good 
	                             mallocOutOfMemory.chpl 
	                             mallocOutOfMemory.good 
	                             reallocWithoutMalloc.chpl 
	                             reallocWithoutMalloc.good 
	                             reallocZeroSize.chpl 
	                             reallocZeroSize.good 

---------------------------------------------------------------------------

03/18/05 14:15:38 -- jplevyak

Log message:
	OK, now I only include in the map those positions which are different.
	So now both tests have 2 mappings.  This also eliminates the mapping for
	the function name (which never changes).  However, argument numbering
	still starts at 2.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/test/functions/deitz/: test_named_param3.future 

---------------------------------------------------------------------------

03/18/05 15:13:58 -- jplevyak

Log message:
	The reorder map now contains all arguments instead of just the
	ones that changed.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

03/18/05 15:28:10 -- deitz

Log message:
	Implemented FnSymbol::order_wrapper to create wrapper functions for
	named parameters.
	
	Removed futures for test_named_param2 and test_named_param3.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/functions/deitz/: test_named_param3.good 
Removed files:
	chapel/test/functions/deitz/: test_named_param2.future 
	                              test_named_param3.future 

---------------------------------------------------------------------------

03/18/05 15:59:36 -- deitz

Log message:
	Improved support for nested records so that within the constructor to
	the outer instance, the constructor to the inner instance is called.
	
	Removed future for test_nested_record1.
	
	Added a new test test_nested_record2 that creates the same nested
	record but then uses == on it.  It passes.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/classes/deitz/: test_nested_record1.good 
Added files:
	chapel/test/classes/deitz/: test_nested_record2.chpl 
	                            test_nested_record2.good 
Removed files:
	chapel/test/classes/deitz/: test_nested_record1.future 

---------------------------------------------------------------------------

03/18/05 16:57:00 -- deitz

Log message:
	Regarding test_class3.future:
	
	The default_wrapper now returns whatever the function returns.  This
	helps with constructors.
	
	John, can you take a look at this by uncommenting
	CONSTRUCTOR_WITH_PARAMETERS again.  Now we are really close on the
	other tests, ex. test_class1.chpl, but the actual call to the
	constructor is still made to the constructor not the wrapper.  I think
	this may have something to do with resolving the symbol before
	analysis rather than using an UnresolvedSymbol.  I can do that, but
	then the problem is that analysis can't resolve it.  This is in
	specializeParenOpExprs.cpp:24.  If you change the reference from "fn"
	to new UnresolvedSymbol(fn->name).
	
	I was thinking of making it a MemberAccess too where the base is the
	typesymbol for the class.  This is inline with how constructors should
	work Classname.constructor, but that doesn't work either.  How do you
	think we should handle this.  Feel free to take a look at it if you
	want.  Otherwise we can go through it Monday.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

03/21/05 09:18:19 -- deitz

Log message:
	Added a commented out #define in specializeParenOpExprs.cpp:7. If this
	is uncommented, the constructor call is an unresolved symbol.  John,
	is this the right approach?  Analysis balks at this unresolved symbol
	and I'm not sure why.

Modified files:
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

03/21/05 10:53:30 -- deitz

Log message:
	In the commented-out section of this code, constructors are now
	MemberAccesses where the base is the TypeSymbol of the class.

Modified files:
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

03/21/05 11:01:46 -- deitz

Log message:
	Added high-level support for eliding the parentheses of methods that
	take no arguments.  Added error-checking to make sure parentheses are
	not elided in functions that are not methods.
	
	Added a test case for ? at the end of functions.
	
	This doesn't completely work yet because analysis seems to mark the
	method as being dead.  I left the future for test_method_noparens for
	John.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: methodsToFunctions.cpp 
	                             removeDeadSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_bad_function_noparens.chpl 
	                            test_bad_function_noparens.good 
	                            test_method_noparens.chpl 
	                            test_method_noparens.future 
	                            test_method_noparens.good 
	chapel/test/trivial/deitz/: test_function_question_mark.chpl 
	                            test_function_question_mark.good 

---------------------------------------------------------------------------

03/21/05 11:16:55 -- deitz

Log message:
	Added support for != over records using an automatically-generated !=
	function that wraps around the == function.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_equal2.chpl 
	                            test_record_equal2.good 

---------------------------------------------------------------------------

03/21/05 11:22:58 -- jplevyak

Log message:
	Fixed SEGV when NO_RESOLVE_CONSTRUCTOR and CONSTRUCTOR_WITH_PARAMETERS is set.
	The function _constructor_foo still isn't found.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/21/05 14:16:30 -- deitz

Log message:
	Added a new pass InsertElidedLoops that inserts forall loops around
	statements like array assignment.  This should eventually do something
	for sequence assignment too, I imagine.
	
	This fixes test_array_assign2.  I added a new test test_array_assign3
	that tries to assign arrays by writing A = B + C.  This fails in
	analysis so I handed the future to John.  I'm pretty sure I know what
	he is going to say but not completely.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	chapel/test/arrays/deitz/: test_array_assign3.chpl 
	                           test_array_assign3.future 
	                           test_array_assign3.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_assign2.future 

---------------------------------------------------------------------------

03/21/05 14:18:51 -- deitz

Log message:
	Passing these futures onto John.
	
	If you uncomment ANALYSIS_MATCH and ignore what it says about the main
	and __init functions, there seem to be problems related to the cloned
	classes.  Their members don't seem to get a type, for one.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class2.future 
	                                         test_clone_class2a.future 

---------------------------------------------------------------------------

03/21/05 15:46:40 -- deitz

Log message:
	Improved support for multi-dimensional anonymous domains and removed
	test_anon_domain2.future.  The rank of the anonymous arithmetic domain
	is now computed based on the number of SimpleSeqExprs in the Expr list.

Modified files:
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_anon_domain2.future 

---------------------------------------------------------------------------

03/21/05 16:23:57 -- jplevyak

Log message:
	Removed unnecessary code (old BREAK and CONTINUE code).
	Hacked IF1 translation to treat VARIABLE->var == SYMBOL_TYPE
	differently when it is part of a MEMBER_ACCESS.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/21/05 17:00:18 -- jplevyak

Log message:
	Add support for pointwise array operations (except == and != which I am not
	clear on).
	Removed the .future for the basic array addition test.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
Removed files:
	chapel/test/arrays/deitz/: test_array_assign3.future 

---------------------------------------------------------------------------

03/21/05 17:55:19 -- jplevyak

Log message:
	Fixup 0-arity member function calls.  Really need to have this clarified
	by David, but I am doing a checkin to get the CVS record.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
Removed files:
	chapel/test/classes/deitz/: test_method_noparens.future 

---------------------------------------------------------------------------

03/21/05 18:38:28 -- bradc

Log message:
	Added the ability to specify a test-specific timeout
	value (e.g., foo.timeout for a test foo.chpl), in
	addition to the current directory-specific timeout
	(using a TIMEOUT file), and added such a timeout
	value for the compSampler test.  Didn't do anything to
	make the timeout valgrind-specific vs. not (could
	either have timeout files list two timeout values,
	or we could have different files for the different
	types).

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/trivial/shannon/: compSampler.timeout 

---------------------------------------------------------------------------

03/22/05 09:48:53 -- deitz

Log message:
	Added codegenPrototype routines for arrays, classes, records, and
	unions.  This allows these to be declared after they are used.  This
	currently shows up because of the way arrays are created but could
	show up if the user declares them after they are used.
	
	Improved support for arrays of records/classes/unions.  The test for
	array of records test is currently failing in analysis, but the test
	of an array of classes passes.
	
	Fixed a bug in the _INIT_ARRAY macro which would fail if the domain or
	array were named "d" because it used a local variable named d as well.
	This local variable is now called "__dim".

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             resolveSymbols.cpp 
	chapel/runtime/include/: array.h 
Added files:
	chapel/test/arrays/deitz/: test_array_of_class1.chpl 
	                           test_array_of_class1.good 
	                           test_array_of_record1.chpl 
	                           test_array_of_record1.future 
	                           test_array_of_record1.good 

---------------------------------------------------------------------------

03/22/05 09:59:19 -- deitz

Log message:
	With this checkin change, if CONSTRUCTOR_WITH_PARAMETERS is
	uncommented, the constructors will be built in the scope of the class
	(visible wherever the class is).

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/22/05 10:27:18 -- deitz

Log message:
	Decoupled the creation of the != record function from the == record
	function.  It no longer negates the results of a call to == but rather
	creates a different function from scratch.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/22/05 11:02:44 -- jplevyak

Log message:
	Fix arrays of records and remove the .future file.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_array_of_record1.future 

---------------------------------------------------------------------------

03/22/05 11:55:08 -- jplevyak

Log message:
	Added support for destructuring tuples in assignment.
	Added simple test cases for this for 1 and 2 levels.
	2 levels failed, put in .future for Steve.
	Removed .futures for 2 of the test_tuple_simpleX cases.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	                           pattern.cpp 
	chapel/compiler/include/: fa.h geysa.h map.h 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
Added files:
	chapel/test/types/tuple/jplevyak/: destruct-1.chpl 
	                                   destruct-1.good 
	                                   destruct-2.chpl 
	                                   destruct-2.good 
Removed files:
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple2.future 

---------------------------------------------------------------------------

03/22/05 11:55:13 -- bradc

Log message:
	Improved BoehmGC configure script to no longer
	assume that presence of valgrind implied the
	presence of a valgrind include directory.  This
	should fix Roxana's build since her valgrind
	installation didn't seem to include the include
	paths.
	
	John, as a sanity check, is your valgrind include
	a sibling of your binary?  Which is to say:
	
		.../bin/valgrind
		.../include/valgrind/*.h

Modified files:
	chapel/third-party/boehmgc/gc6.3/: configure 

---------------------------------------------------------------------------

03/22/05 13:34:08 -- deitz

Log message:
	Reordered pre-analysis normalizing passes in passlist so that
	anonymous types are inserted before class constructors etc. are
	created.
	
	Added creation of overloaded assignment operator for tuple types in
	BuildClassConstructorsEtc.
	
	Removed parsing of ForLoops without indices: "[D] ....;"
	
	Started work on getting arrays to initialize their values, post-analysis.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertVariableInitializations.cpp 
	                             resolveOverloadedOperators.cpp 

---------------------------------------------------------------------------

03/22/05 15:33:53 -- deitz

Log message:
	Added initial support for initializing arrays.
	
	Added three test cases.  The second test case fails because in
	something like
	  var a : [i, j in 1..n, 1..n] integer = (i - 1) * n + j;
	we have trouble resolving i and j to be part of the scope from the
	type.

Modified files:
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	                             insertVariableInitializations.cpp 
Added files:
	chapel/test/arrays/deitz/: test_array_init1.chpl 
	                           test_array_init1.good 
	                           test_array_init2.chpl 
	                           test_array_init2.future 
	                           test_array_init2.good 
	                           test_array_init3.chpl 
	                           test_array_init3.good 

---------------------------------------------------------------------------

03/22/05 16:28:34 -- deitz

Log message:
	Added two more variations of Jacobi.  One fails in analysis.

Added files:
	chapel/test/arrays/deitz/: jacobi2.chpl jacobi2.good 
	                           jacobi3.chpl jacobi3.future 
	                           jacobi3.good 

---------------------------------------------------------------------------

03/22/05 17:10:07 -- deitz

Log message:
	Fixed parsing of ForallExpr to create VarSymbol indexes (currently of
	type integer).
	
	Changed the traversal over VarSymbols if the type is an array so that
	we can traverse the domain (for the index symbols).
	
	This fixes arrays_deitz_init2 which now fails in analysis.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

03/22/05 17:10:49 -- deitz

Log message:
	Passed future to John.

Modified files:
	chapel/test/arrays/deitz/: test_array_init2.future 

---------------------------------------------------------------------------

03/22/05 17:15:12 -- jplevyak

Log message:
	Add future test, codegen fails so I sent it to Steve.

Added files:
	chapel/test/types/tuple/jplevyak/: destruct-2.future 

---------------------------------------------------------------------------

03/22/05 17:31:53 -- bradc

Log message:
	Modified Roxana's future test a bit -- moved test from
	.future file to .chpl file and added some output so we
	could be more confident it worked properly.  Wrote a
	.future file (Roxana, the .future file is a way of
	tagging a .chpl test to indicate that it isn't expected
	to work yet but that we hope it will someday.  Take a
	look at what I've done and let me know if it's unclear.
	I noticed this only because I was about to check in my
	copy of your test and noticed that you had already done
	so.

Modified files:
	chapel/test/trivial/roxana/: test_dead_var_decl.future 
Added files:
	chapel/test/trivial/roxana/: test_dead_var_decl.chpl 
	                             test_dead_var_decl.good 

---------------------------------------------------------------------------

03/22/05 17:42:14 -- bradc

Log message:
	Checking in some future tests that have been hanging
	around in my directory, and which represent work I
	want to do in the next week or so.

Added files:
	chapel/test/classes/bradc/: writeclass.chpl writeclass.future 
	                            writeclass.good writeclass2.chpl 
	                            writeclass2.future writeclass2.good 
	                            writeclass3.chpl writeclass3.future 
	                            writeclass3.good 

---------------------------------------------------------------------------

03/22/05 17:59:51 -- bradc

Log message:
	Added a bunch of entry point tests that I had
	laying around before we had the future mechanism.
	These are all in my name and low priority.

Added files:
	chapel/test/trivial/bradc/entrypoint/: main2.chpl main2.future 
	                                       main2.good twomains2.chpl 
	                                       twomains2.future 
	                                       twomains2.good 
	                                       twomains2a.chpl 
	                                       twomains2a.future 
	                                       twomains2a.good 
	                                       wrongmain.chpl 
	                                       wrongmain.future 
	                                       wrongmain.good 

---------------------------------------------------------------------------

03/22/05 18:13:21 -- bradc

Log message:
	Checking in some initial work on implementing the
	"nil" keyword, as well as some minor text cleanups
	and stuff like that.  For the most part this is a
	placeholder check-in.  Updated my test that I was
	working on, but it still isn't ready to be a non-
	future.
	
	The one substantive change is that I changed the
	interface to Symboltable::lookupInternal() to
	take one of SCOPE_INTRINSIC, SCOPE_INTERNAL_PRELUDE,
	or SCOPE_PRELUDE rather than the boolean (which
	selected between the latter two) as before.  The
	default is SCOPE_INTERNAL_PRELUDE (as before).

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/functions/bradc/: intents-classes4.chpl 
	                              intents-classes4.good 

---------------------------------------------------------------------------

03/23/05 10:22:57 -- bradc

Log message:
	Added a new Type class NilType and a single
	instance of it (stored in dtNil) to represent
	the type of the "nil" symbol.  Put some
	empty cases in analysis so that it wouldn't
	choke on existing code.  This new type largely
	serves as a sentinel type until we come up
	with something better to do (unless this is
	sufficient for all time, of course :)
	
	Currently, I'm following  this path in order
	to support default initializers of classes
	(which are nil and seem to be working), as
	well as the ability to compare against nil,
	as in functions/bradc/intents-classes4.chpl,
	a future that is almost working.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/trivial/bradc/entrypoint/: .cvsignore 
	chapel/test/trivial/roxana/: .cvsignore 

---------------------------------------------------------------------------

03/23/05 11:15:37 -- deitz

Log message:
	Fixed a bug in which VarSymbols were not copied with callbacks to
	analysis.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 

---------------------------------------------------------------------------

03/23/05 11:37:34 -- deitz

Log message:
	Added a couple of tuple tests that declare tuples without explicit
	types.  These fail in analysis.

Added files:
	chapel/test/types/tuple/deitz/: test_tuple_simple6.chpl 
	                                test_tuple_simple6.future 
	                                test_tuple_simple6.good 
	                                test_tuple_simple7.chpl 
	                                test_tuple_simple7.future 
	                                test_tuple_simple7.good 

---------------------------------------------------------------------------

03/23/05 11:37:55 -- bradc

Log message:
	Made some small changes to the renameOverloadedFunctions
	traversal -- changed it from a Traversal to a SymtabTraversal
	in order to make it more efficient  (SymtabTraversals didn't
	exist when it was first written).  Also made sure that it
	doesn't rename the entry point main().

Modified files:
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/symtab/: renameOverloadedFunctions.cpp 
	                         renameOverloadedFunctions.h 
Removed files:
	chapel/compiler/traversals/: renameOverloadedFunctions.cpp 
	                             renameOverloadedFunctions.h 

---------------------------------------------------------------------------

03/23/05 12:17:10 -- deitz

Log message:
	Added support for arrays of arrays.  Added one test case that fails in
	analysis.

Modified files:
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
Added files:
	chapel/test/arrays/deitz/: test_array_of_array1.chpl 
	                           test_array_of_array1.future 
	                           test_array_of_array1.good 

---------------------------------------------------------------------------

03/23/05 13:17:08 -- deitz

Log message:
	Added future tests for sequences and complex variables.  Following
	suit of Brad, these are my personal futures.

Modified files:
	chapel/test/types/complex/bradc/: .cvsignore 
Added files:
	chapel/test/types/complex/deitz/: .cvsignore test_complex1.chpl 
	                                  test_complex1.good 
	                                  test_complex2.chpl 
	                                  test_complex2.future 
	                                  test_complex2.good 
	chapel/test/types/seq/deitz/: .cvsignore test_seq1.chpl 
	                              test_seq1.future test_seq1.good 
	                              test_seq2.chpl test_seq2.future 
	                              test_seq2.good test_seq3.chpl 
	                              test_seq3.future test_seq3.good 
	                              test_seq4.chpl test_seq4.future 
	                              test_seq4.good test_seq5.chpl 
	                              test_seq5.future test_seq5.good 
	                              test_seq6.chpl test_seq6.future 
	                              test_seq6.good test_seq7.chpl 
	                              test_seq7.future test_seq7.good 
	chapel/test/types/tuple/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

03/23/05 13:24:17 -- deitz

Log message:
	Added another array of record test for John to look at:
	test_array_basic1.
	
	Added the last two of my local future tests.

Added files:
	chapel/test/arrays/deitz/: test_array_basic1.chpl 
	                           test_array_basic1.future 
	                           test_array_basic1.good 
	chapel/test/functions/deitz/: test_operator_overloading2.chpl 
	                              test_operator_overloading2.future 
	                              test_operator_overloading2.good 
	chapel/test/types/tuple/deitz/: test_tuple_of_tuples.chpl 
	                                test_tuple_of_tuples.future 
	                                test_tuple_of_tuples.good 

---------------------------------------------------------------------------

03/23/05 14:18:26 -- bradc

Log message:
	Updating a future that isn't working due
	to lack of support for array parameters
	that specify an anonymous domain.  This
	isn't at all a priority to fix, but I
	wanted to keep track of why its failing.
	
	Wrote a new version of the test that
	tests what this test was really meant
	to test -- which is: what happens when
	one main function is provided but it
	takes arguments (answer: it is not
	treated as the entry point).

Modified files:
	chapel/test/trivial/bradc/entrypoint/: wrongmain.chpl 
	                                       wrongmain.future 
Added files:
	chapel/test/trivial/bradc/entrypoint/: wrongmain2.chpl 
	                                       wrongmain2.good 

---------------------------------------------------------------------------

03/23/05 14:22:09 -- deitz

Log message:
	Added a test of a class with no fields.  Analysis seems to clone this
	class.  Left the future for John.

Added files:
	chapel/test/classes/deitz/: test_nomembers1.chpl 
	                            test_nomembers1.future 
	                            test_nomembers1.good 

---------------------------------------------------------------------------

03/23/05 14:40:46 -- jplevyak

Log message:
	There is now a new AST_is_used all which has the syntax of type_info but
	returns whether or not the Expr value or SymbolVar was actually used in
	the program.  A context sensitive interface allows queries of the form "is this
	symbol dead here?"

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

03/23/05 15:35:07 -- jplevyak

Log message:
	Fix test_nomembers1.  Preventing cloning in this case.
	Don't know why it should have caused a problem however.

Modified files:
	chapel/compiler/analysis/: clone.cpp 
Removed files:
	chapel/test/classes/deitz/: test_nomembers1.future 

---------------------------------------------------------------------------

03/23/05 15:36:34 -- jplevyak

Log message:
	Update future

Modified files:
	chapel/test/trivial/roxana/: test_dead_var_decl.future 

---------------------------------------------------------------------------

03/23/05 16:46:52 -- bradc

Log message:
	Added some initial support for I/O on classes (and
	types in general) via bound functions.  This isn't
	at all ready for prime-time yet, but I got enough
	done today (and it's stable enough) that I want
	to check in.  The changes were:
	
	1) Added a new SymtabTraversal insertWriteFns that
	traverses the Symboltable looking for classes that
	don't have write functions declared.  When it
	finds one, it creates a write function for it
	(albeit one that does nothing useful other than
	prove to me that it's been created -- since these
	are created after analysis, they are considered
	dead by default for now and don't get codegenerated).
	
	2) Refactored the I/O code so that it's more type-
	oriented -- rather than handling I/O for all types
	in IOExpr, pushed this code into the Type hierarchy
	for simplicity.  Eventually, it'll probably be
	removed from here as well, but for the time being,
	this made it easier to deal with.
	
	3) Added a boolean to the SymtabTraversal pass
	that allows you to skip over "internal" scopes,
	which include the intrinsic scope, the prelude
	scopes, and the common scope.  This is similar
	to the controls we already have in the normal
	Traversals to avoid certain parts of the program.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
Added files:
	chapel/compiler/symtab/: insertWriteFns.cpp insertWriteFns.h 

---------------------------------------------------------------------------

03/23/05 17:17:04 -- jplevyak

Log message:
	Updated .future file... I believe that the test is in error.

Modified files:
	chapel/test/arrays/deitz/: test_array_basic1.future 

---------------------------------------------------------------------------

03/23/05 17:50:30 -- bradc

Log message:
	Removing this future, which I believe is now resolved and
	for the right reasons.

Removed files:
	chapel/test/functions/jplevyak/scoping/: scoping-1.future 

---------------------------------------------------------------------------

03/23/05 17:59:31 -- bradc

Log message:
	Implemented a simple change that is intended to
	pass records and unions by value rather than
	parameter when they are passed with blank intent.
	It seems to work, though I haven't spent much
	time testing or looking at generated code (just
	the one future that is relying on it, so far).

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

03/24/05 09:05:04 -- bradc

Log message:
	Removing .future files for tests that are now working,
	and seemingly for the right reasons.

Removed files:
	chapel/test/classes/jplevyak/: union_type_hierarchy-1.future 
	chapel/test/trivial/bradc/entrypoint/: twomains2.future 
	                                       twomains2a.future 

---------------------------------------------------------------------------

03/24/05 14:04:48 -- deitz

Log message:
	Added test to build a linked list out of classes.  This fails because
	nil is not yet recognized by analysis.

Added files:
	chapel/test/classes/deitz/: test_class_list1.chpl 
	                            test_class_list1.future 
	                            test_class_list1.good 

---------------------------------------------------------------------------

03/24/05 14:12:20 -- deitz

Log message:
	Added initial support for sequences (literal sequence expressions and
	cruftily printing sequences).  Added new Expr subclass SeqExpr and new
	Type subclass SeqType which are sequence literals and sequence types
	respectively.
	
	SeqType is a subclass of ClassType.  This allows us to implement it as
	a class.  The strategy for sequences is to create it as a class and to
	create a node class.  This is implemented using linked lists at the
	AST level.  Note that once class cloning and class type variables are
	working we may be able to leverage that for our sequence
	implementation too.
	
	Added a new traversal expandSeqExprAssignments that expands
	assignments of literal sequences into multiple append lines.  Append
	is currently a runtime function but will eventually be a method in the
	AST of SeqType.
	
	Initialization of SeqTypes works the same as any ClassType by using
	the constructor.  The defaultVal for SeqTypes is a call to the
	constructor not nil.  However, the defaultVal for the node's class is
	still nil.
	
	Added new future to test parsing 'seq(integer)' in addition to 'seq of
	integer'.
	
	Added new sub-directory to my seq tests called noanalysis which uses
	the --noanalysis flag.  These tests now work without analysis so I'm
	putting this there so I can maintain them until they work with
	analysis.
	
	Plugged CommonModule with a stopgap measure to not print out static in
	front of its functions during codegen because these can be used in
	other modules.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symscope.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	                         internal_prelude.chpl 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassConstructorsEtc.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertVariableInitializations.cpp 
	                             scopeResolveSymbols.cpp 
	                             verifyASTType.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/types/seq/deitz/: test_seq3.chpl test_seq4.chpl 
	                              test_seq5.chpl test_seq6.chpl 
	                              test_seq7.chpl 
Added files:
	chapel/compiler/traversals/: expandSeqExprAssignments.cpp 
	                             expandSeqExprAssignments.h 
	chapel/runtime/include/: seq.h 
	chapel/test/types/seq/deitz/: test_seq1a.chpl test_seq1a.future 
	                              test_seq1a.good 
	chapel/test/types/seq/deitz/noanalysis/: COMPOPTS test_seq1.chpl 
	                                         test_seq1.good 
	                                         test_seq1a.chpl 
	                                         test_seq1a.good 
	                                         test_seq2.chpl 
	                                         test_seq2.good 

---------------------------------------------------------------------------

03/24/05 15:14:02 -- roxana

Log message:
	Added/modified IndexType. This is the type of an index of a domain. It
	could be a k-tuple integer, or a user-defined class reference (and
	everything that the specification allows for indefinite and opaque
	domains). Modified the DomainType to contain its index type. Added one
	and a half pass to add implicit index types for domains and explicit
	index types. The first is done by insertIndexType pass. The second is
	crammed into insertAnonymousTypes pass.
	
	This is not complete (especially the code generation part), since type
	support is needed.
	
	Anonymous domains are not handled -- I need to talk to Steve about how
	to handle them.

Modified files:
	chapel/compiler/traversals/: insertAnonymousTypes.h 
	                             insertAnonymousDomains.cpp 
	                             Makefile.share 
	                             insertAnonymousTypes.cpp fixup.cpp 
	chapel/compiler/main/: passlist.h passlist.cpp 
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: type.h 
Added files:
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertIndexType.h 
	chapel/test/domains/roxana/: test_index_expr.good 
	                             test_index_expr.chpl 

---------------------------------------------------------------------------

03/24/05 16:26:03 -- jplevyak

Log message:
	Added new test cases for tuple indexing.
	Added new futures for those which do not work yet.
	Made findUnknownTypes not try to find types for functions or unresolved
	  things (like writeln)
	Made ANALYSIS_MATCH check for dtUnknown and issue a INT_FATAL for return types.
	Added operator= into Vec<> in vec.h.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: vec.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
Added files:
	chapel/test/types/tuple/jplevyak/: tuple_index-1.chpl 
	                                   tuple_index-1.future 
	                                   tuple_index-1.good 
	                                   tuple_index-2.chpl 
	                                   tuple_index-2.future 
	                                   tuple_index-2.good 

---------------------------------------------------------------------------

03/24/05 16:33:29 -- deitz

Log message:
	Should this result in an ambiguity?  One is a method and one is a
	function.  I believe they both should work at the same time, but we
	should make sure we all agree.
	
	class foo {
	  var x : integer;
	  function bar() {
	    writeln("method bar ", x);
	  }
	}
	
	function bar(f : foo) {
	  writeln("function bar ", f.x);
	}
	
	var f : foo = foo();
	
	f.bar();
	bar(f);

Added files:
	chapel/test/classes/deitz/: test_mf_class.chpl 
	                            test_mf_class.future 
	                            test_mf_class.good 
	                            test_mf_record.chpl 
	                            test_mf_record.future 
	                            test_mf_record.good 

---------------------------------------------------------------------------

03/24/05 17:11:09 -- deitz

Log message:
	Added the ability to resolve overloaded functions even when
	--noanalysis is used.  Note that resolution in all but the simplest
	cases may be wrong.  It is a stopgap measure, like the --noanalysis
	flag itself, to allow me to continue supporting sequences before
	analysis.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/types/seq/deitz/noanalysis/: 
	                                         test_overload_noanalysis1.chpl 
	                                         test_overload_noanalysis1.good 

---------------------------------------------------------------------------

03/24/05 17:54:50 -- deitz

Log message:
	Fixed a couple of valgrind bugs on sequences.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/runtime/include/: seq.h 

---------------------------------------------------------------------------

03/24/05 18:18:46 -- roxana

Log message:
	Cleaned up some of the things from the previous commit. Added a
	traverse method to the Index type. Added initialization to the test
	file (I assumed that was done by default).

Modified files:
	chapel/test/domains/roxana/: test_index_expr.chpl 
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertAnonymousTypes.h 
	                             insertAnonymousTypes.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

03/24/05 18:41:01 -- bradc

Log message:
	This is strange, I could've sworn I just committed this.
	
	Was debugging some memory allocation stuff in the generated
	code tonight and realized that we're not taking very good
	advantage of Shannon's capabilities to attach descriptions
	to things, so improved the descriptions.  Classes get
	descriptions like "instance of myclass", arrays are like
	"array A", etc.  It's very lovely (and will be moreso once
	we expose hooks into it... :) for now you have to know
	what routines to insert by hand...)
	
	Added a glomstrings() routine to the runtime, similar to
	the one at compiletime, except that it uses Shannon's
	memory allocation routines, and *is*not*garbage*collected*
	(so clean up after yourself).
	
	Added a space after each argument in our generated function
	calls to improve readability of the generated code.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/runtime/include/: array.h chpltypes.h 
	chapel/runtime/src/: chpltypes.c config.c 

---------------------------------------------------------------------------

03/25/05 09:30:46 -- roxana

Log message:
	More clean up on InsertIndexType pass. Removed currentScope and
	currentStmt -- they were not used.

Modified files:
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertIndexType.h 

---------------------------------------------------------------------------

03/25/05 09:45:14 -- deitz

Log message:
	Added support for type definitions inside class types as in
	
	class foo {
	  class bar {
	    var x : integer;
	    var y : integer;
	  }
	  var b : bar = bar();
	  var z : integer;
	}
	
	This just fell out with minimal changes.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 
Added files:
	chapel/test/classes/deitz/: test_type_in_class1.chpl 
	                            test_type_in_class1.good 
	chapel/test/types/seq/deitz/noanalysis/: .cvsignore 

---------------------------------------------------------------------------

03/25/05 10:29:28 -- jplevyak

Log message:
	Add test cases for separating member functions and regular functions.

Added files:
	chapel/test/functions/jplevyak/: member-1.chpl member-1.good 
	                                 member-2.chpl member-2.future 
	                                 member-2.good 

---------------------------------------------------------------------------

03/25/05 10:40:01 -- deitz

Log message:
	Added support for like keyword as in
	
	var foo : integer;
	var bar like foo;
	
	This creates a new Type LikeType.  It is removed after analysis when
	the type of the expression is known.  Passed the future to John as it
	works without analysis.

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/compiler/symtab/: removeLikeTypes.cpp removeLikeTypes.h 
	chapel/test/types/like/deitz/: .cvsignore test_like1.chpl 
	                               test_like1.future test_like1.good 

---------------------------------------------------------------------------

03/25/05 11:24:37 -- deitz

Log message:
	Implemented for over sequences as in 'for e in s do'.  Currently, as
	with other for loop statements and forall expressions, e is assumed to
	an index.  This is going to have to be set to dtUnknown and resolve
	after and in analysis eventually.  Probably shortly as this fits in
	well with Roxana's creation of IndexType.
	
	Fixed a bug in the parser in which forall and for were basically
	parsed as forall.  Updated mg protoast tests accordingly.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/runtime/include/: seq.h 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/test/types/seq/deitz/: test_seq8.chpl test_seq8.future 
	                              test_seq8.good test_seq8b.chpl 
	                              test_seq8b.future test_seq8b.good 
	chapel/test/types/seq/deitz/noanalysis/: test_seq8.chpl 
	                                         test_seq8.good 

---------------------------------------------------------------------------

03/25/05 14:11:36 -- jplevyak

Log message:
	Implement separation between methods and non-methods.
	Fix future test for separation.
	
	Added
	
	  FORCE_RECORD_METHODS_GLOBAL
	
	to analysis.cpp.  When record methods are scoped this can be unset.
	Steve, if you want to test your change for record methods, try
	unsetting this in analysis.cpp.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: fa.h 
	chapel/test/functions/jplevyak/: member-2.chpl 
Removed files:
	chapel/test/functions/jplevyak/: member-2.future 

---------------------------------------------------------------------------

03/25/05 14:33:00 -- jplevyak

Log message:
	Fixed bug from last checking, forgot to clear method_token between
	analysis passes.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 

---------------------------------------------------------------------------

03/25/05 14:34:49 -- jplevyak

Log message:
	More tests for method/function separation

Removed files:
	chapel/test/classes/deitz/: test_mf_class.future 
	                            test_mf_record.future 

---------------------------------------------------------------------------

03/25/05 14:59:30 -- deitz

Log message:
	Fixed a #ifdef in buildClassConstructorsEtc.  By uncommenting the
	#define in buildClassConstructorsEtc.cpp and specializeParenOps.cpp,
	the constructors should be scoped outside of the class and have named
	parameters with default values.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/25/05 15:03:04 -- deitz

Log message:
	Oops. I had it right.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/25/05 15:29:45 -- jplevyak

Log message:
	Implement "nil" (the global constant) and "null" the corresponding class.
	remove the .future for the test case testing nil.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	chapel/compiler/include/: builtin_symbols.h 
	chapel/compiler/vparser/: prelude.v 
Removed files:
	chapel/test/classes/deitz/: test_class_list1.future 

---------------------------------------------------------------------------

03/25/05 17:48:02 -- bradc

Log message:
	In the spirit of "capture information gleaned by analysis
	in the AST" right after RunAnalysis is complete, I put an
	"isDead" bit in the Symbol AST hierarchy and used this to
	capture the result of the *_is_used() calls in the
	removeDeadSymbols pass, rather than calling these calls
	again at codegen.  (Doing the latter causes problems for
	new functions that have been inserted because analysis
	doesn't know about them and therefore calls them dead).
	Every Symbols isDead bit is set to false by default
	until explicitly set otherwise.
	
	In making this change, switched from a Stmt-based
	traversal to an Expr-based traversal.  The Stmt-based
	traversal revealed some problems in that the traversal
	did not reach all DefExprs, and therefore did not mark
	all dead things as dead.  It also had the problem of
	removing a DefExpr's entire Stmt, which would cause
	problem if the DefStmt included other DefExprs or
	the DefExpr included other symbols.
	
	The Expr-based traversal fixes the first problem, but
	not the second -- entire statements are still ripped
	out.
	
	An alternate and simpler version is checked in with
	this that uses the new AST_is_used() call.  However,
	this over-aggressively prunes out things in the
	common module, and we don't seem to have an easy way
	to tell a traversal to skip over the common module,
	so it doesn't work yet and is #ifdefed out.
	
	In doing all this, realized that what we really want
	this to be is a Symtab traversal, so I wrote this
	version, which also uses the AST_is_used call.  Here,
	the common module is skipped over as appropriate.
	However, the call says that several live variables
	are dead, so this version doesn't work either.
	Ultimately, this is the version that probably ought
	to live on.  For that reason, I called the file
	removeDeadSymbols (since CVS is bad at file renaming),
	but the traversal itself is called removeDeadSymbols2
	to avoid conflicts for now.
	
	As a minor change, I also hoisted the exportMe bit
	out of the FnSymbol and into the Symbol hierarchy,
	though I didn't change its use at all.  This is
	something we've talked about doing for awhile.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: removeDeadSymbols.cpp 
	                             removeDeadSymbols.h 
	chapel/test/Bin/: nightly 
Added files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	                         removeDeadSymbols.h 

---------------------------------------------------------------------------

03/25/05 18:54:38 -- roxana

Log message:
	Added a test for index assignment. Modified the traversals so
	that it passes.

Modified files:
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertAnonymousTypes.cpp 
Added files:
	chapel/test/domains/roxana/: test_index_assign.good 
	                             test_index_assign.chpl 

---------------------------------------------------------------------------

03/28/05 10:32:43 -- deitz

Log message:
	Added a new pass ComputeVisibleFunctions that stores in every SymScope
	a set called visibleFunctions that stores the functions that are
	visible in that scope.  This includes every function defined in that
	scope, every method defined in a record and union that is defined in
	that scope, every visible function in a parent scope, and all class
	methods.
	
	John, let me know if you can use this.  To get all visible functions
	where a symbol is defined, use symbol->parentScope->visibleFunctions.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share symscope.cpp 
Added files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         computeVisibleFunctions.h 

---------------------------------------------------------------------------

03/28/05 11:24:52 -- jplevyak

Log message:
	Interm checkin for computeVisibleFunctions.... changes Vec to Map.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: symscope.cpp 
Added files:
	chapel/test/functions/jplevyak/scoping/: visibility-1.chpl 
	                                         visibility-1.future 
	                                         visibility-1.good 

---------------------------------------------------------------------------

03/28/05 12:00:53 -- deitz

Log message:
	Added support for finding visible functions in the internal prelude.

Modified files:
	chapel/compiler/symtab/: symscope.cpp 

---------------------------------------------------------------------------

03/28/05 12:21:22 -- deitz

Log message:
	Added a working test case that declares a type alias inside a class.

Added files:
	chapel/test/classes/deitz/: test_type_in_class2.chpl 
	                            test_type_in_class2.good 

---------------------------------------------------------------------------

03/28/05 12:26:03 -- deitz

Log message:
	Added a class called _seq to the internal prelude.  I copy this to
	implement sequences now rather than build my own.  I also added a
	bunch of commented out functions which I'll eventually copy but don't
	yet.
	
	Simplified the code to finish creating sequence types.  It now copies
	_seq from the internal prelude.
	
	Removed some old code and cleaned up class codegen.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

03/28/05 14:21:29 -- jplevyak

Log message:
	Turn on interprocedural constant propagation.  Removed constants from
	the "types" before cloning and from the results reported in type_info().
	The constant information is now available from constant_info() and symbol_info().
	Currently, analysis only records when something has exactly 1 possible constant
	value.  This can be changed on the command line.  However, this makes it possible
	to clone for constants on a formal parameter by formal parameter basis, and this
	capability is used to permit tuple indexing to work with manifest constants
	since tuple indexing is implemented as a member function of tuples.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: fa.h 
	chapel/test/flowanalysis/jplevyak/constants/: 
	                                              constant_folding.good 
	chapel/test/types/tuple/jplevyak/: tuple_index-2.future 

---------------------------------------------------------------------------

03/28/05 15:04:29 -- bradc

Log message:
	Implemented default I/O for classes, records, and unions.
	These currently print out as follows:
	
	record myrecord {
	  var c: integer;     =>     (c=1, d=1.2)
	  var d: float;
	}
	
	union myunion {
	  var e: integer;     =>     (uninitialized)
	  var f: float;       OR:    (e=1)
	}                     OR:    (f=1.2)
	
	class myclass {
	  var a: integer;     =>     nil
	  var b: float;       OR:    {a=1, b=1.2}
	}
	
	Feedback on these print formats would be appreciated; they
	can easily be changed.  The record format was chosen because
	it seemed it was so close to the record literal format; since
	unions are also value types but can only have one active field
	at a time, a similar format was used there, with the somewhat
	ugly "(uninitialized)" standing in for a union that has never
	been assigned.  The class format was meant to be distinguishable
	from the record format but similar.  Another approach would be
	to generate them as myclass(a=1, b=1.2) so it looked more like
	a constructor...
	
	The intention is to support the user's ability to over-ride
	these defaults by defining their own bound write() function,
	but this doesn't work yet.  Once it does, the default format
	matters somewhat less as long as its clear and succinct enough
	that people might use it when they're being lazy.
	
	These functions are currently added after analysis has run
	so that we can be sure about the types of everything.  Eventually,
	we will probably want to move this before analysis and convert
	IOCalls into dispatches to write() methods in order to have
	analysis include the write() methods as part of its dead
	code analysis.
	
	Added a bunch of tests, many of which are futures, but I'll
	mail people about those separately.
	
	This check-in includes a few incidental changes:
	
	- added a new runtime union macro -- _UNION_CHECK_QUIET()
	  that performs the union safe read check without generating
	  an error if it's mismatched.  This can be used to create
	  if-then-else's that check for all the union's cases
	  without generating errors.  Also rewrote _UNION_CHECK()
	  to use _UNION_CHECK_QUIET() in its definition and to
	  write its error to stderr rather than stdout.
	
	- added a new state to unions which indicates that they
	  are uninitialized so that we can distinguish this case
	  from a union whose memory just happens to be initialized
	  to zero.  Interestingly, I was guessing that this would
	  result in a valgrind error, as I don't think we currently
	  set a union's enum to 0, yet it didn't...  ?
	
	- refactored Steve's codegenIOCall() for sequences to be a
	  method of sequence rather than a dynamic cast within
	  ClassType
	
	- added a method that supports the ability to tack on an
	  "else" clause to a CondStmt after it has been constructed
	  in order to build cascading if-then-else's easily.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: stmt.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: insertWriteFns.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/runtime/include/: union.h 
	chapel/test/classes/bradc/: writeclass.chpl writeclass.good 
	                            writeclass2.future writeclass3.chpl 
	                            writeclass3.good 
Added files:
	chapel/test/classes/bradc/: myrecord1a.good myrecord1b.good 
	                            writeclass1a.chpl 
	                            writeclass1a.future 
	                            writeclass1a.good writeclass1b.chpl 
	                            writeclass1b.future 
	                            writeclass1b.good writeclass2a.chpl 
	                            writeclass2a.future 
	                            writeclass2a.good writerecord.chpl 
	                            writerecord.good writerecord1a.chpl 
	                            writerecord1a.future 
	                            writerecord1a.good 
	                            writerecord1b.chpl 
	                            writerecord1b.future 
	                            writerecord1b.good writerecord2.chpl 
	                            writerecord2.future 
	                            writerecord2.good 
	                            writeunion-workaround.chpl 
	                            writeunion-workaround.good 
	                            writeunion.chpl writeunion.future 
	                            writeunion.good 

---------------------------------------------------------------------------

03/28/05 15:37:11 -- jplevyak

Log message:
	Use new visibility calculations.... however the new
	calculation doesn't take into account shadowing of functions with
	identical signatures.   Currently I have this assigned to Steve, but
	if he wants to punt it to me we are going to have to give all functions
	in the program a "priority" which indicates how close they are.  That
	is assuming that functions with identical signatures in the same scope
	is not an error.  In that case perhaps it would be best done during
	visibileFunctions() calculation since that has access to the actual
	scoping.   Alternatively we could tag functions with their scoping
	depth as well as their priority and I could issue an error when
	I do the visibility lookup, however this would only occur if the function
	was used, so it would permit erroneous programs where bogus functions
	defintions could persist assuming that they were never called.
	This is the case with other sorts of ambiguous calls though so it
	might now be so bad.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/28/05 15:37:43 -- jplevyak

Log message:
	Shadowing not taken into account.

Modified files:
	chapel/test/functions/jplevyak/scoping/: visibility-1.future 

---------------------------------------------------------------------------

03/28/05 16:41:39 -- jplevyak

Log message:
	Fix .future for foralls in initialization

Modified files:
	chapel/test/arrays/deitz/: test_array_init2.future 

---------------------------------------------------------------------------

03/28/05 16:50:17 -- deitz

Log message:
	This checkin changes the indices in ForallExprs, the indices in
	ForallLoops, and the variables in LetExprs to be defined within
	DefExprs rather than to have symbols right there.  It paves the way
	for defPoint to be a DefExpr* rather than a BaseAST*.
	
	Fixed a bug in the traversal of sequences.
	
	Added ability to print out integer literal in print_view function.
	
	Updated mg-seq etc protoast tests because the indices in a for loop
	are now printed out as variable definitions.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertElidedLoops.cpp 
	                             insertVariableInitializations.cpp 
	                             transformLetExprs.cpp view.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good test.good 

---------------------------------------------------------------------------

03/28/05 17:20:19 -- deitz

Log message:
	Made Symbol::defPoint DefExpr* rather than BaseAST* and removed
	numerous unnecessary dynamic casts.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertThisParameters.cpp 
	                             resolveOverloadedOperators.cpp 

---------------------------------------------------------------------------

03/28/05 17:45:59 -- bradc

Log message:
	Fixed up the processParameters pass so that we
	would be a bit more conservative about where
	parameter temps are inserted.  In particular,
	we previously weren't taking advantage of the
	fact that C's pass-by-value semantics would
	create a copy for us for scalar values passed
	by in and const, so were creating additional
	unnecessary copies.  This tries to cut down
	on such copies.
	
	There is still some low-hanging fruit that
	could be caught here.  In particular, when
	passing strings around, we have to
	conservatively create copies of them in
	case there are aliases to them in other
	parameters or via globals.  In many cases
	(such as the description strings to our
	memory allocation functions), we know that
	this won't be the case, and could avoid
	the temps, but currently don't.  Maybe this
	will be the point where I resort to using
	a pragma?  Shudder...

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: processParameters.cpp 

---------------------------------------------------------------------------

03/28/05 18:00:21 -- bradc

Log message:
	Continuing to improve parameter passing, marked parameters
	that we implement using pointers (inout for scalars, e.g.)
	as being const in hopes of providing more information to
	the back-end C compiler.  Being able to mark them restrict
	would be even better, but would of course require more
	aliasing analysis than we currently have (or at least,
	than I currently know about).

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

03/28/05 18:35:38 -- jplevyak

Log message:
	new test case

Added files:
	chapel/test/arrays/jplevyak/: ranks-1.chpl ranks-1.future 
	                              ranks-1.good 

---------------------------------------------------------------------------

03/29/05 09:49:21 -- jplevyak

Log message:
	Fix writeclass2
	Redo the .futures of writeclass2 and writeclass2a with extended notes.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/test/classes/bradc/: writeclass2.future 
	                            writeclass2a.future 

---------------------------------------------------------------------------

03/29/05 09:54:14 -- bradc

Log message:
	Removing futures for some tests that are now working.

Removed files:
	chapel/test/classes/bradc/: writeclass.future writeclass3.future 

---------------------------------------------------------------------------

03/29/05 11:47:11 -- roxana

Log message:
	Resolved types for IndexType->idxType. Improved code
	generation for index types accordingly. However, assignments
	between index types and tuple types do not work -- because
	they are different types. Should they work? I inserted a future
	test that expresses the question. For now, the test correctly
	fails -- cannot assign tuple type to index type.

Modified files:
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertAnonymousTypes.cpp 
	chapel/test/domains/roxana/: test_index_assign.good 
	                             test_index_expr.good 
	chapel/compiler/AST/: type.cpp 
Added files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
	                             test_index_expr1.good 
	                             test_intex_expr1.future 

---------------------------------------------------------------------------

03/29/05 11:49:34 -- jplevyak

Log message:
	Move more information into the IF1 representation regarding instance
	variables and primitive types.
	Add a cloning option MERGE_UNIONS (current ON) which merges unions
	  which use different subsets of the union.
	Update .future for writeunion... now the executed code is wrong.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: sym.h 
	chapel/test/classes/bradc/: writeunion.future 

---------------------------------------------------------------------------

03/29/05 12:02:10 -- bradc

Log message:
	I made this .good file by hand and accidentally put a typo
	into it.  This test works now, thanks to John.

Modified files:
	chapel/test/classes/bradc/: writeunion.good 
Removed files:
	chapel/test/classes/bradc/: writeunion.future 

---------------------------------------------------------------------------

03/29/05 12:13:06 -- jplevyak

Log message:
	Reassigned and annotated .future files:
	
	OK, I took a look at the results with ANALYSIS_MATCH turned on, and
	they look correct to me.  We get one "warning" at line 78, but that
	is for "f" being set to a cloned type (which it should be), and
	we get one warning at line 112 which is the return type of the cloned
	construct_foo function which is now returning the new cloned type
	(which it should be).
	
	*** note: the problem is that the AST's types are not specific, sure
	    the variable is a "foo", but it is really a clone of "foo".
	    Perhaps ANALYSIS_MATCH needs to be enhanced.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class2.future 
	                                         test_clone_class2a.future 

---------------------------------------------------------------------------

03/29/05 12:53:47 -- bradc

Log message:
	Continuing to try and whip nightly regression script into
	better shape.  These changes attempt to make it not so
	hard-coded to my username:
	
	- cleaned up existing options a bit as well as help message
	  that describes them
	
	- set the CHPLHOME variable (if you don't already) to indicate where
	  your Chapel installation is
	
	- set CHPL_UW_CVS_USERNAME to indicate your pseudo-username on
	  gemelli (if you don't already)

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

03/29/05 13:29:23 -- roxana

Log message:
	Wrong name for the future test -- corrected that. Thanks to
	Steve for pointing that out.

Added files:
	chapel/test/domains/roxana/: test_index_expr1.future 
Removed files:
	chapel/test/domains/roxana/: test_intex_expr1.future 

---------------------------------------------------------------------------

03/29/05 13:51:47 -- jplevyak

Log message:
	Fix the simple case of "like" where the expression is a variable of declared type.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/types/like/deitz/: test_like1.future 

---------------------------------------------------------------------------

03/29/05 14:15:37 -- jplevyak

Log message:
	Fix initialization of arrays with scalars.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/arrays/deitz/: jacobi3.future 

---------------------------------------------------------------------------

03/29/05 14:29:41 -- deitz

Log message:
	Fixed a bug in Expr's call_fixup used when expressions are replaced.
	
	The defaultVal of record types and union types is now a call to the
	default constructor.  This causes the constructor to be called on all
	records as they are created.  However, analysis doesn't see this and
	marks the constructor as dead.  This has resulted in a few tests that
	were seemingly working now not working.  Since they were never
	working, I refuturized them.  John, let me know if you have any
	questions.  Basically, the constructor call is in the defaultVal
	expression of a type which is used by default to initialize variables.
	It is therefore not dead.
	
	Arrays now insert default and user initializations when they are
	created.  So arrays no longer have to be initialized if the default
	initialization will do.
	
	I special-cased a test for inserting the default initialization
	statement for classes within their constructor.  Since we declare a
	"this" that will be return in the constructor, it is important not to
	initialize it.  Surprisingly, doing so crashed my system multiple
	times.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertVariableInitializations.cpp 
	chapel/test/arrays/deitz/: test_array_basic1.future 
	chapel/test/classes/deitz/: test_record_equal1.chpl 
	                            test_record_equal2.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_of_record1.future 
	chapel/test/classes/bradc/: writerecord.future 
	                            writeunion-workaround.future 
	                            writeunion.future 
	chapel/test/classes/deitz/: test_record6.chpl 
	                            test_record6.future 
	                            test_record6.good 

---------------------------------------------------------------------------

03/29/05 14:39:50 -- jplevyak

Log message:
	Fixed up analysis of arrays of arrays and the .future which now crashes elsewhere.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/arrays/deitz/: test_array_of_array1.future 

---------------------------------------------------------------------------

03/29/05 14:50:01 -- bradc

Log message:
	Added a handful of .cvsignore files to the testing system
	so that *.tmp files that are left by failing tests don't
	show up in cvs -nq update listings.

Added files:
	chapel/test/arrays/jplevyak/: .cvsignore 
	chapel/test/domains/roxana/: .cvsignore 
	chapel/test/modules/bradc/manymodules/: .cvsignore 

---------------------------------------------------------------------------

03/29/05 14:56:02 -- bradc

Log message:
	Changed RemoveDeadSymbols from a Traversal
	to a SymtabTraversal in anticipation of some
	upcoming changes.  This was pretty simple
	with Steve's defpoint change from the other
	day, and the main problem was that my previous
	fix to allow SymtabTraversals to only iterate
	over user symbols was only iterating over the
	first user module (and it didn't show up until
	now since so few tests use more than one module).
	
	Some changes vaguely related to this:
	
	- made Symboltable::getModuleList() take a boolean
	  to indicate whether the person wants the user
	  module list or the complete module list.
	
	- fixed a bug with print()-ing empty BlockStmts.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/main/: passlist.cpp runpasses.cpp 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	                         removeDeadSymbols.h symtab.cpp 
	                         symtabTraversal.cpp 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: removeDeadSymbols.cpp 
	                             removeDeadSymbols.h 

---------------------------------------------------------------------------

03/29/05 15:03:07 -- jplevyak

Log message:
	Add "defaultConstructor" field to ClassType.
	Use defaultConstructor field to call constructor for record
	  types during array initialization.
	Removed .futures for two effected tests.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_array_basic1.future 
	                           test_array_of_record1.future 

---------------------------------------------------------------------------

03/29/05 15:26:02 -- jplevyak

Log message:
	Fix initialization of records using the default constructor.
	Put in a nasty kludge to prevent recursive constructor calls... need to fix
	at some point.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/classes/bradc/: writerecord.future 
	chapel/test/classes/deitz/: test_record6.future 

---------------------------------------------------------------------------

03/29/05 15:36:32 -- deitz

Log message:
	Added the constructor to the list of visible functions.  Modified
	slightly what happens with building a constructor with arguments.

Modified files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

03/29/05 15:41:30 -- jplevyak

Log message:
	update some .future files
	clean up syntax in test_index_expr1.future (name only on first line)

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.future 
	chapel/test/types/seq/deitz/: test_seq8.future test_seq8b.future 

---------------------------------------------------------------------------

03/29/05 15:51:12 -- deitz

Log message:
	Uncommented and removed ANALYSIS_MATCH from resolveSymbols.  We now
	check to make sure that analysis and the AST agree on the function
	call even if it is already resolved.
	
	There is still an ANALYSIS_MATCH in findUnknownTypes which I will look
	at.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

03/29/05 16:39:12 -- deitz

Log message:
	Added constructors for records to list of visible functions.  Added
	overloaded constructors for classes to list of visible functions.

Modified files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         symscope.cpp 

---------------------------------------------------------------------------

03/29/05 16:42:48 -- jplevyak

Log message:
	Integrated Steve's code to set the _this field in FnSymbol of constructors.
	Use the _this field to not call the constructor recursively.
	We should probably use something other than DevVar for "this", but
	  the hack presented here should suffice for now.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/29/05 17:50:22 -- deitz

Log message:
	Made a few changes to the code that builds the visible function list.
	This isn't working because the constructor is being called in the
	wrong place.

Modified files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         symscope.cpp 

---------------------------------------------------------------------------

03/30/05 10:29:49 -- deitz

Log message:
	Moved the initialization of ComputeVisibleFunctions out of its
	constructor and into a run procedure.  This is because the constructor
	is called at the beginning of compilation if the --passlist compiler
	option is not used.  Brad may change this soon and then I'll move it
	back into its constructor.  Another reason I think it is better to do
	the initialization in the constructor rather than the run is that if
	you want to use the traversal just on some section of the AST, the run
	function won't be called but the constructor will be.  In addition,
	for Symtab traversals, there are a few run functions and we don't want
	to need to replicate the initialization.  An alternative is to have an
	initialize function.
	
	Cleaned up the SymScope::setVisibleFunctions code so that the visible
	functions aren't replicated in the prelude, being copied in from both
	the intrinsic and the intrinsic via the internal prelude.
	
	Fixed a minor bug in specializeParenOpExprs in which the commented out
	constructor was created in a FnCall (and then not resolved) rather
	than in a ParenOp (and then resolved).
	
	Improved FnCall::findFnSymbol to print out error messages if it cannot
	find them all the time.
	
	Though the #defines in specializeParenOpExprs and
	buildClassConstructorsEtc remain commented out, this checkin goes a
	long way in getting named parameters to work with class constructors.
	We were really close.  There are other tests that fail, but both
	test_class1 and test_class3 in classes/deitz now work if these lines
	are uncommented.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         computeVisibleFunctions.h symscope.cpp 
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

03/30/05 11:24:22 -- jplevyak

Log message:
	Switch over to using collect_asts() instead of my hack.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/30/05 11:35:37 -- bradc

Log message:
	Tidied up my last change a bit by hoisting the flag
	about whether or not a Traversal/SymtabTraversal
	should process the internal modules/scopes into
	the Pass class to unify this behavior across the
	two class types.  This variable is now called:
	
	    whichModules
	
	and can be set to one of the values:
	                           Traversal         SymtabTraversal
	                           ----------------  ---------------
	  MODULES_USER             do user modules   do user scopes
	  MODULES_COMMON_AND_USER  do common also    do common also
	  MODULES_ALL              do internal also  do all scopes
	
	This also helped unify the way that traversals are
	invoked from the runpasses.cpp file.  One result of
	this is that the Traversal::run() routine no longer
	filters modules as it used to, because only the
	correct ones will be passed in.
	
	In doing this, I introduced a new header file chplenum.h.
	This is meant to store enumerations that straddle the
	uses of multiple header files.  Otherwise, I typically
	find myself #including code that doesn't really pertain
	(like #include-ing type.h in order to get the parameter
	intent choices).  Not all enums are intended to go here,
	just those that are used in enough contexts that they
	don't fit neatly into an existing header file.
	
	Some smaller changes:
	
	- changed a Traversal's overloaded run call to call
	  Traversal::run() rather than copying the code into
	  its body to make it more resilient down the road.
	
	- Fixed a bug in which we were keeping a pointer to
	  the wrong module as being the first user module if
	  an actual module was declared in the code rather
	  than using the file-oriented modules.
	
	- fixed some of the lingering over-tabbed code

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: pass.cpp pass.h 
	chapel/compiler/symtab/: insertWriteFns.cpp 
	                         removeDeadSymbols.cpp symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             transformLetExprs.cpp traversal.cpp 
	                             traversal.h 
Added files:
	chapel/compiler/include/: chplenum.h 

---------------------------------------------------------------------------

03/30/05 11:54:46 -- bradc

Log message:
	Improved the passlist concept so that passes are
	created (i.e., their constructors are called)
	right when they are about to be executed rather
	than at program startup time, as they had been
	previously.  There wasn't any particularly good
	reason to do it the old way except that it was
	simpler to implement at the time.  Since then,
	things have evolved such that the new way is
	just as easy, not to mention far more natural
	and logical.

Modified files:
	chapel/compiler/main/: runpasses.cpp 

---------------------------------------------------------------------------

03/30/05 11:56:56 -- jplevyak

Log message:
	"fix" writeunion/writeunion-workaround.
	I think the remaining problem is in codegen or the test itself... assigned
	  to Brad for further processing.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/classes/bradc/: writeunion-workaround.future 
	                            writeunion.future 

---------------------------------------------------------------------------

03/30/05 13:40:13 -- bradc

Log message:
	Another simple future nil test that came out
	of a discussion with John yesterday.  This
	is nothing new, just another instance of an
	existing problem and a test that seems worth
	having in the long-run.

Added files:
	chapel/test/classes/bradc/: noinit2.chpl noinit2.future 
	                            noinit2.good 

---------------------------------------------------------------------------

03/30/05 14:40:58 -- bradc

Log message:
	Fixed a simple codegen naming conflict that occurred when
	one program contained two union types, and checked in a
	test to lock in this behavior.

Modified files:
	chapel/compiler/AST/: type.cpp 
Added files:
	chapel/test/classes/bradc/unions/: twounions.chpl twounions.good 

---------------------------------------------------------------------------

03/30/05 14:42:34 -- deitz

Log message:
	Added a new runtime function _init_string that sets a string to NULL
	and then calls _copy_string.  This is used when initializing a string
	to the default value.  This will eventually fix a bug that was showing
	up with strings being initialized within classes.  (The current
	valgrind regression).  At this time, however, this initialization
	function is not being called in the constructor.
	
	I'm going to unify the building of the constructor and the
	insertVariableInitializations pass to use the same code so that the
	constructor calls the same initialization code.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

03/30/05 15:00:33 -- deitz

Log message:
	Fixed the same bug Brad just fixed except instead of adding more gunk
	to the name that caused the naming conflict, I got rid of the name
	altogether.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

03/30/05 17:47:00 -- bradc

Log message:
	This is a slightly revised implementation of
	removeDeadSymbols that "resurrects" type
	symbols that are considered dead by analysis,
	but which are necessary to code generation.
	A simple example of this would be:
	
		class myclass { ... }
	
		var c: myclass;
	
		if (c == nil) {
		  writeln("c is nil!");
		}
	
	Here, analysis considers myclass dead because
	no instantiations of it are ever made.  However,
	c is not dead, so it will be codegened to be
	a C variable of type myclass.  Yet myclass would
	not have been code generated.  So in this case,
	c's liveness causes myclass to be resurrected.
	
	Unfortunately, having written this, I think
	that my approach was too simple, as in general
	we may need to iterate until we reach a fixed
	point.  So this is a bit of a stopgap.

Modified files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	                         removeDeadSymbols.h 

---------------------------------------------------------------------------

03/30/05 18:12:52 -- bradc

Log message:
	This essentially backs out my last change and uses
	a technique that Steve suggested in which we assume
	that variables that are not dead of class types that
	are dead can only take on the value "nil" and
	therefore generate them to be void* types instead.
	I also had to squelch the generation of their I/O
	routines a bit, but overall this seems more
	satisfactory than the previous approach.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	                         removeDeadSymbols.h 

---------------------------------------------------------------------------

03/30/05 18:13:25 -- bradc

Log message:
	Changed some C++ comments in the runtime to C-style,
	to keep us strict for non-gcc backend compilers.

Modified files:
	chapel/runtime/include/: array.h chplio.h 

---------------------------------------------------------------------------

03/30/05 19:14:13 -- bradc

Log message:
	This change removes all tabs from code, replacing them
	with 8 spaces (the same as emacs windows will tend to
	show by default).
	
	We've decided to disallow the use of tabs in code for
	all Chapel source in order to make the code appear
	identical in all editors.  New code should not introduce
	new tabs.  Code should be indented using spaces, and the
	default indentation amount is two spaces per line.
	
	By default, emacs compresses groups of 8 spaces into a
	tab when you hit tab in certain editing modes, so most
	of us have been inserting tabs all along without knowing
	it.
	
	If you are an emacs user, drop the following line into
	your .emacs file *now*:
	
	     (setq-default indent-tabs-mode nil)
	
	(John, note that this is slightly different than what
	I think we mailed the other day, which only sets it
	for the current buffer).
	
	If you have modifications in progress currently, you
	will want to remove the tabs from it.  In order to
	see whether the code has tabs, do:
	
	    grep -P '\t' <filename>
	
	In order to remove the tabs from the code, you can either:
	
	   load into emacs, select the whole file (Ctrl-space then
	   Ctrl->), then do M-x untabify
	
	Or:
	
	   run expand from the unix command line on the file, piping
	   the result to a temporary file, then copying the temporary
	   file back into place (the following script does this:
	-----------------------------------------------
	#!/bin/csh
	
	if ($# == 0) then
	  echo "Usage: $0 <filename>"
	  exit 0
	endif
	
	expand $1 > /tmp/tmp.tmp && cp /tmp/tmp.tmp $1
	-----------------------------------------------
	
	If you need to do a bunch of files, put the script above
	into an exeutable location, name it tabs2spaces, and run
	a command like the following from your root chapel directory:
	
	          find compiler -name "*.cpp" -exec tabs2spaces {} \;
	
	Repeat this, replacing "*.cpp" with "*.h" and "*.c", and
	"compiler" with "runtime"
	
	I haven't yet set up a cron job to make sure new tabs aren't
	introduced into the code, but will hope to do so tomorrow.
	
	The command:
	
	    cvs diff -t <filename>
	
	may also be of use as it tends to show the diffing lines
	in a clearer manner (but does not remove the fact that
	there's a difference).

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/adt/: vec.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp cdb.h cfg.cpp 
	                           cg.cpp clone.cpp dead.cpp dom.cpp 
	                           fa.cpp fun.cpp if1.cpp inline.cpp 
	                           loop.cpp pattern.cpp prim.cpp ssu.cpp 
	                           sym.cpp 
	chapel/compiler/analysis/make_prims/: make_prims.cpp 
	chapel/compiler/backend/: beautify.cpp dump.cpp graph.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/include/: analysis.h code.h driver.h expr.h fa.h 
	                          files.h fun.h grammar.h if1.h inline.h 
	                          list.h log.h loop.h map.h pattern.h 
	                          pnode.h prim.h stmt.h sym.h symbol.h 
	                          symscope.h symtab.h type.h var.h vec.h 
	chapel/compiler/main/: arg.cpp driver.cpp runpasses.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp filesToAST.cpp 
	                         runAnalysis.cpp 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         insertWriteFns.cpp legalizeCNames.cpp 
	                         renameOverloadedFunctions.cpp 
	                         symscope.cpp symtab.cpp 
	chapel/compiler/test/: beautify.cpp files.cpp map.cpp misc.cpp 
	                       vec.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             checkSemantics.cpp 
	                             expandClassWiths.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertElidedLoops.cpp 
	                             insertFunctionTemps.cpp 
	                             insertIndexType.cpp 
	                             insertThisParameters.cpp 
	                             insertUnionChecks.cpp 
	                             insertVariableInitializations.cpp 
	                             methodsToFunctions.cpp 
	                             processParameters.cpp 
	                             resolveOverloadedOperators.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             transformLetExprs.cpp 
	                             updateSymbols.cpp 
	chapel/compiler/util/: files.cpp misc.cpp 
	chapel/compiler/vparser/: ast_cf.cpp grammar.cpp parse.cpp 
	                          parse_ast.cpp parse_ast.h scope.cpp 
	                          scope.h 
	chapel/compiler/vparser/cast/: cast.cpp 
	chapel/runtime/include/: array.h chplmem.h config.h 
	chapel/runtime/src/: arg.c chplio.c chplmem.c chplmem_tests.c 
	                     chpltypes.c config.c 

---------------------------------------------------------------------------

03/31/05 11:01:31 -- jplevyak

Log message:
	.future test for "like"

Added files:
	chapel/test/types/like/jplevyak/: like-1.chpl like-1.future 
	                                  like-1.good like-2.chpl 
	                                  like-2.future like-2.good 

---------------------------------------------------------------------------

03/31/05 11:05:50 -- roxana

Log message:
	Added the ability for a type to return something else than
	its own instance. This masks situations like with index type
	when we want to see a tuple instead of the index type.
	
	However, this does not entirely solve the problem of assigning a
	tuple to an index variable. I left the future to Steve since he is
	the one who implemented all tuple machinery.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 
	                             insertAnonymousTypes.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/domains/roxana/: test_index_expr1.future 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

03/31/05 13:14:15 -- bradc

Log message:
	Added a small script to the util/ directory that looks for
	tabs in the source code.  This must either be run from the
	chapel/ directory, or a CHPLHOME environment variable must
	be set that points to that directory.  This is going to be
	part of a nightly script that is run, but may also be good
	for people to sanity check that their code is tab-free as
	we make the transition away from tabs.

Added files:
	chapel/util/: lookForTabs 

---------------------------------------------------------------------------

03/31/05 14:48:42 -- bradc

Log message:
	Removing futures for tests that are now working (and
	seemingly for the right reasons).

Modified files:
	chapel/test/classes/bradc/: .cvsignore 
Removed files:
	chapel/test/classes/bradc/: writeclass2.future 
	                            writeclass2a.future 
	                            writerecord2.future 

---------------------------------------------------------------------------

03/31/05 14:50:52 -- bradc

Log message:
	Removing some tabs that presumably got mis-merged
	in last night's switch-over.

Modified files:
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

03/31/05 14:56:11 -- bradc

Log message:
	This is a script that will be run as a cron job
	to make sure tabs don't creep into our code.
	If it finds tabs, it'll mail chapel_dev with
	a listing of files in which they were found
	(similar to the one you just received while I
	was debugging :).  If there are no tabs, it'll
	just mail me so we have a heartbeat and know
	that it's still running properly.

Added files:
	chapel/util/: lookForTabs.cron 

---------------------------------------------------------------------------

03/31/05 15:51:40 -- jplevyak

Log message:
	Some cleanup of the way "null" is handled.
	Fixed noinit2.future test by naming "null" a subtype of "object"
	  (the superclass of all classes)

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
Removed files:
	chapel/test/classes/bradc/: noinit2.future 

---------------------------------------------------------------------------

03/31/05 16:38:37 -- roxana

Log message:
	Removed the future for the tuple to index assignment that I
	had left for Steve.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
	                             test_index_expr1.good 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/AST/: expr.cpp type.cpp 
Removed files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

03/31/05 17:12:53 -- deitz

Log message:
	This is a checkin of code that is not used by default.  There is a new
	commented out #define in passlist.h called USE_EXPR_VARINIT which if
	uncommented will use VarInitExprs as discussed below.
	
	Added a new pass called ProcessDefs that takes VarDefStmts and inserts
	default and user initialization statements into the code.  This is
	done before analysis.  Since the type of the variable may not be
	known, the expr VarInitExpr of the VarSymbol is used to mark that
	var->type->defaultVal should be used here when the defaultVal is
	known.
	
	After analysis, this replacement is done.  It is currently done in
	RemoveNamedParameters.
	
	I'm checking in so that John can get analysis going when he gets a
	chance.  I think this is going to require a little work on my end so
	I'm using the #define method.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share fixup.cpp 
	                             insertVariableInitializations.cpp 
	                             insertVariableInitializations.h 
	                             removeNamedParameters.cpp 
	                             verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: processDefs.cpp processDefs.h 

---------------------------------------------------------------------------

04/01/05 09:39:48 -- deitz

Log message:
	Added an isConstructor field to FnSymbol that is true if the function
	is a constructor and false otherwise.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/01/05 12:34:21 -- jplevyak

Log message:
	New test cases for overloaded assignment.

Added files:
	chapel/test/functions/jplevyak/: equal-1.chpl equal-1.good 
	                                 equal-2.chpl equal-2.good 
	                                 equal-3.chpl equal-3.good 
	                                 equal-4.chpl equal-4.good 
	                                 equal-5.chpl equal-5.good 
	                                 equal-6.chpl equal-6.good 
	                                 equal-7.chpl equal-7.good 
	                                 equal-8.chpl equal-8.future 
	                                 equal-8.good equal-9.chpl 
	                                 equal-9.future equal-9.good 

---------------------------------------------------------------------------

04/01/05 12:45:57 -- bradc

Log message:
	These are some type initialization tests that came up as
	being interesting tests when Steve and I were playing
	with different type initialization schemes yesterday.
	They are meant to be incredibly low priority, but seemed
	like interesting enough tests to be worth capturing.

Added files:
	chapel/test/types/typedefs/bradc/: .cvsignore localType.chpl 
	                                   localType.future 
	                                   localType.good 
	                                   localType2.chpl 
	                                   localType2.future 
	                                   localType2.good 
	                                   localType2.stdin 

---------------------------------------------------------------------------

04/01/05 14:46:07 -- bradc

Log message:
	Implemented union constructors so that they set the
	union selection field to uninitialized and don't
	try to set any of the component fields.  This fixes
	two futures and I removed their .future files.
	
	Tucked the union's enumerated type tucked into
	the ClassType class rather than dropping it on
	the floor so that it can be referred to after
	it's built.  Another reason to break UnionType
	into its own class, which I might attempt next.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Removed files:
	chapel/test/classes/bradc/: writeunion-workaround.future 
	                            writeunion.future 

---------------------------------------------------------------------------

04/01/05 15:25:29 -- deitz

Log message:
	Fixed a bug in sequence types in which the type had astType TYPE_CLASS
	rather than TYPE_SEQ.
	
	Fixed and added pass VerifyASTType to the passlist just before
	analysis is run.  This is another nice sanity check.
	
	Reworked sequence code in the internal prelude.  Most of it remains
	commented out.
	
	Made BuildClassConstructorsEtc work on all modules, not just the
	common and user modules.
	
	Fixed a bug in specializeParenOpExprs in which a variable was not set
	to NULL.  This didn't matter until there was an error in which case
	the INT_FATAL was incorrectly not firing.
	
	Added a simple test for arrays of strings.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	                             specializeParenOpExprs.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

04/01/05 15:57:58 -- deitz

Log message:
	Added specialized codegen for assigning integers to strings.  Note
	that I would rather overload assignment for this just as I would like
	to overload + for string concatenation.
	
	Added _int_string to the runtime which is like intstring in the
	compiler.  Changed the name of glomstrings in the runtime to
	_glom_strings.
	
	Added a number of test cases:
	
	test/arrays/deitz/test_array_basic2.chpl attempts to assign floats to
	an array of integers.  Analysis complains about mixed primitive types
	but this should be a coercion.
	
	test/arrays/deitz/test_array_float1.chpl attempts to print out an
	array of floats but the .0s are left off.
	
	test/arrays/deitz/test_array_of_string1.chpl is a simple array of
	strings test that I mentioned in my last log message but accidentally
	didn't checkin.
	
	test/arrays/deitz/test_array_of_string2.chpl attempts to assign
	integers to an array of strings.  Analysis complains about mixed
	primitive types but this should be a coercion too.
	
	test/trivial/deitz/test_coerce_integer_to_string1.chpl assigns an
	integer to a string.
	
	test/trivial/deitz/test_coerce_integer_to_string2.chpl passes an
	integer to a function expecting a string.  This should build a
	coercion wrapper.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c config.c 
Added files:
	chapel/test/arrays/deitz/: test_array_basic2.chpl 
	                           test_array_basic2.future 
	                           test_array_basic2.good 
	                           test_array_float1.chpl 
	                           test_array_float1.future 
	                           test_array_float1.good 
	                           test_array_of_string1.chpl 
	                           test_array_of_string1.good 
	                           test_array_of_string2.chpl 
	                           test_array_of_string2.future 
	                           test_array_of_string2.good 
	chapel/test/trivial/deitz/: test_coerce_integer_to_string1.chpl 
	                            test_coerce_integer_to_string1.good 
	                            test_coerce_integer_to_string2.chpl 
	                            test_coerce_integer_to_string2.future 
	                            test_coerce_integer_to_string2.good 

---------------------------------------------------------------------------

04/01/05 16:04:24 -- jplevyak

Log message:
	Indexes don't actually get assigned to tuples correctly.
	Here, dead expressions were eliminated, masking the problem.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
Added files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

04/01/05 16:48:28 -- roxana

Log message:
	I am not sure I understand the dead expression argument of John.
	Maybe you should create a new future for yourself and check out the
	I/O for index types. I do not have time to look into this. The
	intent of the test was to do the assignments that it does correctly.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
Removed files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

04/01/05 16:50:19 -- deitz

Log message:
	Added overloaded = for records.
	
	As a stopgap until VarInitExpr is working well, I fixed how
	constructors are made so that an assignment to a string is done with
	the _init_string function rather than assignment.  As a stopgap to
	this, I added a bail-out in ProcessParameters if the function is
	called _init_string.  This let me move on with the test I was writing
	and should fix the regression we've been seeing.
	
	Added a test case for record assignment that is working even though
	the overloaded = is not firing.  This is because C does it for us.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             processParameters.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_assign1.chpl 
	                            test_record_assign1.good 

---------------------------------------------------------------------------

04/01/05 17:19:21 -- deitz

Log message:
	Added call to setDefPoint in constructor of DefExpr.  Now that every
	defPoint is a DefExpr, this is a fine place to do it.  Removed a bunch
	of unnecessary setDefPoint calls with this change.
	
	The only setDefPoint calls other than from the constructor are related
	to formals in functions and enum symbols in an enum type.  They share
	defPoints with the function and the enum type symbol.  Should they
	have their own DefExprs?  That will have to wait for more thought.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertThisParameters.cpp 

---------------------------------------------------------------------------

04/01/05 17:56:09 -- bradc

Log message:
	Refactored the storage of union types in the AST from
	being a ClassType with its union_value boolean set to
	true to being a subclass of ClassType called UnionType
	(astType_t = TYPE_UNION).  In doing so, eliminated the
	union_value field, but ensured that the value field in
	ClassType is true for unions so that code that merely
	wants to know whether a ClassType instance has value
	semantics can check that flag (and there are lots of
	instances).  If a piece of code wants to specifically
	know that a ClassType instance is a union, it should use
	a dynamic cast or check the astType field as usual.
	
	This refactoring cleaned up a lot of code, typically by
	replacing conditionals outside of the ClassType methods
	with calls to virtual functions now defined for the
	ClassType hierarchy.
	
	- C code generation of field access operators
	
	- moved the building of constructor bodies out of
	  buildClassConstructorsEtc.cpp (though the call to
	  build them is still there, obviously)
	
	  NOTE to Steve/John: developers who want to flip the
	        CONSTRUCTOR_WITH_PARAMETERS flag will now need
	        to do so in type.cpp as well as buildClass...
	        Steve assures me that this is OK and that it
	        will go away soon anyway... :)
	
	- moved the building of the union type's enumeration
	  used at runtime for type safety into the UnionType
	  class.
	
	- built a function to compute the name of a union
	  enumeration to the UnionType class to avoid so many
	  separate calls to glomstrings() that have to match
	  in order for everything to work properly.
	
	Other changes:
	
	- cleaned up the ClassType constructor, which had many
	  arguments that were no longer being used (or never were)
	
	TODO: refactor classdecl, recorddecl, uniondecl in parser
	      so that they are all one rule rather than three
	      almost-identcal ones
	
	ALSO: move construction of _UNION_SET/CHECK/etc. into
	      UnionType since it's virtually identical and done
	      in a few places.

Added files:
	chapel/test/types/like/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

04/01/05 17:57:34 -- bradc

Log message:
	Whoopsee, I was in the wrong directory for that last checkin,
	and my attempt to abort once I realized it didn't work out for
	some reason...

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         insertWriteFns.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertUnionChecks.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

04/01/05 18:18:55 -- bradc

Log message:
	Oh yeah, I forgot about this one -- here's that other
	nil test that John fixed yesterday.

Removed files:
	chapel/test/functions/bradc/: intents-classes4.future 

---------------------------------------------------------------------------

04/01/05 18:22:15 -- bradc

Log message:
	It seems that these Makefiles' clean and clobber
	commands weren't really written very well,
	which explains why Roxana's clobbers never
	cleaned up as much as expected.

Modified files:
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/04/05 09:33:59 -- deitz

Log message:
	Rechecked in my code corresponding to the following checkin:
	
	  As a stopgap until VarInitExpr is working well, I fixed how
	  constructors are made so that an assignment to a string is done with
	  the _init_string function rather than assignment.  As a stopgap to
	  this, I added a bail-out in ProcessParameters if the function is
	  called _init_string.  This let me move on with the test I was writing
	  and should fix the regression we've been seeing.
	
	This must have been accidentally lost in Brad's refactoring.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/04/05 10:15:48 -- roxana

Log message:
	Changed the tuple assignment test to be more compelling. This
	is in response to John's observation that checking in dead code
	is not such a good idea.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
	                             test_index_expr1.good 
Added files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

04/04/05 10:35:33 -- deitz

Log message:
	My sequence class implementation is going to rely heavily on analysis
	requiring that I put a bunch of code in the internal prelude that will
	require analysis to be used thus effectively removing support for the
	--noanalysis flag.  To continue to support this flag, I added a pragma
	"omit for noanalysis" that says this function or class or variable
	should be omitted from the AST and destroyed in the Symboltable if
	this pragma is specified and the --noanalysis flag is used.
	
	Added a pass OmitForNoAnalysis that runs very early in compilation and
	removes things labeled with the "omit for noanalysis" pragma from the
	AST and Symboltable.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: omitForNoAnalysis.cpp 
	                             omitForNoAnalysis.h 

---------------------------------------------------------------------------

04/04/05 10:37:01 -- bradc

Log message:
	This is an old SSCA2 feature list that we made but
	never committed to CVS.

Added files:
	chapel/doc/internal/: SSCA2.features 

---------------------------------------------------------------------------

04/04/05 10:49:57 -- bradc

Log message:
	Added some preliminary support for writing out tuples
	and index types in order to help Roxana write tests
	more easily.  Checked in some simple tests that
	do some simple writes of homogeneous and heterogeneous
	tuple types, as well as a 2D index.
	
	Also checked in a future test of declaring and assigning
	a 1D index.  This doesn't seem to work, apparently
	because it's stored as a tuple rather than a flat
	integer.

Modified files:
	chapel/test/dispatch/jplevyak/: .cvsignore 
	chapel/test/flowanalysis/jplevyak/: .cvsignore 
	chapel/test/flowanalysis/newast/: .cvsignore 
Added files:
	chapel/test/domains/bradc/: .cvsignore writeIndex.chpl 
	                            writeIndex.future writeIndex.good 
	                            writeIndex2.chpl writeIndex2.good 
	chapel/test/types/tuple/bradc/: .cvsignore writeTuple.chpl 
	                                writeTuple.good 

---------------------------------------------------------------------------

04/04/05 10:51:04 -- deitz

Log message:
	Added a script list_futures to the test/ directory that lists all the
	future tests next to the assigned person's name.

Added files:
	chapel/test/: list_futures 

---------------------------------------------------------------------------

04/04/05 11:24:12 -- bradc

Log message:
	

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

04/04/05 11:26:05 -- bradc

Log message:
	I seem to have completely lost my ability to check in code.
	
	That last checkin should've included include/type.h and
	AST/type.cpp, but I must've been in the wrong directory.
	
	Then, when checking those files in, I forgot that I had
	mods to chapel.y until the commit log entry buffer came
	up, and while I requested to abort the check-in, it
	still got checked in.  Bummer.
	
	This checkin backs out my premature changes to chapel.y.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

04/04/05 11:43:21 -- deitz

Log message:
	Moved the RemoveLikeTypes traversal before analysis.  Added an error
	message if we cannot resolve the type of a like expression before
	analysis.
	
	Improved typeInfo() on MemberAccess expressions so that if it is run
	before analysis it checks to see if it can resolve the type anyway.
	Alternative: This can be moved to ScopeResolve symbols in this case.
	
	Removed futures for like-1 and like-2.  Fixed good output file of
	like-1.  Hopefully this doesn't break our test-case policy.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: removeLikeTypes.cpp 
	chapel/test/types/like/jplevyak/: like-1.good 
Removed files:
	chapel/test/types/like/jplevyak/: like-1.future like-2.future 

---------------------------------------------------------------------------

04/04/05 12:24:52 -- bradc

Log message:
	Wrapping up one of my TODO's from Friday afternoon's
	checkin, refactored parsing of unions, classes, and
	records to use the same rule rather than three nearly-
	identical rules.

Modified files:
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

04/04/05 13:45:28 -- bradc

Log message:
	Refactored code that makes runtime union
	check calls into a method on UnionType
	called buildSafeUnionAccessCall.  This
	combines the three different places we
	build these calls, removing a lot of
	redundant code and localizing all
	references to the union's enumerated
	type to the type.cpp file.  All future
	calls to these routines should be made
	through this interface.
	
	In making this change, I propagated
	filename/lineno information in
	applyWithParameters.cpp so that I could
	rely on looking at the base expression
	in a MemberAccess to find out where
	the MemberAccess lives.  Steve has
	ideas about propagating this information
	semi-automatically when creating new
	AST nodes, and if that change is done,
	my code could potentially be pulled out.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: insertWriteFns.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             insertUnionChecks.cpp 

---------------------------------------------------------------------------

04/04/05 14:10:58 -- bradc

Log message:
	Improved the list_futures script to take an optional
	username as its argument.  If a username is given,
	it only lists the futures that are assigned to that
	username.  If no username is given, it works the same
	as before (note that grepping for usernames out of
	the original output gave mixed results since the
	username could appear in the test path, and isn't
	necessarily the first word on the line).
	
	Also, switched to a more generic perl installation
	location for portability.

Modified files:
	chapel/test/: list_futures 

---------------------------------------------------------------------------

04/04/05 14:38:24 -- deitz

Log message:
	Fixed a problem in the traversal in which the formal arguments to a
	function were traversed regularly not as if they were definitions
	which they are.  Fixed a bug in which the back pointer was not set for
	the initializing expression to formal arguments (default values).
	Fixed a bug in which the default values were not copied if they were
	used multiple times.
	
	Improved OmitForNoAnalysis to actually remove the symbols from the
	linked lists in the SymScope and mangle the name in the hash table so
	it is not found via lookup.  This works on children scopes if the
	symbol's type is a class.  It does not work on children symbols or
	scopes in functions, modules, and whatever else.  This is because
	there is no good way to start a SymtabTraversal on a symbol or to grab
	the child scope of a symbol.
	
	Uncommented the rest of my sequence code in the internal prelude.
	This is not used yet.
	
	Made RemoveDeadSymbols work on all modules not just user modules.  For
	symbols in the intrinsic scope, we bail.  What we really want is to do
	this on all scopes but the intrinsic scope.  Or what I have is fine.
	
	Removed noanalysis test_seq tests since the sequence implementation is
	starting to rely on analysis.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: removeDeadSymbols.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: omitForNoAnalysis.cpp 
Removed files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq1.chpl 
	                                         test_seq1.good 
	                                         test_seq1a.chpl 
	                                         test_seq1a.good 
	                                         test_seq2.chpl 
	                                         test_seq2.good 
	                                         test_seq8.chpl 
	                                         test_seq8.good 

---------------------------------------------------------------------------

04/04/05 15:59:19 -- deitz

Log message:
	Cleaned up sequence code but didn't get anything working yet.  I'm
	having a phase-ordering problem wanting to treat the base sequence
	class as a with-inclusion even though I want to do it later than
	with-inclusion is done.
	
	Moved ExpandSeqExprAssignments up before analysis so analysis should
	never see sequence literals, I think.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/04/05 17:29:39 -- bradc

Log message:
	Refactored the ClassType subclass tree with the
	intention of making classes and records more
	distinct.  This is a continuation of my union-related
	refactoring from last week.  The old class hierarchy
	was:
	
	  ClassType
	  > SeqType
	  > UnionType
	
	The new hierarchy is:
	
	  StructuralType (a reasonably abstract superclass)
	  > ClassType
	  > > SeqType
	  > RecordType
	  > UnionType
	
	So when we create classes, records, and unions, we
	now create an instance of ClassType, RecordType,
	or UnionType.  The details of the classes are
	currently almost all contained within ClassType,
	and the vast majority of them will stay there, but
	my goal is to remove the "value" field (still set
	and used as before) and rely on the class hierarchy
	more directly.
	
	Related to this change, many things that had a
	class bias to them (like classScope) have now been
	renamed to have a new, more neutral name (like
	structScope).  "struct" isn't meant to imply C
	structs, it's merely a shorthand for the fact that
	it relates to the StructuralType class.  If someone
	has a proposal for a better naming scheme, I'm all
	ears, but let's make the change quick before anyone
	gets too wedded to these.
	
	Some side changes:
	
	- noticed that the astTypeName array of debugging
	  class names was out-of-date w.r.t. the enumeration,
	  so put in an assertion in verifyASTType.cpp to
	  ensure that the last field is set correctly (as
	  a means of forcing people to add new strings,
	  though they could still add them out-of-order...).

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h baseAST.h stmt.h type.h 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         insertWriteFns.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             buildClassConstructorsEtc.cpp 
	                             expandClassWiths.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             processDefs.cpp resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             verifyASTType.cpp verifyASTType.h 

---------------------------------------------------------------------------

04/04/05 17:48:31 -- shannon

Log message:
	Implemented the --memtrace and --memthreshold runtime options.
	"--memtrace=<filename>" prints a memory trace to the given
	filename.  For instance:
	
	        "malloc" called for "49" items of size "8" for \
	                 "array A":  0x804f300
	
	The memory threshold option is always called with memory trace,
	"--memtrace=<filename> --memthreshold=<n>", and squelches prints
	to the log for memory sizes less than 'n'.
	
	Also updated the help message, sorting the flags by type and
	printing them under headings.  The config var table is printed
	at the bottom of the help message.
	
	Changed the print of the memory table to include both the number
	and size (in bytes) of the memory requested, along with the
	memory description.
	
	Added functionality to the test harness so that a test can
	specify its own CATFILES, e.g. foo.catfiles.

Modified files:
	chapel/runtime/include/: arg.h chplmem.h config.h 
	chapel/runtime/src/: arg.c chplmem.c config.c main.c 
	chapel/test/: start_test sub_test 
	chapel/test/execflags/shannon/configs/: configVar-Dash.good 
	                                        configVarHelp.good 
	                                        configVarModStrings1.good 
	                                        configVarModStrings2.good 
	                                        configVarSetOver.good 
	                                        configVarSetTwoTypes.good 
	                                        configVarTwoModules.good 
	                                        varNameEnumQM.good 
	                                        varNameQMark.good 
	chapel/test/memory/shannon/: freedMalloc.good 
	                             reallocZeroSize.good 
Added files:
	chapel/test/memory/shannon/: CLEANFILES configVarFile.catfiles 
	                             configVarFile.chpl 
	                             configVarFile.execopts 
	                             configVarFile.good 
	                             configVarFile.input jacobi.catfiles 
	                             jacobi.chpl jacobi.execopts 
	                             jacobi.good 

---------------------------------------------------------------------------

04/04/05 17:57:00 -- shannon

Log message:
	Woops, forgot to add this to the last commit.

Added files:
	chapel/test/memory/shannon/: PREDIFF 

---------------------------------------------------------------------------

04/05/05 09:48:22 -- bradc

Log message:
	Continued yesterday's refactoring of the StructuralType
	hierarchy by removing the "value" field from the
	StructuralType class and inserting more specific checks
	into the code that relied on this field.  This resulted
	in some nice refactorizations, especially in the realm
	of insertWriteFns, where the code was moved into the
	Type hierarchy and made better use of inheritance.
	
	In other cases, there are still more dynamic casts than
	I would like.  A good next step would be to try and
	determine what aspects of a type's behavior the code is
	relying on and embedding these into methods rather than
	relying on dynamic casts.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         insertWriteFns.cpp symscope.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/05/05 10:05:37 -- jplevyak

Log message:
	Improve handling of meta types (actual type arguments e.g. integer as
	an argument to generics).
	
	NOTE: in order to get intents-classes4.chpl to work I had to
	  insert a conditional in removeDeadSymbols.cpp.  This looks like
	  the right change, but if, Steve/Brad, you look at it and decide that
	  this is indicative of an error someplace else I'll back out these changes.
	  I believe I have tightened up the notion of dead types which is causing
	  a builtin type to be declared dead which wasn't taken account of by
	  the code in removeDeadSymbols.cpp

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

04/05/05 10:17:14 -- bradc

Log message:
	Another default parameter test, but one with
	a return value.

Added files:
	chapel/test/functions/bradc/: defaultParamWithReturn.chpl 
	                              defaultParamWithReturn.good 

---------------------------------------------------------------------------

04/05/05 10:39:40 -- jplevyak

Log message:
	Fix bug which was causing intermittent failures of test_named_param3.chpl

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

04/05/05 11:00:09 -- bradc

Log message:
	Made codegen avoid generating empty structs by inserting
	a fake field into any classes without fields in order to
	conform to standard C better.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/05/05 11:08:00 -- jplevyak

Log message:
	Fix potential issue with using information left over from previous analysis pass.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

04/05/05 12:00:40 -- deitz

Log message:
	Added a new pass called, for now, ProcessDefs.  It puts in a default
	initialization statement before analysis is run using VarInitExpr.  So
	for something like:
	
	  {
	    ...
	    var x = foo();
	
	We would produce:
	
	  {
	    VarInit x
	    ...
	    var x = foo();
	
	This alerts analysis that the defaultVal of the type of x is going to
	be assigned to x at this point.
	
	Factored out SET_BACK for idxExpr in the constructor of IndexType.
	
	In ScopeResolveSymbols, added setting of defaultVal for UserTypes to
	be whatever it is for its definition.
	
	In InsertAnonymousTypes creation of IndexTypes, added setting of the
	defaultVal for the IndexType to be whatever it is for its idxType.
	
	Removed insertion of default initializations statements in
	InsertVariableInitializations.  This now just changes VarDefStmts to
	assignment statements.  The default assignment statements were put in
	in ProcessDefs.
	
	Added default initialization to user initialization for temporary
	inserted in ProcessParameters for case where out parameter is not
	initialized.  All temporary variables need to have initializations
	after ProcessDefs pass is run.
	
	Moved squelching of default initialization for arrays and domains to
	removeNamedParameters, where VarInitExprs are resolved post-analysis.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertVariableInitializations.cpp 
	                             processDefs.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

04/05/05 12:21:03 -- bradc

Log message:
	Fixed some problems with start_clean when an explicit
	start directory was given.  Added support for double-
	dash option names.

Modified files:
	chapel/test/: start_clean 

---------------------------------------------------------------------------

04/05/05 12:51:13 -- bradc

Log message:
	Updated copyright to include 2005.

Modified files:
	./: COPYRIGHT LICENSE 

---------------------------------------------------------------------------

04/05/05 12:52:20 -- bradc

Log message:
	Added options to the test system to provide a script
	to be run before executing the generated executable
	called PREEXEC.  Added the ability to generate this
	script, or the PREDIFF script on a test-by-test
	basis by specifying a foo.prediff or foo.preexec
	file for a test foo.chpl.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/05/05 13:02:27 -- bradc

Log message:
	Fixed the Makefile strategy for compiler-generated code
	so that the Makefile is responsible for putting the
	generated binary in the correct place rather than the
	Chapel compiler (previously, the Makefile would leave
	the generated binary in the /tmp or --savec directory,
	and the compiler would copy it out).
	
	This allows developers who using the --savec flag to
	inspect and edit generated code to recompile it by
	typing:
	
	        make -f <savec-dir>/Makefile
	
	which avoids the need to remember to run
	<savec-dir>/a.out rather than simply ./a.out
	
	An interesting note that I'll forget about the next
	time I look at this code if I don't mention it is
	that it's tempting to simply put the final filename
	(say, a.out) into the back-end C compiler's link
	line, but this causes a manyfold slowdown in compile
	time for the test system (apparently because the C
	compiler won't write the binary out to tmp space and
	then copy it over to the -o location?).  So instead,
	we have it link the binary to the /tmp --savec
	location and then copy it out as a separate step.

Modified files:
	chapel/compiler/include/: files.h 
	chapel/compiler/passes/: buildBinary.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/etc/: Makefile.include 
Added files:
	chapel/test/compflags/bradc/nameoutput/: .cvsignore CLEANFILES 
	                                         localname.chpl 
	                                         localname.compopts 
	                                         localname.good 
	                                         localname.preexec 
	                                         localnamesavec.chpl 
	                                         localnamesavec.compopts 
	                                         localnamesavec.good 
	                                         localnamesavec.preexec 

---------------------------------------------------------------------------

04/05/05 13:36:18 -- bradc

Log message:
	Added two new future tests for default/named parameters.
	I was writing these tests to expose a concern I had about
	the wrapper functions returning the call to the nested
	function (which would preclude the execution of any copy
	out statements that followed the function call), but
	ended up finding other problems instead.  Assigned to
	Steve/me.

Added files:
	chapel/test/functions/bradc/: defaultParamInOut.chpl 
	                              defaultParamInOut.future 
	                              defaultParamInOut.good 
	                              nameDefaultParamInOut.chpl 
	                              nameDefaultParamInOut.future 
	                              nameDefaultParamInOut.good 

---------------------------------------------------------------------------

04/05/05 13:43:19 -- deitz

Log message:
	Changed VarInitExpr to contain an Expr rather than a Symbol so that it
	can contain MemberAccesses when used in class constructors.
	
	Reworked BuildClassConstructors to use VarInitExpr iff
	
	      #define USE_VAR_INIT_EXPR
	
	is uncommented.  Otherwise it uses the type->defaultVal if it is known
	and nothing otherwise.
	
	Improved support for sequences.  I believe I'm close to getting these
	things working.  Create a new function createSeqType that grabs the
	_seq class in the internal prelude and turns it into a new sequence
	type when requested to do so by InsertAnonymousTypes.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             processDefs.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 

---------------------------------------------------------------------------

04/05/05 15:35:32 -- bradc

Log message:
	Added a test that shows that function call intents
	break in code generation when we return a
	function call immediately.

Added files:
	chapel/test/functions/bradc/: returnFnCallIntents.chpl 
	                              returnFnCallIntents.future 
	                              returnFnCallIntents.good 

---------------------------------------------------------------------------

04/05/05 16:10:11 -- bradc

Log message:
	Cleaning up old email, moved a bunch of tests
	out of the trivial/ directory (where I used
	to stack them up for fear of creating new
	directories) into more appropriate subdirectories.

Added files:
	chapel/test/arrays/bradc/: .cvsignore domarr.chpl domarr.good 
	                           domarr1a.chpl domarr1a.future 
	                           domarr1a.good domarr2.chpl 
	                           domarr2.future domarr2.good 
	                           enumarray.chpl enumarray.good 
	chapel/test/classes/bradc/: badred.chpl badred.future 
	                            badred.good 
	chapel/test/functions/bradc/: chain.chpl chain.good 
	                              globalref.chpl globalref.good 
	                              mutrec.chpl mutrec.good 
	                              noargs.chpl noargs.good 
	                              onearg.chpl onearg.good 
	                              retstmt.chpl retstmt.good 
	                              usebeforedef.chpl 
	                              usebeforedef.good 
Removed files:
	chapel/test/trivial/bradc/domarr/: .cvsignore domarr.chpl 
	                                   domarr.good enumarray.chpl 
	                                   enumarray.good 
	chapel/test/trivial/bradc/functions/: .cvsignore chain.chpl 
	                                      chain.good globalref.chpl 
	                                      globalref.good mutrec.chpl 
	                                      mutrec.good noargs.chpl 
	                                      noargs.good onearg.chpl 
	                                      onearg.good retstmt.chpl 
	                                      retstmt.good 
	                                      usebeforedef.chpl 
	                                      usebeforedef.good 
	chapel/test/trivial/bradc/protoast/future/: NOTEST badred.chpl 
	                                            badred.good 

---------------------------------------------------------------------------

04/06/05 12:31:04 -- jplevyak

Log message:
	This is the first in a series of checkins to get operator= working.
	I am going to try to do it this way as integrating this and
	VarInitExpr was becoming too much.
	
	The main change here is that all unknown variables are initialized to nil.
	
	NOTE: when we get VarInitExpr in this is going to change, so if it seems
	a bit messy now don't worry about it, this is transition code.
	
	Updated 2 tests which were effected.  Added unistd.h to stdchpl.h
	so as to get intptr_t.  Changed codeGen of assignment to handle
	assigning numbers from nil.  Again, this is transitional code, please
	bear with me.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/06/05 12:35:37 -- jplevyak

Log message:
	Added Symbol::isThis().  To be used in analysis.cpp.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

04/06/05 12:45:57 -- jplevyak

Log message:
	Add an "any" type for internal use.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

04/06/05 13:21:24 -- deitz

Log message:
	Made major improvements to sequences.  Rather than withing in the base
	_seq class to create the anonymous sequence type, the class is cloned
	(methods and all).
	
	Fixed a number of bugs in update in copy.  This will help us with
	class cloning eventually.
	
	Modified the code for _seq.  This checkin gets test_seq1b and
	test_seq1c working with --noanalysis.
	
	Updated the hard-coded write function for sequences to use nil instead
	of NULL because nil != NULL.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             expandSeqExprAssignments.cpp 
	                             insertAnonymousTypes.cpp 
	                             updateSymbols.cpp updateSymbols.h 
Added files:
	chapel/test/types/seq/deitz/: test_seq1b.chpl test_seq1b.future 
	                              test_seq1b.good test_seq1c.chpl 
	                              test_seq1c.future test_seq1c.good 
	chapel/test/types/seq/deitz/noanalysis/: test_seq1b.chpl 
	                                         test_seq1b.good 
	                                         test_seq1c.chpl 
	                                         test_seq1c.good 

---------------------------------------------------------------------------

04/06/05 13:52:37 -- bradc

Log message:
	Removed "NULL" from internal prelude since we now
	have "nil" instead.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

04/06/05 13:53:49 -- bradc

Log message:
	Noticed another place where I hadn't updated the
	copyrights, so unified how copyrights were handled
	slightly to minimize the number of places where a
	change is needed.
	
	Also, in debugging an internal error, tried to check
	the compiler version number only to find that we
	didn't have a --version flag, so added one.

Modified files:
	chapel/compiler/main/: Makefile driver.cpp 
Added files:
	chapel/test/compflags/bradc/noexec/: .cvsignore CLEANFILES 
	                                     NOEXEC version.chpl 
	                                     version.compopts 
	                                     version.goodstart 
	                                     version.prediff 

---------------------------------------------------------------------------

04/06/05 13:56:42 -- deitz

Log message:
	Implemented setter and getter functions for all fields within a
	structure (classes, records, unions) as methods within the structure.
	If the field is named "field," then the setter is "set_field" and the
	getter is "get_field."
	
	For example, for a class like
	
	class foo {
	  var i : integer;
	  var f : float;
	}
	
	we would generate the following functions:
	
	foo.set_i(arg : integer) {
	  i = arg;
	}
	
	foo.set_f(arg : float) {
	  f = arg;
	}
	
	foo.get_i() : integer {
	  return i;
	}
	
	foo.get_f() : float {
	  return f;
	}
	
	Note that if the type is unknown for the field, it is not used in the
	setter or getter function.  Of course.
	
	Added _getter and _setter pointers within FnSymbols that point to the
	VarSymbols in a class that they apply to.  In non-setter/getter
	functions, this pointer is NULL.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/06/05 14:22:28 -- deitz

Log message:
	Moved ExpandSeqExprAssignments which transforms something like
	
	  s = (/ 1, 3, 4 /);
	
	into something like
	
	  s = s # 1;
	  s = s # 3;
	  s = s # 4;
	
	though "#" is not yet supported all the way down in the passlist (now
	after analysis).  This means analysis will need to deal with SeqExpr
	(sequence literals of the form (/ ... /)) though this was to be
	expected.
	
	Added test_seq1 and test_seq1a to my noanalysis sequence testing
	directory as these are now working with --noanalysis.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: expandSeqExprAssignments.cpp 
Added files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq1.chpl 
	                                         test_seq1.good 
	                                         test_seq1a.chpl 
	                                         test_seq1a.good 

---------------------------------------------------------------------------

04/06/05 14:23:38 -- shannon

Log message:
	Woops, forgot to include this with my last commit.  Two
	tests generate log files.

Added files:
	chapel/test/memory/shannon/: .cvsignore 

---------------------------------------------------------------------------

04/06/05 14:49:38 -- bradc

Log message:
	Once again, a file escapes my commit process...  I think
	I'm losing it.

Modified files:
	./: COPYRIGHT 

---------------------------------------------------------------------------

04/06/05 17:01:57 -- deitz

Log message:
	Added a new pass RemoveSeqOperations that converts "#" into a method
	call into the sequence class.  This is necessarily done after analysis
	since before analysis we do not necessarily know whether the left or
	right hand expression is a sequence (as opposed to an element) or if
	they are both sequences.
	
	Added non-analysis support for "#" used to append an element to a
	sequence.  This uses the BINOP_SEQCAT that already existed but was
	never used.
	
	Fixed a bug in ApplyThisParameters in which constructors were getting
	a "this" wrapped around them.  That seems strange since we don't want
	to move the "this" into the constructor.  I'm a little surprised it
	was working.  Must not have been happening in general.
	
	Removed some dead code from the function that creates sequence types
	from class types.
	
	Removed old runtime support macro _SEQ_APPEND.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	                         internal_prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
	                             applyThisParameters.cpp 
	chapel/runtime/include/: seq.h 
Added files:
	chapel/compiler/traversals/: removeSeqOperations.cpp 
	                             removeSeqOperations.h 
	chapel/test/types/seq/deitz/noanalysis/: test_seq3.chpl 
	                                         test_seq3.good 
	                                         test_seq5.chpl 
	                                         test_seq5.good 
	                                         test_seq8.chpl 
	                                         test_seq8.good 

---------------------------------------------------------------------------

04/07/05 11:28:26 -- deitz

Log message:
	Fixed a bug in which the setters and getters were being defined in the
	same scope that the structure was defined in, not the structScope.
	
	Fixed a bug in which the symbol context of the scope of a structural
	type within another type was not set if the outer type was copied.
	This showed up in the sequence code as a result of the above fix.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/07/05 12:36:10 -- bradc

Log message:
	Added LICENSE to main's .cvsignore file after
	yesterday's change to how copyright information
	was generated by the compiler.

Modified files:
	chapel/compiler/main/: .cvsignore 

---------------------------------------------------------------------------

04/07/05 12:38:21 -- bradc

Log message:
	Fixed nightly regression script to work better
	on the Suns in gearing up for a nightly Sun
	regression.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/07/05 14:41:18 -- jplevyak

Log message:
	Cleanup error messages so that types are displayed uniformlly within
	parens to indicate that they are sets of concrete types.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/test/flowanalysis/jplevyak/: badreturn.good 
	                                    dispatch3.good 
	chapel/test/parsing/jplevyak/: module.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/07/05 14:50:19 -- jplevyak

Log message:
	Add interface function in analysis.h
	
	int function_returns_void(FnSymbol *fn);
	
	This works by just checking if there is a STMT_RETURN with s->expr != 0
	somewhere in the function.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h sym.h 

---------------------------------------------------------------------------

04/07/05 14:52:55 -- bradc

Log message:
	Improved portability of sed scripts in main/Makefile.

Modified files:
	chapel/compiler/main/: Makefile 

---------------------------------------------------------------------------

04/07/05 15:28:12 -- jplevyak

Log message:
	Setters and getters for member accesses and for array element assignment
	(I was already doing it for array element reads).  Accessors are
	named "set_XXX" for the setter for member XXX and "XXX" for the getter
	for member "XXX" so that "function A.x { ... }" will work for "a.x" in the
	code.
	
	This also involved updating various tests since the flow analysis
	results are superficially different.
	
	I also disabled the error messages for duplicate symbols in the
	same scope which would have prevented building the getters.
	
	This results in failure of the test for the duplicate symbols error
	message.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 
	                                  formatoutput.good 
	                                  protoast_test.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/07/05 15:43:28 -- jplevyak

Log message:
	Fix instability in the order of error messages which was effecting
	regressions results in some cases.  Some preliminary work on operator= overloading.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

04/07/05 15:49:51 -- jplevyak

Log message:
	Reorder error messages on 2 tests.
	Tighten up criteria for doing coercions on primitive types.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

04/07/05 15:58:31 -- bradc

Log message:
	Made default parameter function wrappers
	do a better job of avoiding the insertion
	of return statements on functions that
	return dtVoid using John's new interface.
	
	Fixed up some tabbing, 80-column format
	issues for type.cpp.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 

---------------------------------------------------------------------------

04/07/05 16:06:13 -- bradc

Log message:
	Turned on stricter checks for the C compilation of the
	compiler-generated code to keep ourselves honest.

Modified files:
	chapel/runtime/etc/: Makefile.macros 

---------------------------------------------------------------------------

04/07/05 16:08:36 -- deitz

Log message:
	Made significant progress on support for sequences.  Added more
	support for the # operator on two sequences or an element and a
	sequence, not just a sequence and an element.
	
	Implemented a new pass to insert temps for all sequence literals that
	are not in the top-level of a DefStmt (and thus the temp would be
	pointless).  This pass is called InsertTemps as it will eventually be
	used to insert temps for tuple literals as well.
	
	Made two more ugly hacks to deal with the __init_function being
	different from all other functions.  I'll deal with this soon.
	
	Made a hack to retype indices in for loops after analysis if the for
	loop is going over a sequence.  Change the dtInteger to whatever the
	sequences elementType is.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share findUnknownTypes.cpp 
	                             insertVariableInitializations.cpp 
	                             removeSeqOperations.cpp 
Added files:
	chapel/compiler/traversals/: insertTemps.cpp insertTemps.h 

---------------------------------------------------------------------------

04/07/05 16:13:43 -- deitz

Log message:
	Added some --noanalysis-working future sequence tests to make sure
	they keep working.

Added files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq2.chpl 
	                                         test_seq2.good 
	                                         test_seq6.chpl 
	                                         test_seq6.good 
	                                         test_seq7.chpl 
	                                         test_seq7.good 
	                                         test_seq8b.chpl 
	                                         test_seq8b.good 

---------------------------------------------------------------------------

04/07/05 17:13:44 -- bradc

Log message:
	Made nightly script so that multiple nightly
	regressions could be run on multiple platforms
	without their output files colliding.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/07/05 17:32:14 -- bradc

Log message:
	Stupid workaround to get around fact that sun doesn't
	seem to have snprintf when -std=c99 is used.

Modified files:
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

04/08/05 10:03:31 -- deitz

Log message:
	Reinserted redefinition checking in the symboltable.
	
	Reworked handling of getter functions with the same name as the field.
	We first name the getter "_chplget_$field" where $field is the name of
	the field.  Then, later, we rename it "$field."  This means that it
	can no longer be looked up in the Symboltable.  However, we don't
	care.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/08/05 10:45:59 -- bradc

Log message:
	Updating some .cvsignores to keep cvs -nq update
	clean.

Modified files:
	chapel/test/compflags/bradc/noexec/: .cvsignore 
Added files:
	chapel/test/classes/bradc/unions/: .cvsignore 

---------------------------------------------------------------------------

04/08/05 11:00:57 -- deitz

Log message:
	Made some minor change to CreateEntryPoint in a first attempt to move
	this after fixup.  Noticing that it contains a call to createInitFn(),
	I'll have to move these after first though.  This checkin is just an
	effort to keep my code inline.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/passes/: createEntryPoint.cpp createEntryPoint.h 
	                         runAnalysis.cpp runAnalysis.h 

---------------------------------------------------------------------------

04/08/05 11:12:58 -- deitz

Log message:
	Reordered some passes to get InsertFunctionTemps down in the passlist.
	This lets us insert many functions before that.  These later passes
	are delicately ordered.
	
	Improved support for sequences so that sequences are liberally copied
	to ensure correct semantics.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: removeSeqOperations.cpp 

---------------------------------------------------------------------------

04/08/05 11:14:18 -- deitz

Log message:
	Added last two of my initial sequence tests to seq/noanalysis
	directory.

Added files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq4.chpl 
	                                         test_seq4.good 

---------------------------------------------------------------------------

04/08/05 11:19:40 -- bradc

Log message:
	More improvements to the nightly regression testing
	scripts for portability.  In order to run it, one
	should now set two environment variables:
	
	        CHPL_NIGHTLY_LOGDIR -- directory for logs to go in
	        CHPL_NIGHTLY_STATDIR -- directory for stats to go in
	
	Otherwise, everything should be reasonably platform
	and user dependent (am about to do some testing to
	be sure).
	
	John, I'm going to see if I can get regressions running on
	the Suns over the weekend.  If so, then we'll add your
	two platforms to the mix next week.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/08/05 11:20:10 -- deitz

Log message:
	John, I'm passing these futures over to you.  Analysis doesn't know
	about (/ ... /) which is a SeqExpr and # which is BINOP_SEQCAT.  Other
	than that, sequences are implemented as classes and use class cloning
	so these should be on track with other things we're working on.

Modified files:
	chapel/test/types/seq/deitz/: test_seq1.future test_seq1a.future 
	                              test_seq1b.future 
	                              test_seq1c.future test_seq2.future 
	                              test_seq3.future test_seq4.future 
	                              test_seq5.future test_seq6.future 
	                              test_seq7.future test_seq8.future 
	                              test_seq8b.future 

---------------------------------------------------------------------------

04/08/05 11:22:58 -- jplevyak

Log message:
	Operator= is now working.  There is a catch all in internal_prelude:
	
	   pragma "builtin" function =(a : any, b : any) { return b; }
	
	which will work for any types which do not implement there own
	operator=.
	
	Implemented a new .= primitive which is the primitive setter.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp fa.cpp 
	                           prim_data.dat 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/08/05 11:30:43 -- jplevyak

Log message:
	Remove .future for passing test.

Removed files:
	chapel/test/arrays/deitz/: test_array_of_string2.future 

---------------------------------------------------------------------------

04/08/05 13:57:00 -- deitz

Log message:
	Moved call to createInitFn into createEntryPoint pass as opposed to
	the defining of the module.  The init function is now created in a
	pass.
	
	This made small line number changes to the __init functions in the
	protoast and newast tests.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

04/08/05 14:19:00 -- deitz

Log message:
	Fixed compilation for uncommenting of #define of
	CONSTRUCTOR_WITH_PARAMETERS.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/08/05 14:54:02 -- deitz

Log message:
	Reenabled ComputeVisibleFunctions on class methods.

Modified files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         computeVisibleFunctions.h 

---------------------------------------------------------------------------

04/08/05 15:00:08 -- deitz

Log message:
	Forgot to update the output to this test with the change to the init
	functions.

Modified files:
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 

---------------------------------------------------------------------------

04/08/05 15:14:51 -- jplevyak

Log message:
	Remove some unused #ifdefs.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/08/05 15:25:58 -- jplevyak

Log message:
	Remove more unnecessary #ifdefs

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/08/05 16:42:06 -- jplevyak

Log message:
	Here is a weird one.   I am restructuring the variable definition code
	and I noticed that
	
	functions/deitz/test_named_param3.chpl
	
	is failing because it doesn't know the return type of a function.
	
	Turns out, it isn't calling return_type_info() on that function!
	
	So I have added a #define CALL_RETURN_TYPE_INFO in codegenHeader
	which if the retType is dtUnknown, calls return_type_info to get the
	real value.
	
	Steve, could you please try undef'ing to see what the deal is?  This
	function is live, but I think it is a wrapper which makes me think
	that the code in findUnknownTypes.cpp may not always be finding all
	the wrappers.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/08/05 16:44:20 -- bradc

Log message:
	Making nightly work better for users other than the
	nightly cron job based on Steve's feedback.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/08/05 17:42:58 -- deitz

Log message:
	Added a new pass InsertDefaultInitVariables that inserts variables for
	every user-defined type that contain their default initialization.
	These variables are then used to initialize the variables.
	
	Futurized my test for record assignment which does require the
	overloaded = function to be used.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: fixup.cpp processParameters.cpp 
	                             resolveSymbols.cpp 
Added files:
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertDefaultInitVariables.h 
	chapel/test/classes/deitz/: test_record_assign1.future 

---------------------------------------------------------------------------

04/09/05 12:37:25 -- jplevyak

Log message:
	Untabify

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 

---------------------------------------------------------------------------

04/11/05 09:36:47 -- deitz

Log message:
	Fixed a bunch of compiler warnings that show up with
	
	  -O1 -Wuninitialized -Winit-self
	
	all of which I believe turned out to be false positives.
	
	Removed John's
	
	  #define CALL_RETURN_TYPE_INFO
	
	replacing it with an internal warning if the return type is ever not
	known at codegen time.  I saw this in program
	
	  functions/deitz/test_default_param1.chpl
	
	not
	
	  functions/deitz/test_named_param3.chpl.
	
	Moreover, when I ran it in gdb or with valgrind, the error
	disappeared.  I'm no longer seeing the error with the above innocuous
	changes leading me to believe that there is some strange
	initialization error.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp insertAnonymousTypes.cpp 
	                             removeSeqOperations.cpp 

---------------------------------------------------------------------------

04/11/05 11:46:22 -- bradc

Log message:
	Some helper scripts for running nightly cron jobs.
	Made it easier to set up cron jobs on the Sun where
	cron syntax is far more limited than Linux.

Added files:
	chapel/test/Bin/: nightly.cron nightly.debug.cron 
	                  nightly.novgr.cron 

---------------------------------------------------------------------------

04/11/05 11:53:36 -- deitz

Log message:
	Improved --noanalysis resolution of function calls in an effort to
	decrease the number of failing tests when the following are
	uncommented:
	
	  //#define CONSTRUCTOR_WITH_PARAMETERS
	  //#define NO_RESOLVE_CONSTRUCTOR
	
	This involved changing the resolution completely so that it uses the
	visibleFunctions vectors.
	
	When --noanalysis is used, even if CONSTRUCTOR_WITH_PARAMETERS is set,
	the constructor is created without parameters since the wrappers will
	not be created.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

04/11/05 14:47:48 -- shannon

Log message:
	Implemented the --memtable runtime option.  This flag creates
	a table to keep track of the memory allocated, and checks for
	common errors.  The chapel developer may call the printMemTable()
	function to print the contents of this table.
	
	Refactored the printHelpTable function, arg.c and config.c.
	
	Specifically:
	
	* createConfigVarTable.cpp:  This traversal writes to the
	  rtconfig.c file calls to parse the config args as well as
	  calls to print the help table and the config var table
	  since these things can't be done until the config var table
	  has been created (which is done after the call to parseArgs
	  in main.c).
	
	* arg.c:  Moved a bunch of parsing functions out of arg.c and
	  into config.c since parsing of config args is now done from
	  rtconfig.c with a call into config.c.  Also refactored the
	  printing of the help table, creating an array of flag structs
	  for ease of adding more flags.
	
	* config.c:  When parseArgs is called, all config args are now
	  passed from arg.c to config.c and added to a list to be parsed
	  later, when the config var table has been created.
	
	* Changed the expected output for several tests, and added the
	  --memtable execopt to some others.

Modified files:
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	chapel/runtime/include/: arg.h chplmem.h config.h 
	chapel/runtime/src/: arg.c chplmem.c chplmem_tests.c config.c 
	                     main.c 
	chapel/test/memory/shannon/: configVarFile.execopts 
	                             configVarFile.good freedMalloc.good 
	                             jacobi.execopts jacobi.good 
	                             reallocZeroSize.good 
Added files:
	chapel/test/memory/shannon/: freedMalloc.execopts 
	                             freedWithoutMalloc.execopts 
	                             reallocWithoutMalloc.execopts 
	                             reallocZeroSize.execopts 

---------------------------------------------------------------------------

04/11/05 15:26:17 -- bradc

Log message:
	Started work on supporting the ability to build
	the compiler without the garbage collection, but
	didn't quite get it working yet.  This is a move
	in that direction and also cleans up some aspects
	of our make process:
	
	* Made all files that were #including gc_cpp.h #include chplalloc.h
	  instead.
	
	* Fixed Chapel lexer macros to work when gc is not turned on.
	
	* Made list.h use of offsetof work when gc is not turned on.
	
	* Removed the -DDEBUG compiler flag which we never seem to use (and
	  was probably too high up in the build tree anyway...).
	
	* Made the -Wno-invalid-offsetof flag only get used for directories
	  that need it This can be selected by setting the DIR_USES_OFFSETOF
	  macro in a subdirectory's Makefile (see analysis/Makefile for an
	  example).
	
	* Made the -DLANG_V macro get set only in the vparser directory (the
	  only place it was needed)

Modified files:
	chapel/compiler/analysis/: Makefile 
	chapel/compiler/include/: analysis.h ast.h chplalloc.h list.h 
	                          loc.h symscope.h 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: pass.h 
	chapel/compiler/vparser/: Makefile Makefile.share 
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

04/11/05 15:40:27 -- jplevyak

Log message:
	Something is amiss with string assignment, the assignment is overwriting
	both a1.s and a2.s even though the code is only referring to a2.s.

Modified files:
	chapel/test/classes/deitz/: test_record_assign1.future 

---------------------------------------------------------------------------

04/11/05 16:45:48 -- deitz

Log message:
	Added an init function to the common module that is called at the
	beginning of the program.  This extends the functionality of the
	common module.
	
	This checkin contains a patch of SymtabTraversal over the Common and
	USER modules so that symbols are not traversed twice, care of Brad.
	
	Set the defaultVal of arrays to zero mostly as a stopgap although this
	is also where we're headed.
	
	Removed "static" from variables that are declared in the common
	module since these are "exported."
	
	Refuturized test_seq6 and test_seq7 until sequence initialization is
	figured out.
	
	Updated flowanalysis ast output to take into account changes to init
	in the common module.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         symtabTraversal.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertVariableInitializations.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/test/classes/deitz/: test_record7.chpl test_record7.good 
	                            test_record8.chpl test_record8.good 
	chapel/test/types/seq/deitz/noanalysis/: test_seq6.future 
	                                         test_seq7.future 

---------------------------------------------------------------------------

04/12/05 09:17:51 -- jplevyak

Log message:
	Added ChainHashMap::del() and ChainHash::del().  These both take the key,
	delete the first matching entry (there should only be one) and then
	return 1 if something was deleted or 0 if nothing matching was found.
	
	Added tests for the above, updated the compiler/test directory to compile
	and to contain the latest source code.

Modified files:
	chapel/compiler/adt/: list.cpp map.cpp 
	chapel/compiler/include/: map.h 
	chapel/compiler/test/: Makefile list.cpp map.cpp misc.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

04/12/05 09:42:38 -- jplevyak

Log message:
	Integrate the compiler/test directory into the build scheme.
	It is now run every time, but only when the component files
	have changed.
	
	It is a good place to put unit tests.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/test/: Makefile 
Removed files:
	chapel/compiler/test/: beautify.cpp files.cpp list.cpp map.cpp 
	                       misc.cpp mysystem.cpp stringutil.cpp 
	                       vec.cpp 

---------------------------------------------------------------------------

04/12/05 09:56:50 -- jplevyak

Log message:
	Fix 2 issues discovered by a non-GC valgrind run.

Modified files:
	chapel/compiler/analysis/: ssu.cpp 
	chapel/compiler/include/: prim.h 

---------------------------------------------------------------------------

04/12/05 11:09:16 -- deitz

Log message:
	Some minor type code cleanup.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: symbol.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: removeDeadSymbols.cpp symtab.cpp 

---------------------------------------------------------------------------

04/12/05 11:12:23 -- bradc

Log message:
	Another bug fix to make nightly Sun regressions go
	quietly.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/12/05 11:23:25 -- bradc

Log message:
	Pulling test back out of top-level Makefile
	for the time being so that make depend will
	work again for those that are stuck on it.
	Will work on putting this back in once I
	catch my breath.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

04/12/05 11:36:37 -- jplevyak

Log message:
	Progress on support for sequences.  Sequences and their operators
	are now understood by analysis.  Got as far as I could (easily) and
	then transfered the .futures to Steve to take a look.  Feel free
	to send them back if you find the problem is mine.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp prim_data.dat 
	chapel/compiler/include/: fa.h type.h 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 
	chapel/test/flowanalysis/newast/: declprintdom.good 
	chapel/test/types/seq/deitz/: test_seq1.future test_seq1a.future 
	                              test_seq1b.future 
	                              test_seq1c.future test_seq2.future 
	                              test_seq3.future test_seq4.future 
	                              test_seq5.future test_seq6.future 
	                              test_seq7.future test_seq8.future 
	                              test_seq8b.future 

---------------------------------------------------------------------------

04/12/05 11:40:03 -- deitz

Log message:
	Added new pass ScopeResolveGotos to decouple label resolution from
	symbol resolution in ScopeResolveSymbols.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
Added files:
	chapel/compiler/traversals/: scopeResolveGotos.cpp 
	                             scopeResolveGotos.h 

---------------------------------------------------------------------------

04/12/05 13:55:39 -- bradc

Log message:
	Updating .cvsignores to ignore .tmp files left
	by the testing system.

Modified files:
	chapel/test/flowanalysis/jplevyak/constants/: .cvsignore 
	chapel/test/flowanalysis/jplevyak/loop/: .cvsignore 

---------------------------------------------------------------------------

04/12/05 14:01:30 -- shannon

Log message:
	Added an error message to the printMemTable function
	reminding the caller that this function must be
	used in conjunction with the --memtable flag.

Modified files:
	chapel/runtime/src/: chplmem.c 
Added files:
	chapel/test/memory/shannon/: printMemTable.chpl 
	                             printMemTable.good 

---------------------------------------------------------------------------

04/12/05 14:13:23 -- shannon

Log message:
	Added error checking for a call to malloc that
	doesn't use the _chpl_malloc wrapper.

Modified files:
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/12/05 14:14:03 -- deitz

Log message:
	Added new method varDefSet() which returns a Vec<VarSymbol*>* to
	DefStmt and DefExpr of all the VarSymbols defined in that statement or
	expression.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 

---------------------------------------------------------------------------

04/12/05 14:17:21 -- deitz

Log message:
	Implemented new scope resolution of symbols to enforce that variables
	are defined before they are used.  Functions, types, and modules do
	not need to be defined before they are used.
	
	For cases like
	
	  var x : integer = 12;
	  ...
	  {
	    ...
	    writeln(x);
	    ...
	    var x : integer = 6;
	
	an error is still flagged.  We can change this later, but this error
	is nice because this code is a little strange.

Modified files:
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 

---------------------------------------------------------------------------

04/12/05 14:21:42 -- deitz

Log message:
	Added two new tests and updated other outputs based on recent semantic
	changes of the def-before-use enforcement rules.
	
	This fixes the regression on
	
	   trivial/deitz/test_var_decl_strange3.good

Modified files:
	chapel/test/functions/jplevyak/: intent-7-error.good 
	chapel/test/trivial/bradc/: defaultinit1a.good vardecls.good 
	chapel/test/trivial/deitz/: test_config_use_before_decl.good 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.good 
Added files:
	chapel/test/trivial/deitz/: test_scope1.chpl test_scope1.good 
	                            test_scope2.chpl test_scope2.good 

---------------------------------------------------------------------------

04/12/05 15:20:51 -- bradc

Log message:
	Adding a simple test of the -h flag that Shannon
	and I worked on together, as well as fodder for
	manageably maintaining other tests that generate
	-h output (work that she will pick up now).

Added files:
	chapel/test/execflags/shannon/: .cvsignore help.chpl 
	                                help.execopts help.good 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarModStrings2.cfghelp 

---------------------------------------------------------------------------

04/12/05 15:20:54 -- deitz

Log message:
	Moved defaultConstructor out of StructuralType and into Type so all
	types now have a defaultVal and a defaultConstructor.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

04/12/05 16:52:19 -- shannon

Log message:
	Added the --memtable flag to the help message, and changed
	the expected output in the help.good file.  I created a
	new test directory, help, which is a subdirectory of
	execflags/shannon/configs, and moved the nine tests that
	use the -h exec option to this directory.  Brad's PREDIFF
	file now autogenerates the .good files for these nine tests
	from a cat of the help.good file and the $testname.cfghelp file
	that contains the individual config var table output for each
	test.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/execflags/shannon/: help.good 
Added files:
	chapel/test/execflags/shannon/configs/help/: .cvsignore PREDIFF 
	                                             configVar-Dash.cfghelp 
	                                             configVar-Dash.chpl 
	                                             configVar-Dash.execopts 
	                                             configVarHelp.cfghelp 
	                                             configVarHelp.chpl 
	                                             configVarHelp.execopts 
	                                             configVarModStrings1.cfghelp 
	                                             configVarModStrings1.chpl 
	                                             configVarModStrings1.execopts 
	                                             configVarModStrings2.cfghelp 
	                                             configVarModStrings2.chpl 
	                                             configVarModStrings2.execopts 
	                                             configVarSetOver.cfghelp 
	                                             configVarSetOver.chpl 
	                                             configVarSetOver.execopts 
	                                             configVarSetTwoTypes.cfghelp 
	                                             configVarSetTwoTypes.chpl 
	                                             configVarSetTwoTypes.execopts 
	                                             configVarTwoModules.cfghelp 
	                                             configVarTwoModules.chpl 
	                                             configVarTwoModules.execopts 
	                                             varNameEnumQM.cfghelp 
	                                             varNameEnumQM.chpl 
	                                             varNameEnumQM.execopts 
	                                             varNameQMark.cfghelp 
	                                             varNameQMark.chpl 
	                                             varNameQMark.execopts 
Removed files:
	chapel/test/execflags/shannon/configs/: configVar-Dash.chpl 
	                                        configVar-Dash.execopts 
	                                        configVar-Dash.good 
	                                        configVarHelp.chpl 
	                                        configVarHelp.execopts 
	                                        configVarHelp.good 
	                                        configVarModStrings1.chpl 
	                                        configVarModStrings1.execopts 
	                                        configVarModStrings1.good 
	                                        configVarModStrings2.cfghelp 
	                                        configVarModStrings2.chpl 
	                                        configVarModStrings2.execopts 
	                                        configVarModStrings2.good 
	                                        configVarSetOver.chpl 
	                                        configVarSetOver.execopts 
	                                        configVarSetOver.good 
	                                        configVarSetTwoTypes.chpl 
	                                        configVarSetTwoTypes.execopts 
	                                        configVarSetTwoTypes.good 
	                                        configVarTwoModules.chpl 
	                                        configVarTwoModules.execopts 
	                                        configVarTwoModules.good 
	                                        varNameEnumQM.chpl 
	                                        varNameEnumQM.execopts 
	                                        varNameEnumQM.good 
	                                        varNameQMark.chpl 
	                                        varNameQMark.execopts 
	                                        varNameQMark.good 

---------------------------------------------------------------------------

04/12/05 17:37:06 -- deitz

Log message:
	Added trivial variable declaration test.

Added files:
	chapel/test/trivial/deitz/: test_var_decl_init4.chpl 
	                            test_var_decl_init4.good 

---------------------------------------------------------------------------

04/12/05 17:42:55 -- deitz

Log message:
	NOTE: This causes two regressions:
	
	  [Error matching compiler output for classes/deitz/test_nested_record1]
	  [Error matching compiler output for classes/deitz/test_nested_record2]
	
	Rewrote variable initialization code.  We now initialize a variable
	only at its declaration point (since there are no more uses before
	defs).
	
	Fixed bugs in the insertion of default value temps for types having to
	do with classes within classes and such.
	
	The ProcessDefs pass is no longer called and is dead.  This pass used
	to insert default variable initializations before analysis using
	VarInitExpr.
	
	Fixed a bug in call_fixup on statements.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertVariableInitializations.cpp 
	                             insertVariableInitializations.h 
	                             processDefs.cpp 

---------------------------------------------------------------------------

04/12/05 17:48:50 -- deitz

Log message:
	Removed ProcessDefs pass as it is no longer necessary.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: processDefs.cpp processDefs.h 

---------------------------------------------------------------------------

04/12/05 18:01:52 -- bradc

Log message:
	Yesterday I built the compiler without GC and ran valgrind,
	which revealed lots of problems.  This checkin fixes those
	problems that previous peoples' checkins haven't already
	addressed.
	
	The vast majority of the problems were use-before-def
	problems that weren't an issue when using GC because it
	zeroes out memory on the user's behalf.  I believe we
	would like to avoid leaning on this feature so that we
	can build without GC and so that we're more able to
	remove our use of GC or switch do a different GC system
	(which may not zero memory) down the road.  This would
	be a good topic for discussion, especially if there's
	disagreement.  Anyway, I'm proposing that people be
	more careful about initializing their class' fields in
	the constructors (if anyone knows of a g++ flag that
	statically checks that class members are initialized,
	I think it'd be reasonable to throw it as a way of
	keeping ourselves honest).
	
	This experiment did catch some actual problems that
	GC must have been masking somehow, and I believe
	that these tests were behind the nondeterministic
	failure of tests this past week or so (which is to
	say, they seemed related to the problems, and I
	haven't seen them failing sincce then, so I'm
	optimistic).
	
	Apparent problem #1: wrapper construction for functions
	       seemed to be accessing vectors out of the range
	       that they were actually storing.  Steve helped
	       me fix these.
	
	Apparent problem #2: an array out-of-bounds problem that
	       John fixed last night or this morning.
	
	Apparent problem #3: the freeing of a pointer that
	       couldn't legally be freed that John fixed with
	       that same checkin.
	
	Apparent problem #4: a structure seems to be used after it
	       was freed in parse.cpp (John, could you check this?
	       I sent mail and marked it with a comment).
	
	The following are things that I added zero/NULL initializers
	for in class constructors.  In some cases I was conservative
	because it was taking too much time to determine whether
	each individual field was or was not defined before it was
	used.  The author of the code may wish to look in these cases
	and decide if they think my zeroing was overly zealous.
	In other cases, I only zeroed those fields that actually
	seemed to trigger problems, though there may be other issues
	lurking just under the surface:
	
	   AVar::is_lvalue
	       ::is_dead
	   BasicSym::*
	   CountQueue::size
	   CreateEntryPoint::entryPoint
	   CreationSet::added_element_var
	   DomainType::idxType
	   Expr::pragmas
	   Fixup::verify
	   ForallExpr::indexScope
	   Fun::sym;
	   LoopNode::parent
	   ParseAST::*
	   PNode::next_callees
	   Scope::in
	   Stmt::parentSymbol
	       ::pragmas
	   Sym::*
	   Symbol::pragmas
	   SymScope::lookupCache
	   Var::is_internal
	      ::is_filtered
	      ::is_formal
	
	Also changed the low-level codegen tests' Makefile.cg
	so that they didn't rely on the compiler being built
	with garbage collection on.
	
	This check-in causes one regression for
	jplevyak/test_coerse2.chpl which is that
	the change to j's initialization in coercion_wrapper
	causes two coercion temps to be created with the
	same name.  Yet Steve says that the test in question
	shouldn't be creating coercion wrappers (and if it
	did, it should presumably create them with
	different names?).  So leaving this regressing as a
	placeholder.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: cfg.cpp fa.cpp fun.cpp loop.cpp 
	                           pnode.cpp sym.cpp 
	chapel/compiler/include/: list.h sym.h var.h 
	chapel/compiler/passes/: createEntryPoint.cpp createEntryPoint.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/test/: .cvsignore 
	chapel/compiler/traversals/: fixup.cpp 
	chapel/compiler/vparser/: parse.cpp parse_ast.cpp scope.h 
	chapel/test/dispatch/jplevyak/: Makefile.cg 
	chapel/test/lowlevelcg/jplevyak/: Makefile.cg 

---------------------------------------------------------------------------

04/12/05 18:07:32 -- bradc

Log message:
	Added some new variations of a test whose intent changed
	when the use-before-def semantics changed today.

Added files:
	chapel/test/trivial/bradc/: vardecls1a.chpl vardecls1a.good 
	                            vardecls1b.chpl vardecls1b.good 

---------------------------------------------------------------------------

04/12/05 18:48:35 -- jplevyak

Log message:
	Fix free to be after the last potential use of the variable.

Modified files:
	chapel/compiler/vparser/: parse.cpp 

---------------------------------------------------------------------------

04/13/05 06:30:01 -- shannon

Log message:
	Added an error message in the event --memthreshold is
	used without also using the --memtrace option.  Also
	modified a prior error message and its corresponding
	test output.

Modified files:
	chapel/runtime/src/: chplmem.c 
	chapel/test/memory/shannon/: printMemTable.good 
Added files:
	chapel/test/memory/shannon/: thresholdWithoutTrace.chpl 
	                             thresholdWithoutTrace.execopts 
	                             thresholdWithoutTrace.good 

---------------------------------------------------------------------------

04/13/05 09:02:49 -- deitz

Log message:
	Fixed the building of constructors to use the defaultConstructor if
	the defaultVal doesn't exist.  This fixes the test_nested_record
	regressions.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/13/05 10:33:37 -- bradc

Log message:
	Fixed a minor script incompatability
	which was responsible for the Sun
	nightlies seeming to have a dozen
	or so fewer tests than Linux.
	Tomorrow's run should be more accurate
	as a result.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

04/13/05 11:03:37 -- deitz

Log message:
	Removed futures for noanalysis test_seq6 and test_seq7.

Removed files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq6.future 
	                                         test_seq7.future 

---------------------------------------------------------------------------

04/13/05 11:32:35 -- jplevyak

Log message:
	Cleanup of VarDefExpr handling.
	Fixed bugs with tuples and mixed primitive handling.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/test/flowanalysis/newast/: declprintdom.good 
	                                  declprintdom2.good domarr.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

04/13/05 11:42:31 -- bradc

Log message:
	Improved logic to decide whether or not the
	makeplot step should be run in the nightly
	run.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/13/05 14:12:06 -- deitz

Log message:
	Made Expr::typeInfo calls work before analysis, though very
	conservatively.
	
	As a result of this change, I updated the output to
	  test/flowanalysis/newast/pareninit.good
	John, can you make sure this is okay.  It almost looks like integer is
	known now.
	
	Started building replaceExpr functions to replace children pointers of
	expressions.  These are currently not used but should eventually help
	replace the "Expr** back" pointer to a pointer.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/test/flowanalysis/newast/: pareninit.good 

---------------------------------------------------------------------------

04/13/05 14:45:17 -- jplevyak

Log message:
	Use Expr::typeInfo() to remove unnecessary coercions from the IF1 code.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/13/05 14:46:49 -- jplevyak

Log message:
	Remove unnecessary coersions (and the resulting type information)

Modified files:
	chapel/test/flowanalysis/newast/: assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  codegen_test.good 
	                                  danglingelse.good 
	                                  logical_not.good 
	                                  unary_plusMinus.good 
	                                  whileLoop.good 

---------------------------------------------------------------------------

04/13/05 15:32:56 -- deitz

Log message:
	Added Stmt* parent to Stmt so statements like expressions now have a
	pointer to their parent statement.  This is set in Fixup and verified
	in Fixup-verify.
	
	Reenabled verification of Symbol::parentScope in Fixup::verify.  This
	was turned off in getting the getters in, but is now special cased for
	getters (since getters are not in a scope and can thus not be looked
	up).
	
	Fixed call_fixup on expressions to deal with the statement's parent.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

04/13/05 15:59:04 -- deitz

Log message:
	Renamed Stmt::parent to Stmt::parentStmt.  This seems more descriptive
	and is in keeping with Stmt::parentSymbol which is the pointer to the
	symbol that the statement came from.
	
	I'm thinking of renaming Expr::parent to Expr::parentExpr and
	Expr::stmt to Expr::parentStmt as these seem more descriptive and more
	in keepign with the statement naming scheme.  Any objections?

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: fixup.cpp 

---------------------------------------------------------------------------

04/13/05 16:05:06 -- jplevyak

Log message:
	tuple and record assignment now work with anything that responds to
	the indexing/getter methods.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/13/05 16:36:17 -- jplevyak

Log message:
	Update several .future files and remove a duplicate \n from the end of
	warnings/errors.
	
	In particular, change a .future to note:
	
	The problem is that Tuple is a class,
	not a TupleType.  In order to make the change
	we need to be able to create methods on TupleType's
	so that the tuple indexing function can be built
	in internal_prelude.chpl.   Alternatively, tuple
	indexing could be auto-built along with the other
	setters, getters.

Modified files:
	chapel/compiler/util/: misc.cpp 
	chapel/test/arrays/deitz/: test_array_basic2.future 
	chapel/test/classes/bradc/: weirdinit.good 
	chapel/test/classes/deitz/: test_bad_function_noparens.good 
	chapel/test/compflags/bradc/twomodulesnomain/: module1.good 
	chapel/test/functions/jplevyak/: equal-8.future equal-9.chpl 
	                                 equal-9.future 
	                                 intent-5-error.good 
	                                 intent-7-error.good 
	chapel/test/modules/bradc/: nestedmodule.good 
	chapel/test/modules/bradc/manymodules/: manymodules.good 
	chapel/test/trivial/bradc/: defaultinit1a.good redefinevar.good 
	                            vardecls.good vardecls1a.good 
	chapel/test/trivial/bradc/entrypoint/: twomains.good 
	chapel/test/trivial/deitz/: test_config_use_before_decl.good 
	                            test_scope2.good 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.good 
	chapel/test/trivial/roxana/: test_param_decl2.good 
	                             test_param_decl3.good 
	chapel/test/types/enum/deitz/: test_enum6.good 

---------------------------------------------------------------------------

04/13/05 16:47:57 -- bradc

Log message:
	Added some hooks to make nightly work on
	cygwin and to work the first time it's
	run without complaints.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/13/05 18:55:51 -- bradc

Log message:
	Added *.tmp to another .cvsignore file in the
	testing directory.
	
	Reminder (because we all do it, including me):
	whenever you create a new directory in the
	testing system, add a .cvsignore file with *.tmp
	in it so that cvs -nq update stays quiet for
	those of us who depend on it like a security
	blanket).

Modified files:
	chapel/test/memory/shannon/: .cvsignore 

---------------------------------------------------------------------------

04/14/05 11:34:52 -- deitz

Log message:
	Renamed Expr::parent to Expr::parentExpr to better say that this is
	the parent of this expression and it is an Expr.  Renamed Expr::stmt
	to Expr::parentStmt to better say that this is the parent of this
	expression and it is a Stmt.
	
	Improved Fixup and added a new test (currently commented out) to make
	sure that the parentStmt of a parentExpr of an Expr is the same as the
	parentStmt of that Expr.  Also added a new test (currently commented
	out) to make sure that the parentSymbol of the parentStmt of a Stmt is
	the same as the parentSymbol of that Stmt.  These fail but motivate me
	to fixup the __init function once and for all.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         removeDeadSymbols.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertTemps.cpp 
	                             insertUnionChecks.cpp 
	                             methodsToFunctions.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             resolveOverloadedOperators.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

04/14/05 14:07:20 -- bradc

Log message:
	Touched up the Makefile in the unit test directory
	(compiler/test) to more closely follow our current
	Makefile organization and work better overall
	(improved making from a clean build -- in particular
	one with no $PLATFORM subdirectory -- make depend,
	etc.)
	
	The one ugliness here is that I had to pull out the
	VPATH variable because it was finding the $PLATFORM
	subdirectory elsewhere and not creating a new one
	for this directory.  The result is that the origin
	of the .test.cpp files has to be given more
	explicitly.
	
	Re-enabled the building of the unit test directory
	from the top-level compiler directory with every
	compile.
	
	Am tempted to rename this directory unittest or
	something like that because I always cd into it
	accidentally when I want to go to the regression
	test directory.  Thoughts?

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	chapel/compiler/test/: Makefile 

---------------------------------------------------------------------------

04/14/05 14:37:43 -- jplevyak

Log message:
	Disable GC_VALGRIND_SUPPORT when doing x86_64 compiles.

Modified files:
	chapel/third-party/boehmgc/gc6.3/: configure 

---------------------------------------------------------------------------

04/14/05 15:42:44 -- deitz

Log message:
	The major change of interest to anyone in this checkin is as follows:
	
	Previously Expr::parentStmt (Expr::stmt a little longer ago) was set
	for every expression.  This is no longer the case and doesn't really
	make sense.  For example, the domain expression in the ArrayType and
	the init expression in the Symbol had its parentStmt set even though
	its parent is a symbol/type.  HOWEVER, because some code relied on
	getting its parentStmt (which happened to be the DefStmt of the symbol
	or type), I've added a new function Expr::getStmt() that gets this
	statement.
	
	Now Expr::parentSymbol ***new*** and Stmt::parentSymbol are guaranteed
	to be set.  These are a TypeSymbol for a StructuralType, a FnSymbol,
	or a ModuleSymbol.
	
	---------
	
	Added Expr::parentSymbol because some expressions are in symbols or
	types.  This is set and maintained by Fixup.
	
	Dramatically cleaned call_fixup.  You've got to see this code to
	appreciate this change, though the old code was embarassing to me so
	there is no need to go and appreciate it.  The new call_fixup calls
	fixup on the parentExpr, parentStmt, or parentSymbol of an Expr or
	parentStmt or parentSymbol of a Stmt whichever is set first.  This is
	useful for replace, insertBefore, and insertAfter which can use this
	function to Fixup what was just replaced or inserted next to.  Added
	functions fixup_expr, fixup_stmt, and fixup_symbol to be used on
	Exprs, Stmts, and Symbols already in the AST whose subASTS have been
	modified.
	
	Enabled Fixup testing of all parents as well as parents of parents.
	
	Fixed a shocking bug in MethodsToFunctions that Fixup is now catching
	in which the MemberAccess was replaced with a FnCall rather than the
	ParenOpExpr.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp fixup.h insertTemps.cpp 
	                             methodsToFunctions.cpp 
	                             processParameters.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

04/14/05 15:45:56 -- jplevyak

Log message:
	Patch for the coerce2 test.
	
	Note: this is not a fix for the underlying problem but an efficiency
	at a higher level.
	
	There was an issue that the coersion wrappers were being calculated before
	it was determined if the function was actually subsumed by another (more
	precise) function.
	
	In this test, in the first analysis pass, there will still be a wrapper
	built for foo(float, int) even though this doesn't occur in the program.
	The reason for this is that operator = is now overloaded, and the
	i and f variables are neither declared to have a type nor are they
	initialized in the definition, so they are of unknown type.  The
	overloaded = operator is first shared by the two calls which causes
	the types of i and f to be confused.  Their actual types are determined
	in the next pass, but not before the coercion wrapper for the impossible
	case is created.
	
	(probably more information than you wanted to know)
	
	However, there is still likely a problem in the code which creates
	the wrappers since I didn't change anything other than to avoid
	additional, correct but unnecessary, wrapper creations.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

04/14/05 15:49:23 -- jplevyak

Log message:
	Fix misspelling

Added files:
	chapel/test/types/type_variables/jplevyak/: test_coerce1.chpl 
	                                            test_coerce1.good 
	                                            test_coerce2.chpl 
	                                            test_coerce2.good 
Removed files:
	chapel/test/types/type_variables/jplevyak/: test_coerse1.chpl 
	                                            test_coerse1.good 
	                                            test_coerse2.chpl 
	                                            test_coerse2.good 

---------------------------------------------------------------------------

04/14/05 15:51:02 -- jplevyak

Log message:
	Fixes for compilation on x86_64.
	
	Note, if you want to cast a pointer to an integer it is best to use
	
	#include <stdint.h>
	int x = (int)(intptr_t)p;  // where p is your pointer
	
	to avoid all the warnings.
	
	If you are printing out a pointer %p works.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/14/05 15:55:57 -- jplevyak

Log message:
	More x86_64 fixes... should be a clean build now.

Modified files:
	chapel/compiler/adt/: vec.cpp 

---------------------------------------------------------------------------

04/14/05 17:25:44 -- deitz

Log message:
	NOTE: [Error matching compiler output for classes/deitz/test_type_in_class1]
	
	Cleaned up FnSymbol::copy and DefExpr::copy.
	
	Fixed a bug related to
	
	  #define NO_RESOLVE_CONSTRUCTOR
	
	in which not all constructors (cloned) were generated.
	
	I've now removed this #define.  There is one regression:
	
	  [Error matching compiler output for classes/deitz/test_type_in_class1]
	
	John, could you take a look at this.
	
	By removing this #define, constructors are no longer resolved before
	analysis allowing wrappers and cloning of functions to occur.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertWriteFns.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

04/14/05 17:26:39 -- jplevyak

Log message:
	Change the analysis log so that it doesn't include
	such redunant information as that functions
	are functions and types are types.  This
	should prevent some of the more random
	differences which result from small changes to
	the AST and/or IF1 translation.

Modified files:
	chapel/compiler/analysis/: clone.cpp 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

04/14/05 17:36:51 -- bradc

Log message:
	Made the runtime build an etags TAGS file for
	the runtime directory whenever the runtime
	library is rebuilt.  This gets placed in the
	runtime/ directory.

Modified files:
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

04/14/05 17:38:01 -- bradc

Log message:
	Improved typeInfo() for BinOp Exprs in order
	to fix the like-1.chpl test.  Also cleaned up
	the logic of insertElidedLoops so that it
	didn't try to store state across subexpressions
	but rather looks only at the local expression.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/14/05 17:45:53 -- bradc

Log message:
	My last checkin contained a change to nightly that
	wasn't quite ready for primetime yet.  This one is
	better, thanks to John's suggestion.
	
	Added the ability to set a new environment variable:
	
	        CHPL_NIGHTLY_DEBUG_EMAIL
	
	which specifies an email address to which the results
	of a -debug run of the nightly script should be sent.
	If the variable is unset, it will be sent to
	$username@cray.com where $username is the login id of
	the person running the script.  Thus, Cray users
	should not need to set this environment variable, but
	remote users will need to.
	
	When run in -cron mode (which should typically only be
	done by cron scripts), the mail will be sent to chpl_dev.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/14/05 18:30:16 -- bradc

Log message:
	Cleaned up the building of the coercion function
	wrappers to use the Map<> that's passed in more
	appropriately, to avoid an extra loop of iteration,
	and to eliminate a handful of unnecessary variables.
	The other wrapper creation functions could probably
	benefit from similar rewrites.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/14/05 18:33:00 -- bradc

Log message:
	Was trying to create a test that showed how
	our use of C record assignment was problematic,
	but wasn't successful.  Thought these were
	interesting tests nonetheless.  One uses
	sequences, and is therefore a future.

Added files:
	chapel/test/classes/bradc/records/: .cvsignore assignRecord.chpl 
	                                    assignRecord.good 
	                                    assignRecord2.chpl 
	                                    assignRecord2.future 
	                                    assignRecord2.good 

---------------------------------------------------------------------------

04/15/05 09:37:53 -- jplevyak

Log message:
	Add test to see if call_info() is called with code not
	in a function (unexecutable code) and return.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/15/05 10:36:31 -- deitz

Log message:
	Changed VarInitExpr to contain a Symbol rather than an Expr.  This
	makes more sense since this expression is a placeholder for either the
	Symbol's Type's defaultVal expression or a FnCall of the Symbol's
	Type's defaultConstructor if there was no defaultVal.
	
	Reworked the creation of the constructor body to be more inline with
	our new take on how it should be done.  The following #defines should
	be used:
	
	type.cpp:
	//#define CONSTRUCTOR_WITH_PARAMETERS
	//#define USE_VAR_INIT_EXPR
	
	buildClassConstructors.cpp:
	//#define CONSTRUCTOR_WITH_PARAMETERS

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             removeNamedParameters.cpp 

---------------------------------------------------------------------------

04/15/05 11:12:26 -- jplevyak

Log message:
	USE_VAR_INIT_EXPR is now defined with no regressions.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/15/05 12:19:08 -- bradc

Log message:
	Changing nightly script to set $platform to
	linux64 if running on a 64-bit linux machine
	so that we can more easily distinguish
	between John's nightly linux runs and ours.
	
	Also, disabled the caching of UW source
	trees unless it's my linux cron job.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/15/05 12:20:04 -- deitz

Log message:
	Reworked the TupleType constructor to get it more inline with the
	RecordType constructor so that I can make TupleType subclass
	RecordType.  The change basically makes it no longer accept one type.
	All the types are added in the addType method now.
	
	This required some changes to IndexType.  I added code to set up its
	and its tuple's defaultVal because this wasn't being done.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

04/15/05 14:10:02 -- bradc

Log message:
	Swapped John's #inclusion of stdint.h for
	inttypes.h, as our Suns don't yet support
	stdint.h.  This should fix the broken Sun
	build from last night's regressions.

Modified files:
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/15/05 15:18:54 -- deitz

Log message:
	Added replaceChild routines to Exprs and Stmts eventually to replace
	use of Back.
	
	These should remain unused for the time being as I still need to add
	them to Symbols and Types.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 

---------------------------------------------------------------------------

04/15/05 15:30:20 -- jplevyak

Log message:
	Add a primitive to permit setting of individual tuple elements.
	Use the primitive to implement a setter for tuples analogous
	to the way array elements are set.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp if1.cpp 
	                           prim_data.dat 
	chapel/compiler/include/: builtin_symbols.h code.h fa.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/vparser/: prelude.v 
	chapel/test/flowanalysis/newast/: declprintdom.good 
	                                  declprintdom2.good domarr.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/15/05 16:01:37 -- bradc

Log message:
	Starting the process to make a GC-less build of
	Chapel using the Makefiles.  Added logic so that
	if "make nogc" is executed in the top-level,
	third-party, or third-party/dparser directories,
	dparser will be built without GC.  Put in some
	clever logic so that the dparser/d directory will
	only be cleaned out when the builder switches from
	gc- to no-gc and back again.

Modified files:
	./: Makefile 
	chapel/third-party/: Makefile 
	chapel/third-party/dparser/: .cvsignore Makefile 

---------------------------------------------------------------------------

04/15/05 16:07:36 -- bradc

Log message:
	Oops, forgot some very basic ignoring of error codes
	for the first time the third-party Makefiles are run.

Modified files:
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/15/05 16:29:16 -- jplevyak

Log message:
	My bits of the fix for Steve's code to use a constructor for
	strings.  Basically slightly more generalization of the
	VarDefExpr code.   Still has kludges in for Tuples and Arrays.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp 

---------------------------------------------------------------------------

04/15/05 16:31:54 -- jplevyak

Log message:
	Steve's bit of the string constructor code changes.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: processParameters.cpp 

---------------------------------------------------------------------------

04/15/05 16:37:07 -- bradc

Log message:
	Some changes to the nightly script to get it
	working cleanly on cygwin.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/15/05 16:43:05 -- deitz

Log message:
	Runtime change with string constructor change.

Modified files:
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

04/18/05 10:38:22 -- jplevyak

Log message:
	Fixed an issue in low level code generation with tuple indexing.
	Updated some .future files related to tuples.

Modified files:
	chapel/compiler/analysis/: cg.cpp 
	chapel/test/types/tuple/deitz/: test_tuple_simple3.future 
	                                test_tuple_simple4.future 
	                                test_tuple_simple5.future 
	                                test_tuple_simple6.future 
	                                test_tuple_simple7.future 

---------------------------------------------------------------------------

04/18/05 11:19:53 -- deitz

Log message:
	Added runtime flag checkAnalysisTypeinfo to set compiler variable of
	the same name.  This replaces the ANALYSIS_MATCH #define and checks to
	make sure that return_type_info and type_info are working.
	
	Rewrote FindUnknownTypes traversal as a symtab traversal called
	ResolveTypes.  This now runs before ResolveSymbols replacing duplicate
	code.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

04/18/05 11:23:50 -- deitz

Log message:
	Forgot to add these with last commit.

Added files:
	chapel/compiler/symtab/: resolveTypes.cpp resolveTypes.h 

---------------------------------------------------------------------------

04/18/05 11:26:36 -- jplevyak

Log message:
	regressions file listing why things are regressing.

Added files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/18/05 13:22:33 -- bradc

Log message:
	Updated the REGRESSIONS file to list regressions currently
	found on non-linux platforms.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/18/05 13:31:04 -- bradc

Log message:
	Oops -- Steve points out that I had accidentally
	repeated some of the tests that John had already
	covered.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/18/05 13:36:44 -- bradc

Log message:
	Updated compiler's Makefiles so that a version of
	the compiler could be made without using the BoehmGC
	package.  This is done using the "make nogc" option
	from any of the chapel/ compiler/ or compiler/*
	subdirectories.
	
	Building in this mode creates object files of the form
	$(PLATFORM)/expr.nogc.o, so it should be possible to
	switch between gc and no-gc builds without doing any
	cleaning steps in-between.  The compiler that's
	produced in this compilation mode is currently called
	chpl-nogc.
	
	Next step in this effort is to make the testing system
	when run with valgrind use the chpl-nogc compiler by
	default.

Modified files:
	./: Makefile 
	chapel/compiler/: .cvsignore Makefile 
	chapel/compiler/AST/: Makefile.share 
	chapel/compiler/adt/: Makefile.share 
	chapel/compiler/analysis/: Makefile.share 
	chapel/compiler/backend/: Makefile.share 
	chapel/compiler/main/: Makefile.share 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: Makefile Makefile.share 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
	chapel/compiler/util/: Makefile.share 
	chapel/compiler/vparser/: Makefile.share 

---------------------------------------------------------------------------

04/18/05 13:39:45 -- deitz

Log message:
	Cleaned ResolveSymbols traversal.  Greatly improved its logic.
	
	Removed running of MethodsToFunctions since this is now done in
	ResolveSymbols.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: resolveSymbols.cpp resolveSymbols.h 

---------------------------------------------------------------------------

04/18/05 13:50:22 -- deitz

Log message:
	Removed MethodsToFunctions traversal since it is no longer necessary.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: methodsToFunctions.cpp 
	                             methodsToFunctions.h 

---------------------------------------------------------------------------

04/18/05 14:10:00 -- bradc

Log message:
	To improve portability of the nightly script for BSD,
	added the ability to specify the base "tmp" directory
	that the nightly script should run in via the variables
	CHPL_NIGHTLY_TMPDIR or TMPDIR (the former overrides the
	second, and /tmp is used if neither is specified, as it
	is currently), and to specify the "make" utility to run
	via CHPL_NIGHTLY_MAKE or MAKE ("make" is used if neither
	is specified, as it is currently).
	
	John, let me know if this works, or if you find other
	problems.
	
	Also, removed a hack that I'd inserted due to an
	environment problem I was having on cygwin with cron
	jobs.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/18/05 14:22:21 -- deitz

Log message:
	Added replaceChild routines to Symbols and Types.  I also rewrote
	Expr::replace to use the replaceChild routines instead of the back
	pointer.  It still maintains the back pointer but this indicates that
	it can be removed.
	
	Added a stopgap EMPTY_TUPLE_STOPGAP to DestructureTupleAssignments.
	It seems that IndexTypes don't have defaultVal set correctly so that
	the InsertVariableInitializations is putting in a non-sensical
	assignment statement.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 

---------------------------------------------------------------------------

04/18/05 15:08:02 -- deitz

Log message:
	Fixed regression for test_class_list1 by specialcasing the copying of
	getters so that they are not added to the Symboltable and so that they
	pass on their getter information.  Unfortunately for cloning classes,
	the getter points to the old field, not the new one.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/18/05 15:10:01 -- deitz

Log message:
	Updated regressions info.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/18/05 15:37:32 -- shannon

Log message:
	Refactored the printing of the output of the
	memory table, as well as modified the output itself.
	
	Added a test and updated the output of a couple others.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: chplmem_tests.h 
	chapel/runtime/src/: chplmem.c chplmem_tests.c 
	chapel/test/: sub_test 
	chapel/test/memory/shannon/: freedMalloc.good printMemTable.chpl 
	                             printMemTable.good 
	                             reallocZeroSize.good 
Added files:
	chapel/test/memory/shannon/: memtableFlag.chpl memtableFlag.good 
	                             printMemTable.execopts 

---------------------------------------------------------------------------

04/18/05 15:45:48 -- bradc

Log message:
	Predicated execution of ebrowse on its existence to
	protect BSD and other platforms that don't have it
	available.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

04/18/05 15:56:00 -- bradc

Log message:
	Modified the test system so that when it is run with
	the -valgrind option, it will use the chpl-nogc
	executable (built by the make nogc command) rather
	than the normal compiler, since this seems to be the
	more useful execution of valgrind and is what we'll
	start doing in the nightly tests soon.  The
	suppressions are no longer applied to the valgrind
	runs on the compiler either.
	
	This can be overridden using the -compiler option.
	However, note that if using valgrind with the normal
	chapel compiler, you'll now have to specify the
	suppressions using the CHPL_VALGRIND_OPTS environment
	variable.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/18/05 15:56:47 -- bradc

Log message:
	Added another missing initialization that valgrind caught.

Modified files:
	chapel/compiler/include/: var.h 

---------------------------------------------------------------------------

04/18/05 15:57:58 -- bradc

Log message:
	Oops, just noticed that I forgot to use the
	$make variable that I inserted into the nightly
	test to make BSD work better.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/18/05 17:07:51 -- deitz

Log message:
	Rewrote Expr:: and Stmt:: replace, insertBefore, insertAfter, append,
	and extract to use the new replaceChild function rather than the back
	pointer to the pointer.
	
	Fixed a bug in RemoveDeadSymbols in which an entire function would be
	removed if any formal parameter was flagged as dead.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 

---------------------------------------------------------------------------

04/18/05 17:08:40 -- bradc

Log message:
	Updated the nightly script so that if it's run in valgrind
	mode, it will build the no-GC version of the compiler in
	order to run valgrind on it.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/18/05 17:24:48 -- bradc

Log message:
	Added a new flag -valgrindexe that causes the test system
	to run valgrind on the generated executable but not on the
	compiler itself.  This is designed to help people who are
	developing the runtime valgrind their code without building
	a -nogc version of the compiler.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/18/05 19:01:35 -- jplevyak

Log message:
	Fix Linux64 compilation with another format warning->error.

Modified files:
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/19/05 09:39:44 -- deitz

Log message:
	Ding, Dong!  Expr** Expr::back and Stmt** Stmt::back are dead!
	
	Removed the SET_BACK macro and all references to back.
	
	Summary. There were major disadvantages to using "back" for replacing
	child expressions and statements in the AST. This pointer to a pointer
	was in every Expr and Stmt and pointed to the Expr* or Stmt* pointer
	that pointed to the Expr or Stmt that it was in.  This allowed us to
	easily update this pointer.
	
	Major disadvantages to "back" scheme:
	
	1. It didn't allow us to define pointers to subclasses of Expr or Stmt
	   in the code.  For example, defExprList in DefStmt had to be an
	   Expr* even though it was always a DefExpr*.  This was the major
	   disadvantage.
	
	2. It led to gratuitously obfuscated code like "if (*expr->back =="
	   that should have been written "if (expr ==."
	
	3. It led to clever code for implementing replace, insertBefore, and
	   extract which are now much simpler.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

04/19/05 10:07:55 -- deitz

Log message:
	Renamed defExprList in DefStmt to defExprls and made it a DefExpr*.
	It was previously an Expr*.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

04/19/05 10:20:30 -- deitz

Log message:
	Changed the type of symDefs in LetExpr to DefExpr* from Expr*.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: transformLetExprs.cpp 

---------------------------------------------------------------------------

04/19/05 10:33:11 -- bradc

Log message:
	Cleaned up the cvs checkout of sources in the nightly
	script to make it assume less about who expands which
	variables (perl or the shell).  This should make it
	work on BSD without problems.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/19/05 12:48:51 -- deitz

Log message:
	Futurized tuple regressions since they are not working for the same
	reason that the other tuple tests are not working.  They had been
	sneaking by for a little.

Added files:
	chapel/test/types/tuple/bradc/: writeTuple.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 

---------------------------------------------------------------------------

04/19/05 12:59:22 -- bradc

Log message:
	Changed a use of $cwd to pwd in order to
	support logfile specifications that use
	Windows-style // directory names to
	refer to cross-mounted directories.
	This allows cygwin's testing to write
	its logs to our unix disks.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

04/19/05 13:10:11 -- jplevyak

Log message:
	Improve support for index types by building special purpose
	operator= functions for assigning from and assigning to IndexTypes
	things of the index type.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/test/flowanalysis/newast/: declprintdom2.good domarr.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/19/05 13:40:06 -- jplevyak

Log message:
	Fix SEGV in cloning.

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

04/19/05 13:43:06 -- jplevyak

Log message:
	Fixed SEGV, now fails in copyType()

Modified files:
	chapel/test/classes/bradc/records/: assignRecord2.future 

---------------------------------------------------------------------------

04/19/05 13:50:20 -- deitz

Log message:
	Reworked TupleType to be a subclass of Structural Type.  It is now
	treated very similarly to records.  When a type is added to TupleType
	using the addType procedure, a field named _field# is added to the
	structural type.
	
	TupleTypes have accessors and constructors now.  There is no longer a
	->defaultVal associated with TupleTypes as initialization is now done
	with a defaultConstructor much like with RecordType.
	
	I put in code to print out the old TupleType IO for IndexTypes as a
	stopgap until IndexTypes use fully-defined tuples, TupleTypes with
	symbols so they can be codegened and have constructors, etc.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: insertWriteFns.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             destructureTupleAssignments.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertVariableInitializations.cpp 
	                             specializeParenOpExprs.cpp 
	chapel/test/flowanalysis/newast/: declprintdom2.good domarr.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/19/05 14:26:44 -- jplevyak

Log message:
	"class Tuple" is now "record Tuple" sincce Tuples have value semantics.
	The overloaded = on Index now assigns to and from integers only.
	
	We are going to have to build special versions of overloaded =
	for Index types which have an idxType which is a Tuple (as we
	have for tuples).  We are also going have to add either accessors
	for the "fieldN" accessors to Index types which are of Tuples or
	switch the Tuple = function to use numeric indexing functions.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

04/19/05 15:27:49 -- deitz

Log message:
	Added a new static function to TypeSymbol
	
	  TypeSymbol*
	  TypeSymbol::lookupOrDefineTupleTypeSymbol(Vec<Type*>* components)
	
	that either finds an existing tuple with the components passed or
	creates one.  This will currently only work on tuples of primitive
	types because the new tuple is created in _CommonModule.
	
	This function is used in InsertAnonymousTypes when inserting anonymous
	tuple types and is intended to be used by analysis to create new tuple
	types on the fly.
	
	This function builds all the standard tuple methods, like the
	constructor, when it is called.
	
	Modified BuildClassConstructorsEtc not to build the default structural
	type methods if they have already been built, since they have for
	tuples now.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	                             insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

04/20/05 10:37:39 -- jplevyak

Log message:
	Add interm "field1" "set_field1" to class Tuple in internal_prelude
	which map to tuple indexing.
	function = on structural types now returns the RHS when analysis is
	enabled.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/20/05 10:45:28 -- deitz

Log message:
	Change seq output, e.g., from "1 2 3" to "(/1, 2, 3/)" for (/1,2,3/).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/test/types/seq/deitz/: test_seq1.good test_seq1a.good 
	                              test_seq1b.good test_seq1c.good 
	                              test_seq2.good test_seq3.good 
	                              test_seq4.good test_seq5.good 
	                              test_seq6.good test_seq7.good 
	                              test_seq8.good test_seq8b.good 
	chapel/test/types/seq/deitz/noanalysis/: test_seq1.good 
	                                         test_seq1a.good 
	                                         test_seq1b.good 
	                                         test_seq1c.good 
	                                         test_seq2.good 
	                                         test_seq3.good 
	                                         test_seq4.good 
	                                         test_seq5.good 
	                                         test_seq6.good 
	                                         test_seq7.good 
	                                         test_seq8.good 
	                                         test_seq8b.good 

---------------------------------------------------------------------------

04/20/05 10:49:56 -- shannon

Log message:
	Added the --help option and updated the
	--help output.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/execflags/shannon/: help.good 

---------------------------------------------------------------------------

04/20/05 10:50:07 -- deitz

Log message:
	Added a --noanalysis-working array of sequences test.

Added files:
	chapel/test/types/seq/deitz/noanalysis/: test_array_of_seq1.chpl 
	                                         test_array_of_seq1.good 

---------------------------------------------------------------------------

04/20/05 10:53:21 -- bradc

Log message:
	Fixed an uninitialized member problem that resulted
	in last night's three linux-valgrind regressions --
	IndexType::domainType was not initialized in one of
	the two constructors.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/20/05 11:21:01 -- shannon

Log message:
	Hopefully fixed the test that was failing on the
	linux64 platform by increasing the memthreshold
	value to filter out the config var table entry
	that was causing the discrepancy in the output.
	
	Added the global match for the substitution
	of the memory address.

Modified files:
	chapel/test/memory/shannon/: PREDIFF configVarFile.chpl 
	                             configVarFile.execopts 
	                             configVarFile.good 
	                             configVarFile.input 

---------------------------------------------------------------------------

04/20/05 11:31:48 -- deitz

Log message:
	Added new Stmt like a WithStmt called a UseStmt that deals with use
	statements of modules.
	
	Reworked WithStmt to be a subclass of ExprStmt and share code.
	UseStmt is also a subclass of ExprStmt.
	
	Added parsing support for UseStmts.  They fail at codegen time.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 

---------------------------------------------------------------------------

04/20/05 12:16:17 -- deitz

Log message:
	Fixed a bug in the new replaceChild facility in which a function
	argument's default initialization expression could not be replaced.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/20/05 12:34:17 -- deitz

Log message:
	Replaced
	
	  #define CONSTRUCTOR_WITH_PARAMETERS
	
	with compiler flag --useNewConstructor to set global variable
	useNewConstructor.
	
	Added a copy of test_class3 that uses the named parameters to the
	constructor and is tested with this flag to make sure that keeps
	working.
	
	Made a superficial change to the parser that will eventually help
	allow declarations of the form
	
	  var (i, j) = tuple;
	
	though the implementation still needs to be done.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/classes/deitz/: test_class3.good 
Added files:
	chapel/test/classes/deitz/: 
	                            test_class3_useNewConstructor_stopgap.chpl 
	                            test_class3_useNewConstructor_stopgap.compopts 
	                            test_class3_useNewConstructor_stopgap.good 

---------------------------------------------------------------------------

04/20/05 12:43:43 -- bradc

Log message:
	Updated REGRESSIONS file a bit to reflect last
	night's changes.  Fixed version test for use
	with -valgrind/chpl-nogc.  The testing system
	now passes the commpiler as a third argument
	to any PREDIFF/PREEXEC scripts, for those rare
	cases that need it.

Modified files:
	chapel/test/: REGRESSIONS start_test sub_test 
	chapel/test/compflags/bradc/noexec/: version.goodstart 
	                                     version.prediff 

---------------------------------------------------------------------------

04/20/05 12:45:48 -- bradc

Log message:
	Fixed a problem with using the CHPLDEVTMP environment
	variable to store the dparser output that crept in
	the other day.

Modified files:
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/20/05 16:10:30 -- jplevyak

Log message:
	Generate the IF1 into the DefExpr instead of the DefStmt
	so that constructors can be looked up on the DefExpr.
	
	One problem with this is that
	
	var x : foo = y;
	
	involves both a constructor and an overloaded = which is
	going to have call_info as well.
	
	We might neecd a new call.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/20/05 16:33:08 -- deitz

Log message:
	Corrected bugs in the coercion and default parameter wrapper code.
	
	Added a new test_coerce test that would have caught the bug and added
	a copy of test_class1 that uses the --useNewConstructor flag to keep
	it from regressing again with this flag on.
	
	Updated regressions.  John can you take a look at a couple of these.
	The default wrapper function looks like it is being called on the set
	accessor.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/: REGRESSIONS 
Added files:
	chapel/test/classes/deitz/: 
	                            test_class1_useNewConstructor_stopgap.chpl 
	                            test_class1_useNewConstructor_stopgap.compopts 
	                            test_class1_useNewConstructor_stopgap.good 
	chapel/test/types/type_variables/deitz/: test_coerce1.chpl 
	                                         test_coerce1.good 

---------------------------------------------------------------------------

04/20/05 16:34:42 -- bradc

Log message:
	Adding a new test and several futures that I ran into
	in getting the test working.  Most of these are high-level
	futures, and ones that I've assigned to myself (with Steve
	sometimes listed as a second in case he gets there before
	I do).  The tests exercise:
	
	- domains defined via an integer parameter expression
	  rather than an integer literal
	
	- functions that return a type variable that is also
	  a parameter don't resolve properly
	
	- variables initialized using variables of the same
	  name from an external scope currently don't resolve
	  properly
	
	- another test of "var A: [i in D] type = i"

Added files:
	chapel/test/distributions/bradc/foundations/: .cvsignore 
	                                              blockdist1.chpl 
	                                              blockdist1.future 
	                                              blockdist1.good 
	                                              blockdist2.chpl 
	                                              blockdist2.future 
	                                              blockdist2.good 
	                                              blockdist3.chpl 
	                                              blockdist3.good 
	chapel/test/domains/bradc/: paramRank.chpl paramRank.future 
	                            paramRank.good 
	chapel/test/functions/bradc/: typefn.chpl typefn.future 
	                              typefn.good typefn2.chpl 
	                              typefn2.future typefn2.good 
	chapel/test/trivial/bradc/: initvarsamename.chpl 
	                            initvarsamename.future 
	                            initvarsamename.good 
	                            initvarsamename2.chpl 
	                            initvarsamename2.future 
	                            initvarsamename2.good 

---------------------------------------------------------------------------

04/20/05 16:55:31 -- bradc

Log message:
	Changed the implementation of parameter intents for
	classes so that the class' variables are passed by
	reference, but the pointer to the variables is
	passed by "in" intent.  Thus, the class variable
	can currently be assigned to, but such assignments
	are not reflected back at the callsite.  Thanks
	Steve for catching this.
	
	Updated expected test output to reflect this change.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/test/functions/bradc/: defaultParamInOut.future 
	                              intents-classes2.good 
	                              intents-classes3.good 
	                              intents-classes4.good 

---------------------------------------------------------------------------

04/20/05 16:59:07 -- deitz

Log message:
	Added flag ->noDefaultInit on VarSymbols to say that these VarSymbols
	should not get default initializations.  Used for "this" in
	constructors and the init variables for type's default values.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/20/05 17:26:15 -- bradc

Log message:
	Realized that I mis-created the expected output for
	these two tests because I forgot that we decided
	that any definition of a variable within a scope
	shadowed all uses of the variable, even those that
	preceded the variable definition statement (which
	would then be marked as being illegal).

Modified files:
	chapel/test/trivial/bradc/: initvarsamename.good 
	                            initvarsamename2.good 

---------------------------------------------------------------------------

04/20/05 17:48:39 -- jplevyak

Log message:
	New big switch statement to factor out the things which still do not
	have defaultVal/defaultConstructor as well as the special cases related
	to "this" and init variables.
	
	The special cases are:
	
	TYPE_DOMAIN
	TYPE_INDEX
	
	"this" is treated specially for TYPE_RECORD and TYPE_UNION
	"init" is treated specially by not using the defaultVal.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/20/05 17:49:04 -- bradc

Log message:
	Made an improvement to Steve's scopeResolveSymbols pass
	so that a symbol's initialization expression is traversed
	prior to the symbol's addition into the list of defined
	symbols so that lines such as:
	
	        var x = x + 1;
	
	will result in "use before def" errors.  This resulted in
	a nicer error message for weirdinit.chpl, so I updated its
	output.

Modified files:
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	chapel/test/classes/bradc/: weirdinit.good 

---------------------------------------------------------------------------

04/21/05 09:01:14 -- roxana

Log message:
	A small modification of this pass led to failure of
	test_index_expr1.chpl. Corrected that.

Modified files:
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 

---------------------------------------------------------------------------

04/21/05 09:08:12 -- bradc

Log message:
	Forgot to remove these two futures last night.

Removed files:
	chapel/test/trivial/bradc/: initvarsamename.future 
	                            initvarsamename2.future 

---------------------------------------------------------------------------

04/21/05 10:18:53 -- bradc

Log message:
	Updated regressions list w.r.t. last night's regressions
	reports.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/21/05 13:45:03 -- deitz

Log message:
	Net Result: All DefExprs now contain a single Symbol.
	
	Previously, multiple VarSymbols were occasionally stored in the ->sym
	field of a single DefExpr.
	
	This checkin required some changes to the indices of ForallExpr and
	ForLoopStmt since they now have to be a list of DefExprs rather than a
	single DefExpr with a list of symbols.
	
	Updated printing outputs of Forall expressions which now show type
	information of the index variables.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp insertAnonymousTypes.cpp 
	                             insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	                             insertVariableInitializations.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 

---------------------------------------------------------------------------

04/21/05 14:55:52 -- jplevyak

Log message:
	emove some dead code.
	Rename is_meta_class -> is_meta_type (since there are meta types for all
	types not just classes)

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp cg.cpp fa.cpp 
	                           if1.cpp sym.cpp 
	chapel/compiler/include/: analysis.h sym.h 

---------------------------------------------------------------------------

04/21/05 15:07:23 -- jplevyak

Log message:
	Added NEW_COERCIONS_WRAPPER #define to symbol.h, and the appropriate
	code to support it in analysis.cpp.
	Uncomment the #define at the top of the file to get the new interface.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

04/21/05 16:22:59 -- deitz

Log message:
	Rewrote TupleType::copyType to be more faithful to the copy
	infrastructure so that analysis's callbacks are used.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/21/05 16:48:14 -- jplevyak

Log message:
	Accelerate moving from one MPosition to another by caching
	the cannonical representation of an MPositino and providing
	up, down, and next pointers for moving through numeric positions
	(and up from a by-name position to its parent).

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/compiler/include/: pattern.h 

---------------------------------------------------------------------------

04/22/05 11:32:49 -- shannon

Log message:
	Changed the format of the print of the memory address
	in the printMemTable output to hopefully fix a few
	test regressions when run with valgrind or on a Sun.
	
	Changed the substitution for the memory address output
	to be 8-characters wide.  Updated test output to
	reflect these changes.

Modified files:
	chapel/runtime/src/: chplmem.c 
	chapel/test/memory/shannon/: PREDIFF configVarFile.good 
	                             freedMalloc.good jacobi.good 
	                             printMemTable.good 
	                             reallocZeroSize.good 

---------------------------------------------------------------------------

04/22/05 11:37:10 -- roxana

Log message:
	Added support for index(1) to be correctly handled. Since tuple(1)
	 does not work, special cased index type to become an integer instead
	of a tuple(1). Also special cased the code generation for index
	type and assignment operator to take this case into consideration.
	This special casing is a bit ugly and it clutters the code. Hopefully
	this can be polished later on.
	
	Removed the future associated with this problem.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: type.h 
Removed files:
	chapel/test/domains/bradc/: writeIndex.future 

---------------------------------------------------------------------------

04/22/05 12:24:10 -- jplevyak

Log message:
	Remove some unncessary casts.

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

04/22/05 13:10:49 -- bradc

Log message:
	Put in an internal error if a generic sequence type is
	codegen'd to make such problems clearer than they
	currently are.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/22/05 14:20:09 -- jplevyak

Log message:
	Optimize sets_by_f to sets_by_f_transitive for those cases where
	the equivilance relation is transitive.

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

04/22/05 15:17:39 -- roxana

Log message:
	Brad suggested I add the -f flag to the first line of prediff files.
	I had some tests failing because my .cshrc has some conflicting
	settings.

Modified files:
	chapel/test/memory/shannon/: PREDIFF 

---------------------------------------------------------------------------

04/22/05 15:41:21 -- roxana

Log message:
	There was another file.
	
	Brad suggested I add the -f flag to the first line of prediff files.
	I had some tests failing because my .cshrc has some conflicting
	settings.

Modified files:
	chapel/test/compflags/bradc/noexec/: version.prediff 

---------------------------------------------------------------------------

04/22/05 16:20:18 -- bradc

Log message:
	Checking in a utility script that returns the name that
	we'll call a given platform.  I'm working on having other
	things that determine the platform all refer to this
	script so that we name platforms consistently across the
	compiler.

Added files:
	chapel/util/: platform 

---------------------------------------------------------------------------

04/22/05 16:55:40 -- jplevyak

Log message:
	Compute element_types more robustly through cloning and add
	element_type_info() function to retrieve those types.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: analysis.h fa.h 

---------------------------------------------------------------------------

04/22/05 17:25:23 -- bradc

Log message:
	Broke the nogc build of the third-party directory into
	its own build target.  To build a GC-less version of
	dparser, you now need to type "make third-party-nogc"
	from the top-level directory, or "make nogc" from the
	third-party directory.

Modified files:
	./: Makefile 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/22/05 17:32:20 -- bradc

Log message:
	New platform-specific Makefile settings, using the
	new platform naming scheme.  Will remove old ones in
	a subsequent update.

Modified files:
	chapel/make/: Makefile.linux 
Added files:
	chapel/make/: Makefile.linux64 Makefile.sunos 

---------------------------------------------------------------------------

04/22/05 18:02:38 -- bradc

Log message:
	Lots of Makefile-related changes.  Please let me know if these break
	anything on your platform.  The main goal in this work is to allow a
	single filesystem to support multiple builds simultaneously without
	rebuilding a lot of things unnecessarily.  We had the groundwork for
	this before, but this makes a lot of it a bit firmer.
	
	Users who want to put "chpl" in their search path for multiple
	platforms should replace lines of this form:
	
	set path = ($path $CHPL_SYSTEM_DIR/)
	
	with lines of this form:
	
	setenv CHPL_PLATFORM `$CHPLHOME/util/platform`
	set path = ($path $CHPL_SYSTEM_DIR/$CHPL_PLATFORM)
	
	You will also find that start_test runs chpl from a platform-specific
	subdirectory as well now.
	
	The other main way in which this check-in will affect people is that
	those who are building on Suns will find that their platform-specific
	subdirectories are renamed from "sun" to "sunos" and those building on
	Linux64s will find their platform-specific subdirectories renamed from
	"linux" to "linux64".
	
	The other main improvement of this check-in is that dependences are
	now calculated for the nogc build when a "make depend" is done in the
	compiler directory.
	
	Here are the changes in more detail:
	
	* switched platform names used by Makefiles to a more consistent
	  scheme using the util/platform script
	    linux -> split into linux and linux64 so that both builds could
	      be done from one filesystem
	    sun -> changed to sunos
	    freebsd - stays the same
	    cygwin: stays the same
	
	* made start_test use the platform-specific subdirectory version of
	  the compiler by default (e.g., compiler/linux/chpl) so that multiple
	  platforms could be tested simultaneously
	
	* .cvsignores : added linux64, sunos; removed sun
	
	* made compiler more robust when run from a platform-specific
	  subdirectory of compiler (e.g., compiler/linux/chpl)
	
	* added the creation of dependences for nogc build of compiler when
	  make depend is done -- previously, no dependences were made for the
	  nogc build.
	
	* made the compiler/test/ directory more resilient to being built with
	  the nogc option.  However, the unit tests fail when built without gc
	  for some reason, so had to ignore the return code, which is
	  unfortunate.
	
	* made the compiler-generated Makefile point to CHAPEL_ROOT rather
	  than CHPLRTDIR, which allows us to get to other places easier
	
	* made the boehmgc directory not rebuild itself if the last build
	  was done for the given platform.  This means if you build the
	  third-party directory twice in a row on linux, the second build
	  should not result in anything happening.  However, if you build
	  for linux and then for sun, building for linux again will cause
	  it to get rebuilt.  In principle, the third-party directory
	  should only need to be built once per platform ever (unless its
	  sources change, which is rare)
	
	* made the dparser directory take platform into account in a
	  similar way.

Modified files:
	chapel/compiler/: .cvsignore 
	chapel/compiler/AST/: .cvsignore 
	chapel/compiler/adt/: .cvsignore 
	chapel/compiler/analysis/: .cvsignore 
	chapel/compiler/analysis/make_prims/: .cvsignore 
	chapel/compiler/backend/: .cvsignore 
	chapel/compiler/include/: files.h 
	chapel/compiler/main/: .cvsignore 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: .cvsignore 
	chapel/compiler/passes/: .cvsignore filesToAST.cpp 
	chapel/compiler/symtab/: .cvsignore 
	chapel/compiler/test/: .cvsignore Makefile 
	chapel/compiler/traversals/: .cvsignore 
	chapel/compiler/util/: .cvsignore files.cpp 
	chapel/compiler/vparser/: .cvsignore 
	chapel/compiler/vparser/cast/: .cvsignore 
	chapel/make/: Makefile.platform 
	chapel/runtime/etc/: Makefile.include 
	chapel/test/: start_test 
	chapel/third-party/boehmgc/: .cvsignore Makefile 
	chapel/third-party/dparser/: .cvsignore Makefile 
	chapel/util/: platform 
Removed files:
	chapel/make/: Makefile.sun 

---------------------------------------------------------------------------

04/22/05 18:20:32 -- bradc

Log message:
	One change that didn't quite make it into the last
	checkin -- updated vparser front-end to be able to
	run from a compiler/<platform> subdirectory as well.

Modified files:
	chapel/compiler/vparser/: parse.cpp 

---------------------------------------------------------------------------

04/25/05 09:30:51 -- shannon

Log message:
	Changed the execution of the mallocOutOfMemory
	test to limit the virtual memory use in order
	to avoid crashing or bogging down the hardware.
	'limit vmemoryuse' was set in a local copy of
	sub_test, per Brad's instructions.

Added files:
	chapel/test/memory/shannon/outofmemory/: mallocOutOfMemory.chpl 
	                                         mallocOutOfMemory.good 
	                                         sub_test 
Removed files:
	chapel/test/memory/shannon/: mallocOutOfMemory.chpl 
	                             mallocOutOfMemory.good 

---------------------------------------------------------------------------

04/25/05 10:20:07 -- bradc

Log message:
	Reworked platform script to improve the decision
	between linux and linux64 (I had not realized
	previously that one could do 32-bit builds on a
	64-bit linux machine).  linux64 is now selected
	iff BUILD_X86_64 is set to 1.  Otherwise, linux
	is used.  This should be consistent with the
	conventions used on John's machine (note that
	the chapel account is currently set up to set
	this variable to 1 by default, which is good
	as it means those of us logging in to debug
	linux64 issues will be able to do so trivially).

Modified files:
	chapel/util/: platform 

---------------------------------------------------------------------------

04/25/05 10:57:05 -- bradc

Log message:
	Made the third-party Makefiles even smarter with
	respect to avoiding duplicate rebuilds.  Got rid
	of the ignored "missing .lastbuild" error.  Also,
	made it so that if a build is interrupted, it
	will not be considered the lastbuild -- only
	successful builds will update the .lastbuild file.
	
	Added new targets:
	
	      all-force
	      nogc-force (for dparser only)
	
	so that if one wants to force a build even though
	the Makefile claims it is not necessary, it will
	be done.

Modified files:
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/25/05 11:03:37 -- bradc

Log message:
	Caught a couple of instances of "make" rather
	than "$(MAKE)" in our Makefiles.

Modified files:
	chapel/third-party/boehmgc/: Makefile 

---------------------------------------------------------------------------

04/25/05 11:18:02 -- bradc

Log message:
	Shannon had to take off abruptly for family
	stuff, so I checked in a better printMemTable.good
	file, which 5/6 platforms seem to prefer.  It's
	still a mystery why the valgrind run results in
	the other...  Is it calling the malloc routines
	in a different order?

Modified files:
	chapel/test/memory/shannon/: printMemTable.good 

---------------------------------------------------------------------------

04/25/05 11:55:23 -- jplevyak

Log message:
	Only include instance variables from parents for RECORD/class types.

Modified files:
	chapel/compiler/analysis/: ast.cpp 

---------------------------------------------------------------------------

04/25/05 11:56:21 -- jplevyak

Log message:
	Expose "make_prim" function for use in analysis.cpp

Modified files:
	chapel/compiler/include/: fa.h 
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

04/25/05 13:36:51 -- jplevyak

Log message:
	Correctly handle coercion during array update.
	Fixup types of member variables during cloning even if the type isn't cloned.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 

---------------------------------------------------------------------------

04/25/05 13:40:43 -- bradc

Log message:
	Rassin-frassin Makefiles.  It seems I wrote a Makefile
	that would only work after the configure script had been
	run.  This should help, I believe.

Modified files:
	chapel/third-party/boehmgc/: Makefile 

---------------------------------------------------------------------------

04/25/05 14:50:49 -- roxana

Log message:
	Added support for indices to be created for anonymous
	domains as well. To that effect, modified Domain type to keep
	track of its initialization expression, so that indices can be created
	based on this expression.

Modified files:
	chapel/compiler/traversals/: insertIndexType.cpp 

---------------------------------------------------------------------------

04/25/05 14:53:56 -- jplevyak

Log message:
	Added a new pass ResolveTupleTypes to fixup the components bit of
	tuples after analysis (by using the type_info() of the fields.
	I believe that in lookupOrDefineTupleTypeSymbol we should be
	setting the scope before we do the lookup since we want the
	one in commonModule.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: resolveTypes.cpp resolveTypes.h 

---------------------------------------------------------------------------

04/25/05 18:57:44 -- jplevyak

Log message:
	Update the test results to reflect the new operator= for Index types.

Modified files:
	chapel/test/flowanalysis/newast/: declprintdom.good 
	                                  declprintdom2.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/25/05 20:55:34 -- bradc

Log message:
	Fixed a bug Roxana found with my third-party
	make clobber rule in that it wouldn't blow
	away the .lastbuild files that were created
	and would therefore squelch future builds.
	Clobber now blows them away.
	
	Clean does not because it does not blow away
	the targets that were created (and tucked into
	a platform-specific directory), so rebuilding
	is not typically needed.  Cleaning in these
	directories is designed more to clean out
	the source directories themselves, as provided
	by the third-parties.

Modified files:
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/26/05 09:54:56 -- roxana

Log message:
	Started integrating my index type insertion with Steve's dtInteger
	assumption. The idea is to make the transition smoother and wait for changes to forall
	loops to handle at least tuples of integers, rather that integer symbols.
	
	My version will work when the _dtInteger_IndexType_switch is
	turned on. It will break most of the tests that are working under
	Steve's assumption, but it will pass some tests that are not. For any
	purpose other than local playing around with it, this flag should
	be off.
	
	For now there is not much to play with -- checking in just to
	avoid Steve's changes (typically to the same lines of code
	I work on) mangling my code.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/include/: symtab.h 

---------------------------------------------------------------------------

04/26/05 11:16:07 -- shannon

Log message:
	Hopefully fixed a bug which was causing the printMemTable
	test to fail.  On a realloc I was deleting the original
	memory address from the table, then installing the
	new address.  This caused a change in ordering of the
	entries in the table.

Modified files:
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/26/05 12:20:10 -- bradc

Log message:
	Breaking for lunch.

Modified files:
	bradcdoc/distNotes/: distNotes.tex 
Added files:
	bradcdoc/distNotes/: .cvsignore 

---------------------------------------------------------------------------

04/26/05 13:13:52 -- deitz

Log message:
	Added a new field
	
	  AssignOp* DefExpr::init
	
	that will eventually replace Expr* VarSymbol::init in assignment form
	where the rhs is VarSymbol::init and the lhs is Variable of the
	VarSymbol being defined in the DefExpr.
	
	I'm having trouble getting analysis to traverse this expression so,
	John, could you take a look at it.  I added a runtime flag
	--useNewInit for switching over to this.  This flag fills in this
	expression, but VarSymbol::init remains as well.
	
	The major challenge to making this work was in Fixup to get it to
	maintain the parentExpr and parentStmt of DefExpr::init, even though
	it will be lost for the definitions of the symbols.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: driver.h expr.h symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp fixup.cpp 
	                             fixup.h insertAnonymousDomains.cpp 
	                             resolveOverloadedOperators.cpp 

---------------------------------------------------------------------------

04/26/05 17:10:19 -- jplevyak

Log message:
	Move ->init from VarSymbol to DefExpr.
	Also changed DefExpr::init from an AssignOp to an Expr.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             checkSemantics.cpp 
	                             createConfigVarTable.cpp fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/27/05 10:08:44 -- bradc

Log message:
	Changed the way nightly does its cvs checkout to avoid
	sending me cvs tracking mail.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/27/05 10:20:09 -- deitz

Log message:
	Decoupled user-written methods from the class.  Their scope is now
	reset when "this" is inserted into their formal parameter list.  For
	user methods, this should allow the method to stay alive even if the
	class dies.
	
	Added a new boolean to symbols called keepLive which we use not to
	remove functions even if analysis thinks they are dead.  I'm not sure
	this is necessary yet, but I think it is a worthwhile addition.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: removeDeadSymbols.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: expandSeqExprAssignments.cpp 
	                             insertThisParameters.cpp 
	                             omitForNoAnalysis.cpp 
	                             removeSeqOperations.cpp 
	                             updateSymbols.cpp 

---------------------------------------------------------------------------

04/27/05 11:23:30 -- jplevyak

Log message:
	Added new UserInitExpr ast Type.
	This is the type of DefExpr::init, and it is used to resolve
	any overloaded = as a result of user initialization.  For example:
	
	  var x : C = b;
	
	Here the default constructor for C is classed and then an overloaded
	operator = is called with arguments x and b.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             createConfigVarTable.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertVariableInitializations.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

04/27/05 15:09:13 -- deitz

Log message:
	Improved support for the noDefaultInit bool on VarSymbols.  If it is
	set, we don't output defaultVal or defaultConstructor initialization.
	We may want a bool for each.  Also, have we decided we'll output both
	initializers if both exist or just one?  Also with this checkin, this
	bool is copied when the VarSymbol is.
	
	Added commented-out code in Fixup to verify that
	TypeSymbol::type::symbol == TypeSymbol.  I'll check this in.  We can
	turn it on when we start instantiating type variables correctly.  I
	think John is working on this.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: fixup.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/27/05 17:09:41 -- deitz

Log message:
	Fixed a bug in RemoveDeadSymbols in which if multiple function's
	DefExprs shared the same DefStmt, they would all be extracted if one
	was dead.  Now just the DefExpr is extracted if there are multiple
	DefExprs.  If there is a single DefExpr, the DefStmt is extracted.
	
	If --useNewConstructor is on, I now run call_info on the DefExpr to
	find out about the defaultConstructor.  This causes one test to fail
	so I only do it if the flag is on.
	
	This checkin gets the named parameter constructor working with most
	record tests.  There are still a few failures with this flag so it is
	not the default.

Modified files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

04/28/05 10:33:35 -- jplevyak

Log message:
	Generic substitutions are now done by introducing a UserType
	  which indirects to the substituted type.  This restores
	  the Type->symbol->type and TypeSymbol->type->symbol identities.
	
	For instantiated types parameters, move them into the body of the function
	  after analysis.
	
	collectASTs now collects Type s as well.
	
	Made type_is_used() to more conservative.  The big exception
	  is IndexTypes which are special cased (everywhere).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/traversals/: collectASTS.cpp 
	                             findUnknownTypes.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/28/05 10:44:06 -- jplevyak

Log message:
	Add a .future... this test was working "by accident", and I have
	  work around the issue

Added files:
	chapel/test/classes/deitz/: test_class_list1.future 

---------------------------------------------------------------------------

04/28/05 11:04:27 -- deitz

Log message:
	Enabled verification that for TypeSymbol sym the following is true:
	
	  sym->type->symbol == sym

Modified files:
	chapel/compiler/traversals/: fixup.cpp 

---------------------------------------------------------------------------

04/28/05 11:15:58 -- jplevyak

Log message:
	Use new lookupOrDefineTupleTypeSymbol interface to create tuple types.
	
	Remove stopgap accessors and setters in internal_prelude which
	  mapped _field1 to the "index_object" primitive.
	
	Added new stopgap _seq to chplstd.h and special case "write" function
	  for _seq, comment out error for codegen of dtSequence
	
	Factor map_symbols to permit a single symbol to be mapped (the new tuple symbol).
	Factor build_type to permit a single type to be built.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/runtime/include/: stdchpl.h 

---------------------------------------------------------------------------

04/28/05 11:33:36 -- bradc

Log message:
	Updated regressions list w.r.t. non-linux platforms.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/28/05 12:55:15 -- deitz

Log message:
	Completed decoupling methods from classes.  Methods, including
	getters, setters, and constructors, can now stay alive even if the
	class dies.  This applies to records, unions, etc.
	
	Scopes of functions are now really only used for code generation and
	for computing the visible functions list.
	
	Secondary methods are now in the scopes where they are defined.
	
	Cleaned up code for building constructor bodies.
	
	Code generation of a structural type no longer results in code
	generation of its methods or constructors.
	
	Write functions are only inserted if the type is used.  If the type is
	dead, a write function is not created.
	
	Fixes to gross sequence code.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: insertWriteFns.cpp symscope.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp insertThisParameters.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

04/28/05 14:19:50 -- deitz

Log message:
	Fixed a small bug in the default != function created for records.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/28/05 15:33:02 -- deitz

Log message:
	Implemented new coercion wrapper function.  This is untested and
	currently off with the same #define in symbol.h that it was off with
	before I implemented it.  There is a compilation problem in analysis.
	John, I assume it won't work very well after you get it up and running
	on your side, so let me know when you do this.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/28/05 15:35:57 -- jplevyak

Log message:
	Fixup NEW_COERCION_WRAPPER code. (compiles now)

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/28/05 16:08:48 -- deitz

Log message:
	Got classes/bradc/records/assignRecord2.chpl working with --noanalysis
	(it uses sequences).
	
	The common modules init function was not called if the user specified
	a main program.  It now is.

Modified files:
	chapel/compiler/passes/: createEntryPoint.cpp 

---------------------------------------------------------------------------

04/28/05 16:14:25 -- jplevyak

Log message:
	Fix bug in NEW_COERCION_WRAPPER... looks like the call is right, but
	the tests are still failing ?!?!

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/28/05 16:19:45 -- roxana

Log message:
	Added support for code generation of array references if
	indexed by indices of Index Type. Specialized for tuple
	and integer.
	
	Added support for code generation of for loop  statements to
	allow indices of IndexType to be used.
	Bypass initialization of index variables of IndexType. The
	problem seems to be that tuples have no type symbol in
	indices which happen to have tuple type. I'll wait on that
	until after tuples are more stable.
	
	Added support for index variables of Index Type in array
	initialization.
	
	Added two new tests to test the functionality of index type
	insertion. These are made futures since they fail with the
	'dtInteger' version. To get these working one must change the
	flag in symtab.h (_dtinteger_indexType_switch), as well as
	uncomment preProcessStmt in insertIndexType.h and
	insertIndexType.cpp.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	                         insertDefaultInitVariables.cpp 
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	                             insertIndexType.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertIndexType.h 
Added files:
	chapel/test/domains/roxana/: test_index_expr2.future 
	                             test_index_expr0.chpl 
	                             test_index_expr0.good 
	                             test_index_expr2.chpl 
	                             test_index_expr0.future 
	                             test_index_expr2.good 

---------------------------------------------------------------------------

04/28/05 16:35:58 -- deitz

Log message:
	Fixed small bug in coercion_wrapper, but the tests still fail with
	NEW_COERCION_WRAPPER.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/28/05 16:46:54 -- deitz

Log message:
	Cleaned and improved RemoveDeadSymbols.  It now only removes the
	symbol that is dead.  Previously it removed the whole DefStmt even if
	it contained other DefExprs than the one for the dead symbol.  Except
	for functions which I fixed earlier.

Modified files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp 

---------------------------------------------------------------------------

04/28/05 17:17:40 -- jplevyak

Log message:
	Indexes seem to have been changed back into integers, which
	means that they nolonger use the overloaded = operators and
	the analysis results are therefor different.

Modified files:
	chapel/test/flowanalysis/newast/: declprintdom.good 
	                                  declprintdom2.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/28/05 18:54:13 -- jplevyak

Log message:
	Changes in support of USE_NEW_CONSTRUCTOR
	
	1. Made a defaultVal for dtNil, the "nil" global variable of type dtNull.
	
	2. Implemented a NullType::codegen which is "void *"
	
	3. defaultConstrutors are now accessed as the name of th
	   function rather than the FnSymbol so that they can
	   be overridden.
	
	4. useNewConstructor option now has an environment variable
	   associated with it CHPL_USE_NEW_CONSTRUCTOR
	
	5. added inttypes.h to stdchpl.h so that intptr_t will be available
	   to the generated code.
	
	The remaining problem is with visible_functions()

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/runtime/include/: stdchpl.h 

---------------------------------------------------------------------------

04/29/05 08:39:53 -- jplevyak

Log message:
	Tighten up one of yesterdays checkins.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/29/05 09:22:55 -- deitz

Log message:
	Detabified some compiler source.

Modified files:
	chapel/compiler/traversals/: fixup.cpp resolveSymbols.cpp 

---------------------------------------------------------------------------

04/29/05 09:51:33 -- deitz

Log message:
	Fixed the creation of new scopes so that if the visibleFunctions have
	already been computed, they are computed for the new scopes as they
	are popped.
	
	New functions created after the visibleFunctions have been computed
	are not added to the list, however.
	
	This improves support for --useNewConstructor.

Modified files:
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 

---------------------------------------------------------------------------

04/29/05 09:57:00 -- shannon

Log message:
	Added the --memstat runtime option.  If called on
	a chapel executable the final memory statistics are
	printed, e.g.:
	
	  > a.out --memstat
	  Final Memory Statistics:  totalMem=310, maxMem=345
	
	totalMem is the amount of memory allocated at the
	time the call is made, and maxMem is the maximum
	amount of memory ever allocated during the run.
	
	A chapel developer can make user of the printMemStat()
	and resetMemStat() functions.  resetMemStat() zeroes
	the totalMem and maxMem variables.
	
	Added some tests.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: chplmem.h chplmem_tests.h 
	chapel/runtime/src/: arg.c chplmem.c chplmem_tests.c main.c 
Added files:
	chapel/test/memory/shannon/: memstatFlag.chpl memstatFlag.good 
	                             memstatPrint.chpl 
	                             memstatPrint.execopts 
	                             memstatPrint.good 
	                             printFinalMemStat.chpl 
	                             printFinalMemStat.execopts 
	                             printFinalMemStat.good 

---------------------------------------------------------------------------

04/29/05 10:00:43 -- bradc

Log message:
	Added a hack to getIntArg for freebsd which seems to have
	problems scanf-ing variables of type "long long".

Modified files:
	chapel/runtime/src/: arg.c 

---------------------------------------------------------------------------

04/29/05 10:30:18 -- deitz

Log message:
	Time to eat --useNewConstructor.
	
	Made --useNewConstructor the default and replaced it with
	--useOldConstructor in case we need to look at the old behavior while
	getting the remaining test cases working.
	
	Updated the REGRESSIONS file.
	
	Removed two useNewConstructor tests which duplicated what is now
	tested by default.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/test/: REGRESSIONS 
Removed files:
	chapel/test/classes/deitz/: 
	                            test_class1_useNewConstructor_stopgap.chpl 
	                            test_class1_useNewConstructor_stopgap.good 
	                            test_class3_useNewConstructor_stopgap.chpl 
	                            test_class3_useNewConstructor_stopgap.good 

---------------------------------------------------------------------------

04/29/05 11:01:03 -- deitz

Log message:
	Removed some double traversals of FnSymbols, ParamSymbols, and
	EnumSymbols when being traversed as a definition.
	
	I was seeing this in the print_view mechanism which when used to print
	out a function duplicated these symbols.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/29/05 11:26:21 -- deitz

Log message:
	Improved print_view to print out extra information for some tail
	expressions like StringLiteral and SizeofExpr along with IntLiteral
	(already done).  When symbols are printed, FnSymbol, ParamSymbol, and
	TypeSymbol are marked as such.
	
	Added new function nprint_view that prints out the id numbers next to
	symbols and is useful if symbols share names.

Modified files:
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

04/29/05 14:07:23 -- deitz

Log message:
	Checking in some of John's patch, modified.  John, I got rid of the
	goto, which was dead code.  I also commented out some code in
	
	 static Stmt* basic_default_init_stmt(Stmt*, VarSymbol*, Type*)
	
	that uses call_info way after analysis. I'd rather only use this in
	the pass resolveSymbols and I'd like to figure out how we can make it
	work there.
	
	Thus this checkin does not fix any regressions, nor does it break
	anything.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/29/05 14:30:55 -- deitz

Log message:
	Removed code I commented out in John's patch.
	
	Turned on the ->noDefaultInit bool for all variables that have no
	declared types (type == dtUnknown before analysis) so that they do not
	get a default initialization.
	
	This fixes classes/jplevyak/record_type_hierarchy-1.chpl and
	classes/jplevyak/union_type_hierarchy-1.

Modified files:
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/29/05 14:38:44 -- deitz

Log message:
	New test for function cloning with future.

Added files:
	chapel/test/types/type_variables/deitz/: test_swap.chpl 
	                                         test_swap.future 
	                                         test_swap.good 

---------------------------------------------------------------------------

04/29/05 14:42:37 -- deitz

Log message:
	Updated regressions log with my new understandings, or lack thereof.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/29/05 15:01:08 -- deitz

Log message:
	Updated regressions file with more understanding on
	
	  classes/deitz/test_type_in_class1

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/29/05 15:03:21 -- jplevyak

Log message:
	Fixed a bug in FnSymbol::coercion_wrapper where the formal
	was being used intead of the wrapperFormal in a couple places
	(in particular, in the call to the wrapped function).
	
	I am kind of surprised that non of the Verify code found this
	as the Symbol was appearing in a function in which it wasn't even
	scoped.
	
	Removed the NEW_CONSTRUCTOR #define.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

04/29/05 15:34:19 -- deitz

Log message:
	Partially fixed regression test_type_in_class1.  It now no longer
	fails because it is trying to resolve a ParenOpExpr in a type
	declaration list but because it is trying to resolve a ParenOpExpr in
	a default value to an argument, a ParamSymbol::init.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/29/05 16:44:42 -- jplevyak

Log message:
	Added a not about ParamSymbol::init which is copied, so that the
	original is never executed and so analysis knows nothing about it.
	It should not be resolved/traversed.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/02/05 10:06:13 -- deitz

Log message:
	Put in removeDeadSymbols a line to remove ParamSymbol::init.  This was
	the default value, but now that the default wrappers have been made,
	this is no longer executed code.
	
	Added a new pass InsertOutParameterInitializations that puts the
	initialization line for out parameters in the top of a function.
	
	Fixed up default_wrapper function to remove formals not only from
	formal list but also from paramScope of function.  These formals that
	I put in and then take out were still being traversed in symtab
	traversals because they weren't being fully removed.
	
	Added to fixup verification that every expression has a parentSymbol.
	
	This fixes regression test_type_in_class1.  Updated the regressions
	file.
	
	Put a hack in ProcessParameters (with Brad) to not put in a temporary
	for a default_param_temp.  This is somewhat off putting because of its
	delicacy.  A general mechanism that flags temps that don't require
	extra processing ProcessParameters may be better and more general.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share removeDeadSymbols.cpp 
	chapel/compiler/traversals/: fixup.cpp processParameters.cpp 
	chapel/test/: REGRESSIONS 
Added files:
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	                         insertOutParameterInitializations.h 

---------------------------------------------------------------------------

05/02/05 10:17:03 -- deitz

Log message:
	Out parameter is no longer initialized in default_wrapper function
	because it is initialized in the function.
	
	Removed hack from ProcessParameters in which no temp was put in for
	default_wrapper temps.  There is no reason to keep doing this and it
	cleans up the code to remove it until a more general optimization is
	put in to eliminate duplicate temps.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: processParameters.cpp 

---------------------------------------------------------------------------

05/02/05 10:43:24 -- deitz

Log message:
	Fixed a bug that led to valgrind errors on the noanalysis sequence
	test in which primitive scalar fields like integers were not
	initialized in class constructors.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

05/02/05 11:24:17 -- deitz

Log message:
	Added type variables in classes to the default constructor that is
	built.  The types can now be passed to the constructor.  In the
	constructor, nothing is done with the types.  The class should be
	instantiated/cloned.
	
	Passed the test
	  test/types/type_variables/deitz/test_typevar_class1.future
	over to John to take a look at.  We'll have to pass this one back and
	forth and come up with an interface for class instantiation I think.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class1.future 

---------------------------------------------------------------------------

05/02/05 11:52:48 -- deitz

Log message:
	Removed unused compiler flag --useNewInit.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

05/02/05 13:03:40 -- deitz

Log message:
	Fixed up resolution of types and made better error messages on
	--checkAnalysisTypeinfo.  Made Analysis's return of NilType for
	classes that are never constructed the type of these classes.  Added
	NilType::codegenIOCall so that we can print out classes that are
	always nil.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/02/05 15:18:16 -- jplevyak

Log message:
	Fixed several issues related to instantiation of generics
	and wrappers of wrappers.
	
	test/types/type_variables/deitz/test_typevar_class1.chpl
	
	is now failing after the UserInitExpr created on symbol.cpp:803
	is replaced with a call to the constructor (?) which is coming back
	NULL.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 

---------------------------------------------------------------------------

05/02/05 16:20:08 -- jplevyak

Log message:
	Clarify why /test/types/type_variables/deitz/test_typevar_class1.chpl
	is failing:
	
	/test/types/type_variables/deitz/test_typevar_class1.chpl
	
	  Fails because FnSymbol::default_wrapper is copying
	  formal_change->init which includes a VarInit which
	  references the original (pre-copy) formal.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/02/05 16:26:12 -- jplevyak

Log message:
	Insert an assert to catch a bad VarInit variable type.

Modified files:
	chapel/compiler/traversals/: removeNamedParameters.cpp 

---------------------------------------------------------------------------

05/03/05 11:07:02 -- jplevyak

Log message:
	The IF1 log now includes all wrappers and generic instantiations.

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp 
	chapel/compiler/include/: if1.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

05/03/05 11:38:17 -- jplevyak

Log message:
	Kludge to fix classes/deitz/test_type_in_class2
	
	The problem is a bit of a disconnect about UserTypes
	and type variables.  Here is the test:
	
	*******************************************************
	class node {
	  type element_type : integer;
	  var element : element_type;
	}
	
	var n : node = node();
	
	n.element = 12;
	
	writeln(n.element);
	*******************************************************
	
	Is 'element_type'is a type variable is being constrained to be some
	subtype of integer, and it "node" a generic type ?
	
	I would say "yes". And:
	
	*******************************************************
	class C { ... }
	class B : C { ... }
	
	class node {
	  type element_type : C;
	  var element : element_type;
	}
	
	var n : node = node(element_type = B);
	
	n.element = B();
	
	writeln(n.element);
	*******************************************************
	
	is reasonable code which instantiates 'node' with B,
	some subtype of C.
	
	Now it so happens that 'integer' can't have subtypes
	(at least that is my current understanding),
	so it is possible to recognize this case and remove
	or at least default the type variable parameter variable
	'element_type'.
	
	However the compiler treats 'element_type' in both cases
	as UserType which it probably shouldn't.
	
	At least that is my take on it.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/04/05 10:12:18 -- bradc

Log message:
	Updated platform-specific regressions and restored a linux64
	regression that had been incorrectly removed in a previous
	check-in.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/04/05 10:16:54 -- bradc

Log message:
	Some minor script changes that have been languishing in my
	directory.

Modified files:
	chapel/util/: lookForTabs.cron 
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

05/04/05 10:23:40 -- deitz

Log message:
	Added a new traversal (not a pass) call ClearTypes that sets all the
	types of defined symbols to dtUnknown.
	
	Made function cloning call the ClearTypes traversal since we will
	require analysis to get the types for functions it clones.
	
	Added VarInitExpr to the UpdateSymbols traversal so that copying it
	will update its symbol if that changed.  This doesn't yet seem to help
	test_typevar_class1.chpl, but I'll look at it further.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: Makefile.share updateSymbols.cpp 
	                             updateSymbols.h 
Added files:
	chapel/compiler/traversals/: clearTypes.cpp clearTypes.h 

---------------------------------------------------------------------------

05/04/05 12:07:47 -- bradc

Log message:
	Switched FnSymbol body fields from Stmt to BlockStmt.
	Even though a function body can be a single statement,
	it is nice to always have a BlockStmt stored so that
	new statements can be inserted before/after, symbols
	can be added, etc. without doing the conversion after
	the fact.
	
	This code also checks in a new traversal,
	eliminateReturns that is designed to convert return
	statements into jumps just before code generation,
	which I'll document better once it's working.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertWriteFns.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassConstructorsEtc.cpp 
	chapel/test/functions/bradc/: returnFnCallIntents.good 
Added files:
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             eliminateReturns.h 

---------------------------------------------------------------------------

05/04/05 12:40:01 -- deitz

Log message:
	Fixed Symboltable::dump() and the PrintSymtab traversal so that the
	indentation does not require the "level" field of SymScope to be
	correct.  It always just counts its distance to the top.
	
	Fixed a major bug in the insertion of the CommonModule in which
	numerous scopes were unlinked from the Symboltable.
	
	Improved RemoveDeadSymbols to remove the scopes of classes that are
	dead from the Symboltable.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/symtab/: printSymtab.cpp removeDeadSymbols.cpp 
	                         removeDeadSymbols.h symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: removeNamedParameters.cpp 

---------------------------------------------------------------------------

05/04/05 17:08:11 -- bradc

Log message:
	* improved my last checkin in which all functions have a BlockStmt for
	  their body by setting up the BlockStmts to point to their scope (as
	  they should have in the last check-in).  In order to support this,
	  the creation of function calls through the Symboltable is now done
	  using three calls rather than two:
	
	        Symboltable::startFnDef()
	        Symboltable::continueFnDef()
	        Symboltable::finishFnDef()
	
	  These are useful because startFnDef pushes the parameter scope
	  (after which the parameters should be created and inserted into the
	  right scope), continueFnDef pushes the top-level block statement's
	  scope (which any variables defined within the body of the function
	  will be stored in), and finishFnDef pops the scopes and stores them
	  into the right places.  Added calls to continueFnDef() in all places
	  that currently use this interface.
	
	* turned on my eliminateReturns pass which should actually now be
	  called insertReturnTemps or something like that -- this pass inserts
	  a temporary variable to capture the expression being returned so
	  that in the event of complex return expressions, statements may be
	  inserted by other compiler passes (such as ProcessParameters) before
	  and after the evaluation of the return expression, yet still come
	  before the return statement itself.  This fixes two future tests.  I
	  won't rename this pass for now because eventually we will need to
	  eliminate, or otherwise fix up more complex returns such as returns
	  of arrays, and this pass would be a reasonable place to do so.
	  Note that this no longer inserts gotos as it did when I checked it
	  in last go-round.
	
	* made BlockStmt take an optional SymScope as its second constructor
	  parameter since many BlockStmts are created with known scope --
	  looked for obvious cases where this could be used rather than a
	  separate setBlockScope call.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h symbol.h symtab.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertWriteFns.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             eliminateReturns.cpp 
	                             transformLetExprs.cpp 
	chapel/test/functions/bradc/: defaultParamInOut.good 
Removed files:
	chapel/test/functions/bradc/: defaultParamInOut.future 
	                              returnFnCallIntents.future 

---------------------------------------------------------------------------

05/04/05 17:08:41 -- jplevyak

Log message:
	Cleanup chpl -t (HTML output) so that it is more readable and
	shows all the types and functions and their call trees.  Unfortunately
	it does not show the AST nodes and the types and types and outgoing
	calls because that was never reimplemented when we moved to the new AST :(
	
	However the output is still useful to see what is coming out of analysis.

Modified files:
	chapel/compiler/backend/: dump.cpp 

---------------------------------------------------------------------------

05/04/05 17:17:49 -- deitz

Log message:
	Removed future for test_class3 which uses named parameters.  This has
	been working for a little while now.

Removed files:
	chapel/test/classes/deitz/: test_class3.future 

---------------------------------------------------------------------------

05/04/05 17:18:37 -- deitz

Log message:
	Added code to remove dead symbols from their scopes and to remove the
	ParamScopes of dead functions in RemoveDeadSymbols.
	
	Fixed a bug in the Symboltable traversal mechanism that showed up now
	that symbols are removed from their scopes within RemoveDeadSymbols.
	
	Fixed a small inconsistency in InsertThisParameters in which a DefStmt
	was copied and inserted before being extracted.  I'm not checking in
	my code that caught this inconsistency as I don't think it is a
	worthwhile inconsistency to catch.

Modified files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp symscope.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 

---------------------------------------------------------------------------

05/05/05 13:17:14 -- deitz

Log message:
	Removed comments I accidentally left in the PrintSymtab traversal.

Modified files:
	chapel/compiler/symtab/: printSymtab.cpp 

---------------------------------------------------------------------------

05/05/05 13:36:05 -- bradc

Log message:
	Fixed some bugs in printing the symboltable in
	which stdout was used rather than the output
	file that was specified.

Modified files:
	chapel/compiler/symtab/: printSymtab.cpp symscope.cpp 

---------------------------------------------------------------------------

05/05/05 15:10:04 -- bradc

Log message:
	A number of Symboltable cleanups.  The first is
	the most important; the second the coolest; the
	others are minor fixes:
	
	* Fixed an apparent bug in the SymtabTraversal in
	  which all modules were being traversed if the
	  traversal requested that only user modules be
	  traversed.
	
	* Made the PrintSymtab pass support an argument in
	  the passlist file so that only part of the symboltable
	  may be printed.  If the argument string is set to
	  "user", only the symboltable corresponding to the
	  user's code will be printed out;  if set to "common"
	  the common module and user code will be printed out.
	  Otherwise, the whole thing will be printed out (as
	  it had been before).  I find this helpful for
	  avoiding the pages of code that are generated for
	  the prelude files.
	
	* changed the way that indentations are printed to
	  avoid having an fprintf in a for loop, and to reduce
	  the number of places in the code where the indentation
	  has to be computed.  It could be further improved, but
	  this seems like a step in the right direction.
	
	* Removed the "level" member from the SymScope class
	  as it is no longer used
	
	* Switched ModuleSymbol's boolean "internal" which was
	  used to indicate whether the module was internal or
	  external to "modtype" which can have the values:
	     MOD_USER, MOD_INTERNAL, MOD_COMMON
	
	  because there are several places in the compiler where
	  the commmon module is treated either as a user module
	  or an internal module, depending on the context.  This
	  replaces some pretty strange conditionals ("if the module
	  is internal or common" or "if the module is not internal
	  and is not the common module") with clearer logic.  Steve
	  might argue that the common module should never be treated
	  differently than user code, but since it currently is, I
	  just tried to clean this up without trying to figure out
	  whether it always could be.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h symscope.h symtab.h 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: codegen.cpp createEntryPoint.cpp 
	                         printProgram.cpp runAnalysis.cpp 
	chapel/compiler/symtab/: printSymtab.cpp printSymtab.h 
	                         symscope.cpp symtab.cpp 
	                         symtabTraversal.cpp 

---------------------------------------------------------------------------

05/05/05 16:46:39 -- jplevyak

Log message:
	New option : NO_OPERATOR_EQ_FOR_UNTYPED_UNINITIALIZED to see if we can
	avoid operator= for untyped uninitialized variables.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/05/05 17:00:56 -- jplevyak

Log message:
	Accidentially disable writing of the 'i' log in some cases... this restores it.

Modified files:
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

05/05/05 17:27:23 -- bradc

Log message:
	Registered the "View" traversal so that it might
	be added to a user's passlist.h.

Modified files:
	chapel/compiler/main/: passlist.cpp 

---------------------------------------------------------------------------

05/05/05 17:48:35 -- deitz

Log message:
	Reworked ScopeResolveSymbols to work on methods in classes even though
	they are no longer scoped within the class.  This is a major change to
	this traversal.
	
	Added functionality to InsertThisParameters to move methods out of
	classes.  I did this before, but now it is done right, or at least,
	righter.
	
	Reworked ApplyThisParameters to not use the scope to determine if a
	symbol needs 'this' applied to it.  This can stand to be thought about
	more and maybe moved into ScopeResolveSymbols.
	
	Fixed OmitForNoAnalysis to actually remove symbols that are omitted,
	not just mangle their name.
	
	Added code to copy and update the _this field of a function if the
	function is copied in UpdateSymbols (called by copy).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             insertThisParameters.cpp 
	                             omitForNoAnalysis.cpp 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	                             updateSymbols.cpp 

---------------------------------------------------------------------------

05/05/05 18:07:27 -- bradc

Log message:
	Overloaded run() for View traversal so that it would
	print out some whitespace after it runs from the
	passlist.

Modified files:
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

05/05/05 18:13:41 -- bradc

Log message:
	Updated my typefn futures and added some new ones.  I
	think my new messages depend on some code I'm hoping
	to check in in a minute, though.  :)

Modified files:
	chapel/test/functions/bradc/: typefn.future typefn2.future 
Added files:
	chapel/test/functions/bradc/: typefn3.chpl typefn3.future 
	                              typefn3.good typefn4.chpl 
	                              typefn4.good typefn5.chpl 
	                              typefn5.future typefn5.good 

---------------------------------------------------------------------------

05/05/05 18:28:46 -- bradc

Log message:
	Fixed a problem in scopeResolveSymbols in which the
	parameter scope was not being pushed before the
	function return type was resolved -- since the
	return type can be resolved using values from the
	parameter list, this is necessary.  This change
	gets the typefn tests that I just edited/added
	working slightly better than they were previously.

Modified files:
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

05/06/05 08:54:55 -- deitz

Log message:
	Added a test case to ensure that methods with parameters that shadow
	fields use the parameters instead of the fields.

Added files:
	chapel/test/classes/deitz/: test_method8.chpl test_method8.good 

---------------------------------------------------------------------------

05/06/05 09:22:58 -- deitz

Log message:
	Removed "Stmt* constructor" from StructuralType.  Constructor DefStmts
	are now stored outside of the class.  They are pointed to by
	defaultConstructor.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

05/06/05 09:45:25 -- deitz

Log message:
	Added constructor of a class to the class's list of methods.
	
	Made getters and setters be defined in statements outside of the
	class.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

05/06/05 10:05:31 -- bradc

Log message:
	Another typefn test.

Added files:
	chapel/test/functions/bradc/: typefn4a.chpl typefn4a.good 

---------------------------------------------------------------------------

05/06/05 10:19:08 -- deitz

Log message:
	Added Vec<ClassType*> ClassType::parentClasses which stores the parent
	classes of classes (for inheritance).  I added this because when a
	class is cloned, the original is the clone's parent.  We need this to
	allow ResolveTypes to resolve the type of an instance of the original
	as the clone without generating an error message.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/06/05 11:17:37 -- deitz

Log message:
	Changed SizeofExpr to operate on a Variable* rather than a Type*.  It
	still has the same meaning and can be passed a Variable of a
	TypeSymbol if no variable is known.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             view.cpp 

---------------------------------------------------------------------------

05/06/05 11:28:06 -- bradc

Log message:
	Previously, we tried to determine a DomainType's rank at parse-time.
	This works OK for domains whose rank is specified with an integer
	literal, but doesn't work so well for domains whose rank is specified
	with a parameter expression since symbols are not resolved at
	parse-time.  Took this logic out of the parser & domain constructor
	and moved it to a new traversal called ResolveDomainRanks.  This is
	currently run after symbols have been resolved.  Eventually we may
	need to also run it after class cloning has occurred so that domain
	class members that are based on a class parameter can be set up
	properly.
	
	* added an implementation of Variable::intType() that computes the
	  integer value of certain parameter and constant integer variable
	  expressions.
	
	* fixed an apparent missing case in the DomainType traversal in which
	  its initializing expression was not being traversed.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/trivial/bradc/protoast/: mypasslist.h 
Added files:
	chapel/compiler/traversals/: resolveDomainRanks.cpp 
	                             resolveDomainRanks.h 

---------------------------------------------------------------------------

05/06/05 11:28:51 -- bradc

Log message:
	This should've gone in with my last check-in, which
	fixed this future.

Removed files:
	chapel/test/domains/bradc/: paramRank.future 

---------------------------------------------------------------------------

05/06/05 11:37:59 -- deitz

Log message:
	Added new AST expression CastLikeExpr that is similar to a CastExpr
	but instead of a Type* newType, it has Variable* variable.  This casts
	the expression to the type of the variable.
	
	This is useful in malloc, because when the constructor is cloned, we
	want the type associated with the malloc to change.
	
	I'm a little concerned about casts and cloning though.  When a
	function is cloned, should the cast be updated?  It seems like
	sometimes it should be.  If we can get this working, I can undo my
	last changes to SizeofExpr and this CastLikeExpr.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

05/06/05 11:41:47 -- bradc

Log message:
	Changed DomainType::idxType from a Type* to an IndexType*
	in order to remove the numerous static and dynamic casts
	that were used to get it back to an IndexType in the
	compiler.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

05/06/05 12:16:41 -- bradc

Log message:
	In a discussion about portability between gcc
	on Sun vs. everything else, realized that I'm
	increasingly offended by our need to #include
	inttypes.h, and so came up with a hack that
	allows us to use stdint.h (which also supports
	other abilities to specialize for platforms
	that we might anticipate needing).
	
	Added the ability to add a $PLATFORM-specific
	subdirectory to the include/ directories in
	the compiler and runtime, which will be
	searched prior to the main include directory,
	allowing platform-specific include files to
	be created.  Instantiated this directory for
	sunos, and put in a stdint.h file that
	#includes inttypes.h.  Changed all #inclusions
	of inttypes.h to stdint.h.

Modified files:
	chapel/compiler/include/: chpltypes.h list.h vec.h 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile chplmem.c 
Added files:
	chapel/compiler/include/sunos/: stdint.h 
	chapel/runtime/include/sunos/: stdint.h 

---------------------------------------------------------------------------

05/06/05 12:50:31 -- bradc

Log message:
	Did a similar stdint.h hack for freebsd as it
	didn't seem to support the file either.

Added files:
	chapel/compiler/include/freebsd/: stdint.h 
	chapel/runtime/include/freebsd/: stdint.h 

---------------------------------------------------------------------------

05/06/05 12:54:22 -- deitz

Log message:
	If a function is cloned, the members of its MemberAccesses are made
	unresolved.  It's likely that we should never try to resolve these
	before analysis anyway.
	
	Made a minor improvement to VarInitExpr::codegen which should never be
	executed unless something has gone wrong.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: clearTypes.cpp 

---------------------------------------------------------------------------

05/06/05 13:40:44 -- deitz

Log message:
	Added a couple temporaries to ResolveTypes so that return_type_info
	and type_info are only called once per symbol.

Modified files:
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/06/05 14:12:32 -- jplevyak

Log message:
	Fix return_type_info() which was returning the pre-clone type.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/06/05 17:41:03 -- deitz

Log message:
	This checkin gets class cloning working!  At least on the simple test
	cases that are written.
	
	Changed VarInitExpr to have an Expr rather than a VarSymbol.  I may
	change it back.  Note that this is only and can only be used for the
	default arguments to the default class constructor.
	
	Inserted code after resolveTypes in a new traversal called
	PostAnalysisCleanup that resolves the types of parameters to default
	constructors (and to default wrappers as they are copied).
	
	Fixed a bug in which the wrapper did not create ParenOpExprs but
	rather FnCalls so they were not resolved.  The coercion wrapper still
	creates a FnCall because it looks like call_info works wrong on it.
	
	Added new class cloning test
	
	  test/types/type_variables/deitz/test_clone_class2b
	
	as a simple test where the constructors are passed arguments.
	
	Removed futures for
	
	  test/types/type_variables/deitz/test_clone_class2
	  test/types/type_variables/deitz/test_clone_class2a

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share removeDeadSymbols.cpp 
	                         resolveTypes.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             removeNamedParameters.cpp 
	                             updateSymbols.cpp 
Added files:
	chapel/compiler/symtab/: postAnalysisCleanup.cpp 
	                         postAnalysisCleanup.h 
	chapel/test/types/type_variables/deitz/: test_clone_class2b.chpl 
	                                         test_clone_class2b.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class2.future 
	                                         test_clone_class2a.future 

---------------------------------------------------------------------------

05/08/05 18:51:47 -- jplevyak

Log message:
	Fix problem with ../test/functions/bradc/typefn2.chpl
	
	The problem was that I was not doing generic instantiation for pure
	type arguments.
	
	Preceeding examples were of the form:
	
	pragma "fast" function foo(type t, x:t)
	
	where some real variable "x" takes on a value of a type variable
	argument (which would be unnecessaty if we supported foo(x : ?t)).
	
	However, typefn2 is
	
	function min(type t): t
	
	And since I was keying off real variables before and this has non,
	I needed to add another case.
	
	In fixing this I discovered that there is a bug in generic instantiation
	and/or resolveTypes with respect to type variable return types.
	
	In order to patch it, I made analysis's return_type_info() always
	override whatever was in the AST.  This should likely be looked at.
	
	The line is commented at resolveTypes.cpp:77:
	
	        fn->retType = analysisRetType; // JBP: inserted to fix typefn2.chpl May 8, 2005
	
	Removing this line causes typefn2.chpl to FATAL.

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/09/05 09:08:49 -- jplevyak

Log message:
	Use the Symbol::noDefaultInit flag instead of trying go guess.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: test_swap.future 

---------------------------------------------------------------------------

05/09/05 09:09:27 -- jplevyak

Log message:
	Change future to bradc since it seems to be a codegen problem.

Added files:
	chapel/test/types/type_variables/deitz/: test_swap.future 

---------------------------------------------------------------------------

05/09/05 09:32:02 -- deitz

Log message:
	Pulled in John's change to ResolveTypes.
	
	Made it so that strings are default-initialized even if noDefaultInit
	is set.  This is because strings need to be initialized to avoid seg
	faults with the way we assign them.
	
	Removed test_swap future as it now works.

Modified files:
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: test_swap.future 

---------------------------------------------------------------------------

05/09/05 09:46:01 -- deitz

Log message:
	Added a slightly more complicated class cloning test and it works.

Added files:
	chapel/test/types/type_variables/deitz/: test_clone_class3.chpl 
	                                         test_clone_class3.good 

---------------------------------------------------------------------------

05/09/05 09:53:30 -- deitz

Log message:
	Added two more complicated class cloning tests.  One of them fails and
	I have the future.

Added files:
	chapel/test/types/type_variables/deitz/: test_clone_class4.chpl 
	                                         test_clone_class4.good 
	                                         test_clone_class5.chpl 
	                                         test_clone_class5.future 
	                                         test_clone_class5.good 

---------------------------------------------------------------------------

05/09/05 10:10:44 -- jplevyak

Log message:
	Add a Verify after the elminateReturns pass.
	
	  - Verify did not catch that elminateReturns was using insertAfter
	    on something in a CondExpr but not a BlockExpr which resulted in
	    a bogus AST structure.   We should probably check that.
	
	Fixed eliminateReturns to insert a BlockStmt to wrap the assignment
	  to _ret_val and the return.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: eliminateReturns.cpp 

---------------------------------------------------------------------------

05/09/05 10:36:41 -- jplevyak

Log message:
	New test to check for coercion of return values.

Added files:
	chapel/test/functions/jplevyak/: type_var_fun-1.chpl 
	                                 type_var_fun-1.good 

---------------------------------------------------------------------------

05/09/05 10:37:32 -- jplevyak

Log message:
	Add a pass of elminateReturns before analysis.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: eliminateReturns.cpp 

---------------------------------------------------------------------------

05/09/05 11:09:55 -- jplevyak

Log message:
	Add partial support for x.foo += x (AssignOp with operator used
	with a setter).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/09/05 11:13:49 -- jplevyak

Log message:
	Fix up headers

Modified files:
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

05/09/05 12:45:23 -- jplevyak

Log message:
	Update tests for ret_val change

Modified files:
	chapel/test/flowanalysis/newast/: multiple_return.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/09/05 12:47:52 -- deitz

Log message:
	Added a new pass called Verify.  This replaces uses of Fixup-verify in
	the passlist.  It calls Fixup-verify.
	
	Fixup-verify only checked the parent pointers.  Verify will eventually
	check alot more.
	
	In addition to future verify checks for every kind of expression and
	statement in a verify method, this verify pass checks to make sure all
	the symbols in a Symboltable traversal are also define in an AST
	traversal.  I was running into huge problems before because things
	showed up in one kind of traversal and not the other.
	
	This test is currently off because IndexTypes are not fully defined.
	
	Stopped extracting the DefStmt in InsertVariableInitializations so
	that the verify continues to work.  Maybe this should be done by
	changing what is verified in the passlist.
	
	I added the CondStmt::verify and DefExpr::verify procedures but
	eventually we want verify procedures in all statements and
	expressions.  As an example of what these will do, the CondStmt makes
	sure that condExpr and thenStmt are non-null and makes sure that
	condExpr, thenStmt, and elseStmt are single expressions/statements
	rather than lists.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share fixup.cpp fixup.h 
	                             insertAnonymousDomains.cpp 
	                             insertVariableInitializations.cpp 
Added files:
	chapel/compiler/traversals/: verify.cpp verify.h 

---------------------------------------------------------------------------

05/10/05 08:46:45 -- jplevyak

Log message:
	Fix a couple of mismatched error messages.

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/10/05 09:38:15 -- jplevyak

Log message:
	This is a relatively large change, and it is not cleaned up, but I thought
	I had better checkpoint it now rather than risk divergence.
	
	The main change is to support setters and getters, but the changes are more
	far reaching than that.
	
	1. Add a function is_ref(Expr*) which determines whether or not an expression
	   returns a "reference".   This will be made into a member function.
	
	2. Using is_ref and a companion function on FnSymbols, as well as the exiting
	   function requiresCPtr(), do the appropriate impedence matching between
	   expressions, function arguments and function return values.
	
	3. Getters return reference when the thing being "got" is a value type.
	
	4. Members access are resolved into their component "member_type" and
	   "member_offset" which allows for polymorphic functions.
	
	5. Codegen for member accesses uses the "member_type" and "member_offset"
	   information when available.
	
	6. Added a new varType (varClass) VAR_REF which indicates that the
	   variable is holding a reference.
	
	   A corresponding flag will be put into functions to indicate that they
	   return references.
	
	7. ensured that "isConstructor" as well as "method_type" are preserved in
	   wrappers and instantiated generics
	
	8. Add functions on types is_Value_Type and is_Reference_Type.
	
	   These could be made into member functions if we want (I wasn't
	   planning on it).
	
	9. Concretized the ivars for each CreationSet coming out of analysis...
	   this is used to provided more precise variable by variable ivar
	   type and offset information.
	
	10. All AVar's now have a concretized type variable (though currently
	    only instance variable AVar's use it).
	
	11. resolveTypes now more aggressively uses the type information provided
	    by analysis.  In particular, analysis can override decalred reference types
	    (since they are only bounds anyway).  Currently I still defer to
	    declared scalar types since unused scalars would otherwise not have a
	    type from analysis (we could handle these cases specially, perhaps
	    emitting a warning).
	
	12. insertFunctionTemps and eliminateReturns now uses the new VAR_REF
	    where appropriate
	
	13. Expr(s) can be pre-resolved by setting the "resolved" field.  This
	    was introduced to deal with the phase ordering problem between
	    resolveOverloadedOperators and resolveSymbols... if these passes
	    are unified this could be removed.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp if1.cpp 
	chapel/compiler/include/: expr.h fa.h symbol.h type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             insertFunctionTemps.cpp 
	                             removeNamedParameters.cpp 
	                             resolveOverloadedOperators.cpp 
	                             resolveSymbols.cpp 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/10/05 10:22:44 -- jplevyak

Log message:
	Fixed those annoying test_clone_class1a problems... sorting Sum type output
	to normalize it.
	Made "is_ref" a member Expr::isRef().
	Added support for
	
	function foo() var : integer {
	}
	
	to the parser to indicate that the function foo() is both a setter
	and a getter.
	
	(currently not supported beyond the parser

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: expr.h symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/10/05 11:09:13 -- deitz

Log message:
	Instantiating a constructor now instantiates the class as well.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/10/05 11:48:46 -- deitz

Log message:
	Made small fix to verification though it is on the commented out part
	of it.

Modified files:
	chapel/compiler/traversals/: verify.cpp 

---------------------------------------------------------------------------

05/10/05 12:37:29 -- deitz

Log message:
	Cleaned up types by removing various subtypes of Type::codegen() that
	did the same thing.
	
	Removed StructuralType::codegen() which used to check to see if it was
	not dead.  Since dead types are now really removed, this is no longer
	necessary.
	
	It looks like analysis returns a dead type (for example, for the
	default type initialization variable) so in resolveTypes.cpp, I added
	a hack to make the type dtNil if the type analysis returns is dead.
	John, please take a look at this.  This might not be a hack and may be
	necessary (because this variable uses noDefaultInit).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/10/05 15:14:48 -- deitz

Log message:
	Modified Symboltable::lookup etc. to lookup symbols in the class
	type's scope at the appropriate point when looking up symbols in
	methods.  The appropriate point is after the symbols in the parameter
	list of the method are looked at.
	
	Simplified ScopeResolveSymbols by removing code to resolve symbols in
	methods since this is now in lookup.
	
	Added a new kind of symbol called a ForwardingSymbol.  These symbols
	will eventually be included in scopes that use the "use" keyword.  The
	plan is that in the AST, the Variable* will refer directly to the
	symbol that it is using.  It will also contain a ForwardingSymbol
	field that will be used in code generation if the symbol was renamed.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symbol.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

05/10/05 15:41:05 -- jplevyak

Log message:
	Ensure that dtNil is always live and that global variables are
	always live.  This addresses the reasons for the kludge where
	type_is_used was false in some cases.   Also sorted
	the call stack information for error messages to deal
	with another case where clone1a/b could have different output
	more or less randomly.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp if1.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

05/10/05 17:12:04 -- jplevyak

Log message:
	Introduce an assert to check that all types return true
	for  type_is_used().
	This involved adding an additional conditional so that
	FnSymbol::type is not checked.
	Yet another sort in the error message output.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/10/05 17:33:01 -- deitz

Log message:
	Added initial support for chapel programs with multiple modules that
	make "use" of the multiple modules.  Added two new tests, which work,
	that test this new functionality slightly.
	
	In making this change, I made the default export true.  I would like
	to discuss with Brad an option of having a single header file for
	symbols that are exported.  Given the forwarding symbol and limited
	code mangling, I think we can get away with this.
	
	Added a new pass ResolveModuleUses that adds forwarding symbols to
	scopes where a use is used.  It also adds the module that is used to a
	list of modules in the current module so that the module will #include
	the other.  In addition, this pass adds a function call to the init
	function of that module to the init function of the current module.
	Perhaps it should be called at the site of the use instead.
	
	Added a forwarding symbol to variable.  I think this is unnecessary
	unless we want to change the name of forwarded symbols.  While that
	might be nice for code generation I think it will be needlessly
	complicated.
	
	Added a function Symboltable::getCurrentModule() that returns the
	current module during a traversal.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: expr.h files.h stmt.h symbol.h 
	                          symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             scopeResolveSymbols.cpp verify.cpp 
	chapel/compiler/util/: files.cpp 
Added files:
	chapel/compiler/traversals/: resolveModuleUses.cpp 
	                             resolveModuleUses.h 
	chapel/test/modules/deitz/: test_module_use1.chpl 
	                            test_module_use1.good 
	                            test_module_use2.chpl 
	                            test_module_use2.good 

---------------------------------------------------------------------------

05/10/05 18:43:25 -- jplevyak

Log message:
	Make the error message sort more robust.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

05/10/05 20:00:37 -- jplevyak

Log message:
	Implement new interface to call_info which supports queries
	over OPERATOR(s) FUNCTION(s) and SINGLE (only one call at
	this AST).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

05/11/05 07:35:58 -- jplevyak

Log message:
	Fix valgrind uninitialized variable "error" (GC zero's the data, so
	this change doesn't actually change the behavior of the program).

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

05/11/05 11:16:05 -- deitz

Log message:
	Added Expr::parentScope and Stmt::parentScope which store the scope
	that expressions and statements are in.  These are set in Fixup and
	verified in Fixup-verify.
	
	Fixed a bug in the traversals in which the currentScope might not be
	correct especially if the traversal was not started from a module.
	
	Changed atTop to be false when starting a traversal in a module so
	that the top level statement is actually traversed.
	
	If atTop is true in a traversal (at the beginning), the currentScope
	is set up.
	
	Fixed bugs in InsertFunctionTemps and InsertVariableInitializations in
	which expressions and statements had the wrong scopes because block
	statements were set up in ad hoc ways.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/traversals/: fixup.cpp insertFunctionTemps.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

05/11/05 12:44:57 -- jplevyak

Log message:
	Added collect_symbols(... ,Type*) which works on new types, in
	particular the new type created when a generic constructor is instantiated.
	Added support for integrating the new type created when a generic
	constructor is instantiated.
	
	types/type_variables/deitz/test_typevar_class1.chpl  now
	fails because the _retval still has a type of 't' (the old
	generic type) instead of the correct newly instantiated type).

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: baseAST.h fa.h 
	chapel/compiler/symtab/: collectSymbols.cpp symtabTraversal.cpp 
	                         symtabTraversal.h 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class1.future 

---------------------------------------------------------------------------

05/11/05 13:13:16 -- deitz

Log message:
	Improved InsertFunctionTemps so that it doesn't insert a function temp
	if the scope of the statement is different than the scope of the
	function call.  This is the case, for example, when a function call is
	in a let expression.  Also fixed a bug in InsertFunctionTemps in which
	it did not insert function temps for function calls in the
	initialization expressions to DefExprs.
	
	Made TransformLetExprs call InsertFunctionTemps on the block statement
	it creates (since it will not have applied to this code before).
	
	Improved and rewrote TransformLetExprs to create a new scope and copy
	the symbols deeply.  Previously I just stole the let expression scope
	and stuck it in the block statement.  This new way is more robust.  It
	was difficult before because copying and replacing weren't as good as
	they are now.
	
	Added a test of 'record mycomplex' which will eventually be the code
	we use for complex numbers.

Modified files:
	chapel/compiler/traversals/: insertFunctionTemps.cpp 
	                             transformLetExprs.cpp 
Added files:
	chapel/test/classes/deitz/: test_mycomplex_record.chpl 
	                            test_mycomplex_record.good 

---------------------------------------------------------------------------

05/11/05 14:18:08 -- deitz

Log message:
	Added functionality to print_view to print out the types of symbols.

Modified files:
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

05/11/05 15:02:10 -- deitz

Log message:
	Updated regressions file, removing two tests that have been working
	for a while.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/11/05 15:31:21 -- deitz

Log message:
	Added Map<BaseAST*,BaseAST*>* as a parameter to
	FnSymbol::instantiate_generic which will return a map of every AST
	that was copied during an instantiation of a function (and if it is a
	constructor, the corresponding class).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/11/05 16:28:30 -- jplevyak

Log message:
	init_string returns "".
	sort the output of test_clone_class1a/b

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/11/05 16:35:28 -- deitz

Log message:
	Added some functions, not used yet, for eventually reworking copy and
	avoiding dynamic casts.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 

---------------------------------------------------------------------------

05/11/05 17:39:49 -- jplevyak

Log message:
	Changed the interface for the default_wrapper to use the same
	sort of interface we are using for coercions: namely instead
	of presenting MPositions provide Symbol * to indicate which
	arguments are to be defaulted.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/12/05 07:32:50 -- jplevyak

Log message:
	Forgot to checkin the prediff script

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1a.prediff 
	                                         test_clone_class1b.prediff 

---------------------------------------------------------------------------

05/12/05 10:13:16 -- jplevyak

Log message:
	Fix test_class_list1.future.
	
	The issue was how to handle dispatch on "nil".  The problem being
	that the default constructor has a "nil" argument.
	
	class node {
	  var next: node;
	}
	
	the constructor is :
	
	function construct_node(var x : node) ...
	
	And the call from the default wrapper is:
	
	function defaulted_node() {
	  return construct_node(next = nil);
	}
	
	This will currently fail, because nil is not a subtype of node.
	
	There were two solutions, one of which would have been to remove the
	type declaration for the constructor parameter.
	
	Solution 1:
	
	function construct_node(var x)  ...
	
	The second solution to use a "aspect" (a statement to
	the compiler to use a particular type for dispatch purposes).
	
	Solution 2:
	
	function defaulted_node() {
	  return construct_node(next = nil:node);
	}
	
	The "aspect" tells the compiler what type to dispatch to for the nil.
	
	Generally, programmer's should be aware that they cannot dispatch on nil,
	and we might want to provide a aspects, at least of nil, as a part of the
	language.
	
	I implemented Solution 2 because it was the least intrusive.
	
	We might also want to consider also using Solution 1.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: symbol.h 
Removed files:
	chapel/test/classes/deitz/: test_class_list1.future 

---------------------------------------------------------------------------

05/12/05 10:35:27 -- jplevyak

Log message:
	The impossible is no longer happening.

Removed files:
	chapel/test/functions/bradc/: typefn5.future 

---------------------------------------------------------------------------

05/12/05 10:54:23 -- deitz

Log message:
	Made the following traversals work on MODULES_USER and
	MODULES_COMMON_AND_USER:
	
	     EliminateReturns
	     ProcessParameters
	     ResolveDomainRanks
	
	No changes to the traversals were required.

Modified files:
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             processParameters.cpp 
	                             resolveDomainRanks.cpp 

---------------------------------------------------------------------------

05/12/05 11:09:11 -- shannon

Log message:
	Fixed a couple bugs and some other ugliness.
	
	Specifically:
	
	* chplmem.c:  Fixed a bug in the totalMem calculation
	  where I had neglected to subtract from the total in
	  the case where a new address was not returned on
	  realloc yet the size of the chunk of memory had changed.
	
	  Fixed the updateMemory function to rehash on the new
	  memory location returned on realloc so I can find the
	  entry later..
	
	  Broke the updateMemStat function down into
	  increaseMemStat and decreaseMemStat.  I was passing a
	  negative value into an size_t argument.  Woops.
	
	* Added a test.
	
	* Updated the output of a couple of tests to reflect
	  now-correct values.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: chplmem_tests.h 
	chapel/runtime/src/: chplmem.c chplmem_tests.c 
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
Added files:
	chapel/test/memory/shannon/: allocAndFree.chpl 
	                             allocAndFree.execopts 
	                             allocAndFree.good 

---------------------------------------------------------------------------

05/12/05 11:10:07 -- jplevyak

Log message:
	UpdateSymbols was not updating the CastExpr::newType field which was
	resulting in failures for instantiated generic functions which operated
	on primitive (integer, etc) types.
	
	Removed the effected futures.

Modified files:
	chapel/compiler/traversals/: updateSymbols.cpp 
Removed files:
	chapel/test/functions/bradc/: typefn.future typefn2.future 
	                              typefn3.future 

---------------------------------------------------------------------------

05/12/05 12:24:13 -- bradc

Log message:
	Small change to the way FnSymbols are stored.  Previously,
	we were storing the function's return type as both its
	FnSymbol::type and its FnSymbol::retType, and when we
	wanted its return type, in some cases we would refer to
	one field and in other cases the other.  This checkin causes
	FnSymbol::type to no longer refer to the function's return
	type, though it does not point to a correct concept of
	function type yet either.
	
	What I've done is to create a new Type subclass -- FnType --
	which is currently nothing other than a placeholder.
	Eventually, function types should store the types (and names?)
	of their parameters as well as the function's return type,
	and will be used to represent the types of function variables
	and parameters as well as Function Symbols themselves.  For
	now, FnType is simply a placeholder to serve as a sentinel
	that FnSymbol::type is no longer the function's return type.
	Codegening a FnType results in an internal error, for example.
	
	In order to make analysis' switch statements cover all of the
	type cases, I inserted the following case to build_type,
	which may be completely wrong:
	
	    case TYPE_FN:
	      t->asymbol->sym->type_kind = Type_FUN;
	      break;
	
	However, it also didn't seem to break anything.  Put in a
	comment marking it as questionable code which John could
	pull out if it seems OK, or modify if it simply seems OK
	for now (until we implement FnTypes more fully, e.g.)

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/traversals/: verifyASTType.cpp 

---------------------------------------------------------------------------

05/12/05 12:56:29 -- jplevyak

Log message:
	Hopefully fix compilation on gcc 3.3.X for cygwin.
	Moved declarations to the top of the function.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 

---------------------------------------------------------------------------

05/12/05 13:35:25 -- jplevyak

Log message:
	Change the last wrapper (the order_wrapper) to not depend on MPosition.
	Removed "pattern.h" from the #includes in symbol.cpp!

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/12/05 15:36:49 -- jplevyak

Log message:
	Change the clone() API to remove the Callback and to only use
	the clone_map.
	
	Note: I didn't change all the "copyXXXX" functions which still pass around
	the NULL pointer.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/12/05 15:45:28 -- deitz

Log message:
	Added test that shows bug in user types of structural types.  This is
	an IO codegen problem.

Added files:
	chapel/test/classes/deitz/: test_class_in_usertype.chpl 
	                            test_class_in_usertype.future 
	                            test_class_in_usertype.good 

---------------------------------------------------------------------------

05/12/05 15:59:32 -- bradc

Log message:
	Based on John's note earlier about FnTypes' symbols
	not appropriately pointing back to their FnSymbol,
	set the symbol to NULL instead.  I was concerned
	that if a type didn't have a symbol that something
	downstream would choke, so used this as a short-term
	hack.  It turns out that nothing does choke (nobody
	must look at FnSymbol::type much), so I removed it
	for now.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/12/05 16:02:45 -- bradc

Log message:
	Changed Roxana's #define and commented out code into
	a temporary internal flag named "--tmpRoxIndexType"
	which turns on the code in question.  This is done
	in order to make her tests use this flag and ensure
	that things don't regress without anyone noticing.
	However, I haven't actually looked at getting the
	tests themselves working yet.
	
	It seems like it would be good to have all of our
	flags that are temporary workarounds have a common
	prefix and/or be in a similar area of the --help
	message so that we can prune them later if we lose
	track of them.  That's what the "--tmp" in my flag
	name is meant to suggest, but I'm open to other
	schemes for keeping these flags straight.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp symtab.cpp 
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertIndexType.h 

---------------------------------------------------------------------------

05/12/05 16:04:57 -- jplevyak

Log message:
	Make sure to unalias aspects (dereference type variables used as an "aspect").

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/12/05 16:36:59 -- deitz

Log message:
	See note below about what is commented out.  Complex is still handled
	the old way.
	
	Added standard include module _chpl_complex.chpl in runtime/include/.
	
	This is now parsed in.  It is labeled as a MOD_STANDARD to distinguish
	it from MOD_USER.
	
	Traversals can now be run on the following set of modules:
	
	  MODULES_USER - only user modules
	  MODULES_CODEGEN - user modules, common module, standard modules
	  MODULES_ALL - user, common, standard, and internal
	
	Traversals that are restricted now set whichModules to MODULES_CODEGEN
	instead of MODULES_COMMON_AND_USER.
	
	Added a pragma for renaming a symbol.  So in the complex record, we
	use a pragma to rename it (cname) to _chpl_complex because complex
	clashes with the C compiler's complex.
	
	Added a pass to change complex literals to complex record constructor
	invocations.
	
	NOTE: This pass is not invoked currently.  Also, the complex module is
	not used by other modules.  The code to do these is commented out.
	The main first problem is that read and write need to be made more
	robust.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: chplenum.h parser.h symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertOutParameterInitializations.cpp 
	                         insertWriteFns.cpp 
	                         postAnalysisCleanup.cpp printSymtab.cpp 
	                         resolveTypes.cpp symscope.cpp 
	                         symtab.cpp symtabTraversal.cpp 
	chapel/compiler/traversals/: Makefile.share eliminateReturns.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             resolveDomainRanks.cpp 
	                             resolveModuleUses.cpp 
	                             resolveModuleUses.h 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp verify.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	chapel/compiler/traversals/: constructComplexLiterals.cpp 
	                             constructComplexLiterals.h 
	chapel/runtime/include/: _chpl_complex.chpl 

---------------------------------------------------------------------------

05/12/05 17:15:19 -- deitz

Log message:
	Moved Vec<FnSymbol*> methods out of StructuralType:: and into Type::.
	This means that a secondary method can be defined on any type.
	
	Renamed FnSymbol::classBinding to FnSymbol::typeBinding.
	
	Added a test case that defines a function integer.print() and calls it
	as in i.print().  It works.  Added a test case that yields a syntax
	error when you try to write 12.print().

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp verify.cpp 
Added files:
	chapel/test/trivial/deitz/: test_integer_method.chpl 
	                            test_integer_method.good 
	                            test_integer_method2.chpl 
	                            test_integer_method2.future 
	                            test_integer_method2.good 

---------------------------------------------------------------------------

05/12/05 17:39:49 -- jplevyak

Log message:
	Made sure that dead CreationSets were removed from the list of
	creators of a type before cloning.
	Do not print out debugging information on dead EntrySets.

Modified files:
	chapel/compiler/analysis/: fa.cpp clone.cpp 

---------------------------------------------------------------------------

05/12/05 17:50:19 -- bradc

Log message:
	Chaned Roxana's future tests that were working
	under certain conditions when she checked her
	code in on 4/28/05 to use the .compopts feature
	with the new --tmp flag so that they will be
	tested on a nightly basis.
	
	Re-enabled these tests by putting in yet
	another conditional in resolveTypes that
	determines whether or not a given type
	should be replaced with the output of
	analysis.  In particular, made IndexTypes
	not get replaced by analysis because it
	seems to replace them with integers.
	
	Hoisted the bulk of this conditional into
	a helper function replaceTypeWithAnalysisType()
	in an attempt to make the code a bit more
	readable.

Modified files:
	chapel/compiler/symtab/: resolveTypes.cpp 
Added files:
	chapel/test/domains/roxana/: test_index_expr0.compopts 
	                             test_index_expr2.compopts 
Removed files:
	chapel/test/domains/roxana/: test_index_expr0.future 
	                             test_index_expr2.future 

---------------------------------------------------------------------------

05/13/05 08:49:48 -- deitz

Log message:
	Removed CloneCallback from the copy and clone functions now that the
	new Map interface is used.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symbol.h 
	                          type.h 
	chapel/compiler/traversals/: insertFunctionTemps.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

05/13/05 11:10:34 -- shannon

Log message:
	Removed two now-passing tests and reordered the listing
	of two tests to match the nightly output.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/13/05 11:18:23 -- bradc

Log message:
	Took out a special-casing for returning string types
	that used to be required before Steve handled string
	initialization differently in his 05/09/05 check-in.

Modified files:
	chapel/compiler/traversals/: eliminateReturns.cpp 

---------------------------------------------------------------------------

05/13/05 11:49:10 -- bradc

Log message:
	Updated regressions for other platforms that weren't
	captured -- test_clone_class1a/b on linux valgrind
	that are failing in qsort; test_clone_class3/4 on
	linux64 that are hitting an assertion in resolveTypes
	due to the result of type_is_used(); test_index_expr0/2
	on SunOS for unknown reasons.  Also added usage info
	at the top of the file to make the file's intent and
	format somewhat documented.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/13/05 21:11:57 -- jplevyak

Log message:
	Fix SEGV associated with IF1 translation of EXPR_FORALL

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/15/05 21:56:09 -- jplevyak

Log message:
	Fix 2 valgrind failures.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

05/16/05 10:44:31 -- bradc

Log message:
	Attempting to set an environment variable to squelch
	GC warnings about large block sizes.  We should debug
	this eventually, but for now I just want to see if we
	can turn them off.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/16/05 10:57:28 -- deitz

Log message:
	Made FnSymbol::instantiate_generic instantiate all the methods of a
	class when it is called on the constructor of that class.  It does not
	copy other functions that act on the instantiated class yet.
	
	I also made it so that the Map<BaseAST*,BaseAST*>* parameter of
	instantiate_generic is filled in.  This keeps track of everything that
	is copied when instantiate_generic is called.
	
	Fixed a bug in the copy infrastructure in which copy rather than
	copyInternal was called in VarInitExpr::copy.  Also I extended
	copyInternal to work on Symbols and Types because these should call
	the copyInternals of expressions and statements as well.
	
	Improved UpdateSymbols to update MemberAccesses.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/traversals/: updateSymbols.cpp 

---------------------------------------------------------------------------

05/16/05 11:08:32 -- bradc

Log message:
	Fixed a bug in the test system pointed out by John in
	which a future test whose program execution failed
	(either through a fault or a non-zero status code)
	would be flagged as a failure rather than a future
	failure.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

05/16/05 11:28:25 -- bradc

Log message:
	Removed note about Sun regression due to GC warning as my
	recent change to start_test seems to have successfully
	squelched it.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/16/05 12:13:49 -- deitz

Log message:
	FnSymbol::instantiate on a class constructor now removes the type
	variables that have been instantiated from the class.  A little work
	is still required to get them removed from the constructors.
	
	Made UpdateSymbols update the _getter and _setter pointer of a FnSymbol.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/traversals/: updateSymbols.cpp 

---------------------------------------------------------------------------

05/16/05 14:18:59 -- jplevyak

Log message:
	Seperate SpecializeParenOpExprs into pre-analysis and post analysis
	portions.  The latter to be ultimately merged into ResolveSymbols and
	ReesolveOverloadedOperators.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 

---------------------------------------------------------------------------

05/16/05 14:36:26 -- jplevyak

Log message:
	Remove some futures which are now working for the right reasons.

Removed files:
	chapel/test/functions/jplevyak/: equal-8.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple6.future 
	chapel/test/types/tuple/jplevyak/: tuple_index-1.future 
	                                   tuple_index-2.future 

---------------------------------------------------------------------------

05/16/05 15:07:48 -- bradc

Log message:
	Killed some dead code in the glomstrings routines that
	a code review with Shannon turned up.

Modified files:
	chapel/compiler/util/: stringutil.cpp 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
	                             printMemTable.good 

---------------------------------------------------------------------------

05/16/05 15:08:16 -- jplevyak

Log message:
	Fixed an issue with constuctors for TYPE_TUPLE.
	
	The issue now for test_tuple_simple1/3/4/5 is in codegen:
	
	> In file included from /tmp/chpl-jplevyak-13063.deleteme/_CommonModule.c:2:
	> /tmp/chpl-jplevyak-13063.deleteme/_CommonModule.h:16: warning: parameter has incomplete type
	> In file included from /tmp/chpl-jplevyak-13063.deleteme/_chpl_complex.c:2:
	> /tmp/chpl-jplevyak-13063.deleteme/_CommonModule.h:16: warning: parameter has incomplete type
	> In file included from /tmp/chpl-jplevyak-13063.deleteme/test_tuple_simple5.c:2:
	> /tmp/chpl-jplevyak-13063.deleteme/_CommonModule.h:16: warning: parameter has incomplete type
	
	Essentially there is an ordering problem in CommonModule.h
	where ___tuple_QQQ_QQQ is being defined after it is used.
	
	This could be avoided by doing a forward definition:
	
	struct ___tuple_QQQ_QQQ;
	...
	_tuple_QQQ_QQQ _assign0(_tuple_integer_integer _arg1, struct _tuple_QQQ_QQQ _arg2);
	
	Or by doing the definition first.
	
	If you guys want I can take a look at it...
	
	*****************************************************************
	
	typedef struct ___tuple_integer_integer _tuple_integer_integer;
	typedef struct ___tuple_QQQ_QQQ _tuple_QQQ_QQQ;
	void __init__CommonModule(void);
	struct ___tuple_integer_integer {
	  _integer64 _field1;
	  _integer64 _field2;
	};
	
	void __tuple_integer_integer_set__field1(_tuple_integer_integer* const this, _integer64 _arg);
	void __tuple_integer_integer_set__field2(_tuple_integer_integer* const this, _integer64 _arg);
	_tuple_integer_integer _construct__tuple_integer_integer(_integer64 _field1, _integer64 _field2);
	_tuple_integer_integer _construct__tuple_integer_integer_default_params_wrapper_1(void);
	_tuple_QQQ_QQQ _assign0(_tuple_integer_integer _arg1, _tuple_QQQ_QQQ _arg2);
	struct ___tuple_QQQ_QQQ {
	  _integer64 _field1;
	  _integer64 _field2;
	};
	
	void __tuple_integer_integer_write(_tuple_integer_integer* const _this);
	void __tuple_QQQ_QQQ_write(_tuple_QQQ_QQQ* const _this);

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/16/05 17:15:52 -- bradc

Log message:
	Changed implementation of argument types "F" and "f"
	in arg.cpp to assume that the target is a bool
	rather than an int and converted all such target
	variables from ints to bools.
	
	This change was motivated by a subtle bug that showed
	up on platforms with a different endianness (like sunos),
	in which accidentally declaring the target as a bool
	rather than an int would cause it to not be set
	properly.  By making arg.cpp assume a bool target,
	the reverse mistake (using an int that's used only as
	a boolean value) should not result in a similar error
	since integer tests are for zero vs. nonzero and ints
	are bound to be at least as large as ints.  Moreover,
	it seems reasonable to use bool values to represent
	boolean toggles.
	
	Also, removed an extraneous linefeed from the
	insertAnonymousTypes pass that only showed up for
	Roxana's tests.  Updated the output of these tests
	to get rid of the linefeed.

Modified files:
	chapel/compiler/include/: driver.h mysystem.h 
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	chapel/compiler/util/: mysystem.cpp 
	chapel/test/domains/roxana/: test_index_assign.good 
	                             test_index_expr.good 
	                             test_index_expr0.good 

---------------------------------------------------------------------------

05/16/05 17:28:13 -- bradc

Log message:
	Some fixes related to my last check-in that only showed up
	when the unit tests were rebuilt.

Modified files:
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

05/17/05 09:29:54 -- bradc

Log message:
	Removed regressions that have been fixed over the past
	few days.  We're in our strongest standing we've been
	in for awhile...  only a few linux64 regressions remain
	apart from the two temporary intentional regressions
	test_array_basic1 and test_array_of_record1.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/17/05 10:31:42 -- bradc

Log message:
	Updated a comment concerning the codegen-ing of an
	extra pair of braces around a function's body since
	I thought they were no longer necessary and was about
	to remove them.  Turns out that they still are
	necessary, so clarified the comment a bit to avoid
	making this mistake again.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/17/05 10:47:30 -- deitz

Log message:
	Minimal changes to turn Stmt* into BlockStmt* for the stmt within a
	LabelStmt and the then and else statements within a CondStmt.  This
	will allow for inserting before and after within either of these
	blocks.
	
	Note that this change does not set up scopes for these block
	statements.  This should be done with changes to the parser and the
	addition of Symboltable::startCondStmt etc.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

05/17/05 10:50:59 -- jplevyak

Log message:
	Update information on Linux64 specific regressions

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/17/05 10:58:29 -- jplevyak

Log message:
	Add a new test case which mirrors the Linux64 test failures
	types/type_variables/deitz/test_clone_class3/4 on the 32-bit platforms.

Added files:
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_clone_class-1.chpl 
	                                            test_clone_class-1.future 
	                                            test_clone_class-1.good 

---------------------------------------------------------------------------

05/17/05 11:03:44 -- bradc

Log message:
	It seems that when a nogc version of the compiler is
	built, a bunch of *.nogc.cpp files are created against
	my better wishes.  Will work on fixing this, but for
	now, am adding *.nogc.cpp to the make clean rule so
	that at least it's easy to clean up.

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 

---------------------------------------------------------------------------

05/17/05 11:06:47 -- bradc

Log message:
	Took out a handful of dynamic casts of FnSymbol::body to
	BlockStmt that Steve pointed out I forgot to remove when
	I converted body from a Stmt* to a BlockStmt*.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertOutParameterInitializations.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             findUnknownTypes.cpp 

---------------------------------------------------------------------------

05/17/05 14:18:51 -- deitz

Log message:
	Uninitialized complex variables do not resolve in overloaded functions
	correctly.  They are treated as floats.

Added files:
	chapel/test/types/complex/deitz/: test_complex_overload.chpl 
	                                  test_complex_overload.future 
	                                  test_complex_overload.good 

---------------------------------------------------------------------------

05/17/05 14:24:28 -- deitz

Log message:
	Functions that take enum types don't work.  A bogus coercion wrapper
	is created and the original function is lost.

Added files:
	chapel/test/types/enum/deitz/: test_enum_overload.chpl 
	                               test_enum_overload.future 
	                               test_enum_overload.good 

---------------------------------------------------------------------------

05/17/05 15:03:11 -- deitz

Log message:
	This test shows a bug in passing a member access of a member access to
	a function.  The new code generation scheme prints out a pointer.

Added files:
	chapel/test/classes/deitz/: test_nested_record_function.chpl 
	                            test_nested_record_function.future 
	                            test_nested_record_function.good 

---------------------------------------------------------------------------

05/17/05 16:34:02 -- jplevyak

Log message:
	update .future

Modified files:
	chapel/test/types/complex/deitz/: test_complex_overload.future 

---------------------------------------------------------------------------

05/17/05 16:55:16 -- jplevyak

Log message:
	Fix overloading of enumerations.
	Remove .future for the test which exposed the bug.

Modified files:
	chapel/compiler/analysis/: pattern.cpp sym.cpp 
Removed files:
	chapel/test/types/enum/deitz/: test_enum_overload.future 

---------------------------------------------------------------------------

05/17/05 17:13:04 -- deitz

Log message:
	Made defaultVal of dtComplex a ComplexLiteral.  It was erroneously a
	FloatLiteral.

Modified files:
	chapel/compiler/AST/: type.cpp 
Removed files:
	chapel/test/types/complex/deitz/: test_complex_overload.future 

---------------------------------------------------------------------------

05/18/05 09:23:55 -- deitz

Log message:
	Added new runtime procedures
	
	  char* _chpl_tostring_boolean(_boolean x, char* format)
	  char* _chpl_tostring_integer(_integer64 x, char* format)
	  char* _chpl_tostring_float(_float64 x, char* format)
	  char* _chpl_tostring_complex(_complex128 x, char* format)
	
	that convert strings to boole, integer, float, and complex.
	
	Added support for converting primitive data types to strings using a
	cast like mechanism.  For example,
	
	  var i : integer = 12;
	  var s : string = i:"%5d";
	
	converts the value of i to a string using the format specified in the
	format string.
	
	This is implemented in the parser so that when the :STRINGLITERAL is
	parsed, the overloaded _chpl_tostring function call is created.
	
	Reimplemented the rename pragma to fire just before code generation.
	This is important if it is used on functions that are overloaded or
	whose names may be mangled by the compiler.  They are renamed after
	all this mangling and can thus match up with functions in the runtime.
	
	I think this could be a more general mechanism for converting any type
	to a string if we let the user overload this _chpl_tostring function
	on their user-defined types.  We may even provide defaults for
	structural types like we do with read and write.  We may want to
	rename this function, something like tostring.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/symtab/: legalizeCNames.cpp 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/arrays/bradc/: enumarray.chpl 
	chapel/test/flowanalysis/newast/: enumarray.chpl 
	                                  formatoutput.chpl 
	chapel/test/trivial/bradc/: formatoutput.chpl 
Added files:
	chapel/test/arrays/bradc/: enumarray.future 
	chapel/test/flowanalysis/newast/: enumarray.future 
	                                  formatoutput.future 
	chapel/test/trivial/bradc/: formatoutput.future 
	chapel/test/trivial/deitz/: test_format_primitives.chpl 
	                            test_format_primitives.good 

---------------------------------------------------------------------------

05/18/05 09:28:12 -- jplevyak

Log message:
	Work on getting generic types along with all the related functions
	instantiated.
	Move to using the map returned by instantiate generics instead of using
	collect_asts().
	Fixed a bug whereby cloning of a FnSymbol didn't put the symbol itself
	into the map.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 

---------------------------------------------------------------------------

05/18/05 09:45:06 -- deitz

Log message:
	Added some new runtime procedure for output of primitive types.  Once write is a normal overloaded function, these will be used and the others will not.
	
	This is an intermediary checkin and has no effect.

Modified files:
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

05/18/05 09:53:51 -- jplevyak

Log message:
	Fix bug where "isRef()" was not being consulted when codegen'ing
	MemberAccesses.
	Removed .future.

Modified files:
	chapel/compiler/AST/: expr.cpp 
Removed files:
	chapel/test/classes/deitz/: test_nested_record_function.future 

---------------------------------------------------------------------------

05/18/05 10:41:23 -- shannon

Log message:
	Standardized the runtime error messages with the addition
	of a few functions in the error.c file:
	
	  printError(char* message)
	  printWarning(char* message)
	  printInternalError(char* message)
	
	Changed the expected output of a bunch of tests to reflect
	the new standard.
	
	Added a test for when the --memmax flag is not given a
	byte value.

Modified files:
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile arg.c chplio.c chplmem.c 
	                     chpltypes.c config.c 
	chapel/test/execflags/shannon/configs/: configVarDash.good 
	                                        configVarDashS.good 
	                                        configVarDashSVarEquals.good 
	                                        configVarFileStringsMismatch.good 
	                                        configVarFileStringsNoEquals.good 
	                                        configVarInvalidBoolean.good 
	                                        configVarInvalidComplex.good 
	                                        configVarInvalidFloat.good 
	                                        configVarInvalidInteger.good 
	                                        configVarInvalidName.good 
	                                        configVarSetNotDeclared.good 
	                                        configVarTwoModsNoneSpecified.good 
	                                        configVarWithSpaces.good 
	chapel/test/memory/shannon/: freedWithoutMalloc.good 
	                             memstatFlag.good memtableFlag.good 
	                             reallocWithoutMalloc.good 
	                             thresholdWithoutTrace.good 
	chapel/test/memory/shannon/outofmemory/: mallocOutOfMemory.good 
	chapel/test/trivial/shannon/: readStringOverflow.good 
	                              readWriteBool.good 
	                              readWriteComplex.good 
	                              readWriteComplexFail1.good 
Added files:
	chapel/runtime/include/: error.h 
	chapel/runtime/src/: error.c 
	chapel/test/memory/shannon/: memmaxBytes.chpl 
	                             memmaxBytes.execopts 
	                             memmaxBytes.good 

---------------------------------------------------------------------------

05/18/05 10:43:51 -- jplevyak

Log message:
	Generic Instantiation of types and member functions when the contructor
	is intantiated works up to codegen.
	Changed the .future to reflect this.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/include/: pattern.h sym.h 
	chapel/compiler/traversals/: updateSymbols.cpp updateSymbols.h 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class1.future 

---------------------------------------------------------------------------

05/18/05 11:34:58 -- jplevyak

Log message:
	Patch cg to handle "print" as __primitive("print", ... ) in lowlevelcodegen.

Modified files:
	chapel/compiler/analysis/: cg.cpp 

---------------------------------------------------------------------------

05/18/05 11:37:01 -- shannon

Log message:
	Fixed a bug that caused a seg fault when the
	--memthreshold flag was used without specifying
	a byte value.

Modified files:
	chapel/runtime/src/: arg.c 

---------------------------------------------------------------------------

05/18/05 12:04:50 -- deitz

Log message:
	Futurized this test.  It creates two identical unions.  These are
	identical structural types.  We need to transform one of them into a
	UserType.

Added files:
	chapel/test/classes/bradc/unions/: twounions.future 

---------------------------------------------------------------------------

05/18/05 12:22:20 -- deitz

Log message:
	This checkin implements write and writeln using overloaded functions.
	
	SpecializeParenOpExprs, though this should eventually be removed, now
	implements the transformation:
	
	  writeln(x, y, z);  ==>  write(x); write(y); write(z); writeln();
	
	The write functions are now free to be treated like functions resolved
	via function overloading.  We implement the primitive write functions
	in the prelude for integer, float, string, boole, complex.
	
	Put in special stopgap write functions for unions, arrays, enums,
	domains, and sequences.  These stopgaps are found at code generation
	and specialized code is generated to handle these objects.  Eventually
	this will be cleaned up and these stopgaps removed.
	
	Removed the call to the pass InsertWriteFns.  These are now inserted
	in BuildClassConstructorsEtc.  This pass may eventually be a candidate
	for making into multiple passes or at least renaming.  Maybe something
	like BuildDefaultFunctionsOnTypes.
	
	This checkin contains a patch from John to create __primitives for
	write, read and tostring in the preludes.
	
	Note that write is overloaded over nilType as well.  This may or may
	not be necessary.  It is currently done so that we can print out the
	value of an object of a class that is never assigned.
	
	With this checkin arrays of floats and complexes of floats now print
	out correctly (.0).
	
	This checkin updates some of Shannon's memtests because the memory
	usage has changed.  Other .goods have changed too.  Various reasons.
	New analysis errors because write is a function, new flowanalysis
	output.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
	chapel/test/: REGRESSIONS 
	chapel/test/arrays/bradc/: domarr.good 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/domains/roxana/: test_index_expr.good 
	                             test_index_expr0.good 
	                             test_index_expr2.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/memory/shannon/: configVarFile.good 
	                             memstatPrint.good 
	                             printFinalMemStat.good 
	chapel/test/trivial/bradc/: defaultinit.good 
	chapel/test/types/complex/bradc/: intfloatelement.good 
	chapel/test/types/complex/deitz/: test_complex_overload.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/18/05 13:27:01 -- deitz

Log message:
	Remembered that type variables in parameter lists to functions should
	be ParamSymbols not TypeSymbols.  I made the parameter to constructors
	for classes with type variables take a TypeSymbol.
	
	For discussion, and I think John wanted to do this, but we should
	probably have another Type subtype that could point to a TypeSymbol
	that is a VariableType.  I just use the TypeSymbol that is in the
	class currently for the constructor, but when there are more
	constructors, we may need multiple constructors with the type
	parameter.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

05/18/05 16:13:14 -- deitz

Log message:
	This checkin implements read using overloaded functions.
	
	Read is still not implemented on structural types.
	
	In this checkin, test/trivial/shannon/readWriteComplexTuple became
	futurized since formatted read is no longer supported.  We should come
	up with a better story for this when we have the time.
	
	There is currently a stopgap for reading enums.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             specializeParenOpExprs.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/trivial/shannon/: readWriteComplexTuple.future 

---------------------------------------------------------------------------

05/18/05 16:58:17 -- jplevyak

Log message:
	Step 1: merge all the code which attempts to resolve call targets
	or modify ParenOps post-analysis into one file.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
Removed files:
	chapel/compiler/traversals/: resolveOverloadedOperators.cpp 
	                             resolveOverloadedOperators.h 

---------------------------------------------------------------------------

05/18/05 16:59:46 -- jplevyak

Log message:
	Update .future to use my username like all the other .futures.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

05/18/05 17:17:26 -- deitz

Log message:
	Removed dead code from my changes that made read, write, and writeln
	overloaded chapel functions.
	
	Removed IOCall Expr and ioCallType enum.
	
	Removed all code that supported these.
	
	Removed Type::...IO... functions.
	
	Removed duplicated runtime code in chplio and chpltypes.  I had copied
	things and made different names to make it easier to make my changes.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h chplenum.h expr.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
	                             verifyASTType.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Removed files:
	chapel/compiler/symtab/: insertWriteFns.cpp insertWriteFns.h 

---------------------------------------------------------------------------

05/19/05 08:57:36 -- shannon

Log message:
	Changed a couple of codegen'd error messages to
	reference the new runtime error message wrapper.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/test/trivial/shannon/: readWriteEnum.good 

---------------------------------------------------------------------------

05/19/05 10:53:05 -- shannon

Log message:
	Added fflush(stdout) to my runtime error
	message wrappers.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/runtime/src/: chplio.c error.c 

---------------------------------------------------------------------------

05/19/05 11:15:29 -- jplevyak

Log message:
	Cleanup of resolveSymbols.
	Removed useOldConstructor flag which was nolonger used.
	Removed Expr::resolved variable which is no longer needed to deal
	with phase ordering problems.  Added more comments and moved
	the "no analysis" code out of line to reduce clutter.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: driver.h expr.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

05/19/05 11:35:01 -- deitz

Log message:
	Refactored the code for building the write and read functions of
	Types.  Types now have methods
	
	  bool Type::hasDefaultWriteFunction
	  Stmt* Type::buildDefaultWriteFunctionBody
	  bool Type::hasDefaultReadFunction
	  Stmt* Type::buildDefaultReadFunctionBody
	
	that say whether the type has a default read or write function and
	create the body of them.  These functions are called in
	BuildClassConstructorsEtc.
	
	Removed
	
	  SymScope::findEnclosingScopeType
	  SymScope::findEnclosingScopeLessType
	
	replacing them with
	
	  SymScope::findModuleScope.
	
	This function searches up the parents until it finds a module scope.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: symscope.h type.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

05/19/05 11:46:55 -- shannon

Log message:
	Forgot to include this with the last checkin.
	Change the order of the test output thanks to
	the fflush().

Modified files:
	chapel/test/trivial/shannon/: readWriteComplex.good 

---------------------------------------------------------------------------

05/19/05 12:03:36 -- deitz

Log message:
	Put in a catch so that if the user defines a read or write function
	for a type that has a default read or write function, the compiler
	will not create its default read or write function.
	
	Added a test case that defines and uses a write function for a record.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_user_write.chpl 
	                            test_record_user_write.good 

---------------------------------------------------------------------------

05/19/05 14:10:17 -- shannon

Log message:
	Added the --memmax runtime option.  "--memmax=<n>"
	simulates "n" bytes of memory available.
	
	For instance:
	
	  > a.out --memstat
	  Final Memory Statistics:  totalMem=1012, maxMem=1047
	
	  > a.out --memmax=1000
	  ***Error: Exceeded memory limit***

Modified files:
	chapel/runtime/src/: chplmem.c 
Added files:
	chapel/test/memory/shannon/: memmaxExceeds.chpl 
	                             memmaxExceeds.execopts 
	                             memmaxExceeds.good 

---------------------------------------------------------------------------

05/19/05 14:55:25 -- shannon

Log message:
	Changed the name of the "--memtable" runtime option
	to "--memtrack".
	
	Changed the execopts file for several tests to reflect
	this, modified the help message, and renamed a test.

Modified files:
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: arg.c chplmem.c 
	chapel/test/execflags/shannon/: help.good 
	chapel/test/memory/shannon/: freedMalloc.execopts 
	                             freedWithoutMalloc.execopts 
	                             printMemTable.execopts 
	                             reallocWithoutMalloc.execopts 
	                             reallocZeroSize.execopts 
Added files:
	chapel/test/memory/shannon/: memtrackFlag.chpl memtrackFlag.good 
Removed files:
	chapel/test/memory/shannon/: memtableFlag.chpl memtableFlag.good 

---------------------------------------------------------------------------

05/19/05 15:18:43 -- shannon

Log message:
	Added the --memstat runtime option to the help
	message.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/execflags/shannon/: help.good 

---------------------------------------------------------------------------

05/19/05 17:25:30 -- deitz

Log message:
	Moved the overload pointer out of FnSymbol and into Symbol.  This is
	because ForwardingSymbol may refer to a FnSymbol and it should be
	overloaded with these.  This lets functions that are already named in
	a module be extended with a set from a used module.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h symscope.h 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         renameOverloadedFunctions.cpp 
	                         symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             verify.cpp 

---------------------------------------------------------------------------

05/20/05 10:28:29 -- shannon

Log message:
	Bug fix for the mallocOutOfMemory test that is failing
	on the linux64 platform.  For some reason this test
	seg faults if the vmemoryuse limit is set to either 16M
	or 32M.  Changed the limit to 24M..

Modified files:
	chapel/test/memory/shannon/outofmemory/: sub_test 

---------------------------------------------------------------------------

05/20/05 10:47:46 -- deitz

Log message:
	Greatly improved line number and filename information in the compiler.
	
	Also, if some of the AST is built after parsing in a traversal, the
	name of the traversal is stored in the BaseAST under the field
	traversalInfo.
	
	I also added a field copyInfo that is not yet used.  This will tell in
	what traversal the ast was copied.  It is a vector of strings since it
	could happen in multiple traversals.
	
	I think the traversalInfo should be a vector of strings too since new
	ast nodes could be constructed based on new ast nodes.
	
	If the developer flag is set, the errors now print out information
	about the traversals where the thing that led to an error was created.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h misc.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

05/20/05 10:48:27 -- deitz

Log message:
	Some .goods changed as a result of my last commit.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/20/05 14:16:32 -- deitz

Log message:
	Known regression:  trivial/deitz/test_format_primitives.chpl
	
	This checkin switches complex to the new class based implementation
	and enables better support for modules.
	
	Made two subdirectories in the new top-level modules directory called
	standard and provided.  These contains standard modules that are
	included in all Chapel programs and provided modules that the Chapel
	programmer can include with a use-statement.  Moved _chpl_complex.chpl
	into modules/standard.
	
	Added hacks to maintain reading complexes, casting complexes to
	strings, and setting complex config vars.
	
	Made ProcessParameters set the noDefaultInit flag of its temps.  This
	is necessary when its temps are of class types and the constructor
	would have need to be resolved by analysis.  I'm not sure why the
	defaultConstructor is not set actually.  This should be examined to
	see if it is necessary or why the defaultConstructor is not right.
	
	Added a "no codegen" pragma for functions that are in the runtime and
	don't need to be codegened.  Of course this is the default with the
	preludes, but for the complex read and tostring functions, they don't
	need to be generated but can't be in the prelude for scoping reasons.
	
	Added a vec of SymScopes to every module to locate where the module
	was used.  This is important because if after the uses are resolved,
	something is added to the top-level of a module, it should be included
	into that module.  This is now so.
	
	Enabled ConstructComplexLiterals to change complex literals into calls
	to the complex constructor.
	
	Removed findModuleScope since getModule is just as good.  Beefed up
	getModule function.
	
	Futurized classes/deitz/test_mycomplex_record since the complex is the
	same.  It dawns on me that complex should be a class so that it is
	nominally typed.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h symscope.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             constructComplexLiterals.cpp 
	                             processParameters.cpp 
	                             resolveModuleUses.cpp 
	                             resolveSymbols.cpp 
	chapel/runtime/include/: chplio.h config.h 
	chapel/runtime/src/: chplio.c config.c 
	chapel/test/: REGRESSIONS 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/memory/shannon/: printFinalMemStat.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
	chapel/test/types/complex/deitz/: test_complex2.chpl 
	                                  test_complex2.good 
Added files:
	chapel/modules/standard/: _chpl_complex.chpl 
Removed files:
	chapel/runtime/include/: _chpl_complex.chpl 

---------------------------------------------------------------------------

05/20/05 15:15:02 -- deitz

Log message:
	Forgot to add future for test_mycomplex_record test.

Added files:
	chapel/test/classes/deitz/: test_mycomplex_record.future 

---------------------------------------------------------------------------

05/20/05 15:22:00 -- deitz

Log message:
	Eliminated a small amount of complex codegening cruft that is no
	longer necessary.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 

---------------------------------------------------------------------------

05/20/05 15:42:19 -- jplevyak

Log message:
	Spent a couple days trying to change a few lines of AST code.
	Kind of like trying to juggle glass balls with clown gloves on.
	Still not working, but I thought I should checkpoint it.
	This goes a long way to using ParamSymbols with MetaType types
	to handle generic type parameters.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/include/: baseAST.h sym.h symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
	                             scopeResolveSymbols.cpp verify.cpp 
	                             verifyASTType.cpp 
	chapel/compiler/vparser/: prelude.v 
	chapel/test/flowanalysis/newast/: multiple_return.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

05/20/05 16:12:44 -- jplevyak

Log message:
	Add "builtin" function +(a : string, b : string).
	Fix bug whereby string and numeric where unordered in the type hiearchy.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

05/20/05 16:31:08 -- deitz

Log message:
	Implemented low-hanging fruit: string concatenation.
	
	Added three test cases.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
Added files:
	chapel/test/types/string/deitz/: test_string_concat1.chpl 
	                                 test_string_concat1.good 
	                                 test_string_concat2.chpl 
	                                 test_string_concat2.good 
	                                 test_string_concat3.chpl 
	                                 test_string_concat3.good 

---------------------------------------------------------------------------

05/20/05 16:48:34 -- jplevyak

Log message:
	Class instantiation by instantiation of the constructor finally seems
	to be working.  Removed 3 .futures.
	
	- Reorder RemoveNamedParameters to be before RemoveTypeVariableActuals.
	
	- Add traversal of the ParamSymbol::typeVarible variable.
	
	- VARIABLE_TYPE things are always "used" ... this may indicate
	  a problem... but the above passes should remove them.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class5.future 
	                                         test_typevar_class1.future 
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_clone_class-1.future 

---------------------------------------------------------------------------

05/22/05 19:52:50 -- jplevyak

Log message:
	Added an option to use a local optimized version of getStuff, getStmt.
	This dramatically reduces CPU consumption for the AST_to_IF1 phase.

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.prediff 
	                               union_type_hierarchy-3-error.prediff 

---------------------------------------------------------------------------

05/23/05 09:06:10 -- deitz

Log message:
	Added a test that instantiates two different classes from the same
	class.  It works.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class2.chpl 
	                                         test_typevar_class2.good 

---------------------------------------------------------------------------

05/23/05 09:09:38 -- deitz

Log message:
	Class instantiation test fails because of writelns at end.  This is
	otherwise the same as test_typevar_class2.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class3.chpl 
	                                         test_typevar_class3.future 
	                                         test_typevar_class3.good 

---------------------------------------------------------------------------

05/23/05 09:38:24 -- deitz

Log message:
	Added four more class instantiation tests.  One is a future.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class4.chpl 
	                                         test_typevar_class4.good 
	                                         test_typevar_class5.chpl 
	                                         test_typevar_class5.good 
	                                         test_typevar_class6.chpl 
	                                         test_typevar_class6.good 
	                                         test_typevar_class7.chpl 
	                                         test_typevar_class7.future 
	                                         test_typevar_class7.good 

---------------------------------------------------------------------------

05/23/05 09:51:19 -- deitz

Log message:
	Two more class instantiation tests that instantiate a class from a
	class.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class8.chpl 
	                                         test_typevar_class8.good 
	                                         test_typevar_class9.chpl 
	                                         test_typevar_class9.good 

---------------------------------------------------------------------------

05/23/05 10:04:23 -- deitz

Log message:
	Some tests that progressively approximate sequence class
	instantiation.  I'm not sure that all of these should work.

Added files:
	chapel/test/types/type_variables/deitz/: test_myseq0.chpl 
	                                         test_myseq0.good 
	                                         test_myseq1.chpl 
	                                         test_myseq1.good 
	                                         test_myseq2.chpl 
	                                         test_myseq2.good 

---------------------------------------------------------------------------

05/23/05 10:06:46 -- deitz

Log message:
	Forgot to add futures for the three tests I just checked in.

Added files:
	chapel/test/types/type_variables/deitz/: test_myseq0.future 
	                                         test_myseq1.future 
	                                         test_myseq2.future 

---------------------------------------------------------------------------

05/23/05 10:14:58 -- jplevyak

Log message:
	Add gc6.5, the latest stable GC.

Added files:
	chapel/third-party/boehmgc/: gc6.5.tar.gz 
	chapel/third-party/boehmgc/gc6.5/: AmigaOS.c BCC_MAKEFILE 
	                                   EMX_MAKEFILE MacOS.c 
	                                   MacProjects.sit.hqx Makefile 
	                                   Makefile.DLLs Makefile.am 
	                                   Makefile.direct Makefile.dj 
	                                   Makefile.in NT_MAKEFILE 
	                                   NT_STATIC_THREADS_MAKEFILE 
	                                   NT_THREADS_MAKEFILE 
	                                   OS2_MAKEFILE PCR-Makefile 
	                                   README.QUICK SMakefile.amiga 
	                                   WCC_MAKEFILE acinclude.m4 
	                                   aclocal.m4 add_gc_prefix.c 
	                                   allchblk.c alloc.c 
	                                   alpha_mach_dep.S backgraph.c 
	                                   blacklst.c callprocs 
	                                   checksums.c config.guess 
	                                   config.sub configure 
	                                   configure.host configure.in 
	                                   darwin_stop_world.c dbg_mlc.c 
	                                   depcomp digimars.mak 
	                                   dyn_load.c finalize.c gc.mak 
	                                   gc_cpp.cc gc_cpp.cpp 
	                                   gc_dlopen.c gcc_support.c 
	                                   gcj_mlc.c gcname.c headers.c 
	                                   hpux_test_and_clear.s 
	                                   ia64_save_regs_in_stack.s 
	                                   if_mach.c if_not_there.c 
	                                   install-sh libtool libtool.m4 
	                                   ltmain.sh mach_dep.c malloc.c 
	                                   mallocx.c mark.c mark_rts.c 
	                                   mips_sgi_mach_dep.s 
	                                   mips_ultrix_mach_dep.s misc.c 
	                                   missing mkinstalldirs 
	                                   new_hblk.c obj_map.c os_dep.c 
	                                   pc_excludes pcr_interface.c 
	                                   powerpc_darwin_mach_dep.s 
	                                   pthread_stop_world.c 
	                                   pthread_support.c ptr_chck.c 
	                                   real_malloc.c reclaim.c 
	                                   rs6000_mach_dep.s setjmp_t.c 
	                                   solaris_pthreads.c 
	                                   solaris_threads.c 
	                                   sparc_mach_dep.S 
	                                   sparc_netbsd_mach_dep.s 
	                                   sparc_sunos4_mach_dep.s 
	                                   specific.c stubborn.c 
	                                   threadlibs.c typd_mlc.c 
	                                   version.h win32_threads.c 
	chapel/third-party/boehmgc/gc6.5/cord/: cordbscs.c cordprnt.c 
	                                        cordtest.c cordxtra.c 
	                                        de.c de_cmds.h 
	                                        de_win.ICO de_win.RC 
	                                        de_win.c de_win.h 
	chapel/third-party/boehmgc/gc6.5/doc/: Makefile Makefile.am 
	                                       Makefile.in README 
	                                       README.DGUX386 README.Mac 
	                                       README.MacOSX README.OS2 
	                                       README.amiga 
	                                       README.arm.cross 
	                                       README.autoconf 
	                                       README.changes 
	                                       README.contributors 
	                                       README.cords 
	                                       README.darwin README.dj 
	                                       README.environment 
	                                       README.ews4800 README.hp 
	                                       README.linux 
	                                       README.macros 
	                                       README.rs6000 README.sgi 
	                                       README.solaris2 
	                                       README.uts README.win32 
	                                       barrett_diagram 
	                                       debugging.html gc.man 
	                                       gcdescr.html 
	                                       gcinterface.html 
	                                       leak.html scale.html 
	                                       simple_example.html 
	                                       tree.html 
	chapel/third-party/boehmgc/gc6.5/include/: Makefile Makefile.am 
	                                           Makefile.in cord.h 
	                                           ec.h gc.h gc_alloc.h 
	                                           gc_allocator.h 
	                                           gc_amiga_redirects.h 
	                                           gc_backptr.h 
	                                           gc_config_macros.h 
	                                           gc_cpp.h gc_gcj.h 
	                                           gc_inl.h gc_inline.h 
	                                           gc_local_alloc.h 
	                                           gc_mark.h 
	                                           gc_pthread_redirects.h 
	                                           gc_typed.h javaxfc.h 
	                                           leak_detector.h 
	                                           new_gc_alloc.h 
	                                           weakpointer.h 
	chapel/third-party/boehmgc/gc6.5/include/private/: cord_pos.h 
	                                                   darwin_semaphore.h 
	                                                   darwin_stop_world.h 
	                                                   dbg_mlc.h 
	                                                   gc_hdrs.h 
	                                                   gc_locks.h 
	                                                   gc_pmark.h 
	                                                   gc_priv.h 
	                                                   gcconfig.h 
	                                                   pthread_stop_world.h 
	                                                   pthread_support.h 
	                                                   solaris_threads.h 
	                                                   specific.h 

---------------------------------------------------------------------------

05/23/05 10:49:34 -- jplevyak

Log message:
	Switch over to GC 6.5
	Found a bug where I wasn't using class XXX : private gc which was
	causing GC to overwrite an array.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

05/23/05 10:51:09 -- jplevyak

Log message:
	remove two futures fixed by last checkin.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class3.future 
	                                         test_typevar_class7.future 

---------------------------------------------------------------------------

05/23/05 14:27:51 -- deitz

Log message:
	Instantiating classes now doesn't just instantiate methods but rather
	all functions that use the type variable that is being instantiated.
	
	This seems to temporarily break
	  types/type_variables/deitz/test_typevar_class9.chpl

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/symtab/: collectFunctions.cpp collectFunctions.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: findTypeVariables.cpp 
	                             findTypeVariables.h 

---------------------------------------------------------------------------

05/23/05 14:30:10 -- deitz

Log message:
	Forgot to comment out some printfs I put in before that last checkin.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/23/05 14:39:50 -- jplevyak

Log message:
	remove unnecessary Makefiles which will be overwritten by "configure"

Removed files:
	chapel/third-party/boehmgc/gc6.5/: Makefile 
	chapel/third-party/boehmgc/gc6.5/doc/: Makefile 
	chapel/third-party/boehmgc/gc6.5/include/: Makefile 

---------------------------------------------------------------------------

05/23/05 14:40:34 -- jplevyak

Log message:
	move ast_get_children() out of analysis.cpp and into baseAST.cpp

Modified files:
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/AST/: baseAST.cpp 

---------------------------------------------------------------------------

05/23/05 15:25:34 -- jplevyak

Log message:
	Remove get_ast_children()

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/23/05 16:49:04 -- deitz

Log message:
	Futurized test pending sum types.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class9.future 

---------------------------------------------------------------------------

05/24/05 08:45:46 -- deitz

Log message:
	Cleared Vecs used in instantiate_generic in an attempt to fix valgrind
	regressions.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/24/05 10:12:47 -- jplevyak

Log message:
	Implemented Sum types.
	Fixed a bug whereby we were passing pointers to pointers to functions taking
	reference (class) types.
	Handle -1 line numbers in some case to mean "no line number information".
	This used to be signaled by 0... may more places need to be updated.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: clone.h type.h 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/24/05 10:48:53 -- deitz

Log message:
	Fixed a bug in type cloning in which an infinite recursion would be
	encountered if the type was recursive.
	
	Reworked the overloading code so that anything can be overloaded.
	ScopeResolveSymbols now checks to make sure only functions are
	overloaded.  After this, the compiler can overload other things.  This
	is useful especially for type cloning.  I think we can also clean up
	the getter so that it is just a part of overloading, overloaded with
	the field.
	
	In ApplyThisParameters, this is no longer applied to types.
	
	Made some superficial changes to sequence handling.  This will all
	disappear soon.
	
	Modified the error for redefinition of variables to print out all
	redefinitions not just one.
	
	Removed futures for test_myseq0,1,2.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             scopeResolveSymbols.cpp 
	chapel/runtime/include/: seq.h 
	chapel/test/trivial/bradc/: redefinevar.good 
	chapel/test/types/type_variables/deitz/: test_myseq2.chpl 
	                                         test_myseq2.good 
Removed files:
	chapel/test/types/type_variables/deitz/: test_myseq0.future 
	                                         test_myseq1.future 
	                                         test_myseq2.future 

---------------------------------------------------------------------------

05/24/05 11:03:32 -- jplevyak

Log message:
	Update some of the futures.

Modified files:
	chapel/test/flowanalysis/newast/: enumarray.good 
	                                  formatoutput.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
Removed files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.future 
	                               sum_type-1.future 
	                               union_type_hierarchy-2.future 
	chapel/test/flowanalysis/newast/: sum_type-1.future 
	                                  sum_type-2.future 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class9.future 

---------------------------------------------------------------------------

05/24/05 11:18:19 -- jplevyak

Log message:
	Recognize -1 as a bogus line number in a couple more places.

Modified files:
	chapel/compiler/analysis/: clone.cpp fa.cpp 
	chapel/compiler/backend/: dump.cpp 
	chapel/test/flowanalysis/newast/: domarr.good sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

05/24/05 12:15:57 -- deitz

Log message:
	Improved ScopeResolveSymbols to handle more complex unresolved types.
	For example, given a class foo that contains a type t, foo.t is now an
	unresolved type.  Modified UnresolvedType so that it now contains a
	Vec<char*>* which contains the names for looking up that type.  For
	foo.t, the strings foo and t would be stored in the UnresolvedType in
	that order.
	
	Potential concern:
	
	  class foo {
	    var x : integer = 12;
	    type t : integer = x;
	  }
	
	  var k : foo.t;
	
	The problem is that the default value of the type in the class is
	dependent on an instance of that class.  We must disallow foo.t in
	this case.
	
	Related, are we supporting something like f.t if f is an instance of
	foo.  The problem with this is that we could not easily resolve the
	type symbol in ScopeResolveSymbols, i.e., before analysis.  I assume
	were not allowing something like that.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_type_in_class3.chpl 
	                            test_type_in_class3.good 

---------------------------------------------------------------------------

05/24/05 12:38:48 -- deitz

Log message:
	Added code to mangle '#' in function cname when it is overloaded.
	
	Added three test cases for a full-blown sequence class.
	
	The second and third fail.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_myseq_record.chpl 
	                            test_myseq_record.good 
	                            test_myseq_record2.chpl 
	                            test_myseq_record2.future 
	                            test_myseq_record2.good 
	                            test_myseq_record3.chpl 
	                            test_myseq_record3.future 
	                            test_myseq_record3.good 

---------------------------------------------------------------------------

05/24/05 13:08:29 -- deitz

Log message:
	Added record type variable test with future.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.chpl 
	                                         test_typevar_record1.future 
	                                         test_typevar_record1.good 

---------------------------------------------------------------------------

05/24/05 14:03:07 -- jplevyak

Log message:
	Fix assert in analysis.cpp.
	test_myseq_record2.chpl now looks to be in a infinite loop, but it
	isn't.  Instead a single call to FnSymbol::instantiate_generic is taking
	10s of seconds.  The function is very small.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/24/05 14:09:12 -- deitz

Log message:
	Added high-level support for conditional expressions of the form
	
	  (if expr then expr else expr)
	
	There is no support yet for omitting the else in creation of a
	sequence.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/trivial/deitz/: test_cond_expr1.chpl 
	                            test_cond_expr1.future 
	                            test_cond_expr1.good 

---------------------------------------------------------------------------

05/24/05 14:41:24 -- jplevyak

Log message:
	Add support for conditional expressions.
	Renamed CondExpr::boolExpr to CondExpr::condExpr to match CondStmt.
	I guess I could have gone the other direction and named it boolExpr, but
	in any case I think CondExpr and StmtExpr should have a similar name
	for the conditional expression for the sake of uniformity.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
Removed files:
	chapel/test/trivial/deitz/: test_cond_expr1.future 

---------------------------------------------------------------------------

05/24/05 17:00:19 -- jplevyak

Log message:
	Fixup comments in clone.cpp and a bug in error reporting in fa.cpp.

Modified files:
	chapel/compiler/analysis/: clone.cpp fa.cpp 

---------------------------------------------------------------------------

05/24/05 17:14:26 -- jplevyak

Log message:
	Fixed issue with treating a set like a vector (need to check if elements
	are NULL).

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

05/24/05 17:20:07 -- deitz

Log message:
	Added new standard module _chpl_seq.chpl.
	
	I named the sequence class seq2 instead of seq for the time being.
	
	It is not included or parsed unless analysis is run (disabled for
	--noanalysis).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

05/25/05 08:54:03 -- deitz

Log message:
	Added _chpl_seq module.  It was missing which caused full regressions.
	Sorry about that.
	
	I'm hoping it is working now.  I blew away my copy after the OS
	upgrade and so just tried to recreate it, but can't test because I'm
	having trouble building the compiler.

Modified files:
	chapel/third-party/boehmgc/gc6.5/: libtool 
Added files:
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

05/25/05 09:15:19 -- deitz

Log message:
	Made some changes to the _chpl_seq module and added a test case that
	uses it.  Note that the sequence is called seq2 until I work it in.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
Added files:
	chapel/test/classes/deitz/: test_seq2.chpl test_seq2.good 

---------------------------------------------------------------------------

05/25/05 10:57:11 -- bradc

Log message:
	Set the following environment settings to try and
	make start_test a bit more robust:
	
	setenv LC_ALL C
	setenv LANG en_US
	limit stacksize 8192k

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/25/05 12:31:16 -- deitz

Log message:
	Changed names around in _chpl_seq.chpl to match names from before I
	lost it.  This removes a few current regressions.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

05/25/05 13:52:10 -- deitz

Log message:
	Implemented sequences using the seq2 class in the _chpl_seq standard
	module.
	
	Sequence literals are dealt with before analysis, for now.  So they
	can only be created if the type of the elements are known.
	
	Sequence class types are created in InsertAnonymousTypes.
	
	Added typeInfo to symbols which should be used to get the type.  This
	handles ForwardingSymbols from module uses better.
	
	Removed noanalysis sequence tests and some of the support code.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertTemps.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
Removed files:
	chapel/test/types/seq/deitz/noanalysis/: COMPOPTS 
	                                         test_array_of_seq1.chpl 
	                                         test_array_of_seq1.good 
	                                         test_overload_noanalysis1.chpl 
	                                         test_overload_noanalysis1.good 
	                                         test_seq1.chpl 
	                                         test_seq1.good 
	                                         test_seq1a.chpl 
	                                         test_seq1a.good 
	                                         test_seq1b.chpl 
	                                         test_seq1b.good 
	                                         test_seq1c.chpl 
	                                         test_seq1c.good 
	                                         test_seq2.chpl 
	                                         test_seq2.good 
	                                         test_seq3.chpl 
	                                         test_seq3.good 
	                                         test_seq4.chpl 
	                                         test_seq4.good 
	                                         test_seq5.chpl 
	                                         test_seq5.good 
	                                         test_seq6.chpl 
	                                         test_seq6.good 
	                                         test_seq7.chpl 
	                                         test_seq7.good 
	                                         test_seq8.chpl 
	                                         test_seq8.good 
	                                         test_seq8b.chpl 
	                                         test_seq8b.good 

---------------------------------------------------------------------------

05/25/05 13:54:30 -- deitz

Log message:
	Removed futures for some working sequence tests.

Removed files:
	chapel/test/types/seq/deitz/: test_seq1.future test_seq1a.future 
	                              test_seq1b.future 
	                              test_seq1c.future test_seq2.future 
	                              test_seq5.future 

---------------------------------------------------------------------------

05/25/05 13:56:57 -- deitz

Log message:
	Removed future for complex arithmetic test.

Removed files:
	chapel/test/types/complex/deitz/: test_complex2.future 

---------------------------------------------------------------------------

05/25/05 16:08:47 -- jplevyak

Log message:
	Added ParamSymbol::isGeneric.
	Fixed potential bug and perfmance issies in instantiate_add_subs.
	Fixed several issues in generic instantiation which were causing
	  excessive instantiation in some test cases.
	Optimized updateSymbols to take advantage of the hash nature of Map(s).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             updateSymbols.cpp 

---------------------------------------------------------------------------

05/25/05 16:47:06 -- deitz

Log message:
	Implemented overloading of parentheses with 'this' method.
	
	Added a class instantiation test that has a 'this' method.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: test_datablock.chpl 
	                                         test_datablock.good 

---------------------------------------------------------------------------

05/26/05 13:49:43 -- deitz

Log message:
	Implemented overloading of parentheses with 'set' method.  John is
	working on changing this to the 'this' method.  The code I wrote will
	be useful when that is done too, though the names may have changed.  I
	wrote this stopgap so I could continue experimenting with the array
	implementation.
	
	Added a test case to exercise it.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: test_datablock2.chpl 
	                                         test_datablock2.good 

---------------------------------------------------------------------------

05/26/05 15:18:11 -- shannon

Log message:
	Fixed a bug in the confirm() function.  This function prints
	an error if the memory address passed to it is NULL.  However,
	I was using _glom_strings() to create the error message which
	makes a call to realloc.  Instead of attempting to get more
	memory from a possibly depleted heap I now use stack memory
	for the message.

Modified files:
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

05/26/05 15:25:09 -- shannon

Log message:
	Added a few .cvsignore files that were missed on the
	move from gc6.3 to gc6.5.  I also deleted the libtool
	file which is created in the build.

Added files:
	chapel/third-party/boehmgc/gc6.5/: .cvsignore 
	chapel/third-party/boehmgc/gc6.5/doc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.5/include/: .cvsignore 
Removed files:
	chapel/third-party/boehmgc/gc6.5/: libtool 

---------------------------------------------------------------------------

05/26/05 15:43:27 -- deitz

Log message:
	Added functions hasPragma and addPragma to symbol and stmt to make it
	easier to check for pragmas, and add new ones.
	
	Added a _data class in the prelude. (We'll need to change the name or
	something so the user doesn't grab it.) This class acts as a
	one-dimensional C array which I'll use to implement our arrays.
	
	It is useless until I add an allocate function or a constructor though.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h symbol.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/runtime/include/: array.h 
	chapel/test/flowanalysis/newast/: sum_type-1.good 

---------------------------------------------------------------------------

05/26/05 17:05:46 -- bradc

Log message:
	Fixed bugs and what seem to be redundancies in
	get_ast_children.  A label was  being extracted
	from all expressions whether they were goto
	expressions or not.  Lists were being extracted
	as though they were single elements.  Back
	pointers were being extracted, which seem to
	be unnecessary.
	
	Editorial: while the speed of the old GetStuff
	means of getting children may have been lacking,
	the maintainability of the current
	get_ast_children() seems fairly fragile --
	especially its reliance on static casts.  For
	example, in the case of a label field being
	extracted for all expressions, it resulted in
	completely random fields being added to the
	BaseAST vector, such that when later passes
	tripped over them, it was quite difficult to
	tell where they had been introduced.  For
	example, with some rearrangement of the
	fields (in my next checkin), a list of pragmas
	was being inserted into the list, even though
	a grep of places in the code where "pragma" is
	referenced indicated that this shouldn't have
	been possible.  In the past we've opted for
	maintainability over performance -- I would've
	preferred to see this performance problem be
	addressed in a safer manner, and one that
	didn't introduce a new category of thing that
	has to be maintained when new fields are
	added (especially one that will force them to
	be the type it expects them to be, even if
	it doesn't make sense).

Modified files:
	chapel/compiler/AST/: baseAST.cpp 

---------------------------------------------------------------------------

05/27/05 10:57:02 -- jplevyak

Log message:
	Implemented "var" returning functions as settters.
	Handled CondExpr so that you can return cond expressions.
	Put in 2 test cases to test them and returning conditional expressions.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 
	chapel/compiler/traversals/: Makefile.share resolveSymbols.cpp 
	chapel/test/flowanalysis/newast/: domarr.good formatoutput.good 
	                                  protoast_test.good 
	                                  sum_type-1.good 
	chapel/test/types/type_variables/deitz/: test_datablock2.chpl 
Added files:
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             buildLValueFunctions.h 
	chapel/test/functions/jplevyak/: var_return-1.chpl 
	                                 var_return-1.good 
	                                 var_return-2.chpl 
	                                 var_return-2.good 

---------------------------------------------------------------------------

05/27/05 11:28:58 -- deitz

Log message:
	Changed my _data class in the prelude to use the new =this function.

Modified files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

05/27/05 14:14:39 -- shannon

Log message:
	Fixed a couple of memstat tests that were failing
	on the linux64 platform due to the difference in
	size of configVars by resetting the memstat counters
	before the start of _chpl_main().

Modified files:
	chapel/runtime/src/: main.c 
	chapel/test/memory/shannon/: memmaxExceeds.execopts 
	                             memstatPrint.good 
	                             printFinalMemStat.good 

---------------------------------------------------------------------------

05/27/05 15:26:27 -- jplevyak

Log message:
	The problem is that the chpl_complex.chpl module only has one version
	of _chpl_tostring which only handles complex, as a result resolveSymbols
	thinks it is not overloaded and subs in the FnSymbol which forces analysis
	to use only that one version (which doesn't apply) for all other uses of _chpl_tostring....
	
	Since this has to do with module resolution which is a new feature and I
	wanted to record these observations I am making this a future.

Added files:
	chapel/test/trivial/deitz/: test_format_primitives.future 

---------------------------------------------------------------------------

05/27/05 16:08:28 -- bradc

Log message:
	This is a big check-in to remove our ad-hoc lists from the compiler
	and replace them with a templatized List class.  Most of the work
	here was in changing the client code from using the ad-hoc lists
	to using a list class.  More on the details of the specific list
	class in a sec.  First, two minor changes that go along with this
	and may be helpful for others debugging as it was for mine:
	
	(1) made the --gdb flag set a breakpoint so that if the compiler is
	    exited with a nonzero status code, it will stop before exiting.
	    When INT_FATAL() or other erroneous ways of exiting the program
	    are used, this allows one to get a stacktrace of where the error
	    occurred without setting a breakpoint manually.  While this
	    seems like a minor advantage, it turns out to be one of the easiest
	    ways to debug problems in templatized code since setting breakpoints
	    in templatized code is somewhat crufty.  The only negative effect
	    that I found with this is that breakpoints you set by hand will start
	    being numbered at 2 rather than 1.
	
	(2) added a no-op call named "checkid" that is called for every
	    BaseAST that is constructed.  This is beneficial for answering
	    the question, "I wonder when node #n is created in the AST?"
	    since it is also difficult to set breakpoints on constructors.
	    Thus, one would now debug this case using: "break checkid"
	    followed by "cond <bkptnum> (id == n)" and rerunning.  This
	    makes it trivial to locate the creation of the AST (if Steve's
	    recent backtrace info wasn't help enough).
	
	About ALists
	============
	
	Created a new List class called AList which is templatized via a
	class that has next and previous pointers.  This decision was made
	so that items (like statements) could remove themselves from lists
	without having a handle on the list itself.  Sentinel nodes are
	created for the list head and tail for ease of implementation and
	so that all list members can be treated consistently.  This
	causes the class being used to instantiate the list to require a
	0-argument constructor.
	
	The name AList is meant to signify "ASTList" or "a list".
	To a large extent, it's a placeholder name that we can replace
	with another name or with another list implementation if people
	want to.  Changing it from here should be simpler since the
	distinction between lists and elements has been made manifest in
	the rest of the compiler now.
	
	ALists can be constructed using a 0-argument constructor (which
	creates an empty AList containing only the sentinel nodes) or
	by passing in a single instance of the class being used to
	instantiate the AList, in which case it will be the sole element
	of the list.  A warning will be generated if the element that's
	being passed in is already a member of another list (that is,
	if its next or prev pointers are non-NULL).
	
	To add to an AList, the current methods are insert() (which puts
	the new node at the front of the list), and add() (which puts the
	new node at the end of the list).  Each of these can also take a
	whole list which will result in the argument list being emptied
	out -- as we discussed in this week's meeting, the decision to
	allow nodes to be a member of only one node was deliberate -- use
	the copy() methods in order to create a duplicate list for
	concatenation).
	
	The suggested way to traverse a list is using the first() and next()
	methods, which return the first element in the list and subsequent
	elements, respectively.  When the end of the list is reached,
	next() returns NULL.  If the list is empty, first() returns NULL.
	This implementation uses a cursor embedded in the list, so a single
	list should not be iterated over using first() and next() twice
	within a single dynamic range.  There is a check to ensure that
	this does not occur, but it currently is off by default (because
	I currently use first() in the compiler for things other than
	iteration, which I shouldn't do).  Set the debugNestedTraversals
	flag to turn it on.  A good TODO item is to get this turned on
	using the only() and representative() calls (described below).
	Another would be to wrap the first() and next() calls in a for-loop
	style macro for convenience.
	
	The only() call is used in cases where there is an assumption being
	made that there is only one item in a list (these were typically
	embedded in the old code by accessing the first element in a field
	that represented a list without looking at the rest of the elements).
	It throws an error if there is more than one element in the list.
	Arguably, code should be rewritten to try and avoid the use of
	only()
	
	The representative() call is used in cases where the code just
	accessed the first elemente in a list but the list had more than
	one element.  Arguably, these should be rewritten to try and
	avoid the use of representative(), though there may be cases
	in which the list is known to be homogenous with respect to
	a property, in which case this would be OK.
	
	Elements may be removed from an AList using remove() which pulls
	the element from the list.  Currently there is no check to ensure
	that the element is in the list, for efficiency.  remove() may
	be called directly on the element itself if it is a subclass of
	ILink (or otherwise implements a removal that updates its next
	and prev links to point to one another).
	
	Elements may also be popped from the front of an AList() using
	popHead(), because the code did this in a number of places
	manually with the old ad hoc lists.
	
	Implemented variations of insertBefore() and insertAfter() to
	have the same semantics they do for other AST nodes -- implying
	a fixup should occur after the insertion.  The new list
	structure should allow this code to be cleaned up significantly
	so that different calls don't need to be made, but that's a
	separate checkin (and one likely to be undertaken by Steve).
	
	Lists support print(), printDef(), codegen(), codegenDef(),
	and traversal() methods, which behave like their corresponding
	AST calls, with the exception that the print and codegen
	routines take a separator string, as the printList() and
	codegenList() routines did previously.
	
	getElements() converts the AList into a vector, as
	getLinkElements did previously.  filter() filters a list into
	two different lists, as supported on ILinks previously.
	
	The size of an AList may be checked with isEmpty() (which is O(1)),
	or length() (which is O(n).
	
	As a policy decision, any AST node fields which can be lists
	I store as empty lists when they're empty rather than NULL
	to avoid having to special case NULL lists elsewhere in the
	code.  The one exception to this are pragma lists, due to
	their pervasiveness.  We may want to rethink this over time
	(in either direction).
	
	The perceived advantages of introducing ALists are:
	
	(1) cleaner documentation of which AST nodes are and are not
	    lists
	(2) more structured access to those lists, allowing for the
	    list implementation to be changed without touching as
	    much code as this change does
	(3) faster insertion at the ends of lists than our old scheme
	(4) more consistent access to list elements due to the sentinel
	    elements at the head and tail; allows list elements to be
	    manipulated without the list being directly involved.
	(5) removal of distinction between xxx() and xxxList() routines
	    that we used to have.  Now, call xxx() on any BaseAST node.
	
	A number of TODOs still which I have listed elsewhere if anyone
	wants to see them, and which Steve and I code reviewed.
	
	Here are some related changes:
	
	* changed all passes and traversals to take a ModuleList (an
	  AList<ModuleSymbol>) rather than a ModuleList* representing
	  a list.  Named this class ModuleList to avoid a circular
	  dependence between alist.h, traversal.h, and pass.h.  This
	  should also make the passes/traversals more resilient to
	  any future changes that may need to occur.
	
	* made AList and Pragma be subclasses of BaseAST.  AList so
	  that it could be passed to replace().  Both so that their
	  creation location could more easily be debugged.
	
	* killed list-specific functions copyList/copyListInternal,
	  printList/codegenList, traverseList/traverseDefList, TRAVERSE_LS
	
	* got rid of link-related functions that acted as list functions
	  such as append, nextLink, filter, head, tail, length, get.
	
	* made some constructors of basic types be 0-argument constructors,
	  as the AList class needs to create instances of such classes for
	  its sentinel nodes
	
	* removed some traversals over ad-hoc lists of symbols per DefExpr,
	  because we have only had one Symbol per DefExpr for some time now
	
	* replaced most constructors that took an ad-hoc list with constructors
	  that take an AList<>.  In some cases, kept the old constructors, but
	  these will reject nodes that are already part of a list in the call
	  to the AList constructor that's made.  Others accepting a singleton
	  should be added as a TODO item for convenience (e.g., we create a
	  lot of BlockStmts with just a single initial statement; same with
	  ParenOpExpr and DefExpr).

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      link.cpp pragma.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h baseAST.h expr.h link.h 
	                          pragma.h stmt.h symbol.h symscope.h 
	                          symtab.h type.h yy.h 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: buildBinary.cpp buildBinary.h 
	                         codegen.cpp codegen.h 
	                         createEntryPoint.cpp createEntryPoint.h 
	                         filesToAST.cpp filesToAST.h pass.cpp 
	                         pass.h printProgram.cpp printProgram.h 
	                         renameCSymbols.cpp renameCSymbols.h 
	                         runAnalysis.cpp runAnalysis.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         legalizeCNames.cpp printSymtab.cpp 
	                         printSymtab.h removeDeadSymbols.cpp 
	                         resolveTypes.cpp symlink.cpp symlink.h 
	                         symscope.cpp symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             checkIDs.cpp checkIDs.h 
	                             clearTypes.cpp 
	                             constructComplexLiterals.cpp 
	                             eliminateReturns.cpp 
	                             expandClassWiths.cpp 
	                             expandSeqExprAssignments.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             fixup.h insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	                             insertFunctionTemps.cpp 
	                             insertIndexType.cpp insertTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             omitForNoAnalysis.h 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             removeSeqOperations.cpp 
	                             resolveModuleUses.cpp 
	                             resolveModuleUses.h 
	                             resolveSymbols.cpp 
	                             scopeResolveGotos.cpp 
	                             scopeResolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             testGetStuff.cpp 
	                             transformLetExprs.cpp 
	                             transformLetExprs.h traversal.cpp 
	                             traversal.h verify.cpp verify.h 
	                             verifyASTType.cpp view.cpp view.h 
	chapel/compiler/util/: files.cpp misc.cpp 
	chapel/test/compflags/bradc/gdbddash/: PREDIFF 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	./: log.txt 
	chapel/compiler/AST/: alist.cpp moduleList.cpp 
	chapel/compiler/include/: alist.h moduleList.h 

---------------------------------------------------------------------------

05/27/05 16:54:53 -- jplevyak

Log message:
	Fix valgrind problem: off by one in loop was inserting uninitialized
	value into an array.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

05/27/05 17:07:49 -- bradc

Log message:
	Converted FnSymbol::formals from an AList<Symbol>
	to AList<ParamSymbol>, thanks to the changes made
	by John and Steve to make all parameters ParamSymbols
	for consistency (but which I couldn't imagine
	undertaking along with the rest of the list changes :).
	Removes a number of dynamic casts from places that were
	iterating over a parameter list.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             findUnknownTypes.cpp 
	                             insertThisParameters.cpp 
	                             processParameters.cpp 

---------------------------------------------------------------------------

05/30/05 19:56:17 -- jplevyak

Log message:
	Fix uninitialized variable which was causing valgrind failures.
	(the "found" variable was not initialised to "false").

Modified files:
	chapel/compiler/traversals/: findTypeVariables.cpp 

---------------------------------------------------------------------------

05/31/05 09:22:00 -- deitz

Log message:
	Implemented non-analysis support for user-defined default constructors.
	
	Added constructor keyword to grammar.  Added ability to specify a
	user-defined default constructor by calling the constructor
	'initialize' though I would like to change it to be the class name
	instead.
	
	The constructor is modifed in InsertThisParameters where 'this' is
	declared at the top of the constructor and returned at the end.  The
	normal default constructor is not built for a class if the user
	already specified one.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
	                             resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
Added files:
	chapel/test/classes/deitz/: test_class_construct1.chpl 
	                            test_class_construct1.future 
	                            test_class_construct1.good 

---------------------------------------------------------------------------

05/31/05 09:56:23 -- deitz

Log message:
	Fixed test_format_primitives.
	
	The problem was that the forwarding symbol from a module was resolved
	in ScopeResolveSymbols even though the forwarding symbol was for a
	function.  Functions are not resolved until analysis so now the symbol
	is left unresolved.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
Removed files:
	chapel/test/trivial/deitz/: test_format_primitives.future 

---------------------------------------------------------------------------

05/31/05 10:11:08 -- deitz

Log message:
	Removed four passing futures which now work because of general
	improvements to I/O and type handling.

Removed files:
	chapel/test/arrays/deitz/: test_array_float1.future 
	chapel/test/classes/deitz/: test_class_in_usertype.future 
	chapel/test/types/typedefs/bradc/: localType.future 
	                                   localType2.future 

---------------------------------------------------------------------------

05/31/05 11:12:22 -- deitz

Log message:
	Made the line numbers for the entry point and call to initialization
	functions -1 so that analysis errors (and eventually call chains in
	general) will not put these confusing line numbers in.

Modified files:
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/31/05 11:16:43 -- deitz

Log message:
	Made it so that constructors are not marked as primary or secondary
	methods.
	
	Removed future for first user-defined default constructor test.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 
Removed files:
	chapel/test/classes/deitz/: test_class_construct1.future 

---------------------------------------------------------------------------

05/31/05 11:24:08 -- bradc

Log message:
	Updated the regressions file a bit.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/31/05 12:10:15 -- jplevyak

Log message:
	When a function is unresolved, the compiler now prints out an error message
	which includes a list of all the candidate functions.  Syntax looks
	a bit (more) like gcc.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/: dispatch3.good 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/parsing/jplevyak/: module.good 

---------------------------------------------------------------------------

05/31/05 13:24:12 -- deitz

Log message:
	The type variable is no longer extracted from the list of types in a
	class when that class is instantiated.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/31/05 13:28:12 -- bradc

Log message:
	Small change to get the setenv of LANG working
	on solaris without complaining about not being
	able to set locale correctly.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/31/05 16:20:32 -- shannon

Log message:
	Fixed the printMemTable test that was failing
	on the linux64 platform due to the difference
	in size of configVars by adding an argument
	to the print function to limit the size of
	what gets printed.

Modified files:
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: chplmem.c chplmem_tests.c 
	chapel/test/memory/shannon/: memtrackFlag.good 
	                             printMemTable.good 

---------------------------------------------------------------------------

05/31/05 16:38:07 -- deitz

Log message:
	Linked type variable in user-defined constructor to type variable in
	class (by name).
	
	Added ability to allocate memory to special _data class (that
	implements C array) in prelude using alloc method.
	
	Added two new tests to test these additions.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: insertThisParameters.cpp 
	                             removeNamedParameters.cpp 
	chapel/runtime/include/: array.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/types/type_variables/deitz/: test_datablock3.chpl 
	                                         test_datablock3.good 
	                                         test_instantiate_construct1.chpl 
	                                         test_instantiate_construct1.good 

---------------------------------------------------------------------------

05/31/05 17:21:19 -- bradc

Log message:
	Changed ForallExpr::indices from a list of Expr to
	a list of DefExpr.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

05/31/05 17:23:57 -- deitz

Log message:
	Moved extract method to BaseAST.  Rearranged replaceChild and
	callReplaceChild to support this move.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h 

---------------------------------------------------------------------------

06/01/05 08:55:13 -- jplevyak

Log message:
	Introduce intermediate in DefExpr to handle case where the result
	is a global variable (analysis uses the result variable, which is
	content sensitive, to stand for the particular context sensitive
	function call, so it requires it to be local).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

06/01/05 08:58:20 -- jplevyak

Log message:
	Patch some bit of tempermentalness the log.i results.

Modified files:
	chapel/test/flowanalysis/newast/: sum_type-1.good 

---------------------------------------------------------------------------

06/01/05 10:10:25 -- bradc

Log message:
	Removed some dynamic casts that should've gone in
	with my last check-in.

Modified files:
	chapel/compiler/traversals/: insertVariableInitializations.cpp 

---------------------------------------------------------------------------

06/01/05 10:14:12 -- deitz

Log message:
	Combined functionality of remove and extract.  The new function is
	called remove.

Modified files:
	chapel/compiler/AST/: baseAST.cpp link.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h baseAST.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         postAnalysisCleanup.cpp 
	                         removeDeadSymbols.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             destructureTupleAssignments.cpp 
	                             expandSeqExprAssignments.cpp 
	                             findUnknownTypes.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

06/01/05 11:32:32 -- deitz

Log message:
	Changed the AList<SymLink>* of syms in SymScope to a Vec<Symbol*>.
	This simplifies the code base so we can specialize ILink and AList to
	BaseAST further.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 

---------------------------------------------------------------------------

06/01/05 11:57:15 -- deitz

Log message:
	Removed dead SymLink code.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: Makefile.share symscope.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 
Removed files:
	chapel/compiler/symtab/: symlink.cpp symlink.h 

---------------------------------------------------------------------------

06/01/05 13:05:30 -- jplevyak

Log message:
	Support for the "where" clause syntax as part of a function and
	as a general decl (so that it can be included in a class).
	Added 2 new binary operators: BINOP_SUBTYPE ( : ) and BINOP_NOTSUBTYPE( !: ).
	Aded %left declartions for TCOLON TNOTCOLON and TCOMMA and TDOT.
	The "where" clauses currently generate Exprs, but they are not
	stored via Symboltable::xxxxDef.

Modified files:
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/flowanalysis/newast/: sum_type-2.good 
Added files:
	chapel/test/types/type_variables/jplevyak/: where-1.chpl 
	                                            where-1.future 
	                                            where-1.good 

---------------------------------------------------------------------------

06/01/05 13:32:33 -- deitz

Log message:
	Moved check that parameters are initialized into CheckSemantics pass
	which follows analysis.  Updated test to show line number information.
	
	Added parameter field instantiation test.  This class should be
	instantiated because of the parameter in it.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	chapel/test/trivial/roxana/: test_param_decl3.good 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_class1.chpl 
	                                         test_paramvar_class1.future 
	                                         test_paramvar_class1.good 

---------------------------------------------------------------------------

06/01/05 13:52:26 -- deitz

Log message:
	Fixed filename in error message in this test.

Modified files:
	chapel/test/trivial/roxana/: test_param_decl3.good 

---------------------------------------------------------------------------

06/01/05 15:13:28 -- jplevyak

Log message:
	Add 2 new "where" constraint types: an anonymous class declaration, and
	an application (ParenOp) which can be used to instantiate other types.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

06/01/05 17:34:40 -- bradc

Log message:
	Captured code from David's SSCA2 whitepaper
	into a .chpl file, primped it up slightly
	and checked it in as ssca2.orig.chpl for
	reference.  ssca2.parses.chpl comments out
	things that don't currently parse.
	
	Checking these in so that we can spend some
	time rewriting them to use fewer features
	over time, or to more suit our style, as
	we move toward MS5 at the end of July.
	
	These are currently not tested.

Added files:
	chapel/test/ssca/ssca2/: NOTEST ssca2.orig.chpl 
	                         ssca2.parses.chpl 

---------------------------------------------------------------------------

06/02/05 11:14:38 -- jplevyak

Log message:
	Changed names of setters to =varname to match the =functionname
	used for lvalue functions.  This prevents a potential name space conflict.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

06/02/05 13:41:26 -- bradc

Log message:
	NOTE: developers who use the log files from
	the testing system a lot will want to check
	the second paragraph below.
	
	This is another change to try and get the testing
	system working on Suns well again.  This time I
	went for the hacky-er approach: I no longer set
	LANG or LC_ALL when we're running on the Suns (I
	couldn't find a setting that didn't cause it
	to complain during our system() calls at compile
	time for all programs).
	
	Also in this change: the default logfile name
	created by the test system is now
	$user.platform.log rather than just $user.log
	so that the testing system may be run on two
	platforms simultaneously (for example, I test
	Sun and Linux simultaneously, and could
	imagine doing the same for netbsd and linux64
	on John's system).

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/02/05 13:59:33 -- deitz

Log message:
	Collapsed Loc:: ILink:: BaseAST:: hierarchy.  There is no longer Loc
	or ILink, just BaseAST.  This allows us to clean up the code in some
	non-superficial ways.  Moved prev, next, filename, and lineno into
	BaseAST.
	
	Moved parentScope out of Symbol, Stmt, and Expr, and into BaseAST.  It
	is not currently used in Type or AList.
	
	Changed call_fixup to just fixup and made it more focused.  This
	greatly improves the performance of compilation.  For example,
	SpecializeParenOps on trivial/shannon/compSampler now takes 0.056
	seconds on my machine rather than 12.87 seconds!
	
	Unified remove, insertBefore, insertAfter, etc.  The current functions
	can now be called when the nodes are in the AST and when they are not.
	If they are, fixup is called, otherwise it is not.
	
	  BaseAST::insertBefore(BaseAST* new_ast) inserts new_ast before this
	    in a list
	
	  BaseAST::insertAfter(BaseAST* new_ast) inserts new_ast after this in
	    a list
	
	  BaseAST::replace(BaseAST* new_ast) replaces this with new_ast
	
	  BaseAST::remove() removes this from the AST, remove does not yet
	    take into account symbols and removing them from the symboltable
	
	The functions on AList now include
	
	  AList<...>::insertAtTail(elem) inserts elem at the end of the list
	
	  AList<...>::insertAtHead(elem) inserts elem at the beginning of the
	    list
	
	  AList<...>::add(alist) inserts the contents of a list at the end of
	    the list

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      pragma.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h misc.h stmt.h 
	                          symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp pass.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertOutParameterInitializations.cpp 
	                         symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             constructComplexLiterals.cpp 
	                             eliminateReturns.cpp 
	                             expandSeqExprAssignments.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             fixup.h insertAnonymousDomains.cpp 
	                             insertAnonymousDomains.h 
	                             insertAnonymousTypes.cpp 
	                             insertElidedLoops.cpp 
	                             insertIndexType.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeSeqOperations.cpp 
	                             resolveModuleUses.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Removed files:
	chapel/compiler/AST/: link.cpp loc.cpp 
	chapel/compiler/include/: link.h loc.h 

---------------------------------------------------------------------------

06/02/05 14:46:34 -- shannon

Log message:
	Added the _chpl_exit() function, renamed to exit() in
	the prelude, which does nothing but call exit()..

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile 
Added files:
	chapel/runtime/include/: exit.h 
	chapel/runtime/src/: exit.c 
	chapel/test/trivial/shannon/quit/: exit.chpl exit.good 

---------------------------------------------------------------------------

06/02/05 15:11:43 -- deitz

Log message:
	Added parsing support for parameters in functions.
	
	Added a test case of a parameter in a function.  The function should
	now be instantiated.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: chplenum.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_function1.chpl 
	                                         test_paramvar_function1.future 
	                                         test_paramvar_function1.good 

---------------------------------------------------------------------------

06/02/05 16:00:17 -- jplevyak

Log message:
	Remove fake complex conversions.
	
	Complex coercions wrappers work fine.  The problem is that
	the front end defines two different "complex" types: one
	is a class defined in _chpl_complex and the other is
	a BUILTIN_TYPE defined in type.cpp.
	
	Either one of these will work, both create problems.  Steve: do you
	want to pick one to remove?

Modified files:
	chapel/modules/standard/: _chpl_complex.chpl 

---------------------------------------------------------------------------

06/02/05 16:21:27 -- jplevyak

Log message:
	Implement new "primitive chapel_defvar" instead of hard-coding
	ExprDefs as IF1 code. Currently this is only used for
	the well behaved types (not Arrays, Domains, etc), but it should
	give us more flexibility to handle things like "like" particularly
	when all types have defaultVal or defaultConstructor.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: driver.h fa.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

06/03/05 10:03:35 -- deitz

Log message:
	Added support for anonymous record types like
	
	  var r : record { var x : integer; var y : string; };
	
	I didn't add the alternative syntax
	
	  var r : (x : integer, y : string);
	
	because of a shift/reduce conflict with tuple types.  This may require
	a little effort but could be worthwhile cleaning of tuples.
	
	Codegen now declares enums followed by type prototypes followed by
	type definitions followed by other prototypes followed by other
	definitions.  This is because a type needs to be fully specified
	before it can be in a function prototype.
	
	Added support anonymous record types in InsertAnonymousTypes so they
	get symbols.
	
	Cleaned up the way structs are parsed and built in support of this
	change.
	
	Added three tests, one works, two are futures.  The two futures look
	at anonymous record types with primary methods and the alternative
	syntax.
	
	Added new out for sum_type tests.  This is a line number inconsistency
	that I'll try to look at when it fails next.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
Added files:
	chapel/test/classes/deitz/: test_anon_record1.chpl 
	                            test_anon_record1.good 
	                            test_anon_record2.chpl 
	                            test_anon_record2.future 
	                            test_anon_record2.good 
	                            test_anon_record3.chpl 
	                            test_anon_record3.future 
	                            test_anon_record3.good 

---------------------------------------------------------------------------

06/03/05 11:03:41 -- shannon

Log message:
	Added a future test to capture a bug found
	with the -h option.  I need to throw an
	error if any characters follow 'h'.

Added files:
	chapel/test/execflags/shannon/: spellingTest.chpl 
	                                spellingTest.execopts 
	                                spellingTest.future 
	                                spellingTest.good 

---------------------------------------------------------------------------

06/03/05 11:35:40 -- shannon

Log message:
	Added a future test to capture a bug found
	with the --memmax runtime option.  Make the
	error message more accurate.

Added files:
	chapel/test/memory/shannon/: memmaxIntOnly.chpl 
	                             memmaxIntOnly.execopts 
	                             memmaxIntOnly.future 
	                             memmaxIntOnly.good 

---------------------------------------------------------------------------

06/03/05 12:05:27 -- bradc

Log message:
	Fixed a number of issues related to byte-ordering that
	were causing failures on the Suns:
	
	- when I switched the 'f'/'F' flags from int to bool,
	  I switched the command-line parsing of them, but
	  failed to switch the environment variable parsing,
	  such that environment variables (like CHPL_DEVELOPER)
	  weren't necessarily working correctly on Suns.
	
	- switched a use of _chpl_tostring_integer from using
	  "%d" as its output format to _default_write_integer64
	  which should be more portable and immune to byte
	  ordering.
	
	- fixed _chpl_tostring_complex to not rely on byte
	  ordering of the .re and .im fields in the complex
	  value by accessing them directly.
	
	- switched formatting strings in test_format_primitives
	  to use %lld rather than %d for now since we don't
	  do our own Chapel-oriented parsing of formatting
	  strings yet.  This is consistent with other tests, if
	  unfortunate.
	
	-Brad

Modified files:
	./: log.txt 
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/backend/: beautify.cpp 
	chapel/compiler/main/: arg.cpp 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/trivial/deitz/: test_format_primitives.chpl 

---------------------------------------------------------------------------

06/03/05 13:54:43 -- deitz

Log message:
	Added support for the alternative syntax for anonymous record types:
	
	  var r : (x : integer, y : string);
	
	This syntax requires that the type be specified, otherwise it is
	indistinguishable from a tuple type.
	
	Eliminated DefStmt::typeDef() and DefStmt::moduleDef().  Started to
	remove DefStmt::fnDef() and DefStmt::varDef().  These are bad
	functions because they only return a single symbol though multiple may
	exist.  Added functions DefStmt::definesTypes, definesFunctions, and
	definesVariables that return true if the DefStmt only defines those
	symbols.
	
	Removed the future for test_anon_record3 and added a new test that
	declares two fields in a class in the same line.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 
	chapel/test/ssca/ssca2/: ssca2.parses.chpl 
Added files:
	chapel/test/classes/deitz/: test_record9.chpl test_record9.good 
Removed files:
	chapel/test/classes/deitz/: test_anon_record3.future 

---------------------------------------------------------------------------

06/03/05 14:11:37 -- jplevyak

Log message:
	Implemented instantiate_generic for param types (and FnSymbol and UndefinedSymbol)
	up to UndateSymbols.... I think we need an "UpdateExpr".

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: chplenum.h symbol.h type.h 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

06/03/05 14:46:49 -- deitz

Log message:
	very small amount of initial comments

Modified files:
	chapel/test/ssca/ssca2/: ssca2.parses.chpl 

---------------------------------------------------------------------------

06/03/05 15:08:48 -- shannon

Log message:
	Added a future test to capture a bug found
	with the --memtrace runtime option.  Make the
	error message more informative when no
	filename is given.

Added files:
	chapel/test/memory/shannon/: memtraceNoFilename.chpl 
	                             memtraceNoFilename.execopts 
	                             memtraceNoFilename.future 
	                             memtraceNoFilename.good 

---------------------------------------------------------------------------

06/03/05 15:20:09 -- shannon

Log message:
	Added a future test to capture a bug found
	with the --memstat and --memtrack runtime
	options.  I need to hrow an error if either
	flag is followed by an equals sign.

Added files:
	chapel/test/memory/shannon/: memstatEquals.chpl 
	                             memstatEquals.execopts 
	                             memstatEquals.future 
	                             memstatEquals.good 

---------------------------------------------------------------------------

06/03/05 17:43:02 -- deitz

Log message:
	Added support to UpdateSymbols so that a symbol can be replaced by an
	expression (as is the case when a parameter is instantiated).
	
	The parameter is not currently removed from the function, but it is a
	dead argument.
	
	Removed future for test_paramvar_function1.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/traversals/: updateSymbols.cpp updateSymbols.h 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_function1.future 

---------------------------------------------------------------------------

06/06/05 07:38:43 -- shannon

Log message:
	Woops.  Forgot to include the contents of this
	file on my prior commit..

Modified files:
	chapel/test/memory/shannon/: memstatEquals.future 

---------------------------------------------------------------------------

06/06/05 10:30:59 -- bradc

Log message:
	A small change in which AList::only() was being used
	on statement lists that weren't guaranteed to just
	have a single element in them.

Modified files:
	chapel/compiler/traversals/: insertThisParameters.cpp 

---------------------------------------------------------------------------

06/06/05 10:32:01 -- bradc

Log message:
	These are a bunch of tests that approximate the
	implementation of a sequential reduction using
	user-defined classes with type instantiation.
	
	In looking through SSCA2, was thinking about
	reductions and scans, implementing them via
	an early source-to-source conversion, and was
	curious to see what would happen if I tried
	to write the code which would result from such
	a transformation manually in Chapel, since it
	relied on instantiating classes using types.
	It worked out really nicely in most cases, so
	I wrote many versions as an exploration as to
	how hard the type variable instantiation of
	classes can be pushed (in directions that the
	reductions might require) and was very impressed
	at how well it worked.  Which isn't to say that
	there weren't cases that failed, but many of
	these I knew were going to be pushing the limits.
	
	Some of these tests would seem to relate to
	David's desire to query the type variables of
	classes from yesterday's email discussion,
	and are perhaps good fodder for discussion
	for that reason.
	
	Here are the futures, categorized:
	
	Futures I believe ought to work, but don't:
	
	- inferstatetype2.chpl (john, could you look at
	  this?)
	- threeuses-cast.chpl (deitz, bradc: seems to be
	  simple integer->string conversion problem)
	- usestate.chpl (john, could you look at this one
	  too?  May be related to inferstatetype2.chpl)
	
	Futures that seem related to our email discussion
	of last week:
	
	- threeclasstypes.chpl
	- threeclasstypes-construct.chpl
	- usetype.chpl
	- usetype2.chpl
	
	Futures that I believe we know don't work yet:
	- promote.chpl (relies on promotion)

Added files:
	chapel/test/reductions/bradc/manual/: .cvsignore README 
	                                      identisinferredvar.chpl 
	                                      identisinferredvar.good 
	                                      identisvar.chpl 
	                                      identisvar.good 
	                                      inferstatetype.chpl 
	                                      inferstatetype.good 
	                                      inferstatetype2.chpl 
	                                      inferstatetype2.future 
	                                      inferstatetype2.good 
	                                      manual.chpl manual.good 
	                                      promote.chpl 
	                                      promote.future 
	                                      promote.good 
	                                      threeclasstypes-construct.chpl 
	                                      threeclasstypes-construct.future 
	                                      threeclasstypes-construct.good 
	                                      threeclasstypes-manual.chpl 
	                                      threeclasstypes-manual.good 
	                                      threeclasstypes.chpl 
	                                      threeclasstypes.future 
	                                      threeclasstypes.good 
	                                      threeuses-cast.chpl 
	                                      threeuses-cast.future 
	                                      threeuses-cast.good 
	                                      threeuses.chpl 
	                                      threeuses.good 
	                                      twouses.chpl twouses.good 
	                                      usestate.chpl 
	                                      usestate.future 
	                                      usestate.good 
	                                      usestate2.chpl 
	                                      usestate2.good 
	                                      usetype.chpl 
	                                      usetype.future 
	                                      usetype.good usetype2.chpl 
	                                      usetype2.future 
	                                      usetype2.good 

---------------------------------------------------------------------------

06/06/05 10:47:09 -- jplevyak

Log message:
	Add function to get the set of keys from a Map.

Modified files:
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

06/06/05 13:22:41 -- bradc

Log message:
	Fixing this .good file.  I think Steve just had a thinko
	in his check-in.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_function1.good 

---------------------------------------------------------------------------

06/06/05 13:44:24 -- jplevyak

Log message:
	Set the line number globals before each wrapper is created.
	Convert VAR_PARAM into PARAM_PARAMETER when building a constructor.
	sum_type-1 and 2 should be stable now.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

06/06/05 14:23:09 -- jplevyak

Log message:
	Change findTypeVariables to find any type of AST and use it to detect
	a generic ParamSymbol.  This causes test_paramvar_class1.chpl to
	SEGV when it encounters an Expr with a null parentExpr and parentStmt
	(as well as parentSymbol).
	
	Commented out checkSemantics check for ParamSymbols::init being non-NULL...
	I don't know if this is a good idea, as it causes trivial/roxana/test_param_decl3
	to fail, but it is easy for Steve to reverse this after his class.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             findTypeVariables.cpp 
	                             findTypeVariables.h 

---------------------------------------------------------------------------

06/06/05 14:41:25 -- jplevyak

Log message:
	Fix test_paramvar_class1.  The problem was that
	        fn->defPoint->insertBefore(fnDef);
	needed to be before
	        instantiate_add_subs(substitutions, map);
	        instantiate_update_expr(substitutions, fnDef, map);
	Since ->replace() doesn't work on something which hasn't been fixup'ed.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_class1.future 

---------------------------------------------------------------------------

06/06/05 14:58:03 -- deitz

Log message:
	Added a test that instantiates a class with a class.

Added files:
	chapel/test/types/type_variables/deitz/: test_instantiate1.chpl 
	                                         test_instantiate1.future 
	                                         test_instantiate1.good 

---------------------------------------------------------------------------

06/06/05 15:05:49 -- deitz

Log message:
	Added another test of instantiating a class with a class.

Added files:
	chapel/test/types/type_variables/deitz/: test_instantiate2.chpl 
	                                         test_instantiate2.future 
	                                         test_instantiate2.good 

---------------------------------------------------------------------------

06/06/05 15:32:40 -- jplevyak

Log message:
	Update .future file.  foo is marked as dead because it *is* dead.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_instantiate1.future 

---------------------------------------------------------------------------

06/06/05 15:34:47 -- jplevyak

Log message:
	Fix .future and .good.  The variable "x" is initialized to null (as
	it should be).   The test was incorrect.   Perhaps a record was intended?

Modified files:
	chapel/test/types/type_variables/deitz/: test_instantiate2.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_instantiate2.future 

---------------------------------------------------------------------------

06/06/05 15:39:54 -- deitz

Log message:
	Added new class test like I wanted.  It works.
	
	Updated .good for test_instantiate1.

Modified files:
	chapel/test/types/type_variables/deitz/: test_instantiate1.good 
Added files:
	chapel/test/types/type_variables/deitz/: test_instantiate3.chpl 
	                                         test_instantiate3.good 

---------------------------------------------------------------------------

06/06/05 16:25:04 -- jplevyak

Log message:
	Test case for declaring a variable based on a type variable.
	The "r.t" reference doesn't make it to analysis.

Added files:
	chapel/test/types/type_variables/jplevyak/: typevar_use-1.chpl 
	                                            typevar_use-1.future 
	                                            typevar_use-1.good 

---------------------------------------------------------------------------

06/06/05 16:50:34 -- deitz

Log message:
	Added high-level support for select and when statements which store
	Chapel's version of the case statement.  After this is in, we can go
	ahead with typeselect for unions.
	
	John, can you look into adding analysis support.
	
	Added one test case.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/trivial/deitz/: test_select1.chpl 
	                            test_select1.future 
	                            test_select1.good 

---------------------------------------------------------------------------

06/06/05 16:55:29 -- bradc

Log message:
	Took a pass over ssca2.parses.chpl to update comments,
	respond to some of Steve's comments, and mark why other
	things are commented out for future reference.
	
	Updated some bugs/typos in ssca2.orig.chpl.
	
	Added ssca2.chpl, with the intention of evolving this
	code to be our best ssca2 implementation at any time
	(with ssca.orig.chpl serving as a placeholder for
	something approximating the whitepaper's implementation).

Modified files:
	chapel/test/ssca/ssca2/: ssca2.orig.chpl ssca2.parses.chpl 
Added files:
	chapel/test/ssca/ssca2/: ssca2.chpl 

---------------------------------------------------------------------------

06/07/05 11:27:55 -- jplevyak

Log message:
	Support for the "select" and "when" statements.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: if1.h 
Removed files:
	chapel/test/trivial/deitz/: test_select1.future 

---------------------------------------------------------------------------

06/07/05 11:28:27 -- jplevyak

Log message:
	Added prim_equal so that test_select1 works from low level codegen.

Modified files:
	chapel/compiler/etc/: c_runtime.h 

---------------------------------------------------------------------------

06/07/05 12:48:21 -- deitz

Log message:
	Removed support for # used to append or prepend to a sequence.  This
	operator can only be used for sequence concatenation now.  Added hack
	to support prepending and appending integers and strings since we can
	tell they are not sequences before analysis.
	
	Cleaned up support for sequences.
	
	Readded a test in insertBefore, insertAfter, and replace to make sure
	that what is being added is not in a list already (and thus needs to
	be copied).  Maybe this should also check the parents (since then it
	would need to be copied as well).
	
	Removed four more sequence futures.  The current two sequence failures
	are caused by:
	
	  1. not copying a sequence that is appended/prepended/concatenated to
	     and is not dead.
	
	  2. iterating over a sequence that is not a sequence of integers.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp type.cpp 
	chapel/compiler/include/: alist.h type.h 
	chapel/compiler/passes/: filesToAST.cpp filesToAST.h 
	chapel/compiler/traversals/: insertTemps.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/runtime/include/: seq.h 
	chapel/test/classes/deitz/: test_myseq_record.chpl 
	                            test_myseq_record2.chpl 
	                            test_myseq_record3.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: chain.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good printempty.good 
	                                  printstring.good 
	                                  usebeforedef.good var2.good 
	                                  writen.good writetwo.good 
Removed files:
	chapel/test/types/seq/deitz/: test_seq3.future test_seq6.future 
	                              test_seq7.future test_seq8.future 

---------------------------------------------------------------------------

06/07/05 13:45:33 -- jplevyak

Log message:
	Eliminated some extra IF1 code which was being generated on
	AssignOp(MemberAccesss,...)) and made the complementary changes
	to the test cases.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

06/07/05 13:54:44 -- deitz

Log message:
	Added a test case that starts to build up a domain class.

Added files:
	chapel/test/arrays/deitz/: test_array_class1.chpl 
	                           test_array_class1.future 
	                           test_array_class1.good 

---------------------------------------------------------------------------

06/07/05 14:04:10 -- bradc

Log message:
	Oops, this was supposed to be a completely local file,
	never checked in.  Sorry `bout that.

Removed files:
	./: log.txt 

---------------------------------------------------------------------------

06/07/05 14:08:34 -- bradc

Log message:
	* factored code that generated casts-to-strings
	  (_chpl_tostring*) at codegen time into a helper
	  function so that it could be called from multiple
	  places with less code duplication.
	
	* improved typeInfo for MemberAccess expressions
	  to use John's member_type information.
	
	* implemented UserType::getType()
	
	* added code generation for CastExpr's of type
	  string.
	
	* removed future for threeuses-cast.future.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
Removed files:
	chapel/test/reductions/bradc/manual/: threeuses-cast.future 

---------------------------------------------------------------------------

06/07/05 15:04:47 -- deitz

Log message:
	Added a macro to run through the elements in an AList (last checkin)
	and made some uses of it (this checkin).  The macro is
	
	  for_alist(Type, var, AList)
	
	and it works similarly to forv_Vec.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

06/07/05 15:30:17 -- deitz

Log message:
	Added another domain class future.
	
	Small changes to datablock in prelude.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_class2.chpl 
	                           test_array_class2.future 
	                           test_array_class2.good 

---------------------------------------------------------------------------

06/07/05 15:50:53 -- deitz

Log message:
	Added a mark showing that sequence literals do not make it to analysis.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

06/07/05 16:11:30 -- deitz

Log message:
	Removed future.  This test failed because it used sequences.  It now
	works.  Fixed its .good.

Modified files:
	chapel/test/classes/bradc/records/: assignRecord2.good 
Removed files:
	chapel/test/classes/bradc/records/: assignRecord2.future 

---------------------------------------------------------------------------

06/07/05 16:39:48 -- deitz

Log message:
	Added methods real and imag (that take no parentheses) to complex
	record.  Added a future test to use these two methods.
	
	Removed future on test_mycomplex_record.

Modified files:
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/types/complex/deitz/: test_complex3.chpl 
	                                  test_complex3.future 
	                                  test_complex3.good 
Removed files:
	chapel/test/classes/deitz/: test_mycomplex_record.future 

---------------------------------------------------------------------------

06/07/05 16:49:11 -- bradc

Log message:
	Continuing to work through the ssca2 code, did some
	fairly innocuous changes: added "scan" to the parser
	(and tucked it into ReduceExpr, adding a boolean to
	indicate whether it's a scan or reduce -- all stuff
	we'll want to reconsider when we actually implement
	these); added else-less conditional expressions to
	the parser; and removed square brackets from the ssca2
	codes as an indexing mechanism (should be legal
	eventually, but easier to just rewrite for now).

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/ssca/ssca2/: ssca2.chpl ssca2.parses.chpl 

---------------------------------------------------------------------------

06/07/05 16:58:36 -- bradc

Log message:
	Updated some future tests of user-defined I/O
	functions to use the current global-function-based
	approach rather than the method-based approach
	that I'd anticipated (this change made half of my
	tests irrelevant, so those got removed).
	
	Made a slight change to buildClassConstructorsEtc.cpp
	so that it wouldn't choke if the user created a write
	function with more or fewer than one argument.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/classes/bradc/: writeclass1a.chpl writerecord1a.chpl 
Added files:
	chapel/test/reductions/bradc/: .cvsignore 
Removed files:
	chapel/test/classes/bradc/: writeclass1a.future 
	                            writeclass1b.chpl 
	                            writeclass1b.future 
	                            writeclass1b.good 
	                            writerecord1a.future 
	                            writerecord1b.chpl 
	                            writerecord1b.future 
	                            writerecord1b.good 

---------------------------------------------------------------------------

06/08/05 09:57:16 -- bradc

Log message:
	Made this sub_test script a tcsh script in order
	to get access to limit vmemorysize on sunos (it
	wasn't available under csh).

Modified files:
	chapel/test/memory/shannon/outofmemory/: sub_test 

---------------------------------------------------------------------------

06/08/05 10:17:02 -- deitz

Log message:
	Combined traversals ConstructComplexLiterals (which replace complex
	literals with calls to the complex constructor) and InsertTemps (which
	replaced sequence literals with a temporary and built them up) into a
	new traversal InsertLiteralTemps meant to simplify Chapel literals in
	general.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             insertLiteralTemps.h 
Removed files:
	chapel/compiler/traversals/: constructComplexLiterals.cpp 
	                             constructComplexLiterals.h 
	                             insertTemps.cpp insertTemps.h 

---------------------------------------------------------------------------

06/08/05 10:40:18 -- shannon

Log message:
	Added the halt() function for the chapel user.  Halt is
	converted to some number of write statements, a writeln
	statement, and an exit statement with status "0".
	
	Usage:
	
	  halt("x and y are not equal!\n", "x = ", x, ", y = ", y);

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 
Added files:
	chapel/test/trivial/shannon/quit/: halt.chpl halt.good 

---------------------------------------------------------------------------

06/08/05 10:53:38 -- jplevyak

Log message:
	Fix for uninitialized variable in member_access_info.
	Additional test for 0-arity bound functions which
	exposed the bug.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/functions/jplevyak/: zeroarity-bound-1.chpl 
	                                 zeroarity-bound-1.good 

---------------------------------------------------------------------------

06/08/05 11:31:17 -- deitz

Log message:
	Removed tuple futures.

Removed files:
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple3.future 
	                                test_tuple_simple4.future 
	                                test_tuple_simple5.future 
	                                test_tuple_simple7.future 

---------------------------------------------------------------------------

06/08/05 11:51:39 -- deitz

Log message:
	Fixed passlist, replacing old verify calls with new ones.

Modified files:
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

06/08/05 16:02:02 -- jplevyak

Log message:
	Fix SEGV caused by insertion of duplicate Code nodes into the tree.
	Introduced an assert to detect this at the point of insertion.

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp 
	chapel/compiler/include/: code.h 

---------------------------------------------------------------------------

06/08/05 16:16:25 -- deitz

Log message:
	Factored ResolveDomainRanks into InsertAnonymousDomains in one of many
	steps to clean up handling of domains.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousDomains.h 
Removed files:
	chapel/compiler/traversals/: resolveDomainRanks.cpp 
	                             resolveDomainRanks.h 

---------------------------------------------------------------------------

06/08/05 16:46:30 -- jplevyak

Log message:
	Add code to restrict newly instantiated functions to handle only those
	data flow values which their new types can handle rather than the boader
	set potentially allowed to initiate instantiation (i.e. prepare for
	"where" clauses).
	
	Fix minor issue with handling of bound function names.
	
	Fixed test/reductions/bradc/manual/usestate and removed future.

Modified files:
	chapel/compiler/analysis/: ast.cpp pattern.cpp 
Removed files:
	chapel/test/reductions/bradc/manual/: usestate.future 

---------------------------------------------------------------------------

06/08/05 16:55:30 -- deitz

Log message:
	Cleaned up complex and seq modules to use an _ before all identifiers
	that we want to hide from the user rather than a longer mangled name
	that made the code more difficult to deal with.

Modified files:
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	chapel/modules/standard/: _chpl_complex.chpl _chpl_seq.chpl 
	chapel/runtime/include/: seq.h 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

06/08/05 17:03:11 -- deitz

Log message:
	Fixed temporary regressions by changing local passlist in testing
	directory.  Ugh.  It seems okay like now since it doesn't use any pass
	that actually does anything, but it's still not ideal to me.

Modified files:
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     mypasslist.h test.good 

---------------------------------------------------------------------------

06/09/05 08:17:53 -- jplevyak

Log message:
	Fix for altered line numbers in _chpl_XXX file.
	We need to a way for me to query a filename to see if
	it is a "builtin" file so as not to output those line
	numbers into the logs so that regressions will not result
	when the builtin files are updated.  Currently I have
	hardcoded the preludes, but now that we have whole directories
	that is nolonger feasible.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

06/09/05 08:57:52 -- deitz

Log message:
	Small fix to _data class in prelude.

Modified files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

06/09/05 09:04:14 -- jplevyak

Log message:
	test_complex3.chpl was incorrectly using x.imag and x.real to
	access the components of a complex number whereas _chpl_complex.chpl
	was defining them to be _re and _im.  Corrected the test.
	
	Removed 2 futures for tests which work.

Modified files:
	chapel/test/types/complex/deitz/: test_complex3.chpl 
Removed files:
	chapel/test/reductions/bradc/manual/: inferstatetype2.future 
	chapel/test/types/complex/deitz/: test_complex3.future 

---------------------------------------------------------------------------

06/09/05 09:09:19 -- jplevyak

Log message:
	Fixed the SEGV, reassigned back to Steve. These are large tests which
	should probably be broken up into little tests as they raise a number
	of issues which would probably be better tacked seperately.

Modified files:
	chapel/test/arrays/deitz/: test_array_class1.future 
	                           test_array_class2.future 

---------------------------------------------------------------------------

06/09/05 10:18:08 -- deitz

Log message:
	Added two test cases that modify a member access of a function return.
	
	Reinstated test_complex3 test and future.
	
	Superficial changes to test_array_class1.

Modified files:
	chapel/test/arrays/deitz/: test_array_class1.chpl 
	chapel/test/types/complex/deitz/: test_complex3.chpl 
Added files:
	chapel/test/functions/deitz/: test_var_function_access.chpl 
	                              test_var_function_access.good 
	                              test_var_function_access2.chpl 
	                              test_var_function_access2.future 
	                              test_var_function_access2.good 
	chapel/test/types/complex/deitz/: test_complex3.future 

---------------------------------------------------------------------------

06/09/05 10:28:40 -- jplevyak

Log message:
	Add new test that just tries to print a complex:
	it fails because:
	There are 2 versions of function write(x : complex) and two versions
	of _tostring (one in prelude.chpl and one in _chpl_complex.chpl...
	we should have only one.

Added files:
	chapel/test/types/complex/jplevyak/: complex-1.chpl 
	                                     complex-1.future 
	                                     complex-1.good 

---------------------------------------------------------------------------

06/09/05 10:32:08 -- jplevyak

Log message:
	Add back in update of member_access->member

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

06/09/05 10:59:34 -- deitz

Log message:
	Changed the record instantiation test to be written more how we want
	to write it.  It currently doesn't parse, but will with my next
	checkin.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.chpl 

---------------------------------------------------------------------------

06/09/05 11:01:03 -- jplevyak

Log message:
	Added new test for complex numbers:
	
	The problem is that the "real" method is not being returned by
	visible_functions().  Likely because module scoping isn't working
	correctly.
	
	The reason this works for classes and not for the record "complex" is
	because all members for classes are universally available and don't
	depend on scoping.

Added files:
	chapel/test/types/complex/jplevyak/: complex-2.chpl 
	                                     complex-2.future 
	                                     complex-2.good 

---------------------------------------------------------------------------

06/09/05 11:11:04 -- deitz

Log message:
	Added support for ExprType : Type.  It parses and heads to analysis.
	
	This adds support for things like
	
	  x.t
	
	and
	
	  var f : foo(t = integer)
	
	Futurized a few tests that use the former construct in a very simple
	way that used to work, but not very well.
	
	Added a new test to also look at this.
	
	Removed an old sequence test that seemed basically dead.

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/classes/deitz/: test_type_in_class3.future 
	                            test_type_in_class4.chpl 
	                            test_type_in_class4.future 
	                            test_type_in_class4.good 
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-manual.future 
Removed files:
	chapel/test/classes/deitz/: test_myseq_record.chpl 
	                            test_myseq_record.good 

---------------------------------------------------------------------------

06/09/05 11:59:15 -- jplevyak

Log message:
	Update .future.

Modified files:
	chapel/test/types/complex/deitz/: test_complex3.future 

---------------------------------------------------------------------------

06/09/05 13:51:59 -- deitz

Log message:
	Fixed a bug in which the real and imag methods in the complex record
	could not be called from other modules.  In general, there was a
	problem including methods in a record into the visible functions of a
	module that used that record.
	
	Modified the real and imag methods to be var returns so that the user
	can change the _re and _im fields of a complex.  Unfortunately the
	=real and =imag functions don't show up, but I bet I can fix this.
	
	Added Symbol::getSymbol() that returns the real symbol in the case of
	a ForwardingSymbol.  This is kind of like Type::getType.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 
Added files:
	chapel/test/types/complex/deitz/: test_complex4.chpl 
	                                  test_complex4.future 
	                                  test_complex4.good 

---------------------------------------------------------------------------

06/09/05 15:12:00 -- deitz

Log message:
	Fixed a bug in which setters for methods were not added to the method
	list.  This now allows us to assign to real or imag methods of the
	complex record.

Modified files:
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
Removed files:
	chapel/test/types/complex/deitz/: test_complex4.future 

---------------------------------------------------------------------------

06/09/05 15:54:41 -- deitz

Log message:
	Copied ExprType::expr into DefExpr::exprType.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

06/09/05 16:17:56 -- jplevyak

Log message:
	Added support for storing the "where" expression in the FnSymbol.
	Tried to get the copyXXX traversalXXX and replaceXXX functions
	right...
	Added support for constraining type variable parameters:
	  function f(type t : numeric, y) ..
	Added test cases for this and some other test cases for ?t which
	  is currently unsupported yet.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
Added files:
	chapel/test/types/type_variables/jplevyak/: where-2-error.chpl 
	                                            where-2-error.good 
	                                            where-2.chpl 
	                                            where-2.good 
	                                            where-3-error.chpl 
	                                            where-3-error.future 
	                                            where-3-error.good 
	                                            where-3.chpl 
	                                            where-3.future 
	                                            where-3.good 
	                                            where-4.chpl 
	                                            where-4.future 
	                                            where-4.good 

---------------------------------------------------------------------------

06/09/05 16:25:19 -- bradc

Log message:
	Some more modifications to ssca2 versions
	based on latest pass through them -- Mack
	pointed out we changed from "with" to "use"
	to refer to an instance's fields in an
	execution context; put error/assert syntax
	into that which Shannon is implementing;
	fixed up some other small things.
	
	Also wrote a variation on ssca2.parses.chpl
	which provides element types for all of its
	arrays.

Modified files:
	chapel/test/ssca/ssca2/: ssca2.chpl ssca2.parses.chpl 
Added files:
	chapel/test/ssca/ssca2/: ssca2.typedarrays.chpl 

---------------------------------------------------------------------------

06/09/05 18:01:32 -- jplevyak

Log message:
	Fix get_ast_children which wasn't updated to include exprType.
	Removed some cruft from analysis.cpp
	Add code to handle ExprType.
	Updated .future with current status: the problem
	  with test_typevar_record1 now is that instantaited types don't
	  have their defaultConstructor set.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.future 

---------------------------------------------------------------------------

06/10/05 08:55:53 -- mjoyner

Log message:
	Added reverse function to sequences.

Added files:
	chapel/test/trivial/mjoyner/seq/: seq_reverse.chpl 
	                                  seq_reverse.good 

---------------------------------------------------------------------------

06/10/05 09:19:08 -- deitz

Log message:
	Updated regressions file.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

06/10/05 09:20:14 -- jplevyak

Log message:
	Add 2 new tests to see if we can pass around types.  This
	is going to be necessary to handle things like C(t = c.t) where
	t is a type variable.

Added files:
	chapel/test/types/type_variables/jplevyak/: type_variable-2.chpl 
	                                            type_variable-2.future 
	                                            type_variable-2.good 
	                                            type_variables-1.chpl 
	                                            type_variables-1.future 
	                                            type_variables-1.good 

---------------------------------------------------------------------------

06/10/05 09:20:36 -- deitz

Log message:
	Instantiated types now have their default constructors set.
	
	The test test_typevar_record1 now has problems in resolve types.  A
	variable's type remains an ExprType.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

06/10/05 09:21:35 -- deitz

Log message:
	Updated future.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.future 

---------------------------------------------------------------------------

06/10/05 09:46:37 -- deitz

Log message:
	Added two trial array tests. The second seg faults in analysis. The
	first works.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial1.chpl 
	                           test_array_class_trial1.good 
	                           test_array_class_trial2.chpl 
	                           test_array_class_trial2.future 
	                           test_array_class_trial2.good 

---------------------------------------------------------------------------

06/10/05 10:11:27 -- mjoyner

Log message:
	Added reverse function to sequences.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

06/10/05 10:44:59 -- deitz

Log message:
	Added another array class trial test.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial3.chpl 
	                           test_array_class_trial3.future 
	                           test_array_class_trial3.good 

---------------------------------------------------------------------------

06/10/05 10:51:57 -- jplevyak

Log message:
	update .future

Modified files:
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-manual.future 

---------------------------------------------------------------------------

06/10/05 10:58:43 -- jplevyak

Log message:
	update .future : these are large tests which probably need to be broken up and
	should probably have some comment as to why they are failing.

Modified files:
	chapel/test/classes/deitz/: test_myseq_record2.future 
	                            test_myseq_record3.future 

---------------------------------------------------------------------------

06/10/05 11:00:41 -- jplevyak

Log message:
	Pushed the test farther along by returning the correct type for TypeExpr
	things.  Test now fails in codegen.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.future 

---------------------------------------------------------------------------

06/10/05 12:21:44 -- bradc

Log message:
	A mess of new tests -- some working, some future --
	which came out of the latest report card update.
	I don't think any of these futures are particularly
	top priority, though the twoRecords.chpl test is fairly
	mysterious and seems likely to cause problems sooner
	rather than later.
	
	(Here is a short description of the future tests
	that I wrote up as much for my own sake as anybody's):
	
	twoRecords.chpl : it seems as though if we have two
	  records with similar field names, the getters/setters
	  choke a bit
	
	assignRecord3.chpl : this assigns two records with the
	  same field names, but different types; causes problems
	  in addition to those experienced in twoRecords.chpl
	
	noelemtype.chpl : test of array declarations in which
	  element type is inferred
	
	intents-arrays.chpl : ordering problem in codegen -- low
	  priority
	
	arrayArg-explicit.chpl : problem when argument array type
	  is expressed
	
	returnSeq2.chpl : copies aren't made when assigning/
	  passing/returning sequences
	
	sumreduce.chpl : a reduction test; these are not yet
	  implemented
	
	returnTuple.chpl :
	returnTuple2.chpl : some tests that try to return tuples
	  in various ways and fail
	
	returnTuple3.chpl : this one works, but exhibits that
	  printing tuples doesn't use a very good format,
	  currently.

Added files:
	chapel/test/arrays/bradc/: noelemtype.chpl noelemtype.future 
	                           noelemtype.good 
	chapel/test/classes/bradc/records/: assignRecord3.chpl 
	                                    assignRecord3.future 
	                                    assignRecord3.good 
	                                    twoRecords.chpl 
	                                    twoRecords.future 
	                                    twoRecords.good 
	                                    twoRecords2.chpl 
	                                    twoRecords2.good 
	chapel/test/functions/bradc/: arrayArg-explicit.chpl 
	                              arrayArg-explicit.future 
	                              arrayArg-explicit.good 
	                              arrayArg.chpl arrayArg.good 
	                              intents-arrays.chpl 
	                              intents-arrays.future 
	                              intents-arrays.good 
	                              intents-arrays2.chpl 
	                              intents-arrays2.good 
	chapel/test/reductions/bradc/: sumreduce.chpl sumreduce.future 
	                               sumreduce.good 
	chapel/test/types/seq/bradc/: .cvsignore length.chpl length.good 
	                              length.modify.chpl 
	                              length.modify.good returnSeq.chpl 
	                              returnSeq.good returnSeq2.chpl 
	                              returnSeq2.future returnSeq2.good 
	chapel/test/types/tuple/bradc/: returnTuple.chpl 
	                                returnTuple.future 
	                                returnTuple.good 
	                                returnTuple2.chpl 
	                                returnTuple2.future 
	                                returnTuple2.good 
	                                returnTuple3.chpl 
	                                returnTuple3.future 
	                                returnTuple3.good 

---------------------------------------------------------------------------

06/10/05 12:26:44 -- deitz

Log message:
	Two more array class trial tests failing for currently unknown reasons.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial4.chpl 
	                           test_array_class_trial4.future 
	                           test_array_class_trial4.good 
	                           test_array_class_trial5.chpl 
	                           test_array_class_trial5.future 
	                           test_array_class_trial5.good 

---------------------------------------------------------------------------

06/10/05 12:31:27 -- bradc

Log message:
	Removing this future.  This test is getting
	the right results for the wrong reasons, but
	we now have other tests that exhibit this
	incorrect behavior, so I'm removing this
	future so that I don't look at it every few
	weeks.

Removed files:
	chapel/test/classes/deitz/: test_record_assign1.future 

---------------------------------------------------------------------------

06/10/05 12:52:53 -- jplevyak

Log message:
	Implement x.t (the ability to use member access to access a USER_TYPE in
	an object).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Removed files:
	chapel/test/classes/deitz/: test_type_in_class4.future 

---------------------------------------------------------------------------

06/10/05 13:35:52 -- jplevyak

Log message:
	Add code to build getters for type variables in classes.
	Add an option to control the above.
	Add a test which uses the option.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             updateSymbols.cpp 
Added files:
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_typevar_class1.chpl 
	                                            test_typevar_class1.compopts 
	                                            test_typevar_class1.future 
	                                            test_typevar_class1.good 

---------------------------------------------------------------------------

06/10/05 14:12:46 -- deitz

Log message:
	Added where restricting parameter test case.

Added files:
	chapel/test/functions/deitz/: test_where_param1.chpl 
	                              test_where_param1.future 
	                              test_where_param1.good 

---------------------------------------------------------------------------

06/10/05 14:21:56 -- shannon

Log message:
	Added the assert() function for the chapel user.
	Assert takes a test expression, and prints a
	simple error message on failure.
	
	Usage:
	------
	  assert(x != 10);

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

06/10/05 14:23:24 -- shannon

Log message:
	Added a test to lock in the new assert().

Added files:
	chapel/test/trivial/shannon/quit/: assert.chpl assert.good 

---------------------------------------------------------------------------

06/10/05 16:25:34 -- jplevyak

Log message:
	added hack for primitive_chapel_vardef for low level code generation.
	fixed a bug in collect_PNodes which was causing SEGV in programs
	  with particularly complex structure.
	this fixed test_array_class_trial2.chpl

Modified files:
	chapel/compiler/analysis/: fun.cpp 
	chapel/compiler/etc/: c_runtime.h 

---------------------------------------------------------------------------

06/10/05 16:49:50 -- bradc

Log message:
	Added a test of empty sequence literals, motivated by
	Mack's explorations.  Not high priority.

Added files:
	chapel/test/types/seq/bradc/: emptySeq.chpl emptySeq.future 
	                              emptySeq.good 

---------------------------------------------------------------------------

06/13/05 09:26:53 -- deitz

Log message:
	Cleaned up code for applying this parameters to expressions in
	methods.
	
	Added _methodToken and _methodTokenType to prelude for upcoming
	change.
	
	Fixed .goods for regressions caused by changes in line numbers in
	standard modules and preludes.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

06/13/05 10:10:00 -- deitz

Log message:
	A builtin assignment function is no longer created for a record if one
	is provided.  Perhaps this is better to implement using function
	priorities where the automatically generated functions are resolved to
	with a lower priority.
	
	Added a comment to ResolveSymbols to the effect that assignment is not
	being resolved as a binary operator.
	
	Updated future of functions/jplevyak/equal-9.chpl.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/test/functions/jplevyak/: equal-9.future 

---------------------------------------------------------------------------

06/13/05 10:25:33 -- jplevyak

Log message:
	update the test to be deterministic about the output (the current
	one depended on the order of computation of intermediates).
	updated the .good file to reflect the new order of output

Modified files:
	chapel/test/arrays/deitz/: test_array_class_trial2.chpl 
	                           test_array_class_trial2.good 

---------------------------------------------------------------------------

06/13/05 10:25:47 -- jplevyak

Log message:
	Remove .future for working test.

Removed files:
	chapel/test/arrays/deitz/: test_array_class_trial2.future 

---------------------------------------------------------------------------

06/13/05 10:27:00 -- jplevyak

Log message:
	remove instantiated types from the StructuralType::types array instead
	of just setting the pointer to NULL.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

06/13/05 12:27:25 -- jplevyak

Log message:
	Added new log:  chpl -dd
	which logs dispatch information into log/log.d
	the log looks like the:
	
	2126- pass: 0 visible: 7
	2126- destructure_level: 0 candidates: 3 arguments: 3
	2126- arg 0 : =
	2126- arg 1 : foo
	2126- arg 2 : foo
	2126- cover_formals: 3
	2126- candidates:
	2126- 1: internal_prelude.chpl:81 Sym: 271 AST_id: 2372
	2126- 2: equal-9.chpl:2 Sym: 597 AST_id: 5761
	2126- 3: internal_prelude.chpl:38 Sym: 769 AST_id: 7403
	2126- unsubsumed: 1
	2126- candidates:
	2126- 1: equal-9.chpl:2 Sym: 597 AST_id: 5761
	2126- unambiguous: 1
	2126- destructure_level: 0 matches: 1
	2126- candidates:
	2126- 1: equal-9.chpl:2 Sym: 597 AST_id: 5761
	
	And should be accessed by "grep ^####-" where #### is the
	FUTURE # for the expression in question in the IF1 which is
	obtained from by chpl -di in the log: log/log.i and looks like:
	
	...
	  (MOVE (var "y" 603) (temp 2125))
	  (MOVE (temp 2125) (temp 2127))
	  (SEND (FUTURE (temp 2126)) (var "=" 14) (var "x" 602) (temp 2127))
	...
	
	% grep ^2126- log/log.d
	
	will give the above output. which says that in pass 0
	there are 7 visibile functions at the call site at
	the top destructuring level (0). There are 3 candidates
	where each argument matches independently the
	arguments with the types (=, foo, foo) where =
	is just the name of the function.  All 3 candidates
	are applicable at all argument sites for these arguments
	and they are given (by line number and FnSymbol id).
	One subsumes the others and it is at equal-9.chpl:2.
	It is unambiguous and (after recursing through any
	destructurings (there are none)) it remains the sole match.
	
	Please tell me if there is any aspect of this which you think
	could be improved.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/include/: analysis.h fa.h log.h sym.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

06/13/05 12:32:47 -- deitz

Log message:
	Added compiler flag
	
	  --apply-getters-setters
	
	to enable this change.
	
	Added a new pass ApplyGettersSetters that changes all MemberAccesses
	outside of getters, setters, and constructors into function calls so
	that
	
	  x.a
	
	becomes
	
	  a(x)
	
	This checkin also adds a fake _methodTokenType argument as the first
	parameter to distinguish methods from functions with the same type
	signatures so it really becomes
	
	  a(_methodToken, x)
	
	The getter is
	
	  a(_methodTokenType, ClassType)
	
	This code was originally done on the low-level.  This moves this
	transformation up to the high-level, but awaits symmetric changes in
	the low-level.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
	                             applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 
	                             applyGettersSetters.h 

---------------------------------------------------------------------------

06/13/05 15:11:02 -- jplevyak

Log message:
	Added code to optionally make = a bound member and to resolve
	operator =.  Add a test case to show that it works.  This has
	a number of problems with Tuples/Arrays as well a problem with
	re-resolving BinOps.  More work required.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/test/functions/jplevyak/: equal-9.future 
Added files:
	chapel/test/functions/jplevyak/: equal_method-1.chpl 
	                                 equal_method-1.compopts 
	                                 equal_method-1.good 

---------------------------------------------------------------------------

06/13/05 15:45:24 -- deitz

Log message:
	Small changes to parsing of where expressions which lets the where
	expression in test/functions/deitz/test_where_param1.chpl parse.  This
	test now flags an ambiguous function since it doesn't look at the
	where clause yet.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/functions/deitz/: test_where_param1.future 

---------------------------------------------------------------------------

06/13/05 16:03:56 -- jplevyak

Log message:
	make the corresponding change in analysis to remove the __method_token
	for useGettersSetters.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

06/13/05 16:45:52 -- deitz

Log message:
	Added code to remove the _methodToken from the formal and actual
	arguments of functions.

Modified files:
	chapel/compiler/traversals/: findUnknownTypes.cpp 

---------------------------------------------------------------------------

06/13/05 16:54:15 -- deitz

Log message:
	No longer change MemberAccess in VarInitExpr into getter call.  I
	think this should just be a symbol anyway, but has not been updated.
	
	This gets classes/deitz/test_class2.chpl working with
	--apply-getters-setters.

Modified files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 

---------------------------------------------------------------------------

06/13/05 17:56:03 -- jplevyak

Log message:
	Implement simple where causes which test that parameter are
	equal to a constant.
	Remove .future for corresponding test case.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
Removed files:
	chapel/test/functions/deitz/: test_where_param1.future 

---------------------------------------------------------------------------

06/13/05 18:00:36 -- jplevyak

Log message:
	updated with specific issue.

Modified files:
	chapel/test/types/type_variables/jplevyak/: typevar_use-1.future 

---------------------------------------------------------------------------

06/14/05 09:42:59 -- deitz

Log message:
	Tuples no longer have defaultVal, but a defaultConstructor instead.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

06/14/05 10:10:36 -- deitz

Log message:
	Fixed tuple's write function.  Uncommented out line in Brad's test
	that he commented wasn't working but now is.  Removed future.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/test/types/tuple/bradc/: writeTuple.chpl writeTuple.good 
Removed files:
	chapel/test/types/tuple/bradc/: writeTuple.future 

---------------------------------------------------------------------------

06/14/05 10:29:00 -- jplevyak

Log message:
	fix SEGV in graphing

Modified files:
	chapel/compiler/backend/: graph.cpp 

---------------------------------------------------------------------------

06/14/05 11:37:54 -- mjoyner

Log message:
	Added ability to index into sequences.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
Added files:
	chapel/test/trivial/mjoyner/seq/: seq_index1.chpl 
	                                  seq_index1.good 
	                                  seq_index2.chpl 
	                                  seq_index2.good 
	                                  seq_index2.future 

---------------------------------------------------------------------------

06/14/05 11:48:06 -- deitz

Log message:
	Added another sequence test that declares two sequences of different
	instantiated types.

Added files:
	chapel/test/types/seq/deitz/: test_seq9.chpl test_seq9.future 
	                              test_seq9.good 

---------------------------------------------------------------------------

06/14/05 12:05:34 -- jplevyak

Log message:
	Fixed test_typevar_record1.
	Set defaultConstructor from DefExpr::typeExpr to handle cases like:
	  var r : R(t = integer);
	that is, records of instantiated type.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.future 

---------------------------------------------------------------------------

06/14/05 12:09:25 -- jplevyak

Log message:
	Add a new test case which demonstrates some syntax which either
	needs to have a new error or be made to work.

Added files:
	chapel/test/types/type_variables/jplevyak/: construct-1.chpl 
	                                            construct-1.future 
	                                            construct-1.good 

---------------------------------------------------------------------------

06/14/05 12:30:07 -- bradc

Log message:
	Updated regressions file slightly.  Found that the
	valgrind run of intents-arrays2.chpl was showing
	an error that I hadn't noticed before, so made the
	test a future (intents-arrays2a) and took out the line
	in question for the existing test since most of it
	seemed to work well.

Modified files:
	chapel/test/: REGRESSIONS 
	chapel/test/functions/bradc/: intents-arrays2.chpl 
	                              intents-arrays2.good 
Added files:
	chapel/test/functions/bradc/: intents-arrays2a.chpl 
	                              intents-arrays2a.future 
	                              intents-arrays2a.good 

---------------------------------------------------------------------------

06/14/05 12:32:32 -- jplevyak

Log message:
	All symbols in builtin and standard modules are now excluded
	from the flow analysis dump used in the regressions.
	This should make the tests resilient to changes in the
	standard headers.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp sym.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

06/14/05 12:35:07 -- bradc

Log message:
	Added some missing .cvsignores to the test system to
	ignore *.tmp, a.out.

Added files:
	chapel/test/trivial/mjoyner/seq/: .cvsignore 
	chapel/test/types/complex/jplevyak/: .cvsignore 
	chapel/test/types/tuple/deitz/noanalysis/: .cvsignore 

---------------------------------------------------------------------------

06/14/05 13:02:10 -- bradc

Log message:
	It seems that I accidentally overwrote the .chpl
	file with the .good file before checking this in
	the first time around.  This should fix it.

Modified files:
	chapel/test/functions/bradc/: intents-arrays.chpl 

---------------------------------------------------------------------------

06/14/05 14:00:27 -- deitz

Log message:
	Fixed code for applying getters and setters to work on methods.
	
	The only thing not working now is arrays, I think.

Modified files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 

---------------------------------------------------------------------------

06/14/05 14:03:00 -- bradc

Log message:
	Some more empty sequence tests to follow up on the ones
	Mack and I submitted the other week.  These are very
	low priority... just wrote them up for my curiosity.

Added files:
	chapel/test/types/seq/bradc/: emptySeq2.chpl emptySeq2.future 
	                              emptySeq2.good emptySeq2a.chpl 
	                              emptySeq2a.good emptySeq3.chpl 
	                              emptySeq3.future emptySeq3.good 

---------------------------------------------------------------------------

06/14/05 14:19:41 -- deitz

Log message:
	Fixed a small bug with --apply-getters-setters in which arguments to a
	ParenOpExpr were not handled.

Modified files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 

---------------------------------------------------------------------------

06/14/05 14:21:36 -- bradc

Log message:
	Added tests of using user modules -- a simple use and
	a test of two modules mutually using one another.
	Added machinery to module initializers so that a
	module's initializer would only be run once.  Still
	no support for user-specified module initialize()
	functions as Mack was trying last week...

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
Added files:
	chapel/test/modules/bradc/: use-mutrec.chpl use-mutrec.good 
	                            use.chpl use.good 

---------------------------------------------------------------------------

06/14/05 14:42:57 -- deitz

Log message:
	Added a couple new array class trials.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial4a.chpl 
	                           test_array_class_trial4a.future 
	                           test_array_class_trial4a.good 
	                           test_array_class_trial6.chpl 
	                           test_array_class_trial6.future 
	                           test_array_class_trial6.good 

---------------------------------------------------------------------------

06/14/05 14:44:16 -- deitz

Log message:
	Oops, fixed test I just handled in.  It works.

Modified files:
	chapel/test/arrays/deitz/: test_array_class_trial4a.chpl 
	                           test_array_class_trial4a.good 

---------------------------------------------------------------------------

06/14/05 14:44:41 -- deitz

Log message:
	Removed future of test.

Removed files:
	chapel/test/arrays/deitz/: test_array_class_trial4a.future 

---------------------------------------------------------------------------

06/14/05 14:48:20 -- deitz

Log message:
	Added another array class trial test that tests out x.f()(i) future
	intermediate approach.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial5a.chpl 
	                           test_array_class_trial5a.future 
	                           test_array_class_trial5a.good 

---------------------------------------------------------------------------

06/14/05 14:51:12 -- deitz

Log message:
	Moved InsertAnonymousDomains earlier in the passlist, a better place
	for it, I'd like to move InsertAnonymousTypes up there as well.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

06/14/05 17:33:43 -- jplevyak

Log message:
	Add some more tests.   Several trival array problems.

Added files:
	chapel/test/arrays/jplevyak/: simple-1.chpl simple-1.future 
	                              simple-1.good simple-2.chpl 
	                              simple-2.future simple-2.good 
	                              simple-3.chpl simple-3.future 
	                              simple-3.good 
	chapel/test/flowanalysis/jplevyak/: destruct3.good destruct3.v 

---------------------------------------------------------------------------

06/14/05 17:35:46 -- jplevyak

Log message:
	Another odd array problem

Added files:
	chapel/test/arrays/jplevyak/: simple-4.chpl simple-4.future 
	                              simple-4.good 

---------------------------------------------------------------------------

06/15/05 10:05:59 -- jplevyak

Log message:
	Support y.a()(2) = x syntax.
	In a number of cases x.a was being generated as a primitive
	intead of a(_method_token, x), these have been fixed.  This
	change resulted in a number of tests requring changes as well,
	and in the f(x.i) where f takes an OUT argument failing (as
	Steve said it should).

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	chapel/compiler/include/: fa.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/functions/jplevyak/: equal_method-1.chpl 
	chapel/test/types/seq/bradc/: length.modify.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/classes/deitz/: test_union3.future 

---------------------------------------------------------------------------

06/15/05 10:21:56 -- deitz

Log message:
	Added more record instantiation tests that pave the way to sequences
	as records.  Two of these fail.
	
	Added support for syntax
	
	  var f : foo of integer;
	
	which is the same as
	
	  var f : foo(integer);

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record2.chpl 
	                                         test_typevar_record2.good 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record3.good 
	                                         test_typevar_record4.chpl 
	                                         test_typevar_record4.good 
	                                         test_typevar_record5.chpl 
	                                         test_typevar_record5.future 
	                                         test_typevar_record5.good 
	                                         test_typevar_record6.chpl 
	                                         test_typevar_record6.future 
	                                         test_typevar_record6.good 

---------------------------------------------------------------------------

06/15/05 10:49:59 -- deitz

Log message:
	Updated output files of array class trial tests.

Modified files:
	chapel/test/arrays/deitz/: test_array_class_trial4.good 
	                           test_array_class_trial5.good 
	                           test_array_class_trial6.chpl 
	                           test_array_class_trial6.good 

---------------------------------------------------------------------------

06/15/05 11:13:23 -- jplevyak

Log message:
	Fixed test_array_class_trial5a.chpl which was incorrect.
	Removed .futures for working tests.

Modified files:
	chapel/test/arrays/deitz/: test_array_class_trial5a.chpl 
	                           test_array_class_trial5a.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_class_trial4.future 
	                           test_array_class_trial5.future 
	                           test_array_class_trial5a.future 
	                           test_array_class_trial6.future 

---------------------------------------------------------------------------

06/15/05 12:05:54 -- jplevyak

Log message:
	Fix a bug where partial applications could build up excessive
	argument lists.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

06/15/05 12:06:40 -- jplevyak

Log message:
	Re-fix the bug from a bad checkin.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

06/15/05 13:28:39 -- jplevyak

Log message:
	The partial implementation of = as a method was broken by the
	last checkin... make it a future (it never worked in general).

Added files:
	chapel/test/functions/jplevyak/: equal_method-1.future 

---------------------------------------------------------------------------

06/15/05 13:30:29 -- jplevyak

Log message:
	update for change in error messages

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 

---------------------------------------------------------------------------

06/15/05 13:33:19 -- jplevyak

Log message:
	Update to describe problem with:
	
	[Error matching compiler output for types/type_variables/deitz/test_typevar_record3]
	[Error matching compiler output for types/type_variables/deitz/test_typevar_record4]
	
	the problem is that visible_functions() is not returning the write for strings.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

06/15/05 13:58:01 -- shannon

Log message:
	Added a new compilation flag, --codegen-cpp-lines.
	When this flag is used a #line directive is generated
	for each line of C code.  You can now set breakpoints
	for your chpl code:
	
	  (gdb) break cppLines.chpl:12
	  Breakpoint 2 at 0x804924e: file cppLines.chpl, line 12.
	
	  (gdb) info break
	  Num Type           Disp Enb Address    What
	  2   breakpoint     keep y   0x0804924e in __init_cppLines at cppLines.chpl:12
	
	  (gdb) r
	  Starting program: /users/shannon/CHAPEL/chapel/test/compflags/shannon/a.out
	
	  Breakpoint 2, __init_cppLines () at cppLines.chpl:12

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/backend/: beautify.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

06/15/05 14:02:38 -- jplevyak

Log message:
	Test for the various types of calls a.x(i) = j, for example.

Added files:
	chapel/test/functions/jplevyak/: call_mapping-1.chpl 
	                                 call_mapping-1.future 
	                                 call_mapping-1.good 

---------------------------------------------------------------------------

06/15/05 14:33:54 -- jplevyak

Log message:
	Revert mistaken checkin

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 

---------------------------------------------------------------------------

06/15/05 14:36:51 -- jplevyak

Log message:
	If the gc6.X directory has never been built, it doesn't
	have a Makefile, so "make clean" will produce and error
	which should be ignored.

Modified files:
	chapel/third-party/boehmgc/: Makefile 

---------------------------------------------------------------------------

06/15/05 15:54:01 -- deitz

Log message:
	Fixed a bug in which visible functions were not propagated correctly
	if they were already computed.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

06/15/05 17:03:34 -- deitz

Log message:
	Moved everything from the internal prelude into the prelude,
	effectively getting rid of it.  There were some dependency problems
	that made it difficult to deal with.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

06/16/05 10:42:38 -- deitz

Log message:
	Fixed uninitialized field bug in analysis, cause of last night's
	valgrind regressions.

Modified files:
	chapel/compiler/include/: fa.h 

---------------------------------------------------------------------------

06/16/05 10:46:46 -- deitz

Log message:
	Added dummy field to Tuple class to keep it from being used for some
	other purposes.  Why is this necessary?, I wonder.  This fixes the new
	regression of test_typevar_record3.chpl.

Modified files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

06/16/05 11:15:14 -- deitz

Log message:
	Undo last checkin, removed dummy variable from tuple.  I'll have to
	fix this another way.

Modified files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

06/16/05 13:45:14 -- deitz

Log message:
	Added initial support for printing out (html) the tree between every
	pass of compilation using the -t flag.  The file log/index.html
	contains the passlist.  Clicking on a pass shows the AST after that
	pass.

Modified files:
	chapel/compiler/backend/: dump.cpp 
	chapel/compiler/include/: driver.h dump.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

06/16/05 13:52:22 -- deitz

Log message:
	Small fixes to last checkin.

Modified files:
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

06/16/05 14:52:56 -- deitz

Log message:
	Disabled NOTEST for lowlevel code generation tests while John is gone.
	I can't figure this out.

Added files:
	chapel/test/lowlevelcg/jplevyak/: NOTEST 

---------------------------------------------------------------------------

06/16/05 15:38:54 -- deitz

Log message:
	Fixed a bug in how ExprTypes were copied.  Also, the ExprType expr is
	now put in the DefExpr and removed from the ExprType expr.
	
	Made all structural types codegen to pointers.  This eliminates using
	C's semantics to copy records (something we can't do in the long run)
	and forces records to have a constructor.
	
	Simplified code in RemoveDeadSymbols.
	
	Changed complex runtime code to take into account pointer codegen of
	records.
	
	Futurized tests that involved simple record assignment (since this no
	longer works in the simple case and never really did) and tests that
	involved tuples of inferred types since tuple literals are not really
	handled well yet.
	
	Added a commented line in the prelude to stick something into the
	Tuple class.  Uncommented, a number of important tests start to work
	(sometimes).  Note to self, this non-determinism is a real pain.  I
	find that I get an error and then when I try to see what the C code
	looks like, using --savec output, I get a different error.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertThisParameters.cpp 
	chapel/runtime/include/: chplio.h config.h union.h 
	chapel/runtime/src/: chplio.c config.c 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/memory/shannon/: printFinalMemStat.good 
Added files:
	chapel/test/classes/bradc/: writerecord.future 
	                            writerecord1a.future 
	                            writeunion-workaround.future 
	                            writeunion.future 
	chapel/test/classes/bradc/records/: assignRecord2.future 
	chapel/test/functions/jplevyak/: equal-8.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple6.future 
	                                test_tuple_simple7.future 
	chapel/test/types/tuple/jplevyak/: tuple_index-1.future 
	                                   tuple_index-2.future 

---------------------------------------------------------------------------

06/16/05 17:30:57 -- deitz

Log message:
	Effectively removed SeqType.  Sequences are now parsed as the record
	in the module.  Literals are handled by the compiler.  The token 'seq'
	is no longer a keyword.
	
	I had to add a dummy field to the Tuple class in the prelude.  In
	doing so, I was forced to futurize a few more tuple tests.  We need to
	handle tuple literals correctly.
	
	Removed an old test that explicitly tested the now gone seq2 class.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y prelude.chpl 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertLiteralTemps.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: chain.good enum.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good printempty.good 
	                                  printstring.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  usebeforedef.good var2.good 
	                                  writen.good writetwo.good 
	chapel/test/types/seq/bradc/: length.modify.good 
Added files:
	chapel/test/types/seq/deitz/: test_seq_reverse1.chpl 
	                              test_seq_reverse1.good 
	chapel/test/types/tuple/bradc/: writeTuple.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple3.future 
	                                test_tuple_simple4.future 
	                                test_tuple_simple5.future 
Removed files:
	chapel/test/classes/deitz/: test_seq2.chpl test_seq2.good 

---------------------------------------------------------------------------

06/16/05 17:31:17 -- deitz

Log message:
	Removed unused FnSymbol constructor.
	
	Improved html output for compilation dump.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

06/17/05 10:38:22 -- deitz

Log message:
	Removed lots of code related to SeqType and special-casing sequences.
	Removed two passes.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             insertAnonymousTypes.cpp 
	                             scopeResolveSymbols.cpp 
	                             verifyASTType.cpp 
Removed files:
	chapel/compiler/traversals/: expandSeqExprAssignments.cpp 
	                             expandSeqExprAssignments.h 
	                             removeSeqOperations.cpp 
	                             removeSeqOperations.h 

---------------------------------------------------------------------------

06/17/05 11:08:34 -- deitz

Log message:
	Html dump of the compiler output now creates many more files, one for
	each module for each pass.  This slows things down during compilation
	with the -t flag, but it's more tractable for browsing.
	
	Made some improvements to the html dump.
	
	Added a script to take a look at a single function throughout
	compilation.  This is not linked into the web yet, but should be a
	simple CGI script if we have the ability to run it locally.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: view.cpp view.h 
Added files:
	chapel/compiler/etc/www/: fnhtml.pl 

---------------------------------------------------------------------------

06/17/05 11:17:40 -- deitz

Log message:
	Small fix so return starts showing up in the html dump again.

Modified files:
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

06/17/05 15:28:16 -- deitz

Log message:
	Added working var method test.

Added files:
	chapel/test/functions/deitz/: test_var_method.chpl 
	                              test_var_method.good 

---------------------------------------------------------------------------

06/17/05 15:44:55 -- deitz

Log message:
	Added many tests dealing with how tuples can be implemented, where
	parameters, and type variables.  Some work, some don't.

Added files:
	chapel/test/functions/deitz/: test_typeconstraint1.chpl 
	                              test_typeconstraint1.future 
	                              test_typeconstraint1.good 
	                              test_where_param2.chpl 
	                              test_where_param2.future 
	                              test_where_param2.good 
	                              test_where_param3.chpl 
	                              test_where_param3.good 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation1.chpl 
	                                test_tuple_record_implementation1.future 
	                                test_tuple_record_implementation1.good 
	                                test_tuple_record_implementation10.chpl 
	                                test_tuple_record_implementation10.good 
	                                test_tuple_record_implementation11.chpl 
	                                test_tuple_record_implementation11.future 
	                                test_tuple_record_implementation11.good 
	                                test_tuple_record_implementation12.chpl 
	                                test_tuple_record_implementation12.good 
	                                test_tuple_record_implementation13.chpl 
	                                test_tuple_record_implementation13.future 
	                                test_tuple_record_implementation13.good 
	                                test_tuple_record_implementation2.chpl 
	                                test_tuple_record_implementation2.future 
	                                test_tuple_record_implementation2.good 
	                                test_tuple_record_implementation3.chpl 
	                                test_tuple_record_implementation3.future 
	                                test_tuple_record_implementation3.good 
	                                test_tuple_record_implementation4.chpl 
	                                test_tuple_record_implementation4.good 
	                                test_tuple_record_implementation5.chpl 
	                                test_tuple_record_implementation5.future 
	                                test_tuple_record_implementation5.good 
	                                test_tuple_record_implementation6.chpl 
	                                test_tuple_record_implementation6.good 
	                                test_tuple_record_implementation7.chpl 
	                                test_tuple_record_implementation7.good 
	                                test_tuple_record_implementation8.chpl 
	                                test_tuple_record_implementation8.good 
	                                test_tuple_record_implementation9.chpl 
	                                test_tuple_record_implementation9.good 

---------------------------------------------------------------------------

06/17/05 16:20:09 -- deitz

Log message:
	Added a copyFrom pointer to BaseAST that points to what a BaseAST was
	copied from.  This may be overkill and may not let garbage collection
	work well.  I really only want to keep track of cloned/copied function
	ids.
	
	Fixed a bug in InsertVariableInitializations having to do with the new
	exprType of DefExpr and record constructors.
	
	Fixed a bug in BuildLValueFunctions in which overloaded functions
	could not have var set.
	
	Fixed a bug in which the whereexpr was copied and then lost in
	FnSymbol::copy.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             insertVariableInitializations.cpp 
	                             view.cpp 

---------------------------------------------------------------------------

06/17/05 16:50:36 -- deitz

Log message:
	Removed three futures for tests that are now working.

Removed files:
	chapel/test/functions/deitz/: test_var_function_access2.future 
	chapel/test/types/complex/deitz/: test_complex3.future 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record6.future 

---------------------------------------------------------------------------

06/17/05 17:04:05 -- deitz

Log message:
	Added a simple cache to instantiate_generics so that it won't
	instantiate the same function in the same way multiple times.  This
	leads to function resolution ambiguities.  This cache needs to be
	improved and it's probably worthwhile figuring out why we need a cache
	now.  I thought we weren't going to need one yet.
	
	This fixes all of my tuple record implementation tests and sets the
	stage for a real tuple implementation.
	
	Added a 14th and 15th tuple record implementation test.  It's a big
	win that these worked.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation14.chpl 
	                                test_tuple_record_implementation14.good 
	                                test_tuple_record_implementation15.chpl 
	                                test_tuple_record_implementation15.good 
Removed files:
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation1.future 
	                                test_tuple_record_implementation11.future 
	                                test_tuple_record_implementation13.future 
	                                test_tuple_record_implementation2.future 
	                                test_tuple_record_implementation3.future 
	                                test_tuple_record_implementation5.future 

---------------------------------------------------------------------------

06/20/05 12:20:00 -- bradc

Log message:
	Added some code to c_runtime.h so that low-level codegen
	tests could be re-enabled.  This new code seems to be
	related to the _methodTokenType that the high-level is
	now inserting, so another way to handle this code might
	be to squelch it before the low-level codegen takes place.
	
	John, you may want to review my changes when you get back.

Modified files:
	chapel/compiler/etc/: c_runtime.h 
Removed files:
	chapel/test/lowlevelcg/jplevyak/: NOTEST 

---------------------------------------------------------------------------

06/21/05 13:48:50 -- bradc

Log message:
	Two future tests regarding sequences, motivated by my
	attempt to rewrite SSCA2.  hashEquals uses the #= operator,
	which is not yet implemented.  recordSeq attempts to
	create a sequence of records, but fails because the pass
	to insert sequence literals runs before symbols are
	resolved, so the type of the variable cannot be determined,
	even if it is given in the declaration.
	
	In general, if anyone has recommendations about adding
	records to a sequence of records, let me know -- I
	couldn't find a way to do it that works with the
	current compiler.

Added files:
	chapel/test/types/seq/bradc/: hashEquals.chpl hashEquals.future 
	                              hashEquals.good recordSeq.chpl 
	                              recordSeq.future recordSeq.good 

---------------------------------------------------------------------------

06/21/05 15:11:14 -- bradc

Log message:
	Some rather superficial changes related to getting more
	code in my SSCA2 rewrite through the front-end:
	
	- added #= to the lexer and parser; this is stored
	  as an AssignOp as type GETS_SEQCAT.  Pattern-matched
	  its insertion into analysis.cpp, but none of the
	  rest of the compiler does anything with it yet, so
	  this is only useful for parsing for the time being.
	
	- added cobegin and atomic blocks to the front-end.
	  These are stored as an instance of BlockStmt, which
	  now has a blockType flag that is set to BLOCK_NORMAL,
	  BLOCK_ATOMIC, or BLOCK_COBEGIN.  We're not planning
	  on doing anything for atomic or cobegin blocks in the
	  sequential implementation, so this field can simply
	  be ignored for now.
	
	- fixed up #includes for chapel.y -- all #includes need
	  to go into lexyacc.h in order for make depend to work.
	
	- added some more simple math functions to the prelude
	  -- some of these are implemented inline in a generic
	  way (min, max); others are prototyped as poorly as
	  the previous ones were.  This is just a placeholder
	  until we do math functions correctly.
	
	- added a built-in "numLocales" constant, initialized to
	  1, to the prelude and runtime.  Again, this is a
	  placeholder while we're doing the sequential build.
	  Again, we'll want to implement this better once arrays
	  are supported and we can create an array of locales.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y lexyacc.h 
	                         prelude.chpl 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/distributions/bradc/foundations/: blockdist3.chpl 
Added files:
	chapel/runtime/include/: locales.h 
	chapel/test/ssca/ssca2/: .cvsignore 

---------------------------------------------------------------------------

06/21/05 15:22:15 -- bradc

Log message:
	A cute test that makes sure call-by-name
	parameters for constructors distinguish
	between local identifiers and the
	identifiers used for the fields.  I'm
	happy to say it worked the first time!
	(can't take any credit for it, though).

Added files:
	chapel/test/classes/bradc/: namecheck.chpl namecheck.good 

---------------------------------------------------------------------------

06/21/05 15:49:42 -- deitz

Log message:
	Tuples are now records.  This gets rid of lots of special-cased code
	and is a symmetric change to my recent sequence improvements.  Next is
	arrays and domains.
	
	Unlike the sequence record, the tuple record is created in the
	compiler since it has a different number of types, fields and
	functions depending on how many elements are in the tuple.  These
	records are still instantiated, they are just created by the compiler
	rather than parsed in.
	
	PostAnalysisCleanup, ResolveTypes, and ResolveSymbols now run on all
	modules, not just codegened ones.  This is necessary as code in the
	prelude may have to be instantiated.
	
	Added typeInfo to FloatLiteral.
	
	Removed ';' from after %token declarations in parser.  This is an
	error on the Mac.
	
	Added a new tuple implementation test and two new simple tuple tests.
	
	Removed many tuple futures.
	
	Fixed datablock in prelude and datablock regression.
	
	New regression: arrays/deitz/test_array_integer_3d.
	
	Updated regression file.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/symtab/: postAnalysisCleanup.cpp 
	                         resolveTypes.cpp 
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertLiteralTemps.cpp 
	                             insertLiteralTemps.h 
	                             resolveSymbols.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
	chapel/test/types/type_variables/deitz/: test_datablock3.chpl 
Added files:
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation16.chpl 
	                                test_tuple_record_implementation16.good 
	                                test_tuple_type1.chpl 
	                                test_tuple_type1.good 
	                                test_tuple_type2.chpl 
	                                test_tuple_type2.good 
Removed files:
	chapel/test/functions/jplevyak/: equal-8.future 
	chapel/test/types/tuple/bradc/: returnTuple3.chpl 
	                                writeTuple.chpl 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.chpl 
	                                test_tuple_simple3.chpl 
	                                test_tuple_simple4.chpl 
	                                test_tuple_simple5.chpl 
	                                test_tuple_simple6.chpl 
	                                test_tuple_simple7.chpl 
	chapel/test/types/tuple/jplevyak/: tuple_index-1.chpl 
	                                   tuple_index-2.chpl 

---------------------------------------------------------------------------

06/21/05 17:39:20 -- deitz

Log message:
	Removed noanalysis tuple tests which I failed to remove on my last
	checkin.

Removed files:
	chapel/test/types/tuple/deitz/noanalysis/: .cvsignore COMPOPTS 
	                                           test_tuple_simple1.chpl 
	                                           test_tuple_simple1.good 
	                                           test_tuple_simple2.chpl 
	                                           test_tuple_simple2.good 
	                                           test_tuple_simple3.chpl 
	                                           test_tuple_simple3.good 
	                                           test_tuple_simple4.chpl 
	                                           test_tuple_simple4.good 
	                                           test_tuple_simple5.chpl 
	                                           test_tuple_simple5.good 

---------------------------------------------------------------------------

06/22/05 10:34:15 -- deitz

Log message:
	Sequence literal types no longer need to be known, but it is very
	touchy.  I basically just instantiate the seq record on dtUnknown
	rather than flag an error now.

Modified files:
	chapel/compiler/traversals/: insertLiteralTemps.cpp 

---------------------------------------------------------------------------

06/22/05 11:44:32 -- deitz

Log message:
	Added a function that analysis may think doesn't always return
	something.  Should the error be updated or is this legal?

Added files:
	chapel/test/functions/deitz/: test_return1.chpl 
	                              test_return1.future 
	                              test_return1.good 

---------------------------------------------------------------------------

06/22/05 12:00:47 -- deitz

Log message:
	Added parsing support for iterators.
	
	Added bool 'yield' field to ReturnStmt to indicate that it is a yield
	rather than a return.
	
	Changed bool 'isConstructor' field in FnSymbol to 'fnClass' which can
	be any of FN_FUNCTION, FN_CONSTRUCTOR, or FN_ITERATOR.
	
	Added bool 'noparens' field to FnSymbol that is true if the function
	was defined without parentheses.
	
	Cleaned up parsing of functions.  There is now only one case for
	fndecl rather than three.
	
	Moved check that empty parens are only used on members to a later pass
	(stuck it in though this should be part of a preanalysis
	checkSemantics pass).
	
	Added sequence return test.
	
	Added a future iterator test.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h symbol.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	chapel/compiler/traversals/: applyGettersSetters.cpp 
	                             applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
Added files:
	chapel/test/functions/deitz/: test_iterator1.chpl 
	                              test_iterator1.future 
	                              test_iterator1.good 
	chapel/test/types/seq/deitz/: test_seq_return1.chpl 
	                              test_seq_return1.good 

---------------------------------------------------------------------------

06/22/05 12:57:47 -- deitz

Log message:
	Added a pass to convert interators into functions that return
	sequences of whatever they returned before.
	
	The current plan for arrays and domains is to make these classes that
	contain a special iterator method.  Then for/forall loops over
	sequences, arrays, and domains can be supported by changing them into
	while loops over the sequences returned by the special iterator
	method.
	
	The longer term approach may be to have a set of iterators for domains
	and arrays that can be chosen from past analysis depending on compiler
	optimizations.  We'll discuss this with John when he comes back.
	
	Removed iterator future.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
Added files:
	chapel/compiler/symtab/: reconstructIterators.cpp 
	                         reconstructIterators.h 
Removed files:
	chapel/test/functions/deitz/: test_iterator1.future 

---------------------------------------------------------------------------

06/22/05 14:00:06 -- deitz

Log message:
	Added a couple future tests that show a bug when an instantiable
	record contains a field whose type is another instantiable record.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial5b.chpl 
	                           test_array_class_trial5b.future 
	                           test_array_class_trial5b.good 
	                           test_record_of_record_instantiated.chpl 
	                           test_record_of_record_instantiated.future 
	                           test_record_of_record_instantiated.good 

---------------------------------------------------------------------------

06/23/05 16:11:17 -- mjoyner

Log message:
	Created traversals to find leaf functions and inline them.  Currently, getter/setter functions are the only functions being inlined.

Added files:
	chapel/compiler/traversals/: findLeafFunctions.h 
	                             findLeafFunctions.cpp 
	                             inlineFunctions.h 
	                             inlineFunctions.cpp 

---------------------------------------------------------------------------

06/23/05 16:45:06 -- mjoyner

Log message:
	Got rid of global variable in inlineFunction traversal.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.h 
	                             inlineFunctions.cpp 

---------------------------------------------------------------------------

06/24/05 12:05:06 -- mjoyner

Log message:
	Inlining function traversal works for all leaf functions now.  Note that the inlining function traversal assumes that the code has previously been put in a canonical form.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.cpp 
Added files:
	chapel/compiler/traversals/: replaceReturns.h replaceReturns.cpp 

---------------------------------------------------------------------------

06/24/05 15:10:46 -- deitz

Log message:
	Added inline pragma to getter, setter, and wrapper function symbols.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

06/27/05 10:55:44 -- deitz

Log message:
	Changed the formals of a function from ParamSymbols to DefExprs.
	Removed the init field of ParamSymbols as it can now use the init
	field of the DefExpr.
	
	The only symbols not defined in their own DefExprs now are
	EnumSymbols.
	
	Added a mechanism to traverse an AList backwards (for_alist_backward).
	
	Cleaned and rewrote the code to insert the default wrapper.  It used
	to copy the whole formal list and then remove the formals that didn't
	need to go in the wrapper.  It now simply puts the ones that need to
	be in in.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h symbol.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	                         postAnalysisCleanup.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             clearTypes.cpp findUnknownTypes.cpp 
	                             fixup.cpp insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp verify.cpp 
	                             view.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

06/27/05 11:30:04 -- deitz

Log message:
	Removed DestructureTupleAssignments pass as this is now done before
	analysis in InsertLiteralTemps.
	
	Removed some uses of TupleType but they are in the current IndexType
	so I left them for now.
	
	Update _data record to allocate on construction.
	
	Added a "keep types" pragma for not removing a type from a function
	before codegen.  This can be useful in a new version of malloc that
	takes a type.  It is used now in the _data constructor.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
	                             insertLiteralTemps.cpp 
	chapel/runtime/include/: array.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/type_variables/deitz/: test_datablock3.chpl 
Removed files:
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 
	                             destructureTupleAssignments.h 

---------------------------------------------------------------------------

06/28/05 13:11:15 -- deitz

Log message:
	Simplified and improved the implementation of copy.  Copying a
	DefStmt, for example, now returns a DefStmt, rather than a Stmt.  The
	overall structure of copy is similar; the changes are superficial.
	
	One result of this changes is that copy can no longer be called when
	an object is NULL.  So c->copy() would now seg fault if c is NULL
	rather than work.  To get around this, I added a macro COPY(c) that
	can be used when this might be the case.  Alternatively, one can check
	for NULL.  There are relatively few uses of this macro now.
	
	Simplified pragma implementation.  They are now a vector of strings in
	the BaseAST rather than a BaseAST.  The function hasPragma(char*)
	checks to see if the BaseAST has a specific pragma (using strncmp to
	compare the start of the pragma with the search string).  The function
	addPragma(char*) adds a pragma to a BaseAST's pragma vector.  The
	function copyPragmas() is used by copy to copy pragmas on a BaseAST to
	the result.

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h stmt.h 
	                          symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: legalizeCNames.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             omitForNoAnalysis.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 
	                             verifyASTType.cpp view.cpp 
Removed files:
	chapel/compiler/AST/: pragma.cpp 
	chapel/compiler/include/: pragma.h 

---------------------------------------------------------------------------

06/28/05 13:36:48 -- deitz

Log message:
	Updated my domain class to use the new data.  It doesn't work.  This
	is just an update for Brad.

Modified files:
	chapel/test/arrays/deitz/: test_array_class1.chpl 

---------------------------------------------------------------------------

06/29/05 09:37:03 -- deitz

Log message:
	Three futures for John to look at when he returns.  I think the
	general test_seq_tuple is a simplification of the other two.  It
	creates a sequence and a tuple and it seems that functions of one are
	shared with the other even though they shouldn't be.

Added files:
	chapel/test/arrays/deitz/: test_domain1.chpl test_domain1.future 
	                           test_domain1.good test_domain2.chpl 
	                           test_domain2.future test_domain2.good 
	chapel/test/types/seq/deitz/: test_seq_tuple.chpl 
	                              test_seq_tuple.future 
	                              test_seq_tuple.good 

---------------------------------------------------------------------------

06/29/05 09:48:09 -- deitz

Log message:
	Added a working domain test to capture what works.
	
	Added a future domain test that shows the function I want added by the
	compiler during instantiation.  It doesn't work.

Added files:
	chapel/test/arrays/deitz/: test_domain2D.chpl 
	                           test_domain2D.future 
	                           test_domain2D.good test_domain3.chpl 
	                           test_domain3.good 

---------------------------------------------------------------------------

06/29/05 10:13:58 -- deitz

Log message:
	Moved the pass*-module* output files generated with the -t flag out of
	the log/ directory and into a directory /tmp/chpllog/ that is
	destroyed and created when the -t flag is used.
	
	This greatly improves the compile time with the -t flag because our
	fileserver is slow.  However, is this a problem to rely on the
	location of /tmp/chpllog?

Modified files:
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

06/29/05 13:46:06 -- shannon

Log message:
	Added a new compilation flag, --cg-chpl-lineno.  When this
	flag is used, two global variables are generated,
	_chpl_input_filename and _chpl_input_linenumber.  The
	filename is printed at the start of a function or when it
	changes, and the linenumbers are also printed when they're
	updated.  These variables can now be used for generating
	more descriptive runtime error messages.
	
	Changed the --codegen-cpp-lines flag that I added recently
	to --cg-cpp-lines, and added an environment variable for it,
	CHPL_CG_CPP_LINES.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/main/: driver.cpp 
	chapel/runtime/include/: error.h 
	chapel/runtime/src/: error.c 

---------------------------------------------------------------------------

06/29/05 16:36:44 -- deitz

Log message:
	Cleaned up the html view facility alot, factoring it into its own
	traversal and decreasing the size of the output by a factor of 6.  I
	moved the output back to the log directory where it is not as slow as
	it used to be but still a bit slow on our fileserver.
	
	I also cleaned the output a bit so things stay on the same line more
	frequently.
	
	Indenting is now done with <DL> rather than many &nbsp;'s which
	accounts for a few megabytes of savings.  Other major savings include
	removing the prelude from the output.

Modified files:
	chapel/compiler/main/: passlist.cpp runpasses.cpp 
	chapel/compiler/traversals/: Makefile.share view.cpp view.h 
Added files:
	chapel/compiler/traversals/: htmlview.cpp htmlview.h 

---------------------------------------------------------------------------

06/29/05 16:46:59 -- roxana

Log message:
	Added some tests that seem unrelated to domains.
	The starting point was to work on writing the Chapel class
	for the indefinite domains implementation. To do that, I needed
	a storage (for iterators, etc.) and so I tried to implement a hash
	table for that purpose. I got stuck in various problems (array
	setters and type parameterization) before I could even start
	on doing something. I am checking those tests in since this
	is what I have been working on, even though without much
	success.

Added files:
	chapel/test/domains/roxana/: test_hash_table2.chpl 
	                             test_hash_table.good 
	                             test_hash_table1.good 
	                             test_hash_table1.future 
	                             test_hash_table1.chpl 
	                             test_hash_table.chpl 
	                             test_hash_table2.good 
	                             test_hash_table2.future 
	                             test_hash_table.future 

---------------------------------------------------------------------------

06/29/05 17:00:31 -- deitz

Log message:
	NEW REGRESSION: types/complex/bradc/intfloatelement
	
	Added support for homogeneous tuples as in
	
	  var t : 3*integer;
	
	Parsing support is currently restricted to an integer literal TIMES a
	type given by a single identifier.
	
	Added the _chpl_htuple module to implement this as a record.  There
	are minimal compiler rewrites:
	
	  number * type_identifier
	
	is changed in the parser to
	
	  _htuple(type_identifier, number)
	
	There are no other rewrites.
	
	Homogeneous tuples do not yet work with standard tuples so you can't
	assign one as in
	
	  var t : 3 * integer = (12, 13, 14)
	
	Also because instantiated types can't be fields in a type, these are
	implemented without them and the number of components of a homogeneous
	tuple is currently limited to 3.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/modules/standard/: _chpl_htuple.chpl 
	chapel/test/types/tuple/deitz/: test_htuple1.chpl 
	                                test_htuple1.good 

---------------------------------------------------------------------------

06/30/05 12:14:53 -- deitz

Log message:
	Some cleanup on the parser file.  Superficial.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

06/30/05 12:16:33 -- roxana

Log message:
	Modified the tests I checked in yesterday so that they use
	the _data(...) storage structure rather than arrays for storage
	 per Steve's and Brad's advice. However, _data does
	not work from within a class. I added one more test which
	works for _data outside a class.

Modified files:
	chapel/test/domains/roxana/: test_hash_table2.chpl 
	                             test_hash_table1.future 
	                             test_hash_table1.chpl 
	                             test_hash_table.chpl 
	                             test_hash_table2.future 
	                             test_hash_table.future 
Added files:
	chapel/test/domains/roxana/: test_hash_table3.chpl 
	                             test_hash_table3.good 

---------------------------------------------------------------------------

06/30/05 12:35:37 -- deitz

Log message:
	Changed UseStmt and WithStmt into UseExpr and WithExpr mostly to pave
	the way for future changes.  These expressions can now be found in
	ExprStmts.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: expandClassWiths.cpp 
	                             expandClassWiths.h 
	                             resolveModuleUses.cpp 
	                             resolveModuleUses.h 
	                             verifyASTType.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

06/30/05 13:50:03 -- bradc

Log message:
	This test reveals what appears to be a bug in
	scopeResolveSymbols when using a domain name
	to define a user type that is an index type.
	While I'm not completely surprised that this
	might not work, I was surprised that the
	problem was in scopeResolveSymbols...

Added files:
	chapel/test/domains/bradc/: domainindex.chpl domainindex.future 
	                            domainindex.good 

---------------------------------------------------------------------------

06/30/05 13:54:28 -- deitz

Log message:
	Removed Expr subclass TupleSelect as this is now handled with the
	tuple's this method.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

06/30/05 14:00:16 -- shannon

Log message:
	Added a couple tests for the new compilation
	flag, --codegen-cpp-lines.

Added files:
	chapel/test/compflags/shannon/cpplines/: .cvsignore CLEANFILES 
	                                         PREDIFF cppLines.chpl 
	                                         cppLines.compopts 
	                                         cppLines.good 
	                                         noCppLines.chpl 
	                                         noCppLines.compopts 
	                                         noCppLines.good 

---------------------------------------------------------------------------

06/30/05 17:23:54 -- deitz

Log message:
	With this checkin, there is no longer a list of DefExprs inside a
	DefStmt, but rather a single DefExpr.  This paves the way for
	eliminating DefStmt altogether (using an ExprStmt like for everything
	else), and then eventually making anonymous record types be
	expressions.
	
	This checkin also simplifies alot of code by getting rid of many loops
	that walked over this list of DefExprs.
	
	Note that something like
	
	  var x, y, z : integer;
	
	will now parse equivalently to
	
	  var x;
	  var y;
	  var z : integer;

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	                         removeDeadSymbols.cpp symtab.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

07/01/05 09:07:56 -- deitz

Log message:
	Removed the remains of the internal prelude.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h symscope.h symtab.h 
	chapel/compiler/passes/: createEntryPoint.cpp filesToAST.cpp 
	                         filesToAST.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             resolveSymbols.cpp 
Removed files:
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

07/01/05 09:42:18 -- deitz

Log message:
	I just noticed that on June 21, I deleted ten tuple tests rather than
	their futures.  I just readded all of them and removed eight of their
	futures.

Added files:
	chapel/test/types/tuple/bradc/: returnTuple3.chpl 
	                                writeTuple.chpl 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.chpl 
	                                test_tuple_simple3.chpl 
	                                test_tuple_simple4.chpl 
	                                test_tuple_simple5.chpl 
	                                test_tuple_simple6.chpl 
	                                test_tuple_simple7.chpl 
	chapel/test/types/tuple/jplevyak/: tuple_index-1.chpl 
	                                   tuple_index-2.chpl 
Removed files:
	chapel/test/types/tuple/bradc/: returnTuple3.future 
	                                writeTuple.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple3.future 
	                                test_tuple_simple4.future 
	                                test_tuple_simple5.future 
	                                test_tuple_simple6.future 
	                                test_tuple_simple7.future 

---------------------------------------------------------------------------

07/01/05 09:49:50 -- deitz

Log message:
	Added a test that passes an instantiated type to a function.  Fixed
	some bugs regarding the handling of this test before analysis.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertAnonymousTypes.h 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_foo_instantiated1.chpl 
	                                         test_foo_instantiated1.future 
	                                         test_foo_instantiated1.good 

---------------------------------------------------------------------------

07/01/05 13:47:52 -- deitz

Log message:
	Robustified for_alist and for_alist_backward so that you can remove
	something in the list within these loop macros.
	
	Removed the two futures that I had previously removed the tests for on
	June 21 but that needed some fixes.

Modified files:
	chapel/compiler/include/: alist.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
Removed files:
	chapel/test/types/tuple/jplevyak/: tuple_index-1.future 
	                                   tuple_index-2.future 

---------------------------------------------------------------------------

07/01/05 15:53:11 -- shannon

Log message:
	Added a test for when the --memmax flag is
	not followed by a value.
	
	Added newlines to a couple .goods to please
	the testing system.

Modified files:
	chapel/test/memory/shannon/: memmaxIntOnly.good 
	                             memstatEquals.good 
Added files:
	chapel/test/memory/shannon/: memmaxInput.chpl 
	                             memmaxInput.execopts 
	                             memmaxInput.good 

---------------------------------------------------------------------------

07/01/05 16:04:03 -- deitz

Log message:
	Added a few lines of code to try and better maintain the exprType
	field of the DefExpr even when new DefExprs are created for copied
	symbols.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

07/01/05 16:08:20 -- deitz

Log message:
	Added a simpler test that contains a record with a field that is an
	instantiated record.

Added files:
	chapel/test/arrays/deitz/: 
	                           test_record_of_record_instantiated2.chpl 
	                           test_record_of_record_instantiated2.future 
	                           test_record_of_record_instantiated2.good 

---------------------------------------------------------------------------

07/05/05 09:57:10 -- deitz

Log message:
	Fixed a bug in which the exprType of a field was not copied to the
	parameter in its constructor.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

07/05/05 10:13:10 -- deitz

Log message:
	Updated test output and future.

Modified files:
	chapel/test/types/type_variables/jplevyak/: construct-1.future 
	                                            construct-1.good 

---------------------------------------------------------------------------

07/05/05 11:21:38 -- deitz

Log message:
	Removed the rest of getter hack code that was partially removed when
	_chplget_ was removed.
	
	Removed future for
	test/types/type_variables/jplevyak/test_typevar_class1 which used the
	--newvardef flag to create a getter for a type in a class or record
	though which doesn't use this getter.
	
	Added a new test to make sure a class field can be the same name as a
	variable outside the class.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: verify.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_field1.chpl 
	                            test_record_field1.good 
Removed files:
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_typevar_class1.future 

---------------------------------------------------------------------------

07/05/05 13:29:35 -- jplevyak

Log message:
	Constants are now hashed directly on the binary representation
	and the type.  This fixes types/complex/bradc/intfloatelement.chpl.
	This will also enable interprocedural constant propagation to
	also do constant folding (in the future).

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp sym.cpp 
	chapel/compiler/include/: if1.h sym.h 
	chapel/compiler/vparser/: ast_cf.cpp parse_ast.cpp parse_ast.h 
	                          v.g 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1a.prediff 
	                                         test_clone_class1b.good 
	                                         test_clone_class1b.prediff 

---------------------------------------------------------------------------

07/05/05 14:58:27 -- shannon

Log message:
	Added a test for an invalid memory flag.

Added files:
	chapel/test/memory/shannon/: invalidMemFlag.chpl 
	                             invalidMemFlag.execopts 
	                             invalidMemFlag.good 

---------------------------------------------------------------------------

07/05/05 15:10:51 -- shannon

Log message:
	Woops, I inadvertently tested the wrong error message.

Modified files:
	chapel/test/memory/shannon/: invalidMemFlag.execopts 
	                             invalidMemFlag.good 

---------------------------------------------------------------------------

07/05/05 15:33:27 -- shannon

Log message:
	Added a test for an invalid execution option.

Added files:
	chapel/test/execflags/shannon/: invalidExecOption.chpl 
	                                invalidExecOption.execopts 
	                                invalidExecOption.good 

---------------------------------------------------------------------------

07/05/05 15:57:31 -- deitz

Log message:
	The exprType field of the DefExpr for temporaries in default_wrappers
	is now copied from the DefExpr for the ParamSymbol with the default
	initialization if it has an exprType.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

07/06/05 06:55:54 -- shannon

Log message:
	Added another test for an invalid execution option
	for coverage of the error messages.

Added files:
	chapel/test/execflags/shannon/: unexpectedFlag.chpl 
	                                unexpectedFlag.execopts 
	                                unexpectedFlag.good 

---------------------------------------------------------------------------

07/06/05 07:56:54 -- shannon

Log message:
	Added a test for string overflow of a config
	var passed as a file argument.

Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarFileStringOverflow.chpl 
	                                        configVarFileStringOverflow.execopts 
	                                        configVarFileStringOverflow.good 
	                                        configVarFileStringOverflow.input 

---------------------------------------------------------------------------

07/06/05 08:07:28 -- shannon

Log message:
	Forgot to include this when I added this directory.

Added files:
	chapel/test/compflags/shannon/: .cvsignore 

---------------------------------------------------------------------------

07/06/05 09:02:25 -- shannon

Log message:
	Added a test for attempting to set the value
	of a config var in a module where it has not been
	declared.

Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarNotInModule.chpl 
	                                        configVarNotInModule.execopts 
	                                        configVarNotInModule.good 

---------------------------------------------------------------------------

07/06/05 11:02:27 -- deitz

Log message:
	WhileLoopStmt and ForLoopStmt are no longer subclasses of BlockStmt
	but contain a BlockStmt.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: insertElidedLoops.cpp 
	                             insertVariableInitializations.cpp 
	                             scopeResolveGotos.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

07/06/05 11:07:38 -- shannon

Log message:
	Added the ability to print runtime error messages
	with the chpl filename and corresponding line number,
	where applicable, when the test is compiled with the
	--cg-chpl-lineno option.
	
	Added a copy of all the tests that have changed error
	messages when compiled with the flag.

Modified files:
	chapel/runtime/src/: error.c 
	chapel/test/memory/shannon/: freedWithoutMalloc.execopts 
Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarInvalidBooleanLineno.chpl 
	                                        configVarInvalidBooleanLineno.compopts 
	                                        configVarInvalidBooleanLineno.execopts 
	                                        configVarInvalidBooleanLineno.good 
	                                        configVarInvalidComplexLineno.chpl 
	                                        configVarInvalidComplexLineno.compopts 
	                                        configVarInvalidComplexLineno.execopts 
	                                        configVarInvalidComplexLineno.good 
	                                        configVarInvalidFloatLineno.chpl 
	                                        configVarInvalidFloatLineno.compopts 
	                                        configVarInvalidFloatLineno.execopts 
	                                        configVarInvalidFloatLineno.good 
	                                        configVarInvalidIntegerLineno.chpl 
	                                        configVarInvalidIntegerLineno.compopts 
	                                        configVarInvalidIntegerLineno.execopts 
	                                        configVarInvalidIntegerLineno.good 
	chapel/test/memory/shannon/: freedWithoutMallocLineno.chpl 
	                             freedWithoutMallocLineno.compopts 
	                             freedWithoutMallocLineno.execopts 
	                             freedWithoutMallocLineno.good 
	                             memmaxExceedsLineno.chpl 
	                             memmaxExceedsLineno.compopts 
	                             memmaxExceedsLineno.execopts 
	                             memmaxExceedsLineno.good 
	                             memstatFlagLineno.chpl 
	                             memstatFlagLineno.compopts 
	                             memstatFlagLineno.good 
	                             memtrackFlagLineno.chpl 
	                             memtrackFlagLineno.compopts 
	                             memtrackFlagLineno.good 
	                             reallocWithoutMallocLineno.chpl 
	                             reallocWithoutMallocLineno.compopts 
	                             reallocWithoutMallocLineno.execopts 
	                             reallocWithoutMallocLineno.good 
	chapel/test/memory/shannon/outofmemory/: 
	                                         mallocOutOfMemoryLineno.chpl 
	                                         mallocOutOfMemoryLineno.compopts 
	                                         mallocOutOfMemoryLineno.good 
	chapel/test/trivial/shannon/: readStringOverflowLineno.chpl 
	                              readStringOverflowLineno.compopts 
	                              readStringOverflowLineno.good 
	                              readStringOverflowLineno.stdin 
	                              readWriteBoolLineno.chpl 
	                              readWriteBoolLineno.compopts 
	                              readWriteBoolLineno.good 
	                              readWriteBoolLineno.stdin 
	                              readWriteComplexLineno.chpl 
	                              readWriteComplexLineno.compopts 
	                              readWriteComplexLineno.good 
	                              readWriteComplexLineno.stdin 

---------------------------------------------------------------------------

07/06/05 11:40:17 -- deitz

Log message:
	Added new temp flag --use-expr-type for bool useExprType.
	
	If this flag is used, I try to set the exprType field of the DefExpr
	for everything.
	
	I didn't run any tests to make sure this is done for everything, but
	it does get the common cases.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

07/06/05 13:01:51 -- shannon

Log message:
	Backed out a failing test.  Don't generate assignments
	to the global line number variables for code generated
	from built-in modules.

Modified files:
	chapel/test/trivial/shannon/: readWriteComplexLineno.good 
Added files:
	chapel/test/trivial/shannon/: readWriteComplexLineno.future 

---------------------------------------------------------------------------

07/06/05 13:58:47 -- shannon

Log message:
	Fixed an error in the getStringArg function where I
	checked for only a NULL string and not the empty
	string.
	
	Removed a future test which now prints the message
	I expected thanks to the above correction.
	
	Made a few error messages in arg.c  more descriptive.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/memory/shannon/: memmaxBytes.good memmaxInput.good 
	                             memtraceNoFilename.good 
Removed files:
	chapel/test/memory/shannon/: memtraceNoFilename.future 

---------------------------------------------------------------------------

07/06/05 14:06:34 -- deitz

Log message:
	Due to conflicts in ordering of codegen, changed the general structure
	of codegen so that all types are codegened and all functions are
	prototyped and all global variables are declared in a file called
	_chpl_header.h.  Perhaps this should be changed to a header file whose
	name is based on the user module containing main.
	
	Added the function codegenFunctions to SymScopes because this is what
	needs to be done for each module (given that the types, global
	variables, and function prototypes have already been handled).
	
	Added functions openCFile and closeCFile to files.h to open a single
	file for codegen purposes (rather than a module's three files).
	
	Note that the header files for modules, both internal and not, are no
	longer used but are empty.
	
	Added a new traversal called Flatten in which the methods are removed
	from classes and made into functions.  This used to be done in
	InsertThisParameters.  It is my hope that I can eventually move it
	after ScopeResolveSymbols and also flatten types.  It may also be the
	place to flatten nested functions.
	
	Removed unused (duplicated) special-cased write function for arrays.
	We had two but only need one.
	
	Added != and == over strings along with three test cases that test
	these operators over strings.
	
	Updated .good for test/memory/shannon/jacobi.good and
	test/memory/shannon/printMemTable.good.  With the cname change to
	global variables in a module, the array name that is printed to the
	mem log has changed.  This should ideally be the name not modified by
	the module.  When arrays are classes, this will again be the case so
	there is no pointing in spending effort here.
	
	Added tests for a sequence of integer variables and a sequence of
	classes.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: files.h symbol.h symscope.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/symtab/: Makefile.share symscope.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/memory/shannon/: jacobi.good printMemTable.good 
Added files:
	chapel/compiler/symtab/: codegenOne.cpp codegenOne.h flatten.cpp 
	                         flatten.h 
	chapel/test/types/seq/deitz/: test_seq1d.chpl test_seq1d.good 
	                              test_seq_class1.chpl 
	                              test_seq_class1.good 
	chapel/test/types/string/deitz/: test_string_equal1.chpl 
	                                 test_string_equal1.good 
	                                 test_string_equal2.chpl 
	                                 test_string_equal2.good 
	                                 test_string_equal3.chpl 
	                                 test_string_equal3.good 

---------------------------------------------------------------------------

07/06/05 14:33:38 -- mjoyner

Log message:
	Fixed several bugs in function inlining that were exposed by the test suite.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             inlineFunctions.h 

---------------------------------------------------------------------------

07/06/05 14:35:39 -- deitz

Log message:
	Fixed up the htmlview traversal to look better and deal with some of
	my recent changes.
	
	While I remember, in my last checkin, I mangled all global variable
	cnames to start with the module's cname followed by an underscore.
	This lets us deal with different modules that have the same variable
	names.  This should be eventually subsumed in a general name mangling
	strategy.

Modified files:
	chapel/compiler/traversals/: htmlview.cpp 

---------------------------------------------------------------------------

07/06/05 14:51:27 -- deitz

Log message:
	Added a link to dump.html in the log directory from index.html.  You
	can now click on RunAnalysis in the passlist and you will go to
	analysis's dump of information.

Modified files:
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: htmlview.cpp 

---------------------------------------------------------------------------

07/06/05 17:11:35 -- deitz

Log message:
	Removed pass OmitForNoAnalysis as well as the pragma "omit for
	noanalysis" as these are no longer used and were doing the wrong
	thing.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
	chapel/modules/standard/: _chpl_complex.chpl 
Removed files:
	chapel/compiler/traversals/: omitForNoAnalysis.cpp 
	                             omitForNoAnalysis.h 

---------------------------------------------------------------------------

07/07/05 11:20:52 -- deitz

Log message:
	Added sequence of tuple test case future.

Added files:
	chapel/test/types/seq/deitz/: test_seq_tuple2.chpl 
	                              test_seq_tuple2.future 
	                              test_seq_tuple2.good 

---------------------------------------------------------------------------

07/07/05 11:27:40 -- deitz

Log message:
	Added more complicated sequence of tuple test case future.

Added files:
	chapel/test/types/seq/deitz/: test_seq_tuple3.chpl 
	                              test_seq_tuple3.future 
	                              test_seq_tuple3.good 

---------------------------------------------------------------------------

07/07/05 15:00:40 -- mjoyner

Log message:
	Added 4 future tests because of variable reference problem exposed when creating temporary variables during function inlining so that I could bring function inlining online.

Added files:
	chapel/test/classes/deitz/: test_nested_record1.future 
	                            test_nested_record_function.future 
	chapel/test/arrays/deitz/: test_domain3.future 

---------------------------------------------------------------------------

07/07/05 16:14:59 -- jplevyak

Log message:
	Changed contant_info to return a set of LiteralExpr instead
	of Symbols (since the front end doesn't have literal Symbols).
	Make it possible to pass just a Symbol into constant_info
	(without an AST context).
	Modified HtmlView to annotate the AST with the reaching constant
	(if any) and with the call targets for each AST node.
	This is currently only displayed in the dump associated with
	the analysis pass... we could modify this so that it is displayed
	in all passes following analysis.
	Added NAME labels for each SYM and cross-linked them (this
	is how I got the links for "calls".  Also made the definition
	of an FnSymbol call html_print_symbol with "true" for the "def"
	field (which I assume was an oversight).

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: htmlview.cpp htmlview.h 

---------------------------------------------------------------------------

07/07/05 16:19:34 -- jplevyak

Log message:
	Don't add the "calls" annotation to FnCall nodes since the first
	argument is the call target already.

Modified files:
	chapel/compiler/traversals/: htmlview.cpp 

---------------------------------------------------------------------------

07/07/05 16:39:39 -- jplevyak

Log message:
	Rename defvar -> defexpr (to match the AST naming).
	Attach ast information to more intermediates.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

07/07/05 16:53:38 -- jplevyak

Log message:
	One more file for the vardef => defexpr change.

Modified files:
	chapel/compiler/etc/: c_runtime.h 

---------------------------------------------------------------------------

07/07/05 16:54:12 -- jplevyak

Log message:
	remove special case for Records/Unions/Tuples from handling of DefExpr

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

07/07/05 16:57:36 -- mjoyner

Log message:
	Added function inlining to pass list.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 

---------------------------------------------------------------------------

07/07/05 17:00:52 -- mjoyner

Log message:
	Small change to function inlining code.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             findLeafFunctions.cpp 
	                             findLeafFunctions.h 

---------------------------------------------------------------------------

07/07/05 17:10:56 -- deitz

Log message:
	Added Mack's fourth future.

Added files:
	chapel/test/classes/deitz/: test_nested_record2.future 

---------------------------------------------------------------------------

07/07/05 17:22:27 -- deitz

Log message:
	Simplified the for macro over sequences and robustified it.  Added
	forall macro to the runtime for looping over a sequence.  This uses
	the sequence for macro.
	
	Added an arithmetic sequence record to _chpl_seq.  It's called _aseq.
	
	Removed Expr subclass SpecialBinOp and moved 'by' to BinOp.
	
	Added a new pass PreAnalysisHacks for things that I need temporarily
	but will probably go.  In this pass, I added a change to for and
	forall statements so that something like
	
	  forall i in D { ... }
	
	is changed to
	
	  forall i in D.forall() { ... }
	
	This uses the iterator and the sequence forall implementation.  In the
	_aseq record, there is such an iterator.  In the seq record, there is
	also such an iterator (though it is somewhat redundant currently).  It
	should probably just return itself.
	
	Removed 'by' function from the prelude and I added a 'by' function
	that operates on an arithmetic sequence and an integer.
	
	This change may be the way to go, but it is currently hacked so that
	if D is a domain, this transformation won't take place.
	
	Added a use of _chpl_seq to _chpl_htuple since this module has a
	forall of an arithmetic sequence.
	
	Added a new iterator test that is used in a forall loop.  Added a
	couple simple forall over arithmetic sequence tests.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
	                             insertLiteralTemps.cpp 
	                             verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: preAnalysisHacks.cpp 
	                             preAnalysisHacks.h 

---------------------------------------------------------------------------

07/07/05 17:25:56 -- deitz

Log message:
	Attach to last checkin.  I committed from the wrong directory.

Modified files:
	chapel/modules/standard/: _chpl_htuple.chpl _chpl_seq.chpl 
	chapel/runtime/include/: seq.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: chain.good declprintdom.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good printempty.good 
	                                  printstring.good 
	                                  usebeforedef.good var2.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/: declprintdom.good 
	chapel/test/types/seq/bradc/: length.modify.good 
Added files:
	chapel/test/arrays/deitz/: test_forall1.chpl test_forall1.good 
	                           test_forall2.chpl test_forall2.good 
	chapel/test/functions/deitz/: test_iterator2.chpl 
	                              test_iterator2.good 

---------------------------------------------------------------------------

07/07/05 17:26:46 -- deitz

Log message:
	Removed CompleteDimExpr and FloodExpr from the compiler since they are
	no longer in the language.  Updated mvm_seq protoast test.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/trivial/bradc/protoast/: mvm-seq.chpl mvm-seq.good 

---------------------------------------------------------------------------

07/08/05 08:49:28 -- jplevyak

Log message:
	Fix a bug in MapHash which was indexing 1 off the end of an array.
	This fixes the valgrind failures from the constants change.

Modified files:
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

07/08/05 11:19:13 -- deitz

Log message:
	Disabled use of VAR_REF for temporaries in the InsertFunctionTemps and
	EliminateReturns passes.  These temporaries are now normal.  Disabled
	the extra pointer on getters of records.  Since we handle records via
	pointers, the problem this was meant to solve doesn't exist.
	
	Removed Mack's futurizations.  Added another simple test case of a.b.c.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             insertFunctionTemps.cpp 
Added files:
	chapel/test/classes/deitz/: test_adotbdotc.chpl 
	                            test_adotbdotc.good 
Removed files:
	chapel/test/arrays/deitz/: test_domain3.future 
	chapel/test/classes/deitz/: test_nested_record1.future 
	                            test_nested_record2.future 
	                            test_nested_record_function.future 

---------------------------------------------------------------------------

07/08/05 11:53:26 -- roxana

Log message:
	Added an empty placeholder pass to detect when name
	collisions occur. The tricky part to begin working on it is that
	I still have to figure out how to test it in the presence of Steve's
	scattered collision resolution.
	
	Added a compiler flag --tmpMangling which would enable
	this pass.

Modified files:
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/main/: passlist.h driver.cpp passlist.cpp 
Added files:
	chapel/compiler/symtab/: findCollidingNames.h 
	                         findCollidingNames.cpp 

---------------------------------------------------------------------------

07/08/05 15:58:28 -- deitz

Log message:
	Added the ability to index into strings with an integer or an
	arithmetic sequence.  These are interesting tests of overloading the
	this method on primitive types and using the new arithmetic sequences.
	
	Added the length method to arithmetic sequences.
	
	Added a few tests for the above features.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: chain.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good printempty.good 
	                                  printstring.good 
	                                  usebeforedef.good var2.good 
	                                  writen.good writetwo.good 
	chapel/test/types/seq/bradc/: length.modify.good 
Added files:
	chapel/test/types/seq/deitz/: test_aseq1.chpl test_aseq1.good 
	                              test_aseq2.chpl test_aseq2.good 
	chapel/test/types/string/deitz/: test_string_select1.chpl 
	                                 test_string_select1.good 
	                                 test_string_shuffle.chpl 
	                                 test_string_shuffle.good 

---------------------------------------------------------------------------

07/11/05 11:59:42 -- deitz

Log message:
	Made the default for a type variable passed to the default constructor
	be dtUnknown.  This allows them to be left off.
	
	Added a few new tests, two of which future because this does not seem
	to work.  It looks like the wrong function is resolved.  This is a low
	priority future.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Added files:
	chapel/test/classes/deitz/suite1/: test1.chpl test1.good 
	                                   test2.chpl test2.future 
	                                   test2.good test3.chpl 
	                                   test3.good test4.chpl 
	                                   test4.future test4.good 
	                                   test5.chpl test5.good 

---------------------------------------------------------------------------

07/11/05 12:22:37 -- jplevyak

Log message:
	Fixed an issue in constant_info which was causing
	SEGV with the -t option in some cases.
	Recompute the entire type hierarchy after type instantitions --
	  this can be made incremental, but for now it fixes an issue.
	There are 3 new failures, these are exposed problems with
	  visible functions.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp pattern.cpp 

---------------------------------------------------------------------------

07/11/05 12:24:17 -- jplevyak

Log message:
	

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

07/11/05 12:24:48 -- jplevyak

Log message:
	Remove an old regression which is nolonger regressing.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

07/11/05 12:36:59 -- roxana

Log message:
	Added small string utility that implements the functionality
	of creating unique names for mangling. Still postponing getting
	to name mangling since I still did not figure out how to go about
	testing in the presence of an existing scheme.

Added files:
	chapel/compiler/util/: uniqueName.cpp 
	chapel/compiler/include/: uniqueName.h 

---------------------------------------------------------------------------

07/11/05 15:17:39 -- shannon

Log message:
	Increased the size of the buffer for an
	int-to-string conversion, and added an INT_FATAL
	if the buffer is overwritten.

Modified files:
	chapel/compiler/util/: stringutil.cpp 

---------------------------------------------------------------------------

07/11/05 15:56:52 -- shannon

Log message:
	Added the filename and line number to the
	output of an assertion failure, and updated
	the assert test output to reflect this.
	
	Refactored the generation of the assert()
	and halt() functions in the specializeParenOpExprs
	traversal.

Modified files:
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 
	chapel/test/trivial/shannon/quit/: assert.good 

---------------------------------------------------------------------------

07/12/05 11:37:43 -- deitz

Log message:
	Added a new pass called instantiate that instantiates classes and
	records before analysis if possible.  Disabled by default, use
	--instantiate to turn this on.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: instantiate.cpp instantiate.h 

---------------------------------------------------------------------------

07/12/05 11:45:54 -- deitz

Log message:
	Added test that takes tuples (instantiated types) as arguments and future.

Added files:
	chapel/test/types/tuple/deitz/: test_tuple_function1.chpl 
	                                test_tuple_function1.future 
	                                test_tuple_function1.good 

---------------------------------------------------------------------------

07/12/05 13:29:38 -- mjoyner

Log message:
	Added a no-inline flag to disable function inlining.  Function inlining is enabled by default.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 

---------------------------------------------------------------------------

07/12/05 13:58:02 -- deitz

Log message:
	In preparation for cleaning up the DefExpr::exprType and Symbol::type
	boundaries, I removed LikeType.  Instead this is currently stored as
	an ExprType with a ParenOpExpr of the function "typeof".  It is
	currently resolved before analysis in the pass RemoveLikeTypes as
	before.

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/symtab/: removeLikeTypes.cpp 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

07/12/05 15:01:01 -- shannon

Log message:
	Fixed the failing readWriteComplexLineno.future test.
	Assignments to the global line number variables
	(generated by use of the --cg-chpl-lineno runtime
	option) are no longer generated from built-in
	modules.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h 
Removed files:
	chapel/test/trivial/shannon/: readWriteComplexLineno.future 

---------------------------------------------------------------------------

07/12/05 16:55:49 -- mjoyner

Log message:
	A good start on creating a pass that removes nested function definitions.

Added files:
	chapel/compiler/traversals/: removeNestedFunctions.h 
	                             removeNestedFunctions.cpp 

---------------------------------------------------------------------------

07/12/05 17:06:35 -- roxana

Log message:
	Seems like there was a syntax error on this one (some) forgotten
	';'. I just got a fresh copy and it would not compile. Just added
	the semicolon.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

07/13/05 08:24:16 -- shannon

Log message:
	Fixed the memmaxIntOnly.future test.  Made the error
	message more descriptive, and changed a conditional.
	Updated the output of a couple of tests.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/memory/shannon/: memmaxBytes.good memmaxIntOnly.good 
Removed files:
	chapel/test/memory/shannon/: memmaxIntOnly.future 

---------------------------------------------------------------------------

07/13/05 10:18:19 -- deitz

Log message:
	Eliminated the ability to declare multiple variables of the same type
	by writing, for example,
	
	  var x y z : integer;
	
	In so doing, cleaned up some of the parse code which I hope to
	further.
	
	Eliminated the line numbers associated in createEntryPoint pass as
	these have little meaning and are somewhat random.
	
	NOTE: Currently
	
	  var x, y, z : integer;
	
	has the meaning that z is of type integer, but x and y have unknown
	type.  Their types must be inferred.  This seems already to be the
	result of many chapel errors and misunderstandings.  I'd like to
	discuss alternatives more fully.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/arrays/deitz/: test_array_assign1.chpl 
	                           test_array_assign2.chpl 
	                           test_array_assign3.chpl 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/functions/bradc/: multipleParamsSameType.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	chapel/test/trivial/deitz/: test_var_decl1.chpl 
	                            test_var_decl2.chpl 

---------------------------------------------------------------------------

07/13/05 13:26:45 -- deitz

Log message:
	Removed methods on DefStmt in preparation for its removal.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: flatten.cpp 
	                         insertDefaultInitVariables.cpp 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             eliminateReturns.cpp 
	                             insertFunctionTemps.cpp 
	                             insertIndexType.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertThisParameters.h 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

07/13/05 13:58:01 -- shannon

Log message:
	Fixed the memstatEquals.future test.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/memory/shannon/: memstatEquals.good 
Removed files:
	chapel/test/memory/shannon/: memstatEquals.future 

---------------------------------------------------------------------------

07/14/05 11:08:34 -- jplevyak

Log message:
	Fixed possible SEGV in dispatch log

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

07/14/05 13:49:56 -- jplevyak

Log message:
	Added an option to remove the caching of callees (not yet enabled
	since it depends on other features).
	Added additional debugging information for type/dispatch errors.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

07/14/05 14:04:01 -- deitz

Log message:
	Removed DefStmt.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: flatten.cpp 
	                         insertDefaultInitVariables.cpp 
	                         reconstructIterators.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             eliminateReturns.cpp htmlview.cpp 
	                             inlineFunctions.cpp 
	                             inlineFunctions.h 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertIndexType.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeNestedFunctions.cpp 
	                             removeNestedFunctions.h 
	                             specializeParenOpExprs.cpp 
	                             transformLetExprs.cpp 
	                             verifyASTType.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

07/14/05 14:47:25 -- shannon

Log message:
	Increase the virtual memory use limit to 48M
	so the mallocOutOfMemory test can compile on
	the linux64 and sun platforms.

Modified files:
	chapel/test/memory/shannon/outofmemory/: sub_test 

---------------------------------------------------------------------------

07/15/05 11:18:13 -- deitz

Log message:
	Reworked parsing of ?type.  It now results in an error during parsing.
	This is better (structurally) than how we had it before (where it was
	simply ignored).

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y prelude.chpl 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function3.future 
	                                         test_typevar_function4.future 

---------------------------------------------------------------------------

07/15/05 11:52:34 -- jplevyak

Log message:
	Added
	
	float execution_frequency_info(Expr *);
	float execution_frequency_info(FnSymbol *);
	
	to analysis.h
	
	Cleaned up call_info a bit.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

07/15/05 12:18:27 -- deitz

Log message:
	Reworked and simplified EnumType and EnumSymbol as per our discussion
	yesterday.  EnumSymbol has no extra fields.  EnumType has a list of
	DefExprs rather than a list of EnumSymbols.  Now every symbol has a
	unique DefExpr.
	
	Temporary regressions of Enums until analysis is worked in:
	
	[Error matching compiler output for classes/deitz/test_union1]
	[Error matching compiler output for classes/deitz/test_union2]
	[Error matching compiler output for classes/deitz/test_union4]
	[Error matching compiler output for classes/deitz/test_union_method1]
	[Error matching compiler output for classes/deitz/test_union_method2]
	[Error matching compiler output for classes/deitz/test_union_method3]
	[Error matching compiler output for classes/jplevyak/union_type_hierarchy-1]
	[Error matching compiler output for classes/jplevyak/union_type_hierarchy-2]
	[Error matching compiler output for classes/jplevyak/union_type_hierarchy-3-error]
	[Error matching compiler output for execflags/shannon/configs/configVarBadEnum]
	[Error matching compiler output for execflags/shannon/configs/configVarFileBadEnum]
	[Error matching compiler output for execflags/shannon/configs/configVarFileGoodEnum]
	[Error matching compiler output for execflags/shannon/configs/configVarGoodEnum]
	[Error matching compiler output for execflags/shannon/configs/help/varNameEnumQM]
	[Error matching compiler output for flowanalysis/newast/enum]
	[Error matching compiler output for trivial/bradc/protoast/codegen/enum]

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verify.cpp 

---------------------------------------------------------------------------

07/15/05 12:23:29 -- jplevyak

Log message:
	Fix bug with nested function lookup.
	
	function foo() {
	 function bar() {
	   writeln(0);
	 }
	 bar();
	}
	foo();
	
	now works up to codegen.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

07/15/05 12:53:53 -- jplevyak

Log message:
	Fix the enum tests save 1:
	
	[Error matching compiler output for types/type_variables/deitz/test_typevar_record6]
	
	which is a problem which occurs before analysis:
	
	[scopeResolveSymbols.cpp:135] Error: Variable 'j' used before it is defined (../test/types/enum/deitz/test_enum6.chpl:7)
	
	the error seems bogus:
	
	b:compiler [295] % cat  ../test/types/enum/deitz/test_enum6.chpl
	var j : integer = 2;
	
	while (j < 100) {
	  j *= (j + 1);
	}
	
	enum ExprTypes { ADD, MUL, DIV, NEG=j };

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

07/15/05 13:05:37 -- deitz

Log message:
	Fixed regression of test/types/enum/deitz/test_enum6.chpl due to enum
	changes.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

07/15/05 18:11:02 -- roxana

Log message:
	Added a sorting facility to Vec<T> class in preparation for
	name mangling. Added comparison function to symbols.

Modified files:
	chapel/compiler/symtab/: findCollidingNames.h 
	                         findCollidingNames.cpp 
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h vec.h 

---------------------------------------------------------------------------

07/15/05 18:15:03 -- roxana

Log message:
	Forgot to comment out some stuff.

Modified files:
	chapel/compiler/symtab/: findCollidingNames.cpp 

---------------------------------------------------------------------------

07/18/05 09:24:07 -- jplevyak

Log message:
	Patch broken build.  To be reviewed by the author.

Modified files:
	chapel/compiler/symtab/: findCollidingNames.cpp 

---------------------------------------------------------------------------

07/18/05 10:03:46 -- roxana

Log message:
	Forgot to comment out some code in the header file with the
	last commit. John caught that.

Modified files:
	chapel/compiler/symtab/: findCollidingNames.h 
	                         findCollidingNames.cpp 

---------------------------------------------------------------------------

07/18/05 14:52:14 -- jplevyak

Log message:
	Added support for variables scoped from nested function context
	into analysis.
	Added a test case for variables in nested functions.  It is currently
	a future since there is no support in codegen.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp fun.cpp sym.cpp 
	chapel/compiler/include/: fa.h fun.h sym.h symbol.h 
Added files:
	chapel/test/trivial/jplevyak/: variables_in_nested_function.chpl 
	                               variables_in_nested_function.future 
	                               variables_in_nested_function.good 

---------------------------------------------------------------------------

07/18/05 16:57:39 -- mjoyner

Log message:
	Updating traversal code that removes nested function definitions.

Modified files:
	chapel/compiler/traversals/: removeNestedFunctions.h 
	                             removeNestedFunctions.cpp 
Added files:
	chapel/compiler/traversals/: findEnclosingScopeVarUses.h 
	                             findEnclosingScopeVarUses.cpp 
	                             simpleNestedFunctionMove.h 
	                             simpleNestedFunctionMove.cpp 

---------------------------------------------------------------------------

07/18/05 16:59:29 -- mjoyner

Log message:
	Minor change in inline function traversal in method that determines when a function will be codegened.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.cpp 

---------------------------------------------------------------------------

07/19/05 07:57:28 -- mjoyner

Log message:
	Small change to fix bug.

Modified files:
	chapel/compiler/traversals/: removeNestedFunctions.cpp 

---------------------------------------------------------------------------

07/19/05 09:20:49 -- jplevyak

Log message:
	comment use of "aspect" to force nominal typing of default parameters

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

07/19/05 10:12:36 -- deitz

Log message:
	Futurized the following tests:
	
	   arrays/bradc/   domarr
	   arrays/deitz/
	     jacobi jacobi2 jacobi3 test_anon_domain1 test_anon_domain2
	     test_array_assign1 test_array_assign2 test_array_assign3
	     test_array_basic1 test_array_float1 test_array_init1
	     test_array_init3 test_array_integer_2d test_array_integer_3d
	     test_array_of_class1 test_array_of_record1 test_array_of_string1
	     test_array_of_string2 test_basic1d1 test_basic1d2 test_basic1d3
	     test_basic1d4
	   compflags/shannon/cpplines/   cppLines noCppLines
	   distributions/bradc/foundations/   blockdist3
	   domains/bradc/   paramRank writeIndex writeIndex2
	   domains/roxana/
	     test_index_assign test_index_expr test_index_expr0
	     test_index_expr2
	   flowanalysis/newast/   declprintdom2 domarr noop protoast_test
	   functions/bradc/   arrayArg intents-arrays2
	   memory/shannon/
	     jacobi memmaxBytes memmaxExceeds memmaxExceedsLineno memstatFlag
	     memstatFlagLineno memstatPrint printMemTable
	     thresholdWithoutTrace
	   reductions/bradc/manual/
	     identisinferredvar identisvar inferstatetype inferstatetype2
	     manual threeuses-cast threeuses twouses usestate usestate2
	   trivial/bradc/   declprintdom2
	   trivial/bradc/protoast/   mg-seq-concrete mg-seq mvm-seq test
	   trivial/deitz/   test_scope1 test_scope2
	
	These tests use arrays.  If they are not testing arrays, it may be
	appropriate to rewrite the test so that it does not use arrays.
	
	There are now only four regressions.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/: REGRESSIONS 
Added files:
	chapel/test/arrays/bradc/: domarr.future 
	chapel/test/arrays/deitz/: jacobi.future jacobi2.future 
	                           jacobi3.future 
	                           test_anon_domain1.future 
	                           test_anon_domain2.future 
	                           test_array_assign1.future 
	                           test_array_assign2.future 
	                           test_array_assign3.future 
	                           test_array_basic1.future 
	                           test_array_float1.future 
	                           test_array_init1.future 
	                           test_array_init3.future 
	                           test_array_integer_2d.future 
	                           test_array_integer_3d.future 
	                           test_array_of_class1.future 
	                           test_array_of_record1.future 
	                           test_array_of_string1.future 
	                           test_array_of_string2.future 
	                           test_basic1d1.future 
	                           test_basic1d2.future 
	                           test_basic1d3.future 
	                           test_basic1d4.future 
	chapel/test/compflags/shannon/cpplines/: cppLines.future 
	                                         noCppLines.future 
	chapel/test/distributions/bradc/foundations/: blockdist3.future 
	chapel/test/domains/bradc/: paramRank.future writeIndex.future 
	                            writeIndex2.future 
	chapel/test/domains/roxana/: test_index_assign.future 
	                             test_index_expr.future 
	                             test_index_expr0.future 
	                             test_index_expr2.future 
	chapel/test/flowanalysis/newast/: declprintdom2.future 
	                                  domarr.future noop.future 
	                                  protoast_test.future 
	chapel/test/functions/bradc/: arrayArg.future 
	                              intents-arrays2.future 
	chapel/test/memory/shannon/: jacobi.future memmaxBytes.future 
	                             memmaxExceeds.future 
	                             memmaxExceedsLineno.future 
	                             memstatFlag.future 
	                             memstatFlagLineno.future 
	                             memstatPrint.future 
	                             printMemTable.future 
	                             thresholdWithoutTrace.future 
	chapel/test/reductions/bradc/manual/: identisinferredvar.future 
	                                      identisvar.future 
	                                      inferstatetype.future 
	                                      inferstatetype2.future 
	                                      manual.future 
	                                      threeuses-cast.future 
	                                      threeuses.future 
	                                      twouses.future 
	                                      usestate.future 
	                                      usestate2.future 
	chapel/test/trivial/bradc/: declprintdom2.future 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.future 
	                                     mg-seq.future 
	                                     mvm-seq.future test.future 
	chapel/test/trivial/deitz/: test_scope1.future 
	                            test_scope2.future 

---------------------------------------------------------------------------

07/19/05 10:39:56 -- mjoyner

Log message:
	Adding tests for nested function definitions.

Added files:
	chapel/test/trivial/mjoyner/nestedfndef/: nested_fndef1.chpl 
	                                          nested_fndef1.future 
	                                          nested_fndef1.good 
	                                          nested_fndef2.chpl 
	                                          nested_fndef2.future 
	                                          nested_fndef2.good 
	                                          nested_fndef3.chpl 
	                                          nested_fndef3.future 
	                                          nested_fndef3.good 
	                                          nested_fndef4.chpl 
	                                          nested_fndef4.future 
	                                          nested_fndef4.good 
	                                          nested_fndef5.chpl 
	                                          nested_fndef5.future 
	                                          nested_fndef5.good 

---------------------------------------------------------------------------

07/19/05 11:28:37 -- mjoyner

Log message:
	Remove nested function traversal now handles cases where a nested function uses a variable defined in a function more than 1 level up in its enclosing function parent tree.
	
	An example can be found in the variables_in_nested_function test case.

Modified files:
	chapel/compiler/traversals/: removeNestedFunctions.h 
	                             removeNestedFunctions.cpp 
	                             findEnclosingScopeVarUses.cpp 

---------------------------------------------------------------------------

07/19/05 11:46:14 -- shannon

Log message:
	Changed a bunch of tests that were using
	arrays unnecessarily for the purpose of the
	test, and removed their futures.

Modified files:
	chapel/test/compflags/shannon/cpplines/: cppLines.chpl 
	                                         cppLines.good 
	                                         noCppLines.chpl 
	                                         noCppLines.good 
	chapel/test/memory/shannon/: memmaxBytes.chpl memmaxExceeds.chpl 
	                             memmaxExceeds.execopts 
	                             memmaxExceedsLineno.chpl 
	                             memmaxExceedsLineno.execopts 
	                             memmaxExceedsLineno.good 
	                             memstatFlag.chpl 
	                             memstatFlagLineno.chpl 
	                             memstatFlagLineno.good 
	                             memstatPrint.chpl memstatPrint.good 
	                             thresholdWithoutTrace.chpl 
Removed files:
	chapel/test/compflags/shannon/cpplines/: cppLines.future 
	                                         noCppLines.future 
	chapel/test/memory/shannon/: memmaxBytes.future 
	                             memmaxExceeds.future 
	                             memmaxExceedsLineno.future 
	                             memstatFlag.future 
	                             memstatFlagLineno.future 
	                             memstatPrint.future 
	                             thresholdWithoutTrace.future 

---------------------------------------------------------------------------

07/19/05 13:19:00 -- jplevyak

Log message:
	Tuple Destructuring now works for arguments up to codegen.
	fields are now "Symbol" (though they can be VarSymbol or ParamSymbol).

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: postAnalysisCleanup.cpp 
	                         resolveTypes.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Added files:
	chapel/test/trivial/jplevyak/: destruct-arg-1.chpl 
	                               destruct-arg-1.future 
	                               destruct-arg-1.good 

---------------------------------------------------------------------------

07/19/05 17:09:56 -- mjoyner

Log message:
	Added nested function removal to passlist.  Got rid of futures since it passes those tests.

Modified files:
	chapel/compiler/traversals/: findEnclosingScopeVarUses.cpp 
	                             simpleNestedFunctionMove.cpp 
	                             Makefile.share 
	chapel/compiler/main/: passlist.h passlist.cpp 
Removed files:
	chapel/test/trivial/mjoyner/nestedfndef/: nested_fndef1.future 
	                                          nested_fndef2.future 
	                                          nested_fndef3.future 
	                                          nested_fndef4.future 
	                                          nested_fndef5.future 
	chapel/test/trivial/jplevyak/: 
	                               variables_in_nested_function.future 

---------------------------------------------------------------------------

07/20/05 09:19:38 -- jplevyak

Log message:
	Added a test variables in nested functions which tests that they
	are mutable and that the mutations are shared with the surrounding
	function.  We could implement this as passing a pointer.
	Note: GCC directly supports nested functions but G++ does not.

Added files:
	chapel/test/trivial/jplevyak/: 
	                               variables_in_nested_function-2.chpl 
	                               variables_in_nested_function-2.future 
	                               variables_in_nested_function-2.good 

---------------------------------------------------------------------------

07/20/05 09:48:27 -- roxana

Log message:
	Completed a first version of name mangling scheme. It handles
	function names, types, and global variables. Local variables
	will be handled on scope basis. It will not be a problem to add
	those once the present scheme is tested a bit more.
	
	There are few problems with testing its functionality. A brute
	force demangling scheme works to the point that it does
	interfere with some hidden convention used for cnames (uncomment)
	the indicated code to try it out. Therefore I think Steve should
	take a look and maybe we can come up with a way to slowly
	integrate the new scheme once we are sure that it does what
	we want. More functionality needs to and will be added.

Modified files:
	chapel/compiler/symtab/: findCollidingNames.h 
	                         findCollidingNames.cpp 
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/util/: uniqueName.cpp Makefile.share 
	chapel/compiler/include/: uniqueName.h vec.h 

---------------------------------------------------------------------------

07/20/05 16:36:15 -- deitz

Log message:
	Note: two new regressions:
	
	[Error matching compiler output for classes/deitz/test_anon_record1]
	[Error matching compiler output for classes/deitz/test_anon_record3]
	
	Types are now parsed in as expressions allowing for things like
	"foo(integer)" and "foo.elt_type".  These types are stored on the
	DefExpr in the exprType field.  The Symbol's type is dtUnknown.  It is
	filled in before analysis in many cases but only when the type is
	fully qualified.  For example,
	
	  var i : integer;
	
	would be parsed in so that the DefExpr of i is a Variable of an
	UnresolvedSymbol named integer.  After ScopeResolveSymbols, when the
	Variable becomes a TypeSymbol, the Symbol::type field of i is set.
	
	Because types are now parsed as expressions, I changed the
	implementation of CastExpr which used to only contain a Type* newType
	along with an expression.  It now contains an Expr* newType and a
	Type* type.  These are updated twice in the code.  Once in
	InsertDefaultInitVariables (where it was used) and once in
	PreAnalysisHacks to make sure that simple types are resolved.  Casts
	to things like "foo(integer)" or "foo(t)" have not yet been tested or
	supported.
	
	Similarly, UserType is changed to contain an Expr* defExpr and a Type*
	defType rather than just a Type* type.
	
	Modified the traversal of DefExpr so that if it is a function, the
	return type in the ExprType will be parsed within the ParamScope scope
	of the function, allowing for things like
	
	  function f(type t, x : t) : t
	
	Previously this was hacked in ScopeResolveSymbols.
	
	Moved pass InsertAnonymousTypes up in the passlist now that arrays and
	domains are out.  This pass can be dramatically simplified.
	
	Changed the parsing of anonymous records.  Rather than return a Type*
	without a symbol, they now are a DefExpr in the type and the
	TypeSymbol is named _anon_record*.  This is then handled in a post
	parsing pass (currently InsertAnonymousTypes) where it is moved.
	
	Added verify routine to Variable to make sure that Variable::var is
	not NULL.  It is a top priority to create verify methods for every
	BaseAST subclass.
	
	Removed ExprType and UnresolvedType as they are no longer necessary.
	
	Removed the tricky code in ScopeResolveSymbols used to fixup up and
	resolve types.
	
	Removed temporary compiler flag useExprType.
	
	Removed future for test/classes/deitz/test_myseq_record2 which I
	noticed was working while making this change.
	
	Improved HtmlView so that it doesn't print out the ID number of an
	UnresolvedSymbol nor allow it to be clicked on.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h driver.h expr.h symtab.h 
	                          type.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         reconstructIterators.cpp symtab.cpp 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             htmlview.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertAnonymousTypes.h 
	                             insertLiteralTemps.cpp 
	                             insertLiteralTemps.h 
	                             preAnalysisHacks.cpp 
	                             preAnalysisHacks.h 
	                             removeNestedFunctions.cpp 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	                             updateSymbols.cpp verifyASTType.cpp 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/deitz/: test_myseq_record2.good 
	chapel/test/flowanalysis/newast/: chain.good codegen_test.good 
	                                  enum.good globalref.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good sum_type-1.good 
	                                  sum_type-2.good 
	                                  usebeforedef.good 
Removed files:
	chapel/test/classes/deitz/: test_myseq_record2.future 

---------------------------------------------------------------------------

07/20/05 16:36:50 -- deitz

Log message:
	Fixed a bug in sequence concatenation that showed up when the first
	sequence was empty.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/seq/bradc/: length.modify.good 

---------------------------------------------------------------------------

07/20/05 16:37:30 -- deitz

Log message:
	Added two demo programs for the review to the testing system.

Added files:
	chapel/test/trivial/deitz/demo/: sample1.chpl sample1.good 
	                                 sample2.chpl sample2.good 

---------------------------------------------------------------------------

07/20/05 16:43:39 -- deitz

Log message:
	Futurized the two newest regressions as they are now handled in a very
	different way.  The new idea is to make anonymous records records that
	are defined in a function.

Added files:
	chapel/test/classes/deitz/: test_anon_record1.future 
	                            test_anon_record3.future 

---------------------------------------------------------------------------

07/20/05 16:47:52 -- deitz

Log message:
	Added a future test of a record in a function.  Should its constructor
	be a nested function?

Added files:
	chapel/test/classes/deitz/: test_record_in_function1.chpl 
	                            test_record_in_function1.future 
	                            test_record_in_function1.good 

---------------------------------------------------------------------------

07/20/05 16:58:26 -- deitz

Log message:
	Added four nested function tests and two futures.  test_nested2.chpl
	shows similar symptoms to the function in record test I checked in
	earlier.

Added files:
	chapel/test/functions/deitz/nested/: test_nested1.chpl 
	                                     test_nested1.good 
	                                     test_nested2.chpl 
	                                     test_nested2.future 
	                                     test_nested2.good 
	                                     test_nested3.chpl 
	                                     test_nested3.good 
	                                     test_nested4.chpl 
	                                     test_nested4.future 
	                                     test_nested4.good 

---------------------------------------------------------------------------

07/20/05 17:12:28 -- jplevyak

Log message:
	Add new pass preAnalysisCleanup.  Currently this computes the
	FnSymbol::isGeneric and Type::isGeneric flags.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
Added files:
	chapel/compiler/passes/: preAnalysisCleanup.cpp 
	                         preAnalysisCleanup.h 

---------------------------------------------------------------------------

07/21/05 12:22:44 -- mjoyner

Log message:
	Fixed bug that was counting nested function var uses found inside of nested function definitions as variables that needed to be added to the argument list.

Modified files:
	chapel/compiler/traversals/: findEnclosingScopeVarUses.cpp 

---------------------------------------------------------------------------

07/21/05 12:24:52 -- deitz

Log message:
	Removed IndexType, DomainType, ArrayType, and TupleType.  Removed
	ArrayRef.  Removed some associated code.  Removed four passes.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h symbol.h 
	                          symtab.h type.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp resolveTypes.h 
	                         symtab.cpp 
	chapel/compiler/traversals/: Makefile.share inlineFunctions.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertAnonymousTypes.h 
	                             insertVariableInitializations.cpp 
	                             preAnalysisHacks.cpp 
	                             removeNamedParameters.cpp 
	                             resolveModuleUses.cpp 
	                             resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             verifyASTType.cpp 
Added files:
	chapel/test/classes/deitz/suite1/: .cvsignore 
Removed files:
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertAnonymousDomains.h 
	                             insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	                             insertIndexType.cpp 
	                             insertIndexType.h 

---------------------------------------------------------------------------

07/21/05 12:26:49 -- mjoyner

Log message:
	Removing these 2 future tests since we now pass them.

Removed files:
	chapel/test/functions/deitz/nested/: test_nested2.future 
	                                     test_nested4.future 

---------------------------------------------------------------------------

07/21/05 13:26:46 -- jplevyak

Log message:
	Fixed bugs in the coercion and order wrappers whereby the return
	 value was not getting propogated (missing ReturnStmt).
	Fixed bug in the order wrapper where the first order change was
	 being ignormed (left over from when the first entry wasn't used).
	Fixed a bug in creation of the order wrapper table in which
	 a reorder entry would sometimes not be passed along.
	This fixes a number of problems with named arguments and "void" appearing
	  during coersions (e.g. 1 + "one").

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 

---------------------------------------------------------------------------

07/21/05 13:32:58 -- deitz

Log message:
	Added support for builtin function 'length' on strings.
	
	Modified demo/sample2.chpl to use a string that can be passed in to
	the command line.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/trivial/deitz/demo/: sample2.chpl sample2.good 
	chapel/test/types/seq/bradc/: length.modify.good 

---------------------------------------------------------------------------

07/21/05 13:40:16 -- roxana

Log message:
	Completed the handling of variables in the mangling scheme. Added the
	nested variables handling. This was working for a while, but not tested
	extensively. The whole scheme has to be tested more with the current
	mangling turned off.

Modified files:
	chapel/compiler/symtab/: findCollidingNames.cpp 

---------------------------------------------------------------------------

07/21/05 13:50:30 -- roxana

Log message:
	Forgot to comment out some code with my last commit.

Modified files:
	chapel/compiler/symtab/: findCollidingNames.cpp 

---------------------------------------------------------------------------

07/21/05 13:54:12 -- deitz

Log message:
	Added 8 default wrapper tests.  1 future.

Added files:
	chapel/test/functions/deitz/default/: test_default1.chpl 
	                                      test_default1.good 
	                                      test_default2.chpl 
	                                      test_default2.good 
	                                      test_default3-error.chpl 
	                                      test_default3-error.good 
	                                      test_default3.chpl 
	                                      test_default3.good 
	                                      test_default4-error.chpl 
	                                      test_default4-error.future 
	                                      test_default4-error.good 
	                                      test_default4.chpl 
	                                      test_default4.good 
	                                      test_default5.chpl 
	                                      test_default5.good 
	                                      test_default6.chpl 
	                                      test_default6.good 

---------------------------------------------------------------------------

07/21/05 14:22:34 -- deitz

Log message:
	Added 10 named parameter and named and default value parameter tests,
	3 futures.

Added files:
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed1.chpl 
	                                           test_defaultnamed1.future 
	                                           test_defaultnamed1.good 
	                                           test_defaultnamed2.chpl 
	                                           test_defaultnamed2.future 
	                                           test_defaultnamed2.good 
	                                           test_defaultnamed3.chpl 
	                                           test_defaultnamed3.good 
	chapel/test/functions/deitz/named/: test_named1.chpl 
	                                    test_named1.good 
	                                    test_named2.chpl 
	                                    test_named2.good 
	                                    test_named3-error.chpl 
	                                    test_named3-error.good 
	                                    test_named3.chpl 
	                                    test_named3.good 
	                                    test_named4.chpl 
	                                    test_named4.good 
	                                    test_named5.chpl 
	                                    test_named5.good 
	                                    test_named6-error.chpl 
	                                    test_named6-error.future 
	                                    test_named6-error.good 

---------------------------------------------------------------------------

07/21/05 14:56:19 -- deitz

Log message:
	Made it so that the cname of a symbol is copied if the symbol is
	copied.
	
	Added a test of a nested function that has default values for its
	arguments.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/functions/deitz/nested/: test_nested5.chpl 
	                                     test_nested5.good 

---------------------------------------------------------------------------

07/21/05 15:17:40 -- bradc

Log message:
	Have had a long-standing problem on my cygwin build with
	the presence of the FILES files that we store in the
	compiler directory -- for some reason the Makefiles trip
	over these in an ugly way.  Put a little platform-dependent
	hook into the make process so that FILES files would be
	removed on cygwin during the build in order to prepare
	for the demo.  Will continue to try to sort out why this
	is a problem in the background in hopes of removing the
	hook (which shouldn't affect anyone except cygwin users).

Modified files:
	chapel/compiler/make/: Makefile.compiler.foot 
	chapel/make/: Makefile.cygwin 

---------------------------------------------------------------------------

07/21/05 15:25:41 -- deitz

Log message:
	Renamed type variable in seq record to "elt_type" as in the Spec.
	
	Changed parsing of OF so that
	
	  var s : foo of integer
	
	is equivalent to
	
	  var s : foo(elt_type=integer)
	
	rather than
	
	  var s : foo(integer)
	
	as it was before.
	
	Reworked impacted tests.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record2.chpl 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record4.chpl 
	                                         test_typevar_record5.chpl 
	                                         test_typevar_record6.chpl 

---------------------------------------------------------------------------

07/21/05 15:41:27 -- deitz

Log message:
	Fixed a bug in the runtime support code for iterating over sequences
	in which iterating over an empty sequence resulted in a seg fault.

Modified files:
	chapel/runtime/include/: seq.h 

---------------------------------------------------------------------------

07/21/05 16:22:26 -- bradc

Log message:
	This is an extremely cosmetic change that I've had in mind
	for some time, and which seemed like it might be nice for
	the demo.  Made it so that when the --print-commands flag
	is used, a few additional lines are printed indicating
	when files are being code generated and beautified (the
	commands that were being printed were doing things like
	renaming these files, so this makes the narrative of
	what's going on slightly clearer from the file system
	point-of-view).

Modified files:
	chapel/compiler/backend/: beautify.cpp 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/util/: mysystem.cpp 

---------------------------------------------------------------------------

07/22/05 09:04:55 -- deitz

Log message:
	Renamed fields of ForallExpr and ForLoopStmt to make them more
	consistent.  Cleaned up their implementations.  The field Expr* domain
	and AList<Expr>* domains is now AList<Expr>* iterators in both of
	them.  It is a list to allow for zippered iteration.
	
	The ForLoopStmt's bool forall flag is now an enum called
	forLoopStmtTag that says whether it is a for, forall, or ordered
	forall.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: htmlview.cpp preAnalysisHacks.cpp 
	                             scopeResolveGotos.cpp 

---------------------------------------------------------------------------

07/22/05 09:22:25 -- deitz

Log message:
	Added a simple test case that initializes a variable declared as a
	float with an integer and make sure it prints out a float.

Added files:
	chapel/test/trivial/deitz/: test_var_decl_coerce.chpl 
	                            test_var_decl_coerce.good 

---------------------------------------------------------------------------

07/22/05 09:46:07 -- deitz

Log message:
	Added another working seq of class test.  Added a future seq of record
	test.

Added files:
	chapel/test/types/seq/deitz/: test_seq_class2.chpl 
	                              test_seq_class2.good 
	                              test_seq_record1.chpl 
	                              test_seq_record1.future 
	                              test_seq_record1.good 

---------------------------------------------------------------------------

07/22/05 09:49:50 -- deitz

Log message:
	Removed two futures that now work and should work.

Removed files:
	chapel/test/types/complex/jplevyak/: complex-1.future 
	                                     complex-2.future 

---------------------------------------------------------------------------

07/22/05 09:55:51 -- deitz

Log message:
	Removed five futures that now work and should work.

Removed files:
	chapel/test/classes/deitz/: test_anon_record1.future 
	                            test_anon_record2.future 
	                            test_anon_record3.future 
	                            test_myseq_record3.future 
	                            test_record_in_function1.future 

---------------------------------------------------------------------------

07/22/05 10:08:59 -- deitz

Log message:
	Broke the demo trio code into one that is cloned and one that is
	instantiated.  The cloned one has a future.  It looks like a coercion
	wrapper is being made for writing out an integer.

Added files:
	chapel/test/trivial/deitz/demo/: sample1a.chpl sample1a.future 
	                                 sample1a.good sample1b.chpl 
	                                 sample1b.good 

---------------------------------------------------------------------------

07/22/05 11:29:58 -- deitz

Log message:
	Added two tests, one future, of calling a method from within a method.

Added files:
	chapel/test/classes/deitz/: test_method9.chpl test_method9.good 
	                            test_method9a.chpl 
	                            test_method9a.future 
	                            test_method9a.good 

---------------------------------------------------------------------------

07/22/05 14:58:44 -- deitz

Log message:
	REGRESSIONS UPDATE NOTE:
	  Trading 2 regressions for 1: trivial/mjoyner/seq/seq_reverse,
	  types/seq/deitz/test_seq_reverse1 now work;
	  classes/deitz/test_nested_record2 now fails.
	
	Reworked the sequence implementation so that appending, prepending,
	and concatenating copy the sequence.  Eventually we'll want to
	optimize this, but for the time being this is a safer implementation.
	
	Removed two futures.
	
	Added two new tests, to test a tuple with an inferred type and to test
	a clone function in an instantiated class that returns the constructor
	using the same type variable.

Modified files:
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             preAnalysisHacks.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/seq/bradc/: length.modify.good 
	chapel/test/types/seq/deitz/: test_seq_return1.chpl 
Added files:
	chapel/test/functions/deitz/default/: .cvsignore 
	chapel/test/functions/deitz/defaultnamed/: .cvsignore 
	chapel/test/functions/deitz/named/: .cvsignore 
	chapel/test/functions/deitz/nested/: .cvsignore 
	chapel/test/trivial/deitz/demo/: .cvsignore 
	chapel/test/types/tuple/deitz/: test_tuple_simple1a.chpl 
	                                test_tuple_simple1a.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class10.chpl 
	                                         test_typevar_class10.good 
Removed files:
	chapel/test/types/seq/bradc/: returnSeq2.future 
	chapel/test/types/seq/deitz/: test_seq4.future 

---------------------------------------------------------------------------

07/22/05 15:01:30 -- jplevyak

Log message:
	new future

Added files:
	chapel/test/classes/deitz/: test_myseq_record2.future 

---------------------------------------------------------------------------

07/22/05 15:03:41 -- jplevyak

Log message:
	new future

Added files:
	chapel/test/classes/deitz/: test_myseq_record3.future 

---------------------------------------------------------------------------

07/22/05 15:27:46 -- jplevyak

Log message:
	TypeSymbol::type used to be the type which the symbol defined
	rather than the type of the symbol itself which would be
	a MetaType.
	
	This large change introduces TypeSymbol::definition which is
	now the type defined by the symbol, and makes TypeSymbol::type
	the MetaType (which is also accessible from Type::meta_type).

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: preAnalysisCleanup.cpp 
	chapel/compiler/symtab/: codegenOne.cpp 
	                         computeVisibleFunctions.cpp flatten.cpp 
	                         insertDefaultInitVariables.cpp 
	                         removeDeadSymbols.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             collectASTS.cpp 
	                             expandClassWiths.cpp htmlview.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             instantiate.cpp 
	                             scopeResolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             updateSymbols.cpp verify.cpp 

---------------------------------------------------------------------------

07/22/05 15:45:47 -- deitz

Log message:
	Changed seq method reverse into a function (as in the Spec) that takes
	a second optional argument dim (which must be one for the current
	implementation since we only support rank one sequences).

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/trivial/mjoyner/seq/: seq_reverse.chpl 
	chapel/test/types/seq/bradc/: length.modify.good 
	chapel/test/types/seq/deitz/: test_seq_reverse1.chpl 

---------------------------------------------------------------------------

07/22/05 16:37:25 -- roxana

Log message:
	Cleaned up some tests, their futures, and good files in an attempt to
	understand what is working and not. The reported error is:
	
	assert fa.cpp:146: v->sym->global_scope
	fail: seg fault

Modified files:
	chapel/test/domains/roxana/: test_hash_table2.chpl 
	                             test_hash_table1.good 
	                             test_hash_table1.future 
	                             test_hash_table1.chpl 
	                             test_hash_table2.good 
	                             test_hash_table2.future 
	                             test_hash_table.future 

---------------------------------------------------------------------------

07/22/05 16:53:44 -- jplevyak

Log message:
	Updated the future with better information.

Modified files:
	chapel/test/domains/roxana/: test_hash_table1.future 
	                             test_hash_table2.future 

---------------------------------------------------------------------------

07/22/05 16:55:11 -- jplevyak

Log message:
	Fix a possible endless loop during analysis from a for converted to a while.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

07/25/05 19:25:58 -- jplevyak

Log message:
	Fixed a memory bug dealing with the default parameter cache.
	Cleaned up some of the references to pointers to embedded arrays in vec.h.
	Added an #ifdef to disable the instantiation cache in symbol.cpp as
	  there is already a cache in pattern.cpp that I needed to test.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

07/26/05 08:42:54 -- jplevyak

Log message:
	Add external interface for tagging generics

Modified files:
	chapel/compiler/passes/: preAnalysisCleanup.cpp 
	                         preAnalysisCleanup.h 

---------------------------------------------------------------------------

07/26/05 12:40:36 -- jplevyak

Log message:
	Store the substitutions and a pointer to the pre-image (instantiatedFrom)
	in FnSymbol and Type.  This is to support unifying an instantiated type
	and the generic type.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: preAnalysisCleanup.cpp 
	                         preAnalysisCleanup.h 

---------------------------------------------------------------------------

07/29/05 15:20:03 -- deitz

Log message:
	Removed NoOpStmt.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             insertVariableInitializations.cpp 
	                             removeNamedParameters.cpp 
	                             scopeResolveGotos.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

07/29/05 15:45:05 -- deitz

Log message:
	Removed SimpleSeqExpr.  Arithmetic sequences are now formed into
	constructor calls to _aseq at parse time.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

07/29/05 16:16:52 -- deitz

Log message:
	Removed Expr methods intVal and precedence as these will need to be
	substantively revisited after BinOp, UnOp, AssignOp, and ParenOpExpr
	are unified into CallExpr.
	
	Futurized test/types/enum/deitz/test_enum5 because this test
	initializes an enum symbol with an expression, in this case, -1.  Do
	we need a way to compute this value?  Should we require that all enum
	symbols be 'param' integers?  This is not so easy to compute since
	unary minus can be overloaded.  In general, we do need a way to fold
	constants and params.  How should we do this?

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
Added files:
	chapel/test/types/enum/deitz/: test_enum5.future 

---------------------------------------------------------------------------

08/01/05 09:28:01 -- jplevyak

Log message:
	Task list from July 2005 Meeting

Added files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/01/05 09:42:01 -- deitz

Log message:
	Tagged a couple tasks in the Tasks file.  Elaborated on a couple.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/01/05 10:12:40 -- roxana

Log message:
	Removed getType() from the compiler. It took longer to run
	the tests than doing this.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/test/domains/roxana/: test_hash_table1.chpl 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

08/01/05 10:17:04 -- jplevyak

Log message:
	Add "Accum" class which uses a Set and a Vec to accumulate
	  a set of things while preserving the order.
	Fix a possible SEGV in on the logging code from accessing
	  NULL elements of a set.
	Sort the Symbols for instantiated code to eliminate another case
	  of non-determinism.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/include/: pnode.h vec.h 

---------------------------------------------------------------------------

08/01/05 10:20:52 -- jplevyak

Log message:
	Add constant folding of parameters and checking for overloading of +/- on
	primitive types.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/01/05 10:22:25 -- roxana

Log message:
	Removed some more getType related code -- my search
	somehow overlooked those.

Modified files:
	chapel/compiler/include/: type.h 
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

08/01/05 10:25:03 -- deitz

Log message:
	Removed isComputable functionality in preparation for unifying UnOp,
	BinOp and AssignOp.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: checkSemantics.cpp 
Added files:
	chapel/test/types/enum/deitz/: test_enum6.future 

---------------------------------------------------------------------------

08/01/05 12:21:24 -- deitz

Log message:
	Fixed a minor bug I let slip through in which uninitialized params
	were flagged as being initialized with variables.

Modified files:
	chapel/compiler/traversals/: checkSemantics.cpp 

---------------------------------------------------------------------------

08/01/05 12:44:27 -- deitz

Log message:
	Fixed a small bug in parameter initialization code.  Futurized two
	tests that require constant folding of parameters or determining that
	expressions are parameters.

Modified files:
	chapel/compiler/traversals/: checkSemantics.cpp 
Added files:
	chapel/test/trivial/roxana/: test_param_decl1.future 
	                             test_param_init.future 

---------------------------------------------------------------------------

08/01/05 13:37:23 -- jplevyak

Log message:
	Grab SizeofExpr, CastExpr and "aspect"

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/01/05 14:53:48 -- deitz

Log message:
	Added a line of code to deal with the case when a string is copied and
	the type (which used to be accessed via Type::getType()) is a UserType.
	
	Back to four regressions as in the REGRESSIONS file.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

08/01/05 16:02:48 -- deitz

Log message:
	Added bool globals postFixup, postScopeResolution, and postAnalysis to
	indicate where we are in compilation.  These are documented in
	passlist.h as to where they are set.
	
	Made the pass Verify be called implicitly after Fixup.  Removed the
	many Verify passes from the passlist.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.h runpasses.cpp 

---------------------------------------------------------------------------

08/01/05 16:21:00 -- deitz

Log message:
	Tagged creating verify routines, class inheritance, constructed
	classes, and ClassType unification.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/01/05 16:23:43 -- deitz

Log message:
	Added and tagged the task to do compile-time-constant folding.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/01/05 16:28:31 -- roxana

Log message:
	Updated the task list.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/01/05 16:42:18 -- deitz

Log message:
	A small change to allow IntLiterals and BoolLiterals to be constructed
	out of either a string or an int or bool, not both.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

08/01/05 16:59:59 -- mjoyner

Log message:
	Adding support to enable iterators to use nested functions instead of sequences.

Added files:
	chapel/compiler/traversals/: createNestedFuncIterators.h 
	                             createNestedFuncIterators.cpp 

---------------------------------------------------------------------------

08/02/05 09:12:15 -- deitz

Log message:
	Changed task which said to change WithExpr and UseExpr into functions.
	Instead these should be unified into one expressions, but not into
	functions especially once they support their extended syntax.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/02/05 10:25:50 -- deitz

Log message:
	Added verify functions to every BaseAST subclass which are executed
	during verification (between every pass).  Folded in the tests of
	astType performed in VerifyASTType.  These tests are now executed
	between every pass rather than just before analysis.  Removed the pass
	VerifyASTType.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h stmt.h symbol.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: verifyASTType.cpp verifyASTType.h 

---------------------------------------------------------------------------

08/02/05 13:09:57 -- jplevyak

Log message:
	Removed CastExprLike (CastExpr now adopts both behaviors).
	Removed SizeofExpr (this is now a function).
	Added replaceChild for Variable to allow the var to be replaced.
	Removed newType = NULL in preAnalysisHacks since the expression
	  will be interpreted by analysis.
	Changed insertThisParameter and buildClassConstructors to
	  use the new _chpl_alloc function to allocate StructuralTypes
	Removed "typeof" which wasn't getting used anyway... now it uses CastExpr.
	Added Stmt::noCodegen and Expr::noCodegen to get rid of all the
	  ;\n pairs cluttering up the output files.
	Added support for _chpl_alloc to low level codegen.
	Modified type_is_used to be even more forgiving.
	Added "pure_return" primitive.
	Gave MetaTypes their own TypeSymbols (so that the field wasn't NULL)
	  as a special case.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp cg.cpp fa.cpp fun.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/include/: alist.h baseAST.h expr.h fun.h stmt.h 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
	                             preAnalysisHacks.cpp 
	                             processParameters.cpp 

---------------------------------------------------------------------------

08/02/05 15:00:37 -- deitz

Log message:
	Removed trivial setArgs routine from ParenOpExpr.
	
	Moved verify pass after html dump pass so that if there is an error in
	verification and -t was used, the dump for that pass has printed.
	
	Changed some of the code (still commented out) to verify that every
	symbol in the Symboltable was traversed in the tree.  The INT_FATAL is
	still commented out and there are at least two bugs remaining.  I
	fixed one.  See below.
	
	Problem 1.  ProcessParameters does what is known to be troublesome.
	It replaces a parent to where it is in the traversal.  We need more of
	a canonical form for where functions can appear so that this can be
	simplified.
	
	Problem 2.  TransformLetExprs messes up the scopes of the let
	variables that it moves.
	
	Fixed a bug in ReconstructIterators in which the temporary was
	inserted in the wrong scope.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: processParameters.cpp verify.cpp 

---------------------------------------------------------------------------

08/02/05 15:42:34 -- jplevyak

Log message:
	Cleanup type_is_used.
	Added an #ifdef to add the "description" string to the _chpl_malloc
	call.  This results in a bad free().  I don't understand why
	so I ifdef'd it out with the conditional: STEVE_COULD_YOU_CHECK_THIS.
	Perhaps it should really go to Shannon.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

08/02/05 16:01:10 -- shannon

Log message:
	Added a new standard module _chpl_file.chpl.
	
	At present the 'file' class contains four data members:
	filename, mode, path, and fp (file pointer), and two
	methods: open and close.
	
	Added a test to set the filename using the constructor
	and to change the mode from its default value.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/types/file/: .cvsignore CLEANFILES 
	                         initFilenameMode.chpl 
	                         initFilenameMode.good 

---------------------------------------------------------------------------

08/02/05 16:51:47 -- mjoyner

Log message:
	Iterators are now working with nested functions.  They need to be tested more before added to the passlist.

Modified files:
	chapel/compiler/traversals/: createNestedFuncIterators.h 
	                             createNestedFuncIterators.cpp 

---------------------------------------------------------------------------

08/02/05 17:04:58 -- deitz

Log message:
	Removed ForwardingSymbol.  Much cleaner.  Module use still lacks
	generality, however.  There are no uses of uses, no renaming, ...
	
	Uses are now associated with a scope and not a module.
	
	Updated a few .goods that changed when Shannon changed the prelude.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symbol.h symscope.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 
	                             scopeResolveSymbols.cpp verify.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: enum.good sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/types/seq/bradc/: length.modify.good 

---------------------------------------------------------------------------

08/02/05 17:48:48 -- jplevyak

Log message:
	Removed some cruft about EXPR_SEQ.
	Change CastExpr to set the "aspect".
	sort global variables before writing them to the anlysis log.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/analysis/: analysis.cpp clone.cpp 

---------------------------------------------------------------------------

08/03/05 11:53:25 -- jplevyak

Log message:
	Removed "aspect", now using CastExpr.
	Add CastExpr for default parameters where the
	  intent is not OUT or INOUT and where the type is specified.
	Made is_Value_Type, is_Scalar_Type and is_Reference_Type
	  all deref UserType
	  Made a similar change in analysis.cpp for is_reference_type(Sym*) etc.
	Modified cast_value primitive to obey the semantics of CastExpr.
	Modified coerce to defref UserType

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp cg.cpp fa.cpp 
	chapel/compiler/include/: fa.h symbol.h 

---------------------------------------------------------------------------

08/03/05 12:05:03 -- jplevyak

Log message:
	Roxana's changes:
	  Removed UserInitVar
	  Removed dereferences of the UserInitVar::expr field
	John's changes:
	  - Added Vec<FnSymbol*> initAssign to DefExpr
	    store the resolutions from resolveSymbols to
	      insertVariableInitializations
	**** NOTE *****
	   The code in insertVariableInitialization is
	   not complete.  It depends on record assignment functions resolving
	   correctly (which they currently don't).
	   There is an ifdef OVERLOADED_ASSIGNMENT_FIXED
	   which should be turned on when that is fixed to complete the change.
	  - Added 2 new CALL_INFO_FIND types:
	       CALL_INFO_FIND_ASSIGN,    //  >  these find disjoint sets
	       CALL_INFO_FIND_NON_ASSIGN // /
	  - used the above in resolveSymbols to differentiate the
	    potentially overloaded = of the "DefExpr::init" value to the
	      new variable from the constuctor, both of which are
	      resolved on the DefExpr.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: postAnalysisCleanup.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             checkSemantics.cpp 
	                             createConfigVarTable.cpp 
	                             insertVariableInitializations.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

08/03/05 13:59:30 -- jplevyak

Log message:
	Updated tasks for "aspect" and UserInitExpr

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/03/05 14:04:33 -- jplevyak

Log message:
	Sorted tasks so that untaken ones are at the top and completed
	ones are at the bottom.
	
	Also, moved MemberAccess elimination to stage 2 to coincide with
	  MemberAccess => getter/setter tranform since otherwise large
	  amounts of code in analysis.cpp will have to be rewritten only
	  to be deleted in stage 2.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/03/05 16:37:32 -- mjoyner

Log message:
	Added support for iterators to use nested function definition.  The nested function calls inside the iterator function are inlined by default. Also added are several test cases.

Modified files:
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	                             Makefile.share 
	chapel/compiler/main/: passlist.h passlist.cpp 
Added files:
	chapel/test/trivial/mjoyner/iterators/: .cvsignore 
	                                        nest_func_iterator1.chpl 
	                                        nest_func_iterator1.good 
	                                        nest_func_iterator2.chpl 
	                                        nest_func_iterator2.good 
	                                        nest_func_iterator3.chpl 
	                                        nest_func_iterator3.good 
	                                        nest_func_iterator4.chpl 
	                                        nest_func_iterator4.good 
	                                        nest_func_iterator5.chpl 
	                                        nest_func_iterator5.good 

---------------------------------------------------------------------------

08/03/05 16:52:52 -- mjoyner

Log message:
	Changed results of this test that was based on line numbers of files that have been modified.

Modified files:
	chapel/test/types/seq/bradc/: length.modify.good 

---------------------------------------------------------------------------

08/03/05 17:05:13 -- mjoyner

Log message:
	Modified files that were depending on specific error line numbers of specific files that have since changed.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

08/04/05 08:52:05 -- jplevyak

Log message:
	Fix valgrind failures.  Incorrect update of get_ast_children().

Modified files:
	chapel/compiler/AST/: baseAST.cpp 

---------------------------------------------------------------------------

08/04/05 08:58:47 -- shannon

Log message:
	Small refactor of the 'run' method: pulled duplicate code
	out to a function.

Modified files:
	chapel/compiler/traversals/: resolveModuleUses.cpp 

---------------------------------------------------------------------------

08/04/05 10:55:58 -- deitz

Log message:
	Removed UnOp, BinOp, AssignOp, and FnCall, folding them into ParenOpExpr.
	
	Added an opTag field to ParenOpExpr which is used if it is a builtin
	operator after analysis.  It is used before analysis as well for both
	builtin and non-builtin operators.
	
	Added a second form of constructing a ParenOpExpr which takes an OpTag
	(enum) and one or two arguments.
	
	Added stub functions for +=, etc. to get past scopeResolveSymbols.
	How should these actually be handled?
	
	Added overloaded functions for unary operators.  These are not
	currently working.  Actually, the code for resolving operators is a
	little shaky.  These changes should make it easier.
	
	Added another AList constructor for initializing a list with two
	elements.  So lists can now be set up to initially contain zero, one,
	or two elements.  This is especially useful for binary operators which
	have lists of two elements, but also turns out to be fairly common.
	Perhaps it should even be extended and combined to make one
	constructor with a number of arguments that have default values.
	
	Changed += and *= in the sequence module to use assignment separate
	from + and * because of some problems.  Futurized
	test/functions/bradc/intents-classes.chpl which fails because of a
	problem resolving the op= functions when applied to a member access.
	Is something like x.a += ...
	
	Added a function to complex
	
	  function +(x : float, y : complex)
	
	so we can handle literals of the form 1.2 + 3.4i.  I agree that this
	should use a coercion wrapper, but that isn't working yet.  Changed
	the complex to be constructed imaginary first which allows for the
	common case of complex(2.3) being equivalent to 2.3i.  Simplified
	ComplexLiteral to just hold the complex part.  Removed special folding
	of + and - expressions into the complex literal.  This can be done
	still, but must be done later anyway.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h type.h 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             checkSemantics.cpp 
	                             createNestedFuncIterators.cpp 
	                             eliminateReturns.cpp 
	                             findLeafFunctions.cpp 
	                             findUnknownTypes.cpp htmlview.cpp 
	                             inlineFunctions.cpp 
	                             inlineFunctions.h 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertUnionChecks.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             replaceReturns.cpp 
	                             resolveModuleUses.cpp 
	                             resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	chapel/modules/standard/: _chpl_complex.chpl _chpl_seq.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/test/memory/shannon/: printFinalMemStat.good 
	chapel/test/types/seq/bradc/: length.modify.good 
Added files:
	chapel/test/functions/bradc/: intents-classes.future 

---------------------------------------------------------------------------

08/04/05 11:06:48 -- deitz

Log message:
	Removed SizeofExpr class prototype.

Modified files:
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

08/04/05 11:59:28 -- deitz

Log message:
	Fixed the _chpl_malloc bug that Shannon tracked down and removed the
	#if that John put in.
	
	The problem was that the sizeof was now being taken of the pointer,
	not the struct.  In the un #defed code, an underscore was put in front
	of the name of the type, as that is what we want to take the sizeof
	for malloc purposes.  I put it back in.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

08/04/05 12:22:04 -- deitz

Log message:
	Removed SeqExpr.  Sequence literals are now parsed into calls to the
	sequence constructor with appends tacked on.  This still relies on
	instantiated a record with dtUnknown which we don't believe will work
	in the long-term.  That's okay regarding this change.
	
	Removed Expr::resolved since it hasn't been used for a long time.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	chapel/test/types/seq/bradc/: length.modify.good 

---------------------------------------------------------------------------

08/04/05 13:26:40 -- deitz

Log message:
	Removed ComplexLiteral.  It didn't exist for very long anyway.  It is
	now translated into a constructor call of the complex record earlier.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 

---------------------------------------------------------------------------

08/04/05 13:44:48 -- deitz

Log message:
	Renamed ParenOpExpr CallExpr.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	                         reconstructIterators.cpp 
	                         removeLikeTypes.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             applyGettersSetters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             checkSemantics.cpp 
	                             createNestedFuncIterators.cpp 
	                             createNestedFuncIterators.h 
	                             eliminateReturns.cpp 
	                             findLeafFunctions.cpp 
	                             findUnknownTypes.cpp htmlview.cpp 
	                             inlineFunctions.cpp 
	                             inlineFunctions.h 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertUnionChecks.cpp 
	                             insertVariableInitializations.cpp 
	                             instantiate.cpp 
	                             preAnalysisHacks.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             removeNestedFunctions.cpp 
	                             removeNestedFunctions.h 
	                             replaceReturns.cpp 
	                             resolveModuleUses.cpp 
	                             resolveSymbols.cpp 
Added files:
	chapel/compiler/traversals/: specializeCallExprs.cpp 
	                             specializeCallExprs.h 
Removed files:
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 

---------------------------------------------------------------------------

08/04/05 13:46:58 -- deitz

Log message:
	Updated task list with completed tasks.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/04/05 14:08:51 -- mjoyner

Log message:
	Added a report inlining flag (use: --report-inlining) that will print out all the functions that were inlined.
	
	Also turned on the support for iterators with nested functions.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             createNestedFuncIterators.cpp 

---------------------------------------------------------------------------

08/04/05 15:46:24 -- deitz

Log message:
	Removed Tuple (the Expr subclass for Tuple literals).  This was
	removed early enough to just get rid of it.
	
	Removed code for destructuring tuples in analysis.  This has not been
	used for a while as destructuring is done in the high-level.
	
	Made a fix to analysis/ast.cpp to keep two tests from starting to
	seg-fault.  John, please see my comment in analysis/ast.cpp and make
	sure this is an okay change.  If not, we can futurize these tests if
	something deeper is going on.
	
	Added a test case to test '(i, j) = (j, i)' which swaps two integers.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
Added files:
	chapel/test/types/tuple/deitz/: test_tuple_swap.chpl 
	                                test_tuple_swap.good 

---------------------------------------------------------------------------

08/04/05 16:14:45 -- jplevyak

Log message:
	Removed comment for me... no: there was no deaper problem, just
	a bug.  The Vec is fill()'d with NULLs, so some buckets could be empty.
	The patch that Steve put in is spot on.

Modified files:
	chapel/compiler/analysis/: ast.cpp 

---------------------------------------------------------------------------

08/04/05 16:50:35 -- mjoyner

Log message:
	Added line that ensures that pragmas have been copied to function symbol for uniformity sake.  Currently, pragmas sometime appear on the function symbol and sometime appear on the function definition statement.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.cpp 

---------------------------------------------------------------------------

08/04/05 17:21:16 -- deitz

Log message:
	Made the destructuring of tuples more recursive to handle things like
	'(i, (j, k)) = ...'.  These tests now fail because of support for an
	instantiated record of an instantiated record.  Updated the future.

Modified files:
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	chapel/test/types/tuple/jplevyak/: destruct-2.future 

---------------------------------------------------------------------------

08/04/05 18:19:59 -- jplevyak

Log message:
	Removed VarInitExpr.
	Added a gUnspecified variable named "_".
	  - this was done as "nil" was done: in the parser
	Changed initTypes() -> initType() to match initExpr().
	Added a initSymbol() and put the initialization of gNil and gUnspecified
	  in it.
	removedNamedParameters now modifies non-reference type DefExpr variables
	  which are initialized with gNil so that they are initalized with
	  defaultConstructor/defaultVal.  This functionality should probably be
	  moved somewhere... like insertVariableInitialization, but I put it there
	  since that is where VarInitExpr was being fixed up.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symbol.h type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: postAnalysisCleanup.cpp 
	chapel/compiler/traversals/: applyGettersSetters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             preAnalysisHacks.cpp 
	                             removeNamedParameters.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

08/05/05 08:52:36 -- jplevyak

Log message:
	Stop testing the low level code generator.
	This is becoming burdensome to maintain given all
	  the changes and I don't believe it is worth the
	  effort any longer.

Added files:
	chapel/test/lowlevelcg/jplevyak/: NOTEST 

---------------------------------------------------------------------------

08/05/05 08:54:37 -- mjoyner

Log message:
	Added tests that test inlining with an explicit pragma "inline" in the program and with different intents.  Also added tests that show the output when the compiler flag --report-inlining is enabled.

Added files:
	chapel/test/trivial/mjoyner/inlinefunc/: .cvsignore 
	                                         inlfunc1.chpl 
	                                         inlfunc1.good 
	                                         inlfunc1_report.chpl 
	                                         inlfunc1_report.compopts 
	                                         inlfunc1_report.good 
	                                         inlfunc2.chpl 
	                                         inlfunc2.good 
	                                         inlfunc2_report.chpl 
	                                         inlfunc2_report.compopts 
	                                         inlfunc2_report.good 
	chapel/test/trivial/mjoyner/nestedfndef/: .cvsignore 

---------------------------------------------------------------------------

08/05/05 10:40:28 -- roxana

Log message:
	Renamed defaultVal to defaultValue.

Modified files:
	chapel/compiler/traversals/: removeNamedParameters.cpp 
	                             preAnalysisHacks.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	chapel/compiler/AST/: expr.cpp type.cpp baseAST.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/: Tasks 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

08/05/05 12:30:52 -- jplevyak

Log message:
	Added CALL_INFO_FIND_ALL to find all the target funtions for
	a particular Expr, even if the Expr (like DefExpr) may have
	2 unrelated target functions (e.g. an overloaded = as well as
	a constructor for a DefExpr of a Record).  Use this is now used
	for HTML output.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/traversals/: htmlview.cpp 

---------------------------------------------------------------------------

08/08/05 09:31:39 -- deitz

Log message:
	Updated task list, tagged unifying WithExpr and UseExpr.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/08/05 11:58:39 -- jplevyak

Log message:
	Grab PrimitiveType change

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/08/05 12:12:00 -- deitz

Log message:
	Removed StructuralType, RecordType, and UnionType, unifying their
	functionality into ClassType.  UnionType is quite different and will
	be moved out of this eventually.  As further justification for this
	unification, for documentation purposes, note that RecordType and
	ClassType are handled identically almost everywhere and that there
	member functions which used to be different have been the same more
	recently.
	
	Added many new overloaded constructors for CallExpr to make it easier
	to build up CallExprs in the compiler.  I got rid of alot of
	long-winded code idioms this way.  See example below.
	
	The constructors are:
	
	GENERAL
	-------
	
	General baseExpr and argList
	 CallExpr(Expr* initBase, AList<Expr>* initArgs);
	
	General baseExpr and up to four arguments to avoid putting the
	arguments into an AList
	 CallExpr(Expr* initBase, Expr* arg1 = NULL, Expr* arg2 = NULL,
	          Expr* arg3 = NULL, Expr* arg4 = NULL);
	
	Operator baseExpr and up to two arguments
	 CallExpr(OpTag initOpTag, Expr* arg1, Expr* arg2 = NULL);
	
	BEFORE ANALYSIS
	---------------
	  These avoid creating a new Variable of a new UnresolvedSymbol
	
	Unresolved function name and argList
	 CallExpr(char* name, AList<Expr>* initArgs);
	
	Unresolved function name and up to four arguments
	 CallExpr(char* name, Expr* arg1 = NULL, Expr* arg2 = NULL,
	          Expr* arg3 = NULL, Expr* arg4 = NULL);
	
	AFTER ANALYSIS
	--------------
	  These avoid creating a new Variable
	
	FnSymbol baseExpr and argList
	 CallExpr(Symbol* fn, AList<Expr>* initArgs);
	
	FnSymbol baseExpr and up to four arguments
	 CallExpr(Symbol* fn, Expr* arg1 = NULL, Expr* arg2 = NULL,
	          Expr* arg3 = NULL, Expr* arg4 = NULL);
	
	For example, the code:
	
	!   Expr* rtexit = new Variable(new UnresolvedSymbol("exit"));
	!   IntLiteral* exitZero = new IntLiteral(0);
	!   AList<Expr>* status = new AList<Expr>(exitZero);
	!   Expr* callRtexit = new CallExpr(rtexit, status);
	!   return new ExprStmt(callRtexit);
	
	becomes:
	
	!   return new ExprStmt(new CallExpr("exit", new IntLiteral(0)));
	
	Made it so that ALists can be constructed empty or with up to four
	elements, previously two.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h analysis.h baseAST.h expr.h 
	                          type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: preAnalysisCleanup.cpp 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp flatten.cpp 
	                         reconstructIterators.cpp 
	                         removeDeadSymbols.cpp resolveTypes.cpp 
	                         symscope.cpp symtab.cpp 
	                         symtabTraversal.cpp 
	chapel/compiler/traversals/: applyGettersSetters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	                             createNestedFuncIterators.cpp 
	                             expandClassWiths.cpp htmlview.cpp 
	                             inlineFunctions.cpp 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertUnionChecks.cpp 
	                             insertVariableInitializations.cpp 
	                             instantiate.cpp 
	                             preAnalysisHacks.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             replaceReturns.cpp 
	                             resolveModuleUses.cpp 
	                             resolveSymbols.cpp 
	                             specializeCallExprs.cpp 

---------------------------------------------------------------------------

08/08/05 12:59:05 -- deitz

Log message:
	Unified WithExpr and UseExpr into new ImportExpr.  I also added fields
	to eventually store the more complex uses of these language constructs.
	
	Unified ExpandClassWiths and ResolveModuleUses into ProcessImportExprs.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: processImportExprs.cpp 
	                             processImportExprs.h 
Removed files:
	chapel/compiler/traversals/: expandClassWiths.cpp 
	                             expandClassWiths.h 
	                             resolveModuleUses.cpp 
	                             resolveModuleUses.h 

---------------------------------------------------------------------------

08/08/05 14:20:31 -- deitz

Log message:
	Added verification to make sure that all statements, except for
	BlockStmts and statements in LabelStmts, are in lists.  LabelStmts
	should probably be cleaned up.

Modified files:
	chapel/compiler/traversals/: verify.cpp 

---------------------------------------------------------------------------

08/08/05 14:24:45 -- jplevyak

Log message:
	Removed NilType, use of Type for TYPE_BUILTIN.
	Added PrimitiveType and used this for integer, float, nil etc.

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symtab.h type.h 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

08/08/05 14:26:00 -- jplevyak

Log message:
	update with completion of PrimitiveType

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/08/05 14:48:30 -- deitz

Log message:
	Added a new error message to flag the case where someone doesn't copy
	or remove an expression or statement from the AST before inserting it
	into another part of the AST.  This is only caught in limited cases
	right now.
	
	Added documentation file compiler/doc/internal-errors.txt which will
	eventually contain more information on the internal errors and things
	that may have happened to generate them.  Feel free to add to this
	file as you run into internal errors and understand what they mean or
	what they were caused by.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/symtab/: symtab.cpp 
Added files:
	chapel/doc/developer/: internal-errors.txt 

---------------------------------------------------------------------------

08/08/05 15:51:30 -- jplevyak

Log message:
	Grab nil change, low-level error reporting and getter/setter from the
	Priority 2 list.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/08/05 16:12:43 -- deitz

Log message:
	Grabbed phase one tasks for unifying union type and sum type and for
	renaming expressions.  Should Variable be called VariableExpr or
	SymbolExpr to make it end in Expr?  Everything else already does,
	except for MemberAccess, which will soon be eliminated.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/08/05 16:39:27 -- deitz

Log message:
	Added an error message to flag uninitialized params in functions.
	
	This fixes regression trivial/roxana/test_param_decl3.

Modified files:
	chapel/compiler/traversals/: checkSemantics.cpp 
	chapel/test/trivial/roxana/: test_param_decl3.good 

---------------------------------------------------------------------------

08/08/05 16:40:33 -- deitz

Log message:
	Simplified code generation for record methods now that they are
	references like classes.
	
	This fixes regressions domains/roxana/test_hash_table3 and
	types/type_variables/deitz/test_datablock3.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

08/08/05 17:27:07 -- jplevyak

Log message:
	Changed lots of options to use the new "--lower-case-with-dash" standard.
	Removed old -finline and -fsimple-inline options.
	Added more error handling in analysis.
	Added prototypes and structures for the new "low level passes back
	  erorrs" interface (not yet completed).  Those interested can look
	  in analysis.h to see what I am planning on doing.  The abstract
	  variables AVar and AType will have accessor functions to pull out
	  information for reporting errors.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/main/: driver.cpp 
	chapel/test/flowanalysis/jplevyak/config/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/constants/: COMPOPTS 
	chapel/test/parsing/jplevyak/: COMPOPTS 

---------------------------------------------------------------------------

08/09/05 09:24:07 -- deitz

Log message:
	Builtin _data structure is a 0-based array.  Fixed an off-by-one error
	in new valgrind regression.

Modified files:
	chapel/test/domains/roxana/: test_hash_table3.chpl 

---------------------------------------------------------------------------

08/09/05 09:32:17 -- deitz

Log message:
	Fixed off-by-one under-allocation bug in _chpl_string_strided_select
	runtime routine.  This fixes valgrind regression of:
	
	  types/string/deitz/test_string_select1

Modified files:
	chapel/runtime/src/: chpltypes.c 

---------------------------------------------------------------------------

08/09/05 10:42:57 -- bradc

Log message:
	Changed nightly script to append number of new failures
	to the subject line of the mail it sends out.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/09/05 11:35:26 -- jplevyak

Log message:
	Complete reporting of low level errors.
	
	USE:
	
	  chpl --analysis-errors ...
	
	This blocks analysis from reporting errors and instead populates
	a data structure:
	
	extern Vec<AError *> analysis_errors;
	
	defined in analysis.h
	
	There are 8 types of errors:
	
	enum AError_kind {
	  AERROR_CALL_ARGUMENT,         // all types of a call argument not handled
	  AERROR_DISPATCH_AMBIGUITY,    // call is ambiguous (fills "funs")
	  AERROR_MEMBER,                // no member with that "name"
	  AERROR_DESTRUCT,              // unable to destructure expression type
	  AERROR_NOTYPE,                // unable to type variable
	  AERROR_BOXING,                // primitive missmatch (e.g. integer AND float)
	  AERROR_MISMATCH_OFFSETS,      // offset mismatch for field names
	  AERROR_BAD_STATE              // called with bad arguments/data
	};
	
	And each is represented by this data structure:
	
	class AError : public gc { public:
	  AError_kind kind;
	  AVar *call;
	  AType *type;
	  AVar *avar;
	  Vec<FnSymbol *> funs;
	
	  void get_member_names(Vec<char *> &names);
	  void get_types(Vec<Type *> &types);
	  static BaseAST *get_BaseAST(AVar *aavar);      // Symbol or Types
	  static BaseAST *get_def_BaseAST(AVar *acall);  // calling or defining Expr or Stmt
	  static void get_callers(AVar *acall, Vec<AVar *> &callers);
	
	  AError(AError_kind akind, AVar *acall = NULL, AType *atype = NULL, AVar *avar = NULL);
	};
	
	The methods provide a way to access the inforamation provided in terms
	of front-end data structures.  NOTE: call, type, avar may be NULL
	in which case that information is not provided.
	
	From the "call" member, one can retrieve the call tree (get_callers) as
	well as the calling Expr (get_def_BaseAST).
	
	From the "avar" member, one can retrieve the Symbol or Type (get_BaseAST) and
	sometimes the defining Expr.
	
	From "type" one can retrieve the set of Types.
	
	For AERROR_MEMBER it it is also possible to retrieve the set of member names
	(typically 1).
	
	Also removed some extraneous cruft in the "fail" error messages.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: analysis.h callbacks.h driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/: badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good 
	                                    dispatch3.good 
	chapel/test/functions/deitz/default/: test_default3-error.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	chapel/test/functions/jplevyak/: equal_method-1.compopts 
	chapel/test/parsing/jplevyak/: module.good 
	chapel/test/types/seq/bradc/: length.modify.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

08/09/05 12:47:58 -- bradc

Log message:
	Quick change to disable the compiler from catching signals
	when the developer flag is on.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

08/09/05 13:14:40 -- deitz

Log message:
	Added
	 Vec<Type*> Type::typeParents
	 Vec<Type*> Type::dispatchParents
	to represent the type hierarchies.
	
	Removed
	 Type* Type::parentType
	 Vec<Type*> ClassType::parentClasses
	 Type* ClassType::parentStruct
	
	Since most of this wasn't used, it was a straightforward change.  It's
	not set up very well as the one current usage seems strange.  I
	commented out a use of one that was never set in analysis.  John, can
	you take a look at how this might be rearranged and doublecheck the
	current usage in resolveTypes.cpp.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

08/09/05 13:16:25 -- deitz

Log message:
	Updated REGRESSIONS file.  There is currently one regression.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

08/09/05 13:32:43 -- deitz

Log message:
	Fixed a small bug in the let transformation in which the old let scope
	was accidentally left in the AST.
	
	This was caught by a test in verify that I still have commented out.
	The test makes sure that all of the symbols in the Symboltable (with
	some exceptions) have DefExprs in the AST that is actually traversed.

Modified files:
	chapel/compiler/traversals/: transformLetExprs.cpp 

---------------------------------------------------------------------------

08/09/05 13:37:03 -- jplevyak

Log message:
	Add static AType AError::get_type(AVar *aavar); interface to retrieve
	  full type of an argument.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

08/09/05 13:42:36 -- jplevyak

Log message:
	Update "nil" and low level error tasks.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/09/05 14:44:24 -- jplevyak

Log message:
	Add .future for the last regressions...
	This is a known problem with instantiation which wil
	  be fixed in the next round of work on that feature.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record6.future 

---------------------------------------------------------------------------

08/10/05 10:48:04 -- deitz

Log message:
	Simplified parsing and construction of ForLoopStmt and ForallExpr,
	prior a mess, in a successful effort to remove the last AList of
	symbols or types.  Exception: ModuleSymbols are in an AList.
	
	Added verification to keep symbols and types from being in ALists.
	Unlike Exprs and Stmts, these can be used multiple times in the
	program structure so it is best to keep them in Vecs.
	
	I also added verification to make sure Type is never used (only
	subclasses of it) now that John built up the PrimitiveType.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp 

---------------------------------------------------------------------------

08/10/05 11:49:32 -- bradc

Log message:
	Small change to the nightly script to remove extra spaces
	from the subject line on platforms where wc -l returns
	right-justified output.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/10/05 11:53:49 -- jplevyak

Log message:
	--setters-getters now defaults to ON.
	Setters and getters are now applied in the front-end.  The
	flag and a lot of vestigial code remain, but I am going to clean that up.
	
	There are 2 regressions: both in inlining reports, likely because the
	pattern matching for inlining is failing.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h symscope.h 
	chapel/compiler/main/: driver.cpp passlist.cpp 
	chapel/compiler/parser/: chapel.y lexyacc.h prelude.chpl 
	chapel/compiler/passes/: Makefile.share pass.cpp 
	                         preAnalysisCleanup.cpp 
	                         preAnalysisCleanup.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             applyThisParameters.h 
	                             buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             findUnknownTypes.cpp 
	                             insertThisParameters.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/types/seq/bradc/: length.modify.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         applyGettersSetters.cpp.~1.8.~ 
	                         applyGettersSetters.h 
Removed files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 
	                             applyGettersSetters.h 

---------------------------------------------------------------------------

08/10/05 11:54:25 -- jplevyak

Log message:
	Delete accidental checkin.

Removed files:
	chapel/compiler/passes/: applyGettersSetters.cpp.~1.8.~ 

---------------------------------------------------------------------------

08/10/05 12:01:03 -- jplevyak

Log message:
	Fix GCC error discrepency: missing unreachable return.

Modified files:
	chapel/compiler/passes/: applyGettersSetters.cpp 

---------------------------------------------------------------------------

08/10/05 13:18:37 -- deitz

Log message:
	Tucked ModuleSymbols into three different Vecs, one of those that are
	codegened, one of those that are user modules, and one including them
	all.  Removed the ModuleList code that used an AList to store modules.
	Now symbols don't appear in ALists at all.  This simplifies some code
	that I plan to simplify further.

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         applyGettersSetters.h buildBinary.cpp 
	                         buildBinary.h codegen.cpp codegen.h 
	                         createEntryPoint.cpp createEntryPoint.h 
	                         filesToAST.cpp filesToAST.h pass.cpp 
	                         pass.h preAnalysisCleanup.cpp 
	                         preAnalysisCleanup.h printProgram.cpp 
	                         printProgram.h renameCSymbols.cpp 
	                         renameCSymbols.h runAnalysis.cpp 
	                         runAnalysis.h 
	chapel/compiler/symtab/: codegenOne.cpp codegenOne.h 
	                         findCollidingNames.cpp 
	                         findCollidingNames.h printSymtab.cpp 
	                         printSymtab.h symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
	chapel/compiler/traversals/: checkIDs.cpp checkIDs.h fixup.cpp 
	                             fixup.h htmlview.cpp htmlview.h 
	                             processImportExprs.cpp 
	                             processImportExprs.h 
	                             transformLetExprs.cpp 
	                             transformLetExprs.h traversal.cpp 
	                             traversal.h verify.cpp verify.h 
	                             view.cpp view.h 
Removed files:
	chapel/compiler/AST/: moduleList.cpp 
	chapel/compiler/include/: moduleList.h 

---------------------------------------------------------------------------

08/10/05 13:32:01 -- deitz

Log message:
	Fixed .good for Mack's tests that make sure inlining fired.  Since the
	name of the setters has changed, the names printed out for which
	functions were inlined changed.  However, the functions are still
	inlined so this is good.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/10/05 13:40:44 -- mjoyner

Log message:
	Small change to print out inlined c function names to help distinguish between getters and setters.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.cpp 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/10/05 14:45:30 -- jplevyak

Log message:
	Remove the applyGettersSetters option and remove some obsolete code.
	Fixed applyGettersSetters to also convert all assign+op (+=) to + then =.
	At some point we can come up with a new solution, but this works for now.
	(thought it isn't atomic).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             insertThisParameters.cpp 

---------------------------------------------------------------------------

08/10/05 15:09:27 -- deitz

Log message:
	Removed blank constructors from Symbol since they are never nor should
	never be used.  You must specify a name, for example, to create a
	VarSymbol.
	
	Removed unused Module type MOD_SENTINEL.

Modified files:
	chapel/compiler/include/: symbol.h 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

08/10/05 15:54:58 -- jplevyak

Log message:
	Remove more extraneous code.  Move applyGettersSetters to be
	right before analysis since some of the Hacks were inserting things
	which needed to be converted.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

08/10/05 15:55:32 -- jplevyak

Log message:
	Removed dead variable

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

08/11/05 11:26:36 -- deitz

Log message:
	Added test of mutually recursive nested functions and future that Mack
	and I were discussing.

Added files:
	chapel/test/functions/deitz/nested/: test_nested6.chpl 
	                                     test_nested6.future 
	                                     test_nested6.good 

---------------------------------------------------------------------------

08/11/05 12:55:58 -- bradc

Log message:
	Quick fix for the mis-reported number of new errors that
	showed up last night in the nightly regression testing
	mail.  Have not yet changed to a different format as
	proposed by Steve & John.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/11/05 14:59:02 -- deitz

Log message:
	Made the scope of the initFn be the scope of the module.  The initFn
	of a module contains code in the top-level of the module.  Currently,
	variable declarations and other statements are put in this function.
	Can we remove this initFn and just use the body of a module instead?
	
	Reworked the testRun code which makes sure an init function of a user
	module is only run once.  Instead of inserting a block statement
	around the body, it now inserts a block statement of a return
	statement at the top.  This keeps it simpler.
	
	I moved the init function to the top of the module definition so that
	it is traversed before all other functions.  This makes sure global
	variables are defined before they are used.  Again, getting rid of the
	initFn would simplify things.
	
	Added code to prevent codegening the module scope when codegening the
	scope of the initFn.
	
	Added a line to createNestedFuncIterators so that it works even when
	there are no encl_scope_var_uses.  Mack, this is a simple change that
	I needed to make to allow functions/deitz/test_iterator2.chpl to
	continue to work.  I'm not sure why this only came up now.
	
	Fixed a bug in reporting use before defs of variables in which a large
	class of such errors were missed.  Simplified the code in the process.
	
	Added three use before def tests, all of which now work.
	
	Added a new debug function mark_view(BaseAST*, long) which works
	similarly to print_view(BaseAST*) but also takes an AST id.  It marks
	the AST.  So to see where an Expr is in a Stmt, you can write
	something like mark_view(expr->parentStmt, expr->id).  The expression
	is marked with three stars.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	                             processImportExprs.cpp 
	                             scopeResolveSymbols.cpp view.cpp 
	                             view.h 
Added files:
	chapel/test/trivial/deitz/: test_use_before_def1.chpl 
	                            test_use_before_def1.good 
	                            test_use_before_def2.chpl 
	                            test_use_before_def2.good 
	                            test_use_before_def3.chpl 
	                            test_use_before_def3.good 

---------------------------------------------------------------------------

08/11/05 15:23:24 -- deitz

Log message:
	Added the ability to construct a BlockStmt by passing it a single
	statement not in a list of statements.  Such a statement is then put
	into a list of statements.  This gets rid of many one statement list
	creations throughout the code.  For example,
	
	  BlockStmt* setter_stmt =
	    new BlockStmt(new AList<Stmt>(new ExprStmt(setter_assignment)));
	
	becomes
	
	  BlockStmt* setter_stmt = new BlockStmt(new ExprStmt(setter_assignment));

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             eliminateReturns.cpp 
	                             insertVariableInitializations.cpp 
	                             scopeResolveGotos.cpp 

---------------------------------------------------------------------------

08/11/05 17:36:39 -- jplevyak

Log message:
	Reorganized some of the code assocaited with handling of
	assignment in preparation for a rewrite.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

08/12/05 09:45:01 -- mjoyner

Log message:
	Factored out code for traversal that creates nested function definitions for iterators so that it relies a lot more on the removeNestedFunctions traversal.

Modified files:
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	                             createNestedFuncIterators.h 
	                             findEnclosingScopeVarUses.cpp 
	                             removeNestedFunctions.cpp 

---------------------------------------------------------------------------

08/12/05 13:17:46 -- jplevyak

Log message:
	Changed genExit to include a return from the function if _retval exists
	  (i.e. there are any other returns in the function).
	  Analysis assumes that execution continues, and was finding that some
	    functions returned "void" (had paths which didn't return a value).
	Changed -vv so that it now produces only the most interesting additional
	Added overloaded = for numerics and for strings assigned from numerics.
	Enabled overloading for scalars and reference types.
	Made sure that the result of overloaded = was copied back to the LHS
	  symbol - necessary to get the overloading of numerics to work correctly.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: specializeCallExprs.cpp 
	chapel/modules/standard/: _chpl_htuple.chpl 
	chapel/test/types/seq/bradc/: length.modify.good 

---------------------------------------------------------------------------

08/12/05 17:58:26 -- bradc

Log message:
	Updating line numbers based on John's change to
	_chpl_htuple.chpl earlier.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

08/12/05 18:16:25 -- bradc

Log message:
	Added several tests that have been sitting in my directory
	for quite awhile:
	
	* Working tests:
	
	  - classes/bradc/records/namecheck.chpl : makes sure that
	    a record constructor can be used with actuals that are
	    the same names as the formals.
	
	  - classes/bradc/unions/assign1a.chpl : makes sure union
	    assignment works
	
	* Future tests:
	
	  - classes/bradc/callMethodOnClass.chpl : calling a method
	    on a class (rather than an instance of a class) really
	    throws off the compiler rather than generating a
	    reasonable error message.  I did this accidentally and
	    couldn't figure out what the compiler was complaining
	    about.  This isn't high priority, but I wanted a
	    placeholder for it.
	
	  - classes/bradc/unions/assign.chpl
	  - classes/bradc/unions/writeunion.chpl : these don't work
	    because writing of unions currently seems broken (for
	    what appears to be a fairly simple reason -- they are
	    passed to a procedure as a pointer but dereferenced as
	    a value)
	
	  - classes/bradc/unions/stringunion.chpl : this doesn't
	    work because assigning to string fields in a union is
	    complicated since we can't assume that the field was
	    a reallocatable pointer before assigning it.  It would
	    seem that in order to make this work, we'd have to
	    allocate the string every time it was assigned and free
	    it every time the union was assigned (doing something
	    smart when the string is reassigned twice in a row?)

Modified files:
	chapel/test/classes/bradc/records/: .cvsignore 
Added files:
	chapel/test/classes/bradc/: callMethodOnClass.chpl 
	                            callMethodOnClass.future 
	                            callMethodOnClass.good 
	chapel/test/classes/bradc/records/: namecheck.chpl 
	                                    namecheck.good 
	chapel/test/classes/bradc/unions/: assign.chpl assign.future 
	                                   assign.good assign1a.chpl 
	                                   assign1a.good 
	                                   stringunion.chpl 
	                                   stringunion.future 
	                                   stringunion.good 
	                                   writeunion.chpl 
	                                   writeunion.future 
	                                   writeunion.good 

---------------------------------------------------------------------------

08/12/05 18:17:21 -- bradc

Log message:
	A bunch of changes related to lexing/tokens:
	
	* Cleaned up the lexer by moving most of the complicated
	  code (to eat strings and comments) into a helper file,
	  processTokens.cpp.
	
	* Added support for C++-style single-line comments // like this
	
	* Renamed the COMPLEXLITERAL token to be IMAGLITERAL
	
	* Added some flags that support counting of Chapel tokens
	  and breaking the input file into tokens:
	
	  --count-tokens: Counts the number of tokens in the
	                  Chapel code files listed on the
	                  command line and prints the number
	                  of tokens to stderr.
	
	  --print-tokens: Breaks the input stream up into
	                  tokens and prints stats such as
	                  the number of code lines, blank
	                  lines, and comment lines in the
	                  user's code, as well as the number
	                  of tokens, tokens per line, and
	                  a histogram of token usage
	
	  This is functionality that was supported in our C++ token
	  counting utility in the util/ directory, but which we
	  didn't have supported for Chapel, so to a large extent,
	  this was just moving the code over and cleaning it up a
	  bit.  The print-tokens functionality could stand to be
	  broken into different levels of verbosity, but for now
	  you just get everything.  The count tokens functionality
	  is meant to be used to add token count numbers for the
	  standard modules and preludes to our nightly code size,
	  and also to measure code size for future talks.
	
	* Added three tests to test these flags in
	  compflags/bradc/tokenflags.
	
	* Added the ability to squelch the execution of a single test
	  (rather than the whole directory) using a foo.noexec file
	  for a test named foo.chpl.

Modified files:
	chapel/compiler/include/: yy.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: Makefile.share chapel.lex chapel.y 
	                         lexyacc.h parser.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/test/: start_test sub_test 
Added files:
	chapel/compiler/include/: countTokens.h 
	chapel/compiler/parser/: countTokens.cpp processTokens.cpp 
	                         processTokens.h 
	chapel/test/compflags/bradc/tokenflags/: .cvsignore 
	                                         tokentest.chpl 
	                                         tokentest.good 
	                                         tokentest2.chpl 
	                                         tokentest2.compopts 
	                                         tokentest2.good 
	                                         tokentest2.noexec 
	                                         tokentest3.chpl 
	                                         tokentest3.compopts 
	                                         tokentest3.good 
	                                         tokentest3.noexec 

---------------------------------------------------------------------------

08/15/05 12:40:59 -- bradc

Log message:
	Removing gc6.3 files which are no longer used (we're
	on gc6.5 now).

Removed files:
	chapel/third-party/boehmgc/gc6.3/: AmigaOS.c BCC_MAKEFILE 
	                                   EMX_MAKEFILE MacOS.c 
	                                   MacProjects.sit.hqx 
	                                   Makefile.DLLs Makefile.am 
	                                   Makefile.direct Makefile.dj 
	                                   Makefile.in NT_MAKEFILE 
	                                   NT_STATIC_THREADS_MAKEFILE 
	                                   NT_THREADS_MAKEFILE 
	                                   OS2_MAKEFILE PCR-Makefile 
	                                   README.QUICK SMakefile.amiga 
	                                   WCC_MAKEFILE acinclude.m4 
	                                   aclocal.m4 add_gc_prefix.c 
	                                   aix_irix_threads.c allchblk.c 
	                                   alloc.c alpha_mach_dep.S 
	                                   backgraph.c base_lib 
	                                   blacklst.c callprocs 
	                                   checksums.c config.guess 
	                                   config.sub configure 
	                                   configure.host configure.in 
	                                   darwin_stop_world.c dbg_mlc.c 
	                                   depcomp digimars.mak 
	                                   dyn_load.c finalize.c gc.a 
	                                   gc.mak gc_cpp.cc gc_cpp.cpp 
	                                   gc_dlopen.c gcc_support.c 
	                                   gcj_mlc.c gcname.c headers.c 
	                                   hpux_test_and_clear.s 
	                                   ia64_save_regs_in_stack.s 
	                                   if_mach if_mach.c 
	                                   if_not_there if_not_there.c 
	                                   install-sh libtool.m4 
	                                   ltmain.sh mach_dep.c malloc.c 
	                                   mallocx.c mark.c mark_rts.c 
	                                   mips_sgi_mach_dep.s 
	                                   mips_ultrix_mach_dep.s misc.c 
	                                   missing mkinstalldirs 
	                                   new_hblk.c obj_map.c os_dep.c 
	                                   pc_excludes pcr_interface.c 
	                                   powerpc_darwin_mach_dep.s 
	                                   pthread_stop_world.c 
	                                   pthread_support.c ptr_chck.c 
	                                   real_malloc.c reclaim.c 
	                                   rs6000_mach_dep.s setjmp_t.c 
	                                   solaris_pthreads.c 
	                                   solaris_threads.c 
	                                   sparc_mach_dep.S 
	                                   sparc_netbsd_mach_dep.s 
	                                   sparc_sunos4_mach_dep.s 
	                                   specific.c stubborn.c 
	                                   threadlibs threadlibs.c 
	                                   typd_mlc.c version.h 
	                                   win32_threads.c 
	chapel/third-party/boehmgc/gc6.3/Mac_files/: MacOS_Test_config.h 
	                                             MacOS_config.h 
	                                             dataend.c 
	                                             datastart.c 
	chapel/third-party/boehmgc/gc6.3/cord/: cordbscs.c cordprnt.c 
	                                        cordtest.c cordxtra.c 
	                                        de.c de_cmds.h 
	                                        de_win.ICO de_win.RC 
	                                        de_win.c de_win.h 
	chapel/third-party/boehmgc/gc6.3/doc/: .cvsignore Makefile.am 
	                                       Makefile.in README 
	                                       README.DGUX386 README.Mac 
	                                       README.MacOSX README.OS2 
	                                       README.amiga 
	                                       README.arm.cross 
	                                       README.autoconf 
	                                       README.changes 
	                                       README.contributors 
	                                       README.cords 
	                                       README.darwin README.dj 
	                                       README.environment 
	                                       README.ews4800 README.hp 
	                                       README.linux 
	                                       README.macros 
	                                       README.rs6000 README.sgi 
	                                       README.solaris2 
	                                       README.uts README.win32 
	                                       barrett_diagram 
	                                       debugging.html gc.man 
	                                       gcdescr.html 
	                                       gcinterface.html 
	                                       leak.html scale.html 
	                                       simple_example.html 
	                                       tree.html 
	chapel/third-party/boehmgc/gc6.3/include/: .cvsignore 
	                                           Makefile.am 
	                                           Makefile.in cord.h 
	                                           ec.h gc.h gc_alloc.h 
	                                           gc_allocator.h 
	                                           gc_amiga_redirects.h 
	                                           gc_backptr.h 
	                                           gc_config_macros.h 
	                                           gc_cpp.h gc_gcj.h 
	                                           gc_inl.h gc_inline.h 
	                                           gc_local_alloc.h 
	                                           gc_mark.h 
	                                           gc_pthread_redirects.h 
	                                           gc_typed.h javaxfc.h 
	                                           leak_detector.h 
	                                           new_gc_alloc.h 
	                                           weakpointer.h 
	chapel/third-party/boehmgc/gc6.3/include/private/: cord_pos.h 
	                                                   darwin_semaphore.h 
	                                                   darwin_stop_world.h 
	                                                   dbg_mlc.h 
	                                                   gc_hdrs.h 
	                                                   gc_locks.h 
	                                                   gc_pmark.h 
	                                                   gc_priv.h 
	                                                   gcconfig.h 
	                                                   pthread_stop_world.h 
	                                                   pthread_support.h 
	                                                   solaris_threads.h 
	                                                   specific.h 
	chapel/third-party/boehmgc/gc6.3/tests/: leak_test.c middle.c 
	                                         test.c test.o 
	                                         test_cpp.cc 
	                                         thread_leak_test.c 
	                                         trace_test.c 

---------------------------------------------------------------------------

08/15/05 13:27:40 -- bradc

Log message:
	Removing .future for test that's now working.

Removed files:
	chapel/test/types/seq/bradc/: hashEquals.future 

---------------------------------------------------------------------------

08/15/05 13:29:14 -- bradc

Log message:
	Made the nightly token-counter also count the number of
	tokens in the modules/standard/*.chpl and parser/*.chpl
	directories.

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

08/16/05 08:52:19 -- shannon

Log message:
	Initialized the file pointer member in the
	file class to null.  Added error checking to
	the open function to quietly close the file
	if it's already open.  Added the path to the
	filename in the open function call to _fopen
	and the error message printed if _fopen fails.
	Added a test for an open that fails.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 
Added files:
	chapel/test/types/file/: unableToOpenFile.chpl 
	                         unableToOpenFile.good 

---------------------------------------------------------------------------

08/16/05 10:56:21 -- bradc

Log message:
	Removing another future for a test that is now working.

Removed files:
	chapel/test/functions/bradc/: intents-classes.future 

---------------------------------------------------------------------------

08/16/05 11:58:54 -- bradc

Log message:
	Checking in an evolution of four tests, some of which
	work, some of which don't.  The original motivating
	test declared an uninitialized instance of a class, like:
	
	     class C { ... }
	
	     var c: C;
	
	Upon assigning c to other variables declared
	to be of type C, an error would occur, which intuitively
	seems wrong to me:
	
	      var d: C;
	
	      d = c;
	
	As noted in the .future, I suspect that this relates to
	the discussion of implementing nils that we had during
	the last implementors meeting and/or the ability to
	dispatch on nil (all of which I suspect isn't handled
	yet).  If I'm misremembering what we decided and/or doing
	something illegal, let me know.
	
	declClassType.chpl exhibits this problem and assigns the
	  future to john for now.
	declClassType1a.chpl is a variation in which the instance
	  variable is initialized to be an instance of C(), which
	  causes the test to work
	declClassType1b.chpl is a variation of that in which the
	  instance variable is assigned back to nil before it is
	  assigned to d.  This works, which is nice, but seems
	  inconsistent
	declClassType1c.chpl is like the original code except that
	  c is explicitly assigned to be nil.

Added files:
	chapel/test/classes/bradc/: declClassType.chpl 
	                            declClassType.future 
	                            declClassType.good 
	                            declClassType1a.chpl 
	                            declClassType1a.good 
	                            declClassType1b.chpl 
	                            declClassType1b.good 
	                            declClassType1c.chpl 
	                            declClassType1c.future 
	                            declClassType1c.good 

---------------------------------------------------------------------------

08/16/05 18:25:29 -- roxana

Log message:
	This pass replaces literal expressions with symbols. It is not used
	yet, since it requires changes in analysis which are not clear.
	It is useful just to be able to use the patch which I am going
	to send to illustrate the problems I am running into.

Added files:
	chapel/compiler/traversals/: removeLiterals.h removeLiterals.cpp 

---------------------------------------------------------------------------

08/17/05 07:25:33 -- shannon

Log message:
	Initialized the _NULLCFILEPTR variable with a
	call to the class's constructor.  Added error
	checking to the file class for attempting to
	close a file that isn't open, and added a test
	for this.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/types/file/: unableToOpenFile.good 
Added files:
	chapel/test/types/file/: closedWithoutOpen.chpl 
	                         closedWithoutOpen.good 

---------------------------------------------------------------------------

08/17/05 10:30:26 -- shannon

Log message:
	Updated the .goods to reflect the changes I made
	yesterday to the _chpl_file module.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

08/17/05 13:27:32 -- bradc

Log message:
	These are some variations on SSCA2 that I was working on for
	readability, compilability before the MS5 benchmark, but which
	have been languishing unchanged in my directory for awhile now.
	Checking them in for safekeeping.

Added files:
	chapel/test/ssca/ssca2/: ssca2.blc-hack.chpl ssca2.blc.chpl 
	                         ssca2.blc.init.chpl ssca2.origpar.chpl 

---------------------------------------------------------------------------

08/17/05 13:31:42 -- bradc

Log message:
	During a particularly dull phone conference, I started
	dinking around with implementing the HPC Challenge
	random access benchmark in Chapel for fun, based on
	the web specification at:
	
	    http://icl.cs.utk.edu/projectsfiles/hpcc/RandomAccess/
	
	I'm not certain that I'm generating the pseudo-random
	inputs appropriately, but otherwise, I think this is on
	the right track.  There are three versions, corresponding
	to the three ways that they say it should be written:
	
	- randomaccess-local.chpl : a uni-locale implementation
	- randomaccess-redundant.chpl : the same implementation
	    run on all locales simultaneously (mmmaybe... depending
	    on how you interpret "forall l in Locales ...")
	- randomaccess-distributed.chpl : the main version one
	    would care about in which the table is spread across
	    all the processors (in this example, using the UMA
	    distribution).

Added files:
	chapel/test/hpcc/: NOTEST README randomaccess-distributed.chpl 
	                   randomaccess-local.chpl 
	                   randomaccess-redundant.chpl 

---------------------------------------------------------------------------

08/17/05 15:22:05 -- deitz

Log message:
	With this change, the symboltable is now built when things are added
	to the AST and destroyed when things are removed from the AST.  This
	simplifies parsing and maintenance in non-trivial ways including the
	ability to build up new Stmts and Exprs without pushing or popping
	scopes (which was done in the old Symboltable::start* and
	Symboltable::finish* routines), the ability to build new symbols
	without saving and restoring scopes, and the ability to remove
	something from the AST and insert it elsewhere without having to copy
	it.  Much/some of the old code still exists, but I will remove it
	shortly.  For example, statements involving prevScope or saveScope and
	a call to Symboltable::setCurrentScope are not really doing anything
	anymore (except when in the traverse routines).  As an exception to
	this change, module symbols are still handled the old way.
	
	Details follow.  Test changes are highlighted at the bottom.
	
	I added a new struct called ASTContext which contains a pointer to a
	parentScope, parentSymbol, parentStmt, and parentExpr.  This is used
	for calling into Fixup (which is now the InsertHelper, RemoveHelper,
	and Verifier).  I will work on breaking these up and renaming them
	shortly.
	
	To explain, Fixup is used to set the parent pointers when something is
	inserted into the AST.  It is called on the whole AST near the top of
	the pass list after parsing.  Then when anything is inserted into the
	AST or replaces something that is in the AST, the parent pointers will
	be set.  To determine whether a Stmt or an Expr is in the tree, you
	can look at the parentSymbol.  If it is true, the Stmt/Expr is part of
	the tree.
	
	Fixup is now also used for building up scopes.  So nothing has a scope
	until it is inserted into the tree.  That's a big simplification on
	how things are built-up and maintained.
	
	In addition, when something is removed from the tree, Fixup is now
	used to remove the parent pointers and remove the scopes and symbols
	from the scopes.
	
	I cleaned the constructors, traverse, and copy routines, and removed
	the Symboltable functions (or simplified them) for the following
	Stmts, Exprs, Symbols, and Types: ForallExpr, LetExpr, BlockStmt,
	ForLoopStmt, FnSymbol, and ClassType.  These, along with ModuleSymbol,
	have scopes which are now setup during Fixup (when inserted into the
	tree).  They no longer need to be handled during creation.
	
	I added function calls, which act like the old fixup function, called
	removeHelper and insertHelper.  They call Fixup upon insertion or
	removal from the AST.  They use the context of something already in
	the tree (which can be obtained with the BaseAST::getContext()
	routine).
	
	When replace is used on the AST, removeHelper is called on the Stmt or
	Expr that is replaced and insertHelper is then called on the Stmt or
	Expr that did the replacing.
	
	I removed the exportMe variable on Symbol which has fallen into
	disuse.  This functionality is now handled in ScopeResolveSymbols.
	
	I added pointers to the INIT_CONFIG, UNION_SET, UNION_CHECK, and
	UNION_QUIET_CHECK functions in the prelude.  These are found earlier.
	They are removed as dead and should be handled differently.
	
	I moved the traversal of the iterators of a for expression or
	statement into the scope of the for expression or statement.  So
	something like
	
	  var i : domain;
	  for i in i { ... }
	
	which used to grab the domain i as the iterator will now grab the
	index i.  I think this is a good thing.  I'm not sure why the
	iterators were traversed before the for scope was entered, but this
	was deliberately set up that way so I'll point out this change.
	
	Previously symbols were defined in the symboltable when they were
	constructed.  They are now defined in the symboltable when they are
	inserted into the AST via a DefExpr during Fixup.
	
	I disabled printing in some of John's analysis logging if the line
	numbers are less than or equal to zero.  This changed some
	flowanalysis tests.
	
	I added flushing of the html view index.html file so that even if
	compilation crashses, the index file is visible and can be used for
	debugging.
	
	Parsing is much simpler with this change.  There are no more execution
	blocks within yacc rules, except for modules.
	
	I fixed a major bug in removing symbols from the symboltable scope in
	which they were never removed from the table and so could still be
	looked up.  With this change, removed things are actually removed.
	This led to cleaning up a few bugs here and there.
	
	I fixed up printing out the symbols in a scope so that if the symbol
	is overloaded the overloaded symbols are printed too.  This is done in
	the list of cnames printed after the name.
	
	I put in a check to catch trying to define the same symbol twice.
	
	Rewrote ProcessParameters and TransformLetExprs pretty much from
	scratch.  These are now much shorter.  One change is that they don't
	insert BlockStmts which they used to.  When we get to a more canonical
	form, we can start to do this.  The reason I stopped was because the
	scopes are now correct and so things stopped working when we generated
	the code:
	
	If
	
	  var x = foo(y);
	  writeln(x);
	
	becomes
	
	  {
	    temp = y;
	    var x = foo(temp);
	    y = temp;
	  }
	  writeln(x);
	
	we have a problem since in the generated code, x would be out of
	scope.
	
	Added a check to make sure the user doesn't try to call a module.
	
	============
	TEST CHANGES
	============
	
	Modified Shannon's multiple module execflag tests to "use" the
	multiple modules.  I also modified one of Brad's tests to do the same
	thing.  When these tests were written, it wasn't yet possible to use a
	module.  All the functions in the unused modules were being marked as
	dead which eliminated the config variables in the other modules.  A
	good question is should we allow users to set dead config vars on the
	command line?
	
	Added a module to Shannon's tests named mod.chpl, halt.chpl,
	assert.chpl, and exit.chpl.  Because these files are the names of the
	modules, they were eliding the calls to the builtin functions of the
	same name.  I added a good error message to inform the user that she
	can't call a module and a new test (trivial/deitz/exit) to test this
	error message.
	
	I also added a simple scope test of block scopes.
	
	I futurized test/classes/deitz/test_type_in_class1.  This tests nested
	classes which should not yet be working, but used to.  I also
	futurized test/trivial/jplevyak/goto-2.  This has a scoping problem
	because all LabelStmts contain a BlockStmt.  I wonder if this is
	necessary.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: clone.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symbol.h 
	                          symtab.h type.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp filesToAST.cpp 
	chapel/compiler/symtab/: flatten.cpp removeDeadSymbols.cpp 
	                         symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             createNestedFuncIterators.cpp 
	                             eliminateReturns.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             fixup.h htmlview.cpp 
	                             inlineFunctions.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertVariableInitializations.cpp 
	                             preAnalysisHacks.cpp 
	                             processParameters.cpp 
	                             removeNestedFunctions.cpp 
	                             scopeResolveGotos.cpp 
	                             scopeResolveSymbols.cpp 
	                             simpleNestedFunctionMove.cpp 
	                             simpleNestedFunctionMove.h 
	                             specializeCallExprs.cpp 
	                             transformLetExprs.cpp 
	                             transformLetExprs.h 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarTwoModsNoneSpecified.chpl 
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVarModStrings1.chpl 
	                                             configVarModStrings2.chpl 
	                                             configVarSetOver.chpl 
	                                             configVarSetTwoTypes.chpl 
	                                             configVarTwoModules.chpl 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good classvar.good 
	                                    cs4.good cs5.good cs6.good 
	                                    destruct2.good 
	                                    destruct3.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    structtype.good 
	chapel/test/flowanalysis/newast/: chain.good codegen_test.good 
	                                  enum.good globalref.good 
	                                  mod.chpl mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good sum_type-1.good 
	                                  sum_type-2.good 
	                                  usebeforedef.good 
	chapel/test/modules/bradc/manymodules/: manymodules.chpl 
	                                        manymodules.good 
	chapel/test/trivial/shannon/: mod.chpl 
	chapel/test/trivial/shannon/quit/: assert.chpl assert.good 
	                                   exit.chpl halt.chpl 
Added files:
	chapel/test/classes/deitz/: test_type_in_class1.future 
	chapel/test/trivial/deitz/: exit.chpl exit.good test_scope3.chpl 
	                            test_scope3.good 
	chapel/test/trivial/jplevyak/: goto-2.future 

---------------------------------------------------------------------------

08/18/05 09:14:23 -- deitz

Log message:
	Removed Symoltable::defineSingleVarDef as this function was no longer
	good usage.  Better to create the VarSymbol and then the DefExpr, as
	this is all that is going on now, especially since in most cases the
	VarSymbol was then used via a dynamic cast.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         reconstructIterators.cpp symtab.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             inlineFunctions.cpp 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             removeLiterals.cpp 

---------------------------------------------------------------------------

08/18/05 11:05:29 -- deitz

Log message:
	Removed no-longer-used calls to Symboltable::setCurrentScope which is
	now almost only called in the traverse routines.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: flatten.cpp reconstructIterators.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             createNestedFuncIterators.cpp 
	                             insertThisParameters.cpp 
	                             removeLiterals.cpp 
	                             removeNestedFunctions.cpp 

---------------------------------------------------------------------------

08/18/05 13:14:54 -- deitz

Log message:
	With this checkin, I simplified some code in the CreateEntryPoint pass
	that I never understood...until now.
	
	Removed fake entry module which was made to pass analysis where the
	program started.  We now use the main function to do this.
	Coincidentally, this is where the program actually starts!  This
	eliminates some cruft that was once necessary but is no longer.
	
	Because the main function now calls the init function of the prelude
	module, I added a macro to make this a noop in the runtime by
	#defining __init_prelude() to be nothing.
	
	This removes RunAnalysis::entryStmtList which is no longer necessary.
	It only was so that it could point to the entry module code which was
	not otherwise traversed.
	
	Updated .goods for inlining reporting since the mangle numbers changed
	on the functions being inlined.  Should these print out the function
	name rather than the function cname to avoid this sensitivity.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/passes/: createEntryPoint.cpp createEntryPoint.h 
	                         preAnalysisCleanup.cpp runAnalysis.cpp 
	                         runAnalysis.h 
	chapel/compiler/traversals/: verify.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/18/05 14:00:54 -- shannon

Log message:
	Added the stdin, stdout, and stderr files to the file module.
	Added a test that assigns each of these to a file and writes out
	its filename, a test that tries to close stdin, and a test that
	tries to open stdout.
	
	Unfortunately I've introduced three test regressions.  Darn.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c main.c 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/memory/shannon/: freedMalloc.good 
	                             reallocZeroSize.good 
Added files:
	chapel/test/types/file/: closeStdin.chpl closeStdin.good 
	                         openStdout.chpl openStdout.good 
	                         stdioFilenames.chpl stdioFilenames.good 

---------------------------------------------------------------------------

08/18/05 14:34:57 -- deitz

Log message:
	Changed LabelStmt so that the field
	
	  LabelSymbol* label
	
	is now
	
	  DefExpr* defLabel
	
	Removed special-cased code to handle this symbol definition.  It is
	now handled with all the other DefExpr symbol definitions.
	
	As a side effect, this change fixes a bug (that didn't yet show up) in
	which if a label were in a cloned function, the label symbol would not
	be cloned.  This could have been fixed without this change, but the
	uniformity is a better way of making this fix.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: fixup.cpp scopeResolveGotos.cpp 
	                             verify.cpp 

---------------------------------------------------------------------------

08/18/05 14:51:43 -- mjoyner

Log message:
	Added support for mutually recursive nested functions.  Removed a mutually recursive future test and added an additional one.
	
	Also added a small change to inline function traversal to ensure that pragmas can be gathered from the function symbol.  Sometimes they are attached to the function symbol and sometimes they are attached to the function definition statement. Now the inline function traversal only has to look in one place to determine if a function should be inlined.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: findEnclosingScopeVarUses.cpp 
	                             findEnclosingScopeVarUses.h 
	                             inlineFunctions.cpp 
	                             removeNestedFunctions.cpp 
	                             removeNestedFunctions.h 
Added files:
	chapel/test/functions/mjoyner/nested/: .cvsignore 
	                                       mutual_recursive.chpl 
	                                       mutual_recursive.good 
Removed files:
	chapel/test/functions/deitz/nested/: test_nested6.future 

---------------------------------------------------------------------------

08/18/05 15:16:27 -- deitz

Log message:
	Renamed Variable to SymExpr.
	
	Renamed ParamSymbol::typeVariable to ParamSymbol::variableTypeSymbol
	though maybe there is a shorter name for this.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         createEntryPoint.cpp 
	                         preAnalysisCleanup.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertOutParameterInitializations.cpp 
	                         reconstructIterators.cpp 
	                         removeLikeTypes.cpp symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             createNestedFuncIterators.cpp 
	                             eliminateReturns.cpp 
	                             findEnclosingScopeVarUses.cpp 
	                             findEnclosingScopeVarUses.h 
	                             findUnknownTypes.cpp htmlview.cpp 
	                             inlineFunctions.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             instantiate.cpp 
	                             processImportExprs.cpp 
	                             processParameters.cpp 
	                             removeLiterals.cpp 
	                             removeNamedParameters.cpp 
	                             removeNestedFunctions.cpp 
	                             replaceReturns.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 
	                             specializeCallExprs.cpp 
	                             updateSymbols.cpp 

---------------------------------------------------------------------------

08/18/05 18:35:03 -- roxana

Log message:
	An updated version of the remove literals pass (it did not compile after
	Steve's search and replace pass). Also, I remembered why literals were
	named using the str -- a poor trick to avoid creating new symbols for the
	same literal. This should eventually be done with hashing on types and
	representation as John suggested.

Modified files:
	chapel/compiler/traversals/: removeLiterals.cpp 

---------------------------------------------------------------------------

08/19/05 13:00:23 -- deitz

Log message:
	DOCUMENTATION NOTE: Below I wrote some documentation on how the AST
	part of this compiler works and the routines that should be used for
	manipulating it.  Please read it and let me know if it is unclear
	and/or incorrect.
	
	Added the ability to insert elements in an AList before or after a
	point in the AList or at the head or tail of an AList using the AST
	manipulation routines called insertBefore, insertAfter, insertAtHead,
	and insertAtTail.  This change paves the way to improved parsing.
	
	Removed the add() function on AList as this is now accomplished with
	the overloaded insertAtTail.
	
	Added quicker error checking to ensure that, among other things,
	nothing that is in the AST is added to the AST.  Fixed two spots where
	this was done, in TransformLetExprs and BuildLValueFunctions.
	
	Added overloaded constructors for WhileLoopStmt, CondStmt, and
	WhenStmt to allow for the automatic creation of BlockStmts when Stmts
	or lists of Stmts are used in the constructor call.  Removed excessive
	calls of new BlockStmt().
	
	Removed now-poorly-abstracted function defineVarDef1 (which also had a
	pretty non-descriptive name).  Renamed defineVarDef2 to
	setVarSymbolAttributes which takes a list of ExprStmts of DefExprs of
	VarSymbols and sets the varType and consType fields of them.  This is
	used in parsing since tags like 'config' and 'var' are parsed before
	the list of variable definitions.
	
	Cleaned up the parser in a few superficial ways.
	
	+---------+
	| The AST |
	+---------+
	
	In the beginning, there is no AST.  The FilesToAST pass then parses
	the files and creates Stmts and Exprs along with Symbols and Types
	that are all linked together.  These are rooted at several
	ModuleSymbols which contain the modules that have been parsed.  At
	this point, the Stmts and Exprs are free and not part of what I will
	call the AST for the rest of this article.
	
	The CreateEntryPoint pass then adds a main function if one does not
	exist.  This I believe is in the wrong place and should be moved below
	the next pass.  The next pass is currently called Fixup.  It perhaps
	should be folded into the parsing as a call to InsertHelper.
	
	Fixup inserts all of the module symbols and the statements and
	expressions rooted from them into the AST.  Fixup sets the back
	pointers including parentSymbol, parentStmt, and parentExpr.  With my
	checkin two days ago, Fixup also created the Symboltable by creating
	and filling the Scopes where necessary and defining the symbols into
	these scopes.  (A current exception is the module scope.)
	
	After Fixup, the AST is in good shape.  Now it is fair to refer to
	Stmts and Exprs that are in the AST and ones that are not in the AST.
	When you build up a new Stmt it is not in the AST until you insert it
	into the AST using one of several routines that I will document here.
	Stmts and Exprs that are not in the AST do not have the parentSymbol
	field set on them.  This is a back pointer along with parentStmt,
	parentExpr, and parentScope that points to its parents in the AST.
	
	To modify the AST and/or add to it, there are 6 routines:
	
	  BaseAST::remove()
	    This removes a given part of the AST from the AST.  It can then be
	    reinserted elsewhere (as of two days ago).
	
	  BaseAST::replace(BaseAST*)
	    This removes 'this' from the AST and then inserts the argument in
	    the same place.
	
	  BaseAST::insertBefore(BaseAST*)
	  BaseAST::insertAfter(BaseAST*)
	    This inserts the argument before/after 'this' which must be in an
	    AList.  It also can be used to insert the elements of an AList
	    before/after 'this' if the argument is itself an AList.
	
	  AList<elemtype>::insertAtHead(elemtype*)
	  AList<elemtype>::insertAtTail(elemtype*)
	  AList<elemtype>::insertAtHead(AList<elemtype>*)
	  AList<elemtype>::insertAtTail(AList<elemtype>*)
	    This inserts the argument at the head/tail of 'this' or, if the
	    argument is an AList, then it inserts the elements in the argument
	    AList at the head/tail of 'this'.
	
	These routines build up the AST by calling the InsertHelper (currently
	Fixup) traversal which sets back pointers, builds scopes, and defines
	symbols.
	
	These routines can be used with Stmts and Exprs only.  There are no
	aliases of Stmts and Exprs (not counting back pointers, etc.) in the
	AST.  Copies must be made.  This can be done easily by using the
	copy() method on Stmts or Exprs.
	
	Symbols and Types can be referenced multiple times in the AST and
	indeed should be.  SymExpr identifies a use of a Symbol and DefExpr
	identifies a definition of a new Symbol.  Symbols should not appear in
	more than one DefExpr.

Modified files:
	chapel/compiler/AST/: alist.cpp baseAST.cpp expr.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h stmt.h 
	                          symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             insertVariableInitializations.cpp 
	                             resolveSymbols.cpp 
	                             transformLetExprs.cpp verify.cpp 

---------------------------------------------------------------------------

08/19/05 15:32:47 -- deitz

Log message:
	Added a verification test to make sure that the symbol defined by a
	LabelStmt is a LabelSymbol.

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

08/19/05 15:57:59 -- deitz

Log message:
	Fixed module use so that nested module uses and recursive module uses
	work.  This involved changing the implementation of looking up symbols
	in the symboltable and computing the visible functions at each scope.
	
	I added a new module called _chpl_standard.chpl that uses the other
	modules in modules/standard.  These are all modules that contain
	Chapel code that is included with every Chapel program.  To add a new
	module you just have to add a use statement in this module and also
	add it to the parsing pass so that it is parsed in.  Hopefully we can
	change how it is handled in this last step eventually.
	
	I added a call to resetMemStat() at the end of _chpl_standard.chpl to
	reset the memory statistics right before the user code is about to be
	executed.  Here is how the programs start out (currently):
	
	calls main()             -- in runtime/src/main.c
	  calls _chpl_main()     -- in generated code (main function)
	    uses prelude module  -- in compiler/parser/prelude.chpl
	    calls prelude init
	    uses common module   -- in generated code
	    calls common module init
	    uses standard module -- in modules/standard/_chpl_standard.chpl
	    calls standard module init
	      uses complex       -- in modules/standard/_chpl_complex.chpl
	      calls complex module init
	      uses file          -- in modules/standard/_chpl_file.chpl
	      calls file module init
	      etc.               -- in    "   /   "    /_chpl_etc..chpl
	      calls etc. module init
	      calls resetMemStat -- in runtime/src/chplmem.c
	    calls main user's module init
	    executes code user has in their main function
	
	This fixes the regression for memory/shannon/printFinalMemStat, but
	not for memory/shannon/memmaxExceedsLineno or
	memory/shannon/memstatPrint.
	
	I fixed the regression for test/types/seq/bradc/length.modify which
	failed because the line numbers in the prelude changed.
	
	I futurized four tests for John to take a look at when he gets back:
	
	  test/arrays/deitz/test_array_class_trial1
	  test/arrays/deitz/test_array_class_trial2
	  test/arrays/deitz/test_array_class_trial4a
	  test/arrays/deitz/test_array_class_trial5a

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: processImportExprs.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: enum.good 
	chapel/test/types/seq/bradc/: length.modify.good 
Added files:
	chapel/modules/standard/: _chpl_standard.chpl 
	chapel/test/arrays/deitz/: test_array_class_trial1.future 
	                           test_array_class_trial2.future 
	                           test_array_class_trial4a.future 
	                           test_array_class_trial5a.future 

---------------------------------------------------------------------------

08/22/05 09:40:26 -- deitz

Log message:
	Enabled verification check to make sure that every symbol found in the
	Symboltable is also traversed in the AST via a DefExpr.  This was
	something that I had in place for a long time but was unable to make
	work.  Exceptions are module symbols, symbols in the intrinsic scope,
	type symbols for sum types and variable types.

Modified files:
	chapel/compiler/traversals/: verify.cpp 

---------------------------------------------------------------------------

08/22/05 11:33:34 -- jplevyak

Log message:
	Add option to remove manual coercion of primitive types
	(will be handled by overloaded = in the future).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

08/22/05 14:28:05 -- deitz

Log message:
	New future simplifies Shannon's bug found this morning in the
	interaction between the order wrapper and the default wrapper.

Added files:
	chapel/test/functions/deitz/: test_named_default_gotcha.chpl 
	                              test_named_default_gotcha.future 
	                              test_named_default_gotcha.good 

---------------------------------------------------------------------------

08/22/05 14:40:59 -- deitz

Log message:
	Greatly simplfied the order wrapper code.  I changed the mapping
	analysis passes to a formals to formals mapping instead of a formals
	to actuals mapping which lets us use the 'get' method on the map.  The
	two formals are the formals in the original function and the formals
	in the wrapper function.
	
	Started to simplify the code used to create FnSymbols and functions in
	general.  This involved beefing up the FnSymbol constructor and not
	using Symboltable::start,continue,finish in some but not all places in
	the code.
	
	Removed isDead and keepLive from Symbol as these are no longer used.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	                         removeDeadSymbols.cpp 

---------------------------------------------------------------------------

08/22/05 16:54:42 -- jplevyak

Log message:
	Remove kludge for dealing with the old issue of instantiated functions
	not appearing in the dispatch tables.
	This fixes test_named_default_gotcha.chpl, however it results in
	two new futures, both for SEGV in codegen.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: collectASTS.cpp 
Added files:
	chapel/test/domains/roxana/: test_hash_table3.future 
	chapel/test/types/type_variables/deitz/: test_datablock3.future 

---------------------------------------------------------------------------

08/22/05 16:57:56 -- jplevyak

Log message:
	remove 'fixed' future

Removed files:
	chapel/test/functions/deitz/: test_named_default_gotcha.future 

---------------------------------------------------------------------------

08/22/05 17:24:45 -- deitz

Log message:
	Fixed recent futurizeds and removed .futures.  The prelude _data is a
	little fragile but after instantiation is robustified this can
	probably be made more secure.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Removed files:
	chapel/test/domains/roxana/: test_hash_table3.future 
	chapel/test/types/type_variables/deitz/: test_datablock3.future 

---------------------------------------------------------------------------

08/23/05 09:22:33 -- deitz

Log message:
	Greatly simplified the default and coercion wrapper codes.  These are
	much easier to write now that the symboltable construction is
	decoupled from the AST construction because there are no constraints
	on the order in which things must be built up.  Thus if it is easier
	to build up the formals and the body of a function at the same time,
	it is now possible.
	
	Added two new functions, clear_file_info(BaseAST*) and
	reset_file_info(BaseAST*, int lineno, char* filename), that use a
	traversal to clear or reset the line number and file name of a part of
	the AST.  The code for this traversal is in a new file
	traversals/astHelpers.cpp which is meant to contain AST utility
	functions that may involve traversals.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/compiler/traversals/: astHelpers.cpp 

---------------------------------------------------------------------------

08/23/05 09:42:10 -- deitz

Log message:
	Added a test which I thought would build a sum type but does not.

Added files:
	chapel/test/classes/deitz/: test_sum_type1.chpl 
	                            test_sum_type1.good 

---------------------------------------------------------------------------

08/23/05 10:18:01 -- jplevyak

Log message:
	example of sum types in action.  To see what is happening
	use --no-inline and --savec

Added files:
	chapel/test/classes/jplevyak/: sum_type-3.chpl sum_type-3.good 

---------------------------------------------------------------------------

08/23/05 12:18:35 -- deitz

Log message:
	Added skeleton code for reporting high-level error messages based on
	analysis error flags.  Use --analysis-errors to get the high-level
	messages, which will currently just say "High-level error message".
	It will also print out the analysis messages and will continue to do
	so unless it feels it has printed out good enough errors, at least for
	a while.
	
	Added error macro USR_FATAL_CONT which prints out a fatal error but
	does not stop until a USR_FATAL or INT_FATAL is detected.

Modified files:
	chapel/compiler/analysis/: Makefile.share analysis.cpp fa.cpp 
	chapel/compiler/include/: misc.h 
	chapel/compiler/util/: misc.cpp 
Added files:
	chapel/compiler/analysis/: reportErrors.cpp 

---------------------------------------------------------------------------

08/23/05 14:37:13 -- deitz

Log message:
	Implemented initial high-level support for inheritance as in
	
	  class C { ... }
	  class D : C { ... }
	
	Added three error tests and one correct test.
	
	The types and fields in the super class are added to the top of the
	sub class.
	
	Added a new traversal BuildClassHierarchy that adds the fields in
	super classes to the sub classes and sets the sub classes's
	typeParents fields to contain the super classes.
	
	This traversal should also change classes into value classes or
	constructed classes if they inherit from class value (as opposed to
	class object).  This should involve moving object into the prelude,
	adding value to the prelude, and making all classes inherit from
	object during the BuildClassHierarchy traversal.
	
	Added CLASS_VALUECLASS where necessary (sometimes where CLASS_CLASS
	was referenced, sometimes where CLASS_RECORD was referenced).

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         resolveTypes.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	                             inlineFunctions.cpp 
Added files:
	chapel/compiler/traversals/: buildClassHierarchy.cpp 
	                             buildClassHierarchy.h 
	chapel/test/classes/deitz/inherit/: test_inherit1.chpl 
	                                    test_inherit1.good 
	                                    test_inherit_error1.chpl 
	                                    test_inherit_error1.good 
	                                    test_inherit_error2.chpl 
	                                    test_inherit_error2.good 
	                                    test_inherit_error3.chpl 
	                                    test_inherit_error3.good 

---------------------------------------------------------------------------

08/23/05 14:47:53 -- shannon

Log message:
	Changed memory tracing to only handle user code, and
	fixed a bug with removing a bucket from a list in
	memtable.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/modules/standard/: _chpl_standard.chpl 
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: chplmem.c main.c 
	chapel/test/memory/shannon/: configVarFile.good freedMalloc.good 
	                             memmaxExceeds.execopts 
	                             memmaxExceedsLineno.execopts 
	                             memstatPrint.chpl memstatPrint.good 
	                             reallocZeroSize.good 

---------------------------------------------------------------------------

08/23/05 14:55:24 -- deitz

Log message:
	Added inheritance future.

Added files:
	chapel/test/classes/deitz/inherit/: test_inherit2.chpl 
	                                    test_inherit2.future 
	                                    test_inherit2.good 

---------------------------------------------------------------------------

08/23/05 14:57:11 -- deitz

Log message:
	Added bad function call test to work on high-level errors.

Added files:
	chapel/test/functions/deitz/: test_bad_function.chpl 
	                              test_bad_function.future 
	                              test_bad_function.good 

---------------------------------------------------------------------------

08/23/05 14:58:45 -- deitz

Log message:
	Updated task list

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

08/23/05 15:45:55 -- jplevyak

Log message:
	This checkin add a significant improvement to the ability of analysis
	to deal with global variables and non-SSA/SSU variables (which unfortunately
	make up most of the variables in a Chapel program).
	
	1. separate out the "gen" (generation) of data flow values from
	   the "in" (incoming) "out" (outgoing) and "restrict" (flow through
	   restriction) sets.
	
	   in the future this could be used to "reflow" portions of the graph
	   rather than reevaluating the constriants based on the IF1 representation,
	   but for now that is not done.
	
	2. when confluences of data flow information (types) occur (other than
	   at function arguments which are handled straightforwardly), all
	   sources of the inforation (types) are numbered from the sources.
	   This turns the (possibly cyclic) data flow graph into a DAG.  Confluences
	   are recomputed on the DAG and the appropriate (abstract) cloning is
	   done.
	
	3. Always force a new entry-set on a split... this may be less efficient
	   than it could be; I'll be tracking this.   This alternative is to group
	   "compatible" subsets.
	
	4. Do no coerce primitives assignments, instead use the overloaded = operator.
	
	This last change results in a single regression: type_var_fun-1.chpl which
	is caused by _retval not being initialized.  This is likely a problem with
	noDefaultInit (which I don't think should be set for _retval) or pssibly
	with generic instantiation (which this test uses).   I am looking into it.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: fa.h 
	chapel/compiler/vparser/: parse_ast.cpp 

---------------------------------------------------------------------------

08/23/05 16:28:22 -- deitz

Log message:
	Added class 'object' and class 'value' to the prelude.  Made dtObject
	point to this class.  It is no longer a PrimitiveType.
	
	Fixed a bug in BuildClassHierarchy in which the parent class was added
	to the typeParents vector rather than the dispatchParents vector.
	
	Made all classes that don't inherit from any class inherit from class
	'object' (except of course for 'object' itself).
	
	Removed analysis.cpp code to add dtObject as a super class of classes
	that don't have super classes since this is done before analysis now.
	
	Removed future for test/classes/deitz/inherit/test_inherit2.
	
	Added dynamic dispatch future test_inherit3.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: buildClassHierarchy.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/seq/bradc/: length.modify.good 
Added files:
	chapel/test/classes/deitz/inherit/: test_inherit3.chpl 
	                                    test_inherit3.future 
	                                    test_inherit3.good 
Removed files:
	chapel/test/classes/deitz/inherit/: test_inherit2.future 

---------------------------------------------------------------------------

08/23/05 17:32:29 -- deitz

Log message:
	REGRESSIONS
	-----------
	  test/types/complex/deitz/test_complex5.chpl
	  test/types/complex/deitz/test_complex6.chpl
	
	This is a small change and I can't make any connection between the two
	regressions above.  John, can you take a look at this.  I'll continue
	to look and let you know if I find something as soon as I do if I do.
	
	Added support for value classes.  This is implemented by inheriting
	from the special class 'value'.  Value classes are different than
	classes in that they are automatically constructed (like records) and
	they overload assignment (like records).  They are different than
	records in that they allow inheritance (like classes) and are
	nominally typed (like classes).
	
	A class with classTag CLASS_CLASS is changed to a value class with
	classTag CLASS_VALUECLASS in BuildClassHierarchy if it is or inherits
	from class 'value'.
	
	Added a user-level warning which says that a program looks like it
	requires dynamic dispatch.  This warning immediately precedes an
	internal error that says a function could not be resolved.
	
	Added two value class tests.
	
	Added two more complex tests.
	
	Updated task list.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/traversals/: buildClassHierarchy.cpp 
	                             resolveSymbols.cpp 
Added files:
	chapel/test/classes/deitz/inherit/: test_value1.chpl 
	                                    test_value1.good 
	                                    test_value2.chpl 
	                                    test_value2.good 
	chapel/test/types/complex/deitz/: test_complex5.chpl 
	                                  test_complex5.good 
	                                  test_complex6.chpl 
	                                  test_complex6.good 

---------------------------------------------------------------------------

08/23/05 17:40:21 -- jplevyak

Log message:
	Remove unused #define #ifdef combo

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

08/24/05 11:00:39 -- deitz

Log message:
	Default/Order wrapper future.  This test fails because the function
	that the first wrapper calls is changed because of the second function
	call.  I'm not sure what is happening.  I believe it is related to the
	bug Shannon found before, but since that is fixed, this must be a
	little different.  John, can you take a look?

Added files:
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed4.future 
	                                           test_defaultnamed4.good 
	                                           test_defaultnamed4.chpl 

---------------------------------------------------------------------------

08/24/05 11:24:12 -- deitz

Log message:
	Changed the complex record in the standard complex module to be a
	complex value class.  Removed _re and _im field indirection, renaming
	them real and imag and removing the real and imag var functions.
	
	Flipped the order of real and imag in the complex class so that real
	comes first.
	
	Improved Html output to print out the name in a NamedExpr (used for
	pass by name) and to only print apostrophes around string literals.
	All literals are light blue.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: htmlview.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

08/24/05 11:29:08 -- shannon

Log message:
	Added a working test and a future.  The working test
	sets a typed integer variable in the class constructor.
	The future test fails to correctly set in the
	constructor a variable that isn't typed in the class.
	
	This may be the same problem that Steve noted with
	Default/Order wrappers in his future test checkin
	earlier.

Added files:
	chapel/test/classes/shannon/: .cvsignore 
	                              varIntSetInConstructor.chpl 
	                              varIntSetInConstructor.future 
	                              varIntSetInConstructor.good 
	                              varIntTypedSetInConstructor.chpl 
	                              varIntTypedSetInConstructor.good 

---------------------------------------------------------------------------

08/24/05 11:39:50 -- deitz

Log message:
	Add a future of a class with a type variable where in the constructor
	it sets the field and the type variable should be inferred.  I think.
	
	This seg faults with the -t in analysis dump_html.  John, can you take
	a look at that.
	
	The other problem seems to be in ProcessParameters and I'm not sure
	what is the problem yet.

Added files:
	chapel/test/types/type_variables/deitz/: test_infer_class1.chpl 
	                                         test_infer_class1.future 
	                                         test_infer_class1.good 

---------------------------------------------------------------------------

08/24/05 11:47:02 -- deitz

Log message:
	Added second class type variable inference test case, for discussion also.

Added files:
	chapel/test/types/type_variables/deitz/: test_infer_class2.chpl 
	                                         test_infer_class2.future 
	                                         test_infer_class2.good 

---------------------------------------------------------------------------

08/24/05 12:03:08 -- jplevyak

Log message:
	Fix a couple bugs in -t HTML output in the handling of
	Literals... which are obsolete as soon as the other
	checking gets done.  sigh.... what a waste.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp sym.cpp 

---------------------------------------------------------------------------

08/24/05 13:36:00 -- bradc

Log message:
	A minor change that has been sitting on my laptop for awhile.
	Modified Steve's munging of identifier names in codegenOne.cpp
	by the module name so that if there is a single user module,
	the symbols will not be munged.  This makes the output of a
	single-module test easier to read and less sensitive to the
	filename (when the modulename is taken from the filename).
	Standard module identifier names are still munged, for better
	or worse.  In order to turn that off, we'd have to rename
	stdin/stdout using some other mechanism, but this was lower
	priority to me personally.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/symtab/: codegenOne.cpp 

---------------------------------------------------------------------------

08/24/05 13:47:20 -- jplevyak

Log message:
	Fix a potential SEGV in a debug routine.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

08/24/05 13:50:02 -- shannon

Log message:
	Removed three regressions:
	
	 [Error matching program output for memory/shannon/memmaxExceedsLineno]
	 [Error matching program output for memory/shannon/memstatPrint]
	 [Error matching program output for memory/shannon/printFinalMemStat]

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

08/24/05 14:00:52 -- deitz

Log message:
	Added test approximating how I want to change tuples and tuple
	literals, to avoid instantiating on dtUnknown.

Added files:
	chapel/test/types/type_variables/deitz/: test_tuplelike1.chpl 
	                                         test_tuplelike1.future 
	                                         test_tuplelike1.good 

---------------------------------------------------------------------------

08/24/05 15:59:08 -- deitz

Log message:
	Changed parameter to param at the language level.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y prelude.chpl 
	chapel/modules/standard/: _chpl_htuple.chpl 
	chapel/test/Share/: constant-folding-1.chpl 
	chapel/test/arrays/deitz/: test_array_class1.chpl 
	                           test_array_class2.chpl 
	                           test_domain1.chpl test_domain2.chpl 
	                           test_domain2D.chpl test_domain3.chpl 
	chapel/test/distributions/bradc/foundations/: blockdist1.chpl 
	                                              blockdist2.chpl 
	                                              blockdist3.chpl 
	chapel/test/domains/bradc/: paramRank.chpl 
	chapel/test/domains/roxana/: test_hash_table.chpl 
	chapel/test/functions/deitz/: test_where_param1.chpl 
	                              test_where_param2.chpl 
	                              test_where_param3.chpl 
	chapel/test/reviews/jplevyak/: review1.chpl review2.chpl 
	                               review3.chpl 
	chapel/test/ssca/ssca2/: ssca2.parses.chpl 
	                         ssca2.typedarrays.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc2.chpl 
	                                         inlfunc2_report.chpl 
	chapel/test/trivial/roxana/: test_param_decl.chpl 
	                             test_param_decl1.chpl 
	                             test_param_decl2.chpl 
	                             test_param_decl3.chpl 
	                             test_param_init.chpl 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation1.chpl 
	                                test_tuple_record_implementation10.chpl 
	                                test_tuple_record_implementation11.chpl 
	                                test_tuple_record_implementation12.chpl 
	                                test_tuple_record_implementation13.chpl 
	                                test_tuple_record_implementation14.chpl 
	                                test_tuple_record_implementation15.chpl 
	                                test_tuple_record_implementation16.chpl 
	                                test_tuple_record_implementation2.chpl 
	                                test_tuple_record_implementation3.chpl 
	                                test_tuple_record_implementation4.chpl 
	                                test_tuple_record_implementation5.chpl 
	                                test_tuple_record_implementation6.chpl 
	                                test_tuple_record_implementation7.chpl 
	                                test_tuple_record_implementation8.chpl 
	                                test_tuple_record_implementation9.chpl 
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_class1.chpl 
	                                         test_paramvar_function1.chpl 

---------------------------------------------------------------------------

08/24/05 16:05:35 -- deitz

Log message:
	Renamed ParamSymbol to ArgSymbol (SYMBOL_PARAM to SYMBOL_ARG), renamed
	paramType to intentTag (and PARAM_INOUT, ... to INTENT_INOUT, ...),
	renamed paramScope to argScope.
	
	Made some other related renaming changes.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h chplenum.h symbol.h 
	                          symscope.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	                         postAnalysisCleanup.cpp symscope.cpp 
	                         symtab.cpp symtabTraversal.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             checkSemantics.cpp 
	                             createNestedFuncIterators.cpp 
	                             findEnclosingScopeVarUses.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             htmlview.cpp inlineFunctions.cpp 
	                             inlineFunctions.h 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             instantiate.cpp 
	                             preAnalysisHacks.cpp 
	                             processParameters.cpp 
	                             removeNestedFunctions.cpp 
	                             updateSymbols.cpp view.cpp 
	chapel/test/trivial/roxana/: test_param_decl2.good 

---------------------------------------------------------------------------

08/24/05 16:51:52 -- mjoyner

Log message:
	Added compiler support to transform all functions so that there is only one return.  That return is the last statement in the program.  I also made modifications to the code to ensure that there is only one _retval created per function.  This makes the c codegened functions look cleaner.  I also added some additional support for labels.
	
	I added several test cases to show the support for one return functions.  I also
	 added test cases that demonstrate we can inline iterators by adding a pragma "inline" to them.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	                             eliminateReturns.cpp 
	                             eliminateReturns.h 
	                             inlineFunctions.cpp 
	                             replaceReturns.cpp 
	                             updateSymbols.cpp updateSymbols.h 
	chapel/test/flowanalysis/newast/: multiple_return.good 
Added files:
	chapel/test/functions/mjoyner/labelret/: .cvsignore label1.chpl 
	                                         label1.good label2.chpl 
	                                         label2.good label3.chpl 
	                                         label3.good label4.chpl 
	                                         label4.good label5.chpl 
	                                         label5.good 
	chapel/test/trivial/mjoyner/iterators/: nest_func_iterator6.chpl 
	                                        nest_func_iterator6.good 
	                                        nest_func_iterator7.chpl 
	                                        nest_func_iterator7.good 

---------------------------------------------------------------------------

08/25/05 09:04:50 -- jplevyak

Log message:
	Add "calls" information to the HTML view (was disabled in the
	move from ParanOps).

Modified files:
	chapel/compiler/traversals/: htmlview.cpp 

---------------------------------------------------------------------------

08/25/05 10:06:52 -- jplevyak

Log message:
	Cleanup of handling of DefExpr.  The special cases are now clearer.
	Removed coercions in DefExpr, and use overloaded = instead.
	Improved handling of OUT parameters with untyped arguements.

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/test/types/seq/bradc/: length.modify.good 
Added files:
	chapel/test/functions/jplevyak/: type_var_fun-1.future 
	chapel/test/trivial/deitz/demo/: sample1.future sample1b.future 

---------------------------------------------------------------------------

08/25/05 11:11:18 -- deitz

Log message:
	Added a new future, for myself, that shows a problem with parsing of
	statements, particularly var declaration statements.  I intend to fix
	this soon but don't want to lose this.

Added files:
	chapel/test/trivial/deitz/: test_parse_stmt.chpl 
	                            test_parse_stmt.future 
	                            test_parse_stmt.good 

---------------------------------------------------------------------------

08/25/05 13:33:20 -- deitz

Log message:
	Improved CallExpr constructor.  You can now construct a new CallExpr
	with a baseExpr as the first argument and up to four arguments as the
	2nd through 5th arguments.  The baseExpr can be an Expr, a string, or
	an opTag.  If it is a string, it is converted into a SymExpr of an
	UnresolvedSymbol of the string.  If it is an opTag, it is an operator
	CallExpr.  The arguments can be a list of Exprs, a single Expr, or a
	Symbol.  If it is a Symbol it is stuck in a SymExpr.
	
	Simplified some CallExpr constructor calls.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	                         reconstructIterators.cpp 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             createNestedFuncIterators.cpp 
	                             inlineFunctions.cpp 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 

---------------------------------------------------------------------------

08/25/05 14:24:31 -- deitz

Log message:
	Added support for allowing a set of statements (called
	parsed_block_stmt in the parser) to be used whereever a block
	statement used to be required.  This was already done for function
	bodies, but was not done for other things.  For example
	
	  while (expr) block_stmt;
	
	used to require a block_stmt, but now works for the same set of
	statements that are allowed in function bodies.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

08/25/05 14:50:14 -- bradc

Log message:
	This was meant to be a minor change that turned into a
	cascading list of small but valuable modifications.
	The high-level points are:
	
	* eliminated unnecessary string parameter temps (most
	  notably for printing out strings, where each printed
	  resulted in a mess of code).
	
	* improved our semantic checking of assigning to
	  constants.  Previously, a number of cases related to
	  classes, records, and blank parameter intents were
	  slipping through the cracks.
	
	* with Mack's help, fixed a bug in
	  createNestedFuncIterators.h and
	  createNestedFunctions.cpp in which all arguments were
	  being created with INTENT_BLANK.
	
	* some cosmetic changes related to strings and memory
	  tracking
	
	* updated a bunch of tests related to these changes,
	  and added some new ones to lock these features in.
	
	Two new regressions that revealed a pre-existing bug,
	which change #3 above revealed.  Mack is working on
	fixing these:
	
	       functions/deitz/nested/test_nested6.chpl
	       functions/mjoyner/nested/mutual_recursive.chpl
	
	More details below...
	
	Passing strings
	---------------
	Found that we were inserting temps for parameters
	passed by blank intent, which shouldn't be necessary
	if the parameter truly isn't being assigned to.
	Since most strings were passed by blank intent,
	this got rid of most of the problems we were having.
	
	Assigning to Constants
	----------------------
	Strengthened the isConst() method on MemberAccesses to
	handle a few cases in a specialized manner:
	
	- classes: see if the member is constant;  it doesn't
	           matter whether or not the base expression
	           is since it only refers to the reference.
	- records, unions, value classes: if either the base
	           expression or the member expression is
	           constant, the expression is constant.
	- sum types: if any of the types that make up the sum
	           type are constant by the above definition,
	           the expression is.
	
	Also, made INTENT_BLANK get treated as const for
	ArgSymbols.
	
	Also, tightened up semantic check to apply to all
	assignment operators, not just a naked = .
	
	Argument intents for nested functions and iterators
	---------------------------------------------------
	For arguments created to implement the passing of
	state into a nested function, gave them INTENT_INOUT
	so that modifications to the parameter would be
	reflected at the callsite.
	
	For arguments that passed an iterator's indices into
	a function, made these INTENT_BLANK to reflect the
	fact that the user should not be able to modify
	them.
	
	For iterator arguments that are made into function
	arguments, inherited their intents from the original
	arguments (previously they were all being set to
	INTENT_BLANK).
	
	Cosmetic string changes
	-----------------------
	Changed init_string() from _glom_strings(1, "") to
	a call to _chpl_calloc() so that we could generate
	a specialized memory log message for this case.
	Previously, it resulted in a lot of memory log
	entries that were hard to identify as string
	initializations since they looked like glom_strings
	calls (and particularly useless ones :)
	
	Changed the string copy routine to not call
	glomstrings when creating its allocation description,
	because this in turn resulted in memory allocation
	and deallocation and generally cluttered up the
	memory log.
	
	Test changes
	------------
	* fixed my defaultParam and intents tests which were
	  modifying parameters with blank intent, apparently
	  because I was losing my mind when I wrote them.
	
	* made copies of a couple of the original defaultParam
	  and intents tests to make sure that the error was
	  properly reported now.
	
	* added a test of string intents, since they are
	  implemented via a pointer, and could break in the
	  future as people mess with argument temps and
	  intents.
	
	* updated future for
	  functions/jplevyak/intent-8-error.chpl, because it
	  always takes me five minutes to remember why this
	  is a future.
	
	* updated Shannon's memmaxExceeds test because it
	  relied on a bunch of string temps to be created
	  which I eliminated.  Switched the test to use
	  class constructors to allocate too much memory.
	
	* did the same for memmaxExceedsLineno, because the
	  line number we report is not helpful.
	
	* created a new test memmaxExceedsLineno2 that
	  tests the line number feature using a long string,
	  which keeps a good memmaxExceeds test in the system.
	
	* updated memstatPrint to also use a class constructor
	  and string reallocation as a way to get interesting
	  and predictable max and current string lengths.
	
	* similarly for printFinalMemStat, but also eliminated
	  other types that resulted in dynamic allocation for
	  fear that they wouldn't always and that this would
	  become a fragile test.
	
	* added a test printMemTable2 that prints the memtable
	  for some class constructors, since the original
	  printMemTable has been out of commision.
	
	* added two new variations of Mack's nest_func_iterator2a
	  test to lock in the changes we made to his code.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             createNestedFuncIterators.cpp 
	                             createNestedFuncIterators.h 
	                             removeNestedFunctions.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/: REGRESSIONS 
	chapel/test/functions/bradc/: defaultParam.chpl 
	                              defaultParam.good 
	                              defaultParam2.chpl 
	                              defaultParam2.good 
	                              defaultParamWithReturn.chpl 
	                              defaultParamWithReturn.good 
	                              intents-classes2.chpl 
	                              intents-classes2.good 
	                              intents-classes3.chpl 
	                              intents-classes3.good 
	                              intents-classes4.chpl 
	                              intents-classes4.good intents.chpl 
	                              intents.good 
	chapel/test/functions/jplevyak/: intent-8-error.future 
	chapel/test/memory/shannon/: configVarFile.good 
	                             memmaxExceeds.chpl 
	                             memmaxExceedsLineno.chpl 
	                             memmaxExceedsLineno.good 
	                             memstatPrint.chpl memstatPrint.good 
	                             printFinalMemStat.chpl 
	                             printFinalMemStat.good 
Added files:
	chapel/test/classes/deitz/inherit/: .cvsignore 
	chapel/test/functions/bradc/: intents-classes2-error.chpl 
	                              intents-classes2-error.good 
	                              intents-error.chpl 
	                              intents-error.good 
	                              intents-strings.chpl 
	                              intents-strings.good 
	chapel/test/memory/shannon/: memmaxExceedsLineno.future 
	                             memmaxExceedsLineno2.chpl 
	                             memmaxExceedsLineno2.compopts 
	                             memmaxExceedsLineno2.execopts 
	                             memmaxExceedsLineno2.good 
	                             printMemTable2.chpl 
	                             printMemTable2.execopts 
	                             printMemTable2.good 
	chapel/test/trivial/mjoyner/iterators/: 
	                                        nest_func_iterator2a.chpl 
	                                        nest_func_iterator2a.good 
	                                        nest_func_iterator2b.chpl 
	                                        nest_func_iterator2b.good 

---------------------------------------------------------------------------

08/25/05 16:36:38 -- shannon

Log message:
	Added a future for an overloaded function call where
	the first function has a single float argument and the
	second function has three arguments, the third an integer.
	
	When this function is called with a single integer argument,
	a call to the float function is made.

Added files:
	chapel/test/classes/shannon/: overloadedFunction.chpl 
	                              overloadedFunction.good 

---------------------------------------------------------------------------

08/25/05 16:39:07 -- jplevyak

Log message:
	Move "Immediate" class to include/num.h to support
	binary constant Symbols.

Modified files:
	chapel/compiler/include/: num.h sym.h 

---------------------------------------------------------------------------

08/25/05 16:44:56 -- shannon

Log message:
	Forgot to include the future, and committed the wrong
	output as good.  Woops.

Modified files:
	chapel/test/classes/shannon/: overloadedFunction.good 
Added files:
	chapel/test/classes/shannon/: overloadedFunction.future 

---------------------------------------------------------------------------

08/25/05 17:20:55 -- deitz

Log message:
	Rearranged chapel.y and started to add documentation, in preparation
	for statement parsing change.
	
	Added support for statement-level expressions, evaluated for side
	effects, and a test case.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_expr_stmt.chpl 
	                            test_expr_stmt.good 

---------------------------------------------------------------------------

08/25/05 17:30:43 -- deitz

Log message:
	Cleaned parsing of type variable formal arguments.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

08/26/05 08:35:28 -- jplevyak

Log message:
	Fix bug which determined whether or not an order wrapper
	should be constructed.   I believe this hides (and therefore
	seems to resolve) some regressions because unnecessary order
	wrappers (which are not handled correctly because of a separate
	bug related to visibility) are no longer created.  Also,
	the .good file for test_defaultnamed3 seems to have gotten corrupted,
	so I fixed it.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed3.good 

---------------------------------------------------------------------------

08/26/05 08:44:33 -- jplevyak

Log message:
	Remove some .futures for tests which succeed and seem to do so for
	the right reasons (test_class_trial5a is succeeding because of blind luck).

Removed files:
	chapel/test/arrays/deitz/: test_array_class_trial1.future 
	                           test_array_class_trial2.future 
	                           test_array_class_trial4a.future 

---------------------------------------------------------------------------

08/26/05 10:11:47 -- jplevyak

Log message:
	Setters now do not require the RHS to be of the same type as the
	instance variable.  The coercion goes on inside the setter, and
	besides, this was giving problems when trying to set class reference
	typed things to NULL (which).

Modified files:
	chapel/compiler/analysis/: dead.cpp fa.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Removed files:
	chapel/test/classes/bradc/: declClassType.future 

---------------------------------------------------------------------------

08/26/05 10:14:01 -- jplevyak

Log message:
	Fix typo in test case and remove .future.

Modified files:
	chapel/test/classes/bradc/: declClassType1c.chpl 
Removed files:
	chapel/test/classes/bradc/: declClassType1c.future 

---------------------------------------------------------------------------

08/26/05 10:18:48 -- jplevyak

Log message:
	Remove a .future for a test which is working (for the right reasons).

Removed files:
	chapel/test/classes/deitz/: test_type_in_class3.future 

---------------------------------------------------------------------------

08/26/05 10:20:39 -- jplevyak

Log message:
	Removed a future.  Test is working.

Removed files:
	chapel/test/classes/shannon/: varIntSetInConstructor.future 

---------------------------------------------------------------------------

08/26/05 10:33:26 -- jplevyak

Log message:
	Update .good file and remove .future

Modified files:
	chapel/test/functions/deitz/default/: test_default4-error.good 
Removed files:
	chapel/test/functions/deitz/default/: test_default4-error.future 

---------------------------------------------------------------------------

08/26/05 10:48:48 -- mjoyner

Log message:
	Fixed mutual recursive nested function bug.  The traversal now uses an iterative approach to determine the enclosing function variable uses for each nested function.

Modified files:
	chapel/compiler/traversals/: removeNestedFunctions.cpp 
	                             removeNestedFunctions.h 

---------------------------------------------------------------------------

08/26/05 11:39:44 -- deitz

Log message:
	Robustified the CondStmt constructor to take either a BlockStmt, Stmt,
	or AList<Stmt> to initialize its thenStmt and elseStmt.  The elseStmt
	is optional.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 

---------------------------------------------------------------------------

08/26/05 14:13:44 -- jplevyak

Log message:
	update .future to reflect e-mail discussion

Modified files:
	chapel/test/functions/deitz/: test_return1.future 

---------------------------------------------------------------------------

08/26/05 15:16:51 -- jplevyak

Log message:
	Fixup the actual->formal map after default wrapper construction.
	This fixes some .futures if the CALLER_CACHE is disable.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

08/29/05 09:33:23 -- deitz

Log message:
	Changed how statements are parsed.  All statements are now parsed as
	lists of statements whether they are single Chapel statements or not.
	That is when a single statement is parsed, it is put into a list of
	that single statement.  This fixes a bug in how variable declaration
	statements were only allowed to be parsed in the context of a list of
	statements.  This is because a single Chapel variable declaration
	statement actually creates a list of ExprStmts of DefExprs.
	
	Improved the html view facility to print out more keywords and
	distinguish between different types of GotoStmts (goto, break,
	continue) and to print out the label.
	
	Added a line in PreAnalysisHacks to collapse BlockStmt where the only
	thing in the BlockStmt is another BlockStmt.
	
	Added a flush line to the view facility so that it finishes writing to
	stdout even if a seg fault occurs later on in compilation.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: htmlview.cpp preAnalysisHacks.cpp 
	                             view.cpp 

---------------------------------------------------------------------------

08/29/05 10:33:21 -- deitz

Log message:
	Reworked storage of visible functions in preparation for changing from
	creating them in a single call to ComputeVisibleFunctions to a more
	maintainable way of adding to them when a function is added.  This
	will eventually allow us to add functions created during analysis to
	the current set of visible functions.  Visible functions are no longer
	replicated in the children scopes, but are accessed instead via a
	getVisibleFunctions method on SymScope that returns a Vec of all
	FnSymbols that are visible at that point.
	
	Note that visible functions are still computed and nothing
	semantically has changed yet.
	
	Removed some support for resolving functions without analysis as it is
	very out-of-date and would need to be pretty much redone if it is to
	be used again.  This removal acknowledges that --noanalysis has not
	been working for a long time.
	
	Removed Symboltable::define now that it is not used except by the
	compiler infrastructure during Fixup (and for a few exceptions).  It
	is now used directly as a method call on the scope.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp resolveSymbols.cpp 
	chapel/test/types/seq/bradc/: length.modify.good 

---------------------------------------------------------------------------

08/29/05 14:17:24 -- deitz

Log message:
	All but removed the stmt field of a LabelStmt.  The LabelStmt now just
	defines a LabelSymbol.  Should it really just be an ExprStmt of a
	DefExpr of a LabelSymbol since there is nothing really special about
	it anymore?
	
	Labels are now parsed as two statements: the LabelStmt followed by the
	stmt it is attached to.
	
	The stmt is current still part of LabelStmt, but it is always an empty
	BlockStmt.  I haven't tried to clean up the analysis if1 translation
	of this yet and thus did not remove this field.
	
	Cleaned up ScopeResolveGotos so that the gotos are correct.  They no
	longer rely on attaching _post to break gotos during codegen or
	defining this _post label after a label statement.
	
	Removed futures for two now-working tests.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             scopeResolveGotos.cpp 
	                             scopeResolveGotos.h 
Removed files:
	chapel/test/trivial/deitz/: test_parse_stmt.future 
	chapel/test/trivial/jplevyak/: goto-2.future 

---------------------------------------------------------------------------

08/29/05 16:43:14 -- deitz

Log message:
	Cleaned up how visible functions are computed (though they are still
	computed and then not updated).  They are now much tighter.  The
	visibility of many non-global functions were previously global.
	
	Renamed SymScope::insert and SymScope::remove to SymScope::define and
	SymScope::undefine (used by the infrastructure when DefExprs of
	Symbols are added to or removed from the AST).  These terms better
	describe what is happening and unify them with the other uses of
	remove.
	
	Removed unused SymScope methods findEnclosing*Context.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: removeDeadSymbols.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp 

---------------------------------------------------------------------------

08/30/05 09:21:06 -- deitz

Log message:
	Continued cleanup of visible functions.  All functions with any formal
	arguments of class type (not record) are now globally visible.  Set
	the stage for the more incremental approach.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         computeVisibleFunctions.h symscope.cpp 

---------------------------------------------------------------------------

08/30/05 10:15:03 -- deitz

Log message:
	Made the computation of visible functions incremental so that when a
	function is added to a scope it is added to the visible function table
	as well.  If it is globally visible, it is added to the rootScope,
	otherwise it is added to the scope where it is defined.  The
	getVisibleFunctions method returns a vector of all visible functions
	at a particular place in the AST.
	
	Removed ComputeVisibleFunctions pass as it is no longer necessary.
	
	Added a #define to the top of symscope.cpp
	
	  #define DO_NOT_COMPUTE_VISIBLE_FUNCTIONS_DURING_ANALYSIS
	
	that prevents functions from being added to the visible function lists
	during analysis.  This keeps wrappers and instantiated functions from
	being added to the list.  This leads to ambiguities otherwise.
	
	John, is this because you are caching these separately because they
	were never added to the visible functions or because of the problems
	we once discussed with an instantiated function and the generic both
	applying to some function calls.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share symscope.cpp symtab.cpp 
Removed files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         computeVisibleFunctions.h 

---------------------------------------------------------------------------

08/30/05 10:17:45 -- deitz

Log message:
	Removed now-unused old-hack function commonModuleIsFirst.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: symscope.cpp 

---------------------------------------------------------------------------

08/30/05 11:16:58 -- deitz

Log message:
	Unified stmtContext, symContext, and exprContext into astParent.  It
	points to the spot in the AST that the scope is related.  I named it
	parent to indicate that it is a back pointer.  I collapsed these to
	clean up a small amount of code because it was always the case that
	exactly one was set.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: createConfigVarTable.cpp fixup.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

08/30/05 13:17:48 -- jplevyak

Log message:
	Convert Literals -> Symbols.
	- Added new hash table to store unique constant Symbols.
	- Changed defaultValue to be a Symbol
	- Changed UserType to have a defaultExpr to compliment the
	   defaultValue, this is updated in insertDefaultInitVariables
	- Removed all Literals and references to them
	- error messages a couple .good files changes slightly
	- Used if1 hash table to uniquify constant strings
	- added new functions "get_int" and "get_string" on Expr to grab
	    any constants if possible.
	- Changed VarSymbol::print to print out the immediate portion instead
	    of the name for constants
	- Added new functions new_FloatSymbol (returning Symbol)
	   new_FloatLiteral  (returning Expr) and the like for other
	   primitive types.
	- Note: while primitive Complex numbers are supported up to
	    the runtime, they are not yet used.  If there is interest
	    we could enable them through codegen.
	- lots of other little changes to get all the tests to work

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp if1.cpp 
	                           sym.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: ast.h baseAST.h expr.h if1.h num.h 
	                          sym.h symbol.h symtab.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             checkSemantics.cpp htmlview.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             preAnalysisHacks.cpp 
	                             processParameters.cpp 
	                             removeLiterals.cpp 
	                             removeNamedParameters.cpp 
	                             specializeCallExprs.cpp verify.cpp 
	                             view.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/newast/: enum.good sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/types/seq/bradc/: length.modify.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 
Added files:
	chapel/test/types/seq/bradc/: length.modify.prediff 
	chapel/test/types/type_variables/jplevyak/: 
	                                            where-2-error.prediff 

---------------------------------------------------------------------------

08/30/05 16:48:24 -- deitz

Log message:
	Rearrangements of pre-analysis instantiation and parsing of tuple and
	sequence types.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             instantiate.cpp 
	                             preAnalysisHacks.cpp 
	chapel/test/types/seq/deitz/: test_seq_tuple3.chpl 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class2a.chpl 
	                                         test_typevar_class2a.good 

---------------------------------------------------------------------------

08/30/05 17:13:08 -- jplevyak

Log message:
	Changed defexpr handling so that the constructor
	result is not written to the LHS until after the
	possibly overloaded assignment.
	Modified the set of overloaded = functions so that
	they only dispatch on the LHS.  This is in preparation
	for making overloaded = be a member function (so that
	it works correctly with records).
	These changes exposed a couple problems with the "seq"
	record:  1) the lack of visibility of the overloaded
	= functions for records and 2) the way seq
	literals are being instantiated with dtUnknown.
	So those tests are futurized.  Since the seq generic
	and the instantiation code are both incomplete, that
	these tests were working at all was just luck.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: prelude.chpl 
Added files:
	chapel/test/trivial/mjoyner/seq/: seq_index1.future 
	                                  seq_reverse.future 
	chapel/test/types/seq/bradc/: hashEquals.future length.future 
	                              length.modify.future 
	                              returnSeq.future returnSeq2.future 
	chapel/test/types/seq/deitz/: test_seq1.future test_seq1a.future 
	                              test_seq1b.future 
	                              test_seq1d.future test_seq2.future 
	                              test_seq3.future test_seq4.future 
	                              test_seq5.future test_seq6.future 
	                              test_seq7.future test_seq8.future 
	                              test_seq_class1.future 
	                              test_seq_class2.future 
	                              test_seq_reverse1.future 

---------------------------------------------------------------------------

08/30/05 18:05:01 -- jplevyak

Log message:
	Allow overloaded assignment in setters and getters.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

08/30/05 19:44:00 -- jplevyak

Log message:
	Remove unnecessary IF1 member access as part of setters.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

08/31/05 09:27:43 -- bradc

Log message:
	Fixed initialization omission that was resulting in valgrind
	failures last night (by the time I diagnosed the problem, it
	was too easy not to fix).
	
	Also, an update to the REGRESSIONS file that I made a few days
	ago and believe is still accurate.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

08/31/05 10:47:18 -- deitz

Log message:
	Implemented visibility of methods and functions so that the method
	wins out in the context of a method, i.e., 'this' is applied to the
	function call when in a method if it can be a method (by name).  See
	test/classes/deitz/test_method_call1.chpl for an example.  Also see
	test/classes/deitz/test_method_call2.chpl for an example of an error
	stemming from this simplification.
	
	Updated task list.
	
	Added two test cases to lock this change in.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/traversals/: applyThisParameters.cpp 
Added files:
	chapel/test/classes/deitz/: test_method_call1.chpl 
	                            test_method_call1.good 
	                            test_method_call2.chpl 
	                            test_method_call2.good 

---------------------------------------------------------------------------

08/31/05 14:06:52 -- jplevyak

Log message:
	Extend data flow recursion handling to cover setters (data polymorphism).

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

09/01/05 16:49:29 -- jplevyak

Log message:
	Enable COMPUTE_VISIBLE_FUNCTIONS_DURING_ANALYSIS
	Disable caching of visible functions in anlaysis (doesn't handle generics)
	Fixed a bug in preAnlaysisHack where the types of literal tuples were
	  bein inserted in the wrong order.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: preAnalysisHacks.cpp 
Added files:
	chapel/test/types/tuple/deitz/: test_tuple_simple5.future 
	chapel/test/types/tuple/jplevyak/: tuple_index-2.future 

---------------------------------------------------------------------------

09/02/05 10:09:39 -- bradc

Log message:
	Changed an invocation of make to $(MAKE) in the
	dparser Makefile to avoid problems when "make"
	isn't the appropriate thing to use.

Modified files:
	chapel/third-party/dparser/d/: Makefile 

---------------------------------------------------------------------------

09/06/05 13:00:51 -- jplevyak

Log message:
	Removed dependencies on dparser.  DParser is nolonger built.
	The files are still present, including the 2 directories
	  third-party/dparser
	  compiler/vparser
	But they shouldn't be necessary.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/analysis/: inline.cpp prim_data.dat 
	chapel/compiler/analysis/make_prims/: Makefile make_prims.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: Makefile driver.cpp 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/compiler/test/: Makefile 
	chapel/compiler/util/: Makefile misc.cpp 
	chapel/third-party/: Makefile 
Added files:
	chapel/test/dispatch/jplevyak/: NOTEST 
	chapel/test/flowanalysis/jplevyak/: NOTEST 
	chapel/test/flowanalysis/jplevyak/constants/: NOTEST 
	chapel/test/flowanalysis/jplevyak/loop/: NOTEST 
	chapel/test/parsing/jplevyak/: NOTEST 

---------------------------------------------------------------------------

09/06/05 20:17:27 -- jplevyak

Log message:
	Fix a problem which shows up with the gcc-3.3.4 compiler.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

09/07/05 09:15:33 -- jplevyak

Log message:
	remove future for working test

Removed files:
	chapel/test/trivial/jplevyak/: 
	                               variables_in_nested_function-2.future 

---------------------------------------------------------------------------

09/07/05 09:32:14 -- jplevyak

Log message:
	Removed two futures for tests which are working for the right reasons.

Removed files:
	chapel/test/trivial/deitz/demo/: sample1.future sample1b.future 

---------------------------------------------------------------------------

09/07/05 09:35:34 -- jplevyak

Log message:
	Fixed a number of potentially sources of non-determinism, including
	one major one during enqueuing which I believe was the source of
	the recent failure.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	chapel/compiler/include/: fa.h vec.h 

---------------------------------------------------------------------------

09/07/05 15:24:30 -- bradc

Log message:
	This checkin builds on John's change from yesterday
	by deleting the sources in the vparser/ and dparser/
	directories, and removing one stray #include that is
	no longer necessary.

Modified files:
	chapel/compiler/analysis/: inline.cpp 
Removed files:
	chapel/compiler/vparser/: FILES Makefile Makefile.include 
	                          Makefile.share ast_cf.cpp ast_kinds.h 
	                          c.g grammar.cpp parse.cpp 
	                          parse_ast.cpp parse_ast.h 
	                          parse_structs.h prelude.v scope.cpp 
	                          scope.h v.g v.g.h v.g_incs.cpp 
	chapel/compiler/vparser/cast/: Makefile cast.cpp 
	chapel/third-party/dparser/: .cvsignore Makefile 
	chapel/third-party/dparser/d/: .cvsignore CHANGES COPYRIGHT 
	                               Makefile README UPGRADING arg.c 
	                               arg.h baseline d.h dparse.h 
	                               dparse_tables.h dsymtab.h 
	                               faq.html gram.c gram.h gramgram.h 
	                               grammar.g grammar.g.c index.html 
	                               lex.c lex.h lr.c lr.h 
	                               make_dparser.1 make_dparser.c 
	                               make_dparser.cat manual.html 
	                               mkdparse.c mkdparse.h my.c my.g 
	                               parse.c parse.h parser_tests 
	                               read_binary.c read_binary.h 
	                               sample.g sample.g.d_parser.h 
	                               sample_parser.c scan.c scan.h 
	                               symtab.c test_parser.c util.c 
	                               util.h version.c write_tables.c 
	                               write_tables.h 
	chapel/third-party/dparser/d/python/: Makefile README dparser.i 
	                                      dparser.py dparser_wrap.c 
	                                      index.html make_tables.c 
	                                      py_dparser_manual.html 
	                                      pydparser.c pydparser.h 
	                                      setup.py 
	chapel/third-party/dparser/d/python/contrib/: 
	                                              dparserpy-syntax_error.py 
	                                              dparserpy.el 
	chapel/third-party/dparser/d/python/tests/: test.py test2.py 
	                                            test3.py test4.py 
	                                            test5.py test6.py 
	                                            test7.py test8.py 
	chapel/third-party/dparser/d/tests/: 3 ansic.test.g 
	                                     ansic.test.g.1 
	                                     ansic.test.g.1.check 
	                                     ansic.test.g.2 
	                                     ansic.test.g.2.check 
	                                     g1.test.g g1.test.g.1 
	                                     g1.test.g.1.check 
	                                     g10.test.g g10.test.g.1 
	                                     g10.test.g.1.check 
	                                     g11.test.g g11.test.g.1 
	                                     g11.test.g.1.check 
	                                     g11.test.g.2 
	                                     g11.test.g.2.check 
	                                     g11.test.g.3 
	                                     g11.test.g.3.check 
	                                     g12.test.g g12.test.g.1 
	                                     g12.test.g.1.check 
	                                     g13.test.g g13.test.g.1 
	                                     g13.test.g.1.check 
	                                     g14.test.g g14.test.g.1 
	                                     g14.test.g.1.check 
	                                     g15.test.g g15.test.g.1 
	                                     g15.test.g.1.check 
	                                     g16.test.g g16.test.g.1 
	                                     g16.test.g.1.check 
	                                     g17.test.g g17.test.g.1 
	                                     g17.test.g.1.check 
	                                     g18.test.g g18.test.g.1 
	                                     g18.test.g.1.check 
	                                     g19.test.g g19.test.g.1 
	                                     g19.test.g.1.check 
	                                     g2.test.g g2.test.g.1 
	                                     g2.test.g.1.check 
	                                     g20.test.g g20.test.g.1 
	                                     g20.test.g.1.check 
	                                     g21.test.g g21.test.g.1 
	                                     g21.test.g.1.check 
	                                     g22.test.g g22.test.g.1 
	                                     g22.test.g.1.check 
	                                     g23.test.g g23.test.g.1 
	                                     g23.test.g.1.check 
	                                     g24.test.g g24.test.g.1 
	                                     g24.test.g.1.check 
	                                     g25.test.g g25.test.g.1 
	                                     g25.test.g.1.check 
	                                     g26.test.g g26.test.g.1 
	                                     g26.test.g.1.check 
	                                     g27.test.g g27.test.g.1 
	                                     g27.test.g.1.check 
	                                     g28.test.g g28.test.g.1 
	                                     g28.test.g.1.check 
	                                     g28.test.g.2 
	                                     g28.test.g.2.check 
	                                     g29.test.g g29.test.g.1 
	                                     g29.test.g.1.check 
	                                     g3.test.g g3.test.g.1 
	                                     g3.test.g.1.check 
	                                     g30.test.g g30.test.g.1 
	                                     g30.test.g.1.check 
	                                     g31.test.g g31.test.g.1 
	                                     g31.test.g.1.check 
	                                     g32.test.g g32.test.g.1 
	                                     g32.test.g.1.check 
	                                     g33.test.g g33.test.g.1 
	                                     g33.test.g.1.check 
	                                     g34.test.g g34.test.g.1 
	                                     g34.test.g.1.check 
	                                     g35.test.g g35.test.g.1 
	                                     g35.test.g.1.check 
	                                     g36.test.g g36.test.g.1 
	                                     g36.test.g.1.check 
	                                     g37.test.g g37.test.g.1 
	                                     g37.test.g.1.check 
	                                     g38.test.g g38.test.g.1 
	                                     g38.test.g.1.check 
	                                     g38.test.g.1.flags 
	                                     g38.test.g.flags g39.test.g 
	                                     g39.test.g.1 
	                                     g39.test.g.1.check 
	                                     g4.test.g g4.test.g.1 
	                                     g4.test.g.1.check 
	                                     g40.test.g g40.test.g.1 
	                                     g40.test.g.1.check 
	                                     g41.test.g g41.test.g.1 
	                                     g41.test.g.1.check 
	                                     g41.test.g.1.flags 
	                                     g41.test.g.flags 
	                                     g42.include.g g42.test.g 
	                                     g42.test.g.1 
	                                     g42.test.g.1.check 
	                                     g43.test.g g43.test.g.1 
	                                     g43.test.g.1.check 
	                                     g43.test.g.2 
	                                     g43.test.g.2.check 
	                                     g43.test.g.2.flags 
	                                     g43.test.g.3 
	                                     g43.test.g.3.check 
	                                     g43.test.g.3.flags 
	                                     g44.test.g g44.test.g.1 
	                                     g44.test.g.1.check 
	                                     g45.test.g g45.test.g.1 
	                                     g45.test.g.1.check 
	                                     g46.test.g g46.test.g.1 
	                                     g46.test.g.1.check 
	                                     g5.test.g g5.test.g.1 
	                                     g5.test.g.1.check g6.test.g 
	                                     g6.test.g.1 
	                                     g6.test.g.1.check g7.test.g 
	                                     g7.test.g.1 
	                                     g7.test.g.1.check 
	                                     g7.test.g.2 
	                                     g7.test.g.2.check g8.test.g 
	                                     g8.test.g.1 
	                                     g8.test.g.1.check g9.test.g 
	                                     g9.test.g.1 
	                                     g9.test.g.1.check 
	                                     python.test.g 
	                                     python.test.g.1 
	                                     python.test.g.1.check 
	                                     sample.test.g 
	                                     sample.test.g.0 
	                                     sample.test.g.0.check 
	                                     sample.test.g.1 
	                                     sample.test.g.1.check 
	                                     sample.test.g.10 
	                                     sample.test.g.10.check 
	                                     sample.test.g.11 
	                                     sample.test.g.11.check 
	                                     sample.test.g.12 
	                                     sample.test.g.12.check 
	                                     sample.test.g.13 
	                                     sample.test.g.13.check 
	                                     sample.test.g.14 
	                                     sample.test.g.14.check 
	                                     sample.test.g.15 
	                                     sample.test.g.15.check 
	                                     sample.test.g.16 
	                                     sample.test.g.16.check 
	                                     sample.test.g.17 
	                                     sample.test.g.17.check 
	                                     sample.test.g.18 
	                                     sample.test.g.18.check 
	                                     sample.test.g.19 
	                                     sample.test.g.19.check 
	                                     sample.test.g.2 
	                                     sample.test.g.2.check 
	                                     sample.test.g.20 
	                                     sample.test.g.20.check 
	                                     sample.test.g.21 
	                                     sample.test.g.21.check 
	                                     sample.test.g.22 
	                                     sample.test.g.22.check 
	                                     sample.test.g.23 
	                                     sample.test.g.23.check 
	                                     sample.test.g.24 
	                                     sample.test.g.24.check 
	                                     sample.test.g.25 
	                                     sample.test.g.25.check 
	                                     sample.test.g.26 
	                                     sample.test.g.26.check 
	                                     sample.test.g.27 
	                                     sample.test.g.27.check 
	                                     sample.test.g.28 
	                                     sample.test.g.28.check 
	                                     sample.test.g.29 
	                                     sample.test.g.29.check 
	                                     sample.test.g.3 
	                                     sample.test.g.3.check 
	                                     sample.test.g.30 
	                                     sample.test.g.30.check 
	                                     sample.test.g.31 
	                                     sample.test.g.31.check 
	                                     sample.test.g.32 
	                                     sample.test.g.32.check 
	                                     sample.test.g.33 
	                                     sample.test.g.33.check 
	                                     sample.test.g.4 
	                                     sample.test.g.4.check 
	                                     sample.test.g.5 
	                                     sample.test.g.5.check 
	                                     sample.test.g.6 
	                                     sample.test.g.6.check 
	                                     sample.test.g.7 
	                                     sample.test.g.7.check 
	                                     sample.test.g.8 
	                                     sample.test.g.8.check 
	                                     sample.test.g.9 
	                                     sample.test.g.9.check 
	chapel/third-party/dparser/d/verilog/: Makefile README ambig.c 
	                                       main.c verilog.g 
	                                       verilog_tests vparse.c 
	                                       vparse.h 

---------------------------------------------------------------------------

09/07/05 15:28:02 -- deitz

Log message:
	Removed pass FindCollidingNames and folded pass LegalizeCNames into
	CodegenOne.  CodegenOne now renames cnames based on the rename pragma,
	and changes ? to Q and - to _ when in a symbol name.  In addition, it
	mangles the name if it is not unique.  That is, if two symbols in the
	program share the same cname, one is mangled to avoid the conflict.
	This can be strengthened later to only mangle it if they are in nested
	scopes (and can thus possibly conflict).  Eventually it should mark
	them as conflicted and put in hooks for gdb to make it possible to
	debug the Chapel.
	
	This change makes it impossible to introduce subtle bugs that are not
	found because two names match even if the symbols don't.
	
	Removed extra name mangling for symbols in different modules.
	
	Changed BaseAST::remove to work when 'this' is NULL and, for
	convenience, to return 'this.'

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share codegenOne.cpp 
	                         codegenOne.h symtab.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
Removed files:
	chapel/compiler/symtab/: findCollidingNames.cpp 
	                         findCollidingNames.h legalizeCNames.cpp 
	                         legalizeCNames.h 

---------------------------------------------------------------------------

09/07/05 15:31:16 -- jplevyak

Log message:
	Remove DParser from TAGS building

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

09/07/05 15:54:27 -- jplevyak

Log message:
	Use "typedef" for typedefs instead of "type".
	Added the syntax for the ability to use ": expr" to constrain type variables.
	Added the syntax for the ability to use ?t.
	
	function f(a : ?t : C) : t {
	}
	
	now means a function which takes an argument which must be a subtype
	of C and which returns something of the same type.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/classes/deitz/: test_class_in_usertype.chpl 
	                            test_type_in_class2.chpl 
	                            test_type_in_class3.chpl 
	                            test_type_in_class4.chpl 
	chapel/test/trivial/bradc/: defaultinit2.chpl 
	chapel/test/trivial/shannon/: readWriteUserType.chpl 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation4.chpl 
	chapel/test/types/typedefs/bradc/: localType.chpl 
	                                   localType2.chpl 

---------------------------------------------------------------------------

09/08/05 15:30:01 -- jplevyak

Log message:
	Question mark indicated type variables in functions work through
	analysis: function f(a : ?t) : t.
	Fixed? Fun::id not initialized valgrind error.
	Added new test for ?t in functions, fails in codegen.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp fun.cpp 
	chapel/compiler/include/: fa.h 
Added files:
	chapel/test/types/type_variables/jplevyak/: question_mark-1.chpl 
	                                            question_mark-1.future 
	                                            question_mark-1.good 

---------------------------------------------------------------------------

09/08/05 16:04:24 -- jplevyak

Log message:
	I used to copy out the inherited instance variables, but now
	that is done in the front-end.  Fix issue by disabling that
	code.
	Added 2 tests so show that inheritence works!

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp 
	chapel/compiler/include/: ast.h 
Added files:
	chapel/test/classes/jplevyak/: inherit-1.chpl inherit-1.good 
	                               inherit-2.chpl inherit-2.good 

---------------------------------------------------------------------------

09/08/05 16:28:29 -- jplevyak

Log message:
	Fix up a number of tests and future files which where
	incorrect or stale.

Modified files:
	chapel/test/arrays/deitz/: test_domain1.future 
	                           test_domain2.future 
	                           test_domain2D.future 
	                           test_record_of_record_instantiated.future 
	                           test_record_of_record_instantiated2.future 
	chapel/test/classes/deitz/suite1/: test2.chpl test4.chpl 
	chapel/test/domains/roxana/: test_index_expr1.future 
	chapel/test/trivial/deitz/demo/: sample1a.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record5.future 
	                                         test_typevar_record6.future 
Removed files:
	chapel/test/classes/deitz/suite1/: test2.future test4.future 
	chapel/test/trivial/deitz/demo/: sample1a.future 

---------------------------------------------------------------------------

09/08/05 18:37:27 -- bradc

Log message:
	Reminded by John's checkin yesterday, removed
	dparser-related rules and variables from the
	compiler Makefile framework.

Modified files:
	chapel/compiler/analysis/make_prims/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

09/09/05 08:11:13 -- jplevyak

Log message:
	Fix valgrind errors: used wrong compfn with qsort.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

09/09/05 11:49:00 -- deitz

Log message:
	Removed working future tests that work for good reasons.

Removed files:
	chapel/test/classes/bradc/records/: twoRecords.future 
	chapel/test/classes/deitz/: test_method9a.future 
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed1.future 
	                                           test_defaultnamed4.future 
	chapel/test/types/type_variables/deitz/: 
	                                         test_instantiate1.future 

---------------------------------------------------------------------------

09/09/05 11:56:25 -- bradc

Log message:
	In cleaning up the top-level Makefile, realized that
	the "nogc" option for the third-party directory was
	no longer necessary, since it was used to make dparser
	without GC.  Removed rules related to this and updated
	the nightly scripts that run the valgrind test.
	
	Now, to make a GC-less compiler, you should only need
	to do "make nogc" from the top-level or compiler
	directories.

Modified files:
	./: Makefile 
	chapel/test/Bin/: nightly 
	chapel/third-party/: Makefile 

---------------------------------------------------------------------------

09/09/05 12:21:24 -- shannon

Log message:
	Added the fwrite function for integers and the isOpen method
	to the _chpl_file module.  Renamed the decomposeStmtFunction
	function in specializeCallExprs to decomposeIOCall, and added
	the  decomposeFileIOCall function.  Added tests to write an
	integer to a file and to stdout, to fail to write to an unopened
	file, and to write multiple integers to a file.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: specializeCallExprs.cpp 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/file/: .cvsignore CLEANFILES 
Added files:
	chapel/test/types/file/: fwriteIntFile.catfiles 
	                         fwriteIntFile.chpl fwriteIntFile.good 
	                         fwriteIntStdout.chpl 
	                         fwriteIntStdout.good 
	                         fwriteIntUnopenedFile.chpl 
	                         fwriteIntUnopenedFile.good 
	                         fwriteMultipleInts.catfiles 
	                         fwriteMultipleInts.chpl 
	                         fwriteMultipleInts.good 

---------------------------------------------------------------------------

09/09/05 14:12:51 -- deitz

Log message:
	Got preinstantiation working so that we instantiate fully what we can
	instantiate fully before analysis.  It lacks robustness.
	
	Ensured more pragmas are copied during cloning and instantiation.
	
	Turned preinstantiation on by default.  Use --nopreinstantiation to
	turn it off.
	
	Removed 29 .future files to enable 29 future tests.  Removed two
	future tests that just didn't make enough sense to keep.
	
	Minor bug fixes to scopes and where things are defined.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: driver.h symbol.h symtab.h 
	chapel/compiler/main/: driver.cpp passlist.cpp 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: findTypeVariables.cpp 
	                             findTypeVariables.h instantiate.cpp 
	                             preAnalysisHacks.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/runtime/include/: array.h 
	chapel/test/arrays/deitz/: test_array_class_trial5.chpl 
	                           test_array_class_trial5a.chpl 
	                           test_domain3.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/domains/roxana/: test_hash_table3.chpl 
	chapel/test/flowanalysis/newast/: enum.good 
	chapel/test/trivial/deitz/demo/: sample2.chpl 
	chapel/test/types/type_variables/deitz/: test_datablock3.chpl 
	                                         test_myseq0.chpl 
	                                         test_myseq1.chpl 
	                                         test_myseq2.chpl 
	                                         test_typevar_class8.chpl 
	                                         test_typevar_class9.chpl 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record4.chpl 
Removed files:
	chapel/compiler/traversals/: removeLiterals.cpp removeLiterals.h 
	chapel/test/arrays/deitz/: test_array_class_trial5a.future 
	                           test_array_class_trial5b.future 
	                           test_record_of_record_instantiated.future 
	                           test_record_of_record_instantiated2.future 
	chapel/test/classes/deitz/: test_myseq_record2.chpl 
	                            test_myseq_record2.future 
	                            test_myseq_record2.good 
	                            test_myseq_record3.chpl 
	                            test_myseq_record3.future 
	                            test_myseq_record3.good 
	chapel/test/trivial/mjoyner/seq/: seq_index1.future 
	                                  seq_reverse.future 
	chapel/test/types/seq/bradc/: hashEquals.future length.future 
	                              returnSeq.future returnSeq2.future 
	chapel/test/types/seq/deitz/: test_seq1.future test_seq1a.future 
	                              test_seq1b.future 
	                              test_seq1d.future test_seq2.future 
	                              test_seq3.future test_seq4.future 
	                              test_seq5.future test_seq6.future 
	                              test_seq7.future test_seq8.future 
	                              test_seq_class1.future 
	                              test_seq_class2.future 
	                              test_seq_reverse1.future 
	                              test_seq_tuple.future 
	chapel/test/types/tuple/bradc/: returnTuple.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple5.future 
	chapel/test/types/type_variables/deitz/: 
	                                         test_foo_instantiated1.future 
	                                         test_infer_class2.future 

---------------------------------------------------------------------------

09/09/05 14:14:42 -- bradc

Log message:
	A small change so that clones of functions in
	prelude.chpl (read: clones of functions that
	we don't codegen the definitions of) do not
	create a new cname for the function.  This
	allows us to prototype C varargs functions
	like fprintf() for a fixed number of parameters
	of unknown type, clone them for analysis, but
	have all calls to such functions still be to
	the same C function.
	
	Steve points out that once the no-codegen
	pragma is better supported, this would be
	a better thing to use to make this
	determination rather than the fact that
	it is part of a specific module (this
	would also allow us to move the prototype
	of fprintf out of prelude.chpl and into
	_chpl_file.chpl, which makes more
	structural sense).

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

09/09/05 16:23:20 -- deitz

Log message:
	Made _data a class instead of a record and made the size be a variable
	instead of a param.  Fixed a naming bug in instantiation in which the
	instantiated function's cname became meaningless.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: array.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/domains/roxana/: test_hash_table3.chpl 
	chapel/test/types/type_variables/deitz/: test_datablock3.chpl 

---------------------------------------------------------------------------

09/10/05 12:56:17 -- jplevyak

Log message:
	Add an indirection link for prim_data.h from include to analysis.

Modified files:
	chapel/compiler/include/: prim.h 
Added files:
	chapel/compiler/include/: prim_data.h 

---------------------------------------------------------------------------

09/12/05 15:01:12 -- shannon

Log message:
	Added the fwriteln function, and another test.

Modified files:
	chapel/compiler/traversals/: specializeCallExprs.cpp 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/types/file/: .cvsignore CLEANFILES 
Added files:
	chapel/test/types/file/: fwritelnIntFile.catfiles 
	                         fwritelnIntFile.chpl 
	                         fwritelnIntFile.good 

---------------------------------------------------------------------------

09/13/05 12:12:39 -- jplevyak

Log message:
	Reorganization to compartmentalize analysis and the front end.
	analysis - directory now contains the interface code
	include/analysis.h - the only file required by the front end
	ifa/ifa.h - the public interface to the analysis code
	ifa - directory now contains the iterative flow analysis core
	All the internal IFA headers and files are now in compiler/ifa.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/adt/: vec.cpp 
	chapel/compiler/analysis/: Makefile Makefile.share analysis.cpp 
	chapel/compiler/backend/: Makefile Makefile.share 
	chapel/compiler/include/: analysis.h driver.h expr.h misc.h 
	                          num.h stmt.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 
	chapel/compiler/passes/: runAnalysis.cpp 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/test/: Makefile 
	chapel/compiler/traversals/: checkTypeInfo.cpp instantiate.cpp 
	chapel/compiler/util/: Makefile misc.cpp 
Added files:
	chapel/compiler/ifa/: Makefile Makefile.include Makefile.share 
	                      TODO ast.cpp ast.h builtin.cpp builtin.h 
	                      builtin_symbols.h cdb.cpp cdb.h cfg.cpp 
	                      cg.cpp cg.h clone.cpp clone.h code.h 
	                      dead.cpp dead.h dom.cpp dom.h fa.cpp fa.h 
	                      fun.cpp fun.h graph.cpp graph.h html.cpp 
	                      html.h if1.cpp if1.h ifa.cpp ifa.h 
	                      inline.cpp inline.h loop.cpp loop.h 
	                      pattern.cpp pattern.h pdb.cpp pdb.h 
	                      pnode.cpp pnode.h prim.cpp prim.h 
	                      prim_data.cpp prim_data.dat prim_data.h 
	                      prim_data_incs.cpp prim_data_incs.h 
	                      region.cpp region.h ssu.cpp ssu.h sym.cpp 
	                      sym.h var.cpp var.h 
	chapel/compiler/ifa/make_prims/: Makefile make_prims.cpp 
Removed files:
	chapel/compiler/analysis/: FILES TODO ast.cpp builtin.cpp 
	                           cdb.cpp cdb.h cfg.cpp cg.cpp 
	                           clone.cpp dead.cpp dom.cpp fa.cpp 
	                           fun.cpp if1.cpp inline.cpp loop.cpp 
	                           pattern.cpp pdb.cpp pnode.cpp 
	                           prim.cpp prim_data.dat 
	                           prim_data_incs.cpp prim_data_incs.h 
	                           region.cpp region.h reportErrors.cpp 
	                           ssu.cpp ssu.h sym.cpp var.cpp 
	chapel/compiler/analysis/make_prims/: Makefile make_prims.cpp 
	                                      make_prims.g 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: ast.h builtin.h builtin_symbols.h 
	                          callbacks.h cg.h clone.h code.h dead.h 
	                          dom.h dump.h fa.h fun.h grammar.h 
	                          graph.h if1.h inline.h loop.h parse.h 
	                          pattern.h pdb.h pnode.h prim.h 
	                          prim_data.h sym.h var.h 

---------------------------------------------------------------------------

09/13/05 12:21:11 -- jplevyak

Log message:
	A bit more of the previous reorg.

Added files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
Removed files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

09/13/05 12:23:46 -- jplevyak

Log message:
	one more file

Added files:
	chapel/compiler/analysis/: chapel_ifa.h 

---------------------------------------------------------------------------

09/13/05 12:28:34 -- jplevyak

Log message:
	Itegrate reportAnalysisErrors int chapel_ifa.cpp

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: Makefile.share 

---------------------------------------------------------------------------

09/14/05 15:02:16 -- jplevyak

Log message:
	Move num.h into ifa (which is where it came from in the first place).

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: analysis.h symbol.h 
Added files:
	chapel/compiler/ifa/: num.h 
Removed files:
	chapel/compiler/include/: num.h 

---------------------------------------------------------------------------

09/14/05 16:16:06 -- roxana

Log message:
	Reorganized my domains tests. Added a sketch of  domain
	classes specification which is incomplete. The main problem
	is with specifying storage for indices within a class. This can
	go away once _data is fortified.

Added files:
	chapel/test/domains/roxana/helper/: test_hash_table1.good 
	                                    test_hash_table3.good 
	                                    test_hash_table2.good 
	                                    test_hash_table.future 
	                                    test_hash_table3.chpl 
	                                    test_index_assign.chpl 
	                                    test_hash_table1.future 
	                                    test_hash_table.good 
	                                    test_hash_table.chpl 
	                                    test_hash_table1.chpl 
	                                    test_hash_table2.chpl 
	                                    test_hash_table2.future 
	chapel/test/domains/roxana/index/: test_index_expr0.good 
	                                   test_index_expr2.good 
	                                   test_index_expr2.future 
	                                   test_index_expr0.chpl 
	                                   test_index_assign.future 
	                                   test_index_expr1.good 
	                                   test_index_expr1.chpl 
	                                   test_index_expr.good 
	                                   test_index_expr2.chpl 
	                                   test_index_expr0.compopts 
	                                   test_index_expr.future 
	                                   test_index_expr2.compopts 
	                                   test_index_expr0.future 
	                                   test_index_expr.chpl 
	                                   test_index_expr1.future 
	                                   test_index_assign.good 
	chapel/test/domains/roxana/classes/: test_domain_class.future 
	                                     test_domain_class.chpl 
	                                     test_domain_class.good 
Removed files:
	chapel/test/domains/roxana/: test_index_expr2.chpl 
	                             test_hash_table.future 
	                             test_index_assign.good 
	                             test_index_assign.chpl 
	                             test_hash_table.chpl 
	                             test_hash_table2.good 
	                             test_index_expr2.good 
	                             test_index_expr1.future 
	                             test_index_expr0.good 
	                             test_index_expr.chpl 
	                             test_hash_table1.good 
	                             test_index_expr0.future 
	                             test_hash_table3.good 
	                             test_index_expr.future 
	                             test_index_assign.future 
	                             test_index_expr2.future 
	                             test_index_expr0.chpl 
	                             test_hash_table2.future 
	                             test_hash_table3.chpl 
	                             test_index_expr1.good 
	                             test_hash_table2.chpl 
	                             test_index_expr1.chpl 
	                             test_hash_table1.future 
	                             test_index_expr2.compopts 
	                             test_index_expr.good 
	                             test_index_expr0.compopts 
	                             test_hash_table.good 
	                             test_hash_table1.chpl 

---------------------------------------------------------------------------

09/14/05 16:18:33 -- roxana

Log message:
	Corrected one misplaced file.

Added files:
	chapel/test/domains/roxana/index/: test_index_assign.chpl 
Removed files:
	chapel/test/domains/roxana/helper/: test_index_assign.chpl 

---------------------------------------------------------------------------

09/15/05 11:48:15 -- shannon

Log message:
	Added the fwrite function for floats, strings, and booleans,
	as well as a number of tests.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/types/file/: .cvsignore CLEANFILES 
Added files:
	chapel/test/types/file/: fwritelnBooleanFile.catfiles 
	                         fwritelnBooleanFile.chpl 
	                         fwritelnBooleanFile.good 
	                         fwritelnFloatFile.catfiles 
	                         fwritelnFloatFile.chpl 
	                         fwritelnFloatFile.good 
	                         fwritelnIntFloatString.catfiles 
	                         fwritelnIntFloatString.chpl 
	                         fwritelnIntFloatString.good 
	                         fwritelnStringFile.catfiles 
	                         fwritelnStringFile.chpl 
	                         fwritelnStringFile.good 

---------------------------------------------------------------------------

09/15/05 15:29:53 -- jplevyak

Log message:
	Added a "partialTag" to CallExpr which permits partial applications
	  the values are PARTIAL_OK, PARTIAL_ALWAYS and PARTIAL_NEVER.
	
	The above flag is used to handle the case of x.y(1) where x.y is
	an object (e.g. an array).  The solution is to first call
	x.y if it is available (e.g. if we want to use the member variable
	as a function or array) and otherwise build a closure which is
	invoked next.  The handling in resolveSymbols is specific
	to just this special case (e.g. where we have CallExpr(CallExpr(...), ...).
	To recognize that there is a closure involved.  While analysis can
	handle general closures, resolveSymbols can't (yet) and neither
	can code generation.  For this special case I undo the transform
	where a trivial closure would be generated.
	
	Fixed bug where "instantiatedFrom" was not being updated during
	  preinstantiation.
	Fixed an issue where the "instantiateFrom" field was not being
	  copied into the analysis data structures for pre-instantied types.
	Pass along the ParitalTag field to analysis.
	Instantiation builds a specializes relationship in the dispatch
	  hierarchy, but instantiation related types are ignored with
	  respect to building the structural type hierarchy.
	Fixed a bug which was building the structural type hierarchy after
	  the closure of the "specializes" relationship was computed.
	Fixed a bug whereby the "pattern" flag was not being checked before
	  recursing into the pattern matching code during dispatch in
	  analysis.
	Fixed a bug in printing out strings where I was using fprintf which
	  was failing for "%s".
	Fixed new_class_trial1.chpl:
	  constructs of the form x.y(1) need not be written x.y()(1), though
	  the latter is still legal.
	Added a future for test_tuple_simple5 where a problem with
	  instantiation of "this" and/or visibility is causing the
	  test to fail (I think this is a known issue).

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp fa.cpp pattern.cpp sym.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	chapel/test/classes/deitz/: test_method_call2.good 
Added files:
	chapel/test/functions/jplevyak/: call_mapping-2.chpl 
	                                 call_mapping-2.good 
	chapel/test/types/tuple/deitz/: test_tuple_simple5.future 

---------------------------------------------------------------------------

09/15/05 15:37:31 -- deitz

Log message:
	Fixed a bug in which the exprType of an iterator was lost when it was
	reconstructed rather than set to a sequence.
	
	Fixed a bug in which the exprType of a return temp was not set correctly.
	
	Fixed a bug in which constructor calls did not preinstantiate types.
	
	Added new_class_trial1, a test for arithmetic domains.

Modified files:
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             instantiate.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/arrays/deitz/: new_class_trial1.chpl 
	                           new_class_trial1.future 
	                           new_class_trial1.good 

---------------------------------------------------------------------------

09/15/05 17:31:03 -- jplevyak

Log message:
	Fix SEGV in code which handles determining type warnings for
	  unhandled argumnet types in the presence of closures.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

09/16/05 16:06:49 -- deitz

Log message:
	Removed working test's .future file and update its .good file.  This
	test prints out a sequence of tuples.

Modified files:
	chapel/test/types/seq/deitz/: test_seq_tuple3.good 
Removed files:
	chapel/test/types/seq/deitz/: test_seq_tuple3.future 

---------------------------------------------------------------------------

09/16/05 16:14:23 -- deitz

Log message:
	Moved CreateEntryPoint after Fixup.  This is a good step forward in
	orthogonalizing the compiler.  Moving this pass after fixup now
	de-special-cases creating the init function for modules and the main
	function for the program.  More cleanup will follow.
	
	This is a small step towards creating a class init function.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: alist.h symbol.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/shannon/: readWriteEnum.chpl 

---------------------------------------------------------------------------

09/19/05 09:15:23 -- deitz

Log message:
	Removed Fixup from the passlist.  It was the second pass, right after
	parsing.  It is now done in parsing to the modules that come in.  It
	is also done when things are put into the AST, though then to only the
	new things that are added.
	
	Removed special-casing to not call verify until the fixup pass has
	run.  Removed postFixup global since it is now always true.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.h runpasses.cpp 
	chapel/compiler/passes/: filesToAST.cpp 

---------------------------------------------------------------------------

09/19/05 10:14:08 -- shannon

Log message:
	Added the fwrite function for complex variables,
	and a test.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/modules/standard/: _chpl_file.chpl 
Added files:
	chapel/test/types/file/: fwritelnComplexFile.catfiles 
	                         fwritelnComplexFile.chpl 
	                         fwritelnComplexFile.good 

---------------------------------------------------------------------------

09/19/05 13:25:41 -- deitz

Log message:
	Pragmas on ExprStmts are now moved to the expr field.  Pragmas on
	DefExprs are now moved to the sym field.  This cleaned up a bunch of
	code that looked or copied the pragmas on the ->defPoint->parentStmt
	to get around this problem.
	
	Changed copyPragmas to addPragmas as this is a more accurate name.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: alist.h baseAST.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: codegenOne.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             createNestedFuncIterators.cpp 
	                             findUnknownTypes.cpp 
	                             inlineFunctions.cpp 
	                             resolveSymbols.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

09/19/05 13:26:25 -- deitz

Log message:
	Removed a couple lines of grossly inefficient and totally useless code
	in preinstantiation resulting in an order of magnitude speedup of this
	pass.  This should fix the major slowdown we have been experiencing
	lately.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

09/19/05 13:27:09 -- deitz

Log message:
	This is a checkin to checkpoint some work that I have not had time to
	look at for a little while.
	
	Added support for creating basic blocks from the AST.  A FnSymbol now
	has a Vec<BasicBlock*>* of its basic blocks that can be constructed
	with the support function buildBasicBlocks(FnSymbol*) and viewed witth
	the support function printBasicBlocks(FnSymbol*).
	
	Added a pass called CopyPropagation that currently does nothing more
	than create all a function's basic blocks.

Modified files:
	chapel/compiler/AST/: Makefile.share symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: view.cpp view.h 
Added files:
	chapel/compiler/AST/: bb.cpp 
	chapel/compiler/include/: bb.h 
	chapel/compiler/symtab/: copyPropagation.cpp copyPropagation.h 
Removed files:
	chapel/compiler/AST/: alist.cpp 

---------------------------------------------------------------------------

09/19/05 13:59:58 -- jplevyak

Log message:
	Differentiate member functions which take 0 arguments but require
	  parens from those which do not.  This is necessary to handle
	  the new_class_trial1.chpl test case.
	
	new_class_trial1.chpl now works through analysis BUT
	  *** it causes an explosion in InlineFunctions (recursive inlining???)
	  *** when --no-inline is set it fails in codegen because of duplicate
	      "this" variables.  Might have something to do with nested functions.
	
	Set FnSymbol::noParens for getters and setters (should have been set).
	
	When PARTIAL_OK is set in the case of x.f as part of x.f(1,2),
	  then return a partial for x.f if x.f is has noParens == true.
	
	  For new_class_trail1 this permits us to differentiate between the
	    iterator _forall() function (which needs to be returned as a partial
	    application) from a _forall instance variable (which would be
	    eagerly evaluated.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fun.cpp fun.h pattern.cpp 
	chapel/compiler/include/: symbol.h vec.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/classes/deitz/: test_method_call2.good 

---------------------------------------------------------------------------

09/19/05 14:19:33 -- deitz

Log message:
	Checking in a minor fix that John made for pre-instantiation where an
	= should have been an ==.

Modified files:
	chapel/compiler/traversals/: instantiate.cpp 

---------------------------------------------------------------------------

09/19/05 14:24:17 -- bradc

Log message:
	Applied a similar "no-munge" rule to overloaded functions
	in the prelude as my last check-in to preserve the cnames
	of functions defined in the prelude.  As with that check-in,
	this might eventually be changed to be based on the "no
	codegen" pragma (or an extern keyword?) rather than the fact
	that it's defined in the prelude...

Modified files:
	chapel/compiler/symtab/: renameOverloadedFunctions.cpp 

---------------------------------------------------------------------------

09/19/05 14:25:58 -- jplevyak

Log message:
	Minor performance fix (remove invarient code from a loop).

Modified files:
	chapel/compiler/ifa/: dead.cpp 

---------------------------------------------------------------------------

09/19/05 14:29:01 -- bradc

Log message:
	Updated nightly token-counting script to reflect
	the splitting of analysis into analysis+ifa (both
	directories are currently counted as "analysis"
	as far as the plots go).

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

09/19/05 14:29:45 -- bradc

Log message:
	Bug fix in ssca2 algorithm.

Modified files:
	chapel/test/ssca/ssca2/: ssca2.blc.chpl 

---------------------------------------------------------------------------

09/19/05 14:30:09 -- bradc

Log message:
	Added some missing .cvsignores.

Added files:
	chapel/compiler/ifa/make_prims/: .cvsignore 
	chapel/test/domains/roxana/classes/: .cvsignore 
	chapel/test/domains/roxana/helper/: .cvsignore 
	chapel/test/domains/roxana/index/: .cvsignore 

---------------------------------------------------------------------------

09/19/05 14:35:03 -- deitz

Log message:
	Updated test by removing some now unnecessary () on getters and setters.

Modified files:
	chapel/test/arrays/deitz/: new_class_trial1.chpl 

---------------------------------------------------------------------------

09/19/05 15:15:38 -- deitz

Log message:
	Removed RenameOverloadedFunctions pass altogether as this
	functionality is now handled by the mangling in codegenOne.  This is
	appropriate for user overload functions.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share codegenOne.cpp 
Removed files:
	chapel/compiler/symtab/: renameOverloadedFunctions.cpp 
	                         renameOverloadedFunctions.h 

---------------------------------------------------------------------------

09/19/05 16:07:30 -- deitz

Log message:
	Added an overloaded assignment test that fails in analysis.  This code
	tries to overload assignment between two records.

Added files:
	chapel/test/functions/deitz/: test_assign1.chpl 
	                              test_assign1.future 
	                              test_assign1.good 

---------------------------------------------------------------------------

09/20/05 09:15:56 -- deitz

Log message:
	Removed unused FindLeafFunctions traversal.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             createNestedFuncIterators.cpp 
Removed files:
	chapel/compiler/traversals/: findLeafFunctions.cpp 
	                             findLeafFunctions.h 

---------------------------------------------------------------------------

09/20/05 09:44:50 -- deitz

Log message:
	Added support for applying pragmas to a file module by putting a
	pragma on an empty first statement in the module.  For example,
	
	  pragma "no codegen";
	
	is now the first line in the prelude module.
	
	Moved the prelude module to modules/standard/prelude.chpl.

Modified files:
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: filesToAST.cpp filesToAST.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/modules/standard/: prelude.chpl 
Removed files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

09/20/05 11:05:11 -- deitz

Log message:
	Changed = into a function in my recent overloaded assignment test.  It
	fails for a different reason now.

Modified files:
	chapel/test/functions/deitz/: test_assign1.chpl 

---------------------------------------------------------------------------

09/20/05 12:24:26 -- bradc

Log message:
	Removing two compiler-generated files.

Removed files:
	chapel/compiler/ifa/: prim_data.cpp prim_data.h 

---------------------------------------------------------------------------

09/20/05 12:29:58 -- jplevyak

Log message:
	Remove futures for tests working for the right reasons.

Removed files:
	chapel/test/functions/deitz/: test_typeconstraint1.future 
	chapel/test/trivial/mjoyner/seq/: seq_index2.future 
	chapel/test/types/type_variables/jplevyak/: where-3.future 

---------------------------------------------------------------------------

09/20/05 12:35:28 -- deitz

Log message:
	Cleaned InlineFunctions.
	
	Made hasPragma utility look at the module.  So if the module has a
	pragma, that pragma applies to everything in that module.  Do we want
	to do it this way for all pragmas or should only some pragmas apply to
	lexically enclosed scopes.  Should it just be modules, or should
	function pragmas apply to everything in that function too?
	
	Added BaseAST::getModule() utility to determine what module something
	is defined in.
	
	Added ArgSymbol::isCopyOut() to determine if it is copied back (out or
	inout argument) and ArgSymbol::isRef() to determine if the argument is
	passed by reference.
	
	Named inline temps using more descriptive names such as _inline_foo
	for the result of inlining function foo.  Removed mangling at this
	point as it is taken care of later.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h expr.h symbol.h 
	chapel/compiler/traversals/: Makefile.share 
	                             createNestedFuncIterators.cpp 
	                             inlineFunctions.cpp 
	                             inlineFunctions.h 
	                             processImportExprs.cpp 
	                             removeNestedFunctions.cpp 
	                             scopeResolveSymbols.cpp 
Removed files:
	chapel/compiler/traversals/: replaceReturns.cpp replaceReturns.h 

---------------------------------------------------------------------------

09/20/05 13:08:39 -- jplevyak

Log message:
	Fixed a bug in writing of unions.  Union arguments are pointers now.
	Removed the futures for the newly passing tests.

Modified files:
	chapel/compiler/AST/: expr.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_domain2.future 
	chapel/test/classes/bradc/: writeunion-workaround.future 
	chapel/test/classes/bradc/unions/: assign.future 
	                                   writeunion.future 

---------------------------------------------------------------------------

09/20/05 14:18:36 -- jplevyak

Log message:
	Fix a problem with the record assignment functions returning the
	wrong result.
	Removed on future for a working test.
	Changed one test to reflect the new problem.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/types/type_variables/deitz/: test_tuplelike1.future 
Removed files:
	chapel/test/types/tuple/deitz/: test_tuple_simple5.future 

---------------------------------------------------------------------------

09/20/05 16:25:19 -- jplevyak

Log message:
	Update several .future files to reflect my understanding of the
	situation.  Steve: if you think I should work on any of these
	change the name and add a note, or send me some mail and I'll
	grab them by changing the .future.

Modified files:
	chapel/test/arrays/deitz/: new_class_trial1.future 
	chapel/test/classes/deitz/inherit/: test_inherit3.future 
	chapel/test/functions/deitz/: test_assign1.chpl 
	                              test_assign1.future 

---------------------------------------------------------------------------

09/20/05 16:27:53 -- jplevyak

Log message:
	Fix incorrect .good file and remove future

Modified files:
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed2.good 
Removed files:
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed2.future 

---------------------------------------------------------------------------

09/20/05 16:30:42 -- jplevyak

Log message:
	update .future : 2 args with same name is a syntactic error.

Modified files:
	chapel/test/functions/deitz/named/: test_named6-error.future 

---------------------------------------------------------------------------

09/21/05 14:36:20 -- jplevyak

Log message:
	Fix overloaded =, including uses in initialization.
	Make 2 .futures because of an issue with using
	  noDefaultInit == true for "var x = y".

Modified files:
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	                             resolveSymbols.cpp 
	chapel/test/functions/jplevyak/: equal-9.chpl 
Added files:
	chapel/test/functions/jplevyak/: equal-8.future 
	chapel/test/types/seq/bradc/: returnSeq2.future 

---------------------------------------------------------------------------

09/21/05 14:42:18 -- jplevyak

Log message:
	Remove a bunch of futures which were fixed by the last checkin.
	Change the attribution on overloadedFunction.future as I consider
	it an erroneous test case (haven't gotten a repsonse to the constrary).

Modified files:
	chapel/test/classes/shannon/: overloadedFunction.future 
Removed files:
	chapel/test/classes/bradc/: writerecord.future 
	                            writerecord1a.future 
	chapel/test/classes/bradc/records/: assignRecord2.future 
	chapel/test/functions/deitz/: test_assign1.future 

---------------------------------------------------------------------------

09/21/05 14:55:11 -- jplevyak

Log message:
	Update a bunch of .futures

Modified files:
	chapel/test/types/seq/deitz/: test_seq_record1.future 
	                              test_seq_tuple2.future 
	chapel/test/types/tuple/deitz/: test_tuple_function1.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_infer_class1.future 
	chapel/test/types/type_variables/jplevyak/: construct-1.future 

---------------------------------------------------------------------------

09/21/05 15:06:08 -- jplevyak

Log message:
	Fix 2 tests and remove 2 futures.

Modified files:
	chapel/test/functions/deitz/: test_where_param2.chpl 
	chapel/test/functions/jplevyak/: equal_method-1.chpl 
	                                 equal_method-1.good 
Removed files:
	chapel/test/functions/deitz/: test_where_param2.future 
	chapel/test/functions/jplevyak/: equal_method-1.future 

---------------------------------------------------------------------------

09/21/05 15:35:55 -- jplevyak

Log message:
	remove --equal-method since we are not going to use it any more

Removed files:
	chapel/test/functions/jplevyak/: equal_method-1.compopts 

---------------------------------------------------------------------------

09/21/05 15:40:07 -- jplevyak

Log message:
	update .future

Modified files:
	chapel/test/types/seq/deitz/: test_seq9.future 

---------------------------------------------------------------------------

09/22/05 11:08:54 -- deitz

Log message:
	Updated Roxana's hash table test with some comments.  It now works.

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table2.chpl 

---------------------------------------------------------------------------

09/22/05 16:29:24 -- deitz

Log message:
	Cleaned RemoveNestedFunctions.  The main change is that it is now
	fully implemented using iteration over the call graph to determine
	which local variables are outer variables.
	
	This constitutes a major change to how nested functions are removed.
	It simplifies a number of things that Mack and I discussed but that he
	ran out of time to implement.  It also takes advantage of the more
	stable AST by moving rather than copying and deleting the nested
	function.
	
	Also substantially reworked createNestedFuncIterators.  This used to
	use its own copy routines, etc.  It is now much shorter and more
	robust.  This fixes the future new_class_trial1.
	
	Added a new function call compute_call_sites that adds to a FnSymbol a
	vec of every CallExpr that calls that function and a vec of every
	CallExpr that is inside it.  These are named 'calledBy' and 'calls.'
	
	Removed SimpleNestedMove as it is no longer necessary to move nested
	functions to the first statement in a function.
	
	Minor improvements to htmlview to print out the intents of formals.
	
	Updated the .good file for new_class_trial1.  It is still a future
	because it still blows up in inlining when for statements are changed
	into nested function iterators.
	
	Added a working test of inout parameters.
	
	Added to CodegenOne a few lines of code to remove all functions that
	are never called.  (This does not eliminate all dead functions, e.g.,
	recursion.)  This eliminates functions that have been completely
	inlined.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: baseAST.h symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: codegenOne.cpp 
	chapel/compiler/traversals/: Makefile.share astHelpers.cpp 
	                             createNestedFuncIterators.cpp 
	                             htmlview.cpp inlineFunctions.cpp 
	                             inlineFunctions.h 
	                             removeNestedFunctions.cpp 
	                             removeNestedFunctions.h 
	chapel/test/arrays/deitz/: new_class_trial1.good 
Added files:
	chapel/test/functions/deitz/: test_inout1.chpl test_inout1.good 
Removed files:
	chapel/compiler/traversals/: findEnclosingScopeVarUses.cpp 
	                             findEnclosingScopeVarUses.h 
	                             simpleNestedFunctionMove.cpp 
	                             simpleNestedFunctionMove.h 
	chapel/test/arrays/deitz/: new_class_trial1.future 

---------------------------------------------------------------------------

09/22/05 16:30:44 -- jplevyak

Log message:
	Fixed .good file and removed .future.
	Overloaded = is now used for the initialization portion of DefExprs.

Modified files:
	chapel/test/functions/jplevyak/: equal-9.good 
Removed files:
	chapel/test/functions/jplevyak/: equal-9.future 

---------------------------------------------------------------------------

09/22/05 16:43:15 -- jplevyak

Log message:
	Fix .good file and remove .future

Modified files:
	chapel/test/types/type_variables/deitz/: test_tuplelike1.good 
Removed files:
	chapel/test/types/type_variables/deitz/: test_tuplelike1.future 

---------------------------------------------------------------------------

09/22/05 16:56:25 -- preston

Log message:
	added a few trivial test cases, my first!

Added files:
	chapel/test/trivial/preston/: aliasing.chpl aliasing.good 
	                              boundfunction.chpl 
	                              boundfunction.good curry.chpl 
	                              curry.future curry.good gcd.chpl 
	                              gcd.good if.chpl if.good 
	                              tuple.chpl tuple.good 

---------------------------------------------------------------------------

09/22/05 17:05:14 -- deitz

Log message:
	Removed extra () no longer necessary in this test.

Modified files:
	chapel/test/arrays/deitz/: new_class_trial1.chpl 

---------------------------------------------------------------------------

09/22/05 17:25:50 -- deitz

Log message:
	Added a fake data module supporting vector data up to size 16 with
	0-based indexing.
	
	Reimplemented the homogeneous tuple using this fake data.
	
	Added a preliminary domain class using this fake data.
	
	Added a future test case that fails resolving symbols from analysis.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: _chpl_htuple.chpl _chpl_standard.chpl 
Added files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_data.chpl 
	chapel/test/arrays/deitz/: test__adomain1.chpl 
	                           test__adomain1.future 
	                           test__adomain1.good 

---------------------------------------------------------------------------

09/23/05 09:12:24 -- deitz

Log message:
	Fixed a bug in the instantiation cache in which it made incorrect matches.
	
	Increased the size of the html view string.
	
	Updated .goods of two tests I should have updated yesterday.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: htmlview.cpp htmlview.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

09/23/05 13:44:00 -- deitz

Log message:
	Made instantiation and preinstantiation instantiate all functions that
	contain an instantiated type, not just functions in the scope of the
	instantiated type.  This is necessary because of module use.
	
	We now only build the assignment function for a record if an
	assignment function for it cannot be found anywhere, not just in its
	scope.
	
	We now build an htuple assignment function from a tuple and I added an
	htuple general assignment function.  This lets us assign tuples to
	homogeneous tuples.  I didn't have luck adding a tuple assignment
	function yet, so we can't assign a homogeneous tuple to a regular
	tuple.
	
	Performance note.  We should probably keep track of all the functions
	in a program rather than calling collect_functions everytime we need
	to look at them.
	
	Added four more homogeneous tuple test cases.  One future.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertLiteralTemps.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_htuple.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/types/tuple/deitz/: test_htuple2.chpl 
	                                test_htuple2.good 
	                                test_htuple3.chpl 
	                                test_htuple3.good 
	                                test_htuple4.chpl 
	                                test_htuple4.future 
	                                test_htuple4.good 
	                                test_htuple5.chpl 
	                                test_htuple5.good 

---------------------------------------------------------------------------

09/23/05 14:38:29 -- jplevyak

Log message:
	remove .future for working test

Removed files:
	chapel/test/types/tuple/deitz/: test_tuple_function1.future 

---------------------------------------------------------------------------

09/23/05 15:22:48 -- jplevyak

Log message:
	Ensure that new MetaTypes appear in the clone map.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

09/26/05 10:01:09 -- deitz

Log message:
	Changed glomstrings to stringcat.  Changed copystring to stringcpy.
	To make them more like the C standard string routines, but with more
	copying and automatic allocation.
	
	Also stringcat does not need a number to say how many arguments it
	should be passed, but has a maximum of five.  There is better
	compile-time usage checking now.  So
	
	  glomstrings(3, "hello", " ", "world")
	
	is now
	
	  strcat("hello", " ", "world").
	
	Noticed this morning that I should have used defualt arguments rather
	than creating multiple functions.  Will change this eventually.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/backend/: beautify.cpp 
	chapel/compiler/include/: stringutil.h 
	chapel/compiler/main/: arg.cpp driver.cpp runpasses.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y parser.cpp 
	chapel/compiler/passes/: codegen.cpp createEntryPoint.cpp 
	                         filesToAST.cpp pass.cpp 
	chapel/compiler/symtab/: codegenOne.cpp flatten.cpp 
	                         insertDefaultInitVariables.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             eliminateReturns.cpp htmlview.cpp 
	                             inlineFunctions.cpp 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveGotos.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp 
	chapel/compiler/util/: files.cpp stringutil.cpp 

---------------------------------------------------------------------------

09/26/05 11:18:48 -- jplevyak

Log message:
	Initialize FnSymbol::calledBy and FnSymbol::calls fields to
	fix valgrind errors.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

09/26/05 14:52:25 -- shannon

Log message:
	Removed the special casing of the write function for
	enumerated types, instead automatically building the
	function in the AST like for every other type if no
	write function is provided by the user.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/test/flowanalysis/newast/: enum.good 

---------------------------------------------------------------------------

09/26/05 15:43:15 -- roxana

Log message:
	Cleaned-up the test directory. Removed the futures for the
	working tests. Updated the future for test/domains/roxana/helper/test_hash_table.chpl.
	Can anyone tell why is failing by saying that the "program does
	not type"?

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table1.chpl 
	                                    test_hash_table1.good 
	                                    test_hash_table2.good 
	                                    test_hash_table.future 
	                                    test_hash_table.chpl 
Removed files:
	chapel/test/domains/roxana/helper/: test_hash_table2.future 
	                                    test_hash_table1.future 

---------------------------------------------------------------------------

09/26/05 19:46:14 -- jplevyak

Log message:
	First part of converting ArgSymbol::typeVariableSymbol to genericSymbol
	for use with Parametesr: a simple name change.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp fun.cpp fun.h sym.h 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: preAnalysisCleanup.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
	                             insertThisParameters.cpp 
	                             instantiate.cpp updateSymbols.cpp 

---------------------------------------------------------------------------

09/27/05 10:25:15 -- jplevyak

Log message:
	disable printing of dead avars with -vv

Modified files:
	chapel/compiler/ifa/: dead.cpp 

---------------------------------------------------------------------------

09/27/05 13:43:12 -- jplevyak

Log message:
	Cleanup handling of "genericSymbol".

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

09/27/05 16:07:35 -- deitz

Log message:
	Removed all potential for instantiating the sequence class over
	dtUnknown.  As a current limitation, iterators now must explicitly
	tell what type they are returning.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: preAnalysisHacks.cpp 
	chapel/test/arrays/deitz/: test_domain2.chpl 

---------------------------------------------------------------------------

09/27/05 17:06:14 -- jplevyak

Log message:
	Implement use of operator = in setters.
	Add a "split unique" tag to operator = in the prelude to
	  patch around the problem with recursive generic instantiation.
	Futurize union tests.
	Remove future for test_adomain1.chpl

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/classes/bradc/unions/: assign.future assign1a.future 
	                                   writeunion.future 
	chapel/test/classes/deitz/: test_union1.future 
	                            test_union2.future 
	                            test_union4.future 
Removed files:
	chapel/test/arrays/deitz/: test__adomain1.future 

---------------------------------------------------------------------------

09/27/05 17:26:55 -- roxana

Log message:
	A new test and a future.

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table3.chpl 
	                                    test_hash_table1.chpl 
	                                    test_hash_table.chpl 
Added files:
	chapel/test/domains/roxana/helper/: test_hash_table1.future 

---------------------------------------------------------------------------

09/28/05 08:38:33 -- jplevyak

Log message:
	Forgot to 'cvs add' these files.

Added files:
	chapel/test/classes/bradc/: writeunion-workaround.future 
	chapel/test/classes/deitz/: test_union_method1.future 
	                            test_union_method2.future 
	                            test_union_method3.future 

---------------------------------------------------------------------------

09/28/05 10:55:15 -- roxana

Log message:
	Updated some tests in my test directory. test_hash_table1.chpl
	behaves strange: it seems to matter if the type parameter
	is the first field in a class -- is this normal?

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table1.chpl 
	                                    test_hash_table1.good 
	                                    test_hash_table1.future 
	                                    test_hash_table.chpl 
Added files:
	chapel/test/domains/roxana/helper/: test_hash_table1a.good 
	                                    test_hash_table1a.chpl 
	                                    test_hash_table1a.future 

---------------------------------------------------------------------------

09/28/05 11:24:31 -- roxana

Log message:
	Updated good files to address regressions -- per John's
	observation.

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table2.good 

---------------------------------------------------------------------------

09/28/05 11:34:01 -- roxana

Log message:
	Replaced _data with _fdata per Steve's request.

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table3.chpl 
	                                    test_hash_table1.chpl 
	                                    test_hash_table1.good 
	                                    test_hash_table2.chpl 
	                                    test_hash_table3.good 
	                                    test_hash_table1a.chpl 
	                                    test_hash_table.chpl 

---------------------------------------------------------------------------

09/28/05 15:04:17 -- jplevyak

Log message:
	Cleanup ArgSymbol handling

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

09/29/05 12:56:26 -- jplevyak

Log message:
	Interm commit for work on generic instantiation.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

09/29/05 12:58:50 -- jplevyak

Log message:
	update .good file and remove future

Modified files:
	chapel/test/classes/bradc/records/: assignRecord3.good 
Removed files:
	chapel/test/classes/bradc/records/: assignRecord3.future 

---------------------------------------------------------------------------

09/30/05 11:58:37 -- jplevyak

Log message:
	Fixup FnSymbol::substitutions.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp 
	chapel/compiler/passes/: preAnalysisCleanup.cpp 

---------------------------------------------------------------------------

09/30/05 14:14:40 -- roxana

Log message:
	Some test update.

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table.chpl 

---------------------------------------------------------------------------

09/30/05 15:28:09 -- jplevyak

Log message:
	Reorganize isntantiation to share some code and to fix
	some correctness and preformance issues. (phase1)

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: alist.h symbol.h 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

10/03/05 11:16:03 -- deitz

Log message:
	Added a new flag --formal-temps to turn this change on as it causes
	failure during analysis.
	
	Added a new pass, NormalizeFunctions, that inserts temporaries inside
	all functions for all non-reference arguments to handle copying of
	function calling.  No attempt to deal with out or inout arguments has
	been made.  No attempt to deal with const argument checking has been
	made.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	                       runpasses.cpp 
	chapel/compiler/symtab/: Makefile.share 
Added files:
	chapel/compiler/symtab/: normalizeFunctions.cpp 
	                         normalizeFunctions.h 

---------------------------------------------------------------------------

10/03/05 12:00:01 -- bradc

Log message:
	Tried to clean up the print()-ing of
	function formals a bit...

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 

---------------------------------------------------------------------------

10/03/05 16:02:20 -- deitz

Log message:
	A test of nested tuple destructuring.

Added files:
	chapel/test/types/tuple/deitz/: test_destruct_nested.chpl 
	                                test_destruct_nested.good 

---------------------------------------------------------------------------

10/03/05 16:09:09 -- deitz

Log message:
	Cleaned up some AST construction code to make it easier to create AST.
	
	Added some support for arithmetic domains.  Added a new value class
	for arithmetic domain literals.  Major limitations.
	
	Added one partial test case of a 2D domain.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h stmt.h symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: preAnalysisHacks.cpp 
	                             scopeResolveSymbols.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/arrays/deitz/: test_domains_2D.chpl 
	                           test_domains_2D.good 

---------------------------------------------------------------------------

10/03/05 16:47:51 -- deitz

Log message:
	Added compiler flag --no-index-hack to make it so the front end does
	not say that every index in a for loop statement is of type dtInteger.
	Its type should be taken from the iterator, and is now dtUnknown when
	the flag --no-index-hack is used.
	
	Added a domain test case that relies on an index of tuple type.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
Added files:
	chapel/test/arrays/deitz/: test_domains_2Da.chpl 
	                           test_domains_2Da.future 
	                           test_domains_2Da.good 

---------------------------------------------------------------------------

10/04/05 11:16:56 -- deitz

Log message:
	Added the ability to type index expressions as in
	
	  for i:(integer,integer) in D { writeln(i); }
	
	However, it seems analysis still treats it as an integer as the write
	function in the body resolves to the integer version.  Added a test
	and updated another test's future to John for work on typing indices
	in for loops.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/test/arrays/deitz/: test_domains_2Da.future 
Added files:
	chapel/test/arrays/deitz/: test_domains_2Db.chpl 
	                           test_domains_2Db.future 
	                           test_domains_2Db.good 

---------------------------------------------------------------------------

10/04/05 11:18:20 -- deitz

Log message:
	Updated .good and removed .future on working test.

Modified files:
	chapel/test/types/seq/deitz/: test_seq9.good 
Removed files:
	chapel/test/types/seq/deitz/: test_seq9.future 

---------------------------------------------------------------------------

10/04/05 11:45:39 -- deitz

Log message:
	Changed 'Map<BaseAST*,BaseAST*>' to 'ASTMap' every place possible.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: alist.h baseAST.h symbol.h type.h 
	chapel/compiler/symtab/: normalizeFunctions.cpp 
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	                             inlineFunctions.cpp instantiate.cpp 
	                             removeNestedFunctions.cpp 
	                             updateSymbols.cpp updateSymbols.h 

---------------------------------------------------------------------------

10/04/05 13:13:28 -- jplevyak

Log message:
	Improve handling of multi-level polymorphic recursive functions in analysis.
	Add tests for handling of multi-level polymorphic recursive functions.
	Add Map::map_union() function to map.h

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h pattern.cpp 
	chapel/compiler/include/: map.h 
Added files:
	chapel/test/flowanalysis/recursion/: rec_fun-1.chpl 
	                                     rec_fun-1.good 
	                                     rec_fun-2.chpl 
	                                     rec_fun-2.good 
	                                     rec_fun-3.chpl 
	                                     rec_fun-3.good 

---------------------------------------------------------------------------

10/04/05 13:31:30 -- deitz

Log message:
	Removed some immature name mangling that is no longer necessary.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

10/04/05 13:34:10 -- deitz

Log message:
	Minor cleanup of instantiation cache I'm checking in only because I
	had time to test so far.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

10/04/05 13:52:35 -- bradc

Log message:
	Added a new test directory for Chapel ports of the NAS
	Parallel Benchmarks (NPB).  The organization of this
	directory is to have our "best" version of each
	benchmark in the top-level directory at any given time,
	and to put variations in subdirectories named after the
	benchmark.  So far, I've worked on MG, which I was asked
	to clean up and annotate for a possible upcoming workshop.

Added files:
	chapel/test/npb/: NOTEST mg.chpl 
	chapel/test/npb/mg/: NOTEST mg-annotated.chpl mg-compilable.chpl 

---------------------------------------------------------------------------

10/04/05 15:30:39 -- deitz

Log message:
	Removed "clone" field from AST copy routines.  This field used to be
	important when copying code where symbols also needed to be copied.
	It is no longer necessary.  If you copy a DefExpr, you copy the
	symbol.  This simplification is a positive side result of the
	simplifications made to the Symboltable a while ago.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: alist.h baseAST.h 
	chapel/compiler/symtab/: flatten.cpp 
	chapel/compiler/traversals/: buildClassHierarchy.cpp 
	                             buildLValueFunctions.cpp 
	                             createNestedFuncIterators.cpp 
	                             inlineFunctions.cpp 
	                             insertFunctionTemps.cpp 
	                             processImportExprs.cpp 
	                             updateSymbols.cpp 

---------------------------------------------------------------------------

10/04/05 15:42:24 -- bradc

Log message:
	Oops, forgot to add the generated prim_data files to
	a .cvsignore when I removed them from the CVS repository.

Added files:
	chapel/compiler/ifa/: .cvsignore 

---------------------------------------------------------------------------

10/04/05 17:00:21 -- jplevyak

Log message:
	Remove kludge for handling forall.
	Added new functions which are used for building simple loops out of sequences.
	For new sequence types, these functions (or something like them) will have
	to be filled out.  Here are the functions for arithmetic sequences:
	
	function _forall_start(s : _aseq) {
	  return s._low;
	}
	function _forall_index(s : _aseq, e) {
	  return e;
	}
	function _forall_next(s : _aseq, e) {
	  return e + s._stride;
	}
	function _forall_valid(s : _aseq, e) {
	  return e < s._high;
	}
	
	and a similar set exists for "seq".
	
	This fixes test_domain_2Dd.chpl

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

10/04/05 17:01:35 -- jplevyak

Log message:
	Remove .future for working test.

Removed files:
	chapel/test/arrays/deitz/: test_domains_2Db.future 

---------------------------------------------------------------------------

10/04/05 17:12:56 -- deitz

Log message:
	Also removed future for other arithmetic 2D domain test.  This is great
	progress.

Removed files:
	chapel/test/arrays/deitz/: test_domains_2Da.future 

---------------------------------------------------------------------------

10/04/05 17:13:39 -- deitz

Log message:
	For param instantiation, the param symbol is now mapped to a literal
	symbol, not a SymExpr.  This simplifies some resulting code, in
	particular, in the UpdateSymbols traversal.
	
	John, can you look at my changes to chapel_ifa.cpp.  I wouldn't be
	surprised if this can be simplified now that instantiation is always
	taking a map from symbols to symbols.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/traversals/: updateSymbols.cpp updateSymbols.h 

---------------------------------------------------------------------------

10/04/05 18:09:43 -- jplevyak

Log message:
	Add assert to verify an invariant of IF1 translation.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/05/05 11:37:07 -- jplevyak

Log message:
	Constants are now SymExpr throughout chapel_ifa.cpp
	constant_info() returns a Vec<SymExpr *> intead of Vec<Expr *>.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/traversals/: htmlview.cpp 

---------------------------------------------------------------------------

10/05/05 15:11:54 -- deitz

Log message:
	Implemented support for a pragma "instantiate multidimensional
	iterator" which is currently only used for arithmetic domains.  In the
	Chapel module, we write an iterator for a given dimension.  During
	preinstantiation (not instantiation yet), the compiler creates an
	iterator that iterates over each dimension and returns a tuple of the
	integers returned by the cross product of the dimension iterators.
	
	This adds support for arithmetic domains of rank other than two.
	There is no support for 1D yet.  I added a test case for an arithmetic
	domain of rank 5.  As a current limitation, somewhere else in the
	code, we must instantiate a tuple of size equal to the rank of the
	domain.  There are a number of ways I expect to remove this limitation
	in the future.
	
	The function buildMultidimensionalIterator constructs this iterator
	function at the time of preinstantiation.  Since most of the
	pre-analysis transforms are done by this point, this should eventually
	work during instantiation.  I noticed however that it was quite
	difficult to construct code after all the early transforms are done.
	It would be worthwhile to take some time to create functions for
	building code that builds differently transformed code depending on
	where in the compilation process we are.  One way of doing this is to
	run the transforming compiler passes over new code up to where we
	already are in the compiler.
	
	Removed handcoded test of _adomain as it is no longer appropriate.
	
	Note that domains are currently iterated over in column major order.
	Updated 2D domain test goods to take this change into account.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: htmlview.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/: test_domains_2D.chpl 
	                           test_domains_2D.good 
	                           test_domains_2Da.chpl 
	                           test_domains_2Da.good 
	                           test_domains_2Db.good 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/arrays/deitz/: test_domains_5D.chpl 
	                           test_domains_5D.good 
Removed files:
	chapel/test/arrays/deitz/: test__adomain1.chpl 
	                           test__adomain1.good 

---------------------------------------------------------------------------

10/05/05 16:47:32 -- deitz

Log message:
	Started working on the transform to change
	
	  forall i,j in D { ...
	
	to
	
	  forall tmp in D { var i = tmp(1); varj = tmp(2); ...
	
	This seems to result in ambiguous function resolution of the this
	method on tuples.  I added two futures to check this out.
	
	Removed the index hack that set all indices to integers.  I had to
	type a few indices in existing tests of mine.
	
	Improved the html compiler output to print out the literals for
	integers and bools, rather than something like _literal_71 for 2, for
	example.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: htmlview.cpp insertLiteralTemps.cpp 
	                             insertLiteralTemps.h 
	chapel/test/arrays/deitz/: new_class_trial1.chpl 
	chapel/test/trivial/deitz/demo/: sample2.chpl 
	chapel/test/types/seq/deitz/: test_seq_tuple3.chpl 
Added files:
	chapel/test/arrays/deitz/: test_domains_2Dc.chpl 
	                           test_domains_2Dc.future 
	                           test_domains_2Dc.good 
	                           test_domains_2Dd.chpl 
	                           test_domains_2Dd.future 
	                           test_domains_2Dd.good 
	chapel/test/types/tuple/deitz/: test_destruct.chpl 
	                                test_destruct.good 

---------------------------------------------------------------------------

10/05/05 16:51:36 -- deitz

Log message:
	Removed --no-index-hack development flag.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

10/06/05 09:01:26 -- jplevyak

Log message:
	Add future for complex polymorphic recursive functions.

Added files:
	chapel/test/flowanalysis/recursion/: rec_fun-3.future 

---------------------------------------------------------------------------

10/06/05 11:48:21 -- jplevyak

Log message:
	Added new graph of the contours created by analysis to support
	  debugging of analysis of recursion.
	Added new graph node shapes: triangles and ellipses
	Added new graph colors: orange and purple

Modified files:
	chapel/compiler/ifa/: graph.cpp 

---------------------------------------------------------------------------

10/06/05 14:56:55 -- jplevyak

Log message:
	Made it possible to dump the contour graph for each analysis pass.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h graph.cpp graph.h ifa.cpp 
	                      ifa.h 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

10/06/05 15:16:20 -- jplevyak

Log message:
	new tests for recursive polymorphic objects

Added files:
	chapel/test/flowanalysis/recursion/: rec_obj-3.chpl 
	                                     rec_obj-3.good 

---------------------------------------------------------------------------

10/06/05 15:40:14 -- deitz

Log message:
	A few rearrangements in preparation for fixing up the pre-analysis
	post-scope-resolution passes.
	
	Added new spot in the AST directory include/astutil.h and
	AST/astutil.cpp that will eventually contain a bunch of small
	traversal/utility routines for dealing with the AST.  It currently
	contains what used to be in traversals/astHelpers: a function to build
	up the call graph and a function to clear line number and filename
	information from some part of the AST.
	
	Added insertAtTail to BlockStmt and FnSymbol so that we can insert a
	statement at the beginning of a function simply by saying
	fn->insertAtHead(...) rather than fn->body->body->insertAtHead(...).

Modified files:
	chapel/compiler/AST/: Makefile.share stmt.cpp symbol.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symbol.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: codegenOne.cpp 
	                         insertDefaultInitVariables.cpp 
	                         insertOutParameterInitializations.cpp 
	                         normalizeFunctions.cpp 
	                         reconstructIterators.cpp 
	chapel/compiler/traversals/: Makefile.share eliminateReturns.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             processImportExprs.cpp 
	                             removeNestedFunctions.cpp 
Added files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/compiler/include/: astutil.h 
Removed files:
	chapel/compiler/traversals/: astHelpers.cpp 

---------------------------------------------------------------------------

10/06/05 16:56:16 -- deitz

Log message:
	Moved collect_functions into astutil and reimplemented it using the
	standard traversal.  This has the advantage of allowing one to find
	only the functions in a given module or associated with any given AST,
	as for nested functions.

Modified files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/compiler/include/: astutil.h baseAST.h 
	chapel/compiler/symtab/: Makefile.share copyPropagation.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Removed files:
	chapel/compiler/symtab/: collectFunctions.cpp collectFunctions.h 

---------------------------------------------------------------------------

10/10/05 09:16:00 -- deitz

Log message:
	Added 3 SemanticCheck passes to check the semantics of the program
	after parsing, after scope resolution, and after analysis.  These
	should be good places to check the program to make sure it makes sense
	and, if it doesn't, to give descriptive error messages.  In addition,
	the first semantic check pass is a good pass to let the user know what
	is not implemented, e.g., zippered iteration.
	
	Moved the functionality in BuildClassConstructorsEtc to a new pass
	called BuildDefaultFunctions.  This is a more descriptive name, as the
	functions being built in this pass are default ones that would not be
	built if the user defined one.
	
	Moved the functionality in insertAnonymousTypes to a new pass called
	normalizeParsedAST.  This pass now currently moves anonymous record
	type definitions into statements of their own.  It basically could
	have been done in parsing, but is easier to do afterwards.  This pass
	will eventually handle a few more things like this that are currently
	in random passes.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: astutil.h baseAST.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share collectASTS.cpp 
	                             scopeResolveSymbols.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         buildDefaultFunctions.h 
	                         normalizeParsedAST.cpp 
	                         normalizeParsedAST.h semanticChecks.cpp 
	                         semanticChecks.h 
Removed files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	                             checkSemantics.cpp checkSemantics.h 
	                             insertAnonymousTypes.cpp 
	                             insertAnonymousTypes.h 

---------------------------------------------------------------------------

10/10/05 12:00:01 -- jplevyak

Log message:
	Reorg of handling for polymorphic recursive objects.:w

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/10/05 12:03:29 -- deitz

Log message:
	Checkin of John's patch to the --formal-temps flag.

Modified files:
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/symtab/: normalizeFunctions.cpp 

---------------------------------------------------------------------------

10/10/05 13:13:51 -- deitz

Log message:
	Added support for forall-expressions as calls to nested iterators.
	This means that something like
	
	  ... [i in D] i ...
	
	is translated to
	
	  iterator _forallexpr1()
	    forall i in D
	      yield i;
	  ... _forallexpr1() ...
	
	Moved reconstructIterators after scope resolution.
	
	Fixed a bug in copying ReturnStmts in which yields would become
	returns.
	
	Added a test of a forall expression:
	  writeln([i:integer in 1..5] i);

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalizeParsedAST.cpp 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: htmlview.cpp resolveSymbols.cpp 
Added files:
	chapel/test/functions/deitz/: test_forallexpr1.chpl 
	                              test_forallexpr1.good 

---------------------------------------------------------------------------

10/10/05 14:39:48 -- jplevyak

Log message:
	Fix a bug with the handling of automatic coercions at primitive operators.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h pattern.cpp pattern.h 

---------------------------------------------------------------------------

10/10/05 14:54:35 -- deitz

Log message:
	Removed ForallExpr Expr subclass as it is no longer used.  Forall
	expressions are now handled as nested iterators with forall statement
	bodies.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h expr.h symscope.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: fixup.cpp 

---------------------------------------------------------------------------

10/10/05 15:40:02 -- jplevyak

Log message:
	Added a pragma to function= and changed the .good files
	  to use the new line numbers.

Modified files:
	chapel/modules/standard/: prelude.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

10/10/05 15:42:06 -- deitz

Log message:
	Simplified collect_asts.
	
	Using John's patch, started to switch instantiate_generic's analysis
	interface over to using collect_asts rather than the copy map.  This
	will enable transforms and constructions of new functions during
	instantiation.  Currently, the copy map is used to find the new
	functions and types, and then collect_asts is used to grab the new
	stuff.  I ran tests with a little code to make sure they both found
	the same new stuff, but I've pulled out those tests for this
	intermediate checkin.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/traversals/: collectASTS.cpp 

---------------------------------------------------------------------------

10/10/05 15:42:58 -- deitz

Log message:
	Moved BuildLValueFunctions and ReconstructIterators later in the
	passlist.

Modified files:
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

10/11/05 09:10:50 -- deitz

Log message:
	Changed the interface of instantiate_generic so that it fills a Vec of
	FnSymbols and TypeSymbols capturing the new functions and types,
	rather than referring the copy map.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

10/11/05 09:11:33 -- deitz

Log message:
	Moved ApplyThisParameters earlier in the passlist in preparation for
	folding it into ScopeResolveSymbols.
	
	Moved ForLoopStmt index destructuring out of InsertLiteralTemps and
	into NormalizeParsedAST.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: normalizeParsedAST.cpp 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             insertLiteralTemps.h 

---------------------------------------------------------------------------

10/11/05 09:12:29 -- deitz

Log message:
	Reworked initial handling of the main function.  It is no longer found
	during parsing.
	
	Made the default return type of a newly constructed FnSymbol
	dtUnknown, as we set it to that manually by default and not doing so
	caused me to run into strange errors.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: codegenOne.cpp symtab.cpp 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 

---------------------------------------------------------------------------

10/11/05 11:28:42 -- deitz

Log message:
	Removed preinstantiate_generic, unifying it with instantiate_generic.
	The pre-instantiation pass now calls instantiate_generic.  This
	removes duplicate instantatiation code.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: instantiate.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

10/11/05 12:50:23 -- deitz

Log message:
	Moved creation of chpl_main function into buildDefaultFunctions.  This
	code identifies a main function if it exists, or builds one.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         createEntryPoint.cpp 

---------------------------------------------------------------------------

10/11/05 13:27:09 -- jplevyak

Log message:
	Convert INTENT_PARAM into INTENT_BLANK for "parameters" after
	  instantiation to prevent repeated instantiation.
	Change the way wrappers are constructed so that a new
	  Match structure is created for each Fun at each point
	  during wrapper construction.
	Change the way order_wrappers and default_wrappers are
	  handled by updating the formal and actual maps as the
	  wrappers are built.
	Change the interfaces for building wrappers so that they
	  no longer use a Match structure but instead take the
	  maps and a Fun to build a wrapper on.
	This fixes some issues on the path to enabling the
	  callee cache.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: fa.cpp ifa.h pattern.cpp 

---------------------------------------------------------------------------

10/11/05 13:52:41 -- deitz

Log message:
	Fixed a small bug in the parsing of types using the 'of' keyword in
	which the right argument had to be a variable-expression and could not
	be a general type.  Now that types are parsed as expressions, this
	became easier, allowing something like 'seq of seq of integer.'
	
	Added two small sequence of sequence tests that work.  The second one
	even uses a nested forall loop with different typed indices to print
	out all the leaf elements.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/types/seq/deitz/: test_seq_of_seq.chpl 
	                              test_seq_of_seq.good 
	                              test_seq_of_seq2.chpl 
	                              test_seq_of_seq2.good 

---------------------------------------------------------------------------

10/11/05 14:25:58 -- jplevyak

Log message:
	Enable caching of callees.
	This should greatly increase compilation speed.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/11/05 14:57:31 -- deitz

Log message:
	Simplified processing of types that use the like keyword.  Removed the
	RemoveLikeTypes traversal which hadn't been doing anything for a
	while, and tucked its functionality into PreAnalysisHacks.  Prior to
	this checkin, like was basically ignored and parsed as a :, so one
	could write
	
	  var x : integer;
	  var y like x;
	
	or
	
	  var y : x;
	
	without impunity.  Currently that is still allowed, though I think its odd.
	
	Now like-types are parsed to create a special function typeof so
	
	  var y like x;
	
	becomes
	
	  var y : typeof(x);
	
	Then in preAnalysisHacks, we change this into the actual type if that
	is known, so since x is an integer this becomes
	
	  var y : integer;
	
	If it is not known, we revert to the old way and change it into
	
	  var y : x;
	
	I did this so things like
	
	  var x like (1+2);
	
	keep working.
	
	This checkin also simplifies special handling of sequence literals by
	transforming during parsing
	
	  (/ 1, 2, 3 /)
	
	into
	
	  seq(typeof(1)) # 1 # 2 # 3
	
	rather than
	
	  seq() # 1 # 2 # 3
	
	plus special handling later.
	
	Fixed a bug in preinstantiation removal of actual arguments that were
	used only to instantiate.  It missed one.
	
	Also removed code to collapse block statements in conditional
	statements.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: instantiate.cpp 
	                             preAnalysisHacks.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Removed files:
	chapel/compiler/symtab/: removeLikeTypes.cpp removeLikeTypes.h 

---------------------------------------------------------------------------

10/11/05 16:05:18 -- jplevyak

Log message:
	I believe these two tests are working... so long as we are not
	expecting a zipper product.

Modified files:
	chapel/test/arrays/deitz/: test_domains_2Dc.good 
	                           test_domains_2Dd.good 

---------------------------------------------------------------------------

10/11/05 16:16:38 -- deitz

Log message:
	Added four more interesting tests of default values to functions.  Two
	fail and are futures.  One of these is a nested function with a
	default value set to a variable in the outer function.  The other has
	a default value set to the value of a previous argument.
	
	The two that work set the default value to a variable at module scope.
	One of these changes this default value between calls.

Added files:
	chapel/test/functions/deitz/default/: test_default7.chpl 
	                                      test_default7.future 
	                                      test_default7.good 
	                                      test_default8.chpl 
	                                      test_default8.good 
	                                      test_default8a.chpl 
	                                      test_default8a.good 
	                                      test_default9.chpl 
	                                      test_default9.future 
	                                      test_default9.good 

---------------------------------------------------------------------------

10/11/05 16:42:46 -- deitz

Log message:
	Removed futures for working tests.

Removed files:
	chapel/test/arrays/deitz/: test_domains_2Dc.future 
	                           test_domains_2Dd.future 

---------------------------------------------------------------------------

10/12/05 08:12:08 -- jplevyak

Log message:
	Remove future for working test.

Removed files:
	chapel/test/flowanalysis/recursion/: rec_fun-3.future 

---------------------------------------------------------------------------

10/12/05 08:48:52 -- jplevyak

Log message:
	Update future:
	The body of the wrapper looks like:
	
	(BlockStmt
	  (ExprStmt
	    (DefExpr
	      (CallExpr
	        (SymExpr '*:???')
	        (SymExpr 'arg x:integer')
	        (SymExpr 'arg x:integer')) '_default_temp_y:integer'))
	  (ExprStmt
	    (DefExpr
	      (SymExpr 2 '_literal_76:integer') '_default_temp_x:integer'))
	  (ReturnStmt
	    (CallExpr
	      (SymExpr 'fn foo')
	      (CastExpr
	        (SymExpr '_default_temp_x:integer'))
	      (CastExpr
	        (SymExpr '_default_temp_y:integer')))))
	
	Which is clearly incorrect as "arg x:integer" doesn't
	appear in this scope.  2 things:
	
	1. it should probably be caught by checkSemantics or somesuch.
	2. It should refer to _default_temp_x or some other temporary
	     in the appropriate scoping order

Modified files:
	chapel/test/functions/deitz/default/: test_default7.future 

---------------------------------------------------------------------------

10/12/05 10:26:21 -- deitz

Log message:
	Removed future for test of default value that refers to a previous
	argument.  Added support to the default wrapper routine to deal with
	this case.  Added four more similar tests that all work.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/functions/deitz/default/: test_default7a.chpl 
	                                      test_default7a.good 
	                                      test_default7b.chpl 
	                                      test_default7b.good 
	                                      test_default7c.chpl 
	                                      test_default7c.good 
	                                      test_default7d.chpl 
	                                      test_default7d.good 
Removed files:
	chapel/test/functions/deitz/default/: test_default7.future 

---------------------------------------------------------------------------

10/12/05 13:55:29 -- jplevyak

Log message:
	Fix for default argument from nested function.
	Problem was overly aggressive dead code elimination.
	Removed .future

Modified files:
	chapel/compiler/ifa/: if1.cpp 
Removed files:
	chapel/test/functions/deitz/default/: test_default9.future 

---------------------------------------------------------------------------

10/12/05 15:22:54 -- deitz

Log message:
	Added simple test of writing the result of a call to a class constructor.

Added files:
	chapel/test/classes/deitz/: test_class_construct.chpl 
	                            test_class_construct.good 

---------------------------------------------------------------------------

10/12/05 16:59:46 -- deitz

Log message:
	Simplified front-end tuple construction similarly to sequence changes
	yesterday.  It now uses the typeof function rather than special-casing
	the type into an odd place.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             preAnalysisHacks.cpp 
	chapel/test/arrays/deitz/: test_domain2.chpl 

---------------------------------------------------------------------------

10/12/05 17:13:11 -- deitz

Log message:
	John, can you take a look at test/classes/deitz/test_this2.future
	which is a simplification of my array test case.  It is a problem with
	an expression like "c.d().x".

Added files:
	chapel/test/arrays/deitz/: test_array_2D.chpl 
	                           test_array_2D.future 
	                           test_array_2D.good 
	chapel/test/classes/deitz/: test_this1.chpl test_this1.good 
	                            test_this2.chpl test_this2.future 
	                            test_this2.good 

---------------------------------------------------------------------------

10/12/05 17:21:36 -- jplevyak

Log message:
	Change output of floats to use printf("%#g".. to ensure that a "."
	is printed for whole numbers so that they can be differentiated
	visually from plain integers.
	Fix the detection of nested functions as per Steve.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: sym.cpp 
	chapel/test/domains/roxana/helper/: test_hash_table1.chpl 

---------------------------------------------------------------------------

10/13/05 08:19:21 -- jplevyak

Log message:
	Didn't realize that the .good files were generated.
	Checkin of corrected cfghelp files.

Modified files:
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVar-Dash.cfghelp 
	                                             configVarSetOver.cfghelp 
	                                             configVarSetTwoTypes.cfghelp 
	                                             configVarTwoModules.cfghelp 

---------------------------------------------------------------------------

10/13/05 11:30:59 -- jplevyak

Log message:
	Update handling of nested functions in analysis to use the new
	"display" data structure.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/13/05 11:58:11 -- deitz

Log message:
	Added support 1D domains.
	
	Added a test of a 1D domain.
	
	Removed four futures for tests that are now working.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/arrays/deitz/: test_domains_1D.chpl 
	                           test_domains_1D.good 
Removed files:
	chapel/test/types/seq/deitz/: test_seq8b.future 
	                              test_seq_tuple2.future 
	chapel/test/types/tuple/deitz/: test_tuple_of_tuples.future 
	chapel/test/types/tuple/jplevyak/: tuple_index-2.future 

---------------------------------------------------------------------------

10/13/05 12:25:15 -- jplevyak

Log message:
	Fix a bug in cloning whereby an incomplete type could slip by.
	Added an "id" field to EntrySets, built a general quicksort on
	anything which has an "id" field.   Use this new function
	in fa.cpp to remove non-determininsm.  Removed "null" from
	the reduced type used for splitting in flow analysis.

Modified files:
	chapel/compiler/ifa/: clone.cpp fa.cpp fa.h 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

10/13/05 13:46:18 -- jplevyak

Log message:
	Functionalize compatibility functions for edges.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/13/05 15:15:49 -- deitz

Log message:
	Fixed a bug in my hand-coded 2D array test case and got it working.
	
	Added a simple test of a simple forall loop.

Modified files:
	chapel/test/arrays/deitz/: test_array_2D.chpl test_array_2D.good 
Added files:
	chapel/test/trivial/deitz/: test_forall.chpl test_forall.good 

---------------------------------------------------------------------------

10/13/05 15:16:18 -- deitz

Log message:
	Removed future for hand-coded 2D array test case.

Removed files:
	chapel/test/arrays/deitz/: test_array_2D.future 

---------------------------------------------------------------------------

10/14/05 08:40:59 -- jplevyak

Log message:
	Add entry and creation set id's to the contour graph.
	Add a new log type 's' for "splitting".
	Make it possible for CreationSet::defs to be a set instead
	  of a vector.

Modified files:
	chapel/compiler/ifa/: clone.cpp graph.cpp 
	chapel/compiler/include/: log.h 

---------------------------------------------------------------------------

10/14/05 09:20:08 -- jplevyak

Log message:
	New interfaces for make_entry_set fa_print_backward and new function
	  show_atype which prints creation set ids.
	Added print routiles for the "split" log.
	Changed split_ess to not split creation sets in the same
	  pass as entry sets.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/14/05 09:53:12 -- jplevyak

Log message:
	Make detection of mark confluences more conservative.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/14/05 10:31:00 -- jplevyak

Log message:
	Tighten up confluence code using DFS marks.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/14/05 11:27:13 -- deitz

Log message:
	Added initial non-robust support for limited 2D arrays.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: preAnalysisHacks.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/: test_array_2D.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/arrays/deitz/: test_array_2Da.chpl 
	                           test_array_2Da.good 

---------------------------------------------------------------------------

10/14/05 11:27:48 -- deitz

Log message:
	Added one more 2D array test case.

Added files:
	chapel/test/arrays/deitz/: test_array_2Db.chpl 
	                           test_array_2Db.good 

---------------------------------------------------------------------------

10/14/05 11:35:22 -- deitz

Log message:
	Removed future for test that now works because simple array
	declarations are now being parsed.

Removed files:
	chapel/test/trivial/deitz/: test_scope2.future 

---------------------------------------------------------------------------

10/14/05 11:55:53 -- jplevyak

Log message:
	Sort two more worklists to remove non-determinism.
	DFS Marking covers everything reachable from nodes which
	  generate values instead of just backward from the detected
	  confluence so as to handle recursive dependencies.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/14/05 12:52:21 -- jplevyak

Log message:
	Make the type marks specific to CreationSet (except for constants).

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/14/05 13:44:08 -- jplevyak

Log message:
	Cleanup marked confluence discovery a bit.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/14/05 13:48:49 -- jplevyak

Log message:
	Fix valgrind errors : uninitialized variable

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/14/05 14:07:24 -- bradc

Log message:
	I was sick of sitting in meetings all week, so used my
	last half hour last night to finish up some superficial
	changes that had been lingering in my directory.
	
	Improved pretty-printing of string literals (for debugging
	via the print() method) to include quotes; also improved
	printing of default values for config vars of type string
	to include quotes.
	
	Copied the floating-point printing concept from the runtime
	into John's printing of literals in sym.cpp to get rid of
	extra trailing 0's caused by %#g.  2.2 should now print as
	2.2 rather than 2.20000 and 2.0 should print as 2.0.  I think
	this is an improvement, but have longer-term concerns about
	printing literals using either of these methods because they
	make no guarantees that all significant digits will get
	printed out for floating point values.  We should be able
	to get away with this for awhile, but eventually I suspect
	we'll want to codegen user literals using the string they
	fed us rather than converting it to floating point and then
	back to text.  (computed Immediate floating point values
	will have to be printed out with sufficient precision,
	obviously, so there's a challenge there as well).
	
	Fixed up a bunch of .cfghelp files to match these two
	changes.
	
	Implemented Steve's suggested improvement to the stringutil
	functions by relying on default values rather than pure
	overloading.
	
	Removed Expr::printCfgInitString -- it wasn't doing enough
	anymore to be useful.
	
	Rearranged some symbol.cpp methods in order to match the
	order in the symbol.h header file.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/ifa/: sym.cpp 
	chapel/compiler/include/: expr.h stringutil.h symbol.h 
	chapel/compiler/make/: Makefile.compiler.foot 
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	chapel/compiler/util/: stringutil.cpp 
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVar-Dash.cfghelp 
	                                             configVarHelp.cfghelp 
	                                             configVarModStrings1.cfghelp 
	                                             configVarModStrings2.cfghelp 
	                                             configVarSetOver.cfghelp 
	                                             configVarSetTwoTypes.cfghelp 
	                                             configVarTwoModules.cfghelp 

---------------------------------------------------------------------------

10/14/05 14:32:43 -- jplevyak

Log message:
	More aggressive object contour sharing.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/14/05 16:14:26 -- jplevyak

Log message:
	Fixed a bug in detection of recursive object contours.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/16/05 17:18:19 -- jplevyak

Log message:
	Fix jump over declaration which prevented compilation with
	gcc 3.3.X.  Fixed initialization to squash valgrind errors.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/17/05 16:45:34 -- jplevyak

Log message:
	Group entry sets by compatibilty during splitting.
	Fixed a bug whereby forced splitting of an entry sets was not correctly
	recording the entry set which it was split.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

10/18/05 10:23:22 -- deitz

Log message:
	Added two sequence of homogeneous tuple tests.  The first works.  The
	second shows that the tuples are added to the sequence by reference,
	not by value, so changing the tuple impacts the sequence.  I think I
	have this working in my parallel change to get the --formal-temps flag
	working, and I'm testing now.

Added files:
	chapel/test/types/seq/deitz/: test_seq_htuple1.chpl 
	                              test_seq_htuple1.good 
	                              test_seq_htuple2.chpl 
	                              test_seq_htuple2.future 
	                              test_seq_htuple2.good 

---------------------------------------------------------------------------

10/18/05 13:24:49 -- jplevyak

Log message:
	IF1 dumps print out constants for inline.

Modified files:
	chapel/compiler/ifa/: if1.cpp 

---------------------------------------------------------------------------

10/18/05 15:26:48 -- deitz

Log message:
	Improved putting in formal copy temps.  It is still disabled by
	default, use --formal-temps.  This now does not put in a formal temp
	for code that is generic.  It puts it in once the functions are
	instantiated.  There are still a few assorted errors, and this will
	break all inout and out intent codes.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         applyGettersSetters.h 
	chapel/compiler/symtab/: normalizeFunctions.cpp 
	                         normalizeFunctions.h 

---------------------------------------------------------------------------

10/19/05 11:12:13 -- jplevyak

Log message:
	Mod forv_XXXX macro to work with BlockHash (which supports .del()).
	Use new macro in place of verbose alternative.

Modified files:
	chapel/compiler/ifa/: fa.cpp 
	chapel/compiler/include/: map.h vec.h 

---------------------------------------------------------------------------

10/19/05 13:19:39 -- shannon

Log message:
	Added the ability to write enums and classes to a file.
	With this change I was able to remove writes altogether,
	such that if the write symbol is encountered it is changed
	to a call to fwrite to stdout.
	
	I added a few tests.  There were a number of tests that
	included user write functions which I've changed to fwrites.
	I also changed the expected output when necessary.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         filesToAST.cpp filesToAST.h 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             resolveSymbols.cpp 
	                             specializeCallExprs.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_complex.chpl 
	                          _chpl_data.chpl _chpl_file.chpl 
	                          _chpl_htuple.chpl _chpl_seq.chpl 
	                          prelude.chpl 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/arrays/deitz/: new_class_trial1.chpl 
	chapel/test/classes/bradc/: writeclass1a.chpl writerecord1a.chpl 
	chapel/test/classes/deitz/: test_record_user_write.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: enum.good 
	chapel/test/trivial/deitz/demo/: sample1.chpl sample1a.chpl 
	                                 sample1b.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation16.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record4.chpl 
Added files:
	chapel/test/types/file/: fwriteSelectStmt.chpl 
	                         fwriteSelectStmt.good 
	                         fwritelnClassFile.catfiles 
	                         fwritelnClassFile.chpl 
	                         fwritelnClassFile.good 
	                         fwritelnEnumFile.catfiles 
	                         fwritelnEnumFile.chpl 
	                         fwritelnEnumFile.good 

---------------------------------------------------------------------------

10/20/05 13:38:31 -- shannon

Log message:
	Update the expected output for four tests that I
	missed with yesterday's commit.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

10/21/05 13:30:09 -- deitz

Log message:
	Removed the restriction requiring parentheses around conditional
	expressions as suggested by Preston.  Statement level conditional
	expressions are simply parsed as conditional statements.
	
	Added four tests for if expressions.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_if_expr.chpl test_if_expr.good 
	                            test_if_expr2.chpl 
	                            test_if_expr2.good 
	                            test_if_expr3.chpl 
	                            test_if_expr3.good 
	                            test_if_expr4.chpl 
	                            test_if_expr4.good 

---------------------------------------------------------------------------

10/21/05 14:29:40 -- jplevyak

Log message:
	remove unused variable
	use forv for BlockHash

Modified files:
	chapel/compiler/ifa/: fa.h ssu.cpp 

---------------------------------------------------------------------------

10/26/05 17:11:58 -- deitz

Log message:
	Implemented experimental function resolution/type instantiation pass
	as an alternative to analysis pass.  Use the -b or --no-infer flags to
	use this pass.  This is an intermediate checkin as it doesn't do any
	instantiation yet.  It also doesn't do type coercions.  It does handle
	default values and named argument passing.
	
	This checkin also cleans up other code in the compiler, including
	elimination of the unmaintained analyzeAST flag (--no-analysis) and
	simplification of the methodToken and setterToken type related code.
	
	Fixed a bug in Expr::parentFunction routine.
	
	Reimplemented function_returns_void function to be self-sufficient.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: analysis.h driver.h type.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	                       runpasses.cpp 
	chapel/compiler/passes/: Makefile.share 
	                         buildDefaultFunctions.cpp 
	                         runAnalysis.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             findUnknownTypes.cpp 
	                             insertThisParameters.cpp 
	                             removeNamedParameters.cpp view.cpp 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/functions/deitz/default/: test_default5.chpl 
	                                      test_default8.chpl 
	                                      test_default8a.chpl 
	                                      test_default9.chpl 
Added files:
	chapel/compiler/passes/: functionResolution.cpp 
	                         functionResolution.h 
	chapel/test/classes/deitz/: test_class1a.chpl test_class1a.good 

---------------------------------------------------------------------------

10/27/05 10:45:49 -- shannon

Log message:
	Added the lookupInFileModuleScope method to the
	Symboltable class.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             resolveSymbols.cpp 
	                             specializeCallExprs.cpp 

---------------------------------------------------------------------------

10/27/05 11:30:04 -- jplevyak

Log message:
	remove some now unnecessary  special cases for noDefaultInit

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

10/27/05 11:47:10 -- deitz

Log message:
	Removed remaining code for supporting unions in the way we used to as
	it was getting in the way and not adding anything.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassHierarchy.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/classes/deitz/inherit/: test_inherit_error3.good 
Removed files:
	chapel/compiler/traversals/: insertUnionChecks.cpp 
	                             insertUnionChecks.h 
	chapel/runtime/include/: union.h 

---------------------------------------------------------------------------

10/27/05 14:17:11 -- deitz

Log message:
	Added InitExpr which will eventually contain the exprType field that
	the DefExpr currently contains.  Enable its creation with
	--use-init-expr.
	
	The InitExpr contains
	  Symbol* sym
	  Expr* type
	
	The type is a copy of the DefExpr::exprType.
	The symbol is the same as the DefExpr::sym.
	
	I was going to use, instead of a Symbol, an expr, so we could use a
	MemberAccess in the class init function, but this seems like an
	unnecessary complication.
	
	The InitExpr for fields is in the init function of a class that is
	called first thing by the constructor.  There should be some way to
	relate the 'this' argument to the InitExprs.  Perhaps we should add a
	new field to InitExpr that contains an optional 'this' symbol if it is
	a field.
	
	John, I have this change disabled because even though analysis ignores
	the InitExpr, we run into trouble resolving the type field if it
	contains a CallExpr.
	
	The next step on my end is to create separate statements for doing the
	initialization for variables.  That is, remove the init field from the
	DefExpr.  I will not yet do this for ArgSymbols since that signals the
	ability to create a default value wrapper.
	
	Also, should the InitExpr apply to ArgSymbols and if so, where should
	it be?  Similar for FnSymbols and TypeSymbols.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h driver.h expr.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         normalizeParsedAST.cpp 
	chapel/compiler/traversals/: htmlview.cpp 

---------------------------------------------------------------------------

10/27/05 14:45:35 -- jplevyak

Log message:
	Add LiteralType
	Add ArgSymbol::isExactMatch (not currently used).
	Use LiteralType for tuple indexing function.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h symbol.h type.h 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 

---------------------------------------------------------------------------

10/27/05 15:32:34 -- deitz

Log message:
	Moved construction of default constructor into same file rather than
	in separate pieces and changed some names around.
	
	Preparing to add better support for user-defined constructors and to
	factor some more things into the class init function.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

10/28/05 09:05:04 -- jplevyak

Log message:
	Fix problem with InitExpr::type field not being analyzed.
	
	Note:
	
	  I think declarations without explicit types of the form:
	
	    var x = f();
	
	  are generating an InitExpr with a NULL "type" field.
	
	  I think that the "type" field should contain a copy of the
	  initialization value (e.g. "f()").   The reason being that
	  we want the type of x to be whatever the type of f() is.
	
	  If the InitExpr::type field is NULL, I would have to assign
	  "nil" to "x" which would mean that code like:
	
	  var x = f();  // where f() returns a float
	
	  ...
	
	  x = 2;
	
	  would fail because the type of "x" before the assignment of the integer
	  would be { float | Nil }, and overloaded = of (Nil, integer) is integer
	  and overloaded = of (float, integer) is float so the result would be
	  that x would be of type { float | integer | Nil } which mixes primitives.
	
	  Conversely if we make InitExpr::type be "f()", then the type of x
	  before the assignment would be { float } so that the final type of
	  x will be { float }.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

10/28/05 10:34:57 -- jplevyak

Log message:
	LiteralType is now correctly defined in the commonModule.
	I am using a typedef for these for debugging purposes.
	Also added support for "Exact Match" for instantiated
	type variables.  Currently this is enabled for everything
	(we can change this if we go to an explicit instantiation model).

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: pattern.cpp sym.cpp sym.h 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

10/28/05 11:03:57 -- jplevyak

Log message:
	Initialize a bunch of variables because "gcc -O2" complains about them
	being "potentially uninitialized".

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/make_prims/: make_prims.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp 
	chapel/compiler/traversals/: scopeResolveGotos.cpp 

---------------------------------------------------------------------------

10/28/05 14:47:38 -- shannon

Log message:
	Minor refactoring and removed some commented-out code.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeCallExprs.cpp 

---------------------------------------------------------------------------

10/31/05 11:51:58 -- jplevyak

Log message:
	The most time consuming part of analysis was building the type hiearchy.
	This checkin incrementalizes building the type hierarchy.
	Also:
	  moved qsort_by_id into fa.h so it can be used by other source files
	    (this is a template QSORT for anything with a ::id field)
	  used qsort_by_id to fixup some non-determinism in pattern.cpp
	  use the specialize relation instead of implements to determine
	    whether or not NULL may be passed to a function
	  add Vec::count() which counts the number of non-NULL things in a set
	  use Vec::count() to eliminate non-determinins from the log.d file

Modified files:
	chapel/compiler/ifa/: ast.cpp fa.cpp fa.h pattern.cpp 
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

10/31/05 13:17:29 -- jplevyak

Log message:
	Shift from Vec::in() to Vec::set_in() (which is more efficient)
	in a couple of cases.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

10/31/05 14:15:57 -- deitz

Log message:
	Temporary regressions I'm looking into with another change to add a
	primitive assignment operator:
	
	[Error executing program execflags/shannon/configs/configVarFile]
	[Error executing program execflags/shannon/configs/configVarFileBadEnum]
	[Error executing program execflags/shannon/configs/configVarFileGoodEnum]
	[Error executing program execflags/shannon/configs/configVarFileStrings]
	[Error executing program memory/shannon/configVarFile]
	
	Improved support for user constructors.  User-defined default
	constructors, created as per the Spec by naming the constructor
	'initialize,' are now supported similar to how the automatically
	created default constructor is supported.  The default constructor for
	a class is now defined with formal parameters taking the same names as
	the fields in that class and put in the order in which the fields were
	declared.  They all have default values equal to the initialization
	given to the field or, if none is given, to the default value of the
	type of the field.  The default constructor of a class is defined with
	an empty body.
	
	This checkin implements the transformation that automatically inserts
	assignments from formal arguments to fields with the same name.  So,
	for example, a class with a user-defined constructor given by
	
	  class C {
	    var i : integer = 12;
	    function initialize(i : integer) { };
	  }
	
	would have the constructor automatically changed to
	
	    function initialize(i : integer) { this.i = i; };
	
	All constructors have an alloc function inserted at their beginning to
	a locally defined 'this' variable.  Additionally, a call to the
	ClassType's init function is made where the InitExprs for the fields
	live, and 'this' is returned.
	
	I think I left off default initialization of all the fields, though
	this should presumably take place by the InitExpr??
	
	Note there is no support for user-defined constructors other than the
	user-defined default constructor though this should be simple to fix
	by adding support for calling constructors of a different name:
	
	  var c : C = C.create();
	
	Added a FnSymbol pointer to ClassType::initFn that points to that
	class's init function.
	
	Moved BuildDefaultFunctions pass earlier in the compiler.  It is now
	done before scope resolution leading to a recode of the conditions
	with which we determine whether default functions should be created or
	not.  Refactored this determination code.  This move simplifies the
	creation of default functions substantially.
	
	Expanded insertAtHead and insertAtTail functions to allow a list of
	statements to be inserted at the head or tail of BlockStmts and
	FnSymbols.  Previously I'd expanded these to allow single statements
	to be inserted at the head or tail of BlockStmts and FnSymbols.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: stmt.h symbol.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/compiler/symtab/: codegenOne.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 
	                             preAnalysisHacks.cpp 
	                             scopeResolveSymbols.cpp 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

10/31/05 16:06:06 -- bradc

Log message:
	Moved the mailing of nightly regression tests from
	chapel_dev to chapel_cronmail -- a new alias designed
	to distinguish between human discussion and automated
	mailings for the purposes of filtering and archiving.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

10/31/05 16:37:32 -- deitz

Log message:
	Minor change to set InitExpr::type to be the init expression if no
	type is given between the : and the =.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         normalizeParsedAST.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 

---------------------------------------------------------------------------

11/01/05 09:57:06 -- deitz

Log message:
	Moved insertion of all InitExprs to PreAnalysisHacks pass before
	analysis.  This is a temporary setup so that we don't have to maintain
	InitExprs throughout the passes before analysis.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         normalizeParsedAST.cpp 
	chapel/compiler/traversals/: preAnalysisHacks.cpp 

---------------------------------------------------------------------------

11/01/05 09:58:47 -- deitz

Log message:
	Refactored code to determine whether a default function is required.
	
	Removed special cname for getters and setters.
	
	Fixed legalizeCName before code generation to handle all of the
	symbols that may show up in overloaded operators and removed
	unnecessary mangling of overloaded operators.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/compiler/symtab/: codegenOne.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp resolveSymbols.h 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

11/01/05 10:44:09 -- deitz

Log message:
	Added future test showing a difficulty with nil.

Added files:
	chapel/test/classes/deitz/: test_nil1.chpl test_nil1.future 
	                            test_nil1.good 

---------------------------------------------------------------------------

11/01/05 10:48:04 -- deitz

Log message:
	Added a 'more complicated' nil test. This one works.

Added files:
	chapel/test/classes/deitz/: test_nil2.chpl test_nil2.good 

---------------------------------------------------------------------------

11/01/05 13:29:59 -- deitz

Log message:
	Added include/runtime.h to contain pointers to things in the Chapel
	runtime context.  For example, I moved the ModuleSymbols prelude and
	fileModule here, and added a ModuleSymbol tupleModule.  I added a
	TypeSymbol htuple to point to _htuple in _chpl_tuple.  It turned out
	that using lookup for this before the 'use' expressions were processed
	was a problem.
	
	Removed InsertLiteralTemps.  I moved the functionality (which had
	nothing to do with literal temps) into NormalizeParsedAST, which makes
	sense because these are things that could happen during parsing, but
	are complicated, and PreAnalysisHacks.  Moved code for destructuring
	tuples and constructing tuple types into NormalizeParsedAST.  Moved
	special-casing of the # operator to handle append and prepend into
	PreAnalysisHacks.

Modified files:
	chapel/compiler/main/: Makefile.share passlist.cpp passlist.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         filesToAST.cpp filesToAST.h 
	                         normalizeParsedAST.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share collectASTS.cpp 
	                             preAnalysisHacks.cpp 
Added files:
	chapel/compiler/include/: runtime.h 
	chapel/compiler/main/: runtime.cpp 
Removed files:
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             insertLiteralTemps.h 

---------------------------------------------------------------------------

11/01/05 13:44:30 -- deitz

Log message:
	Moved the init field of a variable into its own assignment statement
	after the init expression if --use-init-expr is specified.

Modified files:
	chapel/compiler/traversals/: preAnalysisHacks.cpp 

---------------------------------------------------------------------------

11/02/05 16:03:18 -- deitz

Log message:
	Replaced usage of fake data class in homogeneous tuples, domains, and
	arrays with use of real data class (renamed _ddata to suggest that
	this is the dynamic data block class used for 1D vectors).  John, I
	added a pragma "data block" to the field _elt to indicate that it is
	storing a block of elements rather than just one.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_htuple.chpl 
	                          prelude.chpl 
	chapel/test/arrays/deitz/: new_class_trial1.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/domains/roxana/helper/: test_hash_table2.chpl 
	                                    test_hash_table3.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
	                                         test_datablock3.chpl 

---------------------------------------------------------------------------

11/02/05 16:06:40 -- deitz

Log message:
	Added decent working 2D array test case (which relies on hacked
	support for 2D array indexing).

Added files:
	chapel/test/arrays/deitz/: test_array_2Dc.chpl 
	                           test_array_2Dc.good 

---------------------------------------------------------------------------

11/02/05 16:41:51 -- deitz

Log message:
	Removed the future for jacobi.chpl!!
	
	Increased the size of arrays so that they can now hold up to 128
	elements.
	
	Added a write function for arrays that currently prints an error.
	
	Changed the domain initialization syntax in the jacobi test case so
	that instead of writing:
	
	  var BigR : domain(2) = (0..n+1, 0..n+1);
	
	we write
	
	  var BigR : domain(2) = [0..n+1, 0..n+1];
	
	which is not the mandatory way of initializing domains.  That is the
	only change I made to this test.
	
	Note that arrays are still limited to 2D but we're in position to
	change this whenever the mood strikes.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/: jacobi.chpl 
Removed files:
	chapel/test/arrays/deitz/: jacobi.future 

---------------------------------------------------------------------------

11/02/05 17:42:53 -- jplevyak

Log message:
	Remove (dead) Index type.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/modules/standard/: prelude.chpl 

---------------------------------------------------------------------------

11/03/05 07:27:01 -- jplevyak

Log message:
	Fixup line numbers related to changes in prelude.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

11/04/05 16:18:30 -- shannon

Log message:
	Improved error reporting with the addition of the 'strerror'
	function.  Added the fread function for integers, floats, strings,
	and booleans, as well as a bunch of tests.  Updated the expected
	output of some tests.

Modified files:
	chapel/compiler/traversals/: specializeCallExprs.cpp 
	chapel/modules/standard/: _chpl_file.chpl prelude.chpl 
	chapel/runtime/include/: chplio.h stdchpl.h 
	chapel/runtime/src/: chplio.c config.c 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/file/: .cvsignore fwriteIntUnopenedFile.good 
	                         unableToOpenFile.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/types/file/: freadBoolean.chpl freadBoolean.good 
	                         freadBoolean.txt freadIntFailed.chpl 
	                         freadIntFailed.good freadIntFloat.chpl 
	                         freadIntFloat.good freadIntFloat.txt 
	                         freadIntUnopenedFile.chpl 
	                         freadIntUnopenedFile.good 
	                         freadNoFloat.chpl freadNoFloat.good 
	                         freadNoFloat.txt freadNoInt.chpl 
	                         freadNoInt.good freadNoInt.txt 
	                         freadNotABoolean.chpl 
	                         freadNotABoolean.good 
	                         freadNotABoolean.txt freadString.chpl 
	                         freadString.good freadString.txt 
	                         fwriteIntFailed.chpl 
	                         fwriteIntFailed.good 
	                         fwriteIntFailed.txt invalidMode.chpl 
	                         invalidMode.good 

---------------------------------------------------------------------------

11/04/05 16:58:37 -- deitz

Log message:
	Changed how strings are copied so that we always malloc new memory
	rather than trying to realloc it sometimes.  This introduces more
	memory leaks in the runtime pertaining to strings.  There were already
	memory leaks with strings declared within functions.
	
	This fixes the valgrind regressions.

Modified files:
	chapel/runtime/src/: chpltypes.c 

---------------------------------------------------------------------------

11/04/05 17:01:49 -- deitz

Log message:
	Improved the -b/--no-infer flag to handle instantiating functions and
	types.  It does not work with tuples yet because of literal types.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp 

---------------------------------------------------------------------------

11/04/05 17:23:24 -- deitz

Log message:
	Fixed minor bug in -b function resolution code.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

11/07/05 12:55:54 -- bradc

Log message:
	Renamed local symbols named "stdout", as they were
	causing problems for the compilation of the compiler
	on cygwin.  Called them "chplStdout" for now instead.

Modified files:
	chapel/compiler/traversals/: specializeCallExprs.cpp 

---------------------------------------------------------------------------

11/07/05 14:55:15 -- deitz

Log message:
	Made default to isConst() method return false rather than true.
	
	Updated dispatchParents on class cloning if --no-infer is used.
	
	Added special _move function for non-overloaded assignment with
	--no-infer until we have non-overloaded assignment in the compiler.
	
	Improved --no-infer function resolution.  It still doesn't work with
	tuples or param instantiation, but it now works on codes
	out-of-the-box.
	
	Disabled EliminateReturns on constructors.
	
	Fixed bugs in a few type variable class tests.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         buildDefaultFunctions.cpp 
	                         functionResolution.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl prelude.chpl 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
	                                         test_typevar_class1.chpl 
	                                         test_typevar_class2.chpl 
	                                         test_typevar_class3.chpl 
	                                         test_typevar_class4.chpl 

---------------------------------------------------------------------------

11/07/05 15:01:09 -- deitz

Log message:
	Added a few class with string fields tests.  I added these a while ago
	when we were dealing with the string initialization problems.  They
	both currently work.

Added files:
	chapel/test/classes/deitz/: test_string_field.chpl 
	                            test_string_field.good 
	                            test_string_field2.chpl 
	                            test_string_field2.good 

---------------------------------------------------------------------------

11/09/05 13:44:24 -- deitz

Log message:
	Fixed error in output file.  I don't know why it was working before.
	This output file looks wrong to me.

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table3.good 

---------------------------------------------------------------------------

11/09/05 16:58:07 -- deitz

Log message:
	Improved effectiveness of --no-infer function resolution so that it
	now works on the sequence test cases.
	
	Fixed a bug in isParam() function in which literals were not
	considered params.
	
	Implemented a default wrapper cache so that multiple identical default
	wrappers are not created.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: runtime.h symbol.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         buildDefaultFunctions.cpp 
	                         filesToAST.cpp functionResolution.cpp 
	                         normalizeParsedAST.cpp 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             findUnknownTypes.cpp 
	                             findUnknownTypes.h 
	                             inlineFunctions.cpp 
	                             insertVariableInitializations.cpp 
	                             preAnalysisHacks.cpp 
	                             processImportExprs.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

11/16/05 12:39:50 -- jplevyak

Log message:
	Changes to get compilation working with GCC 4.0.X.

Modified files:
	chapel/compiler/include/: vec.h 
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

11/16/05 13:32:54 -- jplevyak

Log message:
	fix format warning

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

11/16/05 13:35:01 -- jplevyak

Log message:
	Change the way compilation on 64 bit linux machines works.
	
	As per our earlier discussions, we now default to 64 bit compilation
	on 64 bit machines (running 64 bit versions of the OS).
	
	To compile 32-bit executables on 64-bit machines, use the option
	
	CHPL_BUILD_X86_64_AS_32=1

Modified files:
	chapel/third-party/boehmgc/: Makefile 
	chapel/util/: platform 
Added files:
	chapel/make/: Makefile.linux64_32 

---------------------------------------------------------------------------

11/16/05 14:56:01 -- jplevyak

Log message:
	Updated the compiler/Tasks file as per Brad's mail.
	There are now no priorities though generally more
	important things are at the top.  As before, grab things
	by adding your name in paren's after the * and indicate
	that something is complete by changing the * to a X.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

11/16/05 19:21:32 -- jplevyak

Log message:
	Remove format mismatch warning

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

11/17/05 13:49:00 -- jplevyak

Log message:
	Updated Task list
	Changed for_alist to be reentrant.
	Maintained the old versions as for_alist_nonreentrant.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/include/: alist.h 

---------------------------------------------------------------------------

11/17/05 19:01:12 -- jplevyak

Log message:
	Complete reentrant for_alist macro

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

11/18/05 12:55:21 -- deitz

Log message:
	Marked task to change passlist to a list of function pointers.
	Moved finished task to bottom.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

11/18/05 15:04:49 -- jplevyak

Log message:
	remove dead code

Modified files:
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

11/18/05 17:30:56 -- jplevyak

Log message:
	New version (3.0.X) of valgrind support x86_64

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

11/18/05 17:32:12 -- deitz

Log message:
	Changed passes to functions.  The pass class still exists, but the
	pass is called by a function which in many cases constructs a
	Traversal or SymtabTraversal class and then calls its run function.
	
	Did a bit of work to maintain the two ways the passlist is handled,
	either as an array or parsed by the compiler.  The latter mechanism
	handles changing the passlist without relinking.  It requires the
	registration of passes which would otherwise not be necessary.
	
	Removed the extra args field in the passlist.  Passes are simply
	functions that take no arguments.  This args field was not used and is
	less necessary now that passes use a lighter weight mechanism.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/include/: driver.h symtab.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	                       runpasses.cpp runpasses.h 
	chapel/compiler/passes/: Makefile.share applyGettersSetters.cpp 
	                         applyGettersSetters.h 
	                         buildDefaultFunctions.cpp 
	                         buildDefaultFunctions.h codegen.cpp 
	                         codegen.h createEntryPoint.cpp 
	                         createEntryPoint.h filesToAST.cpp 
	                         filesToAST.h functionResolution.cpp 
	                         functionResolution.h 
	                         normalizeParsedAST.cpp 
	                         normalizeParsedAST.h pass.cpp pass.h 
	                         preAnalysisCleanup.cpp 
	                         preAnalysisCleanup.h printProgram.cpp 
	                         printProgram.h runAnalysis.cpp 
	                         runAnalysis.h semanticChecks.cpp 
	                         semanticChecks.h 
	chapel/compiler/symtab/: codegenOne.cpp codegenOne.h 
	                         copyPropagation.cpp copyPropagation.h 
	                         flatten.cpp flatten.h 
	                         insertDefaultInitVariables.cpp 
	                         insertDefaultInitVariables.h 
	                         insertOutParameterInitializations.cpp 
	                         insertOutParameterInitializations.h 
	                         normalizeFunctions.cpp 
	                         normalizeFunctions.h 
	                         postAnalysisCleanup.cpp 
	                         postAnalysisCleanup.h printSymtab.cpp 
	                         printSymtab.h reconstructIterators.cpp 
	                         reconstructIterators.h 
	                         removeDeadSymbols.cpp 
	                         removeDeadSymbols.h resolveTypes.cpp 
	                         resolveTypes.h symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             buildClassHierarchy.cpp 
	                             buildClassHierarchy.h 
	                             buildLValueFunctions.cpp 
	                             buildLValueFunctions.h 
	                             createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	                             createNestedFuncIterators.cpp 
	                             createNestedFuncIterators.h 
	                             eliminateReturns.cpp 
	                             eliminateReturns.h 
	                             findUnknownTypes.cpp 
	                             findUnknownTypes.h fixup.cpp 
	                             fixup.h getstuff.cpp getstuff.h 
	                             htmlview.cpp htmlview.h 
	                             inlineFunctions.cpp 
	                             inlineFunctions.h 
	                             insertFunctionTemps.cpp 
	                             insertFunctionTemps.h 
	                             insertThisParameters.cpp 
	                             insertThisParameters.h 
	                             insertVariableInitializations.cpp 
	                             insertVariableInitializations.h 
	                             instantiate.cpp instantiate.h 
	                             preAnalysisHacks.cpp 
	                             preAnalysisHacks.h printAST.cpp 
	                             printAST.h processImportExprs.cpp 
	                             processImportExprs.h 
	                             processParameters.cpp 
	                             processParameters.h 
	                             removeNamedParameters.cpp 
	                             removeNamedParameters.h 
	                             removeNestedFunctions.cpp 
	                             removeNestedFunctions.h 
	                             resolveSymbols.cpp resolveSymbols.h 
	                             scopeResolveGotos.cpp 
	                             scopeResolveGotos.h 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	                             specializeCallExprs.cpp 
	                             specializeCallExprs.h 
	                             transformLetExprs.cpp 
	                             transformLetExprs.h verify.cpp 
	                             verify.h view.cpp view.h 
	chapel/test/compflags/bradc/passlist/: passlist.h test.good 
Removed files:
	chapel/compiler/passes/: buildBinary.cpp buildBinary.h 
	                         renameCSymbols.cpp renameCSymbols.h 
	chapel/compiler/traversals/: checkIDs.cpp checkIDs.h 
	                             checkTypeInfo.cpp checkTypeInfo.h 
	                             findUnresolvedSymbols.cpp 
	                             findUnresolvedSymbols.h 
	                             testGetStuff.cpp testGetStuff.h 

---------------------------------------------------------------------------

11/20/05 18:54:33 -- jplevyak

Log message:
	Fix valgrind runs?!?!
	Tried to remove the "linux32" prefix for runs on 64 bit linux
	as it isn't required any more, but I forgot to remove the
	use the the variable.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

11/21/05 17:16:32 -- deitz

Log message:
	Refactored scope resolution pass so that it resolves gotos (started)
	and applies an implicit 'this' MemberAccess where necessary.  Note
	that if a symbol is resolved, it will not get an implicit 'this'
	MemberAccess anymore.  Thus I have changed the automatically generated
	setters to have UnresolvedSymbols when they are generated.
	
	Made it easier to create MemberAccesses by overloading the constructor
	as has been done for other Exprs.  You can now create a MemberAccess
	with a Symbol baseExpr and the SymExpr is put around it.  You can
	create the member symbol with a string and it is made into an
	UnresolvedSymbol.  Updated code where I could make it simpler.
	
	Implementation question: Now that we use getters and setters, why do
	we use the member_type and member_offset fields in the MemberAccess?
	Why do we generate the getters and setters with casts rather than
	simply accessess?  I gather this is a tradeoff optimizing less dynamic
	dispatch on getters and setters at the expense of using static casts
	in the generated code.  Is this so?
	
	Implemented collect_asts_postorder to be like collect_asts but to
	return the Vec<BaseAST*> gotten with a postorder traversal of the AST.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: astutil.h baseAST.h expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: Makefile.share 
	                         buildDefaultFunctions.cpp 
	                         normalizeParsedAST.cpp 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	chapel/compiler/traversals/: Makefile.share collectASTS.cpp 
	                             collectASTS.h preAnalysisHacks.cpp 
	chapel/test/classes/bradc/: weirdinit.good 
	chapel/test/classes/deitz/: test_method_call2.good 
	chapel/test/trivial/bradc/: defaultinit1a.good 
	                            initvarsamename.good 
	                            initvarsamename2.good vardecls.good 
	                            vardecls1a.good 
	chapel/test/trivial/deitz/: test_config_use_before_decl.good 
	                            test_scope2.good 
	                            test_use_before_def1.good 
	                            test_use_before_def2.good 
	                            test_use_before_def3.good 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Removed files:
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             scopeResolveGotos.cpp 
	                             scopeResolveGotos.h 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 

---------------------------------------------------------------------------

11/21/05 17:24:08 -- deitz

Log message:
	Added a future for a bug with label resolution code having to do with
	nested loops and breaks or continues.  Fix coming soon.

Added files:
	chapel/test/trivial/deitz/: test_break1.chpl test_break1.future 
	                            test_break1.good 

---------------------------------------------------------------------------

11/22/05 09:50:35 -- deitz

Log message:
	Forgot to commit these new files yesterday.

Added files:
	chapel/compiler/include/: passes.h 
	chapel/compiler/passes/: scopeResolve.cpp 

---------------------------------------------------------------------------

11/22/05 11:02:35 -- bradc

Log message:
	It seems that when refactoring mail-related code in
	the nightly regression tester, I broke the script's
	ability to mail out an error report when the build
	failed.  This should fix that bug.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

11/22/05 13:21:59 -- deitz

Log message:
	Fixed and unified goto resolution with scope resolution.
	
	This does not fix test/trivial/deitz/test_break1.chpl because the
	break statements in nested loops interact poorly with the nested
	function transformation.
	
	Added a few constructors for LabelStmt.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: scopeResolve.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 

---------------------------------------------------------------------------

11/22/05 17:10:17 -- deitz

Log message:
	Added a new pass called cleanup that unifies a bunch of early passes
	that basically fix up the parsed code.  Eventually there will be a
	cleanup function that can be called on code that is built during
	compilation.
	
	Cleaned up transform of methods to functions.  The method used to be
	copied when it was moved outside of the class.  It is now simply
	moved.
	
	Improved inheritance copy to just copy the fields of a class into a
	class that inherits it.  This used to rely on pass ordering to just do
	the fields.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: passes.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	                         buildDefaultFunctions.cpp 
	                         buildDefaultFunctions.h 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassHierarchy.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
Added files:
	chapel/compiler/passes/: cleanup.cpp 
Removed files:
	chapel/compiler/passes/: normalizeParsedAST.cpp 
	                         normalizeParsedAST.h 
	chapel/compiler/symtab/: flatten.cpp flatten.h 
	chapel/compiler/traversals/: insertThisParameters.cpp 
	                             insertThisParameters.h 

---------------------------------------------------------------------------

11/23/05 15:13:40 -- deitz

Log message:
	Added a new development flag --use-class-init which puts the DefExprs
	of the fields of a class into the class's init function which is
	called by the constructor.  Got this working to completion with the
	--no-infer flag.  Open questions:
	
	1. What should getters and setters look like now?
	2. What needs to be cleaned up to get this working better?
	
	Removed InitExpr and flag --use-init-expr.
	
	Made some superficial improvements to get rid of extra curly braces in
	conditional statements, etc.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h driver.h expr.h symbol.h 
	                          type.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp 
	                         functionResolution.cpp scopeResolve.cpp 
	chapel/compiler/symtab/: codegenOne.cpp 
	chapel/compiler/traversals/: fixup.cpp htmlview.cpp 
	                             preAnalysisHacks.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

11/28/05 13:30:52 -- deitz

Log message:
	Started to work on cleaning up the series of passes after scope
	resolution that put the AST into a normalized form.  Folded
	ReconstructIterators pass into a new normalize pass.
	
	Added overloaded ReturnStmt constructors for convenience.  No
	arguments now creates a return statement that returns nothing.  A
	symbol or a string as the first argument returns that symbol or an
	unresolved symbol with name equal to the string.  Cleaned up uses.
	
	Added "seq" class to runtime.h as TypeSymbol* chpl_seq.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: passes.h runtime.h stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h runtime.cpp 
	chapel/compiler/passes/: Makefile.share 
	                         buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp filesToAST.cpp 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
Removed files:
	chapel/compiler/symtab/: reconstructIterators.cpp 
	                         reconstructIterators.h 

---------------------------------------------------------------------------

11/28/05 13:37:12 -- deitz

Log message:
	Made some small improvements to code generation to tighten it up.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: processImportExprs.cpp 

---------------------------------------------------------------------------

11/28/05 14:24:35 -- deitz

Log message:
	Forgot to checkin normalize.cpp file with last checkin.

Added files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

11/28/05 16:19:31 -- deitz

Log message:
	Folded a few more small normalizing passes into the new normalize pass.
	
	Renamed the semanticCheck passes to check_parsed, check_normalized,
	and check_resolved to indicate that they are checking the AST for user
	errors after parse, normalize, and analysis.

Modified files:
	chapel/compiler/include/: passes.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: normalize.cpp semanticChecks.cpp 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/passes/: semanticChecks.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertDefaultInitVariables.h 
	                         insertOutParameterInitializations.cpp 
	                         insertOutParameterInitializations.h 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             buildLValueFunctions.h 

---------------------------------------------------------------------------

11/28/05 16:45:13 -- jplevyak

Log message:
	Fix compilation warning (parens around assignment expression)
	Fix error message capitalization.
	Improve if1 codegen by removing unnecessary intermediates.
	Add in code (#if'd out) to handle the old DefInit, but which
	I want to use for the new DefExpr.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: if1.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

11/28/05 17:28:12 -- deitz

Log message:
	Reworked and greatly simplified the eliminateReturns traversal, and
	then folded it into normalization.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             eliminateReturns.h 

---------------------------------------------------------------------------

11/28/05 17:35:07 -- deitz

Log message:
	Factored error checking of a function that sometimes returns values
	and sometimes doesn't out of normalize_returns and into check_parsed.
	
	Added a test of this error.

Modified files:
	chapel/compiler/passes/: normalize.cpp semanticChecks.cpp 
Added files:
	chapel/test/functions/deitz/: test_return2.chpl 
	                              test_return2.good 

---------------------------------------------------------------------------

11/28/05 18:49:09 -- shannon

Log message:
	Added the ability to read enums from a file, and removed
	the kludge.  Unified the error messages produced in the
	_chpl_file module and updated the affected test output.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/compiler/traversals/: specializeCallExprs.cpp 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/memory/shannon/: configVarFile.good 
	                             memstatPrint.good 
	                             printFinalMemStat.good 
	chapel/test/types/file/: closeStdin.good closedWithoutOpen.good 
	                         freadIntFailed.good 
	                         freadIntUnopenedFile.good 
	                         freadNoFloat.good freadNoInt.good 
	                         freadNotABoolean.good 
	                         fwriteIntFailed.good 
	                         fwriteIntUnopenedFile.good 
	                         invalidMode.good openStdout.good 

---------------------------------------------------------------------------

11/28/05 21:02:01 -- jplevyak

Log message:
	Fix some compilation warnings for gcc 4.0.X

Modified files:
	chapel/compiler/ifa/: cg.cpp 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: findUnknownTypes.cpp 

---------------------------------------------------------------------------

11/29/05 09:34:32 -- jplevyak

Log message:
	Fix .good for recent changes (don't know which ones).

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

11/29/05 10:14:52 -- deitz

Log message:
	Forgot to checkin updates to these tests.

Modified files:
	chapel/test/flowanalysis/newast/: multiple_return.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

11/29/05 10:31:56 -- shannon

Log message:
	Update test output.

Modified files:
	chapel/test/types/file/: unableToOpenFile.good 

---------------------------------------------------------------------------

11/29/05 11:38:26 -- deitz

Log message:
	Tagged a bunch of tasks I'm working on.

Modified files:
	chapel/compiler/: Tasks 

---------------------------------------------------------------------------

11/29/05 13:33:00 -- bradc

Log message:
	After thrashing back and forth, I think I finally have the
	regression script so that it will mail when failures occur
	and also generate our normal subject line when things
	succeed.  Sorry for blowing that away the past week or so...

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

11/29/05 13:51:48 -- deitz

Log message:
	Moved insertion of formal temps (in normalizeFunctions), insertion of
	constructors for types (in specializeCallExprs), and normalization of
	for-loops (in preAnalysisHacks) to normalize.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: preAnalysisHacks.cpp 
	                             preAnalysisHacks.h 
	                             specializeCallExprs.cpp 
Removed files:
	chapel/compiler/symtab/: normalizeFunctions.cpp 
	                         normalizeFunctions.h 

---------------------------------------------------------------------------

11/29/05 15:09:50 -- jplevyak

Log message:
	Add an option --nostdincs which doesn't load the standard modules
	so that small test cases can be run without loading in all the
	module initialization code.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp filesToAST.cpp 
	chapel/compiler/traversals/: processImportExprs.cpp 

---------------------------------------------------------------------------

11/29/05 15:43:00 -- jplevyak

Log message:
	Permit arbitrary size string constants to be printed out.

Modified files:
	chapel/compiler/ifa/: sym.cpp 

---------------------------------------------------------------------------

11/29/05 16:22:25 -- deitz

Log message:
	Eliminated +=, -=, etc., replacing it with ... = ... + ....  In
	preparation for making a better distinction between ops and calls.
	
	Removed copyFrom pointer which maintained a chain of copy pointers to
	ASTS as they were copied.
	
	Renamed OP_GETSNORM to OP_GETS because of the removal of all the other
	OP_GETSOPS.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp 
	                         functionResolution.cpp normalize.cpp 
	chapel/compiler/traversals/: htmlview.cpp inlineFunctions.cpp 
	                             insertFunctionTemps.cpp 
	                             insertVariableInitializations.cpp 
	                             preAnalysisHacks.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             resolveSymbols.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

11/29/05 16:48:48 -- bradc

Log message:
	Checking in some changes to MG code that I made in
	preparation for the LaR workshop.

Modified files:
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl 

---------------------------------------------------------------------------

11/29/05 16:50:32 -- bradc

Log message:
	A small fix to the nightly token counting script.

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

11/30/05 12:48:36 -- shannon

Log message:
	Added future test for failing string comparison due
	to void return type.

Added files:
	chapel/test/types/string/shannon/: .cvsignore returnsVoid.chpl 
	                                   returnsVoid.future 
	                                   returnsVoid.good 

---------------------------------------------------------------------------

11/30/05 14:39:11 -- jplevyak

Log message:
	Optimize function contour sharing a bit.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

11/30/05 14:46:44 -- deitz

Log message:
	NOTE TWO NEW REGRESSIONS:
	  classes/deitz/test_class_construct1
	  types/type_variables/deitz/test_instantiate_construct1
	
	This change makes OP_GETS mean assignment without overloading (MOVE).
	Otherwise the unresolved symbol "=" means potentially overloaded.  Use
	new CallExpr(OP_GETS, ...) or new CallExpr("=", ...).
	
	This change does the same thing with all operators.  So
	CallExpr(OP_PLUS, ...) differs from CallExpr("+", ...).  All functions
	are now parsed as CallExpr("+", ...) to allow for the potential of
	overloaded operators.
	
	Note that currently setters and constructors are built with OP_GETS,
	thus not allowing overloaded assignment.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: expr.h runtime.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         buildDefaultFunctions.cpp cleanup.cpp 
	                         filesToAST.cpp functionResolution.cpp 
	                         normalize.cpp semanticChecks.cpp 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	                             preAnalysisHacks.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

11/30/05 17:50:14 -- deitz

Log message:
	Initial coding for temporary insertion normalization, but it is disabled.
	
	Removed VAR_REF as it is no longer used.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/01/05 09:09:09 -- jplevyak

Log message:
	Add id's to AEdges and then sort them as part of contour
	splitting to eliminate another potential source of non-determinism.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h 

---------------------------------------------------------------------------

12/01/05 09:10:10 -- jplevyak

Log message:
	Add function map_set_add().

Modified files:
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

12/01/05 10:10:55 -- deitz

Log message:
	With this checkin, DefExpr::init is no longer used for the default
	expression for ArgSymbols.  Instead ArgSymbol::defaultExpr is used.
	This means that at this time, DefExpr::init is only used for
	initializing VarSymbols.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp normalize.cpp 
	chapel/compiler/symtab/: postAnalysisCleanup.cpp 
	                         postAnalysisCleanup.h symtab.cpp 

---------------------------------------------------------------------------

12/01/05 10:16:45 -- shannon

Log message:
	Added the "pure_return" for the boolean for the string
	equals and not-equals comparisons in the prelude, per
	John's suggestion.

Modified files:
	chapel/modules/standard/: prelude.chpl 

---------------------------------------------------------------------------

12/01/05 10:18:37 -- shannon

Log message:
	Removed a future, and added another test for
	string comparison.

Modified files:
	chapel/test/types/string/shannon/: returnsVoid.chpl 
	                                   returnsVoid.good 
Added files:
	chapel/test/types/string/shannon/: stringEquals.chpl 
Removed files:
	chapel/test/types/string/shannon/: returnsVoid.future 

---------------------------------------------------------------------------

12/01/05 10:26:27 -- shannon

Log message:
	Woops, forgot this on the last commit.

Added files:
	chapel/test/types/string/shannon/: stringEquals.good 

---------------------------------------------------------------------------

12/01/05 11:32:16 -- jplevyak

Log message:
	Because of a conflict between the "cleanup()" used by
	Brad for the GDB interface and the new "cleanup()" introduced
	by Steve, the gdb interface was broken (at least on x86_64).
	Renamed "cleanup()" in misc.cpp cleanup_for_exit() and made
	it global so that the linker will catch any future conflicts.

Modified files:
	chapel/compiler/util/: files.cpp misc.cpp 

---------------------------------------------------------------------------

12/01/05 12:46:14 -- jplevyak

Log message:
	Support for calling multiple clones of a single function at
	call sites.  This is a prerequisite for support of dynamic dispatch.

Modified files:
	chapel/compiler/ifa/: clone.cpp fa.cpp fa.h 
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

12/01/05 14:23:29 -- deitz

Log message:
	Turned functions nested in methods into nested methods.  Is this right?
	
	Added a new pass resolve_analyzed to unify all the little resolution
	passes after analysis.  Put, but did not delete, RemoveDeadSymbols in
	there.
	
	Created a separate function for user constructor code so that it is
	not special-cased like the other code in the constructor.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: passes.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share cleanup.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp resolveTypes.h 
Added files:
	chapel/compiler/passes/: resolveAnalyzed.cpp 
	chapel/test/classes/deitz/: test_nested_method.chpl 
	                            test_nested_method.good 

---------------------------------------------------------------------------

12/01/05 15:46:24 -- deitz

Log message:
	Folded specializeCallExprs into normalize and simplified.
	
	Removed AList::popHead() which is unnecessary and seldom used.  It
	also failed to use fixup making it dangerous.
	
	Added "bool CallExpr::isNamed(char*)" to test the name of a call.
	
	Put chpl_stdin, chpl_stdout, and chpl_stderr in runtime.h so they can
	be accessed without a lookup.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: alist.h expr.h runtime.h 
	chapel/compiler/main/: passlist.cpp passlist.h runtime.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: filesToAST.cpp normalize.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: enum.good 
Removed files:
	chapel/compiler/traversals/: specializeCallExprs.cpp 
	                             specializeCallExprs.h 

---------------------------------------------------------------------------

12/01/05 17:02:43 -- deitz

Log message:
	Removed unused pass removeDeadSymbols.
	
	Folded small pass postAnalysisCleanup into resolve_analyzed.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: resolveAnalyzed.cpp 
	chapel/compiler/symtab/: Makefile.share 
Removed files:
	chapel/compiler/symtab/: postAnalysisCleanup.cpp 
	                         postAnalysisCleanup.h 
	                         removeDeadSymbols.cpp 
	                         removeDeadSymbols.h 

---------------------------------------------------------------------------

12/01/05 17:37:15 -- jplevyak

Log message:
	Initial Interpreter Framework.

Modified files:
	chapel/compiler/include/: driver.h map.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
Added files:
	chapel/compiler/passes/: runInterpreter.cpp runInterpreter.h 

---------------------------------------------------------------------------

12/02/05 08:44:29 -- jplevyak

Log message:
	Fix .good file (don't know why)

Modified files:
	chapel/test/flowanalysis/newast/: enum.good 

---------------------------------------------------------------------------

12/02/05 10:19:48 -- jplevyak

Log message:
	Little work on interpreter.
	Fixed "do...while" loop IF1 translation (handle isWhileDo flag).
	Removed stale prototype.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: sym.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/02/05 10:25:12 -- jplevyak

Log message:
	rename "debug_level" to "trace_level" to better match what it does

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/02/05 15:16:37 -- deitz

Log message:
	Folded preAnalysisHacks into the normalization pass, and simplified.
	
	Collapsed type resolution of exprType field into a single function in
	the normalization pass.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: normalize.cpp scopeResolve.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Removed files:
	chapel/compiler/traversals/: preAnalysisHacks.cpp 
	                             preAnalysisHacks.h 

---------------------------------------------------------------------------

12/02/05 16:03:53 -- jplevyak

Log message:
	improve debugging output of constants for -dF

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

12/02/05 20:03:31 -- deitz

Log message:
	Cleaned code relating to getFunction() and getModule() which now work
	on any BaseAST, independently of the Symboltable.
	
	Removed some unnecessary code from symtab.h, such as continueFnDef, etc.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp stmt.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symscope.h 
	                          symtab.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         createEntryPoint.cpp scopeResolve.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: removeNestedFunctions.cpp 
	chapel/test/flowanalysis/newast/: enum.good sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

12/02/05 20:05:46 -- deitz

Log message:
	Replaced Symboltable::dump() etc. which used a SymtabTraversal.
	SymScope::dump() prints out the contents of the scope and all nested
	scopes.  SymScope::dump_only() prints out the contents of the scope
	but not its nested scopes.  I also made some improvements to them
	possible because of new AST features.
	
	Folded ApplyGettersSetters into normalization pass, completing the
	normalization pass.  I have a little more cleanup to make it callable
	on newly created AST.
	
	Folded CodegenOne pass, a pass that codegened the header, into
	codegen, in a function called codegen_header.  This fixes the
	--no-codegen flag which used to not suppress code generation of the
	header.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: driver.h symscope.h symtab.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share codegen.cpp 
	                         normalize.cpp 
	chapel/compiler/symtab/: Makefile.share symscope.cpp symtab.cpp 
Removed files:
	chapel/compiler/passes/: applyGettersSetters.cpp 
	                         applyGettersSetters.h 
	chapel/compiler/symtab/: codegenOne.cpp codegenOne.h 
	                         printSymtab.cpp printSymtab.h 

---------------------------------------------------------------------------

12/05/05 10:20:40 -- deitz

Log message:
	Fixed insertion of SumTypes so that they have a DefExpr.
	
	Folded resolveTypes into resolveAnalyzed.
	
	Changed CreateConfigVarTable into a Traversal from a SymtabTraversal.
	
	Turned ClearTypes traversal into a simple function clear_type_info.
	This is used on cloned functions.
	
	Removed verification code to make sure symboltable traversal traverses
	same symbols as ast traversal.
	
	Removed symboltable traversal mechanism.
	
	Updated task list.

Modified files:
	chapel/compiler/: Tasks 
	chapel/compiler/AST/: astutil.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h astutil.h baseAST.h passes.h 
	                          symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share codegen.cpp 
	                         resolveAnalyzed.cpp semanticChecks.cpp 
	chapel/compiler/symtab/: Makefile.share symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             createConfigVarTable.cpp 
	                             createConfigVarTable.h verify.cpp 
	                             verify.h 
Added files:
	chapel/compiler/passes/: copy_propagation.cpp 
Removed files:
	chapel/compiler/symtab/: collectSymbols.cpp collectSymbols.h 
	                         copyPropagation.cpp copyPropagation.h 
	                         resolveTypes.cpp resolveTypes.h 
	                         symtabTraversal.cpp symtabTraversal.h 
	chapel/compiler/traversals/: clearTypes.cpp clearTypes.h 
	                             collectASTS.cpp collectASTS.h 
	                             getstuff.cpp getstuff.h 

---------------------------------------------------------------------------

12/05/05 13:41:51 -- shannon

Log message:
	Added the ability to read complex variables from a file.
	Added a test and updated expected output for affected tests.

Modified files:
	chapel/modules/standard/: _chpl_complex.chpl prelude.chpl 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/types/file/: freadComplex.chpl freadComplex.good 
	                         freadComplex.txt 

---------------------------------------------------------------------------

12/05/05 14:49:22 -- shannon

Log message:
	Updated test output changed by last commit.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

12/05/05 15:07:52 -- jplevyak

Log message:
	Fix a bug in preAnalysisCleanup which could result in a endless loop.
	Some work on the new nil semantics: removed old hack for uninitialized
	  variables.
	Futurized test of uninitialized variable and OUT parameter.

Modified files:
	chapel/compiler/ifa/: fa.cpp pattern.cpp 
	chapel/compiler/passes/: preAnalysisCleanup.cpp 
Added files:
	chapel/test/functions/jplevyak/: intent-9.future 

---------------------------------------------------------------------------

12/05/05 15:13:02 -- shannon

Log message:
	Added a future test for passing a class data member
	as an inout argument to a function.  The value set
	in the function is not returned.

Added files:
	chapel/test/classes/shannon/: inoutClassDataMember.chpl 
	                              inoutClassDataMember.future 
	                              inoutClassDataMember.good 

---------------------------------------------------------------------------

12/06/05 10:34:36 -- deitz

Log message:
	Added working nested function test.

Added files:
	chapel/test/functions/deitz/nested/: test_nested7.chpl 
	                                     test_nested7.good 

---------------------------------------------------------------------------

12/06/05 10:58:46 -- jplevyak

Log message:
	Fixed methods with no parens so that they can be called without parens.
	
	It is the case that c.f() where function C::f { ... }
	is an error, but it is not yet the case that
	c.g where function C::g() is an error.  This last case is a bit
	tricky as there are a number of places in the compiler where
	we are just calling methods (which are defined the normal way
	-- with parens) using
	
	  new ExprStmt(new CallExpr(fnname, _mt, _this))
	
	instead of
	
	  new ExprStmt(new CallExpr(new CallExpr(fnname, _mt, _this)))
	
	So I can't throw the error yet.  Working on it.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/arrays/deitz/: test_array_class_trial5a.chpl 
	                           test_array_class_trial5b.chpl 
	chapel/test/classes/deitz/: test_method_call2.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-1.chpl 
	chapel/test/trivial/preston/: curry.future 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/06/05 11:03:01 -- jplevyak

Log message:
	Tests for the correct zero arity behavior, including errors.

Modified files:
	chapel/test/functions/jplevyak/: zeroarity-bound-1.good 
Added files:
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.chpl 
	                                 zeroarity-bound-error-1.future 
	                                 zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.chpl 
	                                 zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

12/06/05 11:09:18 -- deitz

Log message:
	This checkin adds temporary insertion for all nested CallExprs.  It's
	many temporaries.  Currently all the temps are named _tmp, but the
	cname has a unique number to make it easier to debug.  I decided not
	to number the names mainly to keep the test output for the
	flowanalysis tests from changing all the time.  If this is a problem,
	we can change it.  An alternative is to number the tmp with the line
	number that is associated with the expression it is being inserted
	for.
	
	This checkin also pushes the removal of LetExprs up into the
	normalization phase by handling LetExprs as if they were nested
	functions with no arguments and inlining them immediately.
	
	Improved return normalization to not insert a Label and a Goto if the
	goto immediately precedes the label.
	
	Improved inlining by making it a function called inline_call and by
	allowing it to be called before nested functions are removed.
	
	Made pre-instantiation work in the presence of temporary insertion.
	
	Fixed the prelude functions that define write and read to actually
	return an integer.  The __primitive was not preceded by a return.
	
	Fixed a bug in the parsing of tuple types in which the inner types
	were not types.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	                         scopeResolve.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             inlineFunctions.h instantiate.cpp 
	                             removeNamedParameters.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  compSampler.good 
	                                  danglingelse.good 
	                                  equality_ops.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  pareninit.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good var.good 
	                                  var2.good whileLoop.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/06/05 11:35:01 -- shannon

Log message:
	Woops, my last commit broke the Sun build.  This
	should fix it.

Modified files:
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

12/06/05 12:43:05 -- deitz

Log message:
	Update test output with last change.

Modified files:
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

12/06/05 13:06:36 -- deitz

Log message:
	Defutured two working tests.

Removed files:
	chapel/test/types/seq/deitz/: test_seq_record1.future 
	chapel/test/types/tuple/jplevyak/: destruct-2.future 

---------------------------------------------------------------------------

12/06/05 13:41:49 -- deitz

Log message:
	Removed transformLetExprs pass as LetExprs are now handled earlier.
	Removed LetExpr Expr as they are inlined early on in compilation.
	
	Removed insertFunctionTemps pass as this is no longer necessary now
	that the AST has been normalized.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/compiler/traversals/: Makefile.share fixup.cpp 
Removed files:
	chapel/compiler/traversals/: insertFunctionTemps.cpp 
	                             insertFunctionTemps.h 
	                             transformLetExprs.cpp 
	                             transformLetExprs.h 

---------------------------------------------------------------------------

12/06/05 16:48:50 -- jplevyak

Log message:
	Fix compilation issue with gcc 4.0

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

12/06/05 16:57:58 -- deitz

Log message:
	Made some major simplifications to resolveSymbols now that we
	normalize the AST by inserting temporaries and applying the
	getter/setter transform.
	
	Added an error for when the compiler encounters unions and futurized
	three union tests that were sneaking by under a record implementation.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/classes/jplevyak/: union_type_hierarchy-1.future 
	                               union_type_hierarchy-2.future 
	                               union_type_hierarchy-3-error.future 

---------------------------------------------------------------------------

12/06/05 17:54:46 -- jplevyak

Log message:
	Correctly report an error when a member function defined with parens
	is called without parens.
	This required fixing several codes which construct calls of the
	  form c.x() as the inner CallExpr must now be PARTIAL_OK and
	  be surrounded with an outer CallExpr().

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp fa.h pattern.cpp pattern.h 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/test/trivial/preston/: boundfunction.chpl 

---------------------------------------------------------------------------

12/07/05 11:00:10 -- bradc

Log message:
	Converted chplio.c functions that return void and are
	prototyped in prelude.chpl back to returning void in
	the prelude rather than integer.

Modified files:
	chapel/modules/standard/: prelude.chpl 
Added files:
	chapel/test/trivial/preston/: .cvsignore 

---------------------------------------------------------------------------

12/07/05 11:13:45 -- deitz

Log message:
	Added --use-alloc compiler option which breaks up the DefExpr of
	VarSymbols into its constituent parts before analysis.  John, we
	should go over this first pass as to what things should look like.
	The code is in fix_def_expr in normalize.cpp.  I have left the init
	and exprType fields on the DefExpr of a VarSymbol, but I assume these
	can go away eventually.
	
	I'm not sure what to put for the _alloc function in the prelude, as
	far as the primitive and pragmas.  Also, I have currently used nil for
	variables that have no types and no inits.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	chapel/modules/standard/: prelude.chpl 

---------------------------------------------------------------------------

12/07/05 11:42:50 -- deitz

Log message:
	Fixed --use-alloc and fix_def_expr to handle variables that should not
	be initialized, such as this in class constructors.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/07/05 13:04:28 -- deitz

Log message:
	Removed class init function which we decided not to use.
	
	Robustified cleanup so that it can be called more than once and to
	remove duplicate code.  Set it up to run twice whenever it is called
	for testing.  This will allow me to speed it up easily later.
	
	Improved line number maintenance in cleanup and normalization.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: astutil.h type.h 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/07/05 13:43:42 -- shannon

Log message:
	Changed fclose() and strerror() in the prelude to use the pure_return
	primitive.  Updated the output of affected tests.

Modified files:
	chapel/modules/standard/: prelude.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/07/05 15:56:13 -- deitz

Log message:
	More improvements to --use-alloc for noDefaultInit.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: prelude.chpl 

---------------------------------------------------------------------------

12/07/05 20:08:55 -- jplevyak

Log message:
	Compute alignments for all variables so that we can compute offsets
	  of members.
	Fix offset and alignment compuatations for setters.
	Only use computed offsets for sum types, use C struct references
	  otherwise.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp builtin_symbols.h clone.cpp 
	                      if1.cpp if1.h sym.cpp sym.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

12/08/05 08:49:32 -- jplevyak

Log message:
	Fix compilation problem on linux64 (needed intptr_t cast)

Modified files:
	chapel/compiler/ifa/: sym.cpp 

---------------------------------------------------------------------------

12/08/05 09:02:44 -- deitz

Log message:
	Made --nostdincs still include _chpl_file.chpl.  Along with
	prelude.chpl, this module is necessary for core features like
	writeln(), so these modules are necessary for so many cases.  This
	gets many of the class and type variable tests working with this flag.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         filesToAST.cpp 
	chapel/compiler/traversals/: processImportExprs.cpp 

---------------------------------------------------------------------------

12/08/05 12:02:02 -- jplevyak

Log message:
	Remove special handling for type_variables in DefExpr which was
	hiding another bug.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

12/08/05 13:25:01 -- deitz

Log message:
	Simplified the test function for determining when a function should be
	instantiated given that a class has been instantiated.
	
	Removed default value for type formals.  One problem we currently have
	is that given:
	
	 class C { type t; }
	 var c : C = C(t=integer);
	
	the exprType is SymExpr(C) rather than CallExpr(C) so this is still
	allowed, but I'm going to look further into disallowing it even now.
	
	The #define REMOVE_TYPE_PARAM in instantiate.cpp says to remove the
	type variables from the actuals and formals during pre-instantiation.
	I haven't yet been able to remove this #define.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp normalize.cpp 
	                         scopeResolve.cpp 
	chapel/compiler/traversals/: instantiate.cpp 

---------------------------------------------------------------------------

12/08/05 14:36:26 -- shannon

Log message:
	Remove _chpl_write_linefeed from the prelude.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl prelude.chpl 

---------------------------------------------------------------------------

12/08/05 14:52:34 -- shannon

Log message:
	Update test output affected by my earlier change
	to the prelude.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/08/05 15:26:14 -- deitz

Log message:
	Added check to make sure that a class with a type variable is not
	declared without setting that type variable.  That is, no more:
	
	  class C { type t; }
	  var c : C = C(integer);
	
	Fixed numerous tests and removed one future.

Modified files:
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	                         scopeResolve.cpp 
	chapel/test/arrays/deitz/: test_array_class_trial1.chpl 
	                           test_array_class_trial2.chpl 
	                           test_array_class_trial3.chpl 
	                           test_array_class_trial3.good 
	                           test_array_class_trial4.chpl 
	                           test_array_class_trial4a.chpl 
	                           test_array_class_trial6.chpl 
	chapel/test/types/type_variables/deitz/: test_datablock.chpl 
	                                         test_datablock2.chpl 
	                                         test_instantiate1.chpl 
	                                         test_instantiate2.chpl 
	                                         test_instantiate3.chpl 
	                                         test_instantiate_construct1.chpl 
	                                         test_typevar_class5.chpl 
	                                         test_typevar_class6.chpl 
	                                         test_typevar_class7.chpl 
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_typevar_class1.chpl 
Removed files:
	chapel/test/arrays/deitz/: test_array_class_trial3.future 

---------------------------------------------------------------------------

12/08/05 15:29:04 -- deitz

Log message:
	Changed traversal UpdateSymbols into a function.  This, and
	replaceChild, should be moved into baseAST.cpp along with
	get_ast_children as they all potentially need to be updated when
	fields etc. are added to BaseAST children classes.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h astutil.h 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             createNestedFuncIterators.cpp 
	                             removeNestedFunctions.cpp 
Removed files:
	chapel/compiler/traversals/: updateSymbols.cpp updateSymbols.h 

---------------------------------------------------------------------------

12/09/05 08:27:50 -- jplevyak

Log message:
	New nil semantics.
	
	New type : _unspecifiedType along with new _ (unspecified value).
	Uninitialized variables of unspecified type are initialized to this
	value.  We should not permit comparison with it (i.e. at runtime it
	should probably be truely uninitialized.  For testing we could set
	it to random numbers.)
	
	New value gVoid.  Doesn't hurt to have it.  Can be returned
	so that "ReturnStmt" and "ReturnStmt gVoid" are the same thing.
	
	The "this" argument of a member is not dispatached to by "nil".
	
	Fixed a bug whereby the _this variable was not getting correctly
	updated by the building of the default wrapper.
	
	I am removing "unspecifiedType" as well as "nulltype" cloning
	and before I hand back the results to the AST.  The rational
	being that otherwise we will have lots of dynamic dispatches which
	we don't want to take, and we would rather that the user manage
	these explicitly.
	
	Assignments from "unspecifiedType" are surpressed at codegen.
	This makes sense because the unspecified values correspond to
	initializations which are not done.
	
	Array in the prelude is now a "record".  I also added a member variable:
	 var this_is_an_array : float;
	because otherwise the code which biulds the type hierarchy makes Array
	the base of all records (since it has no overt fields).  This is really
	lame.  What we want is a "value class" rather than a structurally typed
	record.  We should probably add this to chapel.
	
	dtValue is now the automatic dispatch parent of "record"s.  It used
	to be dtObject, but that doesn't make sense, and it was resulting in
	"nil" being placed below all records as well in the type lattice.
	
	Updated some test cases.  Now variables of unspecified type are initialized
	to gUnspecified (which is (void*)2 in the runtime) instead of nil ((void*)1).
	This means that uninitialized variables are nolonger initialiazed to nil.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp builtin_symbols.h fa.cpp fun.h 
	                      if1.cpp pattern.cpp sym.cpp sym.h 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: buildClassHierarchy.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/recursion/: rec_obj-1.chpl 
	                                     rec_obj-2.chpl 
	                                     rec_obj-3.chpl 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/09/05 09:18:32 -- jplevyak

Log message:
	update line numbers in error .good files.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/12/05 10:50:01 -- deitz

Log message:
	Fixed fix_def_expr, used with --use-alloc flag.
	
	Made _alloc primitive an op called OP_INIT.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: prelude.chpl 

---------------------------------------------------------------------------

12/12/05 14:27:37 -- deitz

Log message:
	Added ability to access primitive operators OP_GETS and OP_INIT from
	within Chapel, for use in the prelude, by calling special functions
	called _move(lhs, rhs) and _init(type).
	
	Renamed OP_GETS to OP_MOVE to make it easier to discuss the
	distinction between OP_MOVE and "=" which is usually talked about as
	"gets."

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         semanticChecks.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/12/05 17:10:06 -- jplevyak

Log message:
	Handle OP_MOVE specially so that it is a simple move.
	More work on the interpreter.
	Fixed line numbers for error tests.
	This causes a regression because of a bug with the way
	  member setters are built.  They should use overloaded assignment.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: pattern.cpp 
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/13/05 09:51:08 -- deitz

Log message:
	CallExprs that have an opTag no longer use the baseExpr field.
	
	Changed uses of OP_EQUAL, OP_LOGNOT, etc. to function forms in
	building of default functions including I/O to allow for overloading.
	
	Fixed print_view to print operators specially, so OP_MOVE can now be
	distinguished from overloaded assignment.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp type.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	                             resolveSymbols.cpp view.cpp 

---------------------------------------------------------------------------

12/13/05 11:16:58 -- deitz

Log message:
	Made setter use overloaded assignment rather than OP_MOVE.
	
	Added = function for domain class.
	
	Fixed regression, but broke
	
	  types/seq/deitz/test_seq_record1
	
	because the record equality function is not visible where it is needed
	by the sequence class.  The problem is that I instantiate the sequence
	of record class in chpl_seq where the functions related to the record
	cannot be seen.  Any ideas on how to deal with this issue?  We don't
	want to make the record's functions visible everywhere and moving the
	sequence of R class next to the record class will work in this case,
	but is problematic in the more general case of tuples which may
	contain two records in different places.  Instantiating where it is
	created is not great either because we don't want to end up having to
	instantiate multiple copies of the same thing.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/13/05 11:29:53 -- deitz

Log message:
	Fixed infinite recursion bug on = function by not inserting
	temporaries for __primitive function results.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/13/05 15:18:19 -- deitz

Log message:
	Fixed fix_def_expr's handling of cases like "var x = init_expr."
	
	Made lookup of chpl_stdin, etc. happen even with --nostdincs.
	
	Fixed html_view printing of CallExprs that are operators.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp normalize.cpp 
	chapel/compiler/traversals/: htmlview.cpp 

---------------------------------------------------------------------------

12/13/05 15:38:12 -- deitz

Log message:
	Added little test of initializing a variable with a function.  It works.

Added files:
	chapel/test/trivial/deitz/: test_var_decl_init5.chpl 
	                            test_var_decl_init5.good 

---------------------------------------------------------------------------

12/14/05 09:29:44 -- jplevyak

Log message:
	fix line numbers

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/14/05 09:31:49 -- jplevyak

Log message:
	Remove .future for working test.

Removed files:
	chapel/test/trivial/deitz/: test_break1.future 

---------------------------------------------------------------------------

12/14/05 10:43:50 -- shannon

Log message:
	Fixed an oversight in the parser where unrecognized
	tokens were quietly printed to the screen:  now it
	complains.  Added a test.  Also updated my .cvsignore
	files.

Modified files:
	chapel/compiler/parser/: chapel.lex processTokens.cpp 
	                         processTokens.h 
	chapel/test/classes/shannon/: .cvsignore 
	chapel/test/compflags/shannon/: .cvsignore 
	chapel/test/compflags/shannon/cpplines/: .cvsignore 
	chapel/test/execflags/shannon/: .cvsignore 
	chapel/test/execflags/shannon/configs/: .cvsignore 
	chapel/test/execflags/shannon/configs/help/: .cvsignore 
	chapel/test/memory/shannon/: .cvsignore 
	chapel/test/trivial/shannon/: .cvsignore 
	chapel/test/types/string/shannon/: .cvsignore 
Added files:
	chapel/test/parsing/shannon/: .cvsignore invalidToken.chpl 
	                              invalidToken.good 

---------------------------------------------------------------------------

12/14/05 12:08:02 -- jplevyak

Log message:
	Some work on the --use-alloc option.
	Made a new option --nostdincs-but-file to complement --nostndincs which
	  does not include anything (including file).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         filesToAST.cpp 
	chapel/compiler/traversals/: processImportExprs.cpp 

---------------------------------------------------------------------------

12/14/05 13:56:43 -- deitz

Log message:
	Fixed an assignment for the domain in the construction of arrays to
	use '=' instead of _move.
	
	Made return temp for normalizing return statements use _move.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/14/05 17:01:09 -- jplevyak

Log message:
	Add initial support for simulating multiple threads, for single stepping
	and for interrupting the interpreter with control-c.  Added an
	"interactive" mode to the interpreter.

Modified files:
	chapel/compiler/include/: vec.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/15/05 09:11:34 -- deitz

Log message:
	Added support for 1D arrays.  Improved support for 2D arrays.
	
	Defuturized 13 working array tests.  Added two array tests, one
	working.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp normalize.cpp 
	chapel/compiler/traversals/: instantiate.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/bradc/: domarr.chpl 
	chapel/test/arrays/deitz/: jacobi2.chpl test_array_assign1.chpl 
	                           test_array_integer_2d.chpl 
	                           test_array_of_class1.chpl 
	                           test_basic1d1.chpl test_basic1d2.chpl 
	                           test_basic1d3.chpl test_basic1d4.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: domarr.chpl domarr.good 
	                                  protoast_test.chpl 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/memory/shannon/: jacobi.chpl jacobi.good 
	                             printMemTable.chpl 
	                             printMemTable.good 
	chapel/test/trivial/deitz/: test_scope1.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_basic1a.chpl 
	                           test_array_basic1a.future 
	                           test_array_basic1a.good 
	                           test_array_basic2a.chpl 
	                           test_array_basic2a.good 
Removed files:
	chapel/test/arrays/bradc/: domarr.future 
	chapel/test/arrays/deitz/: jacobi2.future 
	                           test_array_assign1.future 
	                           test_array_integer_2d.future 
	                           test_array_of_class1.future 
	                           test_basic1d1.future 
	                           test_basic1d2.future 
	                           test_basic1d3.future 
	                           test_basic1d4.future 
	chapel/test/flowanalysis/newast/: domarr.future 
	chapel/test/memory/shannon/: jacobi.future printMemTable.future 
	chapel/test/trivial/deitz/: test_scope1.future 

---------------------------------------------------------------------------

12/15/05 09:17:49 -- jplevyak

Log message:
	Improved the flexibility of analysis to handle the creation of
	multiple types of objects at the same (virtually cloned)
	program point.  Looks like the new DefExpr/init might require this.

Modified files:
	chapel/compiler/ifa/: clone.cpp fa.cpp fa.h pnode.h 

---------------------------------------------------------------------------

12/15/05 10:42:00 -- jplevyak

Log message:
	Fix compilation issue.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/15/05 10:53:13 -- deitz

Log message:
	Removed setting of noDefaultInit when --use-alloc is used.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/15/05 18:07:32 -- jplevyak

Log message:
	More work on --use-alloc.
	Current issue is the default function wrapper which doesn't seem
	  have been transformed by "normalize".

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/15/05 18:35:49 -- jplevyak

Log message:
	More work on the interpreter.  Added the beginnings of function calls.
	Enhanced interactive mode, tracing, etc.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/16/05 08:25:56 -- jplevyak

Log message:
	untabify

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/16/05 09:45:33 -- jplevyak

Log message:
	More work on interpreter.
	Add support for thread states, "where", reporting of function names,
	reporting of file names and line numbers, breaking on entering a
	function by name.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/16/05 09:55:23 -- jplevyak

Log message:
	Add ability to remove break on function

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/16/05 12:08:00 -- deitz

Log message:
	Interesting var test case.  This looks like a problem to me.

Added files:
	chapel/test/functions/deitz/: test_var_function1.chpl 
	                              test_var_function1.future 
	                              test_var_function1.good 

---------------------------------------------------------------------------

12/16/05 14:14:30 -- deitz

Log message:
	Regression: trivial/deitz/test_coerce_integer_to_string2
	
	Updated regressions file.
	
	Reworked the --no-infer option so that it works when used with the
	--use-alloc option, at least on some simple test cases.
	
	Made it possible to call normalize on a piece of AST, but it can't yet
	be called multiple times, and calling it on wrapper functions has led
	to some difficulties that I'm still looking into.
	
	Moved constant assignment error detection before analysis.
	
	Made inlining of functions work with the --use-alloc flag and disabled
	the late variable initialization insertion pass when --no-infer is
	used.  This should probably also come out when --use-alloc is used.
	
	Fixed assignment of 0 to false and 1 to true in the prelude to use a
	cast.
	
	Removed some special-cased string-handling code.
	
	Fixed CallExpr printing when the CallExpr is an infix operator.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: astutil.h symbol.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp semanticChecks.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             insertVariableInitializations.cpp 
	                             resolveSymbols.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chplio.c chpltypes.c config.c 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/deitz/: test_var_function_access.good 
	                              test_var_function_access2.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/memory/shannon/: configVarFile.good 
	                             memstatPrint.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Removed files:
	chapel/test/functions/deitz/: test_var_function1.future 

---------------------------------------------------------------------------

12/19/05 09:03:51 -- jplevyak

Log message:
	Added support for the "readline" library to the interpreter interactive mode.
	  This is enabled on the linux/linux64 and cygwin platforms explicitly
	  till such time as we are using "configure" or some other solution.
	
	Added nprint_view_noline and added support for printing arbitrary
	  BaseASTs with either print_view_nooline or nprint_view_noline.
	
	Added "locals", "print" and "nprint" commands to the interpreter.
	
	Made the interpreter objects (IObject) a subclass of BaseAST to simplify
	  mixing of IObject and other BaseAST pointers.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h vec.h 
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/compiler/traversals/: view.cpp view.h 
	chapel/make/: Makefile.cygwin Makefile.freebsd Makefile.linux 
	              Makefile.linux64 

---------------------------------------------------------------------------

12/19/05 09:19:37 -- jplevyak

Log message:
	Fix for cygwin compiler: use LIBS instead of LDFLAGS

Modified files:
	chapel/make/: Makefile.cygwin Makefile.linux Makefile.linux64 

---------------------------------------------------------------------------

12/19/05 12:38:49 -- jplevyak

Log message:
	Fix problems with test_clone_classXX caused by a bug in the forv iterator.

Modified files:
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

12/19/05 13:44:13 -- deitz

Log message:
	Fixed .good for test.

Modified files:
	chapel/test/functions/deitz/: test_var_function1.good 

---------------------------------------------------------------------------

12/19/05 14:53:34 -- deitz

Log message:
	More work on --use-alloc which is now working on many tests.  I'm
	looking into those that are not working.
	
	Normalize is now called on the wrappers.
	
	This checkin fixes:
	  trivial/deitz/test_coerce_integer_to_string2

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	                             resolveSymbols.cpp 
	chapel/make/: Makefile.linux 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

12/19/05 15:20:20 -- jplevyak

Log message:
	More work on the interpreter.
	
	The "run" command is now working.
	The "next" command is now working.
	Goto now checks to see that we are not jumping over variable declarations
	  or down in the stack.
	"locals" now prints out the values stored in the slots.
	We now have a "program terminated" state which works correctly.
	readline history is now working so that ^J (emacs previous command)
	  works.
	Printing of the expression stack is cleaner.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/19/05 15:30:08 -- deitz

Log message:
	Accidentally checked in disabled readline.

Modified files:
	chapel/make/: Makefile.linux 

---------------------------------------------------------------------------

12/19/05 16:12:53 -- jplevyak

Log message:
	Fixed a bug in the handling of CallExpr in the interpeter.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/19/05 16:43:27 -- deitz

Log message:
	Rewrote the code to create the multidimensional iterator for domains
	during instantiation so that it relies on cleanup, scopeResolve, and
	normalize.
	
	Fixed a small bug in --no-infer function resolution.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: astutil.h 
	chapel/compiler/passes/: functionResolution.cpp scopeResolve.cpp 
	chapel/make/: Makefile.linux 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

12/20/05 07:21:33 -- jplevyak

Log message:
	Start of a new Primitives facility to be used by the AST,
	the interpreter, and analysis to capture the semantics of the
	AST after normalization.

Modified files:
	chapel/compiler/AST/: Makefile.share 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: driver.cpp 
Added files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/include/: primitive.h 

---------------------------------------------------------------------------

12/20/05 09:33:36 -- deitz

Log message:
	Rearrangement of --no-infer option to use a function instead of a
	traversal class.  Added initial support for handling MemberAccesses.
	Made it work on the normalized AST with less special-handling before
	the pass.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

12/20/05 11:42:55 -- deitz

Log message:
	Added the ability to insert Exprs into lists of Stmts using
	insertAtTail, insertAtHead, insertBefore, insertAfter, and the
	AList<Stmt> constructor without creating a new ExprStmt.  This is done
	automatically.  Simplified much code accordingly, removing almost all
	uses of the ExprStmt constructor.
	
	This should help to avoid some common mistakes and can be extended to
	catch errors when they happen.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h stmt.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp normalize.cpp 
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	                             inlineFunctions.cpp 
	                             insertVariableInitializations.cpp 
	                             processImportExprs.cpp 
	                             processParameters.cpp 

---------------------------------------------------------------------------

12/20/05 14:18:28 -- deitz

Log message:
	More work on --use-alloc which is now working on many tests.  I'm
	looking into those that are not working.
	
	Normalize is now called on the wrappers.
	
	This checkin fixes:
	  trivial/deitz/test_coerce_integer_to_string2

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             inlineFunctions.h 

---------------------------------------------------------------------------

12/21/05 09:48:09 -- deitz

Log message:
	More work on --no-infer function resolution.
	
	Fixed a bug in normalization of for loops in which a CallExpr was put
	around a MemberAccess where it shouldn't have been.  This had the
	result of calling a getter with parentheses.
	
	For an odd reason, the keep types macro is lost when --no-infer is not
	used, but not lost when it is.  I'll look into it.  For now, I put a
	if not no_infer around the hack in code generation of the data class
	constructor.
	
	I made it so that if the default expression for an argument is nil, we
	don't assign nil when --no-infer is used, instead assigning nothing
	and using the default for the type.
	
	Added support for for loops to --no-infer function resolution.
	
	Removed printing of a config var initialization when the --help flag
	is used temporarily since it will be a little more work to recover the
	init expression.
	
	Simplified code for removing type variable actuals, formals, and the
	method and setter tokens.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             findUnknownTypes.cpp 
	                             findUnknownTypes.h 
	                             inlineFunctions.cpp 

---------------------------------------------------------------------------

12/21/05 10:49:41 -- deitz

Log message:
	Added a test directory with a few tests of the --no-infer flag.  Made
	it so that the --no-infer flag implies the --use-alloc flag.

Modified files:
	chapel/compiler/main/: runpasses.cpp 
Added files:
	chapel/test/no_infer/: .cvsignore COMPOPTS test_domains_2D.chpl 
	                       test_domains_2D.future 
	                       test_domains_2D.good test_seq1.chpl 
	                       test_seq1.good test_tuple_simple4.chpl 
	                       test_tuple_simple4.good 
	                       test_var_decl4.chpl test_var_decl4.good 

---------------------------------------------------------------------------

12/21/05 15:20:37 -- deitz

Log message:
	Replaced the special CommonModule which was nested above other modules
	with a sibling module called _chpl_compiler.  Moved the tuple
	definitions from the CommonModule into the tuple module _chpl_htuple.
	Moved sum types and literal types from the CommonModule to
	_chpl_compiler.  Move the init_runonce variables out of the
	CommonModule and put them in _chpl_compiler.
	
	Stopped code generation of unused per-module header and internal
	header files as they are not used.
	
	Made all standard modules use _chpl_standard (except _chpl_standard
	and _chpl_compiler) and removed all the use statements that we have
	put in these modules.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: files.h runtime.h symbol.h symtab.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp filesToAST.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	                             processImportExprs.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_complex.chpl 
	                          _chpl_data.chpl _chpl_htuple.chpl 
	                          _chpl_seq.chpl _chpl_standard.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/modules/standard/: _chpl_compiler.chpl 

---------------------------------------------------------------------------

12/21/05 17:04:35 -- jplevyak

Log message:
	Fixed SEGV in global loop frequency estimation.
	Added assert to detect irregularities in loop tree.
	Fixed SEGV in recursion graph.

Modified files:
	chapel/compiler/ifa/: graph.cpp inline.cpp loop.cpp 

---------------------------------------------------------------------------

12/21/05 17:24:56 -- jplevyak

Log message:
	This is a relatively large change.
	
	Introduces CallExpr::primitive which is used instead of opTag
	right after normalization and before resolveSymbols.  The idea
	being to have a way of attaching semantic meaning to primitive
	operations for the purposes of interpretation and analysis
	(and possibly codegen).
	
	Primitives are registered in AST/primitive.cpp, and the operations
	for the interpreter are defined in passes/interpreter_ops.h and
	for analysis in analysis/analysis_ops.h.
	
	When adding new primitives, only the files primitives.cpp
	runInterpreter.cpp and chapel_ifa.cpp need to be recompiled.
	
	This should make adding new primitives relatively easy, and
	ensure that they are supported in the interpreter and in analysis.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp primitive.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: fa.cpp prim.cpp prim_data.dat 
	chapel/compiler/include/: expr.h primitive.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         runInterpreter.cpp runInterpreter.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	chapel/modules/standard/: prelude.chpl 
Added files:
	chapel/compiler/analysis/: analysis_ops.h 
	chapel/compiler/passes/: interpreter_ops.h 

---------------------------------------------------------------------------

12/21/05 17:42:11 -- bradc

Log message:
	Putting emacs lisp files under CVS control to maintain
	some sanity...  Still not ready for prime-time, but
	getting closer.

Added files:
	chapel/etc/emacs/21.4/: cc-langs.el cc-menus.el cc-mode.el 
	                        font-lock.el 

---------------------------------------------------------------------------

12/21/05 19:22:19 -- deitz

Log message:
	Instantiated classes are now put into their own modules which is used
	at the point where the involved types are defined and uses the modules
	in which the involved types are defined.  Eventually these modules
	should use the scopes in which the involved types are defined rather
	than the modules so as to deal better with nested types.
	
	The modules where the instantiated classes are put are named based on
	the instantiation.  Thus if the user creates a 'seq of integer' the
	module where this type is put is called _seq_of_integer.
	
	The code to create the modules is unwieldy in that I still define
	module symbols explicitly.  I want to make this more orthogonal and
	finish folding passes into cleanup to make this code cleaner.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/passes/: codegen.cpp createEntryPoint.cpp 
	                         createEntryPoint.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

12/22/05 11:25:19 -- jplevyak

Log message:
	Switch to quadratic hashing for Vec used as as Set and Map.
	This should decrease memory usage for large sets (which we are
	using more lately).

Modified files:
	chapel/compiler/include/: map.h vec.h 

---------------------------------------------------------------------------

12/22/05 12:08:14 -- deitz

Log message:
	More work on --no-infer function resolution.  It now works on domain tests.

Modified files:
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 
	chapel/compiler/traversals/: processParameters.cpp 
Removed files:
	chapel/test/no_infer/: test_domains_2D.future 

---------------------------------------------------------------------------

12/22/05 12:12:28 -- jplevyak

Log message:
	Move normalization of primitives to the end of normalization to catch
	any late OP_INITs.
	Add a "user_error" mode which permits interpreter users to
	  query the environment when a "user" error occurs.
	Add support for OP_MOVE
	Add support for loading of literals

Modified files:
	chapel/compiler/passes/: normalize.cpp runInterpreter.cpp 

---------------------------------------------------------------------------

12/22/05 12:43:31 -- jplevyak

Log message:
	interpreter tweeks

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

12/22/05 13:28:11 -- deitz

Log message:
	Fixed --no-infer function resolution to work with the new init
	primitive which replaced OP_INIT.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

12/22/05 14:07:34 -- deitz

Log message:
	Fixed array test to use square brackets on domain.  This doesn't work
	because of the line "A(i) = i" though it looks to me like a coercion
	wrapper is built correctly.

Modified files:
	chapel/test/functions/bradc/: arrayArg.chpl 

---------------------------------------------------------------------------

12/22/05 14:35:05 -- deitz

Log message:
	Cleaned up arithmetic domain module code slightly (replacing
	hard-coded 16 dimension limit with the parameter rank).
	
	Fixed --no-infer function resolution so it works on array codes.
	Added jacobi to --no-infer test directory.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/memory/shannon/: printMemTable.good 
Added files:
	chapel/test/no_infer/: jacobi.chpl jacobi.good 

---------------------------------------------------------------------------

12/22/05 14:58:05 -- deitz

Log message:
	Last improvements to --no-infer function resolution before the break.
	
	Improved CondExpr::typeInfo.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

12/22/05 16:44:58 -- jplevyak

Log message:
	Fix bug in handling of OP_INIT for --use-alloc.
	Still have a problem where the new collect_asts doesn't
	  collect Symbols (or Types most likely).

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: prim.cpp 
	chapel/compiler/include/: vec.h 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/25/05 22:18:19 -- jplevyak

Log message:
	Sub in memmove for memcpy to fix valgrind issues.

Modified files:
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

12/26/05 08:59:33 -- jplevyak

Log message:
	Fixed stupid bug in new Vec::insert() code.

Modified files:
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

01/02/06 13:02:37 -- jplevyak

Log message:
	Remove future for working test.

Removed files:
	chapel/test/classes/deitz/: test_this2.future 

---------------------------------------------------------------------------

01/03/06 08:45:10 -- jplevyak

Log message:
	Added Accum<C>::add(Vec<C> ) to permit accumulation of vectors of values.
	Added collect_ast_children which uses get_ast_children to collect all
	  the children reachable from a node.
	Interpreter Added:
	  - printing by name of local variables
	  - printing by id of any reachable BastAST (by building an index over the entire program)
	  - printing now does both print_view_noline() and x->print(stdout) since
	    they give different information

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h vec.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/03/06 11:36:12 -- deitz

Log message:
	Fixed a few bugs related to the --use-alloc flag.  This checkin makes
	a bunch of programs work with the --use-alloc flag.
	
	Made collect_asts add all UnresolvedSymbols encountered to the
	resulting vector.  It does not in general add all symbols, only those
	that are defined.
	
	Fixed handling of init primitive in resolveSymbols.
	
	Removed a stopgap from the tuple module (unrelated).

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp 
	chapel/compiler/traversals/: processParameters.cpp 
	                             resolveSymbols.cpp 
	chapel/modules/standard/: _chpl_htuple.chpl 

---------------------------------------------------------------------------

01/03/06 12:58:35 -- jplevyak

Log message:
	Fixed --nostdincs SEGV in cleanup, access to uninitialized tupleModle
	Interpreter:
	  - it is now possible to break on any id.
	    for Expr and Stmt, this results in breaking on that stmt/expr
	    for FnSymbol is results in breaking on entrance to that function
	  - "stack" command now documented and terminated with a \n
	  - added some more asserts regarding expression stack integrity
	  - stub for primitives

Modified files:
	chapel/compiler/passes/: cleanup.cpp runInterpreter.cpp 

---------------------------------------------------------------------------

01/03/06 16:36:32 -- jplevyak

Log message:
	Interpreter:
	 - begin work on the INIT primitive.
	 - add better type checking.
	 - print out function ids
	 - fix bug with break ids

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	                         runInterpreter.h 

---------------------------------------------------------------------------

01/04/06 09:13:14 -- deitz

Log message:
	With this checkin, the --use-alloc flag is working on most tests with
	a few exceptions including tests involving config vars.  Looking into
	it.
	
	Fixed pre-instantiation to work better with --use-alloc.
	
	Fixed post-analysis resolveSymbols to use call_info to build default
	wrappers for init, rather than building it itself.
	
	Improved nprint_view to print the IDs of statements and expressions as
	well as symbols.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: instantiate.cpp resolveSymbols.cpp 
	                             view.cpp 
	chapel/test/arrays/deitz/: new_class_trial1.chpl 

---------------------------------------------------------------------------

01/04/06 09:18:04 -- jplevyak

Log message:
	Interpreter:
	  Add support for allocation and printing of class instances (objects).
	  Changed the way the value stack works so that intermediates are stored
	    primarily in the environment.   This makes it possible to ask
	    "what was the value produced by an expression last time it was evaluated "
	    rather than having to try to match up results on the stack.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 

---------------------------------------------------------------------------

01/04/06 10:23:40 -- deitz

Log message:
	Fixed tests which used to be like
	
	  var a : R(2, 4);
	
	but should be like
	
	  var a = R(2, 4);
	
	since it is now an error (currently unreported) to assign values to a
	constructor between the colon and the equals.

Modified files:
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation10.chpl 
	                                test_tuple_record_implementation11.chpl 
	                                test_tuple_record_implementation12.chpl 
	                                test_tuple_record_implementation13.chpl 
	                                test_tuple_record_implementation14.chpl 
	                                test_tuple_record_implementation15.chpl 
	                                test_tuple_record_implementation8.chpl 
	                                test_tuple_record_implementation9.chpl 

---------------------------------------------------------------------------

01/04/06 12:39:40 -- jplevyak

Log message:
	Changed primitives in the prelude so that they take the arguments
	  required to do the operations instead of being stubs.
	Updated test cases accordingly.
	Added support for the array_index and array_set primitives into
	  the interpreter.
	Added support for halt, done, exit in the interpreter.
	Added a primitive for "exit".
	Removed support for the "coerce" "object_index" and "object_set_index"
	  primitives which were nolonger used.
	The "sizeof" primitive is marked as unsupported (do we still need this?)
	IObjects now print out their array dimensionality.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

01/04/06 15:08:07 -- shannon

Log message:
	Added the filename and linenumber to the output
	of the assert and halt calls.  If the code is
	compiled with the --cg-chpl-lineno flag, only user-code
	information is printed, otherwise this information
	could pertain to built-in modules.  Refactored assert
	such that it no longer calls halt.
	
	Changed the output of a bunch of tests.  Also added the
	--cg-chpl-lineno compopt to many tests so they wouldn't
	print out user-specific paths to built-in modules.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: runtime.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: filesToAST.cpp normalize.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/runtime/include/: error.h 
	chapel/runtime/src/: error.c 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/seq/: seq_index1.good 
	chapel/test/trivial/shannon/: readWriteBool.good 
	                              readWriteBoolLineno.good 
	                              readWriteComplex.good 
	                              readWriteComplexFail1.good 
	                              readWriteComplexLineno.good 
	                              readWriteEnum.good 
	chapel/test/trivial/shannon/quit/: assert.good halt.good 
	chapel/test/types/file/: closeStdin.good closedWithoutOpen.good 
	                         freadComplex.good freadIntFailed.good 
	                         freadIntUnopenedFile.good 
	                         freadNoFloat.good freadNoInt.good 
	                         freadNotABoolean.good 
	                         fwriteIntFailed.good 
	                         fwriteIntUnopenedFile.good 
	                         invalidMode.good openStdout.good 
	                         unableToOpenFile.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/trivial/mjoyner/seq/: seq_index1.compopts 
	chapel/test/trivial/shannon/: readWriteComplex.compopts 
	                              readWriteComplexFail1.compopts 
	chapel/test/trivial/shannon/quit/: .cvsignore 
	chapel/test/types/file/: closeStdin.compopts 
	                         closedWithoutOpen.compopts 
	                         freadComplex.compopts 
	                         freadIntFailed.compopts 
	                         freadIntUnopenedFile.compopts 
	                         freadNoFloat.compopts 
	                         freadNoInt.compopts 
	                         freadNotABoolean.compopts 
	                         fwriteIntFailed.compopts 
	                         fwriteIntUnopenedFile.compopts 
	                         invalidMode.compopts 
	                         openStdout.compopts 
	                         unableToOpenFile.compopts 

---------------------------------------------------------------------------

01/04/06 16:08:21 -- jplevyak

Log message:
	Add utility functions for casting and folding Immediate's.
	These will be used to implement the builtin numeric functions
	  in the interpreter.

Modified files:
	chapel/compiler/ifa/: Makefile.share num.h prim.h sym.cpp 
	chapel/compiler/ifa/make_prims/: make_prims.cpp 
Added files:
	chapel/compiler/ifa/: cast_code.cpp make_cast_code.cpp num.cpp 

---------------------------------------------------------------------------

01/04/06 16:35:49 -- jplevyak

Log message:
	A bunch more work on primitives for the intepreter.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/ifa/: num.cpp num.h 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 

---------------------------------------------------------------------------

01/05/06 08:56:13 -- jplevyak

Log message:
	Fix make problem by just putting prim_data.cpp and prim_data.h
	under CVS.  They will now have to be rebuilt manually, but
	since they rarely change that shouldn't be a problem.

Modified files:
	chapel/compiler/ifa/: Makefile 
Added files:
	chapel/compiler/ifa/: prim_data.cpp prim_data.h 

---------------------------------------------------------------------------

01/05/06 10:29:44 -- deitz

Log message:
	Updated goods based on line number changes in prelude.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

01/05/06 10:56:48 -- deitz

Log message:
	Updated REGRESSIONS file.  Caused two minor new ones.
	
	Fixed configs so that they work with --use-alloc via a stopgap.
	
	More general work on getting --use-alloc working.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: createEntryPoint.cpp normalize.cpp 
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             htmlview.cpp resolveSymbols.cpp 
	chapel/runtime/src/: config.c 
	chapel/test/: REGRESSIONS 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class2a.chpl 

---------------------------------------------------------------------------

01/05/06 11:04:13 -- shannon

Log message:
	Update the output of a test I missed on
	yesterday's commit.

Modified files:
	chapel/test/trivial/shannon/: readWriteBool.good 
Added files:
	chapel/test/trivial/shannon/: readWriteBool.compopts 

---------------------------------------------------------------------------

01/05/06 14:06:45 -- shannon

Log message:
	Updated the output of the config var tests
	that changed per Steve's recent check in.
	Added a future to remind myself that one day
	we'd again like the ability to print the default
	values.

Modified files:
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVar-Dash.cfghelp 
	                                             configVarHelp.cfghelp 
	                                             configVarModStrings1.cfghelp 
	                                             configVarModStrings2.cfghelp 
	                                             configVarSetOver.cfghelp 
	                                             configVarSetTwoTypes.cfghelp 
	                                             configVarTwoModules.cfghelp 
	                                             varNameEnumQM.cfghelp 
	                                             varNameQMark.cfghelp 
Added files:
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVarDefaultValue.cfghelp 
	                                             configVarDefaultValue.chpl 
	                                             configVarDefaultValue.future 

---------------------------------------------------------------------------

01/05/06 15:04:39 -- deitz

Log message:
	Changed handling of inout and out intents to use ref intent.
	Futurized four tests that aliased inout and out arguments.  During
	normalization, I change the inout and out intents to be ref intent.
	Out arguments are still initialized at the top of the call thereby
	ignoring the value in the actual.
	
	Updated regressions file.
	
	Side effect: Due to proper handling of ref intent to implement inout
	and out intents, the 'this' argument is now passed with an extra
	pointer.  We should fix this, but for now it works.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/traversals/: removeNestedFunctions.cpp 
	chapel/runtime/include/: array.h 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

01/05/06 15:05:13 -- deitz

Log message:
	Added .future files with previous checkin.

Added files:
	chapel/test/functions/bradc/: defaultParamInOut.future 
	                              intents-classes3.future 
	                              intents-classes4.future 
	chapel/test/trivial/preston/: aliasing.future 

---------------------------------------------------------------------------

01/05/06 15:16:35 -- jplevyak

Log message:
	Remove ReduceExpr

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/05/06 17:15:13 -- deitz

Log message:
	Added return_bool_transfer_function so that things like == and !=
	return a boolean value rather than an integer.  I was getting a mixed
	primitives error with the --use-alloc flag otherwise because return
	__primitive is handled specially to avoid imprecision.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 

---------------------------------------------------------------------------

01/05/06 17:30:40 -- deitz

Log message:
	Fixed a bug that showed up in the handling of let expressions.
	
	Fixed regression test/classes/deitz/test_mycomplex_record.
	
	Updated regressions file.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

01/05/06 17:39:33 -- deitz

Log message:
	Updated test with values between : and = in declaration.

Modified files:
	chapel/test/types/type_variables/deitz/: test_tuplelike1.chpl 

---------------------------------------------------------------------------

01/06/06 10:21:16 -- deitz

Log message:
	Moved 'param' checks from just after analysis to just after parsing.

Modified files:
	chapel/compiler/passes/: semanticChecks.cpp 

---------------------------------------------------------------------------

01/06/06 11:01:20 -- deitz

Log message:
	Turned --use-alloc on by default.
	
	New regressions:
	
	  trivial/deitz/test_var_decl1
	  trivial/preston/tuple
	  types/tuple/deitz/test_destruct_nested
	  types/tuple/deitz/test_htuple3
	  types/tuple/deitz/test_tuple_of_tuples
	  types/tuple/deitz/test_tuple_simple1
	  types/tuple/deitz/test_tuple_simple1a
	  types/tuple/deitz/test_tuple_simple2
	  types/tuple/deitz/test_tuple_simple5
	  types/tuple/deitz/test_tuple_simple7
	  types/tuple/deitz/test_tuple_swap
	  types/tuple/jplevyak/destruct-1
	  types/tuple/jplevyak/destruct-2
	  types/type_variables/deitz/test_clone_class2a
	
	    John expects a fix for these which fail because of analysis's
	    handling of unspecified types.
	
	  functions/bradc/typefn2
	  types/type_variables/deitz/test_instantiate_construct1
	
	    I'm looking at these two tests but expect the changes to be
	    significant that I'd like to do it separately.
	
	Futurized complicated instantiation test:
	  types/tuple/deitz/test_tuple_record_implementation15

Modified files:
	chapel/compiler/main/: driver.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  octalliteral.good 
	                                  pareninit.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good var.good 
	                                  var2.good whileLoop.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation15.future 

---------------------------------------------------------------------------

01/06/06 13:49:05 -- deitz

Log message:
	Removed special handling of functionResolution pass and documented
	passlist file.

Modified files:
	chapel/compiler/main/: passlist.h runpasses.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	                         preAnalysisCleanup.cpp 
	                         resolveAnalyzed.cpp runAnalysis.cpp 
	                         runInterpreter.cpp 
	chapel/compiler/traversals/: instantiate.cpp resolveSymbols.cpp 

---------------------------------------------------------------------------

01/06/06 13:59:19 -- deitz

Log message:
	Removed now unnecessary passes processParameters and
	insertVariableInitializations.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	                             insertVariableInitializations.h 
	                             processParameters.cpp 
	                             processParameters.h 

---------------------------------------------------------------------------

01/06/06 14:26:12 -- deitz

Log message:
	Removed future of test that has been working for a while for good reason.

Removed files:
	chapel/test/types/seq/deitz/: test_seq_htuple2.future 

---------------------------------------------------------------------------

01/06/06 14:34:48 -- deitz

Log message:
	Removed completely unused flags scoping_test and use_class_init.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

01/06/06 15:19:25 -- deitz

Log message:
	Removed unnecessary or unused flags --nopreinstantiate, --tmpMangling,
	and --newvardef.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/compiler/traversals/: instantiate.cpp 

---------------------------------------------------------------------------

01/06/06 15:25:04 -- deitz

Log message:
	Added test to show that formals are not yet copied.

Added files:
	chapel/test/functions/deitz/: test_formal_copy1.chpl 
	                              test_formal_copy1.future 
	                              test_formal_copy1.good 

---------------------------------------------------------------------------

01/06/06 15:54:40 -- deitz

Log message:
	Removed --use-alloc flag and deleted some now dead code.  I commented
	out the dead code in chapel_ifa.cpp.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: driver.h symbol.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp instantiate.cpp 

---------------------------------------------------------------------------

01/06/06 16:32:26 -- deitz

Log message:
	Removed COMPOPTS to use flag I removed.  Tests still show the problem.

Removed files:
	chapel/test/functions/jplevyak/scoping/: COMPOPTS 

---------------------------------------------------------------------------

01/06/06 17:14:34 -- deitz

Log message:
	Cleaned up two future tests and they now work.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record5.chpl 
	                                         test_typevar_record5.good 
	                                         test_typevar_record6.chpl 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record5.future 
	                                         test_typevar_record6.future 

---------------------------------------------------------------------------

01/06/06 17:23:11 -- deitz

Log message:
	Removed three .futures for tests which are now working due to
	--use-alloc changes.

Removed files:
	chapel/test/arrays/deitz/: test_domain2D.future 
	chapel/test/functions/jplevyak/: equal-8.future 
	chapel/test/types/seq/bradc/: returnSeq2.future 

---------------------------------------------------------------------------

01/08/06 18:59:40 -- jplevyak

Log message:
	Removed MemberAccess and created two new primitives/OPs OP_GET_MEMBER
	and OP_SET_MEMBER.  This took much longer than I would have imagined
	because the AST currently spends most of it's time in uncannonicalized
	form which means that many functions have subtle dependencies on the
	state of various member variables and the structure of the AST, things
	which need to be parents of this or that and constructs that only
	appear in constructors or setters/getters.  Given all the work we
	have done I found this discouraging since it means that the per-normalization
	bits of the compiler are quite brittle and hard to change.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp 
	                      primitive.cpp type.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp builtin_symbols.h 
	chapel/compiler/include/: baseAST.h expr.h vec.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp 
	                         interpreter_ops.h normalize.cpp 
	                         scopeResolve.cpp 
	chapel/compiler/traversals/: htmlview.cpp resolveSymbols.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

01/09/06 11:07:13 -- jplevyak

Log message:
	Interpreter:
	   add support for all numeric primitives and string primitives.
	Added some support constructors and overloaded assignments for
	  Immediate (conversion of strings and bools).

Modified files:
	chapel/compiler/ifa/: num.h 
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/modules/standard/: prelude.chpl 

---------------------------------------------------------------------------

01/09/06 11:10:25 -- jplevyak

Log message:
	remove some dead code

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/09/06 13:29:00 -- deitz

Log message:
	Some cleanup of post-analysis resolution in resolveSymbols.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: analysis.h expr.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

01/09/06 15:09:25 -- shannon

Log message:
	Fixed a bug in my fread of enumerated types code.
	Added a test.

Modified files:
	chapel/compiler/AST/: type.cpp 
Added files:
	chapel/test/types/file/: freadEnum.chpl freadEnum.good 
	                         freadEnum.txt 

---------------------------------------------------------------------------

01/09/06 16:16:12 -- jplevyak

Log message:
	Remove dead code

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

01/09/06 17:07:33 -- deitz

Log message:
	This is an intermediate checkin of --no-infer function resolution with
	a new interface and a more modular implementation.  The interface is
	not yet fully applied, i.e., the types and names vector is largely
	ignored.

Modified files:
	chapel/compiler/include/: astutil.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/09/06 17:49:24 -- deitz

Log message:
	Finished first pass of modularization of --no-infer function resolution.

Modified files:
	chapel/compiler/include/: astutil.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/10/06 11:58:42 -- jplevyak

Log message:
	Remove some cruft

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h 

---------------------------------------------------------------------------

01/10/06 17:30:14 -- jplevyak

Log message:
	Cleanup dead code and remove unnecessary templates.
	Move Chapel specific hacks (removing nil and unspecified types from
	  the results of type_info()) into analysis/chapel_ifa.cpp
	Add a new Chapel specific hack to remove functions which dispatch
	  only on nil or unspecified types.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: clone.cpp fa.cpp var.cpp var.h 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

01/11/06 09:24:41 -- jplevyak

Log message:
	Fix compilation failure caused by warning promoted to error.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

01/11/06 11:27:45 -- deitz

Log message:
	Fixed a bug in tuple destructuring temp insertion.
	
	Updated REGRESSIONS file.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/test/: REGRESSIONS 
Removed files:
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_typevar_class1.compopts 

---------------------------------------------------------------------------

01/11/06 14:58:51 -- deitz

Log message:
	Fixed test to match .good and removed .future.

Modified files:
	chapel/test/trivial/roxana/: test_dead_var_decl.chpl 
Removed files:
	chapel/test/trivial/roxana/: test_dead_var_decl.future 

---------------------------------------------------------------------------

01/11/06 15:01:55 -- deitz

Log message:
	Functions that are not methods must have parenthesized argument lists.
	Updated .good and removed .future.

Modified files:
	chapel/test/trivial/bradc/entrypoint/: main2.good 
Removed files:
	chapel/test/trivial/bradc/entrypoint/: main2.future 

---------------------------------------------------------------------------

01/11/06 17:00:13 -- deitz

Log message:
	Fixed .good and removed .future.

Modified files:
	chapel/test/types/seq/bradc/: recordSeq.good 
Removed files:
	chapel/test/types/seq/bradc/: recordSeq.future 

---------------------------------------------------------------------------

01/12/06 09:03:17 -- jplevyak

Log message:
	Add support functions for Immediates: immediate_type(), new_ImmediateSymbol().
	Analysis now permits member names to be either symbols or string constants.
	resolve_call() now takes "name" and "partialTag" arguments.  A new wrapper
	for resolve_call() handles the case of a simple CallExpr.
	Fixed an issue with "Vec::remove": should use memmove for overlapping memcpy.
	Removed unnecessary argument to add_candidate()
	Added support for closures in the Interpreter.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/ifa/: clone.cpp fa.cpp prim_data.cpp 
	                      prim_data.dat 
	chapel/compiler/include/: astutil.h chplenum.h expr.h symbol.h 
	                          vec.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         runInterpreter.cpp 

---------------------------------------------------------------------------

01/12/06 10:39:42 -- jplevyak

Log message:
	Fix bug in the way unspecified/nil were handled.

Modified files:
	chapel/compiler/ifa/: clone.cpp 

---------------------------------------------------------------------------

01/12/06 11:54:32 -- deitz

Log message:
	Added code to the array module so that array elements are initialized.
	
	Removed and fixed a few array tests.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/: test_array_of_array1.chpl 
	                           test_domain1.chpl test_domain1.future 
	chapel/test/arrays/jplevyak/: simple-1.chpl simple-1.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_basic1a.future 
	chapel/test/arrays/jplevyak/: simple-1.future 

---------------------------------------------------------------------------

01/12/06 13:37:34 -- jplevyak

Log message:
	Fixup printing of objects in the interpreter.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/12/06 15:44:35 -- deitz

Log message:
	Fixed --no-infer to work when converting OP_GET_MEMBER and
	OP_SET_MEMBER as primitives.  Enabled this conversion.
	
	CURRENT REGRESSIONS:
	** classes/deitz/test_type_in_class3]
	** classes/deitz/test_type_in_class4]
	functions/bradc/typefn2]
	trivial/preston/tuple]
	** types/like/jplevyak/like-2]
	types/type_variables/deitz/test_instantiate_construct1]
	
	The ** tests have to do with accessing types out of classes, as in
	foo.t.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

01/12/06 17:30:34 -- jplevyak

Log message:
	Added support for showing source lines as part of single-stepping and
	  general context in interactive mode.
	Added "list", "up", "down" commands to the interpreter.

Modified files:
	chapel/compiler/include/: misc.h 
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

01/13/06 08:04:55 -- jplevyak

Log message:
	Rename is_union_class -> is_union_type

Modified files:
	chapel/compiler/ifa/: ast.cpp clone.cpp sym.cpp sym.h 

---------------------------------------------------------------------------

01/13/06 08:43:13 -- jplevyak

Log message:
	Primitives now have a enum PrimitiveKind for switch'ing on.
	CallExpr has two new methods: bool isPrim() and PrimitiveKind primKind();
	PrimitiveKind includes PRIMITIVE_NONE which is returned from
	  primKind() if CallExpr::primitive is NULL, for easy switch'ing.
	We should be able to remove opTag now and replace it completely with
	  primitives.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/include/: expr.h primitive.h 

---------------------------------------------------------------------------

01/13/06 08:50:22 -- jplevyak

Log message:
	Update REGRESSIONS

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

01/13/06 10:11:54 -- deitz

Log message:
	Allow -i and -b to be used simultaneously.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	                         runInterpreter.cpp 

---------------------------------------------------------------------------

01/13/06 10:29:32 -- jplevyak

Log message:
	Fix compilation error on sunos: switch to POSIX functions: strchr vs index
	Fix bug in get_file_line() (wasn't recognizing shift to new file)
	Removed old code for fake dispatch in interpreter.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

01/13/06 13:58:34 -- deitz

Log message:
	Fix to resolve_call of bad handling of nil dispatch.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/13/06 14:48:36 -- deitz

Log message:
	Removed OP_MOVE, replacing it with prim_move.
	
	Removed some unused OP_*.
	
	This is in preparation for replacing OP_* with PrimitiveOps.  Having
	two mechanisms is becoming increasingly unwieldy.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: expr.h primitive.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp createEntryPoint.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         runInterpreter.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp instantiate.cpp 
	                             removeNamedParameters.cpp 

---------------------------------------------------------------------------

01/13/06 16:06:58 -- jplevyak

Log message:
	Added new set_immediate_type() function.
	fixed a bug with PRIM_CAST and another in EXPR_COND

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/14/06 17:17:23 -- deitz

Log message:
	Removed OP_* to use more consistently PRIM_*.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp primitive.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: expr.h primitive.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         createEntryPoint.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         runInterpreter.cpp scopeResolve.cpp 
	chapel/compiler/traversals/: htmlview.cpp inlineFunctions.cpp 
	                             instantiate.cpp 
	                             removeNamedParameters.cpp 
	                             resolveSymbols.cpp view.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_class1.chpl 

---------------------------------------------------------------------------

01/16/06 11:18:58 -- jplevyak

Log message:
	Humm... seemed to have lost my change index() -> strchr().
	Hope it will take this time and fix the sun build.

Modified files:
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

01/16/06 11:27:03 -- jplevyak

Log message:
	  - added support for PRIM_GET_MEMBER/SET_MEMBER
	  - fixed printing of primitives in view.cpp
	  - fixed more cases for PRIM_ALLOC and PRIM_INIT:
	      handle type symbols, immediates and objects as templates
	  - fixed STRING_LENGTH: bad number of args
	  - fixed lots of error messages to be more consistent
	  - fix EVAL_STMT: was skipping subsequent statments in some case
	  - now we resolve default wrappers, both for normal calls and
	      constructors out of PRIM_INIT
	  - added support for globals
	  - "print" can now print globals
	  - added some error checking to normalize
	  - made call_resolve take an optional FnSymbol for
	      cases where the call has been pre-resolved or
	      for PRIM_INIT constructors
	  - added support for NamedExpr::print
	  - fixed CastExpr::print so that it can handle when newType is NULL

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: astutil.h 
	chapel/compiler/passes/: functionResolution.cpp 
	                         runInterpreter.cpp 

---------------------------------------------------------------------------

01/16/06 11:28:01 -- jplevyak

Log message:
	TODO list for interpreter

Added files:
	chapel/compiler/passes/: interpreter.todo 

---------------------------------------------------------------------------

01/16/06 11:54:14 -- deitz

Log message:
	Updated --formal-temps transform now that --use-alloc is default.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

01/16/06 11:55:06 -- deitz

Log message:
	Updated test output.

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

01/16/06 15:18:19 -- bradc

Log message:
	Getting cygwin platform ready for demo at PDR.  Added .cvsignore
	files for cygwin subdirectories and emacs support for version 21.3
	(by copying 21.4 implementation).

Modified files:
	chapel/compiler/ifa/: .cvsignore 
	chapel/compiler/ifa/make_prims/: .cvsignore 
Added files:
	chapel/etc/emacs/21.3/: cc-langs.el cc-menus.el cc-mode.el 
	                        font-lock.el 

---------------------------------------------------------------------------

01/16/06 16:42:43 -- jplevyak

Log message:
	Put a space between the AST type name and the primitive name.

Modified files:
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

01/16/06 17:51:17 -- jplevyak

Log message:
	 + added support for file operations in the interpreter
	
	SUCCESS: the interpreter now can handle simple programs:
	
	writeln(1 + 2);
	
	(of course it prints out "3\n")
	
	try it out!

Modified files:
	chapel/compiler/ifa/: num.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/16/06 19:44:19 -- deitz

Log message:
	Transformed user-level assignments into a _move of an assignment.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

01/16/06 19:45:29 -- deitz

Log message:
	Turned off structural typing of records.
	
	Added two flags
	
	  --no-pre-instantiate to turn off pre-instantiation.
	
	  --no-remove-on-pre-instantiate to turn off removal of generic
	      formals/actuals when pre-instantiating a type or function.

Modified files:
	chapel/compiler/ifa/: ast.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: instantiate.cpp 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 

---------------------------------------------------------------------------

01/16/06 19:49:04 -- deitz

Log message:
	Folded in some small early passes into cleanup thus paving the way to
	allow us to add new code easily to the AST (for example, in an
	interactive interpreter).  Currently normalize and possible
	scopeResolve may cause problems if they are called more than once on
	the same code, whereas cleanup will not.  I still want to fix this
	issue.
	
	Moved the buildDefaultFunctions pass after normalize and its functions
	are now built.  Removed the building of the class constructor and
	setters and getters from this pass and moved them into cleanup since
	they required a parsed AST rather than a normalized AST.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp symbol.cpp 
	chapel/compiler/include/: astutil.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	                         buildDefaultFunctions.cpp 
	                         buildDefaultFunctions.h cleanup.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Removed files:
	chapel/compiler/passes/: createEntryPoint.cpp createEntryPoint.h 
	chapel/compiler/traversals/: buildClassHierarchy.cpp 
	                             buildClassHierarchy.h 
	                             processImportExprs.cpp 
	                             processImportExprs.h 

---------------------------------------------------------------------------

01/16/06 20:45:40 -- deitz

Log message:
	Improved speed of cleanup due to a change in my last checkin.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

01/17/06 10:25:43 -- deitz

Log message:
	Updated .good.

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 

---------------------------------------------------------------------------

01/17/06 13:42:18 -- jplevyak

Log message:
	Added some basic test of the interpreter.
	These have the erroneous "1\n" output so they will have to be updated,
	  but I wanted to get them in as is for now.

Added files:
	chapel/test/interpreter/jplevyak/: COMPOPTS NOEXEC call-1.chpl 
	                                   call-1.good member-1.chpl 
	                                   member-1.good writeln-1.chpl 
	                                   writeln-1.good writeln-2.chpl 
	                                   writeln-2.good 

---------------------------------------------------------------------------

01/17/06 13:47:31 -- deitz

Log message:
	Changed early handling of member accesses so that to create a parsed
	statement like "x.y = z" one simply has to write:
	
	  new CallExpr("=", new CallExpr(".", x, y), z)
	
	where x and z are symbols and y is a string literal.
	
	The primitives PRIMITVE_GET_MEMBER and PRIMITIVE_SET_MEMBER are only
	introduced in setters, getters, and constructors, and specificially
	the compiler generated codes.  User-defined constructors are specially
	treated in a wrapped function, i.e., the user part is put in a
	function of its own and called.  User-defined getters and setters
	could eventually be handled the same way should we decide to support
	them.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	                         scopeResolve.cpp 

---------------------------------------------------------------------------

01/17/06 15:13:38 -- jplevyak

Log message:
	add watch points to the interpreter (break on read)
	add break on function name to the interpreter
	add NBlockHash::copy and NBlockHash::move

Modified files:
	chapel/compiler/include/: map.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/17/06 15:17:08 -- jplevyak

Log message:
	use Vec::set_in for testing breakpoints

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/17/06 16:08:51 -- jplevyak

Log message:
	Convert more Vec::in to Vec::set_in for efficiency.

Modified files:
	chapel/compiler/ifa/: clone.cpp fa.cpp 

---------------------------------------------------------------------------

01/17/06 16:49:42 -- jplevyak

Log message:
	update the interpreter so that it gets the same error as
	the compiler for Steve's generic record constuctor bug.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/17/06 18:09:51 -- jplevyak

Log message:
	Fix a bug in constant folding.  Regularized primitive names
	so that LNOT is logical not to match LAND as logical and.
	Added more interpreter tests of basic arithmetic operations.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 
	chapel/compiler/ifa/: num.cpp prim_data.cpp prim_data.dat 
	                      prim_data.h 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: arithmetic_ops-1.chpl 
	                                   arithmetic_ops-1.good 
	                                   assignment_expr-1.chpl 
	                                   assignment_expr-1.good 
	                                   bitwise_assignment-1.chpl 
	                                   bitwise_assignment-1.good 
	                                   bitwise_negation-1.chpl 
	                                   bitwise_negation-1.good 
	                                   bitwise_ops-1.chpl 
	                                   bitwise_ops-1.good 

---------------------------------------------------------------------------

01/17/06 23:25:02 -- jplevyak

Log message:
	Constant folding now doesn't modify the incoming arguments
	except the target (it used to coerce them).
	Added Immediate(Immediate &).
	Added new test case for equality ops.

Modified files:
	chapel/compiler/ifa/: num.cpp num.h 
Added files:
	chapel/test/interpreter/jplevyak/: equality_ops-1.chpl 
	                                   equality_ops-1.good 

---------------------------------------------------------------------------

01/18/06 09:04:21 -- jplevyak

Log message:
	Fix compilation error on SUSE 9.3

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

01/18/06 09:17:12 -- jplevyak

Log message:
	Fix conversion to bool, can't just cast, needed to add !!:
	   x = (bool)!!y

Modified files:
	chapel/compiler/ifa/: cast_code.cpp make_cast_code.cpp 

---------------------------------------------------------------------------

01/18/06 09:23:19 -- jplevyak

Log message:
	Fix coercion of logical operators.

Modified files:
	chapel/compiler/ifa/: num.cpp 

---------------------------------------------------------------------------

01/18/06 09:57:01 -- jplevyak

Log message:
	Fix but in logical operators.
	Added hack to unescape strings before printing them out.
	updated test files to have real newlines
	Added the compSampler! Working fine.

Modified files:
	chapel/compiler/ifa/: num.cpp 
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/test/interpreter/jplevyak/: arithmetic_ops-1.good 
	                                   assignment_expr-1.good 
	                                   bitwise_assignment-1.good 
	                                   bitwise_negation-1.good 
	                                   bitwise_ops-1.good 
	                                   call-1.good 
	                                   equality_ops-1.good 
	                                   member-1.good writeln-1.good 
	                                   writeln-2.good 
Added files:
	chapel/test/interpreter/jplevyak/: compSampler-1.chpl 
	                                   compSampler-1.good 

---------------------------------------------------------------------------

01/18/06 10:18:00 -- jplevyak

Log message:
	Fix bug in single stepping.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/18/06 10:21:27 -- jplevyak

Log message:
	Only intercept SIGINT if we are in interactive mode

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/18/06 11:09:27 -- deitz

Log message:
	Implemented folding of parameters as a part of normalization.  Some
	binary operators are now folded and some constants are now propagated.
	A constant value is only propagated if it is a primitive literal and
	it is stored in a variable that the user called a param or a const.
	
	Added a Vec<SymExpr*>* to the Symbol class which is filled in by the
	utility routine compute_sym_uses(BaseAST* base) which determines all
	of the uses (including defs) of a Symbol.  This is used to propagate
	literals and to test constness.
	
	This constant folding uses the folding designed for the interpreter.
	
	Turned off folding of string concatentation of string literals which
	is not yet handled.

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp 
	chapel/compiler/include/: astutil.h symbol.h 
	chapel/compiler/passes/: normalize.cpp semanticChecks.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  octalliteral.good 
	                                  pareninit.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good var.good 
	                                  var2.good whileLoop.good 
	chapel/test/trivial/roxana/: test_param_decl2.good 

---------------------------------------------------------------------------

01/18/06 11:15:22 -- deitz

Log message:
	Added two param folding test cases.
	
	Removed two .futures for tests that were waiting for param folding.

Added files:
	chapel/test/trivial/deitz/: test_param_fold1.chpl 
	                            test_param_fold1.good 
	                            test_param_fold2.chpl 
	                            test_param_fold2.good 
Removed files:
	chapel/test/trivial/roxana/: test_param_decl1.future 
	                             test_param_init.future 

---------------------------------------------------------------------------

01/18/06 11:53:48 -- jplevyak

Log message:
	Fixed some issues with gotos.  Added a bunch of test case.
	Added a .future for exit() which has some strange "module" issue.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: break-1.chpl break-1.good 
	                                   break-2.chpl break-2.good 
	                                   break-3.chpl break-3.good 
	                                   break-4.chpl break-4.good 
	                                   break-5.chpl break-5.good 
	                                   continue-1.chpl 
	                                   continue-1.good 
	                                   continue-2.chpl 
	                                   continue-2.good 
	                                   continue-3.chpl 
	                                   continue-3.good 
	                                   continue-4.chpl 
	                                   continue-4.good 
	                                   continue-5.chpl 
	                                   continue-5.good goto-1.chpl 
	                                   goto-1.good goto-2.chpl 
	                                   goto-2.good string-1.chpl 
	                                   string-1.good 
	                                   test_a_few_functions.good 
	                                   test_cond_expr-1.chpl 
	                                   test_cond_expr-1.good 
	chapel/test/trivial/deitz/: exit.future 

---------------------------------------------------------------------------

01/18/06 13:45:15 -- deitz

Log message:
	Added support for all standard operators to normalization parameter
	folding.  Added support for folding conditional statements and
	enabling conditional compilation based on parameters.  See
	
	  test/trivial/deitz/test_param_fold5.chpl
	
	as an example of wrapping a conditional around the printing of a
	variable that is never defined.
	
	Implemented USR_FATAL_CONT which generates a fatal user error message
	but does not exit the compiler until the end of the pass or until a
	fatal error is encountered.

Modified files:
	chapel/compiler/include/: misc.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: normalize.cpp scopeResolve.cpp 
	                         semanticChecks.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/classes/deitz/: test_bad_function_noparens.good 
	chapel/test/flowanalysis/newast/: unary_plusMinus.good 
Added files:
	chapel/test/trivial/deitz/: test_param_fold3.chpl 
	                            test_param_fold3.good 
	                            test_param_fold4.chpl 
	                            test_param_fold4.good 
	                            test_param_fold5.chpl 
	                            test_param_fold5.good 

---------------------------------------------------------------------------

01/18/06 15:22:19 -- shannon

Log message:
	Added the fread function for classes, and a
	test.  Updated the expected output for the
	affected tests.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/modules/standard/: prelude.chpl 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/types/file/: freadClass.chpl freadClass.good 

---------------------------------------------------------------------------

01/18/06 18:24:04 -- jplevyak

Log message:
	remove warning messages from low level resolve_call() and move up to
	higher level resolve_call() so that the interpreter can issue consistent
	error messages.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/18/06 18:55:42 -- jplevyak

Log message:
	reorg for future work on watching of variables by name

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/19/06 10:23:46 -- deitz

Log message:
	Removed .future for test that now works because parameters are folded.

Removed files:
	chapel/test/types/enum/deitz/: test_enum5.future 

---------------------------------------------------------------------------

01/19/06 10:55:24 -- jplevyak

Log message:
	Added new mode: interpreter ast vs. source mode.
	  in AST mode, we print, next, where, ect. showing all AST nodes
	  in source mode we generally show position and next/step via
	    source lines, though we still show the expression stack via AST nodes.
	Add new mode: insert vs. debug mode.
	  in inset mode commands to the interpreter start with :, while
	  other text is supposed to be new program code.
	  currently insert mode is not implemented beyond parsing the :
	Added list filename:lineno syntax and list lineno syntax.
	Add new option to set "interpreter ast mode" from command line.
	Bump compiler minor version number since it hasn't changed in a year
	  and we are gearing up for the demo.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp version_num.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/19/06 12:51:18 -- deitz

Log message:
	Made normalize work when it is called more than once.  As of this
	checkin, it is now called twice (like cleanup, for testing purposes).
	Instantiated functions are now normalized.
	
	Added a check to make sure the same function or the same type is not
	instantiated more than instantiation-limit number of times.  This
	limit can be set at the command line.  The default is currently 12.
	
	Added a test of recursive instantiation on a function and a test of
	infinite instantiation (that gives an error).
	
	Added USR_STOP macro which stops the compiler if any USR_FATAL_CONT
	errors have been encountered.  Otherwise, the compiler stops at the
	end of the current pass.
	
	Added USR_PRINT macro which is used to just print out a message to the
	user.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: driver.h misc.h symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/flowanalysis/newast/: domarr.good sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overinstantiate1.chpl 
	                                         test_overinstantiate1.good 
	                                         test_recursiveinstantiate1.chpl 
	                                         test_recursiveinstantiate1.good 

---------------------------------------------------------------------------

01/19/06 12:54:47 -- deitz

Log message:
	Added a test to capture a bug in if1 translation that shows up only
	when the instantiation limit for my overinstantiate test is increased.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overinstantiate1a.chpl 
	                                         test_overinstantiate1a.compopts 
	                                         test_overinstantiate1a.future 
	                                         test_overinstantiate1a.good 

---------------------------------------------------------------------------

01/19/06 12:55:55 -- deitz

Log message:
	Removed .future for working test.

Removed files:
	chapel/test/trivial/deitz/: exit.future 

---------------------------------------------------------------------------

01/19/06 13:34:49 -- deitz

Log message:
	Fixup of nil handling in resolve_call.  More changes coming soon that
	modify the dispatchParents.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/19/06 14:12:36 -- jplevyak

Log message:
	Added constant folding for primitive "exp" (pow).
	Fixed bug in to_string primitive for custom print strings.
	Fixed issues with "select... when..."
	Added test cases for above.

Modified files:
	chapel/compiler/ifa/: num.cpp num.h 
	chapel/compiler/passes/: runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: conditional-1.chpl 
	                                   conditional-1.good 
	                                   op_associativity-1.chpl 
	                                   op_associativity-1.good 
	                                   select-1.chpl select-1.good 
	                                   test_if_then_else.chpl 
	                                   test_if_then_else.good 
	                                   test_integer_method.chpl 
	                                   test_integer_method.good 

---------------------------------------------------------------------------

01/19/06 14:38:05 -- jplevyak

Log message:
	Fixed compiler warning on conversion of float to integer during
	folding.
	Fixed bug with "forall" loops and another with closures.
	current problem: can't dispatch:
	  !=(nil, class instance)

Modified files:
	chapel/compiler/ifa/: num.cpp 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/19/06 15:06:20 -- deitz

Log message:
	Added a defaultExpr to the type formals in instantiated functions.
	This gets the record test working without pre-instantiation.
	
	Added propagation of the dispatchParents and typeParents to
	instantiated types.  Cleaned up default wrapper function to handle
	type arguments with default values.
	
	Added a param variable record test.
	
	Fixed .good for test_overinstantiate1a.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_overinstantiate1a.good 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_record1.chpl 
	                                         test_paramvar_record1.good 

---------------------------------------------------------------------------

01/19/06 15:41:46 -- jplevyak

Log message:
	Fixed bug with type checking of primitives.
	Fixed bug in forall.
	Forall now working!  Added test case for forall.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: test_forall.chpl 
	                                   test_forall.good 

---------------------------------------------------------------------------

01/19/06 16:08:04 -- jplevyak

Log message:
	Fixed a bug with "var x;" declarations.
	Added new tests.
	A new regression equal-8.chpl because of problems resolving "this" functions.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: equal-1.chpl equal-1.good 
	                                   equal-2.chpl equal-2.good 
	                                   equal-3.chpl equal-3.good 
	                                   equal-4.chpl equal-4.good 
	                                   equal-5.chpl equal-5.good 
	                                   equal-6.chpl equal-6.good 
	                                   equal-7.chpl equal-7.good 
	                                   equal-8.chpl equal-8.good 
	                                   equal-9.chpl equal-9.good 

---------------------------------------------------------------------------

01/20/06 08:19:34 -- jplevyak

Log message:
	Change version in test results

Modified files:
	chapel/test/compflags/bradc/noexec/: version.goodstart 

---------------------------------------------------------------------------

01/20/06 09:50:13 -- deitz

Log message:
	Added support for homogeneous tuples where the multiplier is a
	parameter.  It must be an lvalue expression and the whole type must be
	in parentheses due to parsing difficulties (at least for now).  For example:
	
	  param rank = 3;
	  var x : (rank*integer);
	
	Added special support for folding parameters that are fields in
	generic classes.
	
	Made some minor changes/extensions to the tuple and domain module.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_htuple.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/memory/shannon/: jacobi.good printMemTable.good 

---------------------------------------------------------------------------

01/20/06 10:16:57 -- deitz

Log message:
	Added support for literal types to resolve_call.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/20/06 10:48:51 -- deitz

Log message:
	Added two new debugging functions:
	
	void print_view_prototypes(BaseAST* base, char* only_named = NULL);
	void print_view_functions(BaseAST* base, char* only_named = NULL);
	
	to print out all functions or function prototypes within an AST, for
	example, a module that have the same name as the second argument.  Or
	if the second argument is NULL, all the functions are printed out.

Modified files:
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

01/20/06 13:44:05 -- shannon

Log message:
	Increased the virtual memory use limit to 128M
	so the mallocOutOfMemory tests can compile.

Modified files:
	chapel/test/memory/shannon/outofmemory/: sub_test 

---------------------------------------------------------------------------

01/20/06 13:56:28 -- jplevyak

Log message:
	Handle nested variables in the interpreter (implemented with displays).
	Add test cases for nested variables.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: 
	                                   variables_in_nested_function-1.chpl 
	                                   variables_in_nested_function-1.good 
	                                   variables_in_nested_function-2.chpl 
	                                   variables_in_nested_function-2.good 

---------------------------------------------------------------------------

01/20/06 14:08:44 -- jplevyak

Log message:
	remove .future for file which is working
	add new tests for default parameter handling in the interpreter.
	  - one failure where an ambiguity should be recognized

Added files:
	chapel/test/interpreter/jplevyak/: test_default_param1.chpl 
	                                   test_default_param1.good 
	                                   test_default_param2.chpl 
	                                   test_default_param2.good 
	                                   test_default_param3.chpl 
	                                   test_default_param3.good 
Removed files:
	chapel/test/functions/deitz/: test_default_param3.future 

---------------------------------------------------------------------------

01/20/06 14:08:49 -- shannon

Log message:
	Added a future for reading into a class data
	member.  It fails due to the insertion of
	tmp variables in the generated C.  The value
	is read into a tmp variable and never copied
	back to the class data member.

Added files:
	chapel/test/types/file/: freadToClassDataMember.chpl 
	                         freadToClassDataMember.future 
	                         freadToClassDataMember.good 

---------------------------------------------------------------------------

01/20/06 15:17:11 -- jplevyak

Log message:
	use _tostring to implement _chpl_fwrite_float_help with "" format.
	make "" format mean the "Chapel default format" in the interpreter.
	updated test case

Modified files:
	chapel/test/interpreter/jplevyak/: 
	                                   variables_in_nested_function-1.good 

---------------------------------------------------------------------------

01/20/06 15:26:35 -- jplevyak

Log message:
	Add 3 tests for named parameters, 2 fail.

Added files:
	chapel/test/interpreter/jplevyak/: test_named_param1.chpl 
	                                   test_named_param1.good 
	                                   test_named_param2.chpl 
	                                   test_named_param2.good 
	                                   test_named_param3.chpl 
	                                   test_named_param3.good 

---------------------------------------------------------------------------

01/20/06 15:37:26 -- jplevyak

Log message:
	Fix a bug in handling of return.
	Add test cases for goto labels.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: label1.chpl label1.good 
	                                   label2.chpl label2.good 
	                                   label3.chpl label3.good 
	                                   label4.chpl label4.good 
	                                   label5.chpl label5.good 

---------------------------------------------------------------------------

01/20/06 15:52:59 -- deitz

Log message:
	Fixed small problem with tuple this function which used parameter
	intent argument of literal type.  This is unnecessary because the
	literal type mechanism should replace the parameter intent mechanism.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

01/22/06 20:36:28 -- jplevyak

Log message:
	Fix bug with NamedExpr which fixes the two named argument tests in the
	interpreter.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/23/06 08:27:07 -- jplevyak

Log message:
	Some platforms (Solaris) can have problems if GC_INIT is not
	called at the beginning of a program (which uses GC), so
	I added the call (when GC is enabled).
	Fixed a valgrind issue: uninitialized member variable.

Modified files:
	chapel/compiler/include/: chplalloc.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/23/06 13:43:32 -- jplevyak

Log message:
	Fixed linenumbers so that each BaseAST which is created is given the
	  linenumber of the first token of the production whose action it
	  is created in.
	 -- this require using yylloc and YYLOC_DEFAULT to update yystartlineno.
	    but overall required changing very few lines of code.
	
	Fixed a bug in default_wrapper construction whereby Vec::set_in was
	  being used on a non-set, changed to Vec::in which works on arrays.
	
	Patched around a problem with --gc-chpl-lineno
	
	  The problem is that it was putting
	     chpl_input_lineno = ...
	  assignments after each Stmt, but if that Stmt was a WhileStmt
	   (or generally and stmt with embeddded Stmts like CondStmt, ForallStmt)
	  then we would generate:
	
	  while (...)  chpl_input_lineno = ...;  {
	    body;
	  }
	
	  which doesn't work.  This patch only patches WhileStmt and
	  does so by adding an extra set of { :
	
	  while (...)  { chpl_input_lineno = ...;  {
	    body;
	  } }
	
	  so I leave the final solution to the author of codegen or
	  the --gc-chpl-lineno flag.
	
	Fixed a bug in "next" in the interpreter which would not
	restart single stepping if the function didn't have
	a ReturnStmt.  Turns out some functions don't (is this
	intentional?).

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: yy.h 
	chapel/compiler/parser/: chapel.y parser.cpp processTokens.cpp 
	chapel/compiler/passes/: cleanup.cpp runInterpreter.cpp 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: chain.good codegen_test.good 
	                                  compSampler.good 
	                                  danglingelse.good domarr.good 
	                                  globalref.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good protoast_test.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  usebeforedef.good 
	chapel/test/functions/deitz/: test_default_param3.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/modules/bradc/: nestedmodule.good 
	chapel/test/modules/bradc/manymodules/: manymodules.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

01/23/06 16:30:52 -- jplevyak

Log message:
	Fixup more line numbers based on the line number fix.

Modified files:
	chapel/test/flowanalysis/newast/: chain.good mutrec.good 
	                                  onearg.good 

---------------------------------------------------------------------------

01/24/06 11:52:05 -- jplevyak

Log message:
	Fixed compilation error from operator priority: add () around macro
	arguments.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

01/24/06 14:24:20 -- deitz

Log message:
	Reformatted.  Added warning notice, trademark page.

Modified files:
	braddoc/chapelCompArch/: .cvsignore chapelCompArch.tex 
Added files:
	braddoc/chapelCompArch/: tm.tex 

---------------------------------------------------------------------------

01/25/06 16:25:06 -- deitz

Log message:
	Fixed scope resolution handling of labels so that the scope of a label
	is the function.
	
	Fixed iteration over reversed arithmetic sequences so that
	
	  for i in 1..n by -1 do ...
	
	now goes from n downto 1.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp scopeResolve.cpp 
	chapel/modules/standard/: _chpl_seq.chpl prelude.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

01/25/06 16:28:32 -- deitz

Log message:
	Add some example codes from Mack's HIPS paper to the test suite.

Added files:
	chapel/test/functions/deitz/hips06/: adiags.chpl adiags.good 
	                                     fibonacci_squares.chpl 
	                                     fibonacci_squares.good 

---------------------------------------------------------------------------

01/26/06 08:39:16 -- jplevyak

Log message:
	Change EnumSymbol::type to point to the corresponding EnumType.
	Add support for casting of Enums to/from integers in the interpreter.
	Add test for enums which fails because we don't yet build coercion
	  wrappers in resolve_call()

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/passes/: runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: test_enum1.chpl 
	                                   test_enum1.good 

---------------------------------------------------------------------------

01/26/06 08:54:03 -- deitz

Log message:
	Fixed interpreter handling of array_set and array_index.  Added
	support for new primitive array_init.  With John's patch.
	
	Removed bad support for ill-defined class constructors.  We need to
	discuss this for the Chapel language.  I'll send out an email.
	
	Added support for an initialize method that is called by the default
	constructor thus allowing user code to be inserted into the
	constructor.
	
	Fixed the ddata class to use the array_set, array_index, and
	array_init primitives.
	
	This checkin gets arrays and htuples through the interpreter.
	arrays/deitz/jacobi.chpl takes a while but works.
	
	Changed domain implementation to use classes.
	
	New regressions discussed in REGRESSIONS file.  The constructor tests
	should be removed or futurized.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp 
	chapel/compiler/passes/: cleanup.cpp interpreter_ops.h 
	                         normalize.cpp runInterpreter.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_htuple.chpl 
	                          prelude.chpl 
	chapel/runtime/include/: chplrt.h 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: chain.good mutrec.good 
	                                  onearg.good sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

01/26/06 14:57:07 -- jplevyak

Log message:
	Reorg of various files to better modularize analysis and to remove
	the "geysa.h" header which was leftover from old naming conventions.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: baseAST.cpp bb.cpp 
	chapel/compiler/adt/: Makefile.share 
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/backend/: beautify.cpp 
	chapel/compiler/ifa/: Makefile Makefile.share ast.cpp ast.h 
	                      cdb.cpp cfg.cpp cg.cpp clone.cpp clone.h 
	                      code.h dead.cpp dom.cpp fa.cpp fa.h 
	                      fun.cpp graph.cpp graph.h html.cpp html.h 
	                      if1.cpp ifa.cpp ifa.h inline.cpp loop.cpp 
	                      make_cast_code.cpp num.cpp num.h 
	                      pattern.cpp pdb.cpp pnode.cpp prim.cpp 
	                      prim_data_incs.h region.cpp ssu.cpp 
	                      sym.cpp sym.h var.cpp 
	chapel/compiler/include/: alist.h analysis.h baseAST.h bb.h 
	                          driver.h primitive.h symscope.h type.h 
	chapel/compiler/main/: Makefile.share driver.cpp runpasses.cpp 
	chapel/compiler/passes/: pass.h runInterpreter.cpp 
	                         scopeResolve.cpp 
	chapel/compiler/test/: Makefile test_lib.cpp 
	chapel/compiler/traversals/: createNestedFuncIterators.h 
	                             findTypeVariables.h fixup.h 
	                             htmlview.cpp verify.cpp view.cpp 
	chapel/compiler/util/: Makefile.share misc.cpp 
Added files:
	chapel/compiler/ifa/: arg.cpp arg.h cast_code.cc defs.h fail.cpp 
	                      fail.h list.cpp list.h log.cpp log.h 
	                      map.cpp map.h test_adt.cpp vec.cpp vec.h 
	chapel/compiler/ifa/libifa/: Makefile ifa.1 ifa_defs.h main.cc 
	chapel/compiler/include/: chpl.h chpl_log.h 
Removed files:
	chapel/compiler/ifa/: cast_code.cpp 
	chapel/compiler/include/: geysa.h list.h log.h map.h vec.h 
	chapel/compiler/util/: log.cpp 

---------------------------------------------------------------------------

01/26/06 15:02:25 -- jplevyak

Log message:
	For computing library dependencies

Added files:
	chapel/compiler/ifa/libifa/: mkdep 

---------------------------------------------------------------------------

01/26/06 15:02:50 -- jplevyak

Log message:
	Fix issue with cast_code

Modified files:
	chapel/compiler/ifa/libifa/: Makefile 

---------------------------------------------------------------------------

01/26/06 15:50:54 -- deitz

Log message:
	During folding, added change of init primitive of a class constructor
	to nil.
	
	Fixed instantiation during resolve_call to only fire on generic
	parameters.  Once they are instantiated, they are no longer generic.
	
	Fixed instantiation to work when the generic types substitution was
	for a meta type.
	
	Fixed a bug in naming the new module during instantiation.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

01/26/06 16:04:28 -- jplevyak

Log message:
	Placeholders for the library

Modified files:
	chapel/compiler/ifa/libifa/: Makefile 
Added files:
	chapel/compiler/ifa/libifa/: COPYRIGHT README faq.html 
	                             index.html manual.html 

---------------------------------------------------------------------------

01/26/06 16:12:57 -- jplevyak

Log message:
	Fixup placeholders

Modified files:
	chapel/compiler/ifa/libifa/: Makefile index.html 

---------------------------------------------------------------------------

01/26/06 16:18:22 -- jplevyak

Log message:
	little more cleanup

Modified files:
	chapel/compiler/ifa/libifa/: index.html 

---------------------------------------------------------------------------

01/26/06 17:13:32 -- deitz

Log message:
	Improved error message for when compiler can't find module.
	
	Update a few .good files from my last checkin.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/test/flowanalysis/newast/: chain.good mutrec.good 
	                                  onearg.good 

---------------------------------------------------------------------------

01/26/06 17:46:55 -- deitz

Log message:
	Checking in some code for use with the demo.

Added files:
	chapel/test/demo/review_060130/: history_accumulator.chpl 
	                                 history_accumulator2.chpl 
	                                 jacobi.chpl 

---------------------------------------------------------------------------

01/27/06 14:16:47 -- deitz

Log message:
	Added parse_string functionality to parse a string of text inserted
	during interactive interpreter run.  The interpreter parses this
	string, inserts it into the AST at the end of _chpl_main, builds it
	(cleanup,scopeResolve,normalize), and, for now, calls print_view on it
	to spit out the code.  That's pretty useful alone.
	
	I think we want insert mode to run until it is at the end of the main
	function (just before returning).  If necessary we can run it until it
	reaches the last statement and put in a fake statement there.  Then
	the user can insert new code at the end of main which will execute
	completely, etc.
	
	Limitations.  The new code is currently stuck in a BlockStmt so it is
	possible to declare the same variable multiple times, but impossible
	to look at it.  I can fix this.  Errors encountered by the compiler
	should be handled differently in this mode.  We should complain and
	fall back to the interpreter, removing all newly inserted code.
	
	Also with this checkin, added ability to index 2D array with
	(integer,integer).
	
	Small change to jacobi.chpl demo program.

Modified files:
	chapel/compiler/include/: parser.h 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/demo/review_060130/: jacobi.chpl 

---------------------------------------------------------------------------

01/27/06 15:30:40 -- jplevyak

Log message:
	Run code in insert mode in interpreter.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/27/06 15:44:42 -- deitz

Log message:
	Made interpreter insert mode add list of statements to program, not
	block statements, which would affect scoping.
	
	There is a problem in scope resolution error detection in falsely
	believing that a variable is used before it is defined if you define
	it, run it, and then use it.

Modified files:
	chapel/compiler/include/: parser.h 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/27/06 16:05:01 -- jplevyak

Log message:
	Add -I option to put us in interpreter insert mode.
	Add space before type of option when the option os too long
	  and extends beyond it's row.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp runInterpreter.h 
	chapel/compiler/include/: driver.h 
	chapel/compiler/ifa/: arg.cpp 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

01/27/06 16:11:30 -- jplevyak

Log message:
	remove moved files.

Removed files:
	chapel/compiler/main/: arg.cpp arg.h 

---------------------------------------------------------------------------

01/27/06 16:48:48 -- jplevyak

Log message:
	Start interpreter from new lines instead of top of program.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/27/06 17:10:53 -- jplevyak

Log message:
	Attempt to get -I working without specifying a file, but it segfaults
	
	chpl -I
	
	... something strange about the way modules are initialized.

Modified files:
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 

---------------------------------------------------------------------------

01/27/06 17:32:29 -- deitz

Log message:
	Made chpl -I not require a filename.  If one is not provided, the
	program modules/standard/i.chpl is loaded as the user program.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         filesToAST.cpp 
Added files:
	chapel/modules/standard/: i.chpl 

---------------------------------------------------------------------------

01/27/06 17:33:31 -- deitz

Log message:
	Updated demo examples.
	
	Added range function to arithmetic domains so that range(dim) returns
	an arithmetic sequence for that dimension.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/demo/review_060130/: history_accumulator.good 
	                                 iterators.chpl iterators.good 
	                                 jacobi.good jacobi2.chpl 
	                                 jacobi2.good 

---------------------------------------------------------------------------

01/28/06 12:11:39 -- jplevyak

Log message:
	-I interactive mode now working.
	
	(gdb) b:compiler [827] % chpl -I --gdb
	Using host libthread_db library "/lib64/tls/libthread_db.so.1".
	Breakpoint 1 at 0x51a3bc: file misc.cpp, line 23.
	(gdb) r
	(chpl) writeln(1);;
	1
	(chpl) writeln(1 + 2);;
	3
	(chpl) :exit
	
	Program exited normally.
	(gdb)

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/28/06 12:12:30 -- jplevyak

Log message:
	Added Vec::set_remove()
	Tweak up -I mode

Modified files:
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/ifa/: vec.h 

---------------------------------------------------------------------------

01/28/06 12:44:53 -- jplevyak

Log message:
	Exit on EOF for non-readline version

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

01/28/06 23:05:23 -- deitz

Log message:
	Removed need for ';' in interactive interpreter.
	
	Removed def before use error checking.  This should be done in
	check_normalized rather than during scope resolution.  Expect an error
	test regression.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp scopeResolve.cpp 

---------------------------------------------------------------------------

01/30/06 10:18:17 -- jplevyak

Log message:
	Handle the line number code for empty productions better.
	Fix valgrind errors.

Modified files:
	chapel/compiler/parser/: chapel.y parser.cpp processTokens.cpp 

---------------------------------------------------------------------------

01/30/06 11:57:12 -- jplevyak

Log message:
	Fix line number for new YYLOC handling

Modified files:
	chapel/test/flowanalysis/newast/: chain.good codegen_test.good 
	                                  globalref.good 
	                                  multiple_return.good 
	                                  mutrec.good onearg.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  usebeforedef.good 

---------------------------------------------------------------------------

01/30/06 11:57:48 -- jplevyak

Log message:
	Fix line numbers

Modified files:
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

01/30/06 13:55:59 -- jplevyak

Log message:
	Move tagging of generics into normalize()

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share normalize.cpp 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
Removed files:
	chapel/compiler/passes/: preAnalysisCleanup.cpp 
	                         preAnalysisCleanup.h 

---------------------------------------------------------------------------

01/31/06 12:13:26 -- jplevyak

Log message:
	Fix line numbers

Modified files:
	chapel/test/modules/bradc/: nestedmodule.good 

---------------------------------------------------------------------------

01/31/06 12:32:32 -- jplevyak

Log message:
	More cleanup of libifa

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: Makefile.share arg.cpp arg.h cfg.cpp 
	                      code.h dead.cpp fa.cpp fail.cpp fail.h 
	                      fun.cpp if1.cpp ssu.cpp sym.cpp var.h 
	chapel/compiler/ifa/libifa/: COPYRIGHT Makefile ifa_defs.h 
	                             main.cc 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/util/: files.cpp misc.cpp mysystem.cpp 
Added files:
	chapel/compiler/ifa/libifa/: version.cc version.h 

---------------------------------------------------------------------------

01/31/06 19:05:55 -- jplevyak

Log message:
	Add new primitive PRIMITIVE_TYPE_EQUAL to test that a TypeSymbol
	matches the runtime type of some Expr.
	  This is supported in the interpreter, analysis, and in the runtime.
	Added a new macro _chpl_alloc in the runtime to tag ClassType objects
	  with their runtime type.  This is done by backing up the pointer
	  sizeof(_integer64) and then assigning Type::id to this hidden
	  location.
	Added support for converting dynamic dispatch into tree of
	  CondExpr.
	    - this results in a compile-time error for test_inherit3.chpl
	call_info() now optionally returns a Vec<Vec<Vec<Type *> *> *> *dispatch
	  which contains for each function for each argument the set of
	    Type's which dispatch to that function for that argument.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp num.h 
	chapel/compiler/ifa/libifa/: ifa_defs.h main.cc 
	chapel/compiler/include/: analysis.h primitive.h 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/compiler/traversals/: htmlview.cpp resolveSymbols.cpp 
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

02/01/06 09:17:40 -- jplevyak

Log message:
	Regularize error messages

Modified files:
	chapel/compiler/util/: files.cpp 
	chapel/test/compflags/bradc/missinginfile/: test.good 
	chapel/test/compflags/bradc/onebadfile/: badfile.good 

---------------------------------------------------------------------------

02/01/06 09:19:27 -- jplevyak

Log message:
	Regularize error messages

Modified files:
	chapel/compiler/util/: mysystem.cpp 

---------------------------------------------------------------------------

02/01/06 13:08:24 -- deitz

Log message:
	Fixup of demo folder to eliminate regressions of it.  Futurized
	iterators test.

Added files:
	chapel/test/demo/review_060130/: iterators.future 
	                                 jacobi2.compopts 
Removed files:
	chapel/test/demo/review_060130/: history_accumulator2.chpl 

---------------------------------------------------------------------------

02/01/06 15:26:49 -- deitz

Log message:
	Reworked 'use before def' error detection fixing many, but not all, of
	the bugs that crept in.  The rest of the fix coming soon.

Modified files:
	chapel/compiler/passes/: semanticChecks.cpp 
	chapel/test/arrays/deitz/: test_domain2D.chpl 
	chapel/test/functions/deitz/hips06/: fibonacci_squares.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_basic1a.future 

---------------------------------------------------------------------------

02/01/06 16:32:00 -- jplevyak

Log message:
	Library test code.

Modified files:
	chapel/compiler/ifa/: ast.h fail.cpp 
	chapel/compiler/ifa/libifa/: Makefile ifa_defs.h main.cc 
Added files:
	chapel/compiler/ifa/libifa/: ast_kinds.h ast_to_if1.cc 
	                             ast_to_if1.h c.g parse.cc parse.h 
	                             parse_structs.h prelude.v scope.cc 
	                             scope.h v.g 

---------------------------------------------------------------------------

02/01/06 16:47:09 -- jplevyak

Log message:
	Fix 2 cases where a non-fully qualified generic type was used:
	  var d : mydomain = mydomain(rank = 2);
	becomes
	  var d : mydomain(rank=2) = mydomain(rank = 2);
	added a test case to remind us to create a better error message for
	this.

Modified files:
	chapel/test/arrays/deitz/: test_domain2.chpl test_domain2D.chpl 
Added files:
	chapel/test/arrays/jplevyak/: test_domain2-error.chpl 
	                              test_domain2-error.future 
	                              test_domain2-error.good 

---------------------------------------------------------------------------

02/01/06 16:47:45 -- jplevyak

Log message:
	Catch the case where the interpreter tries to execute generic code.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

02/01/06 16:48:34 -- jplevyak

Log message:
	Just because something has a parameter of INTENT_TYPE it isn't
	necessarily generic (it could have been instantiated).

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

02/01/06 16:49:12 -- jplevyak

Log message:
	Mirror isGeneric from the AST to IF1

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

02/01/06 16:49:45 -- jplevyak

Log message:
	isGeneric is computed in normalize, so it shouldn't be copied
	when the FnSymbol is copied

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

02/01/06 16:52:52 -- jplevyak

Log message:
	Forgot two test files.

Added files:
	chapel/compiler/ifa/libifa/: make_ast.cc make_ast.h 

---------------------------------------------------------------------------

02/01/06 17:00:07 -- jplevyak

Log message:
	Create install directories

Modified files:
	chapel/compiler/ifa/libifa/: Makefile 

---------------------------------------------------------------------------

02/01/06 17:41:27 -- jplevyak

Log message:
	More work on tests.

Modified files:
	chapel/compiler/ifa/libifa/: ast_to_if1.cc parse.cc prelude.v 
	                             v.g 

---------------------------------------------------------------------------

02/02/06 14:58:31 -- deitz

Log message:
	Fixed the rest of the 'use before def' regressions.  These errors are
	now once again detected.

Modified files:
	chapel/compiler/passes/: scopeResolve.cpp semanticChecks.cpp 
	chapel/test/trivial/deitz/: test_scope2.chpl 

---------------------------------------------------------------------------

02/02/06 17:33:45 -- jplevyak

Log message:
	reply is now a primitive

Modified files:
	chapel/compiler/ifa/libifa/: ast_to_if1.cc 

---------------------------------------------------------------------------

02/02/06 18:09:55 -- jplevyak

Log message:
	Only do lookings for nested variables which are so labeled, and only
	  into the appropriate scope.
	The existing nested function tests pass, but the new test
	  fails because ArgSymbol's nesting depth is not determined.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

02/02/06 18:11:28 -- jplevyak

Log message:
	Don't check for nested lookups unless the current call frame is nested.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

02/02/06 19:53:19 -- jplevyak

Log message:
	Use defPoint->parentSymbol to determine nesting level.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

02/03/06 09:10:59 -- jplevyak

Log message:
	Kludge fix for SEGV for ArgSymbol with NULL parentSymbol.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

02/03/06 11:54:53 -- deitz

Log message:
	Normalized functions so that the last statement is always a return
	statement and it always returns a SymExpr of a symbol and so that
	these are the only return statements.  This is verified.
	
	Removed uses of CondExpr, instead creating a function containing a
	CondStmt and having an inline pragma.  Standardized this with the
	function that is build with let expressions.  They used to be inlined
	before analysis, but now they are inlined in the inlining pass.  This
	allows these functions to be treated normally so that we can use an
	if-expression in a return and turn it into a setter.
	
	Made codegen squelch printing of returns of voids from calls.
	
	Added a global "normalized" that is true after normalize has run,
	allowing us to do more verification of normalized AST.
	
	Added verification that all symbols used via a SymExpr that have a
	defPoint, have a defPoint that is in the AST (has a parentSymbol).
	Fixed numerous bugs.
	
	Folded resolveSymbols into resolve_analyzed as planned.  I did this
	now because otherwise the verification above would fail because the
	INIT primitive would point to the wrong type, making the verification
	above fail if that type was dead.
	
	Fixed pre-instantiation so that it only instantiates fully.  Added a
	catch to instantiate_generic to make sure that a function is fully
	instantiated only.
	
	Removed kludge fix to nesting_depth function for case where
	ArgSymbol::defPoint::parentSymbol was NULL.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h passes.h stmt.h symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp resolveAnalyzed.cpp 
	                         scopeResolve.cpp semanticChecks.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             createNestedFuncIterators.cpp 
	                             instantiate.cpp verify.cpp 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Removed files:
	chapel/compiler/traversals/: resolveSymbols.cpp resolveSymbols.h 

---------------------------------------------------------------------------

02/03/06 12:02:30 -- deitz

Log message:
	Updated expected output of these three tests.  We allocate an extra
	word now for the type id for a class.

Modified files:
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
	                             printMemTable2.good 

---------------------------------------------------------------------------

02/03/06 14:35:24 -- deitz

Log message:
	Changed constructor test cases to test new initialize function in
	class until we decide how we want to handle constructors.
	
	Update regressions file.
	
	Added new simple future test of while loop that will continue to fail
	until I normalize the while loop.

Modified files:
	chapel/test/: REGRESSIONS 
	chapel/test/classes/deitz/: test_class_construct1.chpl 
	chapel/test/types/type_variables/deitz/: 
	                                         test_instantiate_construct1.chpl 
	                                         test_instantiate_construct1.good 
Added files:
	chapel/test/trivial/deitz/: test_while1.chpl test_while1.future 
	                            test_while1.good 

---------------------------------------------------------------------------

02/03/06 14:51:01 -- deitz

Log message:
	Futurized three regressions doing something like class.t where t is a
	user type inside a class.  I can get this working again, but doing it
	right might take a little discussion.

Modified files:
	chapel/test/: REGRESSIONS 
Added files:
	chapel/test/classes/deitz/: test_type_in_class3.future 
	                            test_type_in_class4.future 
	chapel/test/types/like/jplevyak/: like-2.future 

---------------------------------------------------------------------------

02/03/06 15:16:23 -- deitz

Log message:
	Removed CondExpr BaseAST and related dead code.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/passes/: normalize.cpp runInterpreter.cpp 

---------------------------------------------------------------------------

02/06/06 10:16:24 -- deitz

Log message:
	Fixed a bug in interpreter/no-infer function resolution in detecting
	ambiguous function calls.  Fixed regression
	
	  test/interpreter/jplevyak/test_default_param3
	
	The error message does not yet print out candidates but they are
	captured in a vector.  We can figure this out when we discuss error
	reporting.

Modified files:
	chapel/compiler/include/: astutil.h misc.h 
	chapel/compiler/passes/: functionResolution.cpp 
	                         runInterpreter.cpp 
	chapel/test/interpreter/jplevyak/: test_default_param3.good 

---------------------------------------------------------------------------

02/06/06 10:21:18 -- shannon

Log message:
	Changed the assert command to take multiple
	arguments.  The first argument is the assert test;
	the other arguments are converted to writes.
	Added a test.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Added files:
	chapel/test/trivial/shannon/: multipleArgAssert.chpl 
	                              multipleArgAssert.good 

---------------------------------------------------------------------------

02/06/06 11:07:27 -- deitz

Log message:
	Added a bunch of type variable in function tests.  4 futures, 2 that
	work in the interpreter, but not in analysis.
	
	Added a nested function test that works.
	
	Added a few .cvsignore files.

Added files:
	chapel/test/demo/review_060130/: .cvsignore 
	chapel/test/functions/deitz/: test_nested1.chpl 
	                              test_nested1.good 
	chapel/test/interpreter/jplevyak/: .cvsignore 
	chapel/test/types/type_variables/deitz/functions/: .cvsignore 
	                                                   test_foo1.chpl 
	                                                   test_foo1.good 
	                                                   test_foo2.chpl 
	                                                   test_foo2.future 
	                                                   test_foo2.good 
	                                                   test_foo3.chpl 
	                                                   test_foo3.good 
	                                                   test_foo4.chpl 
	                                                   test_foo4.good 
	                                                   test_foo5-error.chpl 
	                                                   test_foo5-error.future 
	                                                   test_foo5-error.good 
	                                                   test_foo5.chpl 
	                                                   test_foo5.future 
	                                                   test_foo5.good 
	                                                   test_foo6.chpl 
	                                                   test_foo6.future 
	                                                   test_foo6.good 
	                                                   test_foo7.chpl 
	                                                   test_foo7.future 
	                                                   test_foo7.good 

---------------------------------------------------------------------------

02/06/06 12:55:19 -- deitz

Log message:
	Simplified resolve_type code in resolve_analyzed pass.  Added error
	checking if analysis returns dtUnknown for a type.  This is now
	catching the problem in trivial/deitz/test_let7.chpl, one of the
	regressions, earlier.
	
	Added a small hack for the case where analysis says a symbol is an
	integer, but it is really an enum.  We take the enum type if that is
	what we used to have.  John, I can remove this hack if you want to
	take a look.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: resolveAnalyzed.cpp 

---------------------------------------------------------------------------

02/06/06 13:55:18 -- deitz

Log message:
	Folded removeNamedParameters into resolveAnalyzed.
	
	Removed some unnecessary kludge.

Modified files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/compiler/include/: astutil.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: functionResolution.cpp 
	                         resolveAnalyzed.cpp 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: removeNamedParameters.cpp 
	                             removeNamedParameters.h 

---------------------------------------------------------------------------

02/06/06 14:10:39 -- deitz

Log message:
	Minor fixes to dynamic dispatch code and addition of one working test.
	I still need to insert cast or temp assignment code so that the types
	workout in C.

Modified files:
	chapel/compiler/passes/: normalize.cpp resolveAnalyzed.cpp 
Added files:
	chapel/test/classes/deitz/inherit/: test_inherit4.chpl 
	                                    test_inherit4.good 

---------------------------------------------------------------------------

02/06/06 14:12:18 -- deitz

Log message:
	Added a test that shows we are not even catching basic constant
	assignment errors since lowering the AST.

Added files:
	chapel/test/trivial/deitz/: test_assign_const.chpl 
	                            test_assign_const.future 
	                            test_assign_const.good 

---------------------------------------------------------------------------

02/06/06 16:50:53 -- deitz

Log message:
	Patched up the init function of modules that are created as a result
	of a type being instantiated.  These modules do not require a run-once
	test and should be made lightweight.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: cleanup.cpp resolveAnalyzed.cpp 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

02/06/06 16:52:59 -- deitz

Log message:
	Folded removeTypeVariableActuals and removeTypeVariableFormals into
	resolve_analyzed as functions called remove_static_actuals and
	remove_static_formals to better describe what is being removed, the
	static arguments to a function that do not need to be generated at
	runtime.
	
	Removed unused traversal findTypeVariables.

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp 
	chapel/compiler/include/: astutil.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: functionResolution.cpp 
	                         resolveAnalyzed.cpp 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: findTypeVariables.cpp 
	                             findTypeVariables.h 
	                             findUnknownTypes.cpp 
	                             findUnknownTypes.h 

---------------------------------------------------------------------------

02/06/06 21:18:20 -- jplevyak

Log message:
	Add environment variable: CHPL_NO_PRE_INSTANTIATION to ease testing.
	The genericSymbols of a Type no longer include all the genericSymbols
	  of all member functions (fix bug).
	Enable CHECK_INSTANTIATION in pattern.cpp which checks that things
	  are instantiated which should be.
	Big changes to generic handling in pattern.cpp: fix unification
	  of parameters, instantiated types with their generic versions
	formal_to_generic now returns returns "bind to value" or "bind to type"
	  for handling parameters in a uniform manner.
	This checkin goes a long way toward --no-pre-instantiate

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: fa.cpp ifa.h pattern.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

02/07/06 10:08:04 -- deitz

Log message:
	Added support for tuples of size 1.  They are automatically converted
	to the type.  So 1*integer is the same as integer.  Added a couple
	homogeneous test cases.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Added files:
	chapel/test/types/tuple/deitz/: test_htuple6.chpl 
	                                test_htuple6.good 
	                                test_htuple7.chpl 
	                                test_htuple7.good 

---------------------------------------------------------------------------

02/07/06 10:12:27 -- deitz

Log message:
	Fixed codegen with --no-pre-instantiate for _data_construct macro.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

02/07/06 10:56:20 -- deitz

Log message:
	Added a few iterator test cases.

Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator1.chpl 
	                                        test_instantiate_iterator1.good 
	                                        test_instantiate_iterator2.chpl 
	                                        test_instantiate_iterator2.future 
	                                        test_instantiate_iterator2.good 

---------------------------------------------------------------------------

02/07/06 12:26:59 -- shannon

Log message:
	Added the EOF variable to the prelude so I
	could test for EOF on all reads.  Updated the
	output of an affected test.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl prelude.chpl 
	chapel/runtime/src/: chplio.c 
	chapel/test/types/file/: freadIntFailed.good 

---------------------------------------------------------------------------

02/07/06 14:00:21 -- deitz

Log message:
	Fixed a bug with default wrappers of methods.  Added a test case of
	default wrappers of methods that fails in analysis.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/functions/deitz/iterators/: .cvsignore 
	chapel/test/functions/deitz/methods/: .cvsignore 
	                                      test_default_arg.chpl 
	                                      test_default_arg.future 
	                                      test_default_arg.good 

---------------------------------------------------------------------------

02/07/06 14:46:40 -- deitz

Log message:
	Remove .future for test now working because of folding together of
	resolve_analyzed work into one pass.

Removed files:
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo2.future 

---------------------------------------------------------------------------

02/07/06 19:22:29 -- jplevyak

Log message:
	Removed the restriction whereby methods needed to be invoked
	  as (x.f)(1,2).
	Now, they can be invoked as f(_methodToken, f, 1, 2) as well.  The
	  (x.f)(1,2) way should still be used if there is a chance that f may
	  be a no-parens (accessor) member function.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

02/07/06 19:56:38 -- deitz

Log message:
	Reworked arrays and domains to use a _build_array and _build_domain
	function.  Simplified the implementation removing some kruft.
	
	Removed 'keep types' pragma as it is no longer necessary for
	_data_construct with the normalized AST.
	
	Fixed up many array tests to use brackets for domains.  With the
	changes above, a few more array tests should now start working.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp resolveAnalyzed.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl prelude.chpl 
	chapel/test/arrays/deitz/: jacobi3.chpl test_anon_domain1.chpl 
	                           test_anon_domain2.chpl 
	                           test_array_assign2.chpl 
	                           test_array_assign3.chpl 
	                           test_array_integer_3d.chpl 
	                           test_array_of_record1.chpl 
	                           test_array_of_string2.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/distributions/bradc/foundations/: blockdist3.chpl 
	chapel/test/domains/bradc/: paramRank.chpl 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/functions/bradc/: intents-arrays2.chpl 
	                              intents-arrays2a.chpl 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/reductions/bradc/manual/: identisinferredvar.chpl 
	                                      identisvar.chpl 
	                                      inferstatetype.chpl 
	                                      inferstatetype2.chpl 
	                                      manual.chpl 
	                                      threeuses-cast.chpl 
	                                      threeuses.chpl 
	                                      twouses.chpl usestate.chpl 
	                                      usestate2.chpl 
	chapel/test/trivial/bradc/: declprintdom2.chpl 
	                            declprintdom2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_class2.chpl 
	                           test_array_class2.future 
	                           test_array_class2.good 

---------------------------------------------------------------------------

02/07/06 19:58:35 -- deitz

Log message:
	Fixed up two more array tests, removing one .future.

Modified files:
	chapel/test/arrays/bradc/: domarr1a.chpl domarr1a.good 
	                           domarr2.chpl 
Removed files:
	chapel/test/arrays/bradc/: domarr1a.future 

---------------------------------------------------------------------------

02/08/06 09:43:27 -- deitz

Log message:
	Add .future for test_domains_5D which will now require more
	rank-independent implementation techniques for domains.

Added files:
	chapel/test/arrays/deitz/: test_domains_5D.future 

---------------------------------------------------------------------------

02/08/06 09:47:18 -- deitz

Log message:
	Removed .futures for now working tests.

Removed files:
	chapel/test/arrays/deitz/: test_anon_domain1.future 
	                           test_anon_domain2.future 
	chapel/test/functions/deitz/methods/: test_default_arg.future 
	chapel/test/reductions/bradc/manual/: identisinferredvar.future 
	                                      identisvar.future 
	                                      inferstatetype.future 
	                                      inferstatetype2.future 
	                                      manual.future 
	                                      usestate.future 
	                                      usestate2.future 
	chapel/test/trivial/bradc/: declprintdom2.future 

---------------------------------------------------------------------------

02/08/06 14:45:41 -- jplevyak

Log message:
	Change collect_asts to collect the MetaType and corresponding TypeSymbol
	  for each Type it collects.
	Change type hierarchy such that all types specialize and implement their
	  mata type so that values can be passed to type parameters.
	Hack codegen to ignore syms without a parentScope (i.e. MetaType).
	Hack pattern matching of exactMatch so that values can match Types
	  (this will not be required after pre-instantiation has been removed).

Modified files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp pattern.cpp 
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

02/08/06 14:49:40 -- deitz

Log message:
	Fixed a problem in naming new modules where they weren't unique.  They
	now all are because I now put a number at the beginning of their
	names.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

02/08/06 16:32:02 -- deitz

Log message:
	Lowered and removed WhileLoopStmt from the AST.  All high-level AST
	information is retained in the BlockStmt.  Added new blockTypes
	BLOCK_DO_WHILE and BLOCK_WHILE_DO to indicate that this BlockStmt is a
	while loop.  This is used, for example, by scope resolution early on
	to resolve break and continue statements without labels.  It also
	retains some high-level information in the event that we want to test
	ourselves in reconstructing it.
	
	The lowering transformation changes
	
	  while expr {
	    stmts;
	  }
	
	to
	
	  label _pre_loop;
	  if expr {
	    stmts;
	    goto _pre_loop;
	  }
	  label _post_loop;
	
	and
	
	  do {
	    stmts;
	  } while expr;
	
	to
	
	  label _pre_loop;
	  {
	    stmts;
	  }
	  if expr goto _pre_loop;
	  label _post_loop;
	
	The _post_loop labels are used for break statements.  They can also
	serve as markers if necessary.
	
	Created new file, build.h and build.cpp, to contain code used by the
	parser to construct Chapel things.  Moved build_if_expr and
	build_let_expr into this file.  And added new build_while_do_block and
	build_do_while_block.
	
	Added build_for_block to wrap a ForLoopStmt and provide labels for
	breaks and continues within for loops.
	
	Removed .future for trivial/deitz/test_while1 which uses a slightly
	more complicated conditional in the while loop and which used to be
	handled incorrectly.

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp bb.cpp expr.cpp 
	                      stmt.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h 
	chapel/compiler/parser/: chapel.y lexyacc.h 
	chapel/compiler/passes/: resolveAnalyzed.cpp runInterpreter.cpp 
	                         scopeResolve.cpp 
	chapel/compiler/traversals/: htmlview.cpp 
Added files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/test/trivial/deitz/: test_unused_label.chpl 
	                            test_unused_label.good 
Removed files:
	chapel/test/trivial/deitz/: test_while1.future 

---------------------------------------------------------------------------

02/08/06 18:59:51 -- deitz

Log message:
	Disabled pre-instantiation.
	
	Futurized three array tests that specifically type the index type as
	(integer, integer) requiring regular tuples to be unified with
	homogeneous tuples in such cases.
	
	Made the MetaType no codegen hack more specific to MetaTypes.
	
	Added support for folding of types when temps are inserted.
	
	Removed need for "instantiate multidimensional iterator" for
	rank-independent arithmetic domain implementation instead doing it in
	the module using a recursively instantiated iterator.
	
	Added several instantiated iterator test cases, one future.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: codegen.cpp normalize.cpp 
	chapel/compiler/traversals/: instantiate.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/test/arrays/deitz/: test_array_2Da.future 
	                           test_array_2Db.future 
	                           test_domains_2Db.future 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator2a.chpl 
	                                        test_instantiate_iterator2a.future 
	                                        test_instantiate_iterator2a.good 
	                                        test_instantiate_iterator3.chpl 
	                                        test_instantiate_iterator3.good 
	                                        test_instantiate_iterator3a.chpl 
	                                        test_instantiate_iterator3a.good 

---------------------------------------------------------------------------

02/09/06 09:03:46 -- deitz

Log message:
	Removed .futures for two new passing tests of iterators.

Removed files:
	chapel/test/demo/review_060130/: iterators.future 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator2.future 

---------------------------------------------------------------------------

02/09/06 11:04:57 -- deitz

Log message:
	Removed dead pre-instantiation code.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: instantiate.cpp instantiate.h 

---------------------------------------------------------------------------

02/09/06 11:05:59 -- deitz

Log message:
	Removed dead code to instantiate multidimensional iterators for
	arithmetic domains.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

02/09/06 14:43:23 -- deitz

Log message:
	Tests of inference of types of fields.  These tests also capture part
	of an iterator implementation strategy.

Added files:
	chapel/test/classes/deitz/infer/: infer_field1.chpl 
	                                  infer_field1.good 
	                                  infer_field2.chpl 
	                                  infer_field2.future 
	                                  infer_field2.good 
	                                  infer_field2a.chpl 
	                                  infer_field2a.good 

---------------------------------------------------------------------------

02/09/06 14:44:57 -- deitz

Log message:
	Tests of when a tuple formal uses a previous formal for its rank.  The
	error case does not produce an error in both interpreter and analysis
	function resolution.

Added files:
	chapel/test/types/tuple/deitz/: test_param_tuple_arg1-error.chpl 
	                                test_param_tuple_arg1-error.future 
	                                test_param_tuple_arg1-error.good 
	                                test_param_tuple_arg1.chpl 
	                                test_param_tuple_arg1.good 

---------------------------------------------------------------------------

02/09/06 15:09:17 -- jplevyak

Log message:
	Partial evaluation/currying now works through analysis.
	Fails in codegen.  Need to specialise the clone of the new dtClosure type
	for each closure, and build the appropriate runtime support.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp builtin_symbols.h clone.cpp fa.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: prelude.chpl 
	chapel/test/classes/deitz/: test_method_call2.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/functions/jplevyak/: partial-1.chpl partial-1.good 
	                                 partial-2.chpl partial-2.good 

---------------------------------------------------------------------------

02/10/06 06:59:40 -- jplevyak

Log message:
	partial-1.chpl and partial-2.chpl now work in the interpreter.
	There is a new function new_Closure(int members) which creates a
	  new subclass of dtClosure with the given number of members.
	Cloning now uses new_Closure() to clone dtClosure.
	There is a new version of resolve_member() which takes a
	  member index instead of a VarSymbol (for use with things like
	  Tuples and Closures where the member names are fake/arbitrary).
	Reworked install_new_asts() to not require a FnSymbol (so that
	  the result of new_Closure() can be integrated into the IF1
	  representation of the program).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: clone.cpp ifa.h sym.cpp sym.h 
	chapel/compiler/include/: analysis.h type.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

02/10/06 09:20:41 -- deitz

Log message:
	Added support for 3D arithmetic domains as a placeholder until the
	variable arguments work is complete.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

02/10/06 09:20:55 -- deitz

Log message:
	Added initial support for writing functions that take a variable
	number of arguments.  A formal is replicated if it is followed by
	"...n" where n is a param.  So to write a function that takes two
	integers, we could write
	
	  function foo(is : integer ...2) {
	    writeln(is(1), " and ", is(2));
	  }
	
	The arguments are put in a tuple which can then be indexed into.  If
	the type is specified, a homogeneous tuple is created.  Otherwise, a
	standard tuple is created.  With tuple unification, a homogeneous
	tuple will be created whenever all the types are the same.
	
	Though not yet implemented, a variable number of arguments can be
	passed in using the syntax
	
	  function foo(is : integer ...?n) {
	    for i in 1..n do
	      writeln(is(i));
	  }
	
	Here, n captures the number of integers that are passed in.
	
	Support for this is implemented in normalization.  So for the first
	example, the function
	
	  function foo(_e0_is : integer, _e1_is : integer) {
	    var is = (_e0_is, _e1_is);
	    ...
	  }
	
	is created during normalization.
	
	For supporting variable number of arguments, I plan on creating every
	possible function during normalization.  I haven't thought about how
	to determine the maximum number in the presence of currying.
	
	Added several test cases.  Two futures.  One problem is when the param
	is an argument as in
	
	  function foo(param n : integer, is : integer ...n)
	
	In this case, the function needs to be instantiated even though the
	number of actuals didn't match the number of formals.  This is
	captured in
	
	  test/functions/deitz/varargs/test_varargs3.chpl
	
	The other problem is for a method in a class where the param comes
	from the class.  The apply_getters_setters function is not applying to
	formals because of a problem in the get_ast_children.  I'm looking
	into this now.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/classes/deitz/: test_dot1.chpl test_dot1.good 
	chapel/test/functions/deitz/varargs/: test_varargs1.chpl 
	                                      test_varargs1.good 
	                                      test_varargs2.chpl 
	                                      test_varargs2.good 
	                                      test_varargs3.chpl 
	                                      test_varargs3.future 
	                                      test_varargs3.good 
	                                      test_varargs4.chpl 
	                                      test_varargs4.good 
	                                      test_varargs5.chpl 
	                                      test_varargs5.good 
	                                      test_varargs6.chpl 
	                                      test_varargs6.good 
	                                      test_varargs7.chpl 
	                                      test_varargs7.future 
	                                      test_varargs7.good 

---------------------------------------------------------------------------

02/10/06 13:44:13 -- deitz

Log message:
	Reworked apply_getters_setters to use Vec of BaseAST via collect_asts.
	This fixes a bug in which not all expressions were handled.  Removed
	future for test/functions/deitz/varargs/test_varargs7.chpl.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Removed files:
	chapel/test/functions/deitz/varargs/: test_varargs7.future 

---------------------------------------------------------------------------

02/13/06 13:13:13 -- deitz

Log message:
	Added support for unknown number of variable arguments as in
	
	  function foo(i : integer ...?num) {
	
	where num is a param set to the number of i's that are passed in to
	this routine.  It can be named anything.
	
	Moved creation of tuple types after normalization to
	buildDefaultFunctions so that we can create all that we need at that
	point.  We have a little difficulty creating new tuples because we put
	them in the _chpl_htuple module and then need to renormalize that
	module after building new ones.
	
	Used variable argument functions to implement domains in a completely
	rank-independent way.  Domains of arbitrary rank are now supported.
	Removed future for 5D domains.
	
	Our handling of tuples of size 1 as in 1*integer is a bit weird in
	that we transform this into an integer.  I think we should leave it as
	a 1-tuple and force it to be indexed, making the code more consistent
	in the case where rank is 1, and the user wrote rank*integer.  In the
	case of variable arguments, this would allow the user to always index
	into the variable argument.
	
	Cleaned up domain code.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         normalize.cpp scopeResolve.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/functions/deitz/varargs/: test_varargs8.chpl 
	                                      test_varargs8.good 
	                                      test_varargs9.chpl 
	                                      test_varargs9.good 
Removed files:
	chapel/test/arrays/deitz/: test_domains_5D.future 

---------------------------------------------------------------------------

02/13/06 13:14:19 -- deitz

Log message:
	Added a couple test cases for sequence promotion of scalar functions.

Added files:
	chapel/test/arrays/deitz/: test_scalar_promote1.chpl 
	                           test_scalar_promote1.future 
	                           test_scalar_promote1.good 
	                           test_scalar_promote2.chpl 
	                           test_scalar_promote2.future 
	                           test_scalar_promote2.good 

---------------------------------------------------------------------------

02/13/06 13:18:51 -- deitz

Log message:
	Added two more tests of state transform of iterators.

Added files:
	chapel/test/classes/deitz/infer/: infer_field2b.chpl 
	                                  infer_field2b.good 

---------------------------------------------------------------------------

02/14/06 10:45:41 -- deitz

Log message:
	Small cleanup of lining code and domain module.
	
	Added a few goto tests that we may want to generate errors for.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: danglingelse.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/trivial/deitz/: test_goto1.chpl test_goto1.future 
	                            test_goto1.good test_goto2.chpl 
	                            test_goto2.future test_goto2.good 

---------------------------------------------------------------------------

02/15/06 10:11:40 -- jplevyak

Log message:
	Add _methodTokenType and _setterTokenType to chpltypes.h
	(might be able to remove these when the prelude disappears).
	Cloning now updates the set of creators for
	  closures.
	type_info now reports function names as dtString.
	sum types are now put at the front of the compilerModule
	  so they can be used by subsequent closure types.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: clone.cpp 
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

02/15/06 10:19:30 -- deitz

Log message:
	Added a new module _chpl_base to replace prelude and moved a bunch of
	things there, including all numeric operators and string operators,
	changing the builtin pragma to an inline pragma.  This inlines the
	primitive rather than switching to it manually in the compiler.  Same
	end result, cleaner implementation.
	
	Added ability to generate code for primitives that are not standard
	(such as PRIMITIVE_NOTEQUAL).  The idea is to add "_chpl_" to the
	front of the name of the primitive.  Then this function can be
	implemented in the runtime.  Made ptr_eq and ptr_neq primitives
	standard (so they have enum names PRIMITIVE_PTR_EQUAL and
	PRIMITIVE_PTR_NOTEQUAL).
	
	Removed dtTuple, dtDomain, dtArray, dtSequence, and dtLocale plus
	relevant code.  Left sym_tuple support in analysis, and added dtUnused
	to interface with it.  Added a class _unused_class to _chpl_base.  It
	should never be used.
	
	Removed unused items from the prelude, e.g., min function, min class,
	reduction class, timer class, Array record, _seq class.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: primitive.h runtime.h type.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: codegen.cpp filesToAST.cpp 
	chapel/modules/standard/: _chpl_seq.chpl _chpl_standard.chpl 
	                          prelude.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: danglingelse.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

02/15/06 14:14:00 -- deitz

Log message:
	Removed more code from the prelude, adding it to _chpl_base.  Removed
	sizeof function prototype altogether along with associated primitive.
	
	Moved methodToken and setterToken into _chpl_base.  Removed related
	from runtime.

Modified files:
	chapel/compiler/AST/: primitive.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: _chpl_base.chpl prelude.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

02/15/06 14:38:07 -- deitz

Log message:
	Working test of overloading a function with type intent vs. integer.

Added files:
	chapel/test/functions/deitz/: test_overload_type_intent.chpl 
	                              test_overload_type_intent.good 

---------------------------------------------------------------------------

02/15/06 16:07:08 -- deitz

Log message:
	Cleanup of inlining so that it inlines the statements in the function,
	not the BlockStmt body, resulting in cleaner code.  Also removed an
	extra temporary for the return value now that the function is
	normalized.
	
	Added Expr* FnSymbol::retExpr to store the return expression of a
	function.  It is removed during normalization.  It takes the place of
	using DefExpr::exprType for FnSymbol.  This helped fix a bug in which
	the return expression was not in the proper scope.
	
	Simplified iterator reconstruction.  An iterator now requires a return
	type expression.  This is temporary until we have a normalization of
	iterators.
	
	Fixed construction of CondStmt to remove an extra BlockStmt.
	
	Removed "typeof" function.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         normalize.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             inlineFunctions.h 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	chapel/test/arrays/deitz/: test_domain2D.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/functions/deitz/: test_forallexpr1.future 

---------------------------------------------------------------------------

02/16/06 09:05:16 -- jplevyak

Log message:
	Implement closures (sans dynamic dispach and correct visibility)
	Add the concept of a symbol to the runtime/IF which is unique
	  and can be used to represent the set of functions with a particular name.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         resolveAnalyzed.cpp 
	chapel/runtime/etc/: Makefile.macros 
	chapel/runtime/include/: chplmem.h chpltypes.h 

---------------------------------------------------------------------------

02/16/06 09:07:12 -- deitz

Log message:
	Fixed a bug in parsing of homogeneous tuples in which a tuple of a
	complex type could not be formed.  Now we allow things like
	"3*(integer, integer)" though this will have trouble outside of the
	interpreter because we don't initialize _ddata well.
	
	Removed unnecessary array/domain hacks from the compiler due to an
	earlier simplification of the code.
	
	Added a _domain base class of _adomain.  Simplified some domain,
	array, and sequence code.
	
	Added a homogeneous tuple of tuple test which fails for the above
	mentioned trouble.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/types/tuple/deitz/: test_htuple_of_tuple.chpl 
	                                test_htuple_of_tuple.future 
	                                test_htuple_of_tuple.good 

---------------------------------------------------------------------------

02/16/06 18:06:55 -- jplevyak

Log message:
	Turn on caching of function dispatches to speed compilation.

Modified files:
	chapel/compiler/ifa/: fa.cpp pattern.cpp 

---------------------------------------------------------------------------

02/16/06 18:21:18 -- jplevyak

Log message:
	Closures calling closures now works.
	We now build the closure classes after analysis,
	  this proved rather tricky:
	    - needed to disable removing of static arguments
	      for the closure constructor so we can include
	      methodToken within a closure
	Instantiated types now have a typeParent which is the original type.
	There is a function "complete_closure" which uses the results
	  of analysis to build the members for each closue
	  we could use the same technique for tuples
	Now use to_AST_type for member_info.
	Closures are again tagged with PARTIAL_ALWAYS in chapel.y
	The "this" variable in the constructor now has the type of the
	  thing created.
	There is a new module: _chpl_closure (like _chpl_tuple)

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: runtime.h type.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         filesToAST.cpp normalize.cpp 
	                         resolveAnalyzed.cpp 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/modules/standard/: _chpl_standard.chpl prelude.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/modules/standard/: _chpl_closure.chpl 

---------------------------------------------------------------------------

02/16/06 18:41:01 -- jplevyak

Log message:
	Fix output

Modified files:
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

02/17/06 06:18:37 -- jplevyak

Log message:
	Make the disabling of method and setter tokens for constructors
	  symetric.  Update one .good file.

Modified files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

02/17/06 09:21:05 -- jplevyak

Log message:
	Make it possible to use partial application with members.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Added files:
	chapel/test/functions/jplevyak/: partial-4.chpl partial-4.good 

---------------------------------------------------------------------------

02/17/06 10:02:45 -- deitz

Log message:
	Commented out unused prototype.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 

---------------------------------------------------------------------------

02/17/06 10:07:27 -- deitz

Log message:
	Made 1*integer remain a tuple that should be indexed into.  Similarly,
	(integer) is a tuple too.  There is no way to create a 1-tuple literal
	though because (2) becomes 2 which is an integer.
	
	Question: Should we allow an element to be assigned to a 1-tuple
	directly as in
	
	  var x : 1*integer = 2;
	
	This would currently result in an error.  The user would have to write
	
	  x(1) = 2;
	
	Changed domain _forall iterator into a function disabling the nested
	function optimization for this case, but allowing the inferred type so
	that it can return an integer for a 1D domain, but a 2-tuple for a 2D
	domain.
	
	Removed unnecessary _tuple_widen function.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_htuple.chpl 

---------------------------------------------------------------------------

02/17/06 16:49:45 -- jplevyak

Log message:
	Add new partial evaluation tests.

Added files:
	chapel/test/functions/jplevyak/: partial-3.chpl partial-3.good 
	                                 partial-5.chpl partial-5.good 
	                                 partial-6.chpl partial-6.good 
	                                 partial-7.chpl partial-7.good 

---------------------------------------------------------------------------

02/17/06 16:54:51 -- jplevyak

Log message:
	In analysis: remove closures which are not used.  These are
	  created because the ambiguities in Chapel as x.f(1,2) can
	  either require a partial application or not, depending on
	  whether f is a member whose value has a "this" fucntion" or not.
	Add support for many levels of closures.
	Add support for closures which handle both x.f(1,2) when
	  f is a member variable whose value has a "this" function,
	  and when f is a member function of 2 arguments.

Modified files:
	chapel/compiler/ifa/: clone.cpp fa.cpp fa.h 
	chapel/compiler/passes/: normalize.cpp resolveAnalyzed.cpp 

---------------------------------------------------------------------------

02/18/06 09:46:29 -- jplevyak

Log message:
	Fix valgrind problems.

Modified files:
	chapel/compiler/ifa/: sym.cpp 

---------------------------------------------------------------------------

02/18/06 13:59:32 -- jplevyak

Log message:
	Added some debugging print functions.
	Updated test driver for libifa.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp fa.h pnode.cpp pnode.h sym.cpp 
	                      sym.h var.cpp var.h 
	chapel/compiler/ifa/libifa/: ast_to_if1.cc prelude.v 

---------------------------------------------------------------------------

02/18/06 17:10:05 -- jplevyak

Log message:
	fixup low level codegen

Modified files:
	chapel/compiler/ifa/: cg.cpp 
	chapel/compiler/ifa/libifa/: Makefile parse.cc 
Added files:
	chapel/compiler/ifa/libifa/: Makefile.cg c_runtime.h 

---------------------------------------------------------------------------

02/20/06 11:14:53 -- jplevyak

Log message:
	Partial evaluations/closures now work with dynamic dispatch.
	Add test case for same.

Modified files:
	chapel/compiler/passes/: resolveAnalyzed.cpp 
Added files:
	chapel/test/functions/jplevyak/: dynamic-partial-1.chpl 
	                                 dynamic-partial-1.good 

---------------------------------------------------------------------------

02/20/06 12:42:07 -- jplevyak

Log message:
	Code Cleanup.

Modified files:
	chapel/compiler/ifa/: ssu.cpp if1.cpp 

---------------------------------------------------------------------------

02/21/06 07:18:22 -- jplevyak

Log message:
	Interm checkin for introduction of dynamic dispatch in the compiler.
	  This checkin allows introduction to fix type violation based on
	  accessing 2 versions of an instance variable with different primitive
	  types from different clones of the same classs.
	New Map::some_disjunction().

Modified files:
	chapel/compiler/ifa/: fa.cpp if1.cpp map.h 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

02/21/06 19:07:35 -- jplevyak

Log message:
	Added support for the introduction of dynamic dispatch.
	Fixed a bug which was preventing dynamic dispatch of member functions.
	Fixed a bug with dynamic dispatch of cloned types.
	Added new test case for introduction of dynamic dispatch.
	  This test case works in the interpreter and through codegen,
	  but a cast is missing... need to talk to Steve about that.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp fa.h 
	chapel/compiler/passes/: resolveAnalyzed.cpp 
Added files:
	chapel/test/functions/jplevyak/: introduce-dispatch-1.chpl 
	                                 introduce-dispatch-1.good 

---------------------------------------------------------------------------

02/22/06 10:56:59 -- jplevyak

Log message:
	Remove erroneous error message

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

02/22/06 11:26:43 -- jplevyak

Log message:
	Use sorted arrays instead of sets.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

02/22/06 12:46:41 -- jplevyak

Log message:
	Fix bugs related to instnatiation of generics because of sym_anyclass
	  (now sym_anytype).

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp builtin_symbols.h fa.cpp fa.h 

---------------------------------------------------------------------------

02/22/06 15:12:32 -- shannon

Log message:
	Added a future test for creating methods
	of a class with variable arguments.  Currently
	this fails to build with the complaint that
	the program does not type.

Added files:
	chapel/test/functions/shannon/: .cvsignore 
	                                methodWithVarargs.chpl 
	                                methodWithVarargs.future 
	                                methodWithVarargs.good 

---------------------------------------------------------------------------

02/22/06 17:56:54 -- bradc

Log message:
	Hack to gc.h in order to re-enable compilation on the Suns.
	Have sent a "help!" message to the BoehmGC team through John
	to determine the approved way to get around this problem.

Modified files:
	chapel/third-party/boehmgc/gc6.5/include/: gc.h 

---------------------------------------------------------------------------

02/22/06 17:57:19 -- bradc

Log message:
	Updated dates in these files to mark the new year.

Modified files:
	./: COPYRIGHT LICENSE 

---------------------------------------------------------------------------

02/23/06 10:35:26 -- shannon

Log message:
	Updated the future test I committed yesterday to
	accurately reflect the problem.  The test is
	failing because a method of the class has a
	variable of the same type of class that contains
	the method.

Modified files:
	chapel/test/functions/shannon/: methodWithVarargs.chpl 

---------------------------------------------------------------------------

02/23/06 11:51:01 -- jplevyak

Log message:
	Add .future for regression

Added files:
	chapel/test/interpreter/jplevyak/: test_enum1.future 

---------------------------------------------------------------------------

02/23/06 11:56:43 -- jplevyak

Log message:
	Remove future for working test.

Removed files:
	chapel/test/classes/deitz/infer/: infer_field2.future 

---------------------------------------------------------------------------

02/24/06 10:45:33 -- deitz

Log message:
	Disabled testing of "-b" flag as it fails to handle inheritance
	correctly and this is starting to be used.  Moreover, this function
	resolution mechanism is now tested by the interpreter tests.

Added files:
	chapel/test/no_infer/: NOTEST 

---------------------------------------------------------------------------

02/24/06 11:25:46 -- deitz

Log message:
	Fixed a bug in which the constructor was in the list of methods and
	was thus transformed into this."constructor_call".

Modified files:
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

02/24/06 11:26:37 -- deitz

Log message:
	Fixed output of 1-tuple test case.  It should now print out with
	parentheses since it is a declared 1-tuple.

Modified files:
	chapel/test/types/tuple/deitz/: test_htuple7.good 

---------------------------------------------------------------------------

02/24/06 12:32:31 -- shannon

Log message:
	Fixed an error in that I hadn't captured
	the returned variable.  Updated the .good,
	and removed the future for this test.

Modified files:
	chapel/test/functions/shannon/: methodWithVarargs.chpl 
	                                methodWithVarargs.good 
Removed files:
	chapel/test/functions/shannon/: methodWithVarargs.future 

---------------------------------------------------------------------------

02/24/06 14:21:06 -- jplevyak

Log message:
	Changed the way TypeSymbols and MetaTypes are mapped from the AST to
	IF1.  Before, when we didn't have MetaTypes yet, I was mapping the
	TypeSymbol to the IF1 meta type.  Now, I am mapping the AST MetaType
	to the IF1 metatype and not mapping TypeSymbols at all (since you can
	get to the corresponding Type by looking at the TypeSymbol::definition).
	Also moved a function which referenced aseq into the _chpl_seq module,
	and fixed various test case outputs.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_seq.chpl 
	chapel/test/flowanalysis/newast/: domarr.good sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

02/24/06 14:42:54 -- shannon

Log message:
	Added the translate function for _adomains.
	This function takes a variable number of
	integers corresponding to the dimension of
	the domain, and returns a new domain with the
	translated ranges.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
Added files:
	chapel/test/domains/shannon/: .cvsignore translate3D.chpl 
	                              translate3D.good 

---------------------------------------------------------------------------

02/24/06 15:56:37 -- shannon

Log message:
	Added the interior function for _adomains.
	This function takes a variable number of
	integers corresponding to the dimension of
	the domain, and returns a new domain.
	A negative argument to interior moves
	inward from the low end and a positive argument
	moves inward from the high end.
	
	For example, the following code:
	
	  d2 : domain(2) = [1..4, 1..4];
	  writeln(d2.interior(-1, 3);
	
	will print:
	
	  [1..1, 2..4]

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/domains/shannon/: interior3D.chpl interior3D.good 

---------------------------------------------------------------------------

02/24/06 16:31:42 -- deitz

Log message:
	Removed true and false from the prelude, putting builtin symbols into
	the intrinsic scope.
	
	Improved arithmetic domain to use a tuple rather than the ddata class.
	The tuple in turn is implemented via the ddata class.  Simplified code.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h runtime.h symbol.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	                         functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl prelude.chpl 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

02/25/06 09:48:39 -- jplevyak

Log message:
	update .good tests

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

02/25/06 09:50:53 -- jplevyak

Log message:
	update .good file

Modified files:
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

02/27/06 09:59:55 -- jplevyak

Log message:
	Fix an uninitialized variable valgrind problem.
	Reworked the DFS search for recursion to collect touched
	  nodes for reinitialization.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h 

---------------------------------------------------------------------------

02/27/06 10:22:34 -- jplevyak

Log message:
	Fix another initialization valgrind issue.

Modified files:
	chapel/compiler/ifa/: num.h 

---------------------------------------------------------------------------

02/27/06 10:54:39 -- jplevyak

Log message:
	new .future

Added files:
	chapel/test/trivial/preston/: tuple.future 

---------------------------------------------------------------------------

02/27/06 11:13:54 -- jplevyak

Log message:
	Add new .future

Added files:
	chapel/test/functions/bradc/: typefn2.future 

---------------------------------------------------------------------------

02/27/06 11:49:44 -- shannon

Log message:
	Added the exterior function for _adomains.
	This function takes a variable number of
	integers corresponding to the dimension of
	the domain, and returns a new domain.
	A negative argument to exterior starts the
	range from the low end and a positive argument
	starts the range from the high end.
	
	For example, the following code:
	
	  d2 : domain(2) = [1..4, 1..4];
	  writeln(d2.exterior(-1, 3);
	
	will print:
	
	  [0..0, 5..7]

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

02/27/06 11:57:03 -- shannon

Log message:
	Added a test for the domain exterior
	function.

Added files:
	chapel/test/domains/shannon/: exterior3D.chpl exterior3D.good 

---------------------------------------------------------------------------

02/27/06 12:04:44 -- jplevyak

Log message:
	Remove old DefExpr handling code.
	Fix bug with cloning of functions with nested variables.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: clone.cpp var.h 

---------------------------------------------------------------------------

02/27/06 13:52:45 -- deitz

Log message:
	Moved a few more lines out of prelude into _chpl_base.
	
	Removed highly special treatment of prelude.  It is now parsed as all
	other standard modules.  It is not code generated.
	
	Modified exit.chpl expected behavior.  Added a new test to make sure
	we don't call a module.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symscope.h symtab.h type.h 
	chapel/compiler/passes/: cleanup.cpp codegen.cpp filesToAST.cpp 
	                         functionResolution.cpp 
	                         runInterpreter.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_compiler.chpl 
	                          _chpl_complex.chpl _chpl_standard.chpl 
	                          prelude.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/deitz/: exit.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/trivial/deitz/: foo.chpl foo.good 

---------------------------------------------------------------------------

02/27/06 14:55:09 -- deitz

Log message:
	Updated future for test.  This is the strange test of initializing a
	record of inferred type.

Modified files:
	chapel/test/trivial/preston/: tuple.future 

---------------------------------------------------------------------------

02/27/06 17:52:46 -- jplevyak

Log message:
	Rework the way nested variables are handled.  Sym::nesting_depth is
	now set for all Sym's, and subsumes Sym::global_scope and Sym::function_scope.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: cg.cpp clone.cpp fa.cpp fun.cpp if1.cpp 
	                      sym.cpp sym.h 
	chapel/compiler/ifa/libifa/: ast_to_if1.cc prelude.v 

---------------------------------------------------------------------------

02/28/06 08:54:57 -- jplevyak

Log message:
	Add 2 .futures with comments about what I think needs to be done.

Added files:
	chapel/test/functions/jplevyak/: introduce-dispatch-1.future 
	chapel/test/types/type_variables/jplevyak/: where-3.future 

---------------------------------------------------------------------------

02/28/06 09:05:50 -- jplevyak

Log message:
	Add new .future discussing what I think is the issue.

Added files:
	chapel/test/types/type_variables/deitz/: test_datablock.future 

---------------------------------------------------------------------------

02/28/06 10:21:50 -- shannon

Log message:
	Added some error checking for the interior
	function for _adomains to ensure that a
	degenerate domain is not created.  Added
	a test and updated the expected output of
	some others.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/domains/shannon/: interior3D.chpl interior3D.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/domains/shannon/: interiorError.chpl 
	                              interiorError.compopts 
	                              interiorError.good 

---------------------------------------------------------------------------

02/28/06 10:59:40 -- jplevyak

Log message:
	Fix cygwin compilation problem (lack of alloca support).

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

02/28/06 13:13:59 -- shannon

Log message:
	Added the expand function for _adomains.
	This function takes a variable number of
	integers corresponding to the dimension of
	the domain, and returns a new domain.
	A negative argument to expand shrinks the
	domain inward hereas a positive argument
	expands it.
	
	For example, the following code:
	
	  d2 : domain(2) = [1..4, 1..4];
	  writeln(d2.expand(-1, 3);
	
	will print:
	
	  [2..3, -2..7]
	
	Fixed the error message in the _adomains
	interior function, and updated the
	corresponding test output.  Added a couple
	of tests for expand, and updated some
	other tests.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/domains/shannon/: interiorError.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/domains/shannon/: expand3D.chpl expand3D.good 
	                              expandError.chpl 
	                              expandError.compopts 
	                              expandError.good 

---------------------------------------------------------------------------

02/28/06 14:45:03 -- deitz

Log message:
	Fixed tests to take into account the new interpretation of 1-tuples.
	This fixes these regressions.

Modified files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator3.chpl 
	                                        test_instantiate_iterator3.good 
	                                        test_instantiate_iterator3a.chpl 
	                                        test_instantiate_iterator3a.good 

---------------------------------------------------------------------------

02/28/06 17:36:05 -- deitz

Log message:
	Made collect_asts return literals, VarSymbols with immediate set, such
	as the VarSymbol 1 and 2.
	
	Set the literalType of literal symbols.
	
	Removed _chpl_data module which contained the fake data class.
	Removed _hack_x tuple from _chpl_adomain.

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp type.cpp 
	chapel/compiler/passes/: codegen.cpp filesToAST.cpp 
	                         semanticChecks.cpp 
	chapel/compiler/traversals/: verify.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Removed files:
	chapel/modules/standard/: _chpl_data.chpl 

---------------------------------------------------------------------------

03/01/06 09:03:48 -- deitz

Log message:
	Improved implementation of _ddata class, moving it out of the prelude
	and putting it in _chpl_base.  Codegen is now making use of the same
	primitives that analysis and the interpreter are using.  I had
	difficulty with initializing _ddata of records because we can't just
	make each vector element be the representative element.  The
	interpreter must call the default constructor for records with no
	arguments?  I added code to reassign a new record to each element in
	the _chpl_base module.
	
	Fixed a bug in which a field with a complicated type resulted in an
	odd normalized form.  Added a test case to capture this.
	
	Improved the arithmetic array implementation greatly, adding support
	for arrays of arbitrary rank and not limiting their size to 128
	elements.
	
	We need to consider how arrays should be written and how they should
	be stored.  We currently store and traverse them column major, but we
	print them row major.  In MatLab, a 1D array is printed as a column,
	and in that case, column major makes more sense to me.  I have a small
	preference to print a 1D array as a column.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/passes/: cleanup.cpp codegen.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          prelude.chpl 
	chapel/runtime/include/: array.h 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/domains/roxana/helper/: test_hash_table2.chpl 
	                                    test_hash_table3.chpl 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/memory/shannon/: jacobi.good printMemTable.chpl 
	                             printMemTable.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
	                                         test_datablock3.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_3D.chpl test_array_3D.good 
	chapel/test/classes/deitz/: test_class5.chpl test_class5.good 
	chapel/test/demo/review_060130/: iterators.future 
Removed files:
	chapel/test/arrays/deitz/: new_class_trial1.chpl 
	                           new_class_trial1.good 

---------------------------------------------------------------------------

03/01/06 09:10:13 -- jplevyak

Log message:
	new test case for copy of typesdef (fails).

Added files:
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.chpl 
	                                      copy_typedef-1.good 

---------------------------------------------------------------------------

03/01/06 10:29:14 -- deitz

Log message:
	Cleanup of arithmetic domain iterator function.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
	chapel/test/arrays/deitz/: test_array_2Da.chpl 

---------------------------------------------------------------------------

03/01/06 11:19:40 -- jplevyak

Log message:
	Fix for test_varargs5.chpl: clear temporaries in MatchMap.
	Fixed and cleaned up handling of INIT primitive:
	  - use constructor instead of constructor name from provided type
	  - remove old cases from previous incarnations

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp fa.h pattern.cpp 

---------------------------------------------------------------------------

03/01/06 11:32:41 -- deitz

Log message:
	Adding future for regressing test based on email conversation.  Future
	is marked "all" as we need to come to some decision as to what this
	test means.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_infer_class2.future 

---------------------------------------------------------------------------

03/01/06 13:07:19 -- jplevyak

Log message:
	update test case to use ddata.
	now it fails at runtime.

Modified files:
	chapel/test/domains/roxana/helper/: test_hash_table1.chpl 
	                                    test_hash_table1.future 

---------------------------------------------------------------------------

03/01/06 13:34:41 -- jplevyak

Log message:
	cleanup handling of the method_token and setter_token

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp fa.h 
	chapel/compiler/ifa/libifa/: Makefile Makefile.cg 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

03/01/06 13:37:29 -- jplevyak

Log message:
	Change array indexing primitives to work with FORTRAN numbering (from 1).
	Change assert to a user_error (dumps to the interpreter prompt).

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

03/01/06 15:36:34 -- jplevyak

Log message:
	change ddata to always be accessed 0-based.
	change array primitives to acacess ddata 0-based (init_elts)

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

03/01/06 17:07:32 -- shannon

Log message:
	Modified expand such that if a single
	argument is given it is expanded this
	amount in all dimensions.
	
	Added _aseq methods for interior,
	exterior, and expand to simplify the
	corresponding domain functions, with
	this code as well as the _aseq translate
	method placed in the _chpl_adomain.chpl
	file.
	
	Added error checking for translate,
	interior, exterior, and expand to halt
	if an incorrect number of arguments are
	given.
	
	Added more tests and updated some test
	output.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/domains/shannon/: expandOverload.chpl 
	                              expandOverload.good 
	                              expandWrongNumDims.chpl 
	                              expandWrongNumDims.compopts 
	                              expandWrongNumDims.good 
	                              exteriorWrongNumDims.chpl 
	                              exteriorWrongNumDims.compopts 
	                              exteriorWrongNumDims.good 
	                              interiorErrorNeg.chpl 
	                              interiorErrorPos.chpl 
	                              interiorWrongNumDims.chpl 
	                              interiorWrongNumDims.compopts 
	                              interiorWrongNumDims.good 
	                              translateWrongNumDims.chpl 
	                              translateWrongNumDims.compopts 
	                              translateWrongNumDims.good 
Removed files:
	chapel/test/domains/shannon/: interiorError.chpl 
	                              interiorError.compopts 

---------------------------------------------------------------------------

03/01/06 17:14:30 -- shannon

Log message:
	Woops, forgot to cvs add these guys.

Added files:
	chapel/test/domains/shannon/: expandOverload.future 
	                              expandWrongNumDims.future 
	                              interiorErrorNeg.compopts 
	                              interiorErrorNeg.good 
	                              interiorErrorPos.compopts 
	                              interiorErrorPos.good 
	                              interiorErrorPosLarge.chpl 
	                              interiorErrorPosLarge.compopts 
	                              interiorErrorPosLarge.good 
	                              interiorRangeValues.chpl 
	                              interiorRangeValues.good 

---------------------------------------------------------------------------

03/01/06 22:34:51 -- jplevyak

Log message:
	remove unused variable.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

03/02/06 15:33:04 -- deitz

Log message:
	Changed "boolean" to "bool" in the implementation.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp 
	                         runInterpreter.cpp 
	chapel/etc/emacs/21.3/: cc-langs.el font-lock.el 
	chapel/etc/emacs/21.4/: cc-langs.el font-lock.el 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_complex.chpl _chpl_file.chpl 
	                          prelude.chpl 
	chapel/runtime/include/: chplio.h chpltypes.h config.h 
	chapel/runtime/src/: chplmem_tests.c chpltypes.c config.c 
	chapel/test/arrays/deitz/: jacobi.chpl jacobi2.chpl jacobi3.chpl 
	chapel/test/demo/review_060130/: jacobi.chpl jacobi2.chpl 
	chapel/test/execflags/shannon/configs/: configVarBoolean.chpl 
	                                        configVarFile.chpl 
	                                        configVarInvalidBoolean.chpl 
	                                        configVarInvalidBoolean.good 
	                                        configVarInvalidBooleanLineno.chpl 
	                                        configVarInvalidBooleanLineno.good 
	chapel/test/functions/deitz/: test_operator_overloading2.chpl 
	chapel/test/memory/shannon/: allocAndFree.good 
	                             configVarFile.chpl jacobi.chpl 
	                             printFinalMemStat.chpl 
	                             printMemTable.chpl 
	chapel/test/no_infer/: jacobi.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
	chapel/test/trivial/bradc/: defaultinit.chpl defaultinit1a.chpl 
	                            defaultinit2.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	chapel/test/trivial/shannon/: readWriteBool.chpl 
	                              readWriteBool.good 
	                              readWriteBoolLineno.chpl 
	                              readWriteBoolLineno.good 
	                              readWriteUserType.chpl 
	                              readWriteUserType.good 
	chapel/test/types/file/: freadBoolean.chpl freadNotABoolean.chpl 
	                         freadNotABoolean.good 
	                         fwritelnBooleanFile.chpl 

---------------------------------------------------------------------------

03/02/06 15:39:18 -- deitz

Log message:
	Add test of class with field that is a tuple.

Added files:
	chapel/test/types/tuple/deitz/: test_class_tuple1.chpl 
	                                test_class_tuple1.good 

---------------------------------------------------------------------------

03/02/06 16:08:23 -- deitz

Log message:
	Added support for arrays as fields in classes, and two tests.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
Added files:
	chapel/test/arrays/deitz/: test_array_in_class.chpl 
	                           test_array_in_class.good 
	                           test_class_array1.chpl 
	                           test_class_array1.good 

---------------------------------------------------------------------------

03/02/06 19:36:47 -- jplevyak

Log message:
	fix bug: clear creation set definition points for newly cloned creation sets.
	add an assert to check same.
	This fixes the infinite loop when instantiation of all effected functions
	  for a type is turned off.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

03/03/06 08:50:48 -- jplevyak

Log message:
	Add paramters to Type::genericSymbols.  This was messing up
	deferred instantiation.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

03/03/06 12:02:19 -- deitz

Log message:
	Added two inheritance tests that work.

Added files:
	chapel/test/classes/deitz/: test_inherit_mod1.chpl 
	                            test_inherit_mod1.good 
	                            test_inherit_mod2.chpl 
	                            test_inherit_mod2.good 

---------------------------------------------------------------------------

03/03/06 13:05:34 -- deitz

Log message:
	Fixed bug in folding of parameter methods.  But note this folding is
	still shaky because it is difficult to determine that an access to a
	field is a parameter.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

03/03/06 13:54:08 -- deitz

Log message:
	Should this test be an error as reported?

Added files:
	chapel/test/classes/deitz/: test_inherit_mod3.chpl 
	                            test_inherit_mod3.future 
	                            test_inherit_mod3.good 

---------------------------------------------------------------------------

03/03/06 14:17:00 -- jplevyak

Log message:
	Fix 2 little bugs:
	  SEGV from using a set as a vec.
	  Changing set while iterating over it.
	Change pattern matching to NOT attempt to generate
	  wrappers or instantiate partial applications.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp ast.h pattern.cpp 

---------------------------------------------------------------------------

03/03/06 15:00:07 -- jplevyak

Log message:
	Fixed a bug in one of the analysis logs

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

03/03/06 15:02:30 -- jplevyak

Log message:
	fix oops.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

03/04/06 10:39:40 -- jplevyak

Log message:
	Fix test case by remove unreachable edges and not cloning
	for dispatch on nil.

Modified files:
	chapel/compiler/ifa/: fa.cpp 
Removed files:
	chapel/test/classes/deitz/: test_inherit_mod3.future 

---------------------------------------------------------------------------

03/06/06 06:46:48 -- jplevyak

Log message:
	Some minor cleanup (initialization of AEdge::rets, early completion of
	incomplete dispatches).

Modified files:
	chapel/compiler/ifa/: fa.cpp pattern.cpp 

---------------------------------------------------------------------------

03/06/06 08:49:44 -- jplevyak

Log message:
	Stop instantiating all related functions when we instantiate a type.
	Move the subsumption checked below instantition during analysis
	  resolution so that the instantiated types can be considered
	  when deciding the "most specific" function.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/06/06 10:20:41 -- jplevyak

Log message:
	Disable the callee cache as it causing a bug and I an rewriting it.

Modified files:
	chapel/compiler/ifa/: fa.cpp pattern.cpp 

---------------------------------------------------------------------------

03/06/06 10:28:59 -- jplevyak

Log message:
	Use sorted vector instead of set for iteration.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/06/06 12:09:07 -- jplevyak

Log message:
	Do not add instantiated functions to the dispatch tables.
	(we always work from the generic version each time).

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

03/06/06 13:21:35 -- deitz

Log message:
	Fixed .good and removed .future.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overinstantiate1a.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overinstantiate1a.future 

---------------------------------------------------------------------------

03/06/06 13:24:30 -- deitz

Log message:
	Fixed interpreter function resolution to handle new instantiation
	protocol in which only the constructor and type are copied when the
	constructor is instantiated.  This means that the other methods and
	functions on the generic type must be instantiated when they are
	called.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         scopeResolve.cpp 
Added files:
	chapel/test/interpreter/deitz/: .cvsignore COMPOPTS NOEXEC 
	                                domarr.chpl domarr.good 

---------------------------------------------------------------------------

03/06/06 15:32:16 -- deitz

Log message:
	Added basic support for indefinite domains and arrays in a new module
	_chpl_indefinite.  The indefinite domains support an add method to add
	new indexes.  A remove method is not yet supported.  This initial
	implementation uses quadratic probing and roughly doubles the prime
	size of the hash table when it becomes half full.  Iteration over
	indefinite domains is not yet supported.  Limited support includes the
	add method and declaring indefinite arrays over indefinite domains.
	Valid index types currently only include integer and string.  The
	current hash function is pathetic and requires some sort of primitive
	to access the bytes that make up primitive types.
	
	Indefinite arrays are currently limited to 128 elements.  Limited
	support includes indexing with the index type of the indefinite
	domain.
	
	Lost support for domains as fields in classes.  Domains and arrays are
	now handled the same way and require something extra because the exact
	type is now determined based on function resolution.
	
	Moved functions common to arithmetic and indefinite arrays into
	_chpl_base module.
	
	Determined that 'or' and 'and' do not short-circuit.  This needs to be
	handled by normalization.
	
	Updated regressions file to show current regressions.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         scopeResolve.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_standard.chpl 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/modules/standard/: _chpl_indefinite.chpl 
	chapel/test/arrays/deitz/: test_array_in_class.future 
	                           test_indefinite1.chpl 
	                           test_indefinite1.good 
	                           test_indefinite2.chpl 
	                           test_indefinite2.good 
	                           test_indefinite3.chpl 
	                           test_indefinite3.good 

---------------------------------------------------------------------------

03/06/06 15:32:31 -- deitz

Log message:
	Added two serial versions of NAS FT.  One of these I wrote a few
	months ago.  The other I'm working on getting to run.

Added files:
	chapel/test/npb/ft/: NOTEST ft-serial-working1.chpl 
	                     ft-serial.chpl 

---------------------------------------------------------------------------

03/06/06 16:18:29 -- jplevyak

Log message:
	Import some partial work from another directory regarding not
	dispatching to generic functions.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/06/06 16:46:50 -- jplevyak

Log message:
	Add a comment

Modified files:
	chapel/compiler/ifa/: pnode.h 

---------------------------------------------------------------------------

03/06/06 16:51:34 -- jplevyak

Log message:
	prevent SEGV

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

03/06/06 16:59:36 -- waynew

Log message:
	Simple tests for the parallel/cobegin pass.

Added files:
	chapel/test/parallel/cobegin/waynew/: cobegin.simple0.chpl 
	                                      cobegin.simple0.future 
	                                      cobegin.simple1.chpl 
	                                      cobegin.simple1.future 
	                                      cobegin.simple2.chpl 
	                                      cobegin.simple2.future 

---------------------------------------------------------------------------

03/06/06 17:09:01 -- waynew

Log message:
	Initial version of cobegin test output.

Added files:
	chapel/test/parallel/cobegin/waynew/: cobegin.simple0.good 
	                                      cobegin.simple1.good 
	                                      cobegin.simple2.good 

---------------------------------------------------------------------------

03/06/06 17:14:42 -- waynew

Log message:
	Test saving intermediate C files to current directory.

Added files:
	chapel/test/compflags/waynew/: saveccurrdir.chpl 
	                               saveccurrdir.compopts 
	                               saveccurrdir.future 
	                               saveccurrdir.good 

---------------------------------------------------------------------------

03/06/06 17:20:06 -- waynew

Log message:
	.future not needed. Cobegin tests should work with sequential version also.

Removed files:
	chapel/test/parallel/cobegin/waynew/: cobegin.simple0.future 
	                                      cobegin.simple1.future 
	                                      cobegin.simple2.future 

---------------------------------------------------------------------------

03/06/06 17:30:36 -- jplevyak

Log message:
	Add test case for nostdincs (currently broken)

Added files:
	chapel/test/modules/jplevyak/: COMPOPTS nostdincs.chpl 
	                               nostdincs.good 

---------------------------------------------------------------------------

03/07/06 09:17:41 -- jplevyak

Log message:
	Finally really stop entering instantiated functions into the dispatch
	tables so that we always rebuild functions from the generics.  This
	required removing the code which enters things into the tables form
	chapel_ifa, and fixing some issues with instantiation.
	
	Also, cache the "all_functions" part of dispatch which finds all the
	functions which could be dispatched to given the sets of concrete
	types at each argument at the call site.  This was currently taking
	29% of the CPU time, hopefully this will bring it down to much less.
	
	Also, Match is now the public face of a match (dispatch result
	which includes the sets of concrete types at each argument which
	result in the particular function being selected) and PMatch is
	the internal version which includes intermediate information
	like default_args, formal->actual mappings, etc. which are not
	needed once dispatch and wrapper creation is complete.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp pattern.cpp pattern.h 

---------------------------------------------------------------------------

03/07/06 09:58:02 -- deitz

Log message:
	Two new futures pertaining to dispatch and instantiated types.

Added files:
	chapel/test/interpreter/deitz/: test_array1d.chpl 
	                                test_array1d.future 
	                                test_array1d.good 
	chapel/test/types/seq/deitz/: test_seq_arg.chpl 
	                              test_seq_arg.future 
	                              test_seq_arg.good 

---------------------------------------------------------------------------

03/07/06 11:47:37 -- jplevyak

Log message:
	Disable the offsetof error message for gcc 4.0

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 

---------------------------------------------------------------------------

03/07/06 12:41:11 -- waynew

Log message:
	.

Modified files:
	chapel/compiler/include/: driver.h passes.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
Added files:
	chapel/compiler/passes/: parallel.cpp 

---------------------------------------------------------------------------

03/07/06 12:42:48 -- waynew

Log message:
	Enable parallel pass.

Added files:
	chapel/test/parallel/cobegin/waynew/: cobegin.simple0.compopts 
	                                      cobegin.simple1.compopts 
	                                      cobegin.simple2.compopts 

---------------------------------------------------------------------------

03/07/06 13:36:23 -- jplevyak

Log message:
	Enable caching of all applicable functions matching.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/07/06 13:52:20 -- deitz

Log message:
	Added bool FnSymbol::hasVarArgs which is true if any of the formal
	arguments in the function are unexpanded variable arguments.
	
	Fixed the interpreter so that it may overinstantiate a generic
	function that has variable arguments, thus fixing
	
	  test/functions/deitz/varargs/test_varargs7.chpl
	
	in the interpreter.
	
	Added ability to index into an arithmetic domain with a dimension
	number to determine the extent of that dimension.  For example, to
	iterate over the first dimension of domain D, write
	
	  forall i in D(1) ...

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

03/07/06 13:53:28 -- deitz

Log message:
	Added domain indexing test.

Added files:
	chapel/test/arrays/deitz/: test_domain_dims.chpl 
	                           test_domain_dims.good 

---------------------------------------------------------------------------

03/07/06 14:46:46 -- deitz

Log message:
	Added initial compiler support for sparse domains and arrays.  Added a
	new module _chpl_sparse where the sparse domain implementation can go.
	The module is basically empty.  Initial support only includes the
	ability to declarse a sparse domain over an arithmetic domain, declare
	a sparse array based on a sparse domain, and print out an error
	message about writing sparse arrays.  See test_sparse1.chpl.
	
	Added domain and sparse to the lexer as keywords.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_standard.chpl 
Added files:
	chapel/modules/standard/: _chpl_sparse.chpl 
	chapel/test/sparse/deitz/: .cvsignore test_sparse1.chpl 
	                           test_sparse1.good 

---------------------------------------------------------------------------

03/07/06 16:03:47 -- deitz

Log message:
	Added support for writing and iterating over indefinite domains.

Modified files:
	chapel/modules/standard/: _chpl_indefinite.chpl 
Added files:
	chapel/test/arrays/deitz/: test_indefinite4.chpl 
	                           test_indefinite4.good 
	                           test_indefinite5.chpl 
	                           test_indefinite5.good 

---------------------------------------------------------------------------

03/07/06 17:25:59 -- waynew

Log message:
	A Perl script that will call start_test on the directories in the
	specified file. The default is to call start_test on the current
	directory. It will produce a .log file that is a concatenation of
	the start_test log files. At the end of the tests, the sum of
	the counts is printed.
	
	This is meant for informal testing. It is not meant as a replacement
	of start_test (i.e., the .log and .log.summary formats are not
	as with start_test alone).

Added files:
	chapel/test/: testdirs.pl 

---------------------------------------------------------------------------

03/07/06 17:49:00 -- bradc

Log message:
	Started working on a port of the 1D HPCC FFT
	benchmark as requested by John Mellor-Crummey,
	and am checking in what I've got as well as a
	number of futures I ran into along the way,
	more so I could keep track of the rewrites
	that I made by hand than anything.
	
	bydomain -- "by" doesn't work on domains. Should it?
	            Or should this be a domain method?
	constdomain -- domains can't currently be "const"
	subdomain -- subdomains don't work (not surprisingly)
	readmethod/readmethod2 -- calling a method named "read"
	                          yields surprising results,
	                          probably because it is hoisted
	                          out as though it was a top-level
	                          read call?
	shiftops -- shift operators don't work yet, not surprisingly
	undefinedn/undefinedfn2 -- calling an undefined function
	                           yields a lot of confusing error
	                           messages.  This is a placeholder
	                           in hopes of cleaning it up.
	
	Also removed a future that's now working: paramRank.

Modified files:
	chapel/test/domains/bradc/: paramRank.good 
Added files:
	chapel/test/domains/bradc/: bydomain.chpl bydomain.future 
	                            bydomain.good constdomain.chpl 
	                            constdomain.future constdomain.good 
	                            subdomain.chpl subdomain.future 
	                            subdomain.good 
	chapel/test/hpcc/: fft.c fft.chpl 
	chapel/test/trivial/bradc/: readmethod.chpl readmethod.future 
	                            readmethod.good readmethod2.chpl 
	                            readmethod2.future readmethod2.good 
	                            readmethod2a.chpl readmethod2a.good 
	                            shiftops.chpl shiftops.future 
	                            shiftops.good undefinedfn.chpl 
	                            undefinedfn.future undefinedfn.good 
	                            undefinedfn2.chpl 
	                            undefinedfn2.future 
	                            undefinedfn2.good 
Removed files:
	chapel/test/domains/bradc/: paramRank.future 

---------------------------------------------------------------------------

03/07/06 19:01:24 -- deitz

Log message:
	Added FnSymbol::visible which is set to false for compiler generated
	functions such as wrappers and instantiated functions.  These
	functions are not in the visible functions lists.  Removed the list
	that the interpreter used to keep track of these functions.
	
	Simplified the arithmetic domain implementation.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/test/arrays/deitz/: test_array_1D.chpl test_array_1D.good 

---------------------------------------------------------------------------

03/07/06 19:22:00 -- jplevyak

Log message:
	Fix another performance issue.  This one in build_type_hiearchy.

Modified files:
	chapel/compiler/ifa/: ast.cpp sym.h 

---------------------------------------------------------------------------

03/07/06 22:43:53 -- jplevyak

Log message:
	Patch another performance issue.  This time with the "nil" type.

Modified files:
	chapel/compiler/ifa/: sym.cpp 

---------------------------------------------------------------------------

03/08/06 07:45:50 -- deitz

Log message:
	Fixed .good files for regressions.

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

03/08/06 09:15:27 -- jplevyak

Log message:
	Clean up warning for possible (not really possible) use
	  of uninitalized variable.

Modified files:
	chapel/compiler/passes/: semanticChecks.cpp 

---------------------------------------------------------------------------

03/08/06 11:12:02 -- jplevyak

Log message:
	More efficiency improvements

Modified files:
	chapel/compiler/ifa/: fa.cpp sym.cpp sym.h 

---------------------------------------------------------------------------

03/08/06 14:26:40 -- jplevyak

Log message:
	I have been having problems with 'make depend' breaking my build
	if I hit control-C.
	
	This change makes all the dependencies into a .tmp file then
	atomically mv(s) it to the target file.

Modified files:
	chapel/compiler/ifa/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: Makefile 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

03/08/06 14:27:42 -- jplevyak

Log message:
	Another optimization of the heavily used make_AVar routine

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

03/08/06 14:28:26 -- waynew

Log message:
	Tweaked cobegin() to use for_alist instead of getElements to
	traverse statements. Hopefully, replaced tabs with spaces.

Modified files:
	chapel/compiler/passes/: parallel.cpp 

---------------------------------------------------------------------------

03/08/06 14:31:56 -- waynew

Log message:
	Hopefully, replaced tabs with spaces.

Modified files:
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

03/08/06 14:55:25 -- waynew

Log message:
	Ok, tabs were still there. Think they are gone now.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: parallel.cpp 

---------------------------------------------------------------------------

03/08/06 16:01:47 -- jplevyak

Log message:
	Fixup dependencies.  Turns out nogcdepend uses a completely different
	mechanism, which I didn't take into account.

Modified files:
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 

---------------------------------------------------------------------------

03/08/06 16:19:13 -- jplevyak

Log message:
	Fix possible bug and add comment to CACHE_CALLEES option.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h pattern.cpp 

---------------------------------------------------------------------------

03/08/06 18:00:09 -- bradc

Log message:
	Implemented shift operators (<< and >>) and discussed at
	last week's meeting, while procrastinating.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
Removed files:
	chapel/test/trivial/bradc/: shiftops.future 

---------------------------------------------------------------------------

03/08/06 18:03:54 -- bradc

Log message:
	Made rewrites of functions like assert(), read(), write(), etc. only
	apply to functions, not to methods.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Removed files:
	chapel/test/trivial/bradc/: readmethod.future readmethod2.future 

---------------------------------------------------------------------------

03/08/06 18:06:08 -- bradc

Log message:
	Added some .cvsignore files to the test directory.

Added files:
	chapel/test/compflags/waynew/: .cvsignore 
	chapel/test/functions/deitz/varargs/: .cvsignore 
	chapel/test/types/typedefs/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

03/08/06 18:30:10 -- deitz

Log message:
	Added support for instantiating formal argument types during
	normalization to allow for proper dispatch.  Removed future for
	test/types/seq/deitz/test_seq_arg.chpl.  This change also gets 1D
	arrays working through the interpreter.
	
	Moved construction of tuple types to the cleanup pass and made it so
	that we now create lots of tuple types right up front.  This slows us
	down, though I am optimizing some parts of the slowdown.  We should
	discuss the tuple story at our next meeting.
	
	Futurized one test that used a field in a class that is an
	instantiated type to deal with this later.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: astutil.h symbol.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp normalize.cpp 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
	chapel/test/npb/ft/: ft-serial-working1.chpl 
Added files:
	chapel/test/types/tuple/deitz/: test_class_tuple1.future 
Removed files:
	chapel/test/interpreter/deitz/: test_array1d.future 
	chapel/test/types/seq/deitz/: test_seq_arg.future 

---------------------------------------------------------------------------

03/08/06 19:33:25 -- jplevyak

Log message:
	Add Timer class for instrumentation.
	Use timer class for per-pass instrumentation of interative flow analysis.

Modified files:
	chapel/compiler/ifa/: fa.cpp 
Added files:
	chapel/compiler/ifa/: timer.h 

---------------------------------------------------------------------------

03/08/06 20:57:22 -- deitz

Log message:
	Refactored some code in buildDefaultFunctions speeding up that pass.
	
	Limited tuples to size of five to improve compilation speed.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         normalize.cpp 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

03/08/06 20:58:01 -- deitz

Log message:
	Fixed .good.

Modified files:
	chapel/test/trivial/bradc/: readmethod.good 

---------------------------------------------------------------------------

03/08/06 21:38:31 -- deitz

Log message:
	Update two more .goods.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

03/08/06 22:56:12 -- jplevyak

Log message:
	Cleanup flags in Fun - remove unused ones

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fun.cpp fun.h ifa.cpp pattern.cpp var.h 

---------------------------------------------------------------------------

03/09/06 07:12:05 -- jplevyak

Log message:
	Add -rt so that the clock_XXX function will be included (they are POSIX).

Modified files:
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

03/09/06 08:55:04 -- deitz

Log message:
	Removed .futures of properly working tests.

Removed files:
	chapel/test/arrays/deitz/: test_array_2Da.future 
	                           test_array_basic1.future 
	                           test_array_basic1a.future 
	                           test_array_of_record1.future 
	chapel/test/types/seq/bradc/: emptySeq2.future 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5.future 

---------------------------------------------------------------------------

03/09/06 09:10:32 -- deitz

Log message:
	Fixed .good and removed .future.

Modified files:
	chapel/test/arrays/jplevyak/: simple-2.good 
Removed files:
	chapel/test/arrays/jplevyak/: simple-2.future 

---------------------------------------------------------------------------

03/09/06 13:32:00 -- deitz

Log message:
	Add a test that works now, but shouldn't.  When the method bar is
	instantiated it stays in module M1 and sees M2 only via the new
	instantiated module.  It used to be instantiated in M2, but now that
	it is not, we need to allow it to see M2, but not anything else in M1.

Added files:
	chapel/test/types/type_variables/deitz/: test_instantiate4.chpl 
	                                         test_instantiate4.good 

---------------------------------------------------------------------------

03/09/06 14:07:11 -- jplevyak

Log message:
	Add some support for unsigned integers - more needs to be done.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

03/09/06 14:51:57 -- deitz

Log message:
	Added support for
	
	  FOR PARAM identifier IN expr..expr stmts
	
	which creates a loop that is unrolled.  It is currently implemented
	via recursive instantiation, inlining, and nested functions.
	
	At some point, we need to decide what is valid for the param to be
	used on.  It can currently only be used on an arithmetic sequence as
	in
	
	  for param i in 1..4 do
	
	but perhaps can be generalized.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_for_param.chpl 
	                            test_for_param.good 

---------------------------------------------------------------------------

03/09/06 15:35:06 -- deitz

Log message:
	Simplified instantiate_generic code given recent changes and
	simplifications to instantiation.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

03/09/06 16:52:02 -- deitz

Log message:
	Fixed a bug in which functions containing nested generic functions
	were marked as generic.  I just commented out a chunk of code in
	tagGenerics that was specifically designed to do this.  It seems a
	bug to me and adversely impacts the new test
	
	  functions/deitz/varargs/test_varargs_write.chpl

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Added files:
	chapel/test/functions/deitz/varargs/: test_varargs_write.chpl 
	                                      test_varargs_write.good 

---------------------------------------------------------------------------

03/09/06 16:52:25 -- deitz

Log message:
	Fixed regression of
	
	  reductions/bradc/manual/inferstatetype2.chpl
	
	in which a cast was not updated in an instantiated function.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

03/10/06 07:40:40 -- jplevyak

Log message:
	-lrt is only for linux (not sunos or cygwin)

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/make/: Makefile.base Makefile.linux Makefile.linux64 
	              Makefile.linux64_32 

---------------------------------------------------------------------------

03/10/06 08:44:34 -- deitz

Log message:
	Update .good.  String meta_type id number increased by one.

Modified files:
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

03/10/06 11:39:36 -- waynew

Log message:
	Handles blanks lines in input file.

Modified files:
	chapel/test/: testdirs.pl 

---------------------------------------------------------------------------

03/10/06 12:41:46 -- jplevyak

Log message:
	Get running on cygwin

Modified files:
	chapel/compiler/ifa/libifa/: Makefile Makefile.cg ast_to_if1.cc 

---------------------------------------------------------------------------

03/10/06 13:54:28 -- deitz

Log message:
	Add test case of nested function in instantiated function where nested
	functions are not visible.

Added files:
	chapel/test/types/type_variables/deitz/: test_nested1.chpl 
	                                         test_nested1.future 
	                                         test_nested1.good 

---------------------------------------------------------------------------

03/10/06 14:28:58 -- jplevyak

Log message:
	Add support for vararg functions, this fixes test_varargs7

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/10/06 15:03:23 -- deitz

Log message:
	Implemented type select statements via overloaded nested functions.
	Whether this is the way we want to go (I think so), it didn't take
	long to get it working, and it is at least correct.  Since the nested
	functions are inlined, it is equivalent in the end.
	
	There is an error in analysis's handling of nested functions.  The
	interpreter passes the two futures checked in here.
	
	I implemented this construct as
	
	  type select ... {
	    when ... do ...
	    ...
	
	breaking typeselect into two words.  Note this is different from the
	specification and should likely be changed to a single word.  However,
	one nice thing about the two words is that we eliminate a keyword..
	
	The test
	
	  test/trivial/deitz/test_type_select1-handcode.chpl
	
	illustrates the nested function bug in analysis without using a type
	select statement.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_type_select1-handcode.chpl 
	                            test_type_select1-handcode.future 
	                            test_type_select1-handcode.good 
	                            test_type_select1.chpl 
	                            test_type_select1.future 
	                            test_type_select1.good 

---------------------------------------------------------------------------

03/10/06 15:56:37 -- deitz

Log message:
	Fixed oops.

Modified files:
	chapel/test/trivial/deitz/: test_type_select1-handcode.chpl 

---------------------------------------------------------------------------

03/10/06 16:03:56 -- deitz

Log message:
	Added bounds checking to arithmetic domains.
	
	The error message can be improved in the future.  I use exit because
	halt prints out the full path of the file which doesn't work in the
	test suite without special flags.  The error message prints out the
	out-of-bounds index, but should print out the name of the array (needs
	to be stored in the Array class or passed to the access function) and
	the place in the file where this happens.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
Added files:
	chapel/test/arrays/deitz/: test_bounds1.chpl test_bounds1.good 
	                           test_bounds2.chpl test_bounds2.good 

---------------------------------------------------------------------------

03/10/06 16:46:41 -- deitz

Log message:
	Removed future for test working for same reason as test_varargs7.

Removed files:
	chapel/test/functions/deitz/varargs/: test_varargs3.future 

---------------------------------------------------------------------------

03/13/06 10:42:16 -- deitz

Log message:
	Reenabled --nostdincs and --nostdincs-but-file.
	Updated .goods of the three new regressions again.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_compiler.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

03/13/06 10:46:44 -- jplevyak

Log message:
	use "make" for low level cg instead of "gmake" (for portabilitymaking )

Modified files:
	chapel/compiler/ifa/: cg.cpp 

---------------------------------------------------------------------------

03/13/06 11:13:09 -- jplevyak

Log message:
	Fix bug with indefinite domains:
	
	  the _idomain._double() function was making the "inds" member
	  always a _ddata of integers, which resulted in mixed primitives type
	  errors.

Modified files:
	chapel/modules/standard/: _chpl_indefinite.chpl 

---------------------------------------------------------------------------

03/13/06 11:13:21 -- deitz

Log message:
	Added nested function in class test that works.
	
	Added += test for indefinite domains which I can get to work once
	  test/types/type_variables/deitz/test_nested1
	works (as mentioned in the .future).

Added files:
	chapel/test/arrays/deitz/: test_indefinite6.chpl 
	                           test_indefinite6.future 
	                           test_indefinite6.good 
	chapel/test/trivial/deitz/: test_plusassign.chpl 
	                            test_plusassign.good 

---------------------------------------------------------------------------

03/13/06 11:18:39 -- deitz

Log message:
	Added another working domain(string) indefinite domain/array test case.

Added files:
	chapel/test/arrays/deitz/: test_indefinite7.chpl 
	                           test_indefinite7.good 

---------------------------------------------------------------------------

03/13/06 11:21:11 -- deitz

Log message:
	Added unborn code to transform an iterator into a next function, a
	state type, and a wrapper function.  It is called with a false
	conditional.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

03/13/06 12:08:19 -- jplevyak

Log message:
	Enable -lrt for high resolution timers.

Modified files:
	chapel/make/: Makefile.sunos 

---------------------------------------------------------------------------

03/13/06 15:12:56 -- deitz

Log message:
	Work-around to reenable interpreter tests.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_compiler.chpl 
	                          _chpl_standard.chpl 

---------------------------------------------------------------------------

03/13/06 16:09:41 -- deitz

Log message:
	Add test to illustrate potential iterator transform.

Added files:
	chapel/test/classes/deitz/infer/: infer_field2c.chpl 
	                                  infer_field2c.good 

---------------------------------------------------------------------------

03/13/06 16:20:06 -- jplevyak

Log message:
	Add option for making zero arity non-no-paren members illegal.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fun.cpp fun.h pattern.cpp 

---------------------------------------------------------------------------

03/13/06 16:55:58 -- deitz

Log message:
	Implemented arithmetic domain write function for arrays of arbitrary
	rank using an "odometer"-style loop.
	
	Fixed a bug in arithmetic domain write in which extra line feeds were
	applied at the end of the write for dimensions of rank 2 and greater.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/bradc/: domarr.good domarr1a.good 
	chapel/test/arrays/deitz/: test_anon_domain2.good 
	                           test_array_assign1.good 
	                           test_array_integer_2d.good 
	                           test_array_integer_3d.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_integer_3d.future 

---------------------------------------------------------------------------

03/14/06 08:48:58 -- deitz

Log message:
	Add working eight-dimensional array test case.

Added files:
	chapel/test/arrays/deitz/: test_array_8d.chpl test_array_8d.good 

---------------------------------------------------------------------------

03/14/06 08:51:36 -- deitz

Log message:
	Fix output of 2 new regressions.  I forgot to update these array tests
	with the change to how arrays print out.

Modified files:
	chapel/test/demo/review_060130/: jacobi.good 
	chapel/test/interpreter/deitz/: domarr.good 

---------------------------------------------------------------------------

03/14/06 11:16:44 -- shannon

Log message:
	Refactored the _adomain methods I
	added recently such that they now take
	either a tuple or individual arguments.
	
	Removed tests that tested for an incorrect
	number of arguments being passed to the
	functions since they now fail in compilation.
	
	Added tests for tuple args and updated
	some test output.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/domains/shannon/: expand3Dtuple.chpl 
	                              expand3Dtuple.good 
	                              exterior3Dtuple.chpl 
	                              exterior3Dtuple.good 
	                              interior3Dtuple.chpl 
	                              interior3Dtuple.good 
	                              translate3Dtuple.chpl 
	                              translate3Dtuple.good 
Removed files:
	chapel/test/domains/shannon/: expandWrongNumDims.chpl 
	                              expandWrongNumDims.compopts 
	                              expandWrongNumDims.future 
	                              expandWrongNumDims.good 
	                              exteriorWrongNumDims.chpl 
	                              exteriorWrongNumDims.compopts 
	                              exteriorWrongNumDims.good 
	                              interiorWrongNumDims.chpl 
	                              interiorWrongNumDims.compopts 
	                              interiorWrongNumDims.good 
	                              translateWrongNumDims.chpl 
	                              translateWrongNumDims.compopts 
	                              translateWrongNumDims.good 

---------------------------------------------------------------------------

03/14/06 12:18:09 -- jplevyak

Log message:
	Fix bug with zeroarity functions whereby we were permitting members
	declared with parens to be called without.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
Removed files:
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.future 

---------------------------------------------------------------------------

03/14/06 13:41:07 -- shannon

Log message:
	Added some future tests that fail when
	I (Brad) would have expected them to
	compile.

Added files:
	chapel/test/trivial/shannon/: condReturn.chpl condReturn.future 
	                              condReturn.good condReturn2.chpl 
	                              condReturn2.future 
	                              condReturn2.good condReturn3.chpl 
	                              condReturn3.future 
	                              condReturn3.good 

---------------------------------------------------------------------------

03/14/06 14:29:47 -- shannon

Log message:
	Modified the newly-refactored expand method
	such that if a single argument is given
	it is expanded this amount in all dimensions.
	Removed a future test since this code now works.
	
	Made some other simplifications in the code
	for clarity, and updated some tests.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Removed files:
	chapel/test/domains/shannon/: expandOverload.future 

---------------------------------------------------------------------------

03/14/06 14:37:10 -- jplevyak

Log message:
	Add new option: --scalar-promotion.
	Added "iterator this()" to seq and to _aarray.
	Scalar promotion recognizes the cases where interator this()
	returns a fixed type or a type variable defined in the surrounding class.
	The "this" iterator is changed in chapel.y to '_promoter' to avoid
	conflict with the "this" function.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 

---------------------------------------------------------------------------

03/14/06 14:51:23 -- bradc

Log message:
	Was trying a varargs unrolling function this afternoon
	which works in the interpreter but fails in analysis
	for some reason.  This test is very similar to
	functions/deitz/varargs/test_varargs_write.chpl --
	which works -- but mine fails for some reason.

Added files:
	chapel/test/trivial/bradc/: unroll.chpl unroll.future 
	                            unroll.good 

---------------------------------------------------------------------------

03/14/06 17:01:26 -- jplevyak

Log message:
	Steves patch for the defaults wrapper for member functions.
	Patch for one of the closure variables which is holding a
	function pointer and hence should have a function type, but
	since that isn't implemented and since the closure isn't
	actually used, I am transforming it into a SymbolType.
	Howver, this fixes the test.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

03/14/06 18:00:07 -- bradc

Log message:
	Added some tests that I stumbled across when trying
	to figure out why Steve's test worked and mine didn't.
	badfile.chpl is a future for Shannon which displays a
	silent bug in the rewriting of fwriteln's.

Added files:
	chapel/test/types/file/bradc/: .cvsignore badfile.chpl 
	                               badfile.future badfile.good 
	                               badfile2.chpl badfile2.good 
	                               badfile3.chpl badfile3.good 

---------------------------------------------------------------------------

03/14/06 19:59:45 -- jplevyak

Log message:
	Patch for disambiguating nested functions.
	There is still a potential issue with mutually recursive
	  nested functions.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

03/14/06 20:02:01 -- jplevyak

Log message:
	update .good files

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

03/15/06 10:24:11 -- deitz

Log message:
	Add another working method with default argument test.

Added files:
	chapel/test/functions/deitz/methods/: test_default_arg2.chpl 
	                                      test_default_arg2.good 

---------------------------------------------------------------------------

03/15/06 13:39:00 -- shannon

Log message:
	Added the 'by' function for domains (which
	implements the 'by' operator).  For a
	multidimensional domain a single argument to
	'by' modifies the strides in all dimensions.
	
	Removed a future for a now-working test and
	added a test.  Updated some test output.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
Added files:
	chapel/test/domains/shannon/: by4Dtuple.chpl by4Dtuple.good 
Removed files:
	chapel/test/domains/bradc/: bydomain.future 

---------------------------------------------------------------------------

03/15/06 14:17:11 -- deitz

Log message:
	test to show ambiguity of globally visible nested function given our
	current handling of nested functions.

Added files:
	chapel/test/functions/deitz/nested/: test_nested_global1.chpl 
	                                     test_nested_global1.good 

---------------------------------------------------------------------------

03/15/06 15:30:41 -- jplevyak

Log message:
	Fix for SEGV for test_nested_global1.chpl

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

03/15/06 15:44:42 -- deitz

Log message:
	Add a simpler test to show problem with nested functions inside
	instantiated functions.  This gets rid of the class from test_nested1
	and avoids the integer to string coercion.

Added files:
	chapel/test/types/type_variables/deitz/: test_nested2.chpl 
	                                         test_nested2.future 
	                                         test_nested2.good 

---------------------------------------------------------------------------

03/15/06 15:48:22 -- deitz

Log message:
	I think this is working (but wrong in the interpreter).  We should
	write down our function resolution scheme and update it in the
	specification.

Added files:
	chapel/test/functions/deitz/: test_clone_coerce.chpl 
	                              test_clone_coerce.good 

---------------------------------------------------------------------------

03/15/06 16:16:19 -- jplevyak

Log message:
	update .future with some notes

Modified files:
	chapel/test/types/type_variables/deitz/: test_nested1.future 

---------------------------------------------------------------------------

03/15/06 17:42:06 -- waynew

Log message:
	Perl script to run tests in parallel. It invokes start_test on the
	specified directories (current if none specified). If a list of
	nodes is specified, it will run start_test in parallel on the nodes.
	See the head of paratest.server.pl for the requirements.

Added files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

03/15/06 17:43:21 -- waynew

Log message:
	Companion script needed by paratest.server.pl to run tests in
	parallel. See the head of paratest.server.pl for the requirements and
	usage.

Added files:
	chapel/test/: paratest.client.pl 

---------------------------------------------------------------------------

03/15/06 17:45:31 -- waynew

Log message:
	Subsumed by paratest.server.pl.

Removed files:
	chapel/test/: testdirs.pl 

---------------------------------------------------------------------------

03/15/06 18:54:49 -- jplevyak

Log message:
	Add instantiated nested functions (where the parent is being
	instantiated) into the analysis dispatch tables.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

03/15/06 20:33:34 -- jplevyak

Log message:
	Remove CACHE_CALLEES which didn't work with wrappers and instantiation
	and add a new caching mechanism which handles normal statically bound
	functions directly from the set of abstract values at a call site.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h pattern.cpp pattern.h 
	                      pnode.cpp pnode.h 

---------------------------------------------------------------------------

03/16/06 09:03:07 -- jplevyak

Log message:
	Copy the cached Match before returning it to prevent any sharing issues.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/16/06 10:50:36 -- deitz

Log message:
	Removed hack that kept functions from being added to the visible
	function list during analysis.

Modified files:
	chapel/compiler/symtab/: symscope.cpp 

---------------------------------------------------------------------------

03/16/06 13:23:08 -- deitz

Log message:
	Fixed a bug in interpreter function resolution that gets my
	instantiated nested function tests working.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

03/16/06 13:30:15 -- bradc

Log message:
	Small change to our build procedure, based on discussions
	with Wayne about his parallel testing scripts this morning.
	When built, the compiler is stored in compiler/ and
	compiler/$(PLATFORM), where compiler/$(PLATFORM) was
	implemented as a symbolic link to CHPLDEVTMP if that environment
	variable was set.  CHPLDEVTMP is meant to be used for truly
	temporary files like object files and Makefile dependences
	and not for targets of the build process, so I switched this
	to be a true subdirectory regardless of how CHPLDEVTMP is
	set.  Object files and such are still stored in symbolic links
	to CHPLDEVTMP if set, as always.
	
	Implementors who use CHPLDEVTMP may need to blow away their
	compiler/$(PLATFORM) directory (where PLATFORM is linux for
	most of us) in order to see this change and get a clean
	build.

Modified files:
	chapel/compiler/: Makefile 
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

03/16/06 14:18:00 -- waynew

Log message:
	Fixed error in cleanup code to remove temporary files. The temporay
	.synch directory should be correctly removed after testing now.

Modified files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

03/16/06 16:01:22 -- jplevyak

Log message:
	Add accumulators to the timers.
	Add % of time used to the analysis pass timers and a summary
	  for all of analysis.
	Enhance the analysis pattern match cache to maintain multiple
	  matches at each call site.  It now gets an 88% hit rate.
	Add the pattern match cache hit rate to the verbose analysis output.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h pattern.cpp pattern.h timer.h 

---------------------------------------------------------------------------

03/16/06 16:02:11 -- jplevyak

Log message:
	Add a comment regarding a limitation of the cache.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/16/06 17:06:43 -- deitz

Log message:
	Added test of a generic stack based on Figure 7 in the spec.

Added files:
	chapel/test/types/type_variables/deitz/: test_stack.chpl 
	                                         test_stack.good 

---------------------------------------------------------------------------

03/16/06 19:18:12 -- jplevyak

Log message:
	Steve's patch to get nested functions into the new function list.
	My patches to put all the collected ASTs into a set to uniquify
	  them and remove duplicates.
	My patch to invalidate the sym_match_cache when adding new
	  instantiated functions and/or wrappers.
	This fixes test_nested2.chpl

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: pattern.cpp pattern.h 

---------------------------------------------------------------------------

03/17/06 07:07:06 -- jplevyak

Log message:
	Fix bug whereby the new aggressive caching was causing errors not to
	be reported by not caching results from matches which generate errors.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/17/06 07:08:29 -- jplevyak

Log message:
	Add note about what is wrong and make into a future

Added files:
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.future 

---------------------------------------------------------------------------

03/17/06 07:12:04 -- jplevyak

Log message:
	remove working future

Removed files:
	chapel/test/types/type_variables/deitz/: test_nested2.future 

---------------------------------------------------------------------------

03/17/06 07:16:03 -- jplevyak

Log message:
	I think this test is now working... steve if you could take a look,
	I put a note in the .future

Modified files:
	chapel/test/types/type_variables/deitz/: test_nested1.future 

---------------------------------------------------------------------------

03/17/06 09:24:47 -- deitz

Log message:
	Removed .future and updated .good.

Modified files:
	chapel/test/types/type_variables/deitz/: test_nested1.good 
Removed files:
	chapel/test/types/type_variables/deitz/: test_nested1.future 

---------------------------------------------------------------------------

03/20/06 08:49:50 -- deitz

Log message:
	Removed .future of now-working test.  It was failing because of the
	visibility of a nested function in an instantiated function.

Removed files:
	chapel/test/types/type_variables/deitz/: test_datablock.future 

---------------------------------------------------------------------------

03/20/06 11:50:22 -- deitz

Log message:
	Remove .future and update .good of working test.  There is a
	performance problem here, but we can deal with that later.

Modified files:
	chapel/test/classes/deitz/inherit/: test_inherit3.good 
Removed files:
	chapel/test/classes/deitz/inherit/: test_inherit3.future 

---------------------------------------------------------------------------

03/20/06 13:36:23 -- deitz

Log message:
	Started transformation of how iterators are handled.  The basic idea
	is that classes which can be iterated over, like sequences, domains,
	and arrays, support functions that return the first element, return a
	next element (based on a given element), and return true if there is
	another element.  The ForLoopStmt is thus transformed into a loop that
	calls these statements.
	
	This greatly improves the implementation of iterating over a domain as
	we no longer create the sequence of indices.
	
	To handle iterators, which is not yet done as they currently just
	return sequences which are iterated over, we will change the iterator
	function into an iterator class that supports the iterator
	functionality.
	
	Normalized ForLoopStmt to use above functions and removed it.
	
	Added support for iteration over arithmetic arrays.
	
	Removed bogus test test/arrays/deitz/test_array_class1.chpl.
	
	Added tests of iteration over 1D domains and iteration over arithmetic
	arrays.
	
	Updated a few test outputs.

Modified files:
	chapel/compiler/AST/: baseAST.cpp bb.cpp build.cpp stmt.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h build.h stmt.h symscope.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp parallel.cpp 
	                         runInterpreter.cpp semanticChecks.cpp 
	chapel/compiler/traversals/: Makefile.share fixup.cpp 
	                             htmlview.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	                          _chpl_indefinite.chpl _chpl_seq.chpl 
	chapel/test/arrays/deitz/: test_domains_2D.chpl 
	                           test_domains_2D.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/demo/review_060130/: jacobi2.good 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/memory/shannon/: printMemTable.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/test/arrays/deitz/: test_array_traverse1.chpl 
	                           test_array_traverse1.good 
	                           test_domain_1D.chpl 
	                           test_domain_1D.good 
	chapel/test/types/seq/bradc/: emptySeq2.future 
Removed files:
	chapel/compiler/traversals/: createNestedFuncIterators.cpp 
	                             createNestedFuncIterators.h 
	chapel/test/arrays/deitz/: test_array_class1.chpl 
	                           test_array_class1.future 
	                           test_array_class1.good 

---------------------------------------------------------------------------

03/20/06 14:06:10 -- deitz

Log message:
	Implemented += on indefinite domains to be equivalent to the add
	method so d += 2 is the same as d.add(2).
	
	This is done with a nested overloaded function similar to how type
	select is implemented, and this could be implemented with type select.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_base.chpl _chpl_indefinite.chpl 
	chapel/test/flowanalysis/newast/: assignment_expr.good 
	                                  danglingelse.good 
	                                  whileLoop.good 

---------------------------------------------------------------------------

03/20/06 14:07:18 -- deitz

Log message:
	Removed .future for working indefinite domain with += test.

Removed files:
	chapel/test/arrays/deitz/: test_indefinite6.future 

---------------------------------------------------------------------------

03/20/06 16:41:53 -- deitz

Log message:
	Removed some dead runtime code.

Modified files:
	chapel/runtime/include/: chplio.h chplrt.h stdchpl.h 
	chapel/runtime/src/: Makefile chplio.c 
Removed files:
	chapel/runtime/include/: array.h domain.h forall.h locales.h 
	                         seq.h 
	chapel/runtime/src/: array.c domain.c 

---------------------------------------------------------------------------

03/20/06 19:37:17 -- deitz

Log message:
	Changed integer to int.
	
	Simplified test/execflags/shannon/configs/help/ directory.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: astutil.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         resolveAnalyzed.cpp runInterpreter.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_complex.chpl _chpl_file.chpl 
	                          _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl _chpl_seq.chpl 
	                          _chpl_sparse.chpl prelude.chpl 
	chapel/runtime/include/: chplio.h chplmem.h chpltypes.h config.h 
	chapel/runtime/src/: arg.c chplmem.c chplmem_tests.c chpltypes.c 
	                     config.c 
	chapel/test/Samples/ex1-astlog/: astlog1.good 
	chapel/test/Share/: ambiguousclass.chpl class-1.chpl 
	                    class-2.chpl class-3.chpl constructor-1.chpl 
	                    destruct-1.chpl domain-2-rangeerror.chpl 
	                    domain-2.chpl domain-3.chpl domain-4.chpl 
	                    domain-5.chpl domain-6.chpl domain-7.chpl 
	                    funcall-3.chpl module-1.chpl 
	                    module-2-error.chpl record-1.chpl 
	                    record-2.chpl record-3.chpl scan-1.chpl 
	                    seq-1.chpl seq-3.chpl typeselect-1.chpl 
	                    typevar-1.chpl typevar-2.chpl union-1.chpl 
	                    union-2.chpl union-3.chpl with-1.chpl 
	                    with-2.chpl 
	chapel/test/arrays/bradc/: domarr.chpl domarr1a.chpl 
	                           domarr2.chpl enumarray.chpl 
	                           noelemtype.chpl 
	chapel/test/arrays/deitz/: jacobi.chpl jacobi2.chpl jacobi3.chpl 
	                           test_anon_domain1.chpl 
	                           test_anon_domain2.chpl 
	                           test_array_1D.chpl test_array_2D.chpl 
	                           test_array_2Da.chpl 
	                           test_array_2Db.chpl 
	                           test_array_2Dc.chpl 
	                           test_array_3D.chpl test_array_8d.chpl 
	                           test_array_assign1.chpl 
	                           test_array_assign2.chpl 
	                           test_array_assign3.chpl 
	                           test_array_basic1.chpl 
	                           test_array_basic1a.chpl 
	                           test_array_class_trial1.chpl 
	                           test_array_class_trial2.chpl 
	                           test_array_class_trial3.chpl 
	                           test_array_class_trial4.chpl 
	                           test_array_class_trial4a.chpl 
	                           test_array_class_trial5.chpl 
	                           test_array_class_trial5a.chpl 
	                           test_array_class_trial5b.chpl 
	                           test_array_class_trial6.chpl 
	                           test_array_in_class.chpl 
	                           test_array_init1.chpl 
	                           test_array_init2.chpl 
	                           test_array_init3.chpl 
	                           test_array_integer_2d.chpl 
	                           test_array_integer_3d.chpl 
	                           test_array_of_array1.chpl 
	                           test_array_of_class1.chpl 
	                           test_array_of_record1.chpl 
	                           test_array_of_string1.chpl 
	                           test_basic1d1.chpl test_basic1d2.chpl 
	                           test_basic1d3.chpl test_basic1d4.chpl 
	                           test_bounds1.chpl test_bounds2.chpl 
	                           test_class_array1.chpl 
	                           test_domain1.chpl test_domain2.chpl 
	                           test_domain2D.chpl test_domain3.chpl 
	                           test_domain_1D.chpl 
	                           test_domains_1D.chpl 
	                           test_domains_2D.chpl 
	                           test_domains_2Da.chpl 
	                           test_domains_2Db.chpl 
	                           test_domains_5D.chpl 
	                           test_indefinite1.chpl 
	                           test_indefinite3.chpl 
	                           test_indefinite4.chpl 
	                           test_indefinite5.chpl 
	                           test_indefinite6.chpl 
	                           test_indefinite7.chpl 
	                           test_record_of_record_instantiated.chpl 
	                           test_record_of_record_instantiated2.chpl 
	                           test_scalar_promote1.chpl 
	                           test_scalar_promote2.chpl 
	chapel/test/arrays/jplevyak/: simple-1.chpl simple-2.chpl 
	                              simple-3.chpl simple-4.chpl 
	                              test_domain2-error.chpl 
	chapel/test/classes/bradc/: namecheck.chpl noinit.chpl 
	                            noinit2.chpl trivialclass.chpl 
	                            weirdinit.chpl writeclass.chpl 
	                            writeclass1a.chpl writeclass2.chpl 
	                            writeclass2a.chpl writeclass3.chpl 
	                            writerecord.chpl writerecord1a.chpl 
	                            writerecord2.chpl 
	                            writeunion-workaround.chpl 
	                            writeunion.chpl 
	chapel/test/classes/bradc/records/: assignRecord.chpl 
	                                    assignRecord2.chpl 
	                                    assignRecord3.chpl 
	                                    namecheck.chpl 
	                                    twoRecords.chpl 
	                                    twoRecords2.chpl 
	chapel/test/classes/bradc/unions/: assign.chpl assign1a.chpl 
	                                   stringunion.chpl 
	                                   twounions.chpl 
	                                   writeunion.chpl 
	chapel/test/classes/deitz/: test_adotbdotc.chpl 
	                            test_anon_record1.chpl 
	                            test_anon_record2.chpl 
	                            test_anon_record3.chpl 
	                            test_badclass1.chpl test_class1.chpl 
	                            test_class1a.chpl test_class2.chpl 
	                            test_class3.chpl test_class4.chpl 
	                            test_class5.chpl 
	                            test_class_construct.chpl 
	                            test_class_construct1.chpl 
	                            test_class_in_usertype.chpl 
	                            test_class_with1.chpl 
	                            test_class_with2.chpl 
	                            test_class_with3.chpl test_dot1.chpl 
	                            test_inherit_mod1.chpl 
	                            test_inherit_mod2.chpl 
	                            test_inherit_mod3.chpl 
	                            test_method1.chpl test_method1a.chpl 
	                            test_method2.chpl test_method3.chpl 
	                            test_method4.chpl test_method5.chpl 
	                            test_method6.chpl test_method6.good 
	                            test_method7.chpl test_method7.good 
	                            test_method8.chpl test_method9.chpl 
	                            test_method9a.chpl 
	                            test_method_call2.chpl 
	                            test_method_noparens.chpl 
	                            test_mf_class.chpl 
	                            test_mf_record.chpl 
	                            test_nested_method.chpl 
	                            test_nested_record1.chpl 
	                            test_nested_record2.chpl 
	                            test_nested_record_function.chpl 
	                            test_nil1.chpl test_nil2.chpl 
	                            test_nomembers1.chpl 
	                            test_primary_method1.chpl 
	                            test_record2.chpl test_record3.chpl 
	                            test_record7.chpl test_record9.chpl 
	                            test_record_assign1.chpl 
	                            test_record_equal1.chpl 
	                            test_record_equal2.chpl 
	                            test_record_field1.chpl 
	                            test_record_in_function1.chpl 
	                            test_record_user_write.chpl 
	                            test_record_with1.chpl 
	                            test_secondary_method1.chpl 
	                            test_secondary_method2.chpl 
	                            test_secondary_method3.chpl 
	                            test_string_field2.chpl 
	                            test_sum_type1.chpl test_this1.chpl 
	                            test_this2.chpl 
	                            test_type_in_class1.chpl 
	                            test_type_in_class2.chpl 
	                            test_type_in_class3.chpl 
	                            test_type_in_class4.chpl 
	                            test_union1.chpl test_union2.chpl 
	                            test_union3.chpl test_union4.chpl 
	                            test_union_method1.chpl 
	                            test_union_method2.chpl 
	                            test_union_method3.chpl 
	chapel/test/classes/deitz/infer/: infer_field2.chpl 
	                                  infer_field2a.chpl 
	                                  infer_field2b.chpl 
	                                  infer_field2c.chpl 
	chapel/test/classes/deitz/inherit/: test_inherit1.chpl 
	                                    test_inherit2.chpl 
	                                    test_inherit3.chpl 
	                                    test_inherit4.chpl 
	                                    test_inherit_error1.chpl 
	                                    test_inherit_error2.chpl 
	                                    test_inherit_error3.chpl 
	                                    test_value1.chpl 
	                                    test_value2.chpl 
	chapel/test/classes/deitz/suite1/: test1.chpl test2.chpl 
	                                   test3.chpl test4.chpl 
	                                   test5.chpl 
	chapel/test/classes/jplevyak/: record_equal-1.chpl 
	                               record_equal-2.chpl 
	                               record_type_hierarchy-1.chpl 
	                               record_type_hierarchy-2.chpl 
	                               record_type_hierarchy-3-error.chpl 
	                               sum_type-1.chpl 
	                               union_type_hierarchy-1.chpl 
	                               union_type_hierarchy-2.chpl 
	                               union_type_hierarchy-3-error.chpl 
	chapel/test/classes/shannon/: inoutClassDataMember.chpl 
	                              overloadedFunction.chpl 
	                              overloadedFunction.good 
	                              varIntTypedSetInConstructor.chpl 
	chapel/test/compflags/bradc/passlist/: test.chpl 
	chapel/test/compflags/bradc/tokenflags/: tokentest.chpl 
	                                         tokentest2.chpl 
	                                         tokentest3.chpl 
	                                         tokentest3.good 
	chapel/test/demo/review_060130/: history_accumulator.chpl 
	                                 iterators.chpl jacobi.chpl 
	                                 jacobi2.chpl 
	chapel/test/distributions/bradc/foundations/: blockdist1.chpl 
	                                              blockdist2.chpl 
	                                              blockdist3.chpl 
	chapel/test/domains/bradc/: bydomain.chpl constdomain.chpl 
	                            domainindex.chpl paramRank.chpl 
	                            subdomain.chpl 
	chapel/test/domains/roxana/classes/: test_domain_class.chpl 
	chapel/test/domains/roxana/helper/: test_hash_table.chpl 
	                                    test_hash_table1.chpl 
	                                    test_hash_table1a.chpl 
	                                    test_hash_table2.chpl 
	                                    test_hash_table3.chpl 
	chapel/test/domains/roxana/index/: test_index_assign.chpl 
	                                   test_index_expr.chpl 
	                                   test_index_expr0.chpl 
	                                   test_index_expr1.chpl 
	                                   test_index_expr2.chpl 
	chapel/test/domains/shannon/: by4Dtuple.chpl expand3D.chpl 
	                              expand3Dtuple.chpl 
	                              expandError.chpl 
	                              expandOverload.chpl 
	                              exterior3D.chpl 
	                              exterior3Dtuple.chpl 
	                              interior3D.chpl 
	                              interior3Dtuple.chpl 
	                              interiorErrorNeg.chpl 
	                              interiorErrorPos.chpl 
	                              interiorRangeValues.chpl 
	                              translate3D.chpl 
	                              translate3Dtuple.chpl 
	chapel/test/execflags/shannon/: unexpectedFlag.chpl 
	chapel/test/execflags/shannon/configs/: configVar.chpl 
	                                        configVarDash.chpl 
	                                        configVarDashS.chpl 
	                                        configVarDashSVarEquals.chpl 
	                                        configVarFile.chpl 
	                                        configVarFloat.chpl 
	                                        configVarHashCollision.chpl 
	                                        configVarInvalidFloat.chpl 
	                                        configVarInvalidFloatLineno.chpl 
	                                        configVarInvalidInteger.chpl 
	                                        configVarInvalidInteger.good 
	                                        configVarInvalidIntegerLineno.chpl 
	                                        configVarInvalidIntegerLineno.good 
	                                        configVarInvalidName.chpl 
	                                        configVarNonLiteralConfigs.chpl 
	                                        configVarNonLiteralInit.chpl 
	                                        configVarSetNotDeclared.chpl 
	                                        configVarWithSpaces.chpl 
	chapel/test/execflags/shannon/configs/help/: .cvsignore 
	                                             configVar-Dash.chpl 
	                                             configVarModStrings1.chpl 
	                                             configVarSetTwoTypes.chpl 
	                                             varNameQMark.chpl 
	chapel/test/flowanalysis/jplevyak/config/: configVar.chpl 
	chapel/test/flowanalysis/newast/: codegen_test.chpl domarr.chpl 
	                                  enum.chpl enumarray.chpl 
	                                  formatoutput.chpl 
	                                  octalliteral.chpl 
	                                  protoast_test.chpl 
	                                  sum_type-1.chpl 
	                                  sum_type-2.chpl var2.chpl 
	chapel/test/functions/bradc/: arrayArg-explicit.chpl 
	                              arrayArg.chpl defaultParam.chpl 
	                              defaultParam2.chpl 
	                              defaultParamInOut.chpl 
	                              defaultParamWithReturn.chpl 
	                              intents-arrays.chpl 
	                              intents-arrays2.chpl 
	                              intents-arrays2a.chpl 
	                              intents-classes.chpl 
	                              intents-classes2-error.chpl 
	                              intents-classes2.chpl 
	                              intents-classes3.chpl 
	                              intents-classes4.chpl 
	                              intents-error.chpl intents.chpl 
	                              multipleParamsSameType.chpl 
	                              nameDefaultParamInOut.chpl 
	                              retstmt.chpl 
	                              returnFnCallIntents.chpl 
	                              typefn.chpl typefn2.chpl 
	                              typefn3.chpl typefn4.chpl 
	                              typefn4a.chpl typefn5.chpl 
	chapel/test/functions/deitz/: test_assign1.chpl 
	                              test_bad_function.chpl 
	                              test_default_param1.chpl 
	                              test_default_param2.chpl 
	                              test_default_param3.chpl 
	                              test_forallexpr1.chpl 
	                              test_formal_copy1.chpl 
	                              test_inout1.chpl 
	                              test_iterator1.chpl 
	                              test_iterator2.chpl 
	                              test_named_default_gotcha.chpl 
	                              test_named_param1.chpl 
	                              test_named_param2.chpl 
	                              test_named_param3.chpl 
	                              test_operator_overloading1.chpl 
	                              test_operator_overloading2.chpl 
	                              test_out_parameter1.chpl 
	                              test_overload_type_intent.chpl 
	                              test_overload_type_intent.good 
	                              test_return1.chpl 
	                              test_return2.chpl 
	                              test_var_function1.chpl 
	                              test_var_function_access.chpl 
	                              test_var_function_access2.chpl 
	                              test_var_method.chpl 
	                              test_where_param1.chpl 
	                              test_where_param2.chpl 
	                              test_where_param3.chpl 
	chapel/test/functions/deitz/default/: test_default1.chpl 
	                                      test_default2.chpl 
	                                      test_default3-error.chpl 
	                                      test_default3.chpl 
	                                      test_default4-error.chpl 
	                                      test_default4.chpl 
	                                      test_default5.chpl 
	                                      test_default6.chpl 
	                                      test_default7.chpl 
	                                      test_default7a.chpl 
	                                      test_default7b.chpl 
	                                      test_default7c.chpl 
	                                      test_default7d.chpl 
	                                      test_default8.chpl 
	                                      test_default8a.chpl 
	                                      test_default9.chpl 
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed1.chpl 
	                                           test_defaultnamed2.chpl 
	                                           test_defaultnamed3.chpl 
	                                           test_defaultnamed4.chpl 
	chapel/test/functions/deitz/hips06/: fibonacci_squares.chpl 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator1.chpl 
	                                        test_instantiate_iterator2.chpl 
	                                        test_instantiate_iterator2a.chpl 
	                                        test_instantiate_iterator3.chpl 
	                                        test_instantiate_iterator3a.chpl 
	chapel/test/functions/deitz/methods/: test_default_arg.chpl 
	                                      test_default_arg2.chpl 
	chapel/test/functions/deitz/named/: test_named1.chpl 
	                                    test_named2.chpl 
	                                    test_named3-error.chpl 
	                                    test_named3.chpl 
	                                    test_named4.chpl 
	                                    test_named5.chpl 
	                                    test_named6-error.chpl 
	chapel/test/functions/deitz/nested/: test_nested1.chpl 
	                                     test_nested2.chpl 
	                                     test_nested3.chpl 
	                                     test_nested4.chpl 
	                                     test_nested5.chpl 
	                                     test_nested6.chpl 
	                                     test_nested_global1.chpl 
	chapel/test/functions/deitz/varargs/: test_varargs3.chpl 
	                                      test_varargs4.chpl 
	                                      test_varargs5.chpl 
	                                      test_varargs5.good 
	                                      test_varargs6.chpl 
	                                      test_varargs7.chpl 
	                                      test_varargs9.chpl 
	                                      test_varargs9.good 
	                                      test_varargs_write.chpl 
	                                      test_varargs_write.good 
	chapel/test/functions/jplevyak/: call_mapping-1.chpl 
	                                 call_mapping-2.chpl 
	                                 dynamic-partial-1.chpl 
	                                 equal-4.chpl equal-5.chpl 
	                                 equal-6.chpl equal-7.chpl 
	                                 equal-9.chpl 
	                                 equal_method-1.chpl 
	                                 member-1.chpl member-2.chpl 
	                                 type_var_fun-1.chpl 
	                                 var_return-1.chpl 
	                                 var_return-2.chpl 
	chapel/test/functions/mjoyner/labelret/: label1.chpl label2.chpl 
	                                         label3.chpl label4.chpl 
	                                         label5.chpl 
	chapel/test/functions/mjoyner/nested/: mutual_recursive.chpl 
	chapel/test/functions/shannon/: methodWithVarargs.chpl 
	chapel/test/hpcc/: fft.chpl randomaccess-distributed.chpl 
	                   randomaccess-local.chpl 
	                   randomaccess-redundant.chpl 
	chapel/test/interpreter/deitz/: domarr.chpl test_array1d.chpl 
	chapel/test/interpreter/jplevyak/: equal-4.chpl equal-5.chpl 
	                                   equal-6.chpl equal-7.chpl 
	                                   equal-9.chpl label1.chpl 
	                                   label2.chpl label3.chpl 
	                                   label4.chpl label5.chpl 
	                                   member-1.chpl 
	                                   op_associativity-1.chpl 
	                                   select-1.chpl 
	                                   test_cond_expr-1.chpl 
	                                   test_default_param1.chpl 
	                                   test_default_param2.chpl 
	                                   test_default_param3.chpl 
	                                   test_enum1.chpl 
	                                   test_enum1.good 
	                                   test_if_then_else.chpl 
	                                   test_integer_method.chpl 
	                                   test_integer_method.good 
	                                   test_named_param1.chpl 
	                                   test_named_param2.chpl 
	                                   test_named_param3.chpl 
	chapel/test/memory/shannon/: configVarFile.chpl freedMalloc.good 
	                             jacobi.chpl memmaxBytes.good 
	                             memmaxExceeds.chpl 
	                             memmaxExceedsLineno.chpl 
	                             memmaxInput.good memmaxIntOnly.good 
	                             memstatPrint.chpl 
	                             memtraceNoFilename.chpl 
	                             printFinalMemStat.chpl 
	                             printMemTable.chpl 
	                             printMemTable2.chpl 
	                             reallocWithoutMalloc.good 
	                             reallocWithoutMallocLineno.good 
	                             reallocZeroSize.good 
	chapel/test/modules/bradc/: twomodulessamevar.chpl 
	chapel/test/modules/deitz/: test_module_use1.chpl 
	                            test_module_use2.chpl 
	chapel/test/no_infer/: jacobi.chpl test_domains_2D.chpl 
	                       test_seq1.chpl 
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/ft/: ft-serial-working1.chpl ft-serial.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
	chapel/test/parallel/cobegin/waynew/: cobegin.simple1.chpl 
	                                      cobegin.simple2.chpl 
	chapel/test/parsing/shannon/: invalidToken.chpl 
	chapel/test/reductions/bradc/: sumreduce.chpl 
	chapel/test/reductions/bradc/manual/: identisinferredvar.chpl 
	                                      identisvar.chpl 
	                                      inferstatetype.chpl 
	                                      inferstatetype2.chpl 
	                                      manual.chpl promote.chpl 
	                                      threeclasstypes-construct.chpl 
	                                      threeclasstypes-manual.chpl 
	                                      threeclasstypes.chpl 
	                                      threeuses-cast.chpl 
	                                      threeuses.chpl 
	                                      twouses.chpl usestate.chpl 
	                                      usestate2.chpl 
	                                      usetype.chpl usetype2.chpl 
	chapel/test/ssca/ssca2/: ssca2.blc-hack.chpl ssca2.blc.chpl 
	                         ssca2.blc.init.chpl ssca2.chpl 
	                         ssca2.orig.chpl ssca2.origpar.chpl 
	                         ssca2.parses.chpl 
	                         ssca2.typedarrays.chpl 
	chapel/test/trivial/bradc/: defaultinit.chpl defaultinit1a.chpl 
	                            defaultinit2.chpl formatoutput.chpl 
	                            initvarsamename.chpl 
	                            initvarsamename2.chpl 
	                            octalliteral.chpl 
	                            opAssociativity.chpl 
	                            readmethod2.chpl readmethod2a.chpl 
	                            redefinevar.chpl testAllScopes.chpl 
	                            testAllScopes2.chpl unroll.chpl 
	                            unroll.good vardecls.chpl 
	                            vardecls1a.chpl vardecls1b.chpl 
	chapel/test/trivial/bradc/entrypoint/: twomains2.chpl 
	                                       twomains2a.chpl 
	                                       wrongmain.chpl 
	                                       wrongmain2.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl mvm-seq.good 
	                                     test.chpl test.good 
	chapel/test/trivial/bradc/protoast/codegen/: enum.chpl test.chpl 
	chapel/test/trivial/deitz/: foo.chpl test_a_few_functions.chpl 
	                            test_block_call.chpl 
	                            test_coerce_integer_to_string1.chpl 
	                            test_coerce_integer_to_string1.good 
	                            test_coerce_integer_to_string2.chpl 
	                            test_cond_expr1.chpl 
	                            test_config_use_before_decl.chpl 
	                            test_for_param.chpl 
	                            test_format_primitives.chpl 
	                            test_goto1.chpl test_goto2.chpl 
	                            test_if_expr.chpl test_if_expr2.chpl 
	                            test_if_expr3.chpl 
	                            test_if_then_else.chpl 
	                            test_integer_method.chpl 
	                            test_integer_method.good 
	                            test_integer_method2.chpl 
	                            test_integer_method2.good 
	                            test_let5.chpl test_let6.chpl 
	                            test_let8.chpl 
	                            test_nested_function_call.chpl 
	                            test_nested_function_call2.chpl 
	                            test_parse_stmt.chpl 
	                            test_scope1.chpl test_scope2.chpl 
	                            test_scope3.chpl test_select1.chpl 
	                            test_short_identifiers.chpl 
	                            test_type_select1-handcode.chpl 
	                            test_type_select1-handcode.good 
	                            test_type_select1.chpl 
	                            test_type_select1.good 
	                            test_use_before_def1.chpl 
	                            test_use_before_def2.chpl 
	                            test_use_before_def3.chpl 
	                            test_var_decl2.chpl 
	                            test_var_decl3.chpl 
	                            test_var_decl_init1.chpl 
	                            test_var_decl_init2.chpl 
	                            test_var_decl_init3.chpl 
	                            test_var_decl_strange1.chpl 
	                            test_write_return.chpl 
	chapel/test/trivial/deitz/demo/: sample1.chpl sample1b.chpl 
	                                 sample2.chpl 
	chapel/test/trivial/jplevyak/: pragma-4.chpl pragma-5.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1.chpl 
	                                         inlfunc1_report.chpl 
	                                         inlfunc2.chpl 
	                                         inlfunc2_report.chpl 
	chapel/test/trivial/mjoyner/iterators/: nest_func_iterator1.chpl 
	                                        nest_func_iterator2.chpl 
	                                        nest_func_iterator2a.chpl 
	                                        nest_func_iterator2b.chpl 
	                                        nest_func_iterator3.chpl 
	                                        nest_func_iterator4.chpl 
	                                        nest_func_iterator5.chpl 
	                                        nest_func_iterator6.chpl 
	                                        nest_func_iterator7.chpl 
	chapel/test/trivial/mjoyner/nestedfndef/: nested_fndef1.chpl 
	                                          nested_fndef2.chpl 
	                                          nested_fndef3.chpl 
	                                          nested_fndef4.chpl 
	                                          nested_fndef5.chpl 
	chapel/test/trivial/mjoyner/seq/: seq_index1.chpl 
	                                  seq_index2.chpl 
	                                  seq_reverse.chpl 
	chapel/test/trivial/preston/: aliasing.chpl boundfunction.chpl 
	                              if.chpl 
	chapel/test/trivial/roxana/: test_param_decl.chpl 
	                             test_param_decl2.chpl 
	                             test_param_decl3.chpl 
	chapel/test/trivial/shannon/: condReturn.chpl condReturn2.chpl 
	                              condReturn3.chpl exp.chpl 
	                              multipleArgAssert.chpl 
	                              readWriteComplex.chpl 
	                              readWriteComplexLineno.chpl 
	                              readWriteFloatInt.chpl 
	                              readWriteUserType.chpl 
	                              readWriteUserType.good 
	chapel/test/trivial/shannon/quit/: assert.chpl exit.chpl 
	                                   halt.chpl 
	chapel/test/types/enum/deitz/: test_enum1.chpl test_enum1.good 
	                               test_enum2.chpl test_enum2.good 
	                               test_enum3.chpl test_enum3.good 
	                               test_enum4.chpl test_enum4.good 
	                               test_enum5.chpl test_enum5.good 
	                               test_enum6.chpl test_enum6.good 
	                               test_enum_overload.chpl 
	                               test_enum_overload.good 
	chapel/test/types/file/: freadClass.chpl freadComplex.chpl 
	                         freadIntFloat.chpl freadNoInt.chpl 
	                         freadNoInt.good 
	                         freadToClassDataMember.chpl 
	                         fwritelnClassFile.chpl invalidMode.chpl 
	chapel/test/types/like/deitz/: test_like1.chpl 
	chapel/test/types/seq/bradc/: emptySeq.chpl emptySeq2.chpl 
	                              emptySeq2a.chpl emptySeq3.chpl 
	                              hashEquals.chpl length.chpl 
	                              length.modify.chpl recordSeq.chpl 
	                              returnSeq.chpl returnSeq2.chpl 
	chapel/test/types/seq/deitz/: test_seq1.chpl test_seq1a.chpl 
	                              test_seq1b.chpl test_seq1c.chpl 
	                              test_seq1d.chpl test_seq3.chpl 
	                              test_seq4.chpl test_seq5.chpl 
	                              test_seq6.chpl test_seq7.chpl 
	                              test_seq8.chpl test_seq9.chpl 
	                              test_seq_arg.chpl 
	                              test_seq_arg.good 
	                              test_seq_class1.chpl 
	                              test_seq_class2.chpl 
	                              test_seq_htuple1.chpl 
	                              test_seq_htuple2.chpl 
	                              test_seq_of_seq.chpl 
	                              test_seq_of_seq2.chpl 
	                              test_seq_record1.chpl 
	                              test_seq_return1.chpl 
	                              test_seq_reverse1.chpl 
	                              test_seq_tuple.chpl 
	                              test_seq_tuple3.chpl 
	chapel/test/types/tuple/bradc/: returnTuple.chpl 
	                                returnTuple2.chpl 
	                                returnTuple3.chpl 
	                                writeTuple.chpl 
	chapel/test/types/tuple/deitz/: test_class_tuple1.chpl 
	                                test_destruct.chpl 
	                                test_destruct_nested.chpl 
	                                test_htuple1.chpl 
	                                test_htuple2.chpl 
	                                test_htuple3.chpl 
	                                test_htuple4.chpl 
	                                test_htuple5.chpl 
	                                test_htuple6.chpl 
	                                test_htuple7.chpl 
	                                test_htuple_of_tuple.chpl 
	                                test_param_tuple_arg1-error.chpl 
	                                test_param_tuple_arg1.chpl 
	                                test_tuple_function1.chpl 
	                                test_tuple_of_tuples.chpl 
	                                test_tuple_record_implementation1.chpl 
	                                test_tuple_record_implementation10.chpl 
	                                test_tuple_record_implementation11.chpl 
	                                test_tuple_record_implementation12.chpl 
	                                test_tuple_record_implementation13.chpl 
	                                test_tuple_record_implementation14.chpl 
	                                test_tuple_record_implementation15.chpl 
	                                test_tuple_record_implementation16.chpl 
	                                test_tuple_record_implementation2.chpl 
	                                test_tuple_record_implementation3.chpl 
	                                test_tuple_record_implementation4.chpl 
	                                test_tuple_record_implementation5.chpl 
	                                test_tuple_record_implementation6.chpl 
	                                test_tuple_record_implementation7.chpl 
	                                test_tuple_record_implementation8.chpl 
	                                test_tuple_record_implementation9.chpl 
	                                test_tuple_simple1.chpl 
	                                test_tuple_simple1a.chpl 
	                                test_tuple_simple2.chpl 
	                                test_tuple_simple5.chpl 
	                                test_tuple_type1.chpl 
	                                test_tuple_type2.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class3.chpl 
	                                         test_clone_class4.chpl 
	                                         test_clone_class5.chpl 
	                                         test_clone_function1.chpl 
	                                         test_clone_function3.chpl 
	                                         test_clone_function4.chpl 
	                                         test_clone_function5.chpl 
	                                         test_clone_function6.chpl 
	                                         test_clone_function_multiargs1.chpl 
	                                         test_coerce1.chpl 
	                                         test_coerce1.good 
	                                         test_datablock.chpl 
	                                         test_datablock2.chpl 
	                                         test_datablock3.chpl 
	                                         test_foo_instantiated1.chpl 
	                                         test_infer_class2.chpl 
	                                         test_instantiate1.chpl 
	                                         test_instantiate2.chpl 
	                                         test_instantiate3.chpl 
	                                         test_instantiate4.chpl 
	                                         test_instantiate_construct1.chpl 
	                                         test_myseq0.chpl 
	                                         test_myseq1.chpl 
	                                         test_myseq2.chpl 
	                                         test_nested1.chpl 
	                                         test_nested2.chpl 
	                                         test_nested2.good 
	                                         test_overinstantiate1.chpl 
	                                         test_overinstantiate1a.chpl 
	                                         test_overload_function1.chpl 
	                                         test_overload_integerfloat1.chpl 
	                                         test_overload_integerfloat1.good 
	                                         test_overload_integerfloat2.chpl 
	                                         test_overload_integerfloat2.good 
	                                         test_overload_integerfloat3.chpl 
	                                         test_overload_integerfloat3.good 
	                                         test_overload_integerfloat4.chpl 
	                                         test_overload_integerfloat4.good 
	                                         test_paramvar_class1.chpl 
	                                         test_paramvar_function1.chpl 
	                                         test_paramvar_record1.chpl 
	                                         test_recursiveinstantiate1.chpl 
	                                         test_swap.chpl 
	                                         test_tuplelike1.chpl 
	                                         test_typevar_class1.chpl 
	                                         test_typevar_class10.chpl 
	                                         test_typevar_class2.chpl 
	                                         test_typevar_class2a.chpl 
	                                         test_typevar_class3.chpl 
	                                         test_typevar_class4.chpl 
	                                         test_typevar_class5.chpl 
	                                         test_typevar_class6.chpl 
	                                         test_typevar_class7.chpl 
	                                         test_typevar_class8.chpl 
	                                         test_typevar_class9.chpl 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function4.chpl 
	                                         test_typevar_record1.chpl 
	                                         test_typevar_record2.chpl 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record4.chpl 
	                                         test_typevar_record5.chpl 
	                                         test_typevar_record6.chpl 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo1.chpl 
	                                                   test_foo2.chpl 
	                                                   test_foo3.chpl 
	                                                   test_foo4.chpl 
	                                                   test_foo5-error.chpl 
	                                                   test_foo5.chpl 
	                                                   test_foo7.chpl 
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_clone_class-1.chpl 
	                                            test_coerce1.chpl 
	                                            test_coerce1.good 
	                                            test_coerce2.chpl 
	                                            test_coerce2.good 
	                                            test_typevar_class1.chpl 
	                                            type_variables-1.chpl 
	                                            typevar_constraint-1.chpl 
	                                            typevar_use-1.chpl 
	                                            where-1.chpl 
	                                            where-2-error.chpl 
	                                            where-2.chpl 
	                                            where-3.chpl 
	chapel/test/types/typedefs/bradc/: localType.chpl 
	                                   localType2.chpl 
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.chpl 
Added files:
	chapel/test/execflags/shannon/configs/help/: configVar-Dash.good 
	                                             configVarDefaultValue.good 
	                                             configVarHelp.good 
	                                             configVarModStrings1.good 
	                                             configVarModStrings2.good 
	                                             configVarSetOver.good 
	                                             configVarSetTwoTypes.good 
	                                             configVarTwoModules.good 
	                                             varNameEnumQM.good 
	                                             varNameQMark.good 
Removed files:
	chapel/test/execflags/shannon/configs/help/: PREDIFF 
	                                             configVar-Dash.cfghelp 
	                                             configVarDefaultValue.cfghelp 
	                                             configVarHelp.cfghelp 
	                                             configVarModStrings1.cfghelp 
	                                             configVarModStrings2.cfghelp 
	                                             configVarSetOver.cfghelp 
	                                             configVarSetTwoTypes.cfghelp 
	                                             configVarTwoModules.cfghelp 
	                                             varNameEnumQM.cfghelp 
	                                             varNameQMark.cfghelp 

---------------------------------------------------------------------------

03/21/06 09:13:55 -- jplevyak

Log message:
	Fix assert in danglingelse.chpl test.
	Comment issue with nested functions.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

03/21/06 11:02:58 -- jplevyak

Log message:
	Change "split unique" to "split eager" to reduce the number of analysis
	  clones for common functions (like =).

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp fun.h 

---------------------------------------------------------------------------

03/21/06 13:26:47 -- deitz

Log message:
	Changed function to fun, and to &&, or to ||, not to !, and mod to %.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_complex.chpl _chpl_file.chpl 
	                          _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl _chpl_seq.chpl 
	                          _chpl_sparse.chpl i.chpl prelude.chpl 
	chapel/test/Share/: ambiguousclass.chpl arrayfun-1.chpl 
	                    class-2.chpl class-3.chpl destruct-1.chpl 
	                    funcall-1.chpl funcall-2.chpl funcall-3.chpl 
	                    intent-1.chpl intent-2.chpl intent-3.chpl 
	                    intent-4.chpl intent-5-error.chpl 
	                    intent-6-error.chpl intent-7-error.chpl 
	                    intent-8-error.chpl main-1.chpl 
	                    namedargs-1.chpl noinitdecl-4-error.chpl 
	                    union-3.chpl 
	chapel/test/arrays/deitz/: test_array_class_trial1.chpl 
	                           test_array_class_trial2.chpl 
	                           test_array_class_trial3.chpl 
	                           test_array_class_trial4.chpl 
	                           test_array_class_trial4a.chpl 
	                           test_array_class_trial5.chpl 
	                           test_array_class_trial5a.chpl 
	                           test_array_class_trial5b.chpl 
	                           test_array_class_trial6.chpl 
	                           test_domain1.chpl test_domain2.chpl 
	                           test_domain2D.chpl test_domain3.chpl 
	                           test_scalar_promote1.chpl 
	                           test_scalar_promote2.chpl 
	chapel/test/arrays/jplevyak/: ranks-1.chpl simple-4.chpl 
	                              test_domain2-error.chpl 
	chapel/test/classes/bradc/: badred.chpl callMethodOnClass.chpl 
	                            declClassType.chpl 
	                            declClassType1a.chpl 
	                            declClassType1b.chpl 
	                            declClassType1c.chpl namecheck.chpl 
	                            noinit.chpl noinit2.chpl 
	                            weirdinit.chpl writeclass1a.chpl 
	                            writerecord1a.chpl 
	chapel/test/classes/bradc/records/: assignRecord.chpl 
	                                    assignRecord2.chpl 
	chapel/test/classes/deitz/: test_anon_record2.chpl 
	                            test_bad_function_noparens.chpl 
	                            test_class_construct1.chpl 
	                            test_class_with2.chpl 
	                            test_inherit_mod1.chpl 
	                            test_inherit_mod2.chpl 
	                            test_inherit_mod3.chpl 
	                            test_method1.chpl test_method1a.chpl 
	                            test_method2.chpl test_method3.chpl 
	                            test_method4.chpl test_method5.chpl 
	                            test_method6.chpl test_method7.chpl 
	                            test_method8.chpl test_method9.chpl 
	                            test_method9a.chpl 
	                            test_method_call1.chpl 
	                            test_method_call2.chpl 
	                            test_method_noparens.chpl 
	                            test_mf_class.chpl 
	                            test_mf_record.chpl 
	                            test_mycomplex_record.chpl 
	                            test_nested_method.chpl 
	                            test_nested_record_function.chpl 
	                            test_nomembers1.chpl 
	                            test_primary_method1.chpl 
	                            test_record_in_function1.chpl 
	                            test_record_method1.chpl 
	                            test_record_method2.chpl 
	                            test_record_user_write.chpl 
	                            test_secondary_method1.chpl 
	                            test_secondary_method2.chpl 
	                            test_secondary_method3.chpl 
	                            test_sum_type1.chpl test_this1.chpl 
	                            test_this2.chpl test_union3.chpl 
	                            test_union_method1.chpl 
	                            test_union_method2.chpl 
	                            test_union_method3.chpl 
	chapel/test/classes/deitz/infer/: infer_field1.chpl 
	                                  infer_field2.chpl 
	                                  infer_field2a.chpl 
	                                  infer_field2b.chpl 
	                                  infer_field2c.chpl 
	chapel/test/classes/deitz/inherit/: test_inherit2.chpl 
	                                    test_inherit3.chpl 
	                                    test_inherit4.chpl 
	chapel/test/classes/jplevyak/: inherit-2.chpl 
	                               record_type_hierarchy-1.chpl 
	                               record_type_hierarchy-2.chpl 
	                               record_type_hierarchy-3-error.chpl 
	                               sum_type-1.chpl sum_type-3.chpl 
	                               union_type_hierarchy-1.chpl 
	                               union_type_hierarchy-2.chpl 
	                               union_type_hierarchy-3-error.chpl 
	chapel/test/classes/shannon/: inoutClassDataMember.chpl 
	                              overloadedFunction.chpl 
	chapel/test/demo/review_060130/: history_accumulator.chpl 
	                                 jacobi.chpl jacobi2.chpl 
	chapel/test/distributions/bradc/foundations/: blockdist1.chpl 
	                                              blockdist2.chpl 
	                                              blockdist3.chpl 
	chapel/test/domains/bradc/: constdomain.chpl 
	chapel/test/domains/roxana/classes/: test_domain_class.chpl 
	chapel/test/domains/roxana/helper/: test_hash_table.chpl 
	                                    test_hash_table2.chpl 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarNotInModule.chpl 
	                                        configVarTwoModsNoneSpecified.chpl 
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVarModStrings1.chpl 
	                                             configVarModStrings2.chpl 
	                                             configVarSetOver.chpl 
	                                             configVarSetTwoTypes.chpl 
	                                             configVarTwoModules.chpl 
	chapel/test/flowanalysis/newast/: bitwise_ops.chpl chain.chpl 
	                                  codegen_test.chpl 
	                                  compSampler.chpl 
	                                  conditional.chpl 
	                                  danglingelse.good 
	                                  globalref.chpl 
	                                  logical_and.chpl 
	                                  logical_not.chpl mod.chpl 
	                                  multiple_return.chpl 
	                                  mutrec.chpl noargs.chpl 
	                                  noop.chpl onearg.chpl 
	                                  sum_type-1.chpl 
	                                  sum_type-2.chpl 
	                                  usebeforedef.chpl 
	chapel/test/flowanalysis/recursion/: rec_fun-1.chpl 
	                                     rec_fun-2.chpl 
	                                     rec_fun-3.chpl 
	                                     rec_obj-1.chpl 
	                                     rec_obj-2.chpl 
	                                     rec_obj-3.chpl 
	chapel/test/functions/bradc/: arrayArg-explicit.chpl 
	                              arrayArg.chpl chain.chpl 
	                              defaultParam.chpl 
	                              defaultParam2.chpl 
	                              defaultParamInOut.chpl 
	                              defaultParamWithReturn.chpl 
	                              globalref.chpl inferReturn.chpl 
	                              intents-arrays.chpl 
	                              intents-arrays2.chpl 
	                              intents-arrays2a.chpl 
	                              intents-classes.chpl 
	                              intents-classes2-error.chpl 
	                              intents-classes2.chpl 
	                              intents-classes3.chpl 
	                              intents-classes4.chpl 
	                              intents-error.chpl 
	                              intents-strings.chpl intents.chpl 
	                              multipleParamsSameType.chpl 
	                              mutrec.chpl 
	                              nameDefaultParamInOut.chpl 
	                              noargs.chpl onearg.chpl 
	                              retstmt.chpl 
	                              returnFnCallIntents.chpl 
	                              typefn.chpl typefn2.chpl 
	                              typefn3.chpl typefn4.chpl 
	                              typefn4a.chpl typefn5.chpl 
	                              usebeforedef.chpl 
	chapel/test/functions/deitz/: test_assign1.chpl 
	                              test_bad_function.chpl 
	                              test_clone_coerce.chpl 
	                              test_default_param1.chpl 
	                              test_default_param2.chpl 
	                              test_default_param3.chpl 
	                              test_formal_copy1.chpl 
	                              test_inout1.chpl 
	                              test_named_default_gotcha.chpl 
	                              test_named_param1.chpl 
	                              test_named_param2.chpl 
	                              test_named_param3.chpl 
	                              test_nested1.chpl 
	                              test_operator_overloading1.chpl 
	                              test_operator_overloading2.chpl 
	                              test_out_parameter1.chpl 
	                              test_overload_type_intent.chpl 
	                              test_return1.chpl 
	                              test_return2.chpl 
	                              test_typeconstraint1.chpl 
	                              test_var_function1.chpl 
	                              test_var_function_access.chpl 
	                              test_var_function_access2.chpl 
	                              test_var_method.chpl 
	                              test_where_param1.chpl 
	                              test_where_param2.chpl 
	                              test_where_param3.chpl 
	chapel/test/functions/deitz/default/: test_default1.chpl 
	                                      test_default2.chpl 
	                                      test_default3-error.chpl 
	                                      test_default3.chpl 
	                                      test_default4-error.chpl 
	                                      test_default4.chpl 
	                                      test_default5.chpl 
	                                      test_default6.chpl 
	                                      test_default7.chpl 
	                                      test_default7a.chpl 
	                                      test_default7b.chpl 
	                                      test_default7c.chpl 
	                                      test_default7d.chpl 
	                                      test_default8.chpl 
	                                      test_default8a.chpl 
	                                      test_default9.chpl 
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed1.chpl 
	                                           test_defaultnamed2.chpl 
	                                           test_defaultnamed3.chpl 
	                                           test_defaultnamed4.chpl 
	chapel/test/functions/deitz/methods/: test_default_arg.chpl 
	                                      test_default_arg2.chpl 
	chapel/test/functions/deitz/named/: test_named1.chpl 
	                                    test_named2.chpl 
	                                    test_named3-error.chpl 
	                                    test_named3.chpl 
	                                    test_named4.chpl 
	                                    test_named5.chpl 
	                                    test_named6-error.chpl 
	chapel/test/functions/deitz/nested/: test_nested1.chpl 
	                                     test_nested2.chpl 
	                                     test_nested3.chpl 
	                                     test_nested4.chpl 
	                                     test_nested5.chpl 
	                                     test_nested6.chpl 
	                                     test_nested7.chpl 
	                                     test_nested_global1.chpl 
	chapel/test/functions/deitz/varargs/: test_varargs1.chpl 
	                                      test_varargs2.chpl 
	                                      test_varargs3.chpl 
	                                      test_varargs4.chpl 
	                                      test_varargs5.chpl 
	                                      test_varargs6.chpl 
	                                      test_varargs7.chpl 
	                                      test_varargs8.chpl 
	                                      test_varargs9.chpl 
	                                      test_varargs_write.chpl 
	chapel/test/functions/jplevyak/: call_mapping-1.chpl 
	                                 call_mapping-2.chpl 
	                                 dynamic-partial-1.chpl 
	                                 equal-9.chpl 
	                                 equal_method-1.chpl 
	                                 intent-1.chpl intent-2.chpl 
	                                 intent-3.chpl intent-4.chpl 
	                                 intent-5-error.chpl 
	                                 intent-6.chpl 
	                                 intent-7-error.chpl 
	                                 intent-8-error.chpl 
	                                 intent-9.chpl 
	                                 introduce-dispatch-1.chpl 
	                                 member-1.chpl member-2.chpl 
	                                 partial-1.chpl partial-3.chpl 
	                                 partial-4.chpl partial-5.chpl 
	                                 partial-6.chpl partial-7.chpl 
	                                 type_var_fun-1.chpl 
	                                 var_return-1.chpl 
	                                 var_return-2.chpl 
	                                 zeroarity-bound-1.chpl 
	                                 zeroarity-bound-error-1.chpl 
	                                 zeroarity-bound-error-2.chpl 
	chapel/test/functions/jplevyak/scoping/: visibility-1.chpl 
	chapel/test/functions/mjoyner/labelret/: label1.chpl label2.chpl 
	                                         label3.chpl label4.chpl 
	                                         label5.chpl 
	chapel/test/functions/mjoyner/nested/: mutual_recursive.chpl 
	chapel/test/functions/shannon/: methodWithVarargs.chpl 
	chapel/test/hpcc/: fft.chpl 
	chapel/test/interpreter/jplevyak/: bitwise_ops-1.chpl 
	                                   bitwise_ops-1.good 
	                                   break-5.chpl call-1.chpl 
	                                   compSampler-1.chpl 
	                                   compSampler-1.good 
	                                   conditional-1.chpl 
	                                   conditional-1.good 
	                                   continue-5.chpl equal-9.chpl 
	                                   goto-1.chpl goto-2.chpl 
	                                   label1.chpl label2.chpl 
	                                   label3.chpl label4.chpl 
	                                   label5.chpl 
	                                   test_default_param1.chpl 
	                                   test_default_param2.chpl 
	                                   test_default_param3.chpl 
	                                   test_integer_method.chpl 
	                                   test_named_param1.chpl 
	                                   test_named_param2.chpl 
	                                   test_named_param3.chpl 
	                                   variables_in_nested_function-1.chpl 
	                                   variables_in_nested_function-2.chpl 
	chapel/test/lowlevelcg/jplevyak/: bitwise_ops.chpl 
	chapel/test/memory/shannon/: memstatPrint.chpl 
	                             printFinalMemStat.chpl 
	chapel/test/modules/bradc/: nestedmodule.chpl 
	                            twomodulesonefile.chpl 
	                            twomodulessamevar.chpl 
	                            use-mutrec.chpl use.chpl 
	chapel/test/modules/bradc/manymodules/: flatmodules.chpl 
	                                        manymodules.chpl 
	chapel/test/modules/bradc/manymodules/modules/: a.chpl b.chpl 
	                                                c.chpl d.chpl 
	                                                e.chpl g.chpl 
	                                                main.chpl z.chpl 
	chapel/test/modules/deitz/: test_module_use1.chpl 
	                            test_module_use2.chpl 
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/ft/: ft-serial-working1.chpl ft-serial.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
	chapel/test/parallel/cobegin/waynew/: cobegin.simple2.chpl 
	chapel/test/parsing/shannon/: invalidToken.chpl 
	                              invalidToken.good 
	chapel/test/reductions/bradc/manual/: identisinferredvar.chpl 
	                                      identisvar.chpl 
	                                      inferstatetype.chpl 
	                                      inferstatetype2.chpl 
	                                      manual.chpl promote.chpl 
	                                      threeclasstypes-construct.chpl 
	                                      threeclasstypes-manual.chpl 
	                                      threeclasstypes.chpl 
	                                      threeuses-cast.chpl 
	                                      threeuses.chpl 
	                                      twouses.chpl usestate.chpl 
	                                      usestate2.chpl 
	                                      usetype.chpl usetype2.chpl 
	chapel/test/reviews/jplevyak/: review1.chpl review2.chpl 
	                               review3.chpl 
	chapel/test/ssca/ssca2/: ssca2.blc-hack.chpl ssca2.blc.chpl 
	                         ssca2.blc.init.chpl ssca2.chpl 
	                         ssca2.orig.chpl ssca2.origpar.chpl 
	                         ssca2.parses.chpl 
	                         ssca2.typedarrays.chpl 
	chapel/test/trivial/bradc/: conditional.chpl conditional.good 
	                            defaultinit1a.chpl 
	                            initvarsamename2.chpl noop.chpl 
	                            readmethod.chpl readmethod2.chpl 
	                            readmethod2a.chpl testAllScopes.chpl 
	                            testAllScopes2.chpl undefinedfn.chpl 
	                            undefinedfn2.chpl unroll.chpl 
	                            vardecls.chpl vardecls1a.chpl 
	                            vardecls1b.chpl 
	chapel/test/trivial/bradc/entrypoint/: main.chpl main2.chpl 
	                                       twomains.chpl 
	                                       twomains2.chpl 
	                                       twomains2a.chpl 
	                                       wrongmain.chpl 
	                                       wrongmain2.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
	chapel/test/trivial/bradc/protoast/codegen/: test.chpl 
	chapel/test/trivial/deitz/: test_a_few_functions.chpl 
	                            test_block_call.chpl 
	                            test_coerce_integer_to_string2.chpl 
	                            test_function_question_mark.chpl 
	                            test_integer_method.chpl 
	                            test_integer_method2.chpl 
	                            test_let8.chpl 
	                            test_nested_function_call.chpl 
	                            test_nested_function_call2.chpl 
	                            test_param_fold4.chpl 
	                            test_plusassign.chpl 
	                            test_scope1.chpl test_scope2.chpl 
	                            test_type_select1-handcode.chpl 
	                            test_type_select1.chpl 
	                            test_use_before_def2.chpl 
	                            test_use_before_def3.chpl 
	                            test_var_decl_init1.chpl 
	                            test_var_decl_init2.chpl 
	                            test_var_decl_init3.chpl 
	                            test_var_decl_init5.chpl 
	                            test_write_return.chpl 
	chapel/test/trivial/deitz/demo/: sample1.chpl sample1a.chpl 
	                                 sample1b.chpl sample2.chpl 
	chapel/test/trivial/jplevyak/: break-5.chpl continue-5.chpl 
	                               destruct-arg-1.chpl goto-1.chpl 
	                               goto-2.chpl label-1.chpl 
	                               label-2.chpl pragma-1.chpl 
	                               pragma-2.chpl pragma-3.chpl 
	                               pragma-4.chpl pragma-5.chpl 
	                               variables_in_nested_function-2.chpl 
	                               variables_in_nested_function.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1.chpl 
	                                         inlfunc1_report.chpl 
	                                         inlfunc1_report.good 
	                                         inlfunc2.chpl 
	                                         inlfunc2_report.chpl 
	                                         inlfunc2_report.good 
	chapel/test/trivial/mjoyner/iterators/: nest_func_iterator1.chpl 
	                                        nest_func_iterator2.chpl 
	                                        nest_func_iterator2a.chpl 
	                                        nest_func_iterator2b.chpl 
	                                        nest_func_iterator3.chpl 
	                                        nest_func_iterator4.chpl 
	                                        nest_func_iterator5.chpl 
	                                        nest_func_iterator6.chpl 
	                                        nest_func_iterator7.chpl 
	chapel/test/trivial/mjoyner/nestedfndef/: nested_fndef1.chpl 
	                                          nested_fndef2.chpl 
	                                          nested_fndef3.chpl 
	                                          nested_fndef4.chpl 
	                                          nested_fndef5.chpl 
	chapel/test/trivial/mjoyner/seq/: seq_index1.chpl 
	                                  seq_index2.chpl 
	                                  seq_reverse.chpl 
	chapel/test/trivial/preston/: aliasing.chpl boundfunction.chpl 
	                              curry.chpl gcd.chpl if.chpl 
	chapel/test/trivial/shannon/: bitwise_ops.chpl bitwise_ops.good 
	                              compSampler.chpl compSampler.good 
	                              condReturn.chpl condReturn2.chpl 
	                              condReturn3.chpl logical_and.chpl 
	                              logical_and.good logical_not.chpl 
	                              logical_not.good mod.chpl mod.good 
	                              readWriteBool.chpl 
	                              readWriteBoolLineno.chpl 
	chapel/test/types/complex/deitz/: test_complex_overload.chpl 
	chapel/test/types/enum/deitz/: test_enum_overload.chpl 
	chapel/test/types/file/: fwriteSelectStmt.chpl 
	chapel/test/types/seq/bradc/: returnSeq.chpl returnSeq2.chpl 
	chapel/test/types/seq/deitz/: test_seq_arg.chpl 
	                              test_seq_return1.chpl 
	chapel/test/types/string/shannon/: returnsVoid.chpl 
	                                   stringEquals.chpl 
	chapel/test/types/tuple/bradc/: returnTuple.chpl 
	                                returnTuple2.chpl 
	                                returnTuple3.chpl 
	chapel/test/types/tuple/deitz/: test_param_tuple_arg1-error.chpl 
	                                test_param_tuple_arg1.chpl 
	                                test_tuple_function1.chpl 
	                                test_tuple_record_implementation1.chpl 
	                                test_tuple_record_implementation10.chpl 
	                                test_tuple_record_implementation11.chpl 
	                                test_tuple_record_implementation12.chpl 
	                                test_tuple_record_implementation13.chpl 
	                                test_tuple_record_implementation14.chpl 
	                                test_tuple_record_implementation15.chpl 
	                                test_tuple_record_implementation16.chpl 
	                                test_tuple_record_implementation2.chpl 
	                                test_tuple_record_implementation3.chpl 
	                                test_tuple_record_implementation4.chpl 
	                                test_tuple_record_implementation5.chpl 
	                                test_tuple_record_implementation6.chpl 
	                                test_tuple_record_implementation7.chpl 
	                                test_tuple_record_implementation8.chpl 
	                                test_tuple_record_implementation9.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1.chpl 
	                                         test_clone_class1a.chpl 
	                                         test_clone_class1b.chpl 
	                                         test_clone_class2.chpl 
	                                         test_clone_class2a.chpl 
	                                         test_clone_class2b.chpl 
	                                         test_clone_class3.chpl 
	                                         test_clone_class4.chpl 
	                                         test_clone_class5.chpl 
	                                         test_clone_function1.chpl 
	                                         test_clone_function2.chpl 
	                                         test_clone_function3.chpl 
	                                         test_clone_function4.chpl 
	                                         test_clone_function5.chpl 
	                                         test_clone_function6.chpl 
	                                         test_clone_function_multiargs1.chpl 
	                                         test_coerce1.chpl 
	                                         test_datablock.chpl 
	                                         test_datablock2.chpl 
	                                         test_foo_instantiated1.chpl 
	                                         test_instantiate1.chpl 
	                                         test_instantiate2.chpl 
	                                         test_instantiate3.chpl 
	                                         test_instantiate4.chpl 
	                                         test_instantiate_construct1.chpl 
	                                         test_myseq0.chpl 
	                                         test_myseq1.chpl 
	                                         test_myseq2.chpl 
	                                         test_nested1.chpl 
	                                         test_nested2.chpl 
	                                         test_overinstantiate1.chpl 
	                                         test_overinstantiate1a.chpl 
	                                         test_overload_function1.chpl 
	                                         test_overload_integerfloat1.chpl 
	                                         test_overload_integerfloat2.chpl 
	                                         test_overload_integerfloat3.chpl 
	                                         test_overload_integerfloat4.chpl 
	                                         test_paramvar_function1.chpl 
	                                         test_recursiveinstantiate1.chpl 
	                                         test_stack.chpl 
	                                         test_swap.chpl 
	                                         test_typevar_class1.chpl 
	                                         test_typevar_class10.chpl 
	                                         test_typevar_class2.chpl 
	                                         test_typevar_class2a.chpl 
	                                         test_typevar_class3.chpl 
	                                         test_typevar_class4.chpl 
	                                         test_typevar_class5.chpl 
	                                         test_typevar_class6.chpl 
	                                         test_typevar_class7.chpl 
	                                         test_typevar_class8.chpl 
	                                         test_typevar_class9.chpl 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function4.chpl 
	                                         test_typevar_record1.chpl 
	                                         test_typevar_record2.chpl 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record4.chpl 
	                                         test_typevar_record5.chpl 
	                                         test_typevar_record6.chpl 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo1.chpl 
	                                                   test_foo2.chpl 
	                                                   test_foo3.chpl 
	                                                   test_foo4.chpl 
	                                                   test_foo5-error.chpl 
	                                                   test_foo5.chpl 
	                                                   test_foo6.chpl 
	                                                   test_foo7.chpl 
	chapel/test/types/type_variables/jplevyak/: question_mark-1.chpl 
	                                            test_clone_class-1.chpl 
	                                            test_coerce1.chpl 
	                                            test_coerce2.chpl 
	                                            test_typevar_class1.chpl 
	                                            type_variables-1.chpl 
	                                            typevar_constraint-1.chpl 
	                                            where-1.chpl 
	                                            where-2-error.chpl 
	                                            where-2.chpl 
	                                            where-3-error.chpl 
	                                            where-3.chpl 
	                                            where-4.chpl 
	chapel/test/types/typedefs/bradc/: localType.chpl 
	                                   localType2.chpl 
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.chpl 

---------------------------------------------------------------------------

03/21/06 13:30:37 -- deitz

Log message:
	Implemented general serial reduction mechanism.
	
	Implemented standard reduction sum, but there must be a better way to
	do this.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_seq.chpl 
Added files:
	chapel/test/types/seq/deitz/: test_reduce1.chpl 
	                              test_reduce1.good 

---------------------------------------------------------------------------

03/21/06 17:06:38 -- deitz

Log message:
	Added list of features I derived from a skim of the spec.  Implemented
	features have an X in front of them, though we probably want to
	reorganize this list to be divided into an unimplemented and an
	implemented part, before someone goes through and adds a ton of
	trivial implemented features.

Added files:
	chapel/compiler/: Features 

---------------------------------------------------------------------------

03/21/06 17:41:12 -- waynew

Log message:
	Fixes/mods to get working under SunOS. Tested with Linux and SunOS.

Modified files:
	chapel/test/: paratest.server.pl paratest.client.pl 

---------------------------------------------------------------------------

03/21/06 17:44:45 -- waynew

Log message:
	Currently really have gmake Makefiles for generated C files. Should
	explicitly call gmake. If we later intend to only require make to
	run the Chapel compiler, we can change this back to make (and make
	sure that make doesn't alias/link to gmake for testing purposes).

Modified files:
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

03/21/06 22:24:24 -- jplevyak

Log message:
	Institute limit on the number of analysis passes (50) to
	  catch loops a earlier.
	Large scale change to cloning to handle nested functions.
	  Nested functions are now handled in top down order.
	  Clones are forced to obey nested.
	  Fixup of type variables is deferred till the EntrySets are
	    processed in nesting order.
	This fixes trivial/bradc/unroll.chpl.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.h clone.cpp clone.h fa.cpp fa.h 
	                      fun.cpp fun.h var.cpp var.h 
Removed files:
	chapel/test/trivial/bradc/: unroll.future 

---------------------------------------------------------------------------

03/22/06 10:11:34 -- jplevyak

Log message:
	Fix .good

Modified files:
	chapel/test/flowanalysis/newast/: domarr.good 

---------------------------------------------------------------------------

03/22/06 10:13:10 -- jplevyak

Log message:
	more .good files.

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

03/22/06 10:13:38 -- jplevyak

Log message:
	more .good

Modified files:
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

03/22/06 10:25:34 -- jplevyak

Log message:
	update .good and remove .future

Modified files:
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
Removed files:
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.future 

---------------------------------------------------------------------------

03/22/06 10:33:23 -- deitz

Log message:
	Implemented initial functionality to build a scalar promotion wrapper
	where necessary.  It is called only from in the context of the
	interpreter at this time.
	
	It uses Type::scalarPromotionType which is set in arrays and sequences
	and says that this type can promote.
	
	The wrapper is built in FnSymbol::promotion_wrapper and it takes a map
	from formal ArgSymbols to TypeSymbols.
	
	I don't think we want to promote the = function to handle assignment
	to sequences, arrays, etc., but I think there are other ways to handle
	this too.
	
	This gets test/arrays/deitz/test_scalar_promote1.chpl and
	test/arrays/deitz/test_scalar_promote2.chpl working correctly in the
	interpreter using the --scalar-promotion and -i flags.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

03/22/06 10:57:04 -- jplevyak

Log message:
	Fix assert corner case and remove 2 .futures for type select

Modified files:
	chapel/compiler/ifa/: clone.cpp 
Removed files:
	chapel/test/trivial/deitz/: test_type_select1-handcode.future 
	                            test_type_select1.future 

---------------------------------------------------------------------------

03/22/06 10:59:42 -- jplevyak

Log message:
	Update .future and add note: this test doesn't work in the interpreter...

Modified files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator2a.future 

---------------------------------------------------------------------------

03/22/06 11:04:01 -- bradc

Log message:
	Added support to the testing system for running the entire
	system in "interpreter" mode via the -interpret, --interpret,
	or -i flags.  When run in this mode, tests that provide
	execution-line options are skipped, as are tests that are
	labeled as "noexec" and future tests.  In addition, a NOINTERP
	file can be dropped into a directory to indicate that the
	interpreter should not be tested there (this is currently
	used in the interpreter/ test directory ironically, since
	using the interpreter there results in -ii being invoked,
	which tests the interactive interpreter capability).
	
	At this point, there are still ~110 tests that fail in the
	interpreter, so I'm not going to set up our nightly regressions
	to test the interpreter yet.  Once we whittle this number down
	to something manageable, running this nightly will be useful
	for keeping the interpreter solid.
	
	Primary causes for widespread failure currently are:
	
	- differing output for exit/halt/etc. (may be resolved once
	  Shannon's reimplementation of them as varargs function is
	  complete?)
	- lack of fscanf capabilites in the interpreter
	- poor support enum
	- perhaps something related to argument intents?
	
	Otherwise, there are a variety of smaller issues that we
	can work through over time.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/classes/deitz/infer/: .cvsignore 
	chapel/test/interpreter/deitz/: NOINTERP 
	chapel/test/interpreter/jplevyak/: NOINTERP 
	chapel/test/memory/shannon/outofmemory/: .cvsignore 
	chapel/test/types/string/deitz/: .cvsignore 

---------------------------------------------------------------------------

03/22/06 11:07:13 -- bradc

Log message:
	Another session's work on HPCC FFT -- this isn't a particularly
	clean snapshot, but I'm unlikely to get back to it in the next
	few days, so wanted to capture where I was.  Realized after this
	pass that I should be using complex types, which ought to simplify
	a lot of the ridiculousness in the current code.

Modified files:
	chapel/test/hpcc/: fft.chpl 

---------------------------------------------------------------------------

03/22/06 13:20:56 -- deitz

Log message:
	Fixed sequence assignment to deeply copy a sequence.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

03/22/06 14:15:57 -- deitz

Log message:
	Fixed .chpls from mistake in function to fun change.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function4.chpl 

---------------------------------------------------------------------------

03/22/06 15:18:34 -- jplevyak

Log message:
	Fix a bug in the interpreter which was causing a loop.
	Added test case which detected it.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
Added files:
	chapel/test/interpreter/jplevyak/: partial-6.chpl partial-6.good 

---------------------------------------------------------------------------

03/22/06 15:51:13 -- deitz

Log message:
	Overloaded assignment for arrays and allow scalars to be assigned to
	arrays and promoted.  There is no check to make sure the shape of a
	sequence or array match in whole array assignment.  This is very
	initial.
	
	Futurized two tests that use an array field in a class.  This is no
	longer working as of this checkin.
	
	Removed several now working .futures.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/: test_array_assign2.good 
	                           test_array_float1.good 
	                           test_array_init1.good 
	                           test_array_of_string1.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
Added files:
	chapel/test/arrays/deitz/: test_array_init_with_seq.chpl 
	                           test_array_init_with_seq.good 
	                           test_class_array1.future 
	chapel/test/arrays/jplevyak/: simple-2.future 
Removed files:
	chapel/test/arrays/deitz/: jacobi3.future 
	                           test_array_assign2.future 
	                           test_array_float1.future 
	                           test_array_init1.future 
	                           test_array_of_string1.future 

---------------------------------------------------------------------------

03/22/06 15:58:19 -- waynew

Log message:
	Bug fix. Test-specific .prediff script argument to diff program
	execution output against. Changed to pass execution log ($execlog)
	instead of compilation log ($complog).

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

03/22/06 16:06:17 -- waynew

Log message:
	Changed .chpl and .good, and added .prediff for tests to handle
	nondeterministic output.

Modified files:
	chapel/test/parallel/cobegin/waynew/: cobegin.simple0.chpl 
	                                      cobegin.simple0.good 
	                                      cobegin.simple1.chpl 
	                                      cobegin.simple1.good 
	                                      cobegin.simple2.chpl 
	                                      cobegin.simple2.good 
Added files:
	chapel/test/parallel/cobegin/waynew/: cobegin.simple0.prediff 

---------------------------------------------------------------------------

03/22/06 16:47:07 -- deitz

Log message:
	Added another test of a record in a function.  It works!

Added files:
	chapel/test/classes/deitz/: test_record_in_function2.chpl 
	                            test_record_in_function2.good 

---------------------------------------------------------------------------

03/22/06 16:49:36 -- deitz

Log message:
	Added yet another record in function test where the record has a
	method that refers to a variable in the function.

Added files:
	chapel/test/classes/deitz/: test_record_in_function3.chpl 
	                            test_record_in_function3.good 

---------------------------------------------------------------------------

03/22/06 17:13:40 -- jplevyak

Log message:
	Fix SEGV.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

03/23/06 15:15:37 -- bradc

Log message:
	Added a bunch of tests related to the dispatch thread
	of the past 24 hours.
	
	dispatch.chpl is the original test I mailed about.  I
	made it a future as a placeholder for generating a
	better error message and/or adding support for a more
	C++/Java-like interpretation as we discussed (possibly
	via a compiler flag, possibly as a default to be overridden
	via a compiler flag.
	
	dispatch-withnil is the suggestion John made of supplying
	a nilType version of the function to resolve the ambiguity.
	It works as he suggested.
	
	dispatch-nevernil is the version I asked about in the meeting
	where the variable is constructed by default, avoiding the
	chance that it will be assigned nil if the user doesn't do
	so explicitly.  It works as John predicted.
	
	dispatch-nevernil2 are some variations where the member is
	non-initialized by default but is initialized in the constructor.
	Half of these work.  The other half seem to die due to problems
	invoking a constructor as part of a named argument list.  I
	think this is allowed in the language, so futurized them.

Added files:
	chapel/test/classes/bradc/: dispatch-nevernil.chpl 
	                            dispatch-nevernil.good 
	                            dispatch-nevernil2.chpl 
	                            dispatch-nevernil2.good 
	                            dispatch-nevernil2a.chpl 
	                            dispatch-nevernil2a.future 
	                            dispatch-nevernil2a.good 
	                            dispatch-nevernil2b.chpl 
	                            dispatch-nevernil2b.future 
	                            dispatch-nevernil2b.good 
	                            dispatch-nevernil2c.chpl 
	                            dispatch-nevernil2c.good 
	                            dispatch-withnil.chpl 
	                            dispatch-withnil.good dispatch.chpl 
	                            dispatch.future dispatch.good 

---------------------------------------------------------------------------

03/23/06 16:47:36 -- deitz

Log message:
	Fixed precedence of :, reduce, and scan.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

03/23/06 17:26:08 -- bradc

Log message:
	Thanks to the Deitz compiler message interpreter system (tm),
	removed my own thinkos that were causing these tests to fail.
	How reassuring!

Modified files:
	chapel/test/classes/bradc/: dispatch-nevernil2a.chpl 
	                            dispatch-nevernil2b.chpl 
Removed files:
	chapel/test/classes/bradc/: dispatch-nevernil2a.future 
	                            dispatch-nevernil2b.future 

---------------------------------------------------------------------------

03/24/06 06:53:19 -- jplevyak

Log message:
	Function visibility for closures is now determined by the point where
	the function name was captured.
	- For the interpreter this means capturing the initial closure creation
	   point.
	- For compiled code
	  - analysis now tracks the visibility point separately
	  - visibility is a factor in dispatch, and caching of pattern match results
	  - visibility is stored in the closure runtime object as a "call context id".
	  - dynamic dispatch can dispatch on call context id.
	- added new tests for visibility and for dynamic dispatch based on call context
	    these work in both the interpreter and for compiled code
	
	Also, I fixed jplevyak/scoping/visibility-1.chpl which was testing
	  shadowing of nested functions, however this only works for functions
	  which are identical (as in this test).  The more complete test would
	  include nested functions which cover the arguments of a function
	  higher up.  I will add  test for that.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: clone.cpp fa.cpp fa.h fun.cpp ifa.h 
	                      pattern.cpp pattern.h pnode.cpp pnode.h 
	                      sym.cpp sym.h 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/passes/: resolveAnalyzed.cpp runInterpreter.cpp 
	chapel/modules/standard/: _chpl_closure.chpl 
Added files:
	chapel/test/functions/jplevyak/scoping/: visibility-2.chpl 
	                                         visibility-2.good 
	                                         visibility-3.chpl 
	                                         visibility-3.good 
	chapel/test/interpreter/jplevyak/: visibility-2.chpl 
	                                   visibility-2.good 
	                                   visibility-3.chpl 
	                                   visibility-3.good 
Removed files:
	chapel/test/functions/jplevyak/scoping/: visibility-1.future 

---------------------------------------------------------------------------

03/24/06 07:00:51 -- jplevyak

Log message:
	Add a test for a nested function which subsumes a higher level
	function.
	
	This test fails because we currently don't support declared subtyping
	for records (at least with the familiar syntax).  I seem to remember that
	we decided to get rid of structural subtyping for records and add
	in declared subtyping, so I think this test should work.
	Assigned to Steve on the language issue.  After that
	we can talk about whether or no this subsumption nesting issue is
	a visibility issue or a dispatch issue (we could handle it in either
	place).

Added files:
	chapel/test/functions/jplevyak/scoping/: visibility-4.chpl 
	                                         visibility-4.future 
	                                         visibility-4.good 

---------------------------------------------------------------------------

03/24/06 08:37:44 -- deitz

Log message:
	Future that shows using return in param for loop does not work because
	of nested function implementation of param for loops.  Plan to fix later.

Added files:
	chapel/test/types/tuple/deitz/: test_for_param_return.chpl 
	                                test_for_param_return.future 
	                                test_for_param_return.good 

---------------------------------------------------------------------------

03/24/06 13:04:22 -- shannon

Log message:
	Moved the handling of variable args to write/fwrite from
	normalize.cpp to a Chapel module.  Also moved the
	halt and assert calls from normalize.cpp to a module.
	Added the fflush call as a primitive to the compiler.
	Added some tests and updated the output of some others.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h normalize.cpp 
	                         runInterpreter.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
	chapel/test/trivial/shannon/: readWriteBool.chpl 
	                              readWriteBool.good 
	                              readWriteBool.stdin 
	                              readWriteBoolLineno.chpl 
	                              readWriteBoolLineno.good 
	                              readWriteBoolLineno.stdin 
	chapel/test/types/file/: freadComplex.good freadComplex.txt 
	                         fwritelnClassFile.chpl 
	                         fwritelnClassFile.good 
Added files:
	chapel/test/trivial/shannon/: multipleArgAssert.compopts 
	                              readWriteEnum.compopts 
	chapel/test/trivial/shannon/quit/: assert.compopts halt.compopts 
	                                   haltNoArgs.chpl 
	                                   haltNoArgs.compopts 
	                                   haltNoArgs.good 
	                                   haltOneArg.chpl 
	                                   haltOneArg.good 

---------------------------------------------------------------------------

03/24/06 14:24:15 -- shannon

Log message:
	Refactored assert such that its first argument
	is now a bool, and did some other minor cleanup.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 

---------------------------------------------------------------------------

03/24/06 14:32:21 -- shannon

Log message:
	Removed the primitive definition for halt and assert
	now that they're handled in a Chapel module.

Modified files:
	chapel/compiler/AST/: primitive.cpp 

---------------------------------------------------------------------------

03/24/06 14:43:44 -- shannon

Log message:
	Some minor cleanup of my halt function.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/trivial/shannon/quit/: haltNoArgs.good 

---------------------------------------------------------------------------

03/24/06 16:24:43 -- shannon

Log message:
	Backing out the changes from today's earlier
	disastrous commit.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h normalize.cpp 
	                         runInterpreter.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
Removed files:
	chapel/test/trivial/shannon/: multipleArgAssert.compopts 
	                              readWriteEnum.compopts 
	chapel/test/trivial/shannon/quit/: assert.compopts halt.compopts 
	                                   haltNoArgs.chpl 
	                                   haltNoArgs.compopts 
	                                   haltNoArgs.good 
	                                   haltOneArg.chpl 
	                                   haltOneArg.good 

---------------------------------------------------------------------------

03/24/06 16:33:56 -- deitz

Log message:
	Fixed Preston's curry test to use "= =>" and removed .future.

Modified files:
	chapel/test/trivial/preston/: curry.chpl 
Removed files:
	chapel/test/trivial/preston/: curry.future 

---------------------------------------------------------------------------

03/24/06 16:35:04 -- deitz

Log message:
	A bit of work to try to unify the tuples into a new class that is
	instantiated on its size and then cloned on the types of the
	components.  I'm getting an error in analysis that I can't completely
	narrow down.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
Added files:
	chapel/test/types/tuple/deitz/: test_mytuple.chpl 
	                                test_mytuple.future 
	                                test_mytuple.good 

---------------------------------------------------------------------------

03/26/06 17:52:29 -- jplevyak

Log message:
	Fix valgrind issues: uninitialized member variables.

Modified files:
	chapel/compiler/ifa/: fun.cpp pnode.cpp 

---------------------------------------------------------------------------

03/27/06 10:24:42 -- deitz

Log message:
	Fixed bug in my tuple transitioning idea.  Added new test for
	resolution of literal types.  Can
	
	  fun foo(param i : int)
	
	take priority over
	
	  fun foo(i : int)
	
	if the value passed is a parameter.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/test/types/tuple/deitz/: test_mytuple.chpl 
	                                test_mytuple.good 
Added files:
	chapel/test/functions/deitz/: test_lit_int1.chpl 
	                              test_lit_int1.future 
	                              test_lit_int1.good 

---------------------------------------------------------------------------

03/27/06 13:46:39 -- shannon

Log message:
	Test of nil inside a tuple.  It fails so .future.

Added files:
	chapel/test/types/tuple/shannon/: .cvsignore 
	                                  test_nil_in_tuple.chpl 
	                                  test_nil_in_tuple.future 
	                                  test_nil_in_tuple.good 

---------------------------------------------------------------------------

03/27/06 18:51:15 -- deitz

Log message:
	Major simplification to handling of for-param loops.  Unrolling is now
	done during normalization and parameter folding rather than via nested
	function resolution and inlining.  This fixes the future pertaining to
	using a return statement inside a for-param loop.

Modified files:
	chapel/compiler/AST/: build.cpp stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/passes/: normalize.cpp 
Removed files:
	chapel/test/types/tuple/deitz/: test_for_param_return.future 

---------------------------------------------------------------------------

03/28/06 09:15:25 -- jplevyak

Log message:
	Add a compilation option INSTANTIATE_FOR_NIL at the head of pattern.cpp
	  which enables instantiation of generics with nil (nil_type).
	This currently causes a few regressions.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/28/06 10:55:11 -- jplevyak

Log message:
	Several changes:
	
	 1. changed the way instantiation of values (PARAM) work.  The values now
	    have to be manifest at the call site.  We used to permit/use
	    interprocedural reaching constants.
	
	 2. There is now a set of general literal types corresponding the the primitive
	    types which are the supertypes of the specific literal types.  So
	    there is a type for "1":int and a type of "_literalInt" and a type "int"
	    and the hiarchy is built at the AST level using dispatchParents.  We
	    should probably build the tables we want for everything at the AST level.
	
	 3. Changed the handling of NestedExpr at the low level so that it is
	    a set of tags associated with the CallExpr.   This is something we
	    should do at the AST level as well as Steve and I discussed before.
	
	- updated the tests which changed.  remoed the future for test_lit_int1.chpl

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: ast.cpp code.h fa.cpp pattern.cpp 
	                      pattern.h pnode.cpp pnode.h sym.cpp sym.h 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 
Removed files:
	chapel/test/functions/deitz/: test_lit_int1.future 

---------------------------------------------------------------------------

03/28/06 18:40:28 -- jplevyak

Log message:
	Nested tuple destructuring now follows the model of top level
	argument names with the name stored in the surrounding PNode or Sym.

Modified files:
	chapel/compiler/ifa/: fa.cpp pattern.cpp pattern.h sym.cpp sym.h 

---------------------------------------------------------------------------

03/29/06 08:25:11 -- jplevyak

Log message:
	Remove tab

Modified files:
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

03/29/06 08:34:32 -- jplevyak

Log message:
	Store the literal type in the Sym for the base type.
	Fixed LIBS and 'make depend' for libifa.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: if1.cpp if1.h sym.cpp sym.h 
	chapel/compiler/ifa/libifa/: Makefile ast_to_if1.cc 

---------------------------------------------------------------------------

03/29/06 10:18:00 -- jplevyak

Log message:
	Changed is_var to is_local with the reverse meaning.
	Removed the macro Var_is_local using is_local instead.
	Cleaned up some unnecessary "class XXX" declarations

Modified files:
	chapel/compiler/ifa/: ast.cpp cg.cpp if1.cpp ssu.cpp sym.cpp 
	                      sym.h var.h 
	chapel/compiler/ifa/libifa/: ast_to_if1.cc 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

03/29/06 11:41:29 -- jplevyak

Log message:
	Cleanup old callback interfaces which were not being used.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fun.cpp fun.h 

---------------------------------------------------------------------------

03/29/06 14:16:09 -- jplevyak

Log message:
	Remove some more unused cruft.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: symscope.cpp 

---------------------------------------------------------------------------

03/29/06 14:19:18 -- jplevyak

Log message:
	Kludge/patch for test_nil_in_tuple which is now allowed to dispatch
	  to things of nil_type (e.g. generic tuples) and dtAny.
	I am not sure that this is a good idea, but it fixes the test
	  and it doesn't break any other.

Modified files:
	chapel/compiler/ifa/: pattern.cpp 
Removed files:
	chapel/test/types/tuple/shannon/: test_nil_in_tuple.future 

---------------------------------------------------------------------------

03/29/06 14:42:45 -- bradc

Log message:
	Checking in a future that I ran into, in which assigning
	integer values to elements of an array of floats causes
	compilation failures (in the write function for the array,
	strangely...).  Also checking in a coercion test for scalars
	that works as a sanity check.

Added files:
	chapel/test/trivial/bradc/: coerce.chpl coerce.future 
	                            coerce.good coerce2.chpl 
	                            coerce2.good 

---------------------------------------------------------------------------

03/29/06 16:10:49 -- bradc

Log message:
	Unfuturized a reduction test that Steve's recent reduction
	work fixed (but was failing for an unrelated reason), added
	a max reduction using the similar needs-more-work strategy
	and added a couple of new reduction tests.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/reductions/bradc/: sumreduce.chpl sumreduce.good 
Added files:
	chapel/test/reductions/bradc/: maxreduce.chpl maxreduce.good 
	                               sumreduce2.chpl sumreduce2.good 
Removed files:
	chapel/test/reductions/bradc/: sumreduce.future 

---------------------------------------------------------------------------

03/29/06 17:13:12 -- bradc

Log message:
	More tests related to features I was trying out for FFT --
	this time whole array assignment.  Naked whole array
	assignment seems to work, negating the array for the
	assignment doesn't.  This may be related to the same
	root cause as the previous future I checked in, or it
	may be a feature we just don't have implemented yet.

Added files:
	chapel/test/arrays/bradc/: arrayassign.chpl arrayassign.good 
	                           arrayassign1a.chpl 
	                           arrayassign1a.future 
	                           arrayassign1a.good 

---------------------------------------------------------------------------

03/29/06 17:22:07 -- bradc

Log message:
	A bit more work on the FFT code.  Converted things from floats
	to complexes which cleaned some of the top-level code up nicely.
	Still have lots of meat to flesh out, though (no pun intended).

Modified files:
	chapel/test/hpcc/: fft.chpl 

---------------------------------------------------------------------------

03/29/06 18:15:45 -- jplevyak

Log message:
	Remove redundant "names" vector from PNode struct.

Modified files:
	chapel/compiler/ifa/: pattern.cpp pnode.cpp pnode.h 

---------------------------------------------------------------------------

03/30/06 08:42:54 -- jplevyak

Log message:
	update .good files

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

03/30/06 12:48:24 -- shannon

Log message:
	Moved the handling of variable args to assert() from
	normalize.cpp to a Chapel module.  Added the fflush call
	as a primitive to the compiler.  This is code that had been
	committed once before as part of a larger commit that
	caused a bunch of test failures and was backed out.  This
	code passes the full suite of tests.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h normalize.cpp 
	                         runInterpreter.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
Added files:
	chapel/test/trivial/shannon/: multipleArgAssert.compopts 
	chapel/test/trivial/shannon/quit/: assert.compopts 

---------------------------------------------------------------------------

03/30/06 17:05:00 -- waynew

Log message:
	Wanted to allow regular make to build Chapel-generated code.
	 - Gen code's Makefile no longer includes compiler build Makefile(s). Those
	   still require GNU make.
	 - Removed unused macros and removed GNU make features in Makefiles included
	   in the generated code.
	 - Changed gen code build command string from "gmake" to "make".
	Should still work if "make" is GNU make.

Modified files:
	chapel/make/: Makefile Makefile.platform 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/etc/: Makefile.include 

---------------------------------------------------------------------------

03/31/06 07:40:38 -- deitz

Log message:
	Check in simpler case where coercion wrapper fails.

Added files:
	chapel/test/trivial/deitz/: coerce2.chpl coerce2.future 
	                            coerce2.good 

---------------------------------------------------------------------------

03/31/06 09:44:18 -- shannon

Log message:
	Moved the handling of variable args to halt() from
	normalize.cpp to a Chapel module.  This is code that had
	been committed once before as part of a larger commit that
	caused a bunch of test failures and was backed out.
	
	Updated some test output and added some tests.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/test/trivial/shannon/quit/: haltNoArgs.chpl 
	                                   haltNoArgs.compopts 
	                                   haltNoArgs.good 
	                                   haltOneArg.chpl 
	                                   haltOneArg.good 

---------------------------------------------------------------------------

03/31/06 11:46:30 -- bradc

Log message:
	Fixed problem with using "quit" within gdb spawned by
	--gdb not working as reported a week or so ago.  Turns
	out one of our calls to cleanup_for_exit() was passing
	in "0" even though it's a void function.  Looks like this
	has been in there forever, and either got caught by newer
	versions of gdb, or when cleanup_for_exit() became
	non-static.  In either case, it was a bug, now fixed, so
	--gdb should work as expected on linux.
	
	On cygwin, --gdb isn't currently working for me due to
	the fact that cygwin's gdb doesn't seem to be searching
	the user's path to find the program being debugged as
	it ought to.  For now I'm going to consider this a bug
	rather than trying to hack anything up to work around it.
	Debugging on linux is more fun anyway.

Modified files:
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

03/31/06 12:55:17 -- jplevyak

Log message:
	Updated a bunch of .future with some additional information after
	 looking into them.
	callmethodOnClass is working now, so removed that .future
	Changed _fdata -> _ddata.

Modified files:
	chapel/test/arrays/bradc/: domarr2.future 
	chapel/test/classes/bradc/: callMethodOnClass.good 
	                            dispatch.future 
	chapel/test/classes/bradc/unions/: stringunion.future 
	                                   writeunion.future 
	chapel/test/domains/bradc/: constdomain.future subdomain.future 
	chapel/test/domains/roxana/helper/: test_hash_table.chpl 
	                                    test_hash_table.future 
	                                    test_hash_table1a.chpl 
	                                    test_hash_table1a.future 
Removed files:
	chapel/test/classes/bradc/: callMethodOnClass.future 

---------------------------------------------------------------------------

03/31/06 13:10:05 -- deitz

Log message:
	Trying to recreate an error, I ended up creating some other .futures
	with classes where fields have no type.
	
	What's the expected behavior here (on test 7)?

Added files:
	chapel/test/classes/deitz/infer/: infer_field4.chpl 
	                                  infer_field4.future 
	                                  infer_field4.good 
	                                  infer_field5.chpl 
	                                  infer_field5.future 
	                                  infer_field5.good 
	                                  infer_field6.chpl 
	                                  infer_field6.good 
	                                  infer_field7.chpl 
	                                  infer_field7.future 
	                                  infer_field7.good 

---------------------------------------------------------------------------

03/31/06 13:27:47 -- bradc

Log message:
	As discussed at yesterday's meeting added a .future capability
	for the testing system in interpreted mode using files with the
	extension .ifuture.  Thus, if a test has a .ifuture file, it
	will be handled as usual in the testing system under a normal
	run, but handled as a future test when running the testing
	system in interpreter mode (using -i or --interpret).
	
	Recall that normal .future tests are currently skipped over when
	running the testing system in interpreter mode in order to save
	time (under the assumption that if it's not working in normal
	mode, it's less likely to work in interpreter mode).
	
	Added .ifuture files for the two largest classes of interpreter
	failures: terminating the program early (via halt, assert, or
	exit) and using fscanf.  Both of these should be cleared up as
	Shannon finishes her varargs versions of these functions.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/domains/shannon/: expandError.ifuture 
	                              interiorErrorNeg.ifuture 
	                              interiorErrorPos.ifuture 
	                              interiorErrorPosLarge.ifuture 
	chapel/test/trivial/deitz/: exit.ifuture 
	chapel/test/trivial/mjoyner/seq/: seq_index1.ifuture 
	chapel/test/trivial/shannon/: multipleArgAssert.ifuture 
	                              readStringOverflow.ifuture 
	                              readStringOverflowLineno.ifuture 
	                              readWriteBool.ifuture 
	                              readWriteBoolLineno.ifuture 
	                              readWriteComplex.ifuture 
	                              readWriteComplexFail1.ifuture 
	                              readWriteComplexLineno.ifuture 
	                              readWriteEnum.ifuture 
	                              readWriteString.ifuture 
	                              readWriteUserType.ifuture 
	chapel/test/trivial/shannon/quit/: assert.ifuture exit.ifuture 
	                                   halt.ifuture 
	chapel/test/types/file/: closeStdin.ifuture 
	                         closedWithoutOpen.ifuture 
	                         freadBoolean.ifuture freadClass.ifuture 
	                         freadComplex.ifuture freadEnum.ifuture 
	                         freadIntFailed.ifuture 
	                         freadIntFloat.ifuture 
	                         freadIntUnopenedFile.ifuture 
	                         freadNoFloat.ifuture freadNoInt.ifuture 
	                         freadNotABoolean.ifuture 
	                         freadString.ifuture 
	chapel/test/types/seq/bradc/: emptySeq2a.ifuture 

---------------------------------------------------------------------------

03/31/06 14:35:31 -- jplevyak

Log message:
	Fix the infer_field tests, by using the function resolved by analysis
	  if there is no Type::defaultValue.

Modified files:
	chapel/compiler/passes/: resolveAnalyzed.cpp 

---------------------------------------------------------------------------

03/31/06 14:37:43 -- jplevyak

Log message:
	Remove fixed .futures

Removed files:
	chapel/test/classes/deitz/infer/: infer_field4.future 
	                                  infer_field5.future 
	                                  infer_field7.future 

---------------------------------------------------------------------------

03/31/06 15:59:53 -- jplevyak

Log message:
	Fix an inefficiency in Vec::copy_internal().

Modified files:
	chapel/compiler/ifa/: vec.h 

---------------------------------------------------------------------------

03/31/06 16:09:20 -- jplevyak

Log message:
	Update test "type" -> "typedef".
	Also update .future with more questions.

Modified files:
	chapel/test/types/tuple/bradc/: returnTuple2.chpl 
	                                returnTuple2.future 

---------------------------------------------------------------------------

03/31/06 16:48:40 -- bradc

Log message:
	This file was not meant to be checked in.  It was just a test
	to see that the .ifuture mechanism was working properly.

Removed files:
	chapel/test/types/seq/bradc/: emptySeq2a.ifuture 

---------------------------------------------------------------------------

04/03/06 10:53:41 -- jplevyak

Log message:
	Fix uninitialized variable which was causing a couple valgrind issues.

Modified files:
	chapel/compiler/ifa/: sym.cpp 

---------------------------------------------------------------------------

04/03/06 12:17:35 -- jplevyak

Log message:
	update a couple of the ?? .futures

Modified files:
	chapel/test/arrays/bradc/: arrayassign1a.future 
	chapel/test/functions/bradc/: arrayArg-explicit.future 
	chapel/test/functions/jplevyak/: intent-8-error.future 
	chapel/test/reductions/bradc/manual/: promote.future 

---------------------------------------------------------------------------

04/03/06 19:35:47 -- jplevyak

Log message:
	Added a new callback to handle detction of scalar promotion coercions.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: ifa.h pattern.cpp 

---------------------------------------------------------------------------

04/04/06 10:25:41 -- shannon

Log message:
	Add compilation options for a couple of tests
	that were failing due to the lack of them.

Added files:
	chapel/test/trivial/shannon/: readWriteEnum.compopts 
	chapel/test/trivial/shannon/quit/: halt.compopts 

---------------------------------------------------------------------------

04/04/06 12:31:15 -- bradc

Log message:
	Changed sub_test's handling of timeouts to make the error
	message indicate that a timeout occurred.  Thus, compilations
	that take too long will result in:
	
	     [Error: Timed out compilation for ... ]
	
	and executions that take too long will result in:
	
	    [Error: Timed out executing program ... ]
	
	Timeouts are still set at 5 minutes by default and may be
	overridden using mechanisms described in the start_test
	comments.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

04/04/06 13:19:05 -- bradc

Log message:
	Rewrote the timedexec script based on some stuff I read
	about Perl's alarm and exec features today, to make it
	slightly more controlled and hopefully tighter than it
	had been before.  This change shouldn't affect a user's
	view of the testing system at all, only how it works.
	Let me know if you find otherwise.

Modified files:
	chapel/test/: sub_test 
	chapel/test/Bin/: timedexec 

---------------------------------------------------------------------------

04/04/06 13:57:37 -- waynew

Log message:
	Extended "sleep" for thread to test nondeterminism. Changed sorting in
	.prediff... was not currently working.

Modified files:
	chapel/test/parallel/cobegin/waynew/: cobegin.simple0.chpl 
	                                      cobegin.simple0.prediff 

---------------------------------------------------------------------------

04/04/06 16:36:36 -- waynew

Log message:
	3 changes
	 - Implemented cobegin code generation to use pthreads. This could be made
	   more modular in the future. Side note, current while blocks within a
	   cobegin block is current broken. Current workaround is to make a
	   call to the function containing the while loop.
	 - Added a couple cobegin test. One requires parallel execution. Otherwise,
	   it hangs.
	 - Changed dtUnsigned->dtUInt. On the path to enabling uint type.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: parallel.cpp runInterpreter.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/src/: Makefile 
Added files:
	chapel/test/parallel/cobegin/waynew/: depend.chpl 
	                                      depend.compopts 
	                                      depend.good writeln.chpl 
	                                      writeln.compopts 
	                                      writeln.good 
	                                      writeln.prediff 

---------------------------------------------------------------------------

04/04/06 17:11:38 -- bradc

Log message:
	Fixed a few problems in the testing system caused/revealed by
	my earlier checkins:
	
	1) added future test prefix to "unable to find executable" case
	   and improved wording to make it more accurate.
	
	2) fixed my naive handling of exit codes from system() calls
	   in perl to more accurately propagate return codes and
	   core dumps.

Modified files:
	chapel/test/: sub_test 
	chapel/test/Bin/: timedexec 

---------------------------------------------------------------------------

04/04/06 17:17:35 -- waynew

Log message:
	Runtime header and source needed to implementing calls to the
	thread library.

Added files:
	chapel/runtime/include/: chplthreads.h 
	chapel/runtime/src/: chplthreads.c 

---------------------------------------------------------------------------

04/04/06 20:12:35 -- jplevyak

Log message:
	calar promotion tests test_scalar_promote{1,2}.chpl are now
	  working.
	--scalar-promotion now on by default, the option is now a toggle
	add dtScalar (currently unused)
	scalar promotion is only active for scalars (or more specifically,
	  things which are PrimitiveType) (is that OK?)
	Added calls to promotion_wrapper and a PromotionCache to
	  mirror coercion_wrapper calls and cache.
	Added a callback "promote" to trigger creation of the promotion
	  wrapper.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: fun.cpp fun.h ifa.h pattern.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: normalize.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_scalar_promote1.future 
	                           test_scalar_promote2.future 

---------------------------------------------------------------------------

04/05/06 10:02:13 -- deitz

Log message:
	Fixed .good for test.  Is the metatype number going to keep changing?
	Maybe it should have a different name.  Instead of _meta_type120 it
	could be _meta_type_int or something.

Modified files:
	chapel/test/classes/bradc/: callMethodOnClass.good 

---------------------------------------------------------------------------

04/05/06 15:00:22 -- deitz

Log message:
	Simplified instantiation some by removing the module (which is not
	necessary now that we instantiate methods as called) and removing the
	checkGeneric which was incorrectly tagging functions as generic based
	on their body.  They are generic based only on their formals.  It is
	illegal to declare a variable to be a generic type, only a formal.
	
	Fixed a bug in which default functions were created for instantiated
	types that are instantiated during normalization.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp normalize.cpp 

---------------------------------------------------------------------------

04/05/06 15:36:09 -- deitz

Log message:
	Remove working .future.

Removed files:
	chapel/test/types/tuple/deitz/: test_mytuple.future 

---------------------------------------------------------------------------

04/05/06 16:35:52 -- jplevyak

Log message:
	Permit the dispatch order to be updated independently of
	  specializes and implements.

Modified files:
	chapel/compiler/ifa/: ast.cpp 

---------------------------------------------------------------------------

04/05/06 16:44:05 -- deitz

Log message:
	Added three working tests.  No bugs here.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_instantiate_clone1.chpl 
	                                         test_instantiate_clone1.good 
	                                         test_instantiate_clone2.chpl 
	                                         test_instantiate_clone2.good 
	                                         test_instantiate_clone3.chpl 
	                                         test_instantiate_clone3.good 

---------------------------------------------------------------------------

04/05/06 21:01:56 -- shannon

Log message:
	Changed all the exit()s to clean_exit()s.
	Implemented fflush in the interpreter so
	that assert() and halt() now work properly in
	the interpreter.  Added linenumber and
	filename information to the interpreted
	asserts and halts.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
Removed files:
	chapel/test/domains/shannon/: expandError.ifuture 
	                              interiorErrorNeg.ifuture 
	                              interiorErrorPos.ifuture 
	                              interiorErrorPosLarge.ifuture 
	chapel/test/trivial/deitz/: exit.ifuture 
	chapel/test/trivial/mjoyner/seq/: seq_index1.ifuture 
	chapel/test/trivial/shannon/: multipleArgAssert.ifuture 
	chapel/test/trivial/shannon/quit/: assert.ifuture exit.ifuture 
	                                   halt.ifuture 

---------------------------------------------------------------------------

04/06/06 06:10:12 -- bradc

Log message:
	Another fix/improvement to timedexec.  My previous changes left
	timed out processes running on the system, eventually bogging
	it down once there were enough going (sorry Shannon!).  This new
	check makes sure to kill any timed out children rather than
	orphaning them.

Modified files:
	chapel/test/Bin/: timedexec 

---------------------------------------------------------------------------

04/06/06 08:34:40 -- deitz

Log message:
	Removed distinction of secondary and primary methods from the compiler
	since there is no longer a distinction in the language and this
	distinction could only lead to bugs.
	
	Fixed the order wrapper on methods but the order wrapper is not called
	from analysis.  John, can you take a look at this.  It should now work
	when it is called.  Added two futures to show the problem.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
Added files:
	chapel/test/classes/deitz/: test_name_method.chpl 
	                            test_name_method.future 
	                            test_name_method.good 
	                            test_name_method2.chpl 
	                            test_name_method2.future 
	                            test_name_method2.good 

---------------------------------------------------------------------------

04/06/06 10:57:32 -- deitz

Log message:
	Why does this test work and not result in a mixed primitive error
	given the tuple test that failed?

Added files:
	chapel/test/classes/deitz/infer/: infer_field3.chpl 
	                                  infer_field3.good 

---------------------------------------------------------------------------

04/06/06 13:55:43 -- jplevyak

Log message:
	Fix compilation problems on older versions of gcc which don't
	like jumping over variable definitions.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

04/06/06 16:09:01 -- bradc

Log message:
	Removing an extraneous debugging line that crept into
	the sub_test script.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

04/06/06 17:02:04 -- deitz

Log message:
	Fixed coercion wrapper to deal with methods and removed future for
	test/trivial/deitz/coercion2.future.
	
	Cleaned coercion wrapper and order wrapper code big time.
	
	Fixed regression functions/bradc/defaultParamWithReturn as an
	unexpected but welcome side effect to this cleanup.
	
	Added a stylized for-loop
	
	  for_formals(ArgSymbol* formal, AList<DefExpr>* formals) {
	
	for iterating over formal arguments in a function.  Come to think of
	it, I will change formals to a FnSymbol.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: alist.h 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
Removed files:
	chapel/test/trivial/deitz/: coerce2.future 

---------------------------------------------------------------------------

04/06/06 23:06:13 -- jplevyak

Log message:
	Major changes to scalar promotion.
	 - no longer add the seqElementType to the dispatchParents
	 - is_Value_Type now includes primitive types (e.g. int) as well
	   as records and value classes
	 - the "promote" callback how blocks overloaded =, scalar promotion
	   of the "this" argument for methods, and generic functions.
	 - introduce handling for wrapper/instantiation "failures"
	   when the wrapper builder returns NULL.
	 - reorgnanized the way wrappers are built
	 - this causes/exposes a regresssion, but adds
	     scalar promotion of tuples and other non-primitive value types.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: ast.cpp html.cpp ifa.h pattern.cpp sym.h 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

04/07/06 09:03:21 -- deitz

Log message:
	Remove future for working test.

Removed files:
	chapel/test/types/tuple/deitz/: test_class_tuple1.future 

---------------------------------------------------------------------------

04/07/06 09:15:25 -- deitz

Log message:
	Removed three future flowanalysis tests and four future protoast
	tests.  We discussed removing all protoast and flowanalysis tests.
	
	Fixed test_array_init3 and remove future.

Modified files:
	chapel/test/arrays/deitz/: test_array_init3.chpl 
	                           test_array_init3.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_init3.future 
	chapel/test/flowanalysis/newast/: declprintdom2.chpl 
	                                  declprintdom2.future 
	                                  declprintdom2.good noop.chpl 
	                                  noop.future noop.good 
	                                  protoast_test.chpl 
	                                  protoast_test.future 
	                                  protoast_test.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.future 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.future 
	                                     mg-seq.good mvm-seq.chpl 
	                                     mvm-seq.future mvm-seq.good 
	                                     test.chpl test.future 
	                                     test.good 

---------------------------------------------------------------------------

04/07/06 10:57:06 -- deitz

Log message:
	Update a couple future files with new info.
	
	Added two working tests.  One is a version of jacobi that uses the
	domain functions expand and interior.
	
	Added three future tests I've been sitting on.  Two show the need for
	tuple unification.  One shows zipper iteration.

Modified files:
	chapel/test/arrays/bradc/: domarr2.future noelemtype.future 
Added files:
	chapel/test/arrays/deitz/: jacobi4.chpl jacobi4.good 
	chapel/test/classes/deitz/: test_record_infer.chpl 
	                            test_record_infer.good 
	chapel/test/types/seq/deitz/: test_zipper1.chpl 
	                              test_zipper1.future 
	                              test_zipper1.good 
	chapel/test/types/tuple/deitz/: test_htuple8.chpl 
	                                test_htuple8.future 
	                                test_htuple8.good 
	                                test_htuple9.chpl 
	                                test_htuple9.future 
	                                test_htuple9.good 

---------------------------------------------------------------------------

04/07/06 11:09:30 -- deitz

Log message:
	Add stand-alone future for infer complication case that I think we
	were seeing in the tuple.  With this test, I'm going to go ahead and
	try to get the tuples to work without this so that I can unify them as
	that is becoming a bottleneck.

Added files:
	chapel/test/classes/deitz/: infer_complication.chpl 
	                            infer_complication.future 
	                            infer_complication.good 

---------------------------------------------------------------------------

04/07/06 13:59:10 -- deitz

Log message:
	Cleaned default wrapper code and a little more cleaning of coercion
	and order wrapper code, plus some fixes.
	
	In continuing the work of making AST insertion easier, I extended
	insertAtTail and insertAtHead to work directly on CallExprs (similarly
	to the extension to BlockStmts and FnSymbols).  Also I extended the
	convenience of automatically putting "new ExprStmt" around expressions
	that are inserted into Stmt lists to put "new DefExpr" around symbols
	that are put into DefExpr lists and "new SymExpr" around symbols that
	are put into Expr lists other than DefExpr lists.  Changed how the
	CastExpr constructor works to make it simplify the common case.  Made
	some simplifications throughout the code as a result.
	
	Made for_formals work on FnSymbols directly as in
	
	  for_formals(formal, fn) { ... }

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp 
	chapel/compiler/include/: alist.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 
	chapel/compiler/traversals/: removeNestedFunctions.cpp 

---------------------------------------------------------------------------

04/07/06 14:24:01 -- bradc

Log message:
	Changes to the nightly script that is used to run regressions
	in order to support nightly intepreter regression tests and
	to clean things up slightly.  I've done some testing, but this
	may cause some growing pains in the next few days, so please
	bear with the testing system...
	
	The nightly script now requires one of two flags:
	    -debug | -cron
	
	-cron is meant to be used only when running nightly cron jobs
	      that will result in mail to be sent out to the whole
	      team;
	
	-debug is for use by an individual user to run the complete
	       testing suite using a clean checkout of the source
	       tree, build from scratch, etc.  It can be a nice way
	       of testing the current project version of the source
	       tree, and/or for testing changes after checking them
	       in (for those of us who don't work in /tmp by default,
	       it can also result in faster testing due to its use of
	       the local file system).
	
	There are then two optional flags:
	      <nothing> | -valgrind | -interpret
	
	<nothing> (a lack of optional flags) causes the testing
	          system to be run in its standard way
	
	-valgrind causes a valgrind version of the testing system to
	          be run
	
	-interpret causes the testing suite to be run in interpreted
	           mode
	
	theoretically, -valgrind and -interpret ought to be usable
	               together, but this hasn't been tested.
	
	Thus, a nightly regression is likely to be run by a cron job
	as one of:
	        nightly -cron
	        nightly -cron -valgrind
	        nightly -cron -interpret
	
	Users may do their own testing via:
	
	      nightly -debug
	      nightly -debug -valgrind
	      nightly -debug -interpret
	
	The nightly script has a few environment variables that are
	required or optional, as follows:
	
	required:
	
	CHPL_NIGHTLY_LOGDIR : a directory where logs should be stored; on Cray
	                    systems, this is /data/sea/cascade/chapel/Nightly
	                    for the nightly runs
	
	CHPL_NIGHTLY_CRON_LOGDIR : the directory where cron job logs should be
	                         stored, for purposes of comparison.  On Cray
	                         systems, this is
	                         /data/sea/cascade/chapel/Nightly
	
	CHPL_NIGHTLY_STATDIR : a directory where statistics should be stored;
	                     on Cray systems, this is
	                     /data/sea/cascade/chapel/Nightly/Stats
	                     for the nightly runs
	
	optional:
	
	CHPL_UW_CVS_USERNAME : your username under the UW CVS system; defaults
	                     to your username on the machine in question
	
	CHPL_NIGHTLY_DEBUG_EMAIL : the address which -debug output should be
	                         sent to; defaults to [your username on the
	                         machine in question]@cray.com
	
	CHPL_NIGHTLY_TMPDIR : tmp directory in which to run the tests;
	                    defaults to $TMPDIR if set, /tmp otherwise
	
	CHPL_NIGHTLY_MAKE : make command to use; defaults to $MAKE if set,
	                  "make" otherwise
	
	CHPL_MAILER : command to use for sending mail; defaults to "Mail"

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/07/06 14:31:09 -- bradc

Log message:
	Updated these scripts that wrap the nightly script
	to reflect the new flags supported by the nightly
	script.  nightly.cron now calls nightly first in
	standard mode, then in valgrind mode.
	nightly.novgr.cron only calls it in standard mode.
	
	I should have mentioned in the previous check-in that
	the nightly script used to automatically do a normal
	run when it did a valgrind run.  Now the two are
	completely decoupled, so you will only get a normal
	or valgrind run for each execution of the nightly
	script.
	
	The last check-in also changed the subject line for
	nightly testing to include a bit more summary
	information.  Further improvements could probably
	be made.

Modified files:
	chapel/test/Bin/: nightly.cron nightly.novgr.cron 

---------------------------------------------------------------------------

04/07/06 15:41:46 -- deitz

Log message:
	Four tests showing inheritance and instantiation, two futures.  One
	seems to have a problem with dispatching to a function that takes its
	generic parent argument.  The other is a problem with copying the
	types to the child class.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         inherit_instantiate.chpl 
	                                         inherit_instantiate.good 
	                                         inherit_instantiate2.chpl 
	                                         inherit_instantiate2.future 
	                                         inherit_instantiate2.good 
	                                         inherit_instantiate3.chpl 
	                                         inherit_instantiate3.good 
	                                         inherit_instantiate4.chpl 
	                                         inherit_instantiate4.future 
	                                         inherit_instantiate4.good 

---------------------------------------------------------------------------

04/08/06 14:25:53 -- jplevyak

Log message:
	There was a bug with clearing of the Setter information between
	  analyzing a single member variables confluences and the next.
	Took a heavy handed approach to fix it, will deal with any
	  performance consequences if they come up.

Modified files:
	chapel/compiler/ifa/: fa.cpp 
Removed files:
	chapel/test/classes/deitz/: infer_complication.future 

---------------------------------------------------------------------------

04/10/06 09:15:05 -- deitz

Log message:
	Comment out unused Ldone label.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

04/10/06 16:58:10 -- deitz

Log message:
	New where test that will work soon, once instantiation evaluates where
	clauses and returns NULL if it evaluated to false.

Added files:
	chapel/test/functions/deitz/: test_where_param4.chpl 
	                              test_where_param4.future 
	                              test_where_param4.good 

---------------------------------------------------------------------------

04/10/06 17:05:24 -- jplevyak

Log message:
	Handle nil returned from instantiation wrapper.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: pattern.cpp 

---------------------------------------------------------------------------

04/10/06 19:16:45 -- deitz

Log message:
	Moved handling of where clause into instantiation.  Made where
	expression into a where block statement to allow normalization to do
	the parameter folding.  Previously there was a separate version of
	parameter folding using by the interpreter function resolution and
	where clauses were hacked in chapel_ifa to handle == and && only when
	not in the interpreter.
	
	Simplified the FnSymbol constructor to just take two arguments, which
	is all that were passed in most cases.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp parallel.cpp 
Removed files:
	chapel/test/functions/deitz/: test_where_param4.future 

---------------------------------------------------------------------------

04/11/06 09:57:54 -- waynew

Log message:
	Reduce the polling rate of the server.

Modified files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

04/11/06 14:40:52 -- deitz

Log message:
	Added test case of more complicated where clause on parameter value.

Added files:
	chapel/test/functions/deitz/: test_where_param5.chpl 
	                              test_where_param5.good 

---------------------------------------------------------------------------

04/11/06 17:06:25 -- waynew

Log message:
	Couple bug fixes.

Modified files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

04/11/06 17:16:44 -- waynew

Log message:
	Intermediate checkin to save progress.  Removed the empty Chapel module
	file _chpl_compiler.chpl file. compilerModule is now created in code
	and not parsed by ParseFile in filesToAST.cpp.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: symscope.h symtab.h type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: symscope.cpp 
Removed files:
	chapel/modules/standard/: _chpl_compiler.chpl 

---------------------------------------------------------------------------

04/11/06 17:19:53 -- waynew

Log message:
	Forgot to remove a couple commented deleted lines.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 

---------------------------------------------------------------------------

04/13/06 16:35:44 -- waynew

Log message:
	Removed a race condition that can cause deadlock.

Modified files:
	chapel/test/parallel/cobegin/waynew/: depend.chpl 

---------------------------------------------------------------------------

04/17/06 09:43:46 -- deitz

Log message:
	Minor simplifications to instantiation callback.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/17/06 13:44:33 -- waynew

Log message:
	Fixed .summary log file to match that of start_test.

Modified files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

04/17/06 13:46:08 -- waynew

Log message:
	Simple test of parallel code generation of while statements within
	a cobegin statement.

Added files:
	chapel/test/parallel/cobegin/waynew/: while.chpl while.compopts 
	                                      while.future while.good 

---------------------------------------------------------------------------

04/17/06 13:49:19 -- deitz

Log message:
	Note: two new regressions
	
	[Error matching compiler output for types/tuple/deitz/test_destruct_nested]
	[Error executing program types/tuple/deitz/test_tuple_of_tuples]
	
	Unified all heterogeneous tuples into a new tuple class that is
	instantiated by size and uses a variable number of fields (will be
	changed to a pragma rather than a feature of the language).  This is
	step one in the unification of tuples work and is a major step
	forward.  As a benefit, tuples are no longer restricted to size five
	or less and much code that was specially built in the compiler is no
	longer built.
	
	Increased default instantiation-limit from 12 to 256 though I'm unsure
	what a good default should be.  I think this is too high.
	
	Simplified tuple build code in the parser as a result.
	
	Fixed a bug in param for loops in the case where the loop should not
	be executed as in 'for param i in 1..0 do' and added a test case.
	
	Cleaned up temp insertion for INIT primitive in normalization.
	
	Added generic _tuple record instantiated based on size of tuple to
	replace the tuple records that were built by the compiler, i.e.,
	_tuple1, _tuple2, ...
	
	Added write and = function on _tuple and removed compiler-generated
	ones.
	
	Regressions deal with tuple of tuple types not being handled
	correctly.  The errors seem to relate to our handling of complex type
	definitions and I will work on creating a stand-alone test and/or
	fixing the problem.

Modified files:
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_htuple.chpl 
	chapel/test/classes/bradc/: callMethodOnClass.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_overinstantiate1.good 
Added files:
	chapel/test/trivial/deitz/: test_for_param2.chpl 
	                            test_for_param2.good 

---------------------------------------------------------------------------

04/18/06 10:27:10 -- deitz

Log message:
	Checking in tests from workspace.  Two futures.  Three working.

Added files:
	chapel/test/arrays/deitz/: array_forall_expr.chpl 
	                           array_forall_expr.future 
	                           array_forall_expr.good 
	chapel/test/trivial/deitz/: coerce.chpl coerce.good 
	                            test_function1.chpl 
	                            test_function1.good test_infer1.chpl 
	                            test_infer1.future test_infer1.good 
	chapel/test/types/tuple/deitz/: test_tuple_forall.chpl 
	                                test_tuple_forall.good 

---------------------------------------------------------------------------

04/18/06 16:58:47 -- deitz

Log message:
	Removed distinction between VALUECLASS and RECORD in the compiler as
	now that records are no longer structurally typed, there is no
	distinction.  Basically
	
	  class R : value { ...
	
	is identical to
	
	  record R { ...
	
	Enabled nominal subtyping on records and updated .future for
	test/functions/jplevyak/scoping/visibility-4.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	chapel/test/classes/deitz/inherit/: test_inherit_error3.good 
	                                    test_value1.good 
	                                    test_value2.good 
	chapel/test/functions/jplevyak/scoping/: visibility-4.chpl 
	                                         visibility-4.future 
Added files:
	chapel/test/classes/deitz/: test_record_inherit1.chpl 
	                            test_record_inherit1.good 

---------------------------------------------------------------------------

04/18/06 16:59:04 -- deitz

Log message:
	Removed special parsing of where expressions, now parsed as any other
	expression in preparation for more changes to the parser.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

04/19/06 11:30:41 -- deitz

Log message:
	Test case for declaring classes and records.

Added files:
	chapel/test/classes/deitz/: test_var_decl1.good 
	                            test_var_decl1.chpl 

---------------------------------------------------------------------------

04/19/06 15:22:32 -- deitz

Log message:
	Cleaned up class hierarchy computation.  In particular, resolved
	differences between record r and class r : value.  Class r : value is
	now illegal and should be written record r since value is a record.  I
	made it illegal for records to inherit from classes and vice versa but
	if this does make sense or is necessary, it can easily be enabled.
	
	Superficial cleanup to lookup routine which can now be used as
	
	  BaseAST->lookup(char*)
	  BaseAST->lookup(BaseAST);
	
	which looks up in this's parentScope (if module, modScope), the char*
	name argument or the BaseAST->var->name argument assuming the BaseAST
	argument is a SymExpr (error otherwise).

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	                         normalize.cpp scopeResolve.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_complex.chpl 
	                          _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl _chpl_seq.chpl 
	                          _chpl_sparse.chpl prelude.chpl 
	chapel/test/classes/deitz/inherit/: test_inherit_error1.good 
	                                    test_inherit_error2.good 
	                                    test_inherit_error3.good 
	                                    test_value1.chpl 
	                                    test_value2.chpl 

---------------------------------------------------------------------------

04/19/06 16:42:24 -- waynew

Log message:
	Combined initType, initSymbol, and initExpr into initPrimitiveTypes.
	Should just be code relocation.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

04/19/06 17:26:07 -- waynew

Log message:
	Oops.  Should actually delete functions no longer used.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: expr.h symbol.h 

---------------------------------------------------------------------------

04/19/06 17:30:08 -- deitz

Log message:
	Cleaned up parameter for loops due to bug I ran into with other changes.

Modified files:
	chapel/compiler/AST/: build.cpp stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

04/20/06 08:38:15 -- bradc

Log message:
	Fixed subject line that was never updated for the error
	case in the nightly TAB check.

Modified files:
	chapel/util/: lookForTabs.cron 

---------------------------------------------------------------------------

04/20/06 08:43:06 -- deitz

Log message:
	Update .goods due to change in metatype numbering.

Modified files:
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

04/20/06 16:12:25 -- deitz

Log message:
	Rearranged inlineFunctions and removeNestedFunctions (now
	flattenFunctions) to be function-based passes rather than traversal
	class-based passes and moved them into the passes directory.  This
	falls under the previous Task list's removed old traversal mechanism
	task.

Modified files:
	chapel/compiler/include/: passes.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/passes/: flattenFunctions.cpp 
	                         inlineFunctions.cpp 
Removed files:
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             inlineFunctions.h 
	                             removeNestedFunctions.cpp 
	                             removeNestedFunctions.h 

---------------------------------------------------------------------------

04/20/06 16:17:02 -- waynew

Log message:
	Simple tests of converting int->uint and uint->int.

Added files:
	chapel/test/trivial/waynew/: int2uint.chpl int2uint.good 
	                             uint2int.chpl uint2int.good 

---------------------------------------------------------------------------

04/20/06 16:25:19 -- jplevyak

Log message:
	Improve the efficiency of expanding sets.
	Add a splitting log message when splitting by
	  adding dynamic dispatch.

Modified files:
	chapel/compiler/ifa/: fa.cpp vec.h 

---------------------------------------------------------------------------

04/20/06 17:07:22 -- waynew

Log message:
	Test unsigned int literal.

Added files:
	chapel/test/trivial/waynew/: uintliteral.chpl uintliteral.good 

---------------------------------------------------------------------------

04/20/06 17:46:03 -- waynew

Log message:
	Enabled unsigned int types and literals.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/parser/: chapel.lex chapel.y 

---------------------------------------------------------------------------

04/21/06 10:43:30 -- deitz

Log message:
	Added new function BaseAST::hasPragmaPrefix to test to see if a BaseAST has a prefix in a pragma.  Changed hasPragma to test for an identical match, not a prefix match.  hasPragmaPrefix is now used for the rename pragma.
	
	Updated outputs for regressions.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/passes/: codegen.cpp 
	chapel/test/classes/bradc/: callMethodOnClass.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

04/21/06 14:51:04 -- waynew

Log message:
	Unsigned integers now have a "ull" suffix.  This is to remove some
	warnings during C compilation of Chapel-generated files.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/24/06 16:52:35 -- waynew

Log message:
	Fixed an error. Forgot to account for possible 64-bit addr/pointer systems.

Modified files:
	chapel/runtime/src/: chplthreads.c 

---------------------------------------------------------------------------

04/25/06 14:00:04 -- shannon

Log message:
	Added future test for a tuple containing sequences.

Added files:
	chapel/test/types/tuple/shannon/: sequenceInTuple.chpl 
	                                  sequenceInTuple.future 
	                                  sequenceInTuple.good 

---------------------------------------------------------------------------

04/26/06 15:57:45 -- jplevyak

Log message:
	Make the COPYRIGHT for libifa the MIT License.

Modified files:
	chapel/compiler/ifa/libifa/: COPYRIGHT Makefile README main.cc 

---------------------------------------------------------------------------

04/28/06 09:33:54 -- shannon

Log message:
	Added the sin(x) math routine as a primitive.  It works as
	expected, returning the sine of x where x is in radians.
	
	Added a test.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 
	chapel/compiler/ifa/: num.h 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
Added files:
	chapel/test/modules/standard/math/: .cvsignore sin_pi.chpl 
	                                    sin_pi.good 

---------------------------------------------------------------------------

05/01/06 09:57:29 -- deitz

Log message:
	Added standard functions bpop and conjg, implemented in Chapel.  Added
	a test of bpop.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 
Added files:
	chapel/test/trivial/deitz/: test_bpop.chpl test_bpop.good 

---------------------------------------------------------------------------

05/01/06 10:09:41 -- shannon

Log message:
	Added the acos(x), ceil(x), cos(x), fabs(x), floor(x),
	and tan(x) math routines.
	
	Added a bunch of tests.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: filesToAST.cpp interpreter_ops.h 
	                         runInterpreter.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_standard.chpl 
Added files:
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/test/modules/standard/math/: acos.chpl acos.good 
	                                    acos_out_of_range.chpl 
	                                    acos_out_of_range.good 
	                                    ceil.chpl ceil.good cos.chpl 
	                                    cos.good fabs.chpl fabs.good 
	                                    floor.chpl floor.good 
	                                    sin.chpl sin.good tan.chpl 
	                                    tan.good 
Removed files:
	chapel/test/modules/standard/math/: sin_pi.chpl sin_pi.good 

---------------------------------------------------------------------------

05/01/06 10:34:27 -- shannon

Log message:
	Added the exp(x) math function and a test.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/test/modules/standard/math/: cos.chpl 
Added files:
	chapel/test/modules/standard/math/: exp.chpl exp.good 

---------------------------------------------------------------------------

05/01/06 13:48:50 -- shannon

Log message:
	Added some hyperbolic and inverse trig functions: acosh(x),
	asin(x), asinh(x), atan(x), atanh(x), cosh(x), sinh(x)
	and tanh(x).
	
	Did some minor refactoring and added some more tests.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
Added files:
	chapel/test/modules/standard/math/: acosh.chpl acosh.good 
	                                    acosh_out_of_range.chpl 
	                                    acosh_out_of_range.good 
	                                    asin.chpl asin.good 
	                                    asin_out_of_range.chpl 
	                                    asin_out_of_range.good 
	                                    asinh.chpl asinh.good 
	                                    atan.chpl atan.good 
	                                    atanh.chpl atanh.good 
	                                    atanh_asymptote.chpl 
	                                    atanh_asymptote.good 
	                                    atanh_out_of_range.chpl 
	                                    atanh_out_of_range.good 
	                                    cosh.chpl cosh.good 
	                                    cosh_asymptote.chpl 
	                                    cosh_asymptote.good 
	                                    sinh.chpl sinh.good 
	                                    tanh.chpl tanh.good 

---------------------------------------------------------------------------

05/01/06 14:14:59 -- deitz

Log message:
	Reworked bpop so as not to use uint (though it may now fail for
	numbers that use all the leftmost bit).
	
	Added a working 3D array of floats test.
	
	Fixed a version of NAS FT though it is not yet working.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/test/npb/ft/: ft-serial-working1.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_3D_float.chpl 
	                           test_array_3D_float.good 

---------------------------------------------------------------------------

05/01/06 15:29:01 -- deitz

Log message:
	Potentially almost working version of NAS FT but over allocation of
	tuple indexes makes it impossible to run.

Modified files:
	chapel/test/npb/ft/: ft-serial-working1.chpl 

---------------------------------------------------------------------------

05/03/06 07:48:42 -- jplevyak

Log message:
	Fix up some unnecessary failures

Modified files:
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 

---------------------------------------------------------------------------

05/03/06 09:12:21 -- shannon

Log message:
	Refactored the handling of the math routines I've added
	so far.  Added a function that contained the body of the
	case statement which was identical for this group of
	functions that take a double arg and return a double.
	Added an array of function pointers which are indexed
	with the corresponding PrimOp.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

05/03/06 10:09:57 -- jplevyak

Log message:
	Tweak 2 more .good files

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

05/03/06 12:32:16 -- shannon

Log message:
	Added the atan2() math routine and a test.
	
	Removed a couple of tests that were failing on the Sun
	due to different output representations of NaN.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
Added files:
	chapel/test/modules/standard/math/: atan2.chpl atan2.good 
Removed files:
	chapel/test/modules/standard/math/: acos_out_of_range.chpl 
	                                    acos_out_of_range.good 
	                                    asin_out_of_range.chpl 
	                                    asin_out_of_range.good 

---------------------------------------------------------------------------

05/03/06 14:18:44 -- jplevyak

Log message:
	Fixed 2 .good files.
	Some modifications to permit an option to not print line
	  numbers for builtin modules (to avoid having to update the
	  .good files all the time) (incomplete)

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/ifa/: clone.cpp code.h fa.cpp fun.cpp fun.h 
	                      if1.cpp ifa.h sym.cpp sym.h 
	chapel/compiler/ifa/libifa/: ast_to_if1.cc ast_to_if1.h 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

05/03/06 16:25:46 -- deitz

Log message:
	Removed two unused functions.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/04/06 09:07:29 -- deitz

Log message:
	Removed secondary passlist execution mechanism, associated --passlist
	compiler option, and related passlist parsing code.  Added a function
	pointer to the PassInfo struct.  It is no longer necessary to register
	a pass in passlist.cpp.  Removed passlist.cpp.  To add a pass to the
	compiler simply add the function call to the passlist.  It is probably
	also necessary to prototype the function in passlist.h which is done
	for all the passes that are currently there.
	
	Removed regressing passlist test.

Modified files:
	chapel/compiler/main/: driver.cpp passlist.h runpasses.cpp 
	                       runpasses.h 
Removed files:
	chapel/compiler/main/: passlist.cpp 
	chapel/test/compflags/bradc/passlist/: COMPOPTS NOEXEC 
	                                       passlist.h test.chpl 
	                                       test.good 

---------------------------------------------------------------------------

05/04/06 14:13:56 -- deitz

Log message:
	Switched all but atan2 and exp math functions to use the inline pragma
	rather than the no codegen and rename pragmas.
	
	Made code generation of "unknown" primitives (primitives not
	special-cased by the compiler) generate simply the name of the
	primitive rather than prepending _chpl_ to it.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/runtime/include/: chplrt.h chpltypes.h 
	chapel/runtime/src/: chpltypes.c 

---------------------------------------------------------------------------

05/04/06 16:37:08 -- deitz

Log message:
	Refactored verify() so that it is no longer a traversal, but now a
	function.  All the code that does the verification is now in the
	verify methods of BaseAST things.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symbol.h 
	                          type.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/passes/: verify.cpp 
Removed files:
	chapel/compiler/traversals/: verify.cpp verify.h 

---------------------------------------------------------------------------

05/05/06 07:40:37 -- jplevyak

Log message:
	Do not test this directory (redundant)

Added files:
	chapel/test/flowanalysis/jplevyak/config/: NOTEST 

---------------------------------------------------------------------------

05/05/06 07:43:40 -- jplevyak

Log message:
	add new option: --no-header-errors which squelches the
	line numbers from header errors.  This can be used with
	tests which fail to prevent frequent regressions.
	
	it isn't used for those tests in this checkin (I wanted
	to make sure that the results were the same without it).
	
	However, next time (I/anyone) sees any of those files regresses,
	(I/they) can just add --no-header-errors to the COMPOPTS file before
	building the new .good for checkin.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp sym.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: COMPOPTS arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/05/06 15:57:26 -- deitz

Log message:
	Flattened ReturnStmt so that all statements are subclasses of Stmt
	similar to the 3-deep hierarchy for everything else.  It now goes
	BaseAST--Stmt/Expr/Symbol/Type--all other subclasses.  This is work I
	was doing earlier to eliminate the old traversal use.  Nothing was
	gained with this extra level of hierarchy in this case only.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h 

---------------------------------------------------------------------------

05/06/06 06:27:50 -- shannon

Log message:
	Fixed an embarassing bug.  The math functions now work
	again in the interpreter.  Removed a comment that
	shouldn't have been committed.

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

05/08/06 13:21:15 -- deitz

Log message:
	This checkin is part of the effort to remove the old traversal
	mechanism.
	
	Fixed a bug in which the postorder version of collect_asts did not
	collect immediate symbols.
	
	Fixed the new traversal mechanism to traverse some new fields of
	BlockStmt.  These are removed prior to analysis, so this had no
	visible effect.
	
	Removed complex close_symbols routine in chapel_ifa, replacing it with
	the collect_all_children routine used by the interpreter.  This
	catches a few extra symbols too, ones that are intrinsic but not used
	by a program.  This may help Wayne's current work on adding widths to
	the primitive types.  My effort is to clean up the differences between
	the old traversal and the new traversal.
	
	Removed builtinSymbols and builtinTypes vectors.  These were used
	inconsistently.
	
	Started work on a new implementation of print_view, called view_ast
	(will be renamed when done), that uses the new traversal.  The only
	remaining old traversals are Fixup and one to deal with configuration
	variables.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: analysis.h symbol.h type.h 
	chapel/compiler/passes/: resolveAnalyzed.cpp runAnalysis.cpp 
	                         semanticChecks.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

05/08/06 13:22:05 -- deitz

Log message:
	Reworked CreateConfigVarTable as a short function called during code
	generation.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 

---------------------------------------------------------------------------

05/08/06 14:00:10 -- jplevyak

Log message:
	Fix some bugs with non-GC vec.h map.h uses.
	Fixup dupstr so that the prototype is declared in the right place.
	Fix ParseAST::filename() missing issue.
	Add the capability increasing the integral elements of a Vec.

Modified files:
	chapel/compiler/ifa/: arg.cpp cg.cpp fail.cpp fail.h if1.cpp 
	                      map.h vec.h 
	chapel/compiler/ifa/libifa/: Makefile ast_to_if1.cc parse.cc 
	chapel/compiler/include/: misc.h 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

05/08/06 16:56:57 -- deitz

Log message:
	Removed unused ParamCompute traversal, code I wrote a long time ago to
	support the -b flag, but that hasn't been used for a long time.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

05/09/06 09:51:14 -- deitz

Log message:
	This checkin is part of the effort to remove the old traversal
	mechanism.
	
	Rewrote the functions collect_asts and collect_asts_postorder to use
	the new traversal mechanism function get_ast_children removing the old
	traversal classes PreCollectAST and PostCollectAST.
	
	Reworked the collect_functions function and removed the traversal
	class CollectFunctions.
	
	Updated the implementation of get_ast_children to more faithfully do
	what the old traversal class mechanism did when the "all" argument is
	false.  The all argument is currently used for the traversals that get
	everything to analysis and the interpreter.  Eventually I would like
	to see this "all" argument used only for verification that the
	traversal reaches all nodes.
	
	Guarded the traversal in gen_if1 to only call get_ast_children when
	generating a statement or an expression, a necessary change to make
	get_ast_children work like the old traversal worked.  That is,
	DefExpr::sym is a child a of DefExpr.
	
	Note an odd line number change in var function error tests.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: alist.h 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/functions/deitz/: test_var_function1.good 
	                              test_var_function_access.good 
	                              test_var_function_access2.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/09/06 10:03:39 -- deitz

Log message:
	Removed unnecessary header files, an artifact of the Pass class.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp codegen.cpp 
	                         filesToAST.cpp functionResolution.cpp 
	                         printProgram.cpp runAnalysis.cpp 
	                         runInterpreter.cpp 
	chapel/compiler/symtab/: symscope.cpp 
Removed files:
	chapel/compiler/passes/: buildDefaultFunctions.h codegen.h 
	                         filesToAST.h functionResolution.h 
	                         printProgram.h 

---------------------------------------------------------------------------

05/09/06 11:47:25 -- deitz

Log message:
	Reworked print_view suite of functions now in include/view.h and
	AST/view.cpp to use the new traversal mechanism.  Removed View
	traversal.

Modified files:
	chapel/compiler/AST/: Makefile.share bb.cpp 
	chapel/compiler/passes/: normalize.cpp runInterpreter.cpp 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

05/09/06 11:49:38 -- deitz

Log message:
	New files with last checkin.

Added files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/include/: view.h 

---------------------------------------------------------------------------

05/09/06 11:53:23 -- deitz

Log message:
	Reworked clear_file_info, reset_file_info, and compute_call_sites to
	use new traversal mechanism.
	
	Removed PrintAST traversal, already implemented in PrintProgram pass.

Modified files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
Removed files:
	chapel/compiler/traversals/: printAST.cpp printAST.h 

---------------------------------------------------------------------------

05/09/06 12:55:57 -- deitz

Log message:
	Rewrote the html view traversal (-t output pass) to use the new
	traversal mechanism.  Removed HtmlView class.
	
	This new rewrite incorporates a change I had planned to do since
	normalization to keep an expression on a single line.  The resulting
	output is now tighter.
	
	The only Traversal class remaining is Fixup.

Modified files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/include/: view.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: htmlview.cpp htmlview.h 

---------------------------------------------------------------------------

05/09/06 19:01:44 -- deitz

Log message:
	Changed %d to %ld to print BaseAST::id in html view code.

Modified files:
	chapel/compiler/AST/: view.cpp 

---------------------------------------------------------------------------

05/10/06 09:18:57 -- shannon

Log message:
	Added some more math functions:  exp2(), expm1(), log(),
	log10(), log1p(), log2(), logb(), cbrt(), sqrt(), erf(),
	erfc(), lgamma(), tgamma(), nearbyint(), rint(), round(),
	and trun(), and a bunch of tests.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
Added files:
	chapel/test/modules/standard/math/: cbrt.chpl cbrt.good erf.chpl 
	                                    erf.good erfc.chpl erfc.good 
	                                    exp2.chpl exp2.good 
	                                    expm1.chpl expm1.good 
	                                    lgamma.chpl lgamma.good 
	                                    log.chpl log.good log10.chpl 
	                                    log10.good log1p.chpl 
	                                    log1p.good log2.chpl 
	                                    log2.good logb.chpl 
	                                    logb.good nearbyint.chpl 
	                                    nearbyint.good rint.chpl 
	                                    rint.good round.chpl 
	                                    round.good sqrt.chpl 
	                                    sqrt.good tgamma.chpl 
	                                    tgamma.good trunc.chpl 
	                                    trunc.good 

---------------------------------------------------------------------------

05/10/06 10:51:22 -- shannon

Log message:
	Some minor refactoring:  changed the 'exp' primitive to
	'pow' and 'eexp' to 'exp'.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 
	chapel/compiler/ifa/: num.cpp prim_data.cpp prim_data.h 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 

---------------------------------------------------------------------------

05/10/06 11:03:17 -- deitz

Log message:
	Decomposed the Fixup traversal into two new functions using the new
	traversal mechanism to deal with inserting AST into and removing AST
	from the Tree.  The Fixup traversal is now only used for verification
	purposes, to be changed over separately.
	
	Added the ability to traverse over the sentinels (head and tail) of a
	list during the get_ast_children traversal, used when traversing over
	the AST for inserting it into the tree.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/include/: baseAST.h symtab.h 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	                         normalize.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

05/10/06 11:03:51 -- deitz

Log message:
	Updated test output regarding recent change.

Modified files:
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/10/06 13:16:36 -- deitz

Log message:
	Moved insert_help and remove_help to astutil.cpp.  Removed Fixup
	verify, putting the code into a new function call verify_parents.  The
	old traversal mechanism is no longer used.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp stmt.cpp 
	                      type.cpp 
	chapel/compiler/include/: alist.h astutil.h 
	chapel/compiler/passes/: filesToAST.cpp verify.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/flowanalysis/newast/: assignment_expr.good 
	                                  chain.good codegen_test.good 
	                                  enum.good globalref.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good sum_type-1.good 
	                                  sum_type-2.good 
	                                  usebeforedef.good 
Removed files:
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

05/10/06 13:38:44 -- shannon

Log message:
	Pulled out some of the recently-added math primitives
	because they aren't declared in Sun's math.h:
	
	exp2(), log2(), nearbyint(), round(), tgamma(), and
	trunc().
	
	Removed the corresponding tests.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
Removed files:
	chapel/test/modules/standard/math/: exp2.chpl exp2.good 
	                                    log2.chpl log2.good 
	                                    nearbyint.chpl 
	                                    nearbyint.good round.chpl 
	                                    round.good tgamma.chpl 
	                                    tgamma.good trunc.chpl 
	                                    trunc.good 

---------------------------------------------------------------------------

05/10/06 15:05:17 -- deitz

Log message:
	Removed the old traversal mechanism including Pass and Traversal.
	Stopped compilation of the traversals directory.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h stmt.h 
	                          symbol.h type.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: Makefile.share runAnalysis.h 
	                         runInterpreter.cpp scopeResolve.cpp 
Removed files:
	chapel/compiler/passes/: pass.cpp pass.h 
	chapel/compiler/traversals/: Makefile Makefile.include 
	                             Makefile.share traversal.cpp 
	                             traversal.h 

---------------------------------------------------------------------------

05/10/06 16:41:37 -- waynew

Log message:
	Enabled/added support for different primitive type sizes for int,
	uint, and float.
	 - Changed primitive types into an array of primitive types, indexed by
	   size enumeration type.
	 - Folded call expression of type(size) into a sym expr of the appropriate
	   primitive type.
	 - Chapel-generated C constants are now wrapped with a macro that will
	   add the appropriate C-style size suffix to the int/uint constant.
	
	Still missing sizes for int(128), uint(128), and complex types.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/ifa/: builtin_symbols.h cg.cpp if1.cpp num.cpp 
	                      num.h sym.cpp 
	chapel/compiler/include/: chpltypes.h expr.h passes.h symbol.h 
	                          type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp resolveAnalyzed.cpp 
	                         runAnalysis.cpp runInterpreter.cpp 
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

05/10/06 16:46:06 -- waynew

Log message:
	Test cases for testing primitive type sizes.

Added files:
	chapel/test/trivial/waynew/: float32-64.chpl float32-64.good 
	                             int8-64.chpl int8-64.good 
	                             int8-64b.chpl int8-64b.good 
	                             int8b.chpl int8b.good uint8-64.chpl 
	                             uint8-64.good 

---------------------------------------------------------------------------

05/10/06 21:56:07 -- deitz

Log message:
	Stopped passing "this" by reference.  Since records and classes are
	always passed via a pointer, this is no longer necessary.

Modified files:
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

05/11/06 09:25:44 -- deitz

Log message:
	Added a few tuple tests.

Added files:
	chapel/test/types/tuple/deitz/: test_tuples1.chpl 
	                                test_tuples1.good 
	                                test_tuples2.chpl 
	                                test_tuples2.good 
	                                test_tuples3.chpl 
	                                test_tuples3.good 
	                                test_tuples4.chpl 
	                                test_tuples4.good 

---------------------------------------------------------------------------

05/11/06 10:00:02 -- waynew

Log message:
	Removed a TAB.

Modified files:
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

05/12/06 13:53:48 -- deitz

Log message:
	Note: new regressions:
	
	  [Error matching compiler output for types/tuple/bradc/writeTuple]
	  [Error matching compiler output for types/tuple/deitz/test_tuples4]
	
	Added support for a _copy function so that variable declarations with
	only initialization clauses are now translated as
	
	  var x = y;   ==>   var x; x = _copy(y);
	
	The _copy function is specialized for records.  Default copy
	constructors for other types are in _chpl_base.chpl
	
	Removed mechanism for a variable number of fields in a record.  The
	implementation of tuples is now based on pragmas that effect during
	instantiation.
	
	Fixed a bug in instantiation regarding the caching of instantiated
	functions.  The problem was that we would cache functions after they
	were instantiated even if the where clause evaluated to false and
	would therefore invalidate the instantiated function.  Then a second
	attempt to instantiate the same function in the same way would simply
	grab the cached copy.  The fix: added a mechanism to remove the cached
	copy if the instantiated function is invalidated.  Note that it was
	not possible to insert into the cache later (after where clause
	evaluation) due to the problem of running into an infinite loop if the
	body of the instantiated function during normalization wished to
	instantiate the same function in the same way.  The cache catches this
	and simply returns the same function.
	
	Moved Symbol::variableExpr to ArgSymbol::variableExpr since it now
	only applies to ArgSymbols.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         normalize.cpp semanticChecks.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_htuple.chpl 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: declprintdom.good domarr.good 
	                                  pareninit.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Removed files:
	chapel/test/types/tuple/deitz/: test_mytuple.chpl 
	                                test_mytuple.good 

---------------------------------------------------------------------------

05/12/06 14:22:09 -- deitz

Log message:
	Removing .futures for working tests.  Some of these now work because
	of the last checkin, some have been working for a while.

Removed files:
	chapel/test/arrays/deitz/: test_array_2Db.future 
	                           test_class_array1.future 
	                           test_domains_2Db.future 
	chapel/test/arrays/jplevyak/: simple-2.future 
	chapel/test/domains/bradc/: constdomain.future 
	chapel/test/functions/jplevyak/: introduce-dispatch-1.future 
	chapel/test/types/tuple/deitz/: test_htuple4.future 
	                                test_htuple8.future 
	                                test_tuple_record_implementation15.future 
	chapel/test/types/tuple/shannon/: sequenceInTuple.future 

---------------------------------------------------------------------------

05/12/06 14:50:37 -- deitz

Log message:
	Disabled newast tests.

Added files:
	chapel/test/flowanalysis/newast/: NOTEST 

---------------------------------------------------------------------------

05/12/06 15:01:07 -- deitz

Log message:
	Removed "-b" flag and some associated code.  This hasn't been working
	for a long time and is misleading.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         resolveAnalyzed.cpp runAnalysis.cpp 

---------------------------------------------------------------------------

05/12/06 16:52:07 -- waynew

Log message:
	No strtof() or strtold() under our SunOS installation.  Reverted back
	to atof().

Modified files:
	chapel/compiler/ifa/: num.cpp 

---------------------------------------------------------------------------

05/15/06 11:38:41 -- deitz

Log message:
	Added error checking to make sure that a variable is declared with a
	type or is initialized.  Updated tests that violated this rule.

Modified files:
	chapel/compiler/passes/: semanticChecks.cpp 
	chapel/test/functions/deitz/: test_nested1.chpl 
	chapel/test/functions/jplevyak/: dynamic-partial-1.chpl 
	                                 equal-3.chpl equal-5.chpl 
	                                 introduce-dispatch-1.chpl 
	chapel/test/functions/jplevyak/scoping/: visibility-3.chpl 
	                                         visibility-3.good 
	chapel/test/interpreter/jplevyak/: equal-3.chpl equal-5.chpl 
	                                   visibility-3.chpl 
	                                   visibility-3.good 
	chapel/test/trivial/deitz/: test_var_decl1.chpl 
	                            test_var_decl2.chpl 
	                            test_var_decl3.chpl 
	chapel/test/types/tuple/deitz/: test_tuple_simple7.chpl 
	chapel/test/types/tuple/jplevyak/: destruct-1.chpl 
	                                   destruct-2.chpl 
	chapel/test/types/type_variables/jplevyak/: test_coerce2.chpl 

---------------------------------------------------------------------------

05/15/06 11:48:43 -- shannon

Log message:
	Pulled out another recently-added math primitive,
	logb(), because it broke the cygwin build.  Removed
	the corresponding test.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/test/: .cvsignore 
Removed files:
	chapel/test/modules/standard/math/: logb.chpl logb.good 

---------------------------------------------------------------------------

05/15/06 14:17:13 -- deitz

Log message:
	Small fix of oversight in my update of this duplicated test.

Modified files:
	chapel/test/interpreter/jplevyak/: visibility-3.chpl 

---------------------------------------------------------------------------

05/15/06 14:33:12 -- waynew

Log message:
	"long int" under AMD/linux64 is 8 bytes. It seems to be 4 bytes under
	Pentium4/linux and SunOS.  Changed "long int" to "int" for our 32-bit
	integers.

Modified files:
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

05/15/06 14:38:04 -- deitz

Log message:
	Added working test of initializing constant array with a sequence.
	Note at this time that this works only for 1D arrays and the constness
	of arrays is not enforced.

Added files:
	chapel/test/arrays/deitz/: test_array_init_seq.chpl 
	                           test_array_init_seq.good 

---------------------------------------------------------------------------

05/15/06 15:01:40 -- deitz

Log message:
	Major simplification to creation of modules including removal of
	startModuleDef and finishModuleDef.
	
	Insertion of nested modules into the AST now fully supports nested
	modules.  All modules are top-level and nested modules use their outer
	module.  This assumes that modules are nested only in other modules,
	not functions or types.  This is guarded by a user error.
	
	ModuleSymbol constructor now registers the module, puts it in the root
	scope, sets up its scope, etc.  Result: It is easy to create a new
	module.
	
	Removed currentScope and currentModule global variables, no longer
	used.  Also removed popScope, getCurrentScope, and setCurrentScope,
	also no longer used.
	
	A module is not created for a file that contains only module
	definitions.  This is checked for in ParseFile.
	
	Added test of nested module.
	
	Note module names like Mod1.Mod2 are not yet supported.

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	chapel/test/modules/bradc/: nestedmodule.good 
	chapel/test/modules/bradc/manymodules/: manymodules.good 
Added files:
	chapel/test/functions/jplevyak/: 
	                                 zeroarity-bound-error-1.compopts 
	chapel/test/modules/deitz/: test_module_use3.chpl 
	                            test_module_use3.good 

---------------------------------------------------------------------------

05/15/06 15:31:38 -- bradc

Log message:
	Updated some of my modules tests as a result of Steve's
	last checkin.

Modified files:
	chapel/test/modules/bradc/: nestedmodule.chpl nestedmodule.good 
	chapel/test/modules/bradc/manymodules/: manymodules.chpl 
	                                        manymodules.good 

---------------------------------------------------------------------------

05/15/06 17:03:43 -- deitz

Log message:
	Fixed problem of shadowing functions that I introduced with my fix to
	these two tests.  This shadowing issue is tested elsewhere so I
	removed the issue by renaming a function.

Modified files:
	chapel/test/functions/jplevyak/scoping/: visibility-3.chpl 
	chapel/test/interpreter/jplevyak/: visibility-3.chpl 

---------------------------------------------------------------------------

05/15/06 19:34:39 -- deitz

Log message:
	More simplification to Symboltable functionality.
	
	Removed pushScope.  Without popScope, this was assymetric and
	unnecessary.  When the SymScope is constructed (only in AST insertion
	utility), the parent is set, etc.
	
	Made remove, lookup, etc. methods on SymScope, and simplified.
	Removed duplicated and/or unused code.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 

---------------------------------------------------------------------------

05/15/06 21:53:17 -- deitz

Log message:
	Removed "_" unspecified.  Removed support for definition of variables
	that have no type or initialization expression.  The variable
	gUnspecified and type dtUnspecified should no longer appear in an AST.
	They can be removed when this is removed from analysis.
	
	Fixed many tests that did not initialize a field in a class or record
	in the constructor call of that class or record if the field had no
	type or initialization expression.  Fixed the tests that did something
	like
	
	  class C {
	    var x;
	  }
	
	  var c = C();
	  c.x = 2;
	
	by changing them to
	
	  class C {
	    var x;
	  }
	  var c = C(2);
	
	The error message the user gets for this issue is vague and should be
	updated.  It is a high-level error message.
	
	Changed reductions to currently require an elt_type so to reduce an
	array of integers, one must write
	
	  max(int) reduce A
	
	We can certainly get around this by passing the first element in the
	sequence to the reduction class, but that won't work for an empty
	sequence.
	
	Cleaned up sequence append and prepend code to initialize the field.
	This failed when the field was a tuple because the default constructor
	was called and the fields have no type or initialization.  I think
	this is an interesting issue for tuples.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/deitz/infer/: infer_field1.chpl 
	                                  infer_field2.chpl 
	                                  infer_field2c.chpl 
	                                  infer_field4.chpl 
	                                  infer_field5.chpl 
	                                  infer_field6.chpl 
	                                  infer_field7.chpl 
	                                  infer_field7.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	                               sum_type-3.chpl 
	chapel/test/flowanalysis/recursion/: rec_obj-1.chpl 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/reductions/bradc/: maxreduce.chpl sumreduce.chpl 
	                               sumreduce2.chpl 
	chapel/test/trivial/jplevyak/: pragma-6.chpl 
	chapel/test/types/seq/deitz/: test_reduce1.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1.chpl 
	                                         test_clone_class1a.chpl 
	                                         test_clone_class1a.good 
	                                         test_clone_class1b.chpl 
	                                         test_clone_class1b.good 
	                                         test_clone_class2.chpl 
	                                         test_clone_class2a.chpl 
	                                         test_instantiate_clone1.chpl 
	                                         test_tuplelike1.chpl 
Added files:
	chapel/test/classes/deitz/infer/: infer_field8.chpl 
	                                  infer_field8.good 
	                                  infer_field9.chpl 
	                                  infer_field9.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1b.future 
Removed files:
	chapel/test/arrays/deitz/: test_domain2D.chpl test_domain2D.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1a.prediff 
	                                         test_clone_class1b.prediff 

---------------------------------------------------------------------------

05/16/06 10:42:16 -- jplevyak

Log message:
	Studies directory structure and my tests.

Added files:
	chapel/test/studies/jacobi/jplevyak/: NOTEST 
	                                      jacobi-jp-broken-1.chpl 
	                                      jacobi-jp-broken-2.chpl 
	                                      jacobi-jp-notes.chpl 
	                                      jacobi-jp-working.chpl 
	                                      jacobi-jp1.chpl 
	                                      jacobi-jp2.chpl 

---------------------------------------------------------------------------

05/16/06 12:07:06 -- deitz

Log message:
	Added my NOTEST jacobi to studies directory.

Added files:
	chapel/test/studies/jacobi/deitz/: NOTEST jacobi.chpl 

---------------------------------------------------------------------------

05/16/06 12:10:27 -- deitz

Log message:
	Added new debug facilities print_symtab(BaseAST*) and
	nprint_symtab(BaseAST*) to print out the Symboltable entries using the
	new traversal mechanism.  This replaces SymScope::dump().  A specific
	scope can still be printed using, e.g., rootScope->print().
	
	Simplified SymScope, removing child and sibling pointers as well as
	the scopeType field.  Traversing the SymScope, only done for debug
	purposes, now uses the unified traversal mechanism.
	
	Removed dead code.

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp type.cpp view.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: symscope.h view.h 
	chapel/compiler/passes/: codegen.cpp flattenFunctions.cpp 
	                         runInterpreter.cpp scopeResolve.cpp 
	                         semanticChecks.cpp 
	chapel/compiler/symtab/: symscope.cpp 

---------------------------------------------------------------------------

05/16/06 13:01:18 -- deitz

Log message:
	Future represents issue with unification of htuple/tuple work.

Added files:
	chapel/test/classes/deitz/infer/: infer_field10.chpl 
	                                  infer_field10.future 
	                                  infer_field10.good 

---------------------------------------------------------------------------

05/16/06 15:09:06 -- jplevyak

Log message:
	use FnSymbol::visible flag to determine whether or not to insert
	something into the dispatch tables.   This doesn't seem necessary
	now, but is available for the future.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

05/16/06 15:43:12 -- jplevyak

Log message:
	Remove unspecified type from analysis.
	Fixup compilation of libifa.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: builtin_symbols.h fa.cpp num.h pattern.cpp 
	                      sym.cpp sym.h 
	chapel/compiler/ifa/libifa/: ast_to_if1.cc ifa_defs.h 

---------------------------------------------------------------------------

05/16/06 19:11:06 -- deitz

Log message:
	Fixed type of EnumSymbols earlier.  They used to be set when the
	default write function was created for an enumerated type.  They are
	now set when the enumerated type is created.  Prior they were set to
	integer and then changed to the correct type.  Now they are just set
	as the correct type.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 

---------------------------------------------------------------------------

05/17/06 09:04:41 -- deitz

Log message:
	In preparation for simplifying the INIT primitive, removed, almost,
	one special case of the DefExpr transform in normalization handling
	the definition of a VarSymbol with a specified VarSymbol::type (not
	dtUnknown).  Removed all setting of VarSymbol::type before the DefExpr
	transform except for EnumTypes.
	
	Removed special syntax for accessing the INIT and MOVE primitives from
	the Chapel level.  It is unused and unnecessary.

Modified files:
	chapel/compiler/AST/: build.cpp symbol.cpp type.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 

---------------------------------------------------------------------------

05/17/06 09:09:00 -- jplevyak

Log message:
	Fix issue with not detecting equivalent return variables (copies).

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

05/17/06 11:31:36 -- deitz

Log message:
	Added two tests that look at methods without parentheses.  I was
	convinced I'd find a scope resolution bug with these tests, but they
	work.

Added files:
	chapel/test/classes/deitz/: test_method_call_noparens.chpl 
	                            test_method_call_noparens.good 
	                            test_method_call_noparens2.chpl 
	                            test_method_call_noparens2.good 

---------------------------------------------------------------------------

05/17/06 11:38:38 -- shannon

Log message:
	Moved the handling of variable args to write and fwrite
	from normalize.cpp to a Chapel module.  This code was
	committed once before but caused many test failures.
	All but one of these have been resolved.  For now,
	test_foo2.chpl is going to regress.
	
	This commit also includes a patch of Steve's to better
	handle scalar promotion in function resolution.
	
	Updated the output of tests that were affected by
	this change.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/arrays/deitz/: test_array_class_trial3.good 
	                           test_array_class_trial4.good 
	                           test_array_class_trial4a.good 
	                           test_array_class_trial5.good 
	                           test_array_class_trial5a.good 
	                           test_array_class_trial5b.good 
	                           test_array_class_trial6.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/domains/shannon/: expandError.good 
	                              interiorErrorNeg.good 
	                              interiorErrorPos.good 
	                              interiorErrorPosLarge.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/memory/shannon/: printFinalMemStat.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

05/17/06 14:15:03 -- deitz

Log message:
	Added two visible function tests.  One future for me because we remove
	a live function that is nested in a dead function.

Added files:
	chapel/test/functions/deitz/: test_visible1.chpl 
	                              test_visible1.future 
	                              test_visible1.good 
	                              test_visible2.chpl 
	                              test_visible2.good 

---------------------------------------------------------------------------

05/17/06 16:32:06 -- deitz

Log message:
	Simplified DefExpr transform in preparation for removing INIT
	primitive.  Removed duplicate cases and greatly simplified code.
	
	Removed VarSymbol::noDefaultInit.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: cleanup.cpp inlineFunctions.cpp 
	                         normalize.cpp 

---------------------------------------------------------------------------

05/17/06 16:40:13 -- deitz

Log message:
	Added two tests for using but not declaring int(32) and enumerated
	types.

Added files:
	chapel/test/trivial/deitz/: test_int32.chpl test_int32.good 
	chapel/test/types/enum/deitz/: test_enum1b.chpl test_enum1b.good 

---------------------------------------------------------------------------

05/17/06 17:29:09 -- waynew

Log message:
	Jacobi algorithm test case.  No style points here... look elsewhere.

Added files:
	chapel/test/studies/jacobi/waynew/: NOTEST example1.chpl 

---------------------------------------------------------------------------

05/17/06 19:31:19 -- deitz

Log message:
	Removed usage of FnSymbol::typeBinding from many places in the
	compiler most often by replacing typeBinding->definition with
	_this->type, but occasionally simplifying.  This is in preparation for
	supporting bound functions on type expressions.
	
	Added support for bound functions on types that cannot be specified
	with a single identifier, e.g., int(32), but are type expressions.
	For the time being, for parsing purposes, the type is required to be
	in parentheses as in
	
	  fun (int(32)).print() { ...
	
	This work furthers Wayne's work on making the complex type a primitive
	type and supporting bit widths on types.  It is also part of my effort
	to simplify the normalization/cleanup/scope resolution code.
	
	Fixed FnSymbol constructor to allocate the formals alist.

Modified files:
	chapel/compiler/AST/: astutil.cpp build.cpp symbol.cpp view.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         normalize.cpp parallel.cpp 
	                         scopeResolve.cpp semanticChecks.cpp 
	chapel/compiler/symtab/: symscope.cpp 
Added files:
	chapel/test/trivial/deitz/: test_integer_method3.chpl 
	                            test_integer_method3.good 

---------------------------------------------------------------------------

05/17/06 19:33:27 -- deitz

Log message:
	Simplified primitive mechanism in the front end so that if a CallExpr
	is a primitive, CallExpr::primitive is set.  This involved simply
	setting it when the CallExpr is built during parsing.  Removed extra
	checks to see if a CallExpr is a primitive because the name of the
	function is __primitive.  The transformation to set
	CallExpr::primitive used to be done during normalization.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp view.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: build.h expr.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: inlineFunctions.cpp normalize.cpp 
	                         scopeResolve.cpp 

---------------------------------------------------------------------------

05/18/06 13:44:02 -- jplevyak

Log message:
	Fix for writeTuple.chpl.
	Fixed issue with circular data flow passing through member variables
	 for example the members of a tuple assigned with operator=.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

05/18/06 14:37:35 -- shannon

Log message:
	Added the abs function.  It's overloaded for ints and floats with
	the fabs primitive called for floats.  The chapel user will
	no longer use 'fabs'.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
Removed files:
	chapel/test/modules/standard/math/: fabs.chpl fabs.good 

---------------------------------------------------------------------------

05/18/06 16:50:24 -- deitz

Log message:
	Test of dispatch on primitive types with bit widths passes.

Added files:
	chapel/test/trivial/deitz/: test_int32b.good test_int32b.chpl 

---------------------------------------------------------------------------

05/18/06 17:56:44 -- jplevyak

Log message:
	Extend entry set marking to use the reverse data flow graph in the
	case where we are recursively examining setters.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

05/19/06 09:23:30 -- deitz

Log message:
	Cleaned up code to create ModuleSymbol::initFn given previous coupling
	of symboltable creation and AST insertion.  This function is now
	created when the module is built.  It is now substantially easier to
	build a module during compilation.
	
	Added convenience overloaded constructor for ImportExpr.
	
	Removed --fnostdincs_but_file which became pretty useless when write
	was reimplemented with tuples.
	
	Removed dead code.

Modified files:
	chapel/compiler/AST/: astutil.cpp build.cpp expr.cpp type.cpp 
	chapel/compiler/include/: alist.h build.h driver.h expr.h 
	                          symbol.h symtab.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

05/19/06 09:26:11 -- deitz

Log message:
	Refactored createPrimitiveType, removing some excess mess.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

05/19/06 10:28:34 -- waynew

Log message:
	Minor change. Less typing to add a primitive op here.

Modified files:
	chapel/compiler/passes/: interpreter_ops.h 

---------------------------------------------------------------------------

05/19/06 10:42:09 -- deitz

Log message:
	Fixed INIT primitive on tuples, fixing the two nested tuple regressions.
	
	Minor simplification of how anonymous records, forall expressions, if
	expressions, and let expressions are transformed.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	chapel/test/types/tuple/deitz/: test_destruct_nested.chpl 
	                                test_tuple_of_tuples.chpl 

---------------------------------------------------------------------------

05/19/06 10:57:13 -- shannon

Log message:
	Added a test for the new abs() math routine.

Added files:
	chapel/test/modules/standard/math/: abs.chpl abs.good 

---------------------------------------------------------------------------

05/19/06 11:57:31 -- shannon

Log message:
	Fixed a bug with the atan2() math function such that
	it now works in the compiler.

Modified files:
	chapel/modules/standard/: _chpl_math.chpl 

---------------------------------------------------------------------------

05/19/06 12:26:06 -- jplevyak

Log message:
	Fix SEGV which was causing test_array_1D to fail

Modified files:
	chapel/compiler/ifa/: clone.cpp 

---------------------------------------------------------------------------

05/19/06 12:38:52 -- jplevyak

Log message:
	Regress num_kind_string[] so that it matches the structure names again.
	Fix make_cast_code.cpp so that it can be compiled with
	  g++ -I../include make_cast_code.cpp
	regenerate cast_code.cpp

Modified files:
	chapel/compiler/ifa/: cast_code.cc make_cast_code.cpp num.h 

---------------------------------------------------------------------------

05/19/06 19:31:05 -- deitz

Log message:
	Removed all usage of the INIT primitive from the AST.  References to
	it are still in the compiler; to be removed next.  Simplified DefExpr
	transform.
	
	Removed references to dtUnspecified.  Left gUnspecified which is used
	in the interpreter for implementing closures.
	
	Added _init function.  It returns the initial value of a type and is
	used by the compiler for when it does not know the type before
	analysis runs.  For example, "var x : y.type" could be translated into
	"_move(x, _init(y))."
	
	The _init functions is treated similarly to the _copy function for
	tuples, it is rebuilt during instantiation.
	
	Fixed --no-header-errors to apply to the printing of candidate
	functions as well.
	
	Added a hack to param init so that the type is ignored on params that
	also have an initialization expression.  This misses a necessary
	coercion in the case of "param x : float = 4" and I added a test case
	to mark this.  I did this because the param folding currently assumes
	there is only one move to a parameter.
	
	Added _init functions for the primitive types and objects, _init
	functions for records are automatically generated.  There is not yet
	an _init function for the primitive types that have different bit
	widths.  It is only necessary, however, for the case where the type is
	unknown.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/ifa/: fa.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_htuple.chpl 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	chapel/test/memory/shannon/: configVarFile.good 
	chapel/test/npb/ft/: ft-serial-working1.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 
Added files:
	chapel/test/trivial/deitz/: test_coerce_param.chpl 
	                            test_coerce_param.future 
	                            test_coerce_param.good 

---------------------------------------------------------------------------

05/22/06 11:30:30 -- deitz

Log message:
	Removed unused PRIMITIVE_INIT and associated dead code.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/analysis/: analysis_ops.h chapel_ifa.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: resolveAnalyzed.cpp 

---------------------------------------------------------------------------

05/22/06 13:40:44 -- deitz

Log message:
	Removed future which started working because of the change in handling
	of the write function.

Removed files:
	chapel/test/types/file/bradc/: badfile.future 

---------------------------------------------------------------------------

05/22/06 14:51:15 -- deitz

Log message:
	Added my 2nd go at Jacobi.

Added files:
	chapel/test/studies/jacobi/deitz/: jacobi2.chpl 

---------------------------------------------------------------------------

05/22/06 17:28:33 -- waynew

Log message:
	My monitor is old, my vision poor, and promises are broken.  Changed
	the color of constants from "lightblue" to "blue" w/ italics. Reused
	one of Steve's fine choice of colors.

Modified files:
	chapel/compiler/AST/: view.cpp 

---------------------------------------------------------------------------

05/23/06 07:11:53 -- jplevyak

Log message:
	Fix some minor typos

Modified files:
	chapel/test/studies/jacobi/jplevyak/: jacobi-jp1.chpl 
	                                      jacobi-jp2.chpl 

---------------------------------------------------------------------------

05/23/06 07:50:12 -- jplevyak

Log message:
	Fix named argument member function futures.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h pattern.cpp pattern.h 
Removed files:
	chapel/test/classes/deitz/: test_name_method.future 
	                            test_name_method2.future 

---------------------------------------------------------------------------

05/23/06 11:05:27 -- deitz

Log message:
	Added a function simplify_nested_moves that makes the following
	transforms in the AST:
	
	  tmp1 = tmp2 = tmp3   -->   tmp2 = tmp3; tmp1 = tmp2
	  tmp1 = tmp1 = tmp2   -->   tmp1 = tmp2
	
	This function is called at the end of the resolve_analyzed pass and
	simplifies the case where overloaded assignment resolves to the
	primitive move.

Modified files:
	chapel/compiler/passes/: resolveAnalyzed.cpp 

---------------------------------------------------------------------------

05/23/06 11:36:36 -- deitz

Log message:
	Changed code generation of members to favor printing out
	class_name->member_name when the variable has a class type.  The
	(*((T*)(((char*)(p))+offset))) format with member_type and
	member_offset is now only used for code generation where sum types are
	involved.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

05/23/06 12:47:55 -- waynew

Log message:
	Another attempt to slowdown the compiler and (temporarily) increase
	memory usage. The trade-off is that symbols now link to the appropriate
	external html file.  Should make travering the html ast easier.

Modified files:
	chapel/compiler/AST/: view.cpp 

---------------------------------------------------------------------------

05/23/06 14:18:21 -- deitz

Log message:
	Fixed the setter of fields so that it doesn't return 'this' even
	though it is correctly marked as void.  It now returns void.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

05/24/06 09:16:54 -- jplevyak

Log message:
	updated libifa for inclusion on sourceforge.net

Modified files:
	chapel/compiler/ifa/libifa/: Makefile ifa.1 index.html 

---------------------------------------------------------------------------

05/24/06 11:07:04 -- deitz

Log message:
	Implemented a few low-level optimizations to clean up the generated
	code, in particular, local copy propagation.  This pass is now
	implemented and broken up into four phases.
	
	1. compressUnnecessaryScopes removes block statements that do not
	   impact control flow, moving their bodies into the outer block
	   statement.  This is helpful for copy propagation since that could
	   potentially assign a variable from an inner scope to an outer
	   scope.
	
	2. localCopyPropagation does the local copy propagation.  This is very
	   conservative, assuming that any call may be a pass by reference
	   situation.
	
	3. deadVariableElimination removes local variables that are only
	   assigned values.
	
	4. deadExpressionElimination removes expression statements that have
	   no effect.  In particular, this currently just removes a SymExpr.
	
	There are a number of limitations:
	
	1. This is disabled when -p is specified since cobegin is handled
	   during code generation and requires the "unnecessary" block
	   statements.
	
	2. Copy propagation is disabled on config variables since the
	   initialization of config variables is inserted during code
	   generation and so the AST is unaware.
	
	3. Because the init function of a module has the scope of the module,
	   variables are not removed in this function.  Unfortunately this is
	   where most of the code in our tests shows up since the init
	   function contains all the code at the top level of a Chapel
	   program.  I think we can fix the scope of the init function now
	   that we have normalized the DefExpr.
	
	4. Local copy propagation is significantly more conservative than it
	   needs to be, not checking to see if an actual is actually passed by
	   reference, but simply assuming it is.
	
	This work identified a few things that still need to be normalized:
	
	1. Types are not removed from functions.
	2. Config variables are not dealt with in the AST.
	3. Cobegin is not dealt with in the AST.
	4. The init function still has the module's scope.
	
	This pass currently works on variables indiscriminately and is on by
	default.  I should probably add a flag to disable it and perhaps we
	also want a flag that would only run the scalar optimizations on
	compiler-inserted temporaries.
	
	Example.
	
	   {
	     var x = ...;
	     z = x;
	   }
	   y = z;
	
	After compressUnnecessaryScopes
	
	   var x = ...;
	   z = x;
	   y = z;
	
	After localCopyPropagation
	
	   var x = ...;
	   z = x;
	   y = x;
	
	After deadVariableElimination
	
	   var x = ...;
	   x; // assuming z is not used anywhere
	   y = x;
	
	After deadExpressionElimination
	
	   var x = ...;
	   y = x;

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: copy_propagation.cpp 

---------------------------------------------------------------------------

05/24/06 13:58:09 -- deitz

Log message:
	Enabled scalar promotion on functions that return a value.
	
	Note that the function cannot yet be scalar promoted with more than
	one argument as this requires zippered iteration.  Looking into
	enabling that now and expecting it should be easy.
	
	Added a working test case.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/arrays/deitz/: test_scalar_promote3.chpl 
	                           test_scalar_promote3.good 

---------------------------------------------------------------------------

05/24/06 14:00:04 -- deitz

Log message:
	Enabled zippered iteration and removed future.
	
	Note that zippered iteration is currently rank neutral as is iteration
	in general.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/test/types/seq/deitz/: test_zipper1.good 
Removed files:
	chapel/test/types/seq/deitz/: test_zipper1.future 

---------------------------------------------------------------------------

05/24/06 14:59:13 -- deitz

Log message:
	Fixed how the interpreter calls the scalar promotion wrapper to mimic
	analysis.  It now lists the substitutions as the formal symbols and
	the formal types.  It used to use the actual types.  Not sure whether
	this matters yet.  This change gets test_scalar_promote3 through the
	interpreter.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

05/24/06 16:37:25 -- jplevyak

Log message:
	Add testing system and update prelude for float128/complex128

Modified files:
	chapel/compiler/ifa/libifa/: Makefile prelude.v 
Added files:
	chapel/compiler/ifa/libifa/: ifa_tests 
	chapel/compiler/ifa/libifa/tests/: literal.v literal.v.check 

---------------------------------------------------------------------------

05/24/06 17:26:09 -- jplevyak

Log message:
	two new jacobi examples

Added files:
	chapel/test/studies/jacobi/jplevyak/: jacobi-jp3.chpl 
	                                      jacobi-jp4.chpl 

---------------------------------------------------------------------------

05/24/06 17:34:19 -- bradc

Log message:
	Some stabs at writing jacobi.  From the README:
	
	jacobi-simple-brad.chpl      : My stab at a reasonably simple jacobi
	jacobi-simple-compilers.chpl : A failed attempt to modify the above until
	                               it would compile
	jacobi-play-brad.chpl        : Started to get playful with the simple version
	jacobi-play2-brad.chpl       : Continued playfulness
	jacobi-rankind-brad.chpl     : A somewhat unsatisfactory attempt to write a
	                               rank-independent jacobi
	
	Steve, if you could print out jacobi-simple-brad.chpl,
	jacobi-play-brad.chpl, and jacobi-play2-brad.chpl, that would be
	great.

Added files:
	chapel/test/studies/jacobi/bradc/: README jacobi-play-brad.chpl 
	                                   jacobi-play2-brad.chpl 
	                                   jacobi-rankind-brad.chpl 
	                                   jacobi-simple-brad.chpl 
	                                   jacobi-simple-compiles.chpl 

---------------------------------------------------------------------------

05/24/06 17:59:55 -- waynew

Log message:
	Not too much different from example1.chpl.  Changes include:
	 - removal of the 3rd array to store the delta
	 - removed the explicit max reduction the delta array
	 - "main" world is now the smaller domain so that it does not
	   print the extra border values in the final writeln

Added files:
	chapel/test/studies/jacobi/waynew/: example2.chpl 

---------------------------------------------------------------------------

05/24/06 18:04:30 -- bocchino

Log message:
	Jacobi example

Added files:
	chapel/test/studies/jacobi/bocchino/: jacobi.chpl 

---------------------------------------------------------------------------

05/24/06 18:15:52 -- deitz

Log message:
	Fix on thinko in my earlier scalar promotion checkin.  I was returning
	a sequence with the wrong elt_type.  This now returns the right
	elt_type, but ends up calling the first application of the function
	twice in order to determine the type.  I will clean this code up.
	
	Added three more tests of scalar promotion, one of which scalar
	promotes two arguments to a function and relies on zippered iteration.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/arrays/deitz/: test_scalar_promote4.chpl 
	                           test_scalar_promote4.good 
	                           test_scalar_promote5.chpl 
	                           test_scalar_promote5.good 
	                           test_scalar_promote6.chpl 
	                           test_scalar_promote6.good 

---------------------------------------------------------------------------

05/25/06 08:47:09 -- bradc

Log message:
	Added a new jacobi variation that uses array slicing rather than
	scalars.  Also, added the abs() function to the use of all my
	versions, which I'd forgotten yesterday.

Modified files:
	chapel/test/studies/jacobi/bradc/: README jacobi-play-brad.chpl 
	                                   jacobi-play2-brad.chpl 
	                                   jacobi-rankind-brad.chpl 
	                                   jacobi-simple-brad.chpl 
Added files:
	chapel/test/studies/jacobi/bradc/: jacobi-slice-brad.chpl 

---------------------------------------------------------------------------

05/25/06 09:01:18 -- bradc

Log message:
	Added missing NOTEST files to Rob and my directories (I forgot, and he
	probably didn't know about the need).

Added files:
	chapel/test/studies/jacobi/bocchino/: NOTEST 
	chapel/test/studies/jacobi/bradc/: NOTEST 

---------------------------------------------------------------------------

05/25/06 09:32:42 -- jplevyak

Log message:
	test flags file

Added files:
	chapel/compiler/ifa/libifa/tests/: literal.v.flags 

---------------------------------------------------------------------------

05/25/06 14:50:40 -- jplevyak

Log message:
	Update to 0.2

Modified files:
	chapel/compiler/ifa/libifa/: index.html 

---------------------------------------------------------------------------

05/25/06 14:50:59 -- jplevyak

Log message:
	next version 0.3

Modified files:
	chapel/compiler/ifa/libifa/: Makefile 

---------------------------------------------------------------------------

05/25/06 15:55:57 -- deitz

Log message:
	Enabled scalar promotion on methods and added a test case.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/arrays/deitz/: test_scalar_promote7.chpl 
	                           test_scalar_promote7.good 

---------------------------------------------------------------------------

05/25/06 18:43:56 -- jplevyak

Log message:
	

Modified files:
	chapel/compiler/ifa/: builtin_symbols.h cg.cpp 

---------------------------------------------------------------------------

05/25/06 21:01:19 -- jplevyak

Log message:
	enable "128" bit complex/floats.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

05/26/06 08:59:42 -- jplevyak

Log message:
	Remove "split eager" from _copy on tuples.
	Add some controls to prevent runaway eager splitting.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/ifa/: fa.cpp fa.h 

---------------------------------------------------------------------------

05/26/06 11:12:59 -- deitz

Log message:
	Refactored the scalar promotion wrapper code and enabled forall
	expressions with explicit indices such as
	
	  [indexVar in iteratorExpr] expr
	
	Removed two futures.

Modified files:
	chapel/compiler/AST/: build.cpp symbol.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/test/arrays/deitz/: array_forall_expr.chpl 
	                           array_forall_expr.good 
	chapel/test/functions/deitz/: test_forallexpr1.chpl 
Removed files:
	chapel/test/arrays/deitz/: array_forall_expr.future 
	chapel/test/functions/deitz/: test_forallexpr1.future 

---------------------------------------------------------------------------

05/26/06 12:36:40 -- jplevyak

Log message:
	Fix performance issue in analysis.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

05/27/06 21:37:51 -- jplevyak

Log message:
	Add code to handle recursive closures.
	Ignore eager splitting pragmas.
	Fix typo in jacobi example.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h 
	chapel/test/studies/jacobi/jplevyak/: jacobi-jp3.chpl 

---------------------------------------------------------------------------

05/29/06 09:29:25 -- jplevyak

Log message:
	Up pass limit to 100.
	Tweak initial_ compatibility.

Modified files:
	chapel/compiler/ifa/: fa.cpp fa.h 

---------------------------------------------------------------------------

05/29/06 13:37:57 -- jplevyak

Log message:
	Ensure that all type entry set splits precede marked type splits.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

05/30/06 08:52:35 -- deitz

Log message:
	Added missing case as stub to ACallbacks::report_analysis_errors to
	remove compiler warning.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 

---------------------------------------------------------------------------

05/30/06 12:19:24 -- deitz

Log message:
	Reductions can now be specified just with the class name as in
	
	  max reduce A
	
	They currently need to be specified with the class name rather than an
	instance of the class.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/test/reductions/bradc/: maxreduce.chpl sumreduce.chpl 
	                               sumreduce2.chpl 
	chapel/test/types/seq/deitz/: test_reduce1.chpl 

---------------------------------------------------------------------------

05/30/06 12:23:33 -- deitz

Log message:
	Added support for indexing into an array with a domain.  This works
	for setting values in the array as in
	
	  A(InnerD) = 0.0;
	
	but fails for reading values from an array as in
	
	  writeln(A(InnerD));
	
	This works in the interpreter but fails in analysis with regards to
	handling nested functions.  I filed a future for John and will also
	look into it further.
	
	The result of reading an array indexed by a domain is an array rather
	than a sequence.  We should discuss the semantics for when arrayness
	can be maintained without lowering to sequence semantics.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_index_domain.chpl 
	                           test_index_domain.good 
	                           test_index_domain2.chpl 
	                           test_index_domain2.good 

---------------------------------------------------------------------------

05/30/06 12:24:00 -- deitz

Log message:
	Forgot to commit future.

Added files:
	chapel/test/arrays/deitz/: test_index_domain2.future 

---------------------------------------------------------------------------

05/30/06 14:38:50 -- deitz

Log message:
	Added a new Jacobi future based on my Jacobi implementation.  It works
	in the interpreter though I did not run it to completion.  There is an
	analysis failure in the compiler.
	
	To get this to work, I added an overloaded + function at the top of
	the program that overloads addition on the two types of tuples thereby
	allowing the index from iterating over a domain to be added to the
	stencil vector of tuples.
	
	I implemented this just to see how close we were.

Added files:
	chapel/test/arrays/deitz/: jacobi5.chpl jacobi5.future 
	                           jacobi5.good 

---------------------------------------------------------------------------

05/30/06 16:14:03 -- deitz

Log message:
	

Modified files:
	chapel/compiler/passes/: codegen.cpp 
	chapel/make/: Makefile.linux64 
Added files:
	chapel/test/arrays/deitz/: jacobi-no-inline.chpl 
	                           jacobi-no-inline.compopts 
	                           jacobi-no-inline.good 

---------------------------------------------------------------------------

05/30/06 16:17:37 -- deitz

Log message:
	Reenabled inlining by adding _init to the list of cnames that need to be mangled.  Added a test to make sure inlining keeps working.

Modified files:
	chapel/make/: Makefile.linux64 

---------------------------------------------------------------------------

05/30/06 16:59:40 -- deitz

Log message:
	Added a check to catch possibly infinite recursive instantiation of
	types as in
	
	  seq of seq of seq of seq of seq of ...
	
	This is also caught by a catch already implemented to make sure that a
	given function is not instantiated more than a certain number of
	times.  However, that number is potentially much greater than the
	number necessary to catch recursively instantiated types.  Also, it
	has proven, at least currently, that compilation time can be adversely
	impacted so that the other check takes too long to catch.
	
	This is implemented by a new vector Type::instantiatedWith that keeps
	track of the types used to instantiated another type.
	
	Also changed the cname to better reflect the type.  So seq of seq of
	bool is now named _seq_A_seq_A_bool_B_B where A and B parenthesize the
	name.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

05/30/06 17:11:55 -- deitz

Log message:
	Removed unused _cross iterator from sequence module.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

05/30/06 17:34:09 -- jplevyak

Log message:
	Fix bug in cloning of nested functions.
	
	This fixes:  arrays/deitz/test_index_domain2.chpl

Modified files:
	chapel/compiler/ifa/: clone.cpp 

---------------------------------------------------------------------------

05/30/06 20:16:06 -- jplevyak

Log message:
	Reorganize splitting so that entry sets and creation sets are split in
	strict order.

Modified files:
	chapel/compiler/ifa/: fa.cpp 

---------------------------------------------------------------------------

05/31/06 09:48:12 -- deitz

Log message:
	Added a future that shows a problem with scalar promotion on a nested
	sequence.  The test fails to resolve the call in analysis.  The test
	succeeds in the interpreter.

Added files:
	chapel/test/arrays/deitz/: test_scalar_promote8.chpl 
	                           test_scalar_promote8.future 
	                           test_scalar_promote8.good 

---------------------------------------------------------------------------

05/31/06 10:48:30 -- deitz

Log message:
	Added a check that the same name is not used to pass an actual by name
	in the same function call.  Removed future.
	
	Fixed simple-3 test which declared an array over [3] rather than
	[1..3].  Removed future.

Modified files:
	chapel/compiler/passes/: semanticChecks.cpp 
	chapel/test/arrays/jplevyak/: simple-3.chpl simple-3.good 
	chapel/test/functions/deitz/named/: test_named6-error.good 
Removed files:
	chapel/test/arrays/jplevyak/: simple-3.future 
	chapel/test/functions/deitz/named/: test_named6-error.future 

---------------------------------------------------------------------------

05/31/06 14:39:31 -- waynew

Log message:
	Bug fix to paratest.client.pl.  Did not chomp node string.  Removed some
	commented out debugging output.

Modified files:
	chapel/test/: paratest.server.pl paratest.client.pl 

---------------------------------------------------------------------------

06/01/06 10:46:09 -- shannon

Log message:
	Refactored the math functions in the interpreter such that we now
	dynamically link the libm shared object and look up the functions.
	
	Added functionality to the test system such that one can now
	specify different .good files for different platforms.  The
	test system first looks for a <testname>.<platform>.good; if not
	found it looks for <testname>.good.
	
	Re-added the exp2(), log2(), nearbyint(), round(), tgamma(),
	and trunc() math functions.  These tests fail on the Sun platform.
	They have been placed in an interpret-only directory with
	sunos-specific .goods.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/compiler/passes/: interpreter_ops.h runInterpreter.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/test/: sub_test 
	chapel/test/trivial/shannon/: readWriteEnum.chpl 
	                              readWriteEnum.good 
	                              readWriteEnum.stdin 
Added files:
	chapel/test/modules/standard/math/interpret/: .cvsignore 
	                                              COMPOPTS NOEXEC 
	                                              NOINTERP README 
	                                              exp2.chpl 
	                                              exp2.good 
	                                              exp2.sunos.good 
	                                              log2.chpl 
	                                              log2.good 
	                                              log2.sunos.good 
	                                              nearbyint.chpl 
	                                              nearbyint.good 
	                                              nearbyint.sunos.good 
	                                              round.chpl 
	                                              round.good 
	                                              round.sunos.good 
	                                              tgamma.chpl 
	                                              tgamma.good 
	                                              tgamma.sunos.good 
	                                              trunc.chpl 
	                                              trunc.good 
	                                              trunc.sunos.good 

---------------------------------------------------------------------------

06/01/06 10:57:19 -- deitz

Log message:
	Add future test for scalar promotion on arithmetic sequences.

Added files:
	chapel/test/arrays/deitz/: test_scalar_promote9.chpl 
	                           test_scalar_promote9.future 
	                           test_scalar_promote9.good 

---------------------------------------------------------------------------

06/01/06 13:51:38 -- jplevyak

Log message:
	Reorganize the way "most specific" is determined.
	Instantiated types are now on par with declared types.
	Sum types are now more specific than coerced or promoted types.
	Add a test which should cover the case wayne was seeing.

Modified files:
	chapel/compiler/ifa/: ast.cpp pattern.cpp sym.h 
Added files:
	chapel/test/functions/jplevyak/: subsume-1.chpl subsume-1.good 

---------------------------------------------------------------------------

06/01/06 14:36:24 -- shannon

Log message:
	Minor refactoring of the math function interpreter code.
	There is now just one PrimOp enum for all the functions
	that take a single float64 arg and return a float64
	(and so just one case statement is needed).

Modified files:
	chapel/compiler/passes/: runInterpreter.cpp 
	chapel/test/execflags/shannon/configs/: configVarString.chpl 
	                                        configVarString.execopts 
	                                        configVarString.good 
	chapel/test/memory/shannon/: configVarFile.chpl 
	                             configVarFile.good 
	                             configVarFile.input 
	                             memmaxInput.chpl memmaxIntOnly.chpl 

---------------------------------------------------------------------------

06/01/06 17:26:27 -- deitz

Log message:
	Removed future for test that indexes into an array with a domain that
	John fixed.
	
	Removed future for Brad's test of assigning one array the negative of
	another as in A = -B which started working now that scalar promotion
	on functions that return values works.
	
	Added a test to assign the result of adding two arrays to a third
	array as in C = A + B.  This works with zipper iteration.

Added files:
	chapel/test/arrays/deitz/: test_plus.chpl test_plus.good 
Removed files:
	chapel/test/arrays/bradc/: arrayassign1a.future 
	chapel/test/arrays/deitz/: test_index_domain2.future 

---------------------------------------------------------------------------

06/01/06 17:27:05 -- deitz

Log message:
	We sometimes need to create a list of Stmts rather than a single Stmt
	when we parse a Chapel statement.  To this end, the Chapel grammar was
	modified so that a statement is parsed as an AList<Stmt>.  However
	this makes it difficult to determine the extent of a single Chapel
	statement.
	
	Added a new type of BlockStmt called BLOCK_SCOPELESS that is like a
	BlockStmt but that has no scope associated with it.  It is thus
	organizational only.
	
	Modified the Chapel grammar so that Chapel statements are parsed as
	scopeless BlockStmts.
	
	This is necessary to support the transformation on cobegin blocks that
	seek to parallelize at the Chapel statement level.  Removed future for
	a test of a while loop in a cobegin block.
	
	Added to the cleanup pass functionality to flatten all scopeless
	blocks.  To discuss: Should we flatten these blocks or leave them in
	as representative of where the Chapel statements are.  I can imagine
	they may be useful for looking at the code and/or debugging.  Not
	removing the scopeless blocks can be accomplished by not calling the
	flatten_scopeless_blocks function in cleanup.  This has been tested
	and works on Jacobi.
	
	Reassociated the uses vector with BaseAST rather than with SymScope
	since the SymScope is wiped out when AST is removed and uses need to
	be maintained.
	
	Added a new variant on collect_asts called collect_top_asts that does
	not recurse into a symbol (other than the initial symbol passed to it
	if that is a symbol).  This could be useful to collect the asts in a
	function without also collecting the asts in nested functions.  It is
	used now in the ClassType::addDeclarations to determine primary
	methods, fields, and types in a class.  This makes this code more
	robust necessary to handle the additional BlockStmts inserted with
	this checkin.  I modified a bunch of other fragile code though some of
	it remains fragile.
	
	Made the new traversal mechanism work when passed a list of
	statements.  It still complains with other lists.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp build.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: astutil.h baseAST.h build.h stmt.h 
	                          symscope.h symtab.h 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: cleanup.cpp verify.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
Removed files:
	chapel/test/parallel/cobegin/waynew/: while.future 

---------------------------------------------------------------------------

06/02/06 14:36:16 -- bradc

Log message:
	Moved the -ldl flag from Makefile.compiler.head to platform-specific
	Makefiles, as it turns out to be a Linux-ism.  Sun supports -ldl for
	compatability, but it isn't required.  Cygwin doesn't support it.
	
	Could imagine moving these platform-specific options that only apply
	to the compiler into a new set of compiler/make/Makefile.<platform>
	files, but I'm putting off that change for now in favor of getting
	cygwin working again.

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/make/: Makefile.linux Makefile.linux64 
	              Makefile.linux64_32 

---------------------------------------------------------------------------

06/05/06 12:07:40 -- bradc

Log message:
	Adding cygwin-specific .good files for interpreted math tests.
	On my install of cygwin, dynamically-linked math libraries don't
	seem to be supported.  Perhaps I need to reconsider my install,
	but for now, this will keep things clean.

Added files:
	chapel/test/modules/standard/math/interpret/: exp2.cygwin.good 
	                                              log2.cygwin.good 
	                                              nearbyint.cygwin.good 
	                                              round.cygwin.good 
	                                              tgamma.cygwin.good 
	                                              trunc.cygwin.good 

---------------------------------------------------------------------------

06/07/06 12:31:20 -- deitz

Log message:
	Removed the last two remaining functions from symtab.cpp and added
	them to build.cpp to better reflect how they are used and what they
	do.  That is, they are called during parsing to build up some AST.
	
	Moved symscope.cpp into the AST directory which makes sense now that
	the symbol table and scopes are part of the AST and automatically
	handled by the AST insertion and removal routines.
	
	This removes a bunch of unnecessary compilation dependences.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: Makefile.share astutil.cpp baseAST.cpp 
	                      build.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp view.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h build.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 
	chapel/compiler/parser/: chapel.y lexyacc.h parser.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp filesToAST.cpp 
	                         flattenFunctions.cpp 
	                         functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	                         parallel.cpp printProgram.cpp 
	                         resolveAnalyzed.cpp runAnalysis.cpp 
	                         runInterpreter.cpp scopeResolve.cpp 
	                         verify.cpp 
Added files:
	chapel/compiler/AST/: symscope.cpp 
Removed files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/symtab/: Makefile Makefile.include 
	                         Makefile.share symscope.cpp symtab.cpp 

---------------------------------------------------------------------------

06/19/06 11:16:00 -- deitz

Log message:
	Normalized SelectStmt-WhenStmt in the representation to be based on
	CondStmt.  SelectStmt and WhenStmt remain in the compiler, but are not
	in the AST after parsing.  WhenStmt is used to group a list of
	expressions and a statement during parsing, but this should be cleaned
	up.
	
	Dead code has not been removed.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

06/19/06 11:36:52 -- deitz

Log message:
	Added a script
	
	  send_patch <name>
	
	that creates a patch of the workspace with a given name.  The patch is
	stored in your home directory and is called name.patch.  If a file
	called name.patch already exists, it is removed.
	
	Added a script
	
	  receive_patch <name>
	
	that throws away all changes to the current workspace, and then
	applies a patch created with send_patch.
	
	Use these scripts to make one workspace look like another, for
	example, when updating the Chapel servers with your current workspace
	in order to test in parallel.
	
	The scripts rely on a clean workspace created with the -C cvs update
	option.

Added files:
	./: receive_patch send_patch 

---------------------------------------------------------------------------

06/19/06 11:49:04 -- deitz

Log message:
	Removed dead code associated with old AST representation of
	select...when construct.

Modified files:
	chapel/compiler/AST/: baseAST.cpp bb.cpp stmt.cpp type.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/passes/: runInterpreter.cpp 

---------------------------------------------------------------------------

06/19/06 13:33:07 -- deitz

Log message:
	Simplified code for default write function for enumerated types to use
	CondStmt over a select...when construct.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

06/21/06 14:22:45 -- jplevyak

Log message:
	unsigned is nolonger below int in the type hierarchy
	int is nolonger below float in the type hierarchy
	float is nolonger below complex in the type hierarchy
	numeric is nolonger below string in the type hierarchy
	   these conversions are now strictly coercions
	coerce_num() now handles coersions to string
	most specific is now defined by testing in this order:
	  non-promotion vs. promotion
	  sum type of values (e.g. symbols, constants) vs. not
	  sum type of types (e.g. numeric) vs. not
	  closest in the type hiearchy
	  non-coersion vs. coercion
	  non-type instantiation vs. type instantiation
	  non-parameter vs parameters (constant instantiation)
	  constant vs. non-constant type (e.g. where p == 1)
	Also fixed up types/type_variables/deitz/functions/test_foo5-error.good
	  which is now nolonger an error.

Modified files:
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/ifa/: fa.cpp pattern.cpp sym.h 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 

---------------------------------------------------------------------------

06/21/06 17:08:26 -- waynew

Log message:
	Cobegin stuff, one new test, and mod to existing test.
	Cobegin support.
	 - Cobegin statements can now access more than one variable.
	 - Cobegin statements can now access locals.
	 - Added an is_ref field to VarSymbol.
	 - Added PRIMITIVE_GET/SET_MEMBER_REF_TO primitives to get/set
	   references to the locals. Cobegin statements are referenced by
	   a temporary class that is passed as an argument to the forked thread.
	 - Changed the primitive PRIMITIVE_CHPL_ALLOC to codegen.  May be
	   cobegin-specific as it's only used by "pass2" of the parallel passe.
	
	locals.chpl + baggage
	 - Added a test for cobegins with references to locals.
	
	while.chpl/good
	 - Previous version had multiple valid outputs. Possible results is
	   now checked within the test itself.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp stmt.cpp symbol.cpp 
	                      view.cpp 
	chapel/compiler/include/: passes.h primitive.h symbol.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: cleanup.cpp parallel.cpp 
	chapel/test/: paratest.server.pl 
	chapel/test/parallel/cobegin/waynew/: while.chpl while.good 
Added files:
	chapel/test/parallel/cobegin/waynew/: locals.chpl 
	                                      locals.compopts 
	                                      locals.good locals.prediff 

---------------------------------------------------------------------------

06/21/06 17:41:01 -- waynew

Log message:
	Added -compopts flag that can be used to pass a compiler options string to
	start_test.

Modified files:
	chapel/test/: paratest.client.pl paratest.server.pl 

---------------------------------------------------------------------------

06/27/06 10:30:29 -- deitz

Log message:
	Initial implementation of a local type inference function/type
	resolution scheme enabled via the --lti compiler flag.  There are 75
	failing tests when this is enabled:
	
	  update error messages/output 14
	  require error messages/are now errors 9
	  currying 8
	  nil 7
	  inheritance 7
	  interpreter issue 7
	  visibility 5
	  type aliases 3
	  scalar promotion of numeric 2
	  string coercion 2
	  array fields 2
	  other 4
	  currently failing/still failing 3
	
	This is a major change that impacts instantiation.  Fixed a number of
	bugs in instantiation.
	
	Added BaseAST::removePragma that allows pragmas to be removed during
	compilation.
	
	Added the ability to start a traversal on an AList<Expr> or an
	AList<DefExpr> which helps for debugging with print_view.
	
	Replaced dtUnknown with dtAny for formal arguments with unspecified
	types.
	
	Added a returnInfo function pointer to primitives used by the lti
	function resolution to determine the return value of primitives.
	
	Added debug routines iprint_view and inprint_view that take an ID of a
	BaseAST rather than a pointer to the BaseAST.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp build.cpp expr.cpp 
	                      primitive.cpp symbol.cpp type.cpp view.cpp 
	chapel/compiler/include/: astutil.h baseAST.h driver.h 
	                          primitive.h symbol.h type.h view.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp functionResolution.cpp 
	                         normalize.cpp resolveAnalyzed.cpp 
	                         runAnalysis.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_seq.chpl prelude.chpl 

---------------------------------------------------------------------------

06/27/06 10:32:19 -- deitz

Log message:
	updated error messages on tests

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	                                 zeroarity-bound-error-2.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.good 

---------------------------------------------------------------------------

06/28/06 11:54:08 -- deitz

Log message:
	Refactored and cleaned new code.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

06/29/06 14:30:34 -- waynew

Log message:
	Partial checkin of begin-statement support.  Forked threads are
	detached.  Main Chapel thread does not exit until all detached threads
	reach the end of their begin block.  If a detached thread exits by
	any other means and does not terminate the application, the main
	thread will not terminate the application.

Modified files:
	chapel/compiler/AST/: stmt.cpp view.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: parallel.cpp 
	chapel/runtime/include/: chplthreads.h 
	chapel/runtime/src/: chplthreads.c main.c 

---------------------------------------------------------------------------

06/29/06 16:19:38 -- waynew

Log message:
	Fixed error and handled nondeterministic behavior better.

Modified files:
	chapel/test/parallel/cobegin/waynew/: locals.chpl locals.good 

---------------------------------------------------------------------------

06/30/06 10:22:03 -- waynew

Log message:
	Forgot to sort the .good output from the previous checkin fix.

Modified files:
	chapel/test/parallel/cobegin/waynew/: locals.good 

---------------------------------------------------------------------------

06/30/06 18:02:10 -- waynew

Log message:
	1. Another partial checkin of threaded-begin statement support.  Heap
	   allocates locals used within begins.
	2. Added on_heap field to VarSymbols to indicate a var on the heap.
	3. Shortened the names of C constant suffix macros.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp view.cpp 
	chapel/compiler/include/: primitive.h symbol.h 
	chapel/compiler/passes/: parallel.cpp 
	chapel/runtime/include/: chplmem.h chpltypes.h 

---------------------------------------------------------------------------

07/03/06 09:57:03 -- deitz

Log message:
	Turned new function and type resolution scheme on by default.  There
	is no flag to turn it off.  The 35 expected errors are listed in the
	REGRESSIONS file.
	
	Removed usage of numeric sum type in exchange for specific use of the
	primitive types and coercions.
	
	Added user error messages for unknown and ambiguous function calls.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp build.cpp expr.cpp 
	                      primitive.cpp stmt.cpp symbol.cpp 
	                      symscope.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.h runpasses.cpp 
	chapel/compiler/passes/: Makefile.share cleanup.cpp 
	                         functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_math.chpl 
	                          prelude.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chplio.c config.c 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/recursion/: rec_fun-1.good 
	                                     rec_fun-2.good 
	                                     rec_fun-3.good 
	chapel/test/functions/deitz/: test_default_param3.good 
	chapel/test/functions/deitz/default/: test_default3-error.good 
	                                      test_default4-error.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation4.chpl 
	chapel/test/types/type_variables/deitz/: test_myseq2.chpl 
	                                         test_overinstantiate1a.compopts 
	                                         test_overinstantiate1a.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
Added files:
	chapel/test/interpreter/deitz/: NOTEST 
	chapel/test/interpreter/jplevyak/: NOTEST 
	chapel/test/modules/standard/math/interpret/: NOTEST 
Removed files:
	chapel/compiler/passes/: resolveAnalyzed.cpp runAnalysis.cpp 
	                         runAnalysis.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.prediff 
	                               union_type_hierarchy-3-error.prediff 
	chapel/test/functions/jplevyak/: dynamic-partial-1.chpl 
	                                 dynamic-partial-1.good 
	                                 partial-1.chpl partial-1.good 
	                                 partial-2.chpl partial-2.good 
	                                 partial-3.chpl partial-3.good 
	                                 partial-4.chpl partial-4.good 
	                                 partial-5.chpl partial-5.good 
	                                 partial-6.chpl partial-6.good 
	                                 partial-7.chpl partial-7.good 
	chapel/test/functions/jplevyak/scoping/: visibility-2.chpl 
	                                         visibility-2.good 
	                                         visibility-3.chpl 
	                                         visibility-3.good 
	chapel/test/trivial/preston/: curry.chpl curry.good 
	chapel/test/types/type_variables/jplevyak/: where-2-error.chpl 
	                                            where-2-error.good 

---------------------------------------------------------------------------

07/03/06 10:22:12 -- deitz

Log message:
	Updated error message output for some tests to reflect changes as of
	last checkin.

Modified files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	chapel/test/functions/deitz/: test_default_param3.good 
	chapel/test/functions/deitz/default/: test_default3-error.good 
	                                      test_default4-error.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 

---------------------------------------------------------------------------

07/03/06 11:43:47 -- deitz

Log message:
	Removed LabelStmt::stmt field.  Next step: remove LabelStmt.
	
	Removed one test from regressions file that is working (not due to
	this change).

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/analysis/: chapel_ifa.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

07/03/06 16:24:09 -- deitz

Log message:
	Removed code that translated Chapel IR to IF1.  The IR has been
	greatly simplified and will continue to be simplified so it no longer
	makes sense to maintain this code.
	
	Changed storage of the visible functions to use a string-mapped hash
	table.  As an optimization soon, we should implement a nameid or such
	on symbols that we can use instead of string comparison.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: baseAST.cpp expr.cpp primitive.cpp 
	                      symbol.cpp symscope.cpp view.cpp 
	chapel/compiler/include/: baseAST.h expr.h primitive.h stmt.h 
	                          symbol.h symscope.h type.h view.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 
Removed files:
	chapel/compiler/analysis/: Makefile Makefile.include 
	                           Makefile.share analysis_ops.h 
	                           chapel_ifa.cpp chapel_ifa.h 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

07/03/06 17:15:21 -- deitz

Log message:
	Removed LabelStmt.  This contained a DefExpr that defined a
	LabelSymbol.  A LabelSymbol is now defined in a DefExpr that is
	defined in an ExprStmt like all other DefExprs.
	
	Reenabled html log output.

Modified files:
	chapel/compiler/AST/: baseAST.cpp bb.cpp build.cpp expr.cpp 
	                      stmt.cpp view.cpp 
	chapel/compiler/include/: baseAST.h build.h expr.h stmt.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp runInterpreter.cpp 

---------------------------------------------------------------------------

07/05/06 09:51:54 -- deitz

Log message:
	Added CallExpr::methodTag that is set to true if the CallExpr is a
	method access.
	
	Made it so that functions with parentheses are not candidates for
	method accesses so that it is an error to invoke a method with no
	parentheses with parentheses.  This fixes
	test/functions/jplevyak/zeroarity-bound-error-1.chpl.
	
	Cleaned up error messages on methods.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 

---------------------------------------------------------------------------

07/05/06 10:21:44 -- deitz

Log message:
	Cleaned error messages related to function 'this' but is there a
	better way to show this?  How should we list the candidates for
	function calls that are not ambiguous, i.e., where the candidates are
	just the visible functions?  Should we only list them if there are
	fewer than k?
	
	Added a new test test_int_this that coerces the int to a string and
	applies the string indexing function on the int.  This only works on
	variables now since the literal is not allowed in this context in
	parsing.  This is odd usage but basically 987(2) is 8, the second
	character in the string "987" coerced from the int 987.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-2.good 
Added files:
	chapel/test/functions/deitz/: test_int_this.chpl 
	                              test_int_this.good 

---------------------------------------------------------------------------

07/05/06 10:22:33 -- deitz

Log message:
	Updated REGRESSIONS file.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

07/05/06 11:44:13 -- deitz

Log message:
	Allow for literals to be used in more places than before during
	parsing.  For example, as the base expression of a function or of a
	dot expression as in "hello"(3) and "hello".foo().  In the former, we
	are indexing directly into the literal "hello" using the string
	indexing function.  Note that we can do this on an integer that is
	coerced to a string as in 987(2).  In the latter, we are calling a
	function bound to string which is presumably defined as in fun
	string.foo() { ... }.
	
	Removed restriction on tuple multipliers needing to be in parentheses.
	So for example
	
	  param rank = 2;
	  var i : rank * int;
	
	no longer requires a parentheses around "rank * int."  Note that this
	means that a parentheses changes the semantics since we allow for
	1-tuples so
	
	  var i : (rank * int);
	
	is a 1-tuple of a rank-tuple of ints and
	
	  var i : (int);
	
	is a 1-tuple of ints.
	
	This is in contrast to expressions where
	
	  (2, 2)
	
	is a 2-tuple of ints but
	
	  (2)
	
	is just an int.
	
	Perhaps we should get rid of 1-tuples though this will require
	special-casing functions that take variable number of arguments in the
	case that the variable number is one, since this builds a 1-tuple.  Or
	perhaps we are good now.
	
	Removed extra parentheses in module tuples.
	
	Updated tests.
	
	Added a new test case to test 987(2).

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/demo/review_060130/: history_accumulator.chpl 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator2.chpl 
	                                        test_instantiate_iterator3.chpl 
	                                        test_instantiate_iterator3a.chpl 
	chapel/test/types/tuple/deitz/: test_for_param_return.chpl 
	                                test_htuple6.good 
	                                test_htuple7.chpl 
	                                test_param_tuple_arg1.chpl 
Added files:
	chapel/test/functions/deitz/: test_int_this2.chpl 
	                              test_int_this2.good 

---------------------------------------------------------------------------

07/05/06 11:55:18 -- deitz

Log message:
	Removed a bunch of futures that now work because of better handling of
	coercion on array element assignment, scalar promotion, nil,
	instantiation followed by coercion, and empty sequences.

Removed files:
	chapel/test/arrays/deitz/: test_array_basic2.future 
	                           test_scalar_promote8.future 
	chapel/test/classes/bradc/: dispatch.future 
	chapel/test/classes/deitz/: test_nil1.future 
	chapel/test/functions/bradc/: arrayArg.future 
	chapel/test/reductions/bradc/manual/: threeuses-cast.future 
	                                      twouses.future 
	chapel/test/trivial/bradc/: coerce.future 
	chapel/test/types/seq/bradc/: emptySeq2.future 
	chapel/test/types/type_variables/jplevyak/: construct-1.future 

---------------------------------------------------------------------------

07/05/06 13:58:19 -- deitz

Log message:
	Cleaned up error messages and updated .good of three more tests that
	are now errors but were not before.  Updated regressions file.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/deitz/: test_inherit_mod1.good 
	                            test_inherit_mod2.good 
	                            test_inherit_mod3.good 

---------------------------------------------------------------------------

07/05/06 16:39:38 -- deitz

Log message:
	Replaced CastExpr with PRIMITIVE_CAST CallExpr and simplified code.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp 
	                      primitive.cpp symbol.cpp 
	chapel/compiler/include/: baseAST.h expr.h primitive.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp runInterpreter.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

07/06/06 11:36:11 -- deitz

Log message:
	Made "object" codegen as "void*" to allow casts to it and declared a
	fake object instance in the prelude so that object is not removed.
	Made the coercion wrapper apply casts for parents in the class
	hierarchy, enabling classes/deitz/inherit/test_inherit2.
	
	Fixed a bug in inlining in which class arguments were treated as if
	the pointer was passed by reference, enabling the above change,
	arrays/deitz/jacobi-no-inline, and trivial/deitz/test_plusassign.
	
	Removed ";" in generated code for DefExpr ExprStmts, introduced yesterday.
	
	Removed unnecessary-for-now _domain parent class.

Modified files:
	chapel/compiler/AST/: build.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: functionResolution.cpp 
	                         inlineFunctions.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	                          _chpl_indefinite.chpl 
	                          _chpl_sparse.chpl prelude.chpl 
	chapel/test/: REGRESSIONS 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/06/06 14:11:16 -- deitz

Log message:
	Removed "with" from the language and updated a few tests.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/classes/deitz/: test_class_with1.chpl 
	                            test_class_with2.chpl 
	                            test_class_with3.chpl 
	                            test_record_with1.chpl 
	chapel/test/classes/jplevyak/: sum_type-1.chpl 
	chapel/test/flowanalysis/newast/: sum_type-1.chpl 
	                                  sum_type-2.chpl 

---------------------------------------------------------------------------

07/06/06 14:25:48 -- deitz

Log message:
	Removed special-casing of "=" function with "builtin" pragma.  Removed
	"builtin" pragma.  With this change, uints are no longer coerced to
	ints; a cast must be used.  Updated two tests.
	
	Allowed assignment of 64 bit primitives to primitives of lower width
	since the default is 64 bits.  So
	
	  var i : int(32) = 23;
	  var j : int(64) = 23;
	  i = j;
	  j = i;
	
	are legal.  Should we force an explicit conversion as in
	
	  var i : int(32) = 23:int(32);
	  var j : int(64) = 23;
	  i = j:int(32);
	  j = i;
	
	?
	
	Fixed classes/deitz/inherit/test_inherit3 and
	trivial/deitz/test_coerce_integer_to_string1.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/test/: REGRESSIONS 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/trivial/waynew/: uint2int.chpl uintliteral.chpl 

---------------------------------------------------------------------------

07/06/06 15:06:36 -- deitz

Log message:
	Replaced ImportExpr with PRIMITIVE_USE CallExpr and simplified code.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp build.cpp expr.cpp 
	                      primitive.cpp view.cpp 
	chapel/compiler/include/: baseAST.h expr.h primitive.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp runInterpreter.cpp 

---------------------------------------------------------------------------

07/06/06 16:04:54 -- deitz

Log message:
	Unified resolveType function with typeInfo function, removing
	resolveType and simplifying.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

07/07/06 08:43:54 -- deitz

Log message:
	Removed LiteralType which has not been necessary for a long time,
	since instantiated functions ceased to be visible.
	
	Added logic in function resolution to favor param instantiated
	arguments over non-param instantiated arguments.  See
	test/functions/deitz/test_lit_int1.chpl for an example.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h symbol.h type.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

07/07/06 08:47:50 -- deitz

Log message:
	Removed SumType, dead code.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp type.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: filesToAST.cpp runInterpreter.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_standard.chpl 
	chapel/test/types/type_variables/jplevyak/: where-2.chpl 
Removed files:
	chapel/modules/standard/: _chpl_closure.chpl 

---------------------------------------------------------------------------

07/07/06 08:49:26 -- deitz

Log message:
	Updated .goods.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/07/06 10:33:41 -- deitz

Log message:
	Removed support for default values on user-defined types and fixed
	support of user-defined types.  This fixes
	
	  trivial/bradc/defaultinit2
	  trivial/shannon/readWriteUserType
	  types/typedefs/bradc/localType
	  types/typedefs/bradc/localType2
	
	To mark this change, I changed trivial/bradc/defaultinit2 to an error
	test.

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/: REGRESSIONS 
	chapel/test/trivial/bradc/: defaultinit2.good 
	chapel/test/types/typedefs/bradc/: localType.chpl localType.good 
	                                   localType2.chpl 
	                                   localType2.good 
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.chpl 

---------------------------------------------------------------------------

07/07/06 10:44:36 -- deitz

Log message:
	Updated error message on test and removed regression.

Modified files:
	chapel/test/: REGRESSIONS 
	chapel/test/classes/bradc/: callMethodOnClass.good 

---------------------------------------------------------------------------

07/07/06 10:47:50 -- deitz

Log message:
	Updated error message on test and removed regression.

Modified files:
	chapel/test/: REGRESSIONS 
	chapel/test/classes/deitz/: test_method_call2.good 

---------------------------------------------------------------------------

07/07/06 11:00:52 -- deitz

Log message:
	Updated output on test and removed regression.

Modified files:
	chapel/test/: REGRESSIONS 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation4.good 

---------------------------------------------------------------------------

07/07/06 11:27:41 -- deitz

Log message:
	Fixed and updated error message for the following tests that no longer
	work due to semantic changes:
	
	  flowanalysis/recursion/rec_obj-1
	  flowanalysis/recursion/rec_obj-2
	  flowanalysis/recursion/rec_obj-3
	
	Allow casts to "non-types" because C(int) is both a type and an
	expression.
	
	Disable printing of candidate functions for 'this' function and
	updated error message for a test due to following change:
	
	Removed code to ignore class types as in
	
	  var c : C;
	
	It is now treated as
	
	  move(c, nil:C)
	
	Enabled inlining of functions that are not code generated because of
	prelude/_chpl_base issue.
	
	Updated a bunch of tests that referred to classes that did not declare
	the types of all their fields without specifying a field type.  See
	test/types/type_variables/deitz/test_clone_class1a.chpl as an example.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl prelude.chpl 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/bradc/: weirdinit.good 
	chapel/test/flowanalysis/recursion/: rec_obj-1.good 
	                                     rec_obj-2.good 
	                                     rec_obj-3.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1.chpl 
	                                         test_clone_class1a.chpl 
	                                         test_clone_class2.chpl 
	                                         test_clone_class2b.chpl 
	                                         test_clone_class3.chpl 
	                                         test_clone_class4.chpl 
	                                         test_clone_class5.chpl 
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_clone_class-1.chpl 

---------------------------------------------------------------------------

07/07/06 11:29:37 -- deitz

Log message:
	Updated .goods.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/07/06 13:47:01 -- deitz

Log message:
	Refactored hack_array code and removed function of that name.

Modified files:
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 

---------------------------------------------------------------------------

07/07/06 13:50:42 -- deitz

Log message:
	Removed two .future files for tests that are now working.

Removed files:
	chapel/test/reductions/bradc/manual/: threeuses.future 
	chapel/test/trivial/deitz/: test_integer_method2.future 

---------------------------------------------------------------------------

07/07/06 14:35:12 -- deitz

Log message:
	Changed handling of UserTypes so that they are removed during scope
	resolution.  Simplified code.  Fixed classes/deitz/test_type_in_class2
	and removed a future.

Modified files:
	chapel/compiler/passes/: codegen.cpp functionResolution.cpp 
	                         normalize.cpp scopeResolve.cpp 
	chapel/test/: REGRESSIONS 
Removed files:
	chapel/test/types/tuple/bradc/: returnTuple2.future 

---------------------------------------------------------------------------

07/07/06 15:07:04 -- deitz

Log message:
	Fixed .chpl or .good and removed 6 .future files.

Modified files:
	chapel/test/arrays/deitz/: test_array_assign3.good 
	                           test_array_of_string2.good 
	chapel/test/distributions/bradc/foundations/: blockdist3.chpl 
	chapel/test/functions/deitz/: test_bad_function.good 
	chapel/test/trivial/preston/: tuple.chpl 
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_assign3.future 
	                           test_array_of_string2.future 
	chapel/test/distributions/bradc/foundations/: blockdist3.future 
	chapel/test/functions/deitz/: test_bad_function.future 
	chapel/test/trivial/preston/: tuple.future 
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.future 

---------------------------------------------------------------------------

07/07/06 15:17:23 -- deitz

Log message:
	Removed .future, made output an error, and improved error message.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/types/type_variables/deitz/: test_infer_class1.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_infer_class1.future 

---------------------------------------------------------------------------

07/07/06 15:46:52 -- deitz

Log message:
	Specialized error messages to unresolved assignment function.
	
	Updated error message output and removed three .futures.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/trivial/bradc/: undefinedfn.good undefinedfn2.good 
	chapel/test/types/seq/bradc/: emptySeq3.good 
Removed files:
	chapel/test/trivial/bradc/: undefinedfn.future 
	                            undefinedfn2.future 
	chapel/test/types/seq/bradc/: emptySeq3.future 

---------------------------------------------------------------------------

07/07/06 15:50:42 -- deitz

Log message:
	Removed support for "like" and added support for ".type" on a
	variable.
	
	Removed two tests that don't make sense and updated one test.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/types/like/deitz/: test_like1.chpl 
Removed files:
	chapel/test/types/like/jplevyak/: like-1.chpl like-1.good 
	                                  like-2.chpl like-2.future 
	                                  like-2.good 

---------------------------------------------------------------------------

07/07/06 16:33:15 -- deitz

Log message:
	Enabled scalar promotion on arithmetic sequences, removed one .future,
	and added a new test case that writes (1..9)**2.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
Added files:
	chapel/test/types/seq/deitz/: test_promote_aseq.chpl 
	                              test_promote_aseq.good 
Removed files:
	chapel/test/arrays/deitz/: test_scalar_promote9.future 

---------------------------------------------------------------------------

07/07/06 16:38:43 -- deitz

Log message:
	Removed two old unnecessary .futures.

Removed files:
	chapel/test/arrays/deitz/: test_domain1.chpl test_domain1.future 
	                           test_domain1.good 
	chapel/test/arrays/jplevyak/: test_domain2-error.chpl 
	                              test_domain2-error.future 
	                              test_domain2-error.good 

---------------------------------------------------------------------------

07/07/06 17:19:53 -- waynew

Log message:
	Tests for threaded begin block implementation.

Added files:
	chapel/test/parallel/begin/waynew/: simple.chpl simple.compopts 
	                                    simple.good simple.prediff 
	                                    simple2.chpl 
	                                    simple2.compopts 
	                                    simple2.good simple3.chpl 
	                                    simple3.compopts 
	                                    simple3.good simple3.prediff 

---------------------------------------------------------------------------

07/07/06 17:47:27 -- waynew

Log message:
	- Added last bits of implementation for threaded begin implementation,
	  reference counting to heap allocated vars for begin blocks.  Begin
	  should now work.
	- Added function actual_to_formal (in astutil.cpp) to map actual to
	  formal Symbol
	- Removed some IF1 code + minor name changes.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp primitive.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/ifa/: cg.cpp fa.cpp if1.cpp if1.h 
	                      make_cast_code.cpp num.cpp num.h sym.cpp 
	chapel/compiler/include/: astutil.h primitive.h symbol.h type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: codegen.cpp interpreter_ops.h 
	                         normalize.cpp parallel.cpp 
	                         runInterpreter.cpp 
	chapel/runtime/include/: chplmem.h chplthreads.h 
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

07/10/06 09:50:58 -- deitz

Log message:
	Fixed a minor bug in function resolution error messages.
	
	Removed one .future.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/arrays/bradc/: enumarray.chpl 
	chapel/test/types/tuple/deitz/: test_htuple_of_tuple.good 
Removed files:
	chapel/test/types/tuple/deitz/: test_htuple_of_tuple.future 

---------------------------------------------------------------------------

07/10/06 10:00:24 -- deitz

Log message:
	Added support for a standard function "ascii" that returns the ascii
	number of the first character in a string.  The spec talks about a
	function called "code" that would do this on whatever alphabet the
	string is defined over, but without alphabets, the function "ascii"
	seems appropriate to me.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chpltypes.h 
Added files:
	chapel/test/types/string/deitz/: test_string_ascii.chpl 
	                                 test_string_ascii.good 

---------------------------------------------------------------------------

07/10/06 10:58:49 -- bocchino

Log message:
	nil seems to evaluate to true; added a future to correct this.

Added files:
	chapel/test/classes/bocchino/: test_nil_is_false.chpl 
	                               test_nil_is_false.future 
	                               test_nil_is_false.good 

---------------------------------------------------------------------------

07/10/06 13:39:25 -- deitz

Log message:
	Unified tuples.  There is now a single implementation of the tuple
	record that is instantiated as needed.  This checkin removes the
	htuple record.  Indexing into a tuple using a non-parameter value is
	currently inefficient.  Indexing into a tuple with differently typed
	values is an error but may not be caught and is not checked.

Modified files:
	chapel/compiler/include/: runtime.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: filesToAST.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_htuple.chpl 

---------------------------------------------------------------------------

07/10/06 16:23:03 -- deitz

Log message:
	Cleaned up the arithmetic array indexing function to allow as many
	integers as its rank, rather than any number.
	
	Fixed a bug in instantiating functions with variable arguments.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

07/10/06 17:59:54 -- deitz

Log message:
	Added the ability to destructure tuples in place using syntax like
	(...x) where x is a tuple.  This is useful for passing arguments along
	to another function without the tuple wrapping them as in:
	
	  fun foo(x : int...?k) {
	    bar((...x));
	  }
	
	where a variable number of ints are passed to foo and wrapped in a
	tuple, and then unwrapped and passed to bar.
	
	Apologies for the syntax.  Better ideas?

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/functions/deitz/varargs/: test_varargs10.chpl 
	                                      test_varargs10.good 
	                                      test_varargs11.chpl 
	                                      test_varargs11.good 

---------------------------------------------------------------------------

07/10/06 18:01:24 -- deitz

Log message:
	Added two working tests I had lying around in one of my workspaces.

Added files:
	chapel/test/types/tuple/deitz/: test_class_tuple2.chpl 
	                                test_class_tuple2.good 
	                                test_tuple_function2.chpl 
	                                test_tuple_function2.good 

---------------------------------------------------------------------------

07/11/06 12:19:45 -- waynew

Log message:
	Fixed how html links to definitions are generated. It is no longer
	dependent on html output generation order within a pass/file, but is
	now the correct way of using the defPoint link in the AST to obtain
	the module name (i.e., rather than the AST traversal order, use the AST).

Modified files:
	chapel/compiler/AST/: view.cpp 

---------------------------------------------------------------------------

07/11/06 16:32:08 -- waynew

Log message:
	Bug fix.  While it really does not matter at this point of Chapel app.
	execution, main thread should mutex_unlock after being signaled.

Modified files:
	chapel/runtime/src/: chplthreads.c 

---------------------------------------------------------------------------

07/14/06 14:24:45 -- bradc

Log message:
	Program to print out lyrics to "99 bottles of beer on the wall",
	as specified by (and submitted to) http://www.99-bottles-of-beer.net/
	A brief look makes it appear that this may be the first modern
	parallel programming language to solve the problem.  :)

Added files:
	chapel/test/trivial/bradc/: beer.chpl beer.good 

---------------------------------------------------------------------------

07/14/06 17:11:46 -- bradc

Log message:
	Fixed a bug in which config consts were not available for
	setting on the command-line flag (exposed by the 99 bottles
	of beer program, and fixed with great help from Steve in
	the airport).  Added a test to guard this feature in the
	future.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Added files:
	chapel/test/execflags/bradc/: configconst.chpl 
	                              configconst.execopts 
	                              configconst.good 

---------------------------------------------------------------------------

07/17/06 09:38:34 -- deitz

Log message:
	Reworked array and domain implementation to use root array and domain
	classes that are instantiated by the type of the implementation stored
	in a field.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/memory/shannon/: jacobi.good memstatPrint.good 
	                             printFinalMemStat.good 
	                             printMemTable.good 
	                             printMemTable2.good 

---------------------------------------------------------------------------

07/17/06 10:43:29 -- deitz

Log message:
	Fixed support for ?t as a formal argument's type, removed 5 futures
	and one bad test.  This fixes one regression.  Updated REGRESSIONS.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp scopeResolve.cpp 
	chapel/test/: REGRESSIONS 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function3.future 
	                                         test_typevar_function4.future 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo6.future 
	chapel/test/types/type_variables/jplevyak/: 
	                                            question_mark-1.future 
	                                            type_variables-1.chpl 
	                                            type_variables-1.future 
	                                            type_variables-1.good 
	                                            where-4.future 

---------------------------------------------------------------------------

07/17/06 10:55:45 -- deitz

Log message:
	Removed .future and made test check the error message.

Modified files:
	chapel/test/trivial/deitz/: test_infer1.good 
Removed files:
	chapel/test/trivial/deitz/: test_infer1.future 

---------------------------------------------------------------------------

07/17/06 11:11:46 -- deitz

Log message:
	Test works correctly, removed .future and updated .good.

Modified files:
	chapel/test/classes/shannon/: overloadedFunction.good 
Removed files:
	chapel/test/classes/shannon/: overloadedFunction.future 

---------------------------------------------------------------------------

07/17/06 11:16:41 -- deitz

Log message:
	Removed unused UserType::underlyingType and some type utility functions.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

07/17/06 11:49:12 -- waynew

Log message:
	Simple test cases for testing complex primitive type.

Added files:
	chapel/test/trivial/waynew/: simple.chpl simple.good 

---------------------------------------------------------------------------

07/17/06 11:50:26 -- deitz

Log message:
	Removed .future and updated .good.

Modified files:
	chapel/test/arrays/bradc/: noelemtype.good 
Removed files:
	chapel/test/arrays/bradc/: noelemtype.future 

---------------------------------------------------------------------------

07/17/06 15:15:36 -- deitz

Log message:
	Removed an unused conditional in normalize and fixed two .goods.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/arrays/bradc/: noelemtype.good 
	chapel/test/classes/shannon/: overloadedFunction.good 

---------------------------------------------------------------------------

07/17/06 15:21:17 -- deitz

Log message:
	Made "nil" 0 and removed one .future.

Modified files:
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
Removed files:
	chapel/test/classes/bocchino/: test_nil_is_false.future 

---------------------------------------------------------------------------

07/17/06 16:54:24 -- waynew

Log message:
	(re)Disabled these tests as current strategy for read(complex) is broken.

Added files:
	chapel/test/trivial/shannon/: readWriteComplex.future 
	                              readWriteComplexLineno.future 
	                              readWriteUserType.future 
	chapel/test/types/file/: freadComplex.future 

---------------------------------------------------------------------------

07/18/06 08:32:12 -- deitz

Log message:
	Removed .future for passing test due to tuple unification.

Removed files:
	chapel/test/types/tuple/deitz/: test_htuple9.future 

---------------------------------------------------------------------------

07/18/06 08:55:10 -- deitz

Log message:
	Removed bulk of code from prelude placing functionality in other
	standard modules and in primitives.  One major difficulty with the
	prelude is a chicken/egg problem where core features of the
	language/implementation are defined in _chpl_base and not available in
	the prelude, whereas all other standard modules use one another.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: primitive.h symbol.h type.h 
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 
	                          _chpl_file.chpl prelude.chpl 
	chapel/runtime/include/: chplio.h chpltypes.h 
	chapel/runtime/src/: chplio.c chpltypes.c 

---------------------------------------------------------------------------

07/18/06 08:56:26 -- deitz

Log message:
	Updated .goods.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/18/06 10:12:42 -- deitz

Log message:
	Removed prelude.
	
	Next step: remove all usage of the "no codegen" pragma.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: runtime.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         filesToAST.cpp normalize.cpp 
	                         parallel.cpp runInterpreter.cpp 
	chapel/modules/standard/: _chpl_file.chpl _chpl_standard.chpl 
	chapel/runtime/include/: chplio.h chpltypes.h stdchpl.h 
	chapel/runtime/src/: chplio.c main.c 
Removed files:
	chapel/modules/standard/: prelude.chpl 

---------------------------------------------------------------------------

07/18/06 10:18:56 -- deitz

Log message:
	Fixed .good and removed .future.

Modified files:
	chapel/test/classes/deitz/infer/: infer_field10.good 
Removed files:
	chapel/test/classes/deitz/infer/: infer_field10.future 

---------------------------------------------------------------------------

07/18/06 10:26:26 -- deitz

Log message:
	Update .goods.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/18/06 11:06:00 -- waynew

Log message:
	Temporary future before complex checkin.  Will remove after fixing reading of
	complex type.

Added files:
	chapel/test/trivial/shannon/: readWriteComplexFail1.future 

---------------------------------------------------------------------------

07/18/06 11:08:21 -- deitz

Log message:
	Fixed record equality/inequality functions.  Note that record equality
	is not symmetric if one record has a different number of fields than
	the other.
	
	Updated two tests and removed their .futures.
	
	Fixed .good for infer_field10.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/test/classes/deitz/infer/: infer_field10.good 
	chapel/test/classes/jplevyak/: record_equal-1.chpl 
	                               record_equal-1.good 
	                               record_equal-2.chpl 
	                               record_equal-2.good 
Removed files:
	chapel/test/classes/jplevyak/: record_equal-1.future 
	                               record_equal-2.future 

---------------------------------------------------------------------------

07/18/06 11:08:24 -- waynew

Log message:
	Implementation of complex primitive type.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp 
	                      symbol.cpp type.cpp view.cpp 
	chapel/compiler/ifa/: cg.cpp fa.cpp if1.cpp if1.h 
	                      make_cast_code.cpp num.cpp num.h sym.cpp 
	chapel/compiler/include/: expr.h symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: interpreter_ops.h normalize.cpp 
	                         parallel.cpp runInterpreter.cpp 
	chapel/make/: Makefile.linux64 
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/runtime/include/: chplio.h chpltypes.h config.h 
	chapel/runtime/src/: chplmem_tests.c chpltypes.c config.c 

---------------------------------------------------------------------------

07/18/06 11:13:36 -- deitz

Log message:
	Futurized regressions for further work.

Modified files:
	chapel/test/: REGRESSIONS 
Added files:
	chapel/test/arrays/deitz/: test_class_array1.future 
	chapel/test/arrays/jplevyak/: simple-2.future 
	chapel/test/classes/deitz/inherit/: test_inherit4.future 
	chapel/test/classes/jplevyak/: inherit-2.future 
	chapel/test/functions/deitz/: test_visible2.future 
	chapel/test/functions/deitz/nested/: test_nested_global1.future 
	chapel/test/functions/jplevyak/: introduce-dispatch-1.future 
	                                 zeroarity-bound-error-2.future 
	chapel/test/functions/jplevyak/scoping/: visibility-1.future 
	chapel/test/memory/shannon/: memmaxExceedsLineno2.future 

---------------------------------------------------------------------------

07/18/06 11:38:31 -- deitz

Log message:
	Removed .futures for tests that are not tested.

Removed files:
	chapel/test/flowanalysis/newast/: enumarray.future 
	                                  formatoutput.future 
	chapel/test/interpreter/jplevyak/: test_enum1.future 

---------------------------------------------------------------------------

07/18/06 12:01:13 -- deitz

Log message:
	Removed "incomplete" test.

Removed files:
	chapel/test/domains/roxana/classes/: test_domain_class.good 
	                                     test_domain_class.chpl 
	                                     test_domain_class.future 

---------------------------------------------------------------------------

07/18/06 12:03:57 -- deitz

Log message:
	Reworked "return normalization" to allow a coercion from the type of
	an expression returned to the return type specified using overloaded
	assignment if the return type is specified.
	
	Removed two .futures.
	
	Fixed var functions like array indexing and getters to not specify the
	return type.

Modified files:
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
Removed files:
	chapel/test/functions/bradc/: typefn2.future 
	chapel/test/functions/jplevyak/: type_var_fun-1.future 

---------------------------------------------------------------------------

07/18/06 12:05:51 -- deitz

Log message:
	Updated .goods.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/18/06 12:14:52 -- waynew

Log message:
	Fixed i/o read(complex), where complex=primitive type now. Re-enabled tests
	that exercise this feature.

Modified files:
	chapel/modules/standard/: _chpl_complex.chpl _chpl_file.chpl 
Removed files:
	chapel/test/trivial/shannon/: readWriteComplex.future 
	                              readWriteComplexFail1.future 
	                              readWriteComplexLineno.future 
	                              readWriteUserType.future 
	chapel/test/types/file/: freadComplex.future 

---------------------------------------------------------------------------

07/18/06 12:15:49 -- deitz

Log message:
	Removed .future for advanced Jacobi test case.

Modified files:
	chapel/test/arrays/deitz/: jacobi5.chpl 
Removed files:
	chapel/test/arrays/deitz/: jacobi5.future 

---------------------------------------------------------------------------

07/18/06 12:21:09 -- deitz

Log message:
	Removed tests that incorrectly used internal _ddata array.

Removed files:
	chapel/test/domains/roxana/helper/: test_hash_table1a.chpl 
	                                    test_hash_table1a.future 
	                                    test_hash_table1a.good 
	                                    test_hash_table1.chpl 
	                                    test_hash_table1.future 
	                                    test_hash_table1.good 
	                                    test_hash_table2.chpl 
	                                    test_hash_table2.good 
	                                    test_hash_table3.chpl 
	                                    test_hash_table3.good 
	                                    test_hash_table.chpl 
	                                    test_hash_table.future 
	                                    test_hash_table.good 

---------------------------------------------------------------------------

07/18/06 12:22:50 -- deitz

Log message:
	Implemented a first cut of index types, updated index type tests with
	new array and domain syntax, and removed 8 .futures (98 left!).

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	                          _chpl_indefinite.chpl 
	chapel/test/domains/bradc/: domainindex.chpl 
	chapel/test/domains/roxana/index/: test_index_assign.chpl 
	                                   test_index_expr.chpl 
	                                   test_index_expr.good 
	                                   test_index_expr0.chpl 
	                                   test_index_expr0.good 
	                                   test_index_expr1.good 
	                                   test_index_expr2.chpl 
	                                   test_index_expr2.good 
Removed files:
	chapel/test/domains/bradc/: domainindex.future writeIndex.future 
	                            writeIndex2.future 
	chapel/test/domains/roxana/index/: test_index_assign.future 
	                                   test_index_expr.future 
	                                   test_index_expr0.future 
	                                   test_index_expr1.future 
	                                   test_index_expr2.future 

---------------------------------------------------------------------------

07/18/06 14:13:07 -- deitz

Log message:
	Removed old compiler options for these tests.

Removed files:
	chapel/test/domains/roxana/index/: test_index_expr0.compopts 
	                                   test_index_expr2.compopts 

---------------------------------------------------------------------------

07/18/06 14:15:19 -- deitz

Log message:
	Implemented array _copy function enabling array inference as in
	
	   var B = A;
	
	where A is an array.  Added a test.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_copy_array.chpl 
	                           test_copy_array.good 

---------------------------------------------------------------------------

07/18/06 14:38:25 -- waynew

Log message:
	SunOS-specific good file. Error message is different "Bad file number"
	instead of "Bad file descriptor" as on Linux.

Added files:
	chapel/test/types/file/: fwriteIntFailed.sunos.good 

---------------------------------------------------------------------------

07/18/06 14:54:48 -- deitz

Log message:
	Implemented array _init function enabling array types as in
	
	  var B = A.type;
	
	where A is an array.  Added a test.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_init.chpl 
	                           test_array_init.good 

---------------------------------------------------------------------------

07/18/06 15:26:55 -- deitz

Log message:
	Cleanup array initialization slightly.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chplrt.h 

---------------------------------------------------------------------------

07/18/06 15:28:02 -- deitz

Log message:
	Update .goods.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/18/06 15:31:36 -- deitz

Log message:
	Remove .future and update .good to capture the error message.

Modified files:
	chapel/test/types/type_variables/deitz/: test_infer_class2.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_infer_class2.future 

---------------------------------------------------------------------------

07/18/06 15:38:20 -- deitz

Log message:
	Marked .futures waiting for union implementation as union futures.

Modified files:
	chapel/test/classes/bradc/: writeunion-workaround.future 
	                            writeunion.future 
	chapel/test/classes/bradc/unions/: assign.future assign1a.future 
	                                   stringunion.future 
	                                   twounions.future 
	                                   writeunion.future 
	chapel/test/classes/deitz/: test_union1.future 
	                            test_union2.future 
	                            test_union3.future 
	                            test_union4.future 
	                            test_union_method1.future 
	                            test_union_method2.future 
	                            test_union_method3.future 
	chapel/test/classes/jplevyak/: union_type_hierarchy-1.future 
	                               union_type_hierarchy-2.future 
	                               union_type_hierarchy-3-error.future 

---------------------------------------------------------------------------

07/18/06 15:47:15 -- deitz

Log message:
	Improved error message for bad field assignments and removed a .future.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1b.chpl 
	                                         test_clone_class1b.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1b.future 

---------------------------------------------------------------------------

07/18/06 15:51:14 -- deitz

Log message:
	Fixed test and removed .future.

Modified files:
	chapel/test/trivial/bradc/entrypoint/: wrongmain.chpl 
Removed files:
	chapel/test/trivial/bradc/entrypoint/: wrongmain.future 

---------------------------------------------------------------------------

07/18/06 15:53:04 -- deitz

Log message:
	Fixed domain declaration syntax and removed .future.

Modified files:
	chapel/test/reductions/bradc/manual/: promote.chpl 
Removed files:
	chapel/test/reductions/bradc/manual/: promote.future 

---------------------------------------------------------------------------

07/18/06 16:07:09 -- deitz

Log message:
	Updated .good and removed .future.  This may require more work to get
	right.  The test skips over a variable declaration using a goto.

Modified files:
	chapel/test/trivial/deitz/: test_goto1.good 
Removed files:
	chapel/test/trivial/deitz/: test_goto1.future 

---------------------------------------------------------------------------

07/18/06 16:20:19 -- deitz

Log message:
	Added an error message to tell the user not to write an empty sequence
	literal as in (/ /) because the element type of this sequence is
	invalid.  Updated .good of a test and removed .future.  Fixed tuple
	syntax in another test, but did not remove .future.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/types/seq/bradc/: emptySeq.good 
	chapel/test/types/tuple/deitz/: test_param_tuple_arg1-error.chpl 
Removed files:
	chapel/test/types/seq/bradc/: emptySeq.future 

---------------------------------------------------------------------------

07/18/06 16:36:46 -- deitz

Log message:
	Remove .future of working test, record equality fix.

Removed files:
	chapel/test/functions/deitz/: test_operator_overloading2.future 

---------------------------------------------------------------------------

07/18/06 16:49:09 -- deitz

Log message:
	Fixed assignment mismatch error message.
	
	Fixed formatoutput test which would work if scalar promotion of arrays
	created an array or sequences printed out similarly.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/trivial/bradc/: formatoutput.chpl 

---------------------------------------------------------------------------

07/18/06 16:53:12 -- deitz

Log message:
	Fix .good for emptySeq test to use non-developer message.
	
	Reenabled checking to make sure that the initializer to an enumerated
	type is a compile-time constant.  Removed .future.

Modified files:
	chapel/compiler/passes/: semanticChecks.cpp 
	chapel/test/types/seq/bradc/: emptySeq.good 
Removed files:
	chapel/test/types/enum/deitz/: test_enum6.future 

---------------------------------------------------------------------------

07/19/06 12:29:43 -- deitz

Log message:
	Removed typeParents vector as it is equivalent to instantiatedFrom.
	Added dispatchChildren vector to contain the reverse pointers as
	dispatchParents.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 

---------------------------------------------------------------------------

07/19/06 17:06:58 -- deitz

Log message:
	Made it so that specifying a return type on a function does not change
	the semantics of the function to use overloaded assignment to a
	temporary.  Reworked a few tests.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/test/functions/bradc/: typefn2.good 
	chapel/test/functions/jplevyak/: type_var_fun-1.chpl 
Added files:
	chapel/test/functions/bradc/: typefn2a.chpl typefn2a.good 

---------------------------------------------------------------------------

07/19/06 17:07:36 -- deitz

Log message:
	Updated .goods

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/19/06 17:10:59 -- deitz

Log message:
	Updated .goods.

Modified files:
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 

---------------------------------------------------------------------------

07/20/06 09:36:29 -- deitz

Log message:
	Implemented a first cut of an unoptimized form of dynamic dispatch on
	the 'this' argument to a method.  This will not work in the case where
	a generic type inherits from a class.
	
	Added primitives SETCID and GETCID to access a dynamic id on class
	types to determine what the dynamic type of a class is.
	
	Implemented a coercion wrapper cache to avoid making multiple coercion
	wrappers that are the same.  This uses the same cache code as
	instantiation.
	
	Added a test case to test dynamic dispatch.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: primitive.h symbol.h 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 
Added files:
	chapel/test/classes/deitz/: test_dynamic_dispatch.chpl 
	                            test_dynamic_dispatch.good 

---------------------------------------------------------------------------

07/20/06 09:37:19 -- deitz

Log message:
	Updated .goods

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/20/06 09:38:28 -- deitz

Log message:
	Updated output for test_inherit4 since write should no longer
	dynamically dispatch.  Unless we reimplement write as a method and
	implement write and writeln functions to call the methods.  Removed
	.future.
	
	Added a new test test_inherit4b to do the dispatch via a method called
	print that calls write on 'this'.

Modified files:
	chapel/test/classes/deitz/inherit/: test_inherit4.good 
Added files:
	chapel/test/classes/deitz/inherit/: test_inherit4b.chpl 
	                                    test_inherit4b.good 
Removed files:
	chapel/test/classes/deitz/inherit/: test_inherit4.future 

---------------------------------------------------------------------------

07/20/06 10:40:26 -- deitz

Log message:
	Removed interpreter code base in preparation for simplifications to
	function resolution.  A new interpreter should be made on the lowered
	representation for simplicity and in conjunction with the runtime,
	implementation resources allowing.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/include/: driver.h primitive.h 
	chapel/compiler/main/: driver.cpp passlist.h runpasses.cpp 
	chapel/compiler/passes/: Makefile.share 
Removed files:
	chapel/compiler/passes/: interpreter.todo interpreter_ops.h 
	                         runInterpreter.cpp runInterpreter.h 

---------------------------------------------------------------------------

07/20/06 14:24:54 -- deitz

Log message:
	Moved used files from ifa/ into the other compiler directories.  Most
	of this involved moving things back to their original location.
	
	The only thing in ifa/ that is still used is num.h, prim.h,
	prim_data.h, prim_data_incs.h and their .cpp files.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp view.cpp 
	chapel/compiler/adt/: Makefile.share list.cpp map.cpp vec.cpp 
	chapel/compiler/ifa/: Makefile.share 
	chapel/compiler/include/: chpl.h driver.h expr.h stmt.h symbol.h 
	                          type.h 
	chapel/compiler/main/: Makefile.share driver.cpp runpasses.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
Added files:
	chapel/compiler/include/: arg.h list.h log.h map.h vec.h 
	chapel/compiler/main/: arg.cpp log.cpp 
Removed files:
	chapel/compiler/ifa/: arg.cpp arg.h list.cpp list.h log.cpp 
	                      log.h map.cpp map.h vec.cpp vec.h 
	chapel/compiler/include/: chpl_log.h 

---------------------------------------------------------------------------

07/20/06 15:05:17 -- deitz

Log message:
	Minor refactor of function resolution.  Removal of simplify nested
	MOVE primitives which is no longer necessary because = is not special
	cased during resolution.

Modified files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/compiler/include/: astutil.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

07/20/06 16:04:55 -- deitz

Log message:
	Minor refactoring of function resolution.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

07/20/06 19:13:35 -- deitz

Log message:
	Improved function resolution handling of formal types to use the same
	call resolution mechanism as elsewhere.  In previous attempts to make
	this happen, I ran into infinite recursions that I couldn't get rid of
	in the case of recursively defined types, e.g., a linked list node.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/21/06 08:41:08 -- deitz

Log message:
	Removed some dead code in function resolution as a result of the last change.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

07/21/06 08:44:40 -- deitz

Log message:
	Updated .goods.

Modified files:
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
	                             printMemTable2.good 

---------------------------------------------------------------------------

07/21/06 09:12:41 -- deitz

Log message:
	Improved error messages by making the name of instantiated types more
	descriptive.  Instead of just being the name of the generic class, the
	name has the types in parentheses, e.g., seq(int).
	
	Added a test case.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/types/seq/bradc/: emptySeq3.good 
Added files:
	chapel/test/types/type_variables/deitz/: test_error1.chpl 
	                                         test_error1.good 

---------------------------------------------------------------------------

07/21/06 09:51:23 -- deitz

Log message:
	Fixed resolution of formal types so that the functions are resolved
	which is important for array and domain types.  This almost gets the
	array in class test working, program output fails.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

07/21/06 10:59:52 -- deitz

Log message:
	Added special code to a constructor of a class or record that contains
	an array field that initializes that field and then assigns the value
	of an argument to that field if one is specified.  For all other
	types, the argument that is passed in initializes the field.  Arrays
	are different because they need to be initialized with a domain even
	though the domain is not part of the type.
	
	This allows classes with array fields.  Removed two futures.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_class_array1.future 
	chapel/test/arrays/jplevyak/: simple-2.future 

---------------------------------------------------------------------------

07/21/06 11:34:26 -- waynew

Log message:
	A few checkin's.
	 - Changed parser to have a sync type.  New format is "var i: sync int".
	   Previous was "sync var i: int".
	 - Initial implementation of sync vars on scalars. Writing (default
	   wait empty, leave full) seems to work. Default read (wait full,
	   leave empty) is current done through the function read_leave_empty.
	   Need to automagically transform reads to this call and implement
	   the other read + writes.
	 - Enabled thread-enabling passes by default. Removed .compopts files
	   in parallel tests.
	 - Enabled copyPropagation pass with thread-passes.
	 - First test case (parallel/sync/waynew/simple1.chpl) to test sync
	   vars.  Currently brokend due to copyPropagation pass.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: primitive.h symbol.h type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: codegen.cpp copy_propagation.cpp 
	                         parallel.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
	chapel/runtime/include/: chplthreads.h stdchpl.h 
	chapel/runtime/src/: chplthreads.c 
Added files:
	chapel/test/parallel/sync/waynew/: simple1.chpl simple1.good 
Removed files:
	chapel/test/parallel/begin/waynew/: simple.compopts 
	                                    simple2.compopts 
	                                    simple3.compopts 
	chapel/test/parallel/cobegin/waynew/: cobegin.simple0.compopts 
	                                      cobegin.simple1.compopts 
	                                      cobegin.simple2.compopts 
	                                      depend.compopts 
	                                      locals.compopts 
	                                      while.compopts 
	                                      writeln.compopts 

---------------------------------------------------------------------------

07/21/06 14:13:43 -- deitz

Log message:
	Fixed parallel tests that were breaking in the copyPropagation pass by
	disabling removal of spurious BlockStmts that had BLOCK_BEGIN or
	BLOCK_COBEGIN tags.
	
	Added Symbol::isCompilerTemp bool to mark a symbol as being inserted
	by the compiler.  Currently, inline temps and call temps are marked.
	To make copy propagation even more conservative in the presence of
	threading, only compiler temps are made available for substitution.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: copy_propagation.cpp 
	                         inlineFunctions.cpp normalize.cpp 

---------------------------------------------------------------------------

07/21/06 14:34:07 -- deitz

Log message:
	Updated test and removed .future.  This test has an array in a class
	but also used some stopgap syntax that is no longer necessary or
	legal.

Modified files:
	chapel/test/functions/jplevyak/: call_mapping-1.chpl 
	                                 call_mapping-1.good 

---------------------------------------------------------------------------

07/21/06 14:34:25 -- deitz

Log message:
	Removed .future.

Removed files:
	chapel/test/functions/jplevyak/: call_mapping-1.future 

---------------------------------------------------------------------------

07/21/06 14:38:25 -- deitz

Log message:
	Added a simple test as a future
	
	  var y1 = 2;
	  writeln(y1);
	
	which fails because y1 is redefined.  What's special about y1?

Added files:
	chapel/test/trivial/deitz/: test_y1.chpl test_y1.future 
	                            test_y1.good 

---------------------------------------------------------------------------

07/21/06 14:41:02 -- deitz

Log message:
	Added error checking to guard against casts to generic types
	(incomplete types?).  Updated a .good and removed a .future.  Added a
	"fixed" test of the future that works.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/test/classes/jplevyak/: inherit-2.good 
Added files:
	chapel/test/classes/jplevyak/: inherit-2-fixed.chpl 
	                               inherit-2-fixed.good 
Removed files:
	chapel/test/classes/jplevyak/: inherit-2.future 

---------------------------------------------------------------------------

07/21/06 14:57:03 -- deitz

Log message:
	Fixed test.  It used old indexing into a domain function rather than
	just doing it, D.range(2) instead of D(2).
	
	Updated .good which had the extra linefeed after writing an array.

Modified files:
	chapel/test/demo/review_060130/: iterators.chpl iterators.good 
Removed files:
	chapel/test/demo/review_060130/: iterators.future 

---------------------------------------------------------------------------

07/21/06 16:58:27 -- deitz

Log message:
	Added working test of tuple of array type.

Added files:
	chapel/test/arrays/deitz/: test_tuple_of_array.chpl 
	                           test_tuple_of_array.good 

---------------------------------------------------------------------------

07/21/06 17:01:49 -- deitz

Log message:
	Added y1 to list of C names for which mangling is required.  Removed .future.

Modified files:
	chapel/compiler/passes/: codegen.cpp 
Removed files:
	chapel/test/trivial/deitz/: test_y1.future 

---------------------------------------------------------------------------

07/24/06 11:18:20 -- deitz

Log message:
	Categorized and updated all .future files.  Removed two.

Modified files:
	chapel/test/arrays/bradc/: domarr2.future enumarray.future 
	chapel/test/arrays/deitz/: test_array_in_class.good 
	                           test_array_init2.future 
	chapel/test/arrays/jplevyak/: ranks-1.future simple-4.chpl 
	                              simple-4.future simple-4.good 
	chapel/test/classes/bradc/: badred.future 
	chapel/test/classes/shannon/: inoutClassDataMember.future 
	chapel/test/distributions/bradc/foundations/: blockdist1.chpl 
	                                              blockdist1.future 
	                                              blockdist2.chpl 
	                                              blockdist2.future 
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVarDefaultValue.future 
	chapel/test/functions/bradc/: arrayArg-explicit.chpl 
	                              intents-arrays.future 
	                              intents-arrays2.future 
	                              intents-arrays2a.future 
	                              nameDefaultParamInOut.future 
	chapel/test/functions/deitz/: test_return1.future 
	                              test_visible1.future 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator2a.chpl 
	                                        test_instantiate_iterator2a.future 
	chapel/test/functions/jplevyak/: intent-8-error.future 
	                                 intent-9.future 
	                                 introduce-dispatch-1.future 
	                                 introduce-dispatch-1.good 
	                                 zeroarity-bound-error-2.future 
	chapel/test/functions/jplevyak/scoping/: visibility-4.future 
	chapel/test/memory/shannon/: memmaxExceedsLineno.future 
	                             memmaxExceedsLineno2.future 
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-construct.chpl 
	                                      threeclasstypes-construct.future 
	                                      threeclasstypes-manual.chpl 
	                                      threeclasstypes-manual.future 
	                                      threeclasstypes.chpl 
	                                      threeclasstypes.future 
	                                      usetype.chpl 
	                                      usetype.future 
	                                      usetype2.chpl 
	                                      usetype2.future 
	chapel/test/trivial/bradc/: formatoutput.future 
	chapel/test/trivial/deitz/: test_goto2.future 
	chapel/test/trivial/jplevyak/: destruct-arg-1.future 
	chapel/test/trivial/shannon/: condReturn.future 
	                              condReturn2.future 
	                              condReturn3.future 
	                              readWriteComplexTuple.future 
	chapel/test/types/file/: freadToClassDataMember.future 
	chapel/test/types/seq/bradc/: length.modify.future 
	chapel/test/types/tuple/deitz/: 
	                                test_param_tuple_arg1-error.future 
	chapel/test/types/type_variables/deitz/: 
	                                         inherit_instantiate2.future 
	                                         inherit_instantiate4.future 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo7.future 
	chapel/test/types/type_variables/jplevyak/: 
	                                            type_variable-2.future 
	                                            typevar_constraint-1.future 
	                                            typevar_use-1.future 
	                                            where-1.future 
	                                            where-3-error.future 
	                                            where-3.future 
Removed files:
	chapel/test/arrays/deitz/: test_array_in_class.future 
	chapel/test/functions/bradc/: arrayArg-explicit.future 

---------------------------------------------------------------------------

07/25/06 08:51:43 -- deitz

Log message:
	Simplified implementation of write variable argument functions by
	using the new feature of passing variable arguments.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/25/06 14:30:37 -- deitz

Log message:
	Added a list of unimplemented features for prioritization discussion.

Added files:
	chapel/compiler/: UnimplementedFeatures 

---------------------------------------------------------------------------

07/25/06 16:03:05 -- deitz

Log message:
	Made methodTokenType and setterTokenType primitive types.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: runtime.h symbol.h type.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         filesToAST.cpp normalize.cpp 
	                         scopeResolve.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

07/26/06 14:55:51 -- deitz

Log message:
	Made copy propagation more aggressive on compiler temporaries and
	removed goto-label pairs where the goto immediately preceded the label
	(a common idiom in our generated code).  This decreases the number of
	lines of code in the Jacobi test's main function from 442 to 258.
	
	Expect REGRESSION because integer literal is printed out without INT64
	wrapper and then we try to shift it 64 bits.  Enough temporaries have
	been removed that this shows up as a warning in the generated C code.
	The temporary made it a 64 bit previously.

Modified files:
	chapel/compiler/passes/: copy_propagation.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

07/26/06 16:24:10 -- deitz

Log message:
	Updated .goods

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/26/06 16:39:42 -- deitz

Log message:
	A script for stripping the generated code of unique ID to enable
	comparing the generated code produced by two different compilers.

Added files:
	chapel/util/: clean_gen_code 

---------------------------------------------------------------------------

07/26/06 16:45:47 -- waynew

Log message:
	Steve's latest most-specific resolve call algorithm.  Does not use
	comparisons with instantiatedFrom, unless one is dtAny and the other is not.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

07/26/06 16:59:53 -- deitz

Log message:
	Marked return temporaries as compiler temporaries so that they are
	removed by copy propagation when possible.  Made it so that
	isCompilerTemp flag is preserved on a symbol copy.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

07/26/06 17:22:58 -- deitz

Log message:
	Added test of a class instantiated by a record.

Added files:
	chapel/test/types/type_variables/deitz/: test_class_record.chpl 
	                                         test_class_record.good 

---------------------------------------------------------------------------

07/26/06 17:46:55 -- waynew

Log message:
	Created a new test (simple0) and modified the other (simple1) to
	read a sync var without using the explicit read_wait_full_leave_empty
	function.

Modified files:
	chapel/test/parallel/sync/waynew/: simple1.chpl 
Added files:
	chapel/test/parallel/sync/waynew/: simple0.chpl simple0.good 

---------------------------------------------------------------------------

07/26/06 18:04:45 -- waynew

Log message:
	Simple2.chpl to test for wait_empty for default writes to sync var.
	Minor cleanup of simple1.chpl.

Modified files:
	chapel/test/parallel/sync/waynew/: simple1.chpl 
Added files:
	chapel/test/parallel/sync/waynew/: simple2.chpl simple2.good 

---------------------------------------------------------------------------

07/26/06 18:06:33 -- waynew

Log message:
	Initial version of what we want for the coercion of sync var reads.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

07/28/06 15:17:05 -- deitz

Log message:
	Interesting ambiguous call checked in as a future to semantic.

Added files:
	chapel/test/types/seq/deitz/: test_seq_index1.chpl 
	                              test_seq_index1.future 
	                              test_seq_index1.good 

---------------------------------------------------------------------------

07/28/06 17:07:23 -- deitz

Log message:
	Fixed a corner case in the coercion wrapper code to handle coercion
	wrappers on methods without parentheses.  These are only created when
	the 'this' argument is coerced which can only happen with the sync
	coercion.
	
	Unified out of bounds error messages for sequences and arrays.
	
	Simplified sequence indexing function and added support for indexing
	into a sequence with a negative integer.  If sequence indexing started
	at zero, we could generate the palindrome with scalar promotion on an
	arithmetic sequence, s(-length..length), but it doesn't.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
	chapel/test/arrays/deitz/: test_bounds1.good test_bounds2.good 
	chapel/test/trivial/mjoyner/seq/: seq_index1.good 
Added files:
	chapel/test/types/seq/deitz/: test_seq_reverseindex1.chpl 
	                              test_seq_reverseindex1.good 

---------------------------------------------------------------------------

07/28/06 17:08:18 -- deitz

Log message:
	Add class that contains a field that is a record simple test.

Added files:
	chapel/test/classes/deitz/: test_class_of_record.chpl 
	                            test_class_of_record.good 

---------------------------------------------------------------------------

07/31/06 11:24:25 -- deitz

Log message:
	Added support for querying a type variable or type alias component of
	a class.  Example: x.t where x's type is a class instantiated over t.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
Removed files:
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-manual.future 
	                                      usetype.future 
	chapel/test/types/type_variables/jplevyak/: 
	                                            type_variable-2.future 
	                                            typevar_use-1.future 

---------------------------------------------------------------------------

07/31/06 14:39:48 -- deitz

Log message:
	Unified the two mechanisms for instantiating the types of functions
	and classes used to handle the two cases:
	
	  fun foo(x) { ... }
	
	and
	
	  fun foo(type t, x: t) { ... }
	
	For better or worse, we now handle these the same way.  Added
	Symbol::isTypeVariable to keep track of the case that a variable is
	only taking a value in order to query its type as in the second case
	above where the variable t is only used for its type.  Post-resolution
	this code needs to be removed where possible.  It is a guess that for
	array types we will need to keep the value since the domain is not
	part of the type.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp 
	                      symbol.cpp type.cpp view.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/flowanalysis/recursion/: rec_obj-1.good 
	                                     rec_obj-2.good 
	                                     rec_obj-3.good 
	chapel/test/types/type_variables/deitz/: 
	                                         inherit_instantiate.chpl 
	chapel/test/types/type_variables/jplevyak/: construct-1.good 

---------------------------------------------------------------------------

07/31/06 14:59:59 -- deitz

Log message:
	Updated .goods

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

07/31/06 15:09:02 -- deitz

Log message:
	Removed unused MetaType subsumed by Symbol::isTypeVariable in last change.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp build.cpp expr.cpp 
	                      primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: codegen.cpp functionResolution.cpp 
	                         normalize.cpp 

---------------------------------------------------------------------------

07/31/06 15:43:00 -- deitz

Log message:
	Removed unused VariableType, a result from the last change's
	unification, and INTENT_TYPE except during parsing.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/passes/: cleanup.cpp codegen.cpp 
	                         functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

07/31/06 17:10:36 -- deitz

Log message:
	Removed a few unused fields in types and symbols.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 

---------------------------------------------------------------------------

07/31/06 17:12:03 -- deitz

Log message:
	Removed unused field ArgSymbol::genericSymbol.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: normalize.cpp scopeResolve.cpp 

---------------------------------------------------------------------------

08/01/06 09:10:15 -- deitz

Log message:
	Removed fields Type::genericSymbols and FnSymbol::genericSymbols in
	favor of Type::isGeneric and FnSymbol::isGeneric.

Modified files:
	chapel/compiler/AST/: symscope.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 

---------------------------------------------------------------------------

08/01/06 09:27:41 -- deitz

Log message:
	Removed inconsistently used field isUnresolved in favor of more
	consistently used UnresolvedSymbol.

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp view.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp scopeResolve.cpp 

---------------------------------------------------------------------------

08/01/06 12:39:20 -- deitz

Log message:
	Updated access to array's element type to be A.elt_type.  Removed .future.

Modified files:
	chapel/test/reductions/bradc/manual/: usetype2.chpl 
Removed files:
	chapel/test/reductions/bradc/manual/: usetype2.future 

---------------------------------------------------------------------------

08/01/06 12:55:01 -- deitz

Log message:
	Removed some unused functions.
	
	Changed object and value into primitive types.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	                         functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

08/01/06 15:00:40 -- bradc

Log message:
	Fixed a bug in the nightly regression testing system in which
	the number of tests that existed/passed was no longer being
	correctly updated each night.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/01/06 15:43:15 -- deitz

Log message:
	Added debug function ast(long id) to return the BaseAST* of a given id.

Modified files:
	chapel/compiler/include/: view.h 
	chapel/compiler/AST/: view.cpp 

---------------------------------------------------------------------------

08/01/06 16:02:10 -- deitz

Log message:
	Enabled where clauses on simple type expressions and removed two futures.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/types/type_variables/jplevyak/: where-1.chpl 
	                                            where-3-error.good 
Added files:
	chapel/test/types/type_variables/deitz/: where-1.chpl 
	                                         where-1.good 
Removed files:
	chapel/test/types/type_variables/jplevyak/: where-3-error.future 
	                                            where-3.future 

---------------------------------------------------------------------------

08/01/06 16:45:40 -- waynew

Log message:
	Removes from the valgrind output a warning that "Valgrind's
	pthread_attr_destroy does nothing".

Added files:
	chapel/test/parallel/sync/waynew/: PREDIFF 

---------------------------------------------------------------------------

08/01/06 16:49:02 -- deitz

Log message:
	Added where clause test on type comparisons and logical or.

Added files:
	chapel/test/types/type_variables/deitz/: where-2.chpl 
	                                         where-2.good 

---------------------------------------------------------------------------

08/01/06 16:50:05 -- deitz

Log message:
	Overloaded cast to mean "is subtype of" in the where clause, added
	handling of is subtype primitive in parameter folding, changed/fixed
	one test, and removed its .future.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	chapel/test/types/type_variables/jplevyak/: 
	                                            typevar_constraint-1.chpl 
Removed files:
	chapel/test/types/type_variables/jplevyak/: 
	                                            typevar_constraint-1.future 

---------------------------------------------------------------------------

08/01/06 16:53:13 -- deitz

Log message:
	Added a sequence indexed by a sequence test case.  It works so we can
	cross that off with zero effort.

Added files:
	chapel/test/types/seq/deitz/: test_seq_index2.chpl 
	                              test_seq_index2.good 

---------------------------------------------------------------------------

08/01/06 17:03:53 -- deitz

Log message:
	Sorted.

Modified files:
	chapel/compiler/: UnimplementedFeatures 

---------------------------------------------------------------------------

08/01/06 17:14:29 -- bradc

Log message:
	Checked in a future version of the 99 bottles of beer
	program which I meant to check in with the original.
	Our submitted version had a known bug workaround due
	to a default value seemingly not being used.  This
	check-in changes beer.chpl to be the version that
	we'd like to work (futurized) and copies the working
	beer.chpl into beer-submitted.chpl, to make sure that
	our submitted solution doesn't slip.

Modified files:
	chapel/test/trivial/bradc/: beer.chpl 
Added files:
	chapel/test/trivial/bradc/: beer-submitted.chpl 
	                            beer-submitted.good beer.future 

---------------------------------------------------------------------------

08/01/06 17:15:25 -- bradc

Log message:
	A few updates to the emacs font-lock file for Chapel,
	based on recent syntax changes.

Modified files:
	chapel/etc/emacs/21.4/: font-lock.el 

---------------------------------------------------------------------------

08/01/06 17:20:24 -- bradc

Log message:
	Some jacobi bug fixes that have been sitting around in my
	directory for awhile (maybe since the ORNL HPLS team visit?)

Modified files:
	chapel/test/studies/jacobi/bradc/: jacobi-play-brad.chpl 
	chapel/test/studies/jacobi/deitz/: jacobi2.chpl 

---------------------------------------------------------------------------

08/02/06 09:23:30 -- deitz

Log message:
	Added another where test case.

Added files:
	chapel/test/types/type_variables/deitz/: where-3.chpl 
	                                         where-3.good 

---------------------------------------------------------------------------

08/02/06 09:33:10 -- deitz

Log message:
	Removed dead clone callback code.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

08/02/06 10:30:34 -- deitz

Log message:
	Added .future to capture idea that type of formal argument should come
	from the default expression if a type is not provided.

Added files:
	chapel/test/functions/deitz/: test_default_type.chpl 
	                              test_default_type.future 
	                              test_default_type.good 

---------------------------------------------------------------------------

08/02/06 10:35:33 -- deitz

Log message:
	Fixed bug in determination of generic substitutions.  It was
	previously done over the actuals.  It is now done over the formals to
	allow the default expression to instantiate.  Removed a .future.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
Removed files:
	chapel/test/trivial/bradc/: beer.future 

---------------------------------------------------------------------------

08/02/06 10:36:11 -- deitz

Log message:
	Reenabled folding of nested type definitions during parameter folding
	(not just during function resolution) to handle case of the where
	expression that looks like, for example, "where x.elt_type == int" and
	removed one .future.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Removed files:
	chapel/test/types/type_variables/jplevyak/: where-1.future 

---------------------------------------------------------------------------

08/02/06 11:22:32 -- deitz

Log message:
	Removed special handling of the # operator which worked to prepend or
	append only on integers or strings.  It now works in the general case
	and is not special-cased by the compiler.
	
	Fixed a bug in where expression evaluation in which the where
	expression was evaluated on generic functions in the case where a
	generic function was not completely instantiated.
	
	Updated list of unimplemented features, marking four high-priority
	items as done.

Modified files:
	chapel/compiler/: UnimplementedFeatures 
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
Added files:
	chapel/test/types/seq/deitz/: test_seq_record2.chpl 
	                              test_seq_record2.good 

---------------------------------------------------------------------------

08/02/06 11:26:13 -- bradc

Log message:
	Fixed nightly token counting script to stop looking for
	*.chpl files in the parser directory, as there are none,
	and this causes the count to incorrectly be "0" for the
	Chapel modules and such.

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

08/02/06 11:28:37 -- deitz

Log message:
	Added .future fibonacci sync test program.

Added files:
	chapel/test/parallel/sync/deitz/: test_sync1.chpl 
	                                  test_sync1.future 
	                                  test_sync1.good 

---------------------------------------------------------------------------

08/02/06 11:31:15 -- deitz

Log message:
	Added a second future that tries a begin on a single statement but
	results in a syntax error.

Added files:
	chapel/test/parallel/sync/deitz/: test_sync2.chpl 
	                                  test_sync2.future 
	                                  test_sync2.good 

---------------------------------------------------------------------------

08/02/06 11:50:51 -- bradc

Log message:
	Added a future in which loop bounds set using a uint fail:
	
	  config const n: uint = 10;
	
	  for i in 1..n ...

Added files:
	chapel/test/trivial/bradc/: uintloop.chpl uintloop.future 
	                            uintloop.good 

---------------------------------------------------------------------------

08/02/06 12:26:47 -- bradc

Log message:
	Added some tests regarding the scoping of local variables in
	a while loop -- as expected, using the variable in the
	conditional of a while { ... } loop fails.  Using the variable
	in the conditional of a do { ... } while loop also fails,
	however.  In past meetings, we've discussed supporting this
	behavior.  If we decide not to, the .good can be updated and
	the .future removed.

Added files:
	chapel/test/trivial/bradc/: whilescope.chpl whilescope.future 
	                            whilescope.good whilescope2.chpl 
	                            whilescope2.good 

---------------------------------------------------------------------------

08/02/06 12:29:15 -- bradc

Log message:
	Added my own fibonacci computation engine using a cobegin that
	creates three tasks: one to "compute" the 1st argument, one to
	"compute" the 2nd argument, and the 3rd to compute the results.
	sync vars are used to keep these tasks in sync.  Current
	implementation works, but uses a lot of cruft to make sure that
	we don't re-read or re-write a sync variable multiple times (in
	particular, I find myself shadowing sync variables with local
	copies of the values in a bunch of places).

Added files:
	chapel/test/parallel/sync/bradc/: fib_sync.chpl fib_sync.good 

---------------------------------------------------------------------------

08/02/06 12:47:29 -- bradc

Log message:
	Added a test to check that uninitialized variables are
	empty by default and that initialized variables are
	full by default.

Added files:
	chapel/test/parallel/sync/bradc/: .cvsignore sync_init.chpl 
	                                  sync_init.good 

---------------------------------------------------------------------------

08/02/06 14:38:42 -- deitz

Log message:
	Added support for indexing into a sequence of sequences of ... with a
	tuple such that the first element in the tuple indexes into the first
	sequence, the second into the second, ...  Also added support for
	indexing into a sequence of sequences of ... using variable arguments.
	Added a test case.
	
	Fixed a bug in the tuple expansion resolution code in which the tuple
	indexing call was resolved but the function was not.
	
	Fixed a bug in the tuplex expansion resolution code in which the tuple
	was an ArgSymbol not a VarSymbol.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
Added files:
	chapel/test/types/seq/deitz/: test_seq_index3.chpl 
	                              test_seq_index3.good 

---------------------------------------------------------------------------

08/02/06 14:44:12 -- deitz

Log message:
	Added a couple tests I have lying around.

Added files:
	chapel/test/types/type_variables/deitz/: construct-1b.chpl 
	                                         construct-1b.good 
	                                         test_recurse.chpl 
	                                         test_recurse.good 

---------------------------------------------------------------------------

08/02/06 15:58:24 -- deitz

Log message:
	Removed TypeSymbol::definition which is identical to TypeSymbol::type
	due to the recent removal of MetaType.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp 
	                      symbol.cpp symscope.cpp view.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp functionResolution.cpp 
	                         normalize.cpp scopeResolve.cpp 
	                         semanticChecks.cpp verify.cpp 

---------------------------------------------------------------------------

08/02/06 16:59:26 -- deitz

Log message:
	Fixed do...while block scope so that the condition expression is in
	the scope of the block.
	
	Added support for specifying a generic domain type at the formal
	argument level so that a formal argument can be specified as being
	some type of domain as in
	
	  fun foo(d: domain)
	
	Added three domain argument tests that all work.  Two tests test
	explicit domain types, one test tests generic domain types.

Modified files:
	chapel/compiler/: UnimplementedFeatures 
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/test/trivial/bradc/: whilescope.good 
Added files:
	chapel/test/arrays/deitz/: test_domain_arg1.chpl 
	                           test_domain_arg1.good 
	                           test_domain_arg2.chpl 
	                           test_domain_arg2.good 
	                           test_domain_arg3.chpl 
	                           test_domain_arg3.good 
Removed files:
	chapel/test/trivial/bradc/: whilescope.future 

---------------------------------------------------------------------------

08/02/06 18:34:19 -- waynew

Log message:
	Tests identity primitives.

Added files:
	chapel/test/trivial/waynew/: identity.chpl identity.good 

---------------------------------------------------------------------------

08/02/06 18:36:02 -- waynew

Log message:
	Test min/max value primitives.

Added files:
	chapel/test/trivial/waynew/: mintest.chpl mintest.good 
	                             maxtest.chpl maxtest.good 

---------------------------------------------------------------------------

08/02/06 18:37:58 -- waynew

Log message:
	Test min, max, sum, and product reductions on int, uint, and float.

Added files:
	chapel/test/trivial/waynew/: reductions.chpl reductions.good 

---------------------------------------------------------------------------

08/02/06 18:38:27 -- waynew

Log message:
	Test logical AND and OR reductions on bool.

Added files:
	chapel/test/trivial/waynew/: lreductions.chpl lreductions.good 

---------------------------------------------------------------------------

08/02/06 19:10:52 -- waynew

Log message:
	Added prod, land, lor, (need lxor op for lxor), band, bor, and bxor
	reductions. Names to be changed later.
	
	Added min, max, and identity primitives for prod, bit-wise(and, or, xor),
	and logical (and, or, xor) for types.  Not sure that latter are will be used
	yet.
	
	Added _size primitive on types.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp type.cpp 
	chapel/compiler/include/: primitive.h type.h 
	chapel/modules/standard/: _chpl_base.chpl _chpl_seq.chpl 
	chapel/runtime/include/: chpltypes.h stdchpl.h 

---------------------------------------------------------------------------

08/03/06 11:50:04 -- waynew

Log message:
	Modified reduction classes to use identity functions on elt_type
	rather than using a conditional to set the initial value.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

08/03/06 13:20:55 -- deitz

Log message:
	Added support for calling functions with square brackets instead of
	parentheses and for scalar promoting such function calls to use cross
	product semantics.

Modified files:
	chapel/compiler/: UnimplementedFeatures 
	chapel/compiler/AST/: build.cpp expr.cpp symbol.cpp 
	chapel/compiler/include/: build.h expr.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

08/03/06 13:26:45 -- deitz

Log message:
	Added two tests of square bracket functions and cross products.  The
	second is vaguely interesting.

Added files:
	chapel/test/functions/deitz/: test_square1.chpl 
	                              test_square1.good 
	                              test_square2.chpl 
	                              test_square2.good 

---------------------------------------------------------------------------

08/03/06 13:30:52 -- deitz

Log message:
	Superficial change to test.

Modified files:
	chapel/test/functions/deitz/: test_square2.chpl 

---------------------------------------------------------------------------

08/03/06 14:13:39 -- deitz

Log message:
	Implemented support for declaring multiple variables with a shared
	type and/or initializer expression using back propagation of the type
	and/or initializer expression.  Added a test case.

Modified files:
	chapel/compiler/: UnimplementedFeatures 
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_var_decl_shared1.chpl 
	                            test_var_decl_shared1.good 

---------------------------------------------------------------------------

08/03/06 14:52:22 -- deitz

Log message:
	Simplification of formal type resolution code.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

08/03/06 15:17:05 -- deitz

Log message:
	Removed one call to hack_resolve_types from normalize and moved
	another to a new location in preparation for removing it.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

08/03/06 15:17:42 -- deitz

Log message:
	Removed a small chunk of dead code in normalize.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

08/03/06 15:38:31 -- waynew

Log message:
	Fixed _min primitive on float types to return the most negative number.
	
	Removed _size primitive.
	
	Fixed .good file.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/test/trivial/waynew/: mintest.good 

---------------------------------------------------------------------------

08/03/06 15:47:04 -- bradc

Log message:
	Fixed bug with specifying "." as the --savec current directory.
	The problem was in the copy of the binary performed by the
	Makefile.  While I had prevented against cases where the source
	and the destination were the same string (e.g. cp a.out a.out),
	I had not protected against the case where they were different
	strings representing the same file (e.g., cp a.out ./a.out).
	To get around this, I now always munge the name of the output
	file written to the "temp" directory (e.g., the above examples
	would convert to cp a.out.tmp a.out and cp a.out.tmp ./a.out
	respectively).  Also, now remove the temp binary from the "temp"
	directory, since the --savec flag really only requests that the
	C code be saved.

Modified files:
	chapel/compiler/util/: files.cpp 
	chapel/runtime/etc/: Makefile.include 
Removed files:
	chapel/test/compflags/waynew/: saveccurrdir.future 

---------------------------------------------------------------------------

08/03/06 16:14:34 -- waynew

Log message:
	Changed sync function names to more reasonable names at Brad's suggestion.
	My plan of using really long names to force a suggestion worked.  The
	new temporary names are:
	 = (same) - wait empty, leave full
	 writeXF (new) - no wait on F/E, leave full
	 readFE (new) - wait full, leave empty
	 readFF (new) - wait full, leave full
	 readXX (new) - no wait, leave F/E unchanged

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

08/03/06 16:31:36 -- deitz

Log message:
	Simplified tag_generic, removed half of hack_resolve_types and moved
	it even lower in normalize in preparation for removal.

Modified files:
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 

---------------------------------------------------------------------------

08/03/06 16:48:55 -- waynew

Log message:
	Temporary fix to serialize write/writeln's so that we get fewer cases of
	nondeterministic output. Basically, use a sync bool as a lock to
	writes to stdout.  A slightly more elegant solution requires a small fix
	to sync vars.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 

---------------------------------------------------------------------------

08/03/06 17:03:17 -- deitz

Log message:
	Commented out a couple lines of code in instantiation.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

08/03/06 17:27:24 -- bradc

Log message:
	Made the _cid field of a class an _int64 rather than an
	int in order to improve portability across architectures/
	compilers with a different default int size.  (while an
	_int32 probably would have been plenty sufficient, it
	started to play into different compilers' notions of how
	fields should be aligned in a record for the tests in
	question).
	
	This should fix the following tests for the cygwin platform.
	I also simplified the tests to remove copies, strings, and
	other things whose sizes might vary over time.  This makes
	the tests test less stuff about memory allocation, but should
	continue to allow them to test the mechanisms in question,
	and be more portable across platforms and time (which I think
	is the more important thing at this point).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/test/memory/shannon/: memstatPrint.chpl memstatPrint.good 
	                             printFinalMemStat.chpl 
	                             printFinalMemStat.good 
	                             printMemTable2.chpl 
	                             printMemTable2.good 

---------------------------------------------------------------------------

08/04/06 10:10:31 -- deitz

Log message:
	Some cleanup to instantiate_generic function.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

08/04/06 11:00:22 -- bradc

Log message:
	Updated a few futures that still aren't working.

Modified files:
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-construct.future 
	                                      threeclasstypes.chpl 
	                                      threeclasstypes.future 

---------------------------------------------------------------------------

08/04/06 11:00:39 -- deitz

Log message:
	Some more cleanup to instantiate_generic function.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

08/04/06 11:09:03 -- deitz

Log message:
	Fixed last night regressions with minor change to two fwrite functions

Modified files:
	chapel/modules/standard/: _chpl_sparse.chpl 
	chapel/test/sparse/deitz/: test_sparse1.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/type_variables/deitz/: test_stack.chpl 

---------------------------------------------------------------------------

08/04/06 13:44:07 -- deitz

Log message:
	Another minor cleanup to instantiate_generic

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

08/04/06 14:55:28 -- deitz

Log message:
	Cleaned instantiate_generic more.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

08/04/06 15:14:05 -- deitz

Log message:
	Added a flag --unoptimized that currently disables copy propagation
	and the other low-level optimizations in that pass.  Fixed a bug in
	forall expression handling to get it to work.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: copy_propagation.cpp semanticChecks.cpp 

---------------------------------------------------------------------------

08/04/06 16:33:51 -- bradc

Log message:
	Put "quad" on the C reserved words list to avoid
	conflicts on SunOS.  This should make the Sun
	nightly regressions match the linux regressions.
	
	Also, put a comment in the REGRESSIONS file to
	capture why int8-64b is failing.

Modified files:
	chapel/compiler/passes/: codegen.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

08/07/06 09:47:42 -- deitz

Log message:
	Removed FnSymbol::typeBinding which is unnecessary and was used only
	during cleanup.  Made some resulting simplifications.
	
	Futurized: trivial/deitz/test_integer_method3.chpl
	Is something like
	  int(32).print()
	legal?
	
	Fixed hack of complex to make complex methods pass by reference during
	code generation.  Previously the type was looked at during
	normalization and it was fortunate coincidence that some but not all
	of the formal types were known.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp normalize.cpp parallel.cpp 
	                         scopeResolve.cpp 
	chapel/test/trivial/deitz/: test_integer_method3.chpl 
Added files:
	chapel/test/trivial/deitz/: test_integer_method3.future 

---------------------------------------------------------------------------

08/07/06 09:47:47 -- deitz

Log message:
	updated .goods

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/07/06 10:53:34 -- deitz

Log message:
	Added support for predicate for-expressions where the if-expression is
	immediately nested in the for-expression as in
	
	   ... [i in 1..10] if i % 2 == 0 then i**2 ...
	
	I believe this is the only type of predicate expression we support since
	
	   ... [i in 1..10] i + if ...
	
	does not make sense.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/test/npb/ft/: ft-serial-working1.chpl 
Added files:
	chapel/test/trivial/deitz/: test_predicate.chpl 
	                            test_predicate.good 

---------------------------------------------------------------------------

08/07/06 11:09:27 -- deitz

Log message:
	Added complex _init function and enabled arrays of complex numbers.
	Added a test case.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_complex.chpl 
	                           test_array_complex.good 

---------------------------------------------------------------------------

08/07/06 11:23:55 -- deitz

Log message:
	Added environment variable CHPL_UNOPTIMIZED for --unoptimized flag for
	use by new cron job primarily.
	
	Updated UnimplementedFeatures list to cross off predicate expressions.

Modified files:
	chapel/compiler/: UnimplementedFeatures 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

08/07/06 11:33:38 -- deitz

Log message:
	Added performance test (currently tested only for correctness).  It is
	a loop to initialize a 2D array.  After we stop allocating records, I
	can make it larger to comparse against the C program also checked in.
	The loop seems to take the vast majority of the 0.064 seconds compared
	to the 0 seconds of the C program.

Added files:
	chapel/test/performance/deitz/: test_for2d.c test_for2d.chpl 
	                                test_for2d.good 

---------------------------------------------------------------------------

08/08/06 08:57:37 -- deitz

Log message:
	Changed test program to iterate over a 128x128 array of integers 100
	times.  C time is 0.011 seconds, Chapel time is 0.587 seconds.

Modified files:
	chapel/test/performance/deitz/: test_for2d.c test_for2d.chpl 

---------------------------------------------------------------------------

08/08/06 09:56:22 -- deitz

Log message:
	Revised tests and timings:
	
	test_for2d.chpl = 1:44.33
	test_for2d.c    =     .02
	
	Using -O0 -g and 64-bit integers.

Modified files:
	chapel/test/performance/deitz/: test_for2d.c test_for2d.chpl 

---------------------------------------------------------------------------

08/08/06 10:59:17 -- waynew

Log message:
	Support for sync vars within a class.  In addition to the spec
	requirements, prompted by the need for a lock in the file class to
	serialize output in threaded applications.
	
	 - Added primitives to create/destroy mutexes and condition variables.
	 - Removed hack to initialize mutexes and condition vars via default value.
	 - Added "no default functions" pragma to avoid building default functions
	   for records.  Used by sync vars.
	 - Added initialize function for sync vars.
	 - Added _init and = functions for mutexes and conditon vars.
	 - Removed fwrite( file, _syncvar).  Not needed.  Sync var fwrites should
	   coerce correctly.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp type.cpp view.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 

---------------------------------------------------------------------------

08/08/06 12:10:33 -- deitz

Log message:
	Improved performance test dramatically by specifying that some loops
	in domain iteration and array indexing are parameter loops that should
	be unrolled.
	                          OLD      NEW
	        test_for2d.chpl = 1:44.33  3.10
	        test_for2d.c    =     .02   .02

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/: test_bounds1.good test_bounds2.good 

---------------------------------------------------------------------------

08/08/06 16:45:24 -- deitz

Log message:
	Renamed BaseAST::uses to BaseAST::modUses so that it doesn't conflict
	with Symbol::uses.

Modified files:
	chapel/compiler/AST/: symbol.cpp symscope.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

08/09/06 09:37:03 -- deitz

Log message:
	Updated .goods.

Modified files:
	chapel/test/performance/deitz/: test_for2d.good 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/09/06 11:18:44 -- deitz

Log message:
	Removed unused CallExpr::member, CallExpr::member_type, and
	CallExpr::member_offset.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

08/09/06 12:29:36 -- deitz

Log message:
	Removed unused ClassType::types vector.

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 

---------------------------------------------------------------------------

08/09/06 12:30:35 -- deitz

Log message:
	After resolution, changed field access primitives to contain a direct
	reference to the field symbol rather than a string literal.  They
	still indirect via a string literal prior to resolution.  Updated
	PRIMITIVE_{GET|SET}_MEMBER[_REF_TO] primitives.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: functionResolution.cpp parallel.cpp 

---------------------------------------------------------------------------

08/09/06 15:05:23 -- waynew

Log message:
	Added a sync var (writeLock) within the file class to serialize fwrites.
	Nested fwrite calls by the same thread should not deadlock now.
	 - fix for the type of the temp var used for the constructor wrapper call
	 - added a primitive to obtain the calling thread's id
	 - added isFull and writeXE sync var operations
	
	Set a couple inlining report .good files.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
	chapel/runtime/include/: chplthreads.h 
	chapel/runtime/src/: chplthreads.c 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/09/06 16:55:39 -- deitz

Log message:
	Modified ClassType to contain a AList<DefExpr> of fields rather than
	the declarationList AList<Stmt> and the Vec<Symbol> of fields to make
	it easier to handle during compilation.  Simplified lots of code.
	
	Added a stylized loop for_fields over the field symbols in class types
	similar to for_formals over the formal symbols in functions.  Or to
	loop backwards, use for_fields_backward.
	
	Removed ClassType::isPattern used for unexercised portion of parser to
	handle codes that I imagine would have looked something like
	   fun foo(x: int, (y: float, z: string)) ...
	and would have accepted a record with fields named y and z.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp primitive.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         parallel.cpp 

---------------------------------------------------------------------------

08/10/06 08:11:40 -- waynew

Log message:
	Might as well exercise the new per file class writeLock if I'm going to
	check it in (i.e., remove the older obsolete strategy).

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/10/06 11:31:17 -- waynew

Log message:
	Fix to remove a Chapel build compiler warning.

Modified files:
	chapel/runtime/src/: chplthreads.c 

---------------------------------------------------------------------------

08/10/06 13:26:52 -- waynew

Log message:
	Fix to remove a Valgrind-detected error.  Replaced instances of
	static cast with a dynamic_cast.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

08/10/06 14:24:59 -- waynew

Log message:
	Per file writeLock is now an uint.  Minor changes to _fwrite_lock and
	removed initial write to writeLock.  Changed inline report .good files as
	appropriate.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/11/06 09:33:22 -- deitz

Log message:
	Removed CallExpr::isAssign() which was used seldomly and incorrectly.
	
	Removed all cast hacks in the code generation of PRIMITIVE_MOVE.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

08/11/06 15:42:38 -- waynew

Log message:
	Moved previous reduction and logical reduction tests from the trivial
	directory to the reductions directory.  Also added a bit-wise reduction
	test.

Added files:
	chapel/test/reductions/waynew/: breductions.chpl 
	                                breductions.good 
	                                lreductions.chpl 
	                                lreductions.good reductions.chpl 
	                                reductions.good 
Removed files:
	chapel/test/trivial/waynew/: lreductions.chpl lreductions.good 
	                             reductions.chpl reductions.good 

---------------------------------------------------------------------------

08/11/06 17:13:49 -- bradc

Log message:
	Checking in a bunch of .cvsignore files in the testing
	system to squelch *.tmp files from being listed in
	the output of cvs -nq update.

Added files:
	chapel/test/classes/bocchino/: .cvsignore 
	chapel/test/parallel/begin/waynew/: .cvsignore 
	chapel/test/parallel/cobegin/waynew/: .cvsignore 
	chapel/test/parallel/sync/deitz/: .cvsignore 
	chapel/test/parallel/sync/waynew/: .cvsignore 
	chapel/test/trivial/waynew/: .cvsignore 

---------------------------------------------------------------------------

08/11/06 17:39:45 -- bradc

Log message:
	Pruned out dead code from ifa/ subdirectory of the compiler
	and cleaned up its Makefiles.  The only remaining files in
	ifa/ are currently:
	
	  fail.cpp
	  num.cpp
	  num.h
	  prim_data.h
	
	Also added a new file to define "global" variables for IFA:
	
	  ifa_vars.cpp
	
	Further refactoring could move this code to other directories
	closer to where its used.  That's a separate step, though.

Modified files:
	./: DIRS 
	chapel/compiler/: Makefile Tasks 
	chapel/compiler/adt/: map.cpp vec.cpp 
	chapel/compiler/ifa/: Makefile Makefile.share fail.cpp num.cpp 
	                      num.h 
	chapel/compiler/include/: chpltypes.h log.h vec.h 
	chapel/compiler/main/: log.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/make/: Makefile.base 
Added files:
	chapel/compiler/ifa/: ifa_vars.cpp 
Removed files:
	chapel/compiler/ifa/: ast.cpp ast.h builtin.cpp builtin.h 
	                      builtin_symbols.h cdb.cpp cdb.h cfg.cpp 
	                      cg.cpp cg.h clone.cpp clone.h code.h 
	                      dead.cpp dead.h defs.h dom.cpp dom.h 
	                      fa.cpp fa.h fail.h fun.cpp fun.h graph.cpp 
	                      graph.h html.cpp html.h if1.cpp if1.h 
	                      ifa.cpp ifa.h inline.cpp inline.h loop.cpp 
	                      loop.h make_cast_code.cpp pattern.cpp 
	                      pattern.h pdb.cpp pdb.h pnode.cpp pnode.h 
	                      prim.cpp prim.h prim_data.cpp 
	                      prim_data.dat prim_data_incs.cpp 
	                      prim_data_incs.h region.cpp region.h 
	                      ssu.cpp ssu.h sym.cpp sym.h test_adt.cpp 
	                      timer.h var.cpp var.h 

---------------------------------------------------------------------------

08/11/06 17:46:53 -- waynew

Log message:
	Changed the syntax of sum, product, logical and, logical or, bit-wise
	and, bit-wise or, and bit-wise xor reductions to + reduce, * reduce, && reduce,
	|| reduce, & reduce, | reduce, and ^ reduce.  Also changed tests to match.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/arrays/deitz/: jacobi5.chpl 
	chapel/test/reductions/bradc/: sumreduce.chpl sumreduce2.chpl 
	chapel/test/reductions/waynew/: breductions.chpl 
	                                lreductions.chpl 
	                                lreductions.good reductions.chpl 
	                                reductions.good 
	chapel/test/types/seq/deitz/: test_reduce1.chpl 
Added files:
	chapel/test/reductions/waynew/: .cvsignore 

---------------------------------------------------------------------------

08/11/06 17:47:08 -- bradc

Log message:
	Last check-in removed the test/ directory from the
	build process.  This check-in removes all CVS files
	from the test directory.  It is now dead (though
	we'll have to wait until we move to subversion to
	remove it from our directories).

Removed files:
	chapel/compiler/test/: Makefile test_lib.cpp 

---------------------------------------------------------------------------

08/11/06 18:13:50 -- marybeth

Log message:
	This commit adds a blas subdirectory to the test/studies directory.
	This subdirectory will capture all of the serial and parallel blas
	studies done.
	
	One program is added:  saxpy_simple.chpl and its correct results:
	saxpy_simple.good.  This is a simple implementation since it does
	not include a function call to a saxpy routine.  Instead the program
	contains a simple saxpy-like loop.

Added files:
	chapel/test/studies/blas/marybeth/: saxpy_simple.chpl 
	                                    saxpy_simple.good 

---------------------------------------------------------------------------

08/14/06 09:51:55 -- deitz

Log message:
	Reenabled -t option by setting the file to "log/"+filename instead of
	log_dir which is no longer getting set correctly.  This change
	probably makes log_dir new dead ifa code, or we can set it.

Modified files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/main/: runpasses.cpp 

---------------------------------------------------------------------------

08/14/06 10:15:08 -- deitz

Log message:
	Test showing failing setter of setter strategy, illustrating the need
	for getters that return reference types.

Added files:
	chapel/test/arrays/deitz/: test_scalar_promote10.chpl 
	                           test_scalar_promote10.future 
	                           test_scalar_promote10.good 

---------------------------------------------------------------------------

08/14/06 10:29:08 -- waynew

Log message:
	Tests that use a sync var as a field within a class. Similar to simple0.chpl,
	simple1.chpl, and simple2.chpl.

Added files:
	chapel/test/parallel/sync/waynew/: class0.chpl class0.good 
	                                   class1.chpl class1.good 

---------------------------------------------------------------------------

08/14/06 11:13:30 -- waynew

Log message:
	Changed a cast that should remove a compiler-build warning that is
	preventing the build on Cygwin.

Modified files:
	chapel/runtime/src/: chplthreads.c 

---------------------------------------------------------------------------

08/14/06 11:51:02 -- deitz

Log message:
	Added simple tuple of tuple case.

Added files:
	chapel/test/types/tuple/deitz/: test_tuples5.chpl 
	                                test_tuples5.good 

---------------------------------------------------------------------------

08/14/06 11:53:31 -- deitz

Log message:
	Minor refactor of Symbol/VarSymbol::codegen

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

08/14/06 14:34:57 -- bradc

Log message:
	Added a simple test to check that the --html flag works.  It
	uses a PREDIFF script to grep log/index.html for its title
	line and make sure that it exists.  This is not a particularly
	deep test, but makes sure that the index file is created.

Added files:
	chapel/test/compflags/bradc/html/: .cvsignore PREDIFF 
	                                   testit.chpl testit.compopts 
	                                   testit.good 

---------------------------------------------------------------------------

08/14/06 14:37:43 -- bradc

Log message:
	Oops, forgot to have the test clean up the log/ directory
	to make sure it wasn't just re-using one from the previous
	run.

Added files:
	chapel/test/compflags/bradc/html/: CLEANFILES 

---------------------------------------------------------------------------

08/14/06 15:24:37 -- deitz

Log message:
	Implemented optimization scalar replacement of aggregates that works
	under an assumption of references as opposed to setters (which
	required the record reference semantics).  It is disabled by default
	and enabled with temporarily inverted flag --no-scalar-replacement.
	
	Implemented transform to change returned records into pass by
	reference records.
	
	Made Symbol::uses a vector rather than a pointer to a vector for
	convenience.
	
	Changed function resolution to favor a more normalized form for the
	resolved state of partial call applications.
	
	Swapped back expected output of
	test/types/type_variables/jplevyak/construct-1 due to reasonable
	change in semantic interpretation by the compiler.  What should it be?

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp 
	chapel/compiler/include/: driver.h symbol.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: codegen.cpp copy_propagation.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         semanticChecks.cpp 
	chapel/modules/standard/: _chpl_htuple.chpl 
	chapel/test/types/type_variables/jplevyak/: construct-1.good 

---------------------------------------------------------------------------

08/14/06 15:25:45 -- deitz

Log message:
	Updated .good of inline report tests.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/14/06 15:29:37 -- deitz

Log message:
	Added support for passing arrays to a function where the array
	specification contains no domain as in
	
	  fun foo(A: [] float) { ... }
	
	The current limitation is that this must be a top-level formal
	argument type.  The transformation makes this into
	
	  fun foo(A: _array) where A.elt_type == float { ... }
	
	Added two test cases.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
Added files:
	chapel/test/arrays/deitz/: test_array_arg1.chpl 
	                           test_array_arg1.good 
	                           test_array_arg2.chpl 
	                           test_array_arg2.good 

---------------------------------------------------------------------------

08/14/06 16:59:44 -- bradc

Log message:
	Re-enabled use of log dir, because the bug I introduced
	affected other ifa/ variables as well (of course, the
	fact that the non-initialization of these variables
	didn't cause any regressions might point to other dead
	code).  It still might be appropriate to remove the
	log_dir mechanism if we decide that it isn't worth
	supporting, but I wanted to get it working as it was
	previously before deciding whether to remove it or not.

Modified files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/ifa/: ifa_vars.cpp 
	chapel/compiler/main/: runpasses.cpp 

---------------------------------------------------------------------------

08/15/06 09:51:08 -- deitz

Log message:
	Added jacobi test of unoptimized flag.

Added files:
	chapel/test/arrays/deitz/: jacobi-unoptimized.chpl 
	                           jacobi-unoptimized.compopts 
	                           jacobi-unoptimized.good 

---------------------------------------------------------------------------

08/15/06 10:50:01 -- waynew

Log message:
	Split two tests.  There was no synchronization between the two tests.

Modified files:
	chapel/test/parallel/sync/waynew/: class1.chpl class1.good 
Added files:
	chapel/test/parallel/sync/waynew/: class2.chpl class2.good 

---------------------------------------------------------------------------

08/15/06 13:35:15 -- deitz

Log message:
	Added initial support for references in the implementation.  A symbol
	is a reference if Symbol::isReference is true.
	
	A symbol can be made a reference during function resolution if
	Symbol::canReference is true.  Such a symbol is turned into a
	reference if it captures the result of a call that returns a
	reference.  This is necessary to capture the result of var functions
	as a reference during function resolution.  The long-term plan is to
	introduce a reference type that will transparently handle this case.
	
	Added an optimizing pass cullOverReferences that changes
	Symbol::isReference to false if it does not need to be a reference.
	
	Added utility functions Expr::isRef() that returns true if the
	expression returns a reference or is a reference.
	
	Reworked actual_to_formal function to return an ArgSymbol and to use
	the for_formals loop.
	
	Simplified logic regarding array primitives.
	
	Note that the reference logic is overly complicated because code
	generation is overly complicated.  Code generation handles AST that
	cannot exist post-normalization and this should be simplified to
	handle only normalized code.
	
	Added Primitive::isReference which is true if the primitive returns a
	reference.
	
	Removed two futures regarding reading fields as in
	
	  read(x.a)
	
	which work now that x.a returns a reference since INOUT is implemented
	as pass by reference.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp primitive.cpp 
	                      stmt.cpp symbol.cpp type.cpp view.cpp 
	chapel/compiler/include/: astutil.h expr.h primitive.h symbol.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: Makefile.share 
	                         buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp copy_propagation.cpp 
	                         functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chplrt.h chpltypes.h 
	chapel/test/types/type_variables/deitz/: test_clone_class1b.good 
Added files:
	chapel/compiler/passes/: cullOverReferences.cpp 
Removed files:
	chapel/test/classes/shannon/: inoutClassDataMember.future 
	chapel/test/types/file/: freadToClassDataMember.future 

---------------------------------------------------------------------------

08/15/06 14:09:43 -- deitz

Log message:
	Changed keyword 'fun' to 'def' and updated modules and tests.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_complex.chpl _chpl_file.chpl 
	                          _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl _chpl_math.chpl 
	                          _chpl_seq.chpl _chpl_sparse.chpl 
	                          i.chpl 
	chapel/test/Share/: ambiguousclass.chpl arrayfun-1.chpl 
	                    class-2.chpl class-3.chpl destruct-1.chpl 
	                    funcall-1.chpl funcall-2.chpl funcall-3.chpl 
	                    intent-1.chpl intent-2.chpl intent-3.chpl 
	                    intent-4.chpl intent-5-error.chpl 
	                    intent-6-error.chpl intent-7-error.chpl 
	                    intent-8-error.chpl main-1.chpl 
	                    namedargs-1.chpl noinitdecl-4-error.chpl 
	                    union-3.chpl 
	chapel/test/arrays/deitz/: jacobi5.chpl test_array_arg1.chpl 
	                           test_array_arg2.chpl 
	                           test_array_class_trial1.chpl 
	                           test_array_class_trial2.chpl 
	                           test_array_class_trial3.chpl 
	                           test_array_class_trial4.chpl 
	                           test_array_class_trial4a.chpl 
	                           test_array_class_trial5.chpl 
	                           test_array_class_trial5a.chpl 
	                           test_array_class_trial5b.chpl 
	                           test_array_class_trial6.chpl 
	                           test_domain2.chpl test_domain3.chpl 
	                           test_domain_arg1.chpl 
	                           test_domain_arg2.chpl 
	                           test_domain_arg3.chpl 
	                           test_scalar_promote1.chpl 
	                           test_scalar_promote2.chpl 
	                           test_scalar_promote3.chpl 
	                           test_scalar_promote4.chpl 
	                           test_scalar_promote5.chpl 
	                           test_scalar_promote6.chpl 
	                           test_scalar_promote7.chpl 
	                           test_scalar_promote8.chpl 
	                           test_scalar_promote9.chpl 
	chapel/test/arrays/jplevyak/: ranks-1.chpl simple-4.chpl 
	chapel/test/classes/bradc/: badred.chpl callMethodOnClass.chpl 
	                            declClassType.chpl 
	                            declClassType1a.chpl 
	                            declClassType1b.chpl 
	                            declClassType1c.chpl 
	                            dispatch-nevernil.chpl 
	                            dispatch-nevernil2.chpl 
	                            dispatch-nevernil2a.chpl 
	                            dispatch-nevernil2b.chpl 
	                            dispatch-nevernil2c.chpl 
	                            dispatch-withnil.chpl dispatch.chpl 
	                            namecheck.chpl noinit.chpl 
	                            noinit2.chpl weirdinit.chpl 
	                            writeclass1a.chpl writerecord1a.chpl 
	chapel/test/classes/bradc/records/: assignRecord.chpl 
	                                    assignRecord2.chpl 
	chapel/test/classes/deitz/: infer_complication.chpl 
	                            test_anon_record2.chpl 
	                            test_bad_function_noparens.chpl 
	                            test_class_construct1.chpl 
	                            test_class_with2.chpl 
	                            test_dynamic_dispatch.chpl 
	                            test_inherit_mod1.chpl 
	                            test_inherit_mod2.chpl 
	                            test_inherit_mod3.chpl 
	                            test_method1.chpl test_method1a.chpl 
	                            test_method2.chpl test_method3.chpl 
	                            test_method4.chpl test_method5.chpl 
	                            test_method6.chpl test_method7.chpl 
	                            test_method8.chpl test_method9.chpl 
	                            test_method9a.chpl 
	                            test_method_call1.chpl 
	                            test_method_call2.chpl 
	                            test_method_call_noparens.chpl 
	                            test_method_call_noparens2.chpl 
	                            test_method_noparens.chpl 
	                            test_mf_class.chpl 
	                            test_mf_record.chpl 
	                            test_mycomplex_record.chpl 
	                            test_name_method.chpl 
	                            test_name_method2.chpl 
	                            test_nested_method.chpl 
	                            test_nested_record_function.chpl 
	                            test_nomembers1.chpl 
	                            test_primary_method1.chpl 
	                            test_record_in_function1.chpl 
	                            test_record_in_function2.chpl 
	                            test_record_in_function3.chpl 
	                            test_record_method1.chpl 
	                            test_record_method2.chpl 
	                            test_record_user_write.chpl 
	                            test_secondary_method1.chpl 
	                            test_secondary_method2.chpl 
	                            test_secondary_method3.chpl 
	                            test_sum_type1.chpl test_this1.chpl 
	                            test_this2.chpl test_union3.chpl 
	                            test_union_method1.chpl 
	                            test_union_method2.chpl 
	                            test_union_method3.chpl 
	chapel/test/classes/deitz/infer/: infer_field1.chpl 
	                                  infer_field2.chpl 
	                                  infer_field2a.chpl 
	                                  infer_field2b.chpl 
	                                  infer_field2c.chpl 
	chapel/test/classes/deitz/inherit/: test_inherit2.chpl 
	                                    test_inherit3.chpl 
	                                    test_inherit4.chpl 
	                                    test_inherit4b.chpl 
	chapel/test/classes/jplevyak/: inherit-2-fixed.chpl 
	                               inherit-2.chpl 
	                               record_type_hierarchy-1.chpl 
	                               record_type_hierarchy-2.chpl 
	                               record_type_hierarchy-3-error.chpl 
	                               sum_type-1.chpl sum_type-3.chpl 
	                               union_type_hierarchy-1.chpl 
	                               union_type_hierarchy-2.chpl 
	                               union_type_hierarchy-3-error.chpl 
	chapel/test/classes/shannon/: inoutClassDataMember.chpl 
	                              overloadedFunction.chpl 
	                              overloadedFunction.good 
	chapel/test/demo/review_060130/: history_accumulator.chpl 
	                                 jacobi.chpl jacobi2.chpl 
	chapel/test/distributions/bradc/foundations/: blockdist1.chpl 
	                                              blockdist2.chpl 
	                                              blockdist3.chpl 
	chapel/test/domains/bradc/: constdomain.chpl 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarNotInModule.chpl 
	                                        configVarTwoModsNoneSpecified.chpl 
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVarModStrings1.chpl 
	                                             configVarModStrings2.chpl 
	                                             configVarSetOver.chpl 
	                                             configVarSetTwoTypes.chpl 
	                                             configVarTwoModules.chpl 
	chapel/test/flowanalysis/newast/: chain.chpl codegen_test.chpl 
	                                  globalref.chpl 
	                                  multiple_return.chpl 
	                                  mutrec.chpl noargs.chpl 
	                                  onearg.chpl sum_type-1.chpl 
	                                  sum_type-2.chpl 
	                                  usebeforedef.chpl 
	chapel/test/flowanalysis/recursion/: rec_fun-1.chpl 
	                                     rec_fun-2.chpl 
	                                     rec_fun-3.chpl 
	                                     rec_obj-1.chpl 
	                                     rec_obj-2.chpl 
	                                     rec_obj-3.chpl 
	chapel/test/functions/bradc/: arrayArg-explicit.chpl 
	                              arrayArg.chpl chain.chpl 
	                              defaultParam.chpl 
	                              defaultParam2.chpl 
	                              defaultParamInOut.chpl 
	                              defaultParamWithReturn.chpl 
	                              globalref.chpl inferReturn.chpl 
	                              intents-arrays.chpl 
	                              intents-arrays2.chpl 
	                              intents-arrays2a.chpl 
	                              intents-classes.chpl 
	                              intents-classes2-error.chpl 
	                              intents-classes2.chpl 
	                              intents-classes3.chpl 
	                              intents-classes4.chpl 
	                              intents-error.chpl 
	                              intents-strings.chpl intents.chpl 
	                              multipleParamsSameType.chpl 
	                              mutrec.chpl 
	                              nameDefaultParamInOut.chpl 
	                              noargs.chpl onearg.chpl 
	                              retstmt.chpl 
	                              returnFnCallIntents.chpl 
	                              typefn.chpl typefn2.chpl 
	                              typefn2a.chpl typefn3.chpl 
	                              typefn4.chpl typefn4a.chpl 
	                              typefn5.chpl usebeforedef.chpl 
	chapel/test/functions/deitz/: test_assign1.chpl 
	                              test_bad_function.chpl 
	                              test_clone_coerce.chpl 
	                              test_default_param1.chpl 
	                              test_default_param2.chpl 
	                              test_default_param3.chpl 
	                              test_default_type.chpl 
	                              test_formal_copy1.chpl 
	                              test_inout1.chpl 
	                              test_lit_int1.chpl 
	                              test_named_default_gotcha.chpl 
	                              test_named_param1.chpl 
	                              test_named_param2.chpl 
	                              test_named_param3.chpl 
	                              test_nested1.chpl 
	                              test_operator_overloading1.chpl 
	                              test_operator_overloading2.chpl 
	                              test_out_parameter1.chpl 
	                              test_overload_type_intent.chpl 
	                              test_return1.chpl 
	                              test_return2.chpl 
	                              test_square1.chpl 
	                              test_square2.chpl 
	                              test_typeconstraint1.chpl 
	                              test_var_function1.chpl 
	                              test_var_function_access.chpl 
	                              test_var_function_access2.chpl 
	                              test_var_method.chpl 
	                              test_visible1.chpl 
	                              test_visible2.chpl 
	                              test_where_param1.chpl 
	                              test_where_param2.chpl 
	                              test_where_param3.chpl 
	                              test_where_param4.chpl 
	                              test_where_param5.chpl 
	chapel/test/functions/deitz/default/: test_default1.chpl 
	                                      test_default2.chpl 
	                                      test_default3-error.chpl 
	                                      test_default3.chpl 
	                                      test_default4-error.chpl 
	                                      test_default4.chpl 
	                                      test_default5.chpl 
	                                      test_default6.chpl 
	                                      test_default7.chpl 
	                                      test_default7a.chpl 
	                                      test_default7b.chpl 
	                                      test_default7c.chpl 
	                                      test_default7d.chpl 
	                                      test_default8.chpl 
	                                      test_default8a.chpl 
	                                      test_default9.chpl 
	chapel/test/functions/deitz/defaultnamed/: 
	                                           test_defaultnamed1.chpl 
	                                           test_defaultnamed2.chpl 
	                                           test_defaultnamed3.chpl 
	                                           test_defaultnamed4.chpl 
	chapel/test/functions/deitz/methods/: test_default_arg.chpl 
	                                      test_default_arg2.chpl 
	chapel/test/functions/deitz/named/: test_named1.chpl 
	                                    test_named2.chpl 
	                                    test_named3-error.chpl 
	                                    test_named3.chpl 
	                                    test_named4.chpl 
	                                    test_named5.chpl 
	                                    test_named6-error.chpl 
	chapel/test/functions/deitz/nested/: test_nested1.chpl 
	                                     test_nested2.chpl 
	                                     test_nested3.chpl 
	                                     test_nested4.chpl 
	                                     test_nested5.chpl 
	                                     test_nested6.chpl 
	                                     test_nested7.chpl 
	                                     test_nested_global1.chpl 
	chapel/test/functions/deitz/varargs/: test_varargs1.chpl 
	                                      test_varargs10.chpl 
	                                      test_varargs11.chpl 
	                                      test_varargs2.chpl 
	                                      test_varargs3.chpl 
	                                      test_varargs4.chpl 
	                                      test_varargs5.chpl 
	                                      test_varargs6.chpl 
	                                      test_varargs7.chpl 
	                                      test_varargs8.chpl 
	                                      test_varargs9.chpl 
	                                      test_varargs_write.chpl 
	chapel/test/functions/jplevyak/: call_mapping-1.chpl 
	                                 call_mapping-2.chpl 
	                                 equal-9.chpl 
	                                 equal_method-1.chpl 
	                                 intent-1.chpl intent-2.chpl 
	                                 intent-3.chpl intent-4.chpl 
	                                 intent-5-error.chpl 
	                                 intent-6.chpl 
	                                 intent-7-error.chpl 
	                                 intent-8-error.chpl 
	                                 intent-9.chpl 
	                                 introduce-dispatch-1.chpl 
	                                 member-1.chpl member-2.chpl 
	                                 subsume-1.chpl 
	                                 type_var_fun-1.chpl 
	                                 var_return-1.chpl 
	                                 var_return-2.chpl 
	                                 zeroarity-bound-1.chpl 
	                                 zeroarity-bound-error-1.chpl 
	                                 zeroarity-bound-error-2.chpl 
	chapel/test/functions/jplevyak/scoping/: visibility-1.chpl 
	                                         visibility-4.chpl 
	chapel/test/functions/mjoyner/labelret/: label1.chpl label2.chpl 
	                                         label3.chpl label4.chpl 
	                                         label5.chpl 
	chapel/test/functions/mjoyner/nested/: mutual_recursive.chpl 
	chapel/test/functions/shannon/: methodWithVarargs.chpl 
	chapel/test/hpcc/: fft.chpl 
	chapel/test/interpreter/jplevyak/: call-1.chpl equal-9.chpl 
	                                   goto-1.chpl goto-2.chpl 
	                                   label1.chpl label2.chpl 
	                                   label3.chpl label4.chpl 
	                                   label5.chpl partial-6.chpl 
	                                   test_default_param1.chpl 
	                                   test_default_param2.chpl 
	                                   test_default_param3.chpl 
	                                   test_integer_method.chpl 
	                                   test_named_param1.chpl 
	                                   test_named_param2.chpl 
	                                   test_named_param3.chpl 
	                                   variables_in_nested_function-1.chpl 
	                                   variables_in_nested_function-2.chpl 
	                                   visibility-2.chpl 
	                                   visibility-3.chpl 
	chapel/test/modules/bradc/: nestedmodule.chpl 
	                            twomodulesonefile.chpl 
	                            twomodulessamevar.chpl 
	                            use-mutrec.chpl use.chpl 
	chapel/test/modules/bradc/manymodules/: flatmodules.chpl 
	                                        manymodules.chpl 
	chapel/test/modules/bradc/manymodules/modules/: a.chpl b.chpl 
	                                                c.chpl d.chpl 
	                                                e.chpl g.chpl 
	                                                main.chpl z.chpl 
	chapel/test/modules/deitz/: test_module_use1.chpl 
	                            test_module_use2.chpl 
	                            test_module_use3.chpl 
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/ft/: ft-serial-working1.chpl ft-serial.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
	chapel/test/parallel/begin/waynew/: simple2.chpl 
	chapel/test/parallel/cobegin/waynew/: cobegin.simple2.chpl 
	                                      depend.chpl locals.chpl 
	chapel/test/parallel/sync/bradc/: fib_sync.chpl 
	chapel/test/parallel/sync/deitz/: test_sync1.chpl 
	                                  test_sync2.chpl 
	chapel/test/reductions/bradc/manual/: identisinferredvar.chpl 
	                                      identisvar.chpl 
	                                      inferstatetype.chpl 
	                                      inferstatetype2.chpl 
	                                      manual.chpl promote.chpl 
	                                      threeclasstypes-construct.chpl 
	                                      threeclasstypes-manual.chpl 
	                                      threeclasstypes.chpl 
	                                      threeuses-cast.chpl 
	                                      threeuses.chpl 
	                                      twouses.chpl usestate.chpl 
	                                      usestate2.chpl 
	                                      usetype.chpl usetype2.chpl 
	chapel/test/reviews/jplevyak/: review1.chpl review2.chpl 
	                               review3.chpl 
	chapel/test/ssca/ssca2/: ssca2.blc-hack.chpl ssca2.blc.chpl 
	                         ssca2.blc.init.chpl ssca2.chpl 
	                         ssca2.orig.chpl ssca2.origpar.chpl 
	                         ssca2.parses.chpl 
	                         ssca2.typedarrays.chpl 
	chapel/test/studies/jacobi/bocchino/: jacobi.chpl 
	chapel/test/studies/jacobi/bradc/: jacobi-play-brad.chpl 
	                                   jacobi-play2-brad.chpl 
	                                   jacobi-rankind-brad.chpl 
	                                   jacobi-simple-brad.chpl 
	                                   jacobi-simple-compiles.chpl 
	                                   jacobi-slice-brad.chpl 
	chapel/test/studies/jacobi/jplevyak/: jacobi-jp4.chpl 
	chapel/test/trivial/bradc/: beer-submitted.chpl beer.chpl 
	                            defaultinit1a.chpl 
	                            initvarsamename2.chpl noop.chpl 
	                            readmethod.chpl readmethod2.chpl 
	                            readmethod2a.chpl testAllScopes.chpl 
	                            testAllScopes2.chpl undefinedfn.chpl 
	                            undefinedfn2.chpl unroll.chpl 
	                            vardecls.chpl vardecls1a.chpl 
	                            vardecls1b.chpl 
	chapel/test/trivial/bradc/entrypoint/: main.chpl main2.chpl 
	                                       twomains.chpl 
	                                       twomains2.chpl 
	                                       twomains2a.chpl 
	                                       wrongmain.chpl 
	                                       wrongmain2.chpl 
	chapel/test/trivial/bradc/protoast/codegen/: test.chpl 
	chapel/test/trivial/deitz/: coerce.chpl coerce2.chpl 
	                            test_a_few_functions.chpl 
	                            test_block_call.chpl 
	                            test_coerce_integer_to_string2.chpl 
	                            test_function1.chpl 
	                            test_function_question_mark.chpl 
	                            test_int32b.chpl 
	                            test_integer_method.chpl 
	                            test_integer_method2.chpl 
	                            test_integer_method3.chpl 
	                            test_let8.chpl 
	                            test_nested_function_call.chpl 
	                            test_nested_function_call2.chpl 
	                            test_param_fold4.chpl 
	                            test_plusassign.chpl 
	                            test_scope1.chpl test_scope2.chpl 
	                            test_type_select1-handcode.chpl 
	                            test_type_select1.chpl 
	                            test_use_before_def2.chpl 
	                            test_use_before_def3.chpl 
	                            test_var_decl_init1.chpl 
	                            test_var_decl_init2.chpl 
	                            test_var_decl_init3.chpl 
	                            test_var_decl_init5.chpl 
	                            test_write_return.chpl 
	chapel/test/trivial/deitz/demo/: sample1.chpl sample1a.chpl 
	                                 sample1b.chpl 
	chapel/test/trivial/jplevyak/: destruct-arg-1.chpl goto-1.chpl 
	                               goto-2.chpl label-1.chpl 
	                               label-2.chpl pragma-1.chpl 
	                               pragma-2.chpl pragma-3.chpl 
	                               pragma-4.chpl pragma-5.chpl 
	                               variables_in_nested_function-2.chpl 
	                               variables_in_nested_function.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1.chpl 
	                                         inlfunc1_report.chpl 
	                                         inlfunc2.chpl 
	                                         inlfunc2_report.chpl 
	chapel/test/trivial/mjoyner/iterators/: nest_func_iterator1.chpl 
	                                        nest_func_iterator2.chpl 
	                                        nest_func_iterator2a.chpl 
	                                        nest_func_iterator2b.chpl 
	                                        nest_func_iterator3.chpl 
	                                        nest_func_iterator4.chpl 
	                                        nest_func_iterator5.chpl 
	                                        nest_func_iterator6.chpl 
	                                        nest_func_iterator7.chpl 
	chapel/test/trivial/mjoyner/nestedfndef/: nested_fndef1.chpl 
	                                          nested_fndef2.chpl 
	                                          nested_fndef3.chpl 
	                                          nested_fndef4.chpl 
	                                          nested_fndef5.chpl 
	chapel/test/trivial/mjoyner/seq/: seq_index1.chpl 
	                                  seq_index2.chpl 
	                                  seq_reverse.chpl 
	chapel/test/trivial/preston/: aliasing.chpl boundfunction.chpl 
	                              gcd.chpl if.chpl 
	chapel/test/trivial/shannon/: condReturn.chpl condReturn2.chpl 
	                              condReturn3.chpl 
	chapel/test/trivial/waynew/: identity.chpl int8-64.chpl 
	chapel/test/types/complex/deitz/: test_complex_overload.chpl 
	chapel/test/types/enum/deitz/: test_enum_overload.chpl 
	chapel/test/types/file/: fwriteSelectStmt.chpl 
	chapel/test/types/seq/bradc/: returnSeq.chpl returnSeq2.chpl 
	chapel/test/types/seq/deitz/: test_seq_arg.chpl 
	                              test_seq_return1.chpl 
	chapel/test/types/tuple/bradc/: returnTuple.chpl 
	                                returnTuple2.chpl 
	                                returnTuple3.chpl 
	chapel/test/types/tuple/deitz/: test_for_param_return.chpl 
	                                test_param_tuple_arg1-error.chpl 
	                                test_param_tuple_arg1.chpl 
	                                test_tuple_function1.chpl 
	                                test_tuple_function2.chpl 
	                                test_tuple_record_implementation1.chpl 
	                                test_tuple_record_implementation10.chpl 
	                                test_tuple_record_implementation11.chpl 
	                                test_tuple_record_implementation12.chpl 
	                                test_tuple_record_implementation13.chpl 
	                                test_tuple_record_implementation14.chpl 
	                                test_tuple_record_implementation15.chpl 
	                                test_tuple_record_implementation16.chpl 
	                                test_tuple_record_implementation2.chpl 
	                                test_tuple_record_implementation3.chpl 
	                                test_tuple_record_implementation4.chpl 
	                                test_tuple_record_implementation5.chpl 
	                                test_tuple_record_implementation6.chpl 
	                                test_tuple_record_implementation7.chpl 
	                                test_tuple_record_implementation8.chpl 
	                                test_tuple_record_implementation9.chpl 
	chapel/test/types/type_variables/deitz/: 
	                                         inherit_instantiate3.chpl 
	                                         inherit_instantiate4.chpl 
	                                         test_clone_class1.chpl 
	                                         test_clone_class1a.chpl 
	                                         test_clone_class1b.chpl 
	                                         test_clone_class2.chpl 
	                                         test_clone_class2a.chpl 
	                                         test_clone_class2b.chpl 
	                                         test_clone_class3.chpl 
	                                         test_clone_class4.chpl 
	                                         test_clone_class5.chpl 
	                                         test_clone_function1.chpl 
	                                         test_clone_function2.chpl 
	                                         test_clone_function3.chpl 
	                                         test_clone_function4.chpl 
	                                         test_clone_function5.chpl 
	                                         test_clone_function6.chpl 
	                                         test_clone_function_multiargs1.chpl 
	                                         test_coerce1.chpl 
	                                         test_datablock.chpl 
	                                         test_datablock2.chpl 
	                                         test_error1.chpl 
	                                         test_foo_instantiated1.chpl 
	                                         test_instantiate1.chpl 
	                                         test_instantiate2.chpl 
	                                         test_instantiate3.chpl 
	                                         test_instantiate4.chpl 
	                                         test_instantiate_construct1.chpl 
	                                         test_myseq0.chpl 
	                                         test_myseq1.chpl 
	                                         test_myseq2.chpl 
	                                         test_nested1.chpl 
	                                         test_nested2.chpl 
	                                         test_overinstantiate1.chpl 
	                                         test_overinstantiate1a.chpl 
	                                         test_overload_function1.chpl 
	                                         test_overload_integerfloat1.chpl 
	                                         test_overload_integerfloat2.chpl 
	                                         test_overload_integerfloat3.chpl 
	                                         test_overload_integerfloat4.chpl 
	                                         test_paramvar_function1.chpl 
	                                         test_recursiveinstantiate1.chpl 
	                                         test_stack.chpl 
	                                         test_swap.chpl 
	                                         test_typevar_class1.chpl 
	                                         test_typevar_class10.chpl 
	                                         test_typevar_class2.chpl 
	                                         test_typevar_class2a.chpl 
	                                         test_typevar_class3.chpl 
	                                         test_typevar_class4.chpl 
	                                         test_typevar_class5.chpl 
	                                         test_typevar_class6.chpl 
	                                         test_typevar_class7.chpl 
	                                         test_typevar_class8.chpl 
	                                         test_typevar_class9.chpl 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function4.chpl 
	                                         test_typevar_record1.chpl 
	                                         test_typevar_record2.chpl 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record4.chpl 
	                                         test_typevar_record5.chpl 
	                                         test_typevar_record6.chpl 
	                                         where-1.chpl 
	                                         where-2.chpl 
	                                         where-3.chpl 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo1.chpl 
	                                                   test_foo2.chpl 
	                                                   test_foo3.chpl 
	                                                   test_foo4.chpl 
	                                                   test_foo5-error.chpl 
	                                                   test_foo5.chpl 
	                                                   test_foo6.chpl 
	                                                   test_foo7.chpl 
	chapel/test/types/type_variables/jplevyak/: question_mark-1.chpl 
	                                            test_clone_class-1.chpl 
	                                            test_coerce1.chpl 
	                                            test_coerce2.chpl 
	                                            test_typevar_class1.chpl 
	                                            typevar_constraint-1.chpl 
	                                            where-1.chpl 
	                                            where-2.chpl 
	                                            where-3-error.chpl 
	                                            where-3.chpl 
	                                            where-4.chpl 
	chapel/test/types/typedefs/bradc/: localType.chpl 
	                                   localType2.chpl 
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.chpl 

---------------------------------------------------------------------------

08/15/06 14:11:22 -- deitz

Log message:
	Removed support for 'call' keyword.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 

---------------------------------------------------------------------------

08/15/06 16:27:34 -- deitz

Log message:
	Added support to query a domain's array by writing A.domain where A is
	an array and added a test.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/arrays/deitz/: test_dot_domain.chpl 
	                           test_dot_domain.good 

---------------------------------------------------------------------------

08/15/06 16:57:42 -- deitz

Log message:
	Added support for querying a domain of an array in the formal argument
	type as in
	
	  def foo(A: [?D] int) { ... D ... }
	
	It is transformed into
	
	  def foo(A: _array) where A.elt_type == int { ... A.domain ... }
	
	Added chpl_array in the compiler to point to the _array class in the
	module.
	
	Added a test case.
	
	Updated a future to use writeln instead of write and removed its
	.future file.

Modified files:
	chapel/compiler/include/: runtime.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	                         normalize.cpp semanticChecks.cpp 
	chapel/test/arrays/jplevyak/: ranks-1.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_arg3.chpl 
	                           test_array_arg3.good 
Removed files:
	chapel/test/arrays/jplevyak/: ranks-1.future 

---------------------------------------------------------------------------

08/15/06 17:14:20 -- bradc

Log message:
	Added better support and tests for coercing base types to
	strings.
	
	* unified codegen of _chpl_tostring_* routines -- previously this
	  was done in two different places using slightly different ways.
	
	* made complexes and uints coerce to strings
	
	* added runtime support for converting types of various bitwidths
	  to strings and unified the names to make them more
	  bitwidth-specific
	
	* added three tests of scalar type to string coercions:
	
	  - one that tries all scalar types, their min and max values,
	    converting to strings and printing them out
	
	  - one that converts floating point and complex values with
	    integral values in them to strings as x.0 to make sure that
	    those work
	
	  - one that converts complex values with various signs of each
	    component to strings to see how they print out.
	
	This will have a single regression: reductions/waynew/breductions.chpl.
	
	The next step for this work is to replace all the fwrite() calls
	on various scalar types with a single fwrite() call that takes a
	string and rely on the default coercions to convert scalar types
	to strings.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/runtime/include/: chplio.h chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/: REGRESSIONS 
Added files:
	chapel/test/types/coerce/bradc/: .cvsignore printcomplex.chpl 
	                                 printcomplex.good 
	                                 printzeroes.chpl 
	                                 printzeroes.good tostring.chpl 
	                                 tostring.good 

---------------------------------------------------------------------------

08/15/06 17:19:42 -- bradc

Log message:
	Added linux64 to a couple of .cvsignore files that didn't
	contain it for some reason...

Modified files:
	chapel/compiler/ifa/: .cvsignore 
	chapel/runtime/src/: .cvsignore 

---------------------------------------------------------------------------

08/15/06 17:36:11 -- waynew

Log message:
	Test out 32-bit and 64-bit complex numbers.

Modified files:
	chapel/test/trivial/waynew/: maxtest.chpl 
Added files:
	chapel/test/trivial/waynew/: complex-simple.chpl 
	                             complex-simple.good 

---------------------------------------------------------------------------

08/15/06 18:04:37 -- waynew

Log message:
	Ooops.  Checked in play version of maxtest.chpl.  Heh heh.

Modified files:
	chapel/test/trivial/waynew/: maxtest.chpl 

---------------------------------------------------------------------------

08/15/06 18:12:00 -- waynew

Log message:
	Support for complex.  Should support complex(32) now.
	 - codegen of primitive cast to complex
	 - changed complex_get_real/imag primitive to use returnInfoComplexField
	 - added returnInfoComplexField to return the appropriate type for a
	   complex real or imaginary field
	 - can coerce to complex
	 - operations with complex(32)

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

08/15/06 18:46:52 -- bradc

Log message:
	Updated my coercion tests to uncomment parts that
	relied on complex(32) and complex(64).
	
	Added a uint<->int coercion test as a future (we
	discussed at recent meeting, but it hasn't been
	implemented yet).

Modified files:
	chapel/test/types/coerce/bradc/: printcomplex.chpl 
	                                 printcomplex.good 
	                                 printzeroes.chpl 
	                                 printzeroes.good tostring.chpl 
	                                 tostring.good 
Added files:
	chapel/test/types/coerce/bradc/: int2uint.chpl int2uint.future 
	                                 int2uint.good 

---------------------------------------------------------------------------

08/15/06 18:48:18 -- bradc

Log message:
	Fixed a typo in the spacing of stringifying complex
	values that I'd fixed in my private copy, but somehow
	never made it into my commit regarding stringifying
	scalar types...  Went unnoticed probably because I'd
	commented out most of my complex tests until the last
	checkin.

Modified files:
	chapel/runtime/src/: chpltypes.c 

---------------------------------------------------------------------------

08/15/06 18:48:49 -- bradc

Log message:
	Some miscellaneous uint-oriented tests.

Added files:
	chapel/test/arrays/bradc/: uintarr.chpl uintarr.good 
	chapel/test/types/scalar/bradc/: .cvsignore uint.chpl uint.good 

---------------------------------------------------------------------------

08/15/06 18:56:08 -- bradc

Log message:
	Noticed that _init() was not overloaded for uint, which was
	causing initializations of arrays of uints to try and use
	the string _init() function instead.
	
	As I check this in, I notice that it's also not defined for
	complexes, but will test and check that in separately, since
	complexes are weirder than uints (and I haven't tested it yet).

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

08/15/06 19:00:33 -- bradc

Log message:
	Stupid spacing problem with hand-generating output.

Modified files:
	chapel/test/arrays/bradc/: uintarr.good 

---------------------------------------------------------------------------

08/16/06 09:30:18 -- deitz

Log message:
	Added test of passing array to formal argument array with explicit
	named domain.

Added files:
	chapel/test/arrays/deitz/: test_array_arg4.chpl 
	                           test_array_arg4.good 

---------------------------------------------------------------------------

08/16/06 09:32:31 -- deitz

Log message:
	Added test of passing array to formal array argument with anonymous
	domain.

Added files:
	chapel/test/arrays/deitz/: test_array_arg5.chpl 
	                           test_array_arg5.good 

---------------------------------------------------------------------------

08/16/06 10:26:19 -- bradc

Log message:
	Updated regressions list.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

08/16/06 10:59:32 -- deitz

Log message:
	Added support for passing arrays to arguments that take arrays over
	different domains.  The array is aliased and the argument's domain is
	used in this alias.  So
	
	  var A: [1..3, 1..4] int;
	
	can be passed to
	
	  def foo(A: [0..2, 2..5] int)
	
	The rule is that the shape of the formal argument's domain must match
	the shape of the actual's.  What are the semantics for indefinite
	arrays, sparse arrays, opaque arrays?
	
	This functionality is added through a function called view that must
	be defined in the array class for any domain type to which the array
	can be aliased.  The runtime checks should be performed in this
	function.
	
	At some point, with the _array class wrapper now defined, we can start
	to refactor arrays and domains to make the code that the user needs to
	write to define their own arrays easier.
	
	Added a test case.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_arg6.chpl 
	                           test_array_arg6.good 

---------------------------------------------------------------------------

08/16/06 11:06:47 -- deitz

Log message:
	Updated regressions file to point out linux64 regression that I can't
	explain.  It works on the desktop but not the server and it appears
	different code is executing.  It is not a size issue.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

08/16/06 11:15:41 -- waynew

Log message:
	Moved complex test to a more suitable location just in case someone is
	looking for complex examples.

Added files:
	chapel/test/types/complex/waynew/: complex-simple.chpl 
	                                   complex-simple.good 
Removed files:
	chapel/test/trivial/waynew/: complex-simple.chpl 
	                             complex-simple.good 

---------------------------------------------------------------------------

08/16/06 11:22:15 -- deitz

Log message:
	Enabled coercion from int to complex.  Note that the spec allows this
	coercion.
	
	This fixes last night's two regressions, updated regressions file.
	
	Enabled cast from int to complex which we want regardless.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

08/16/06 11:25:12 -- deitz

Log message:
	Checked off array arguments to functions and reductions in list of
	unimplemented features.

Modified files:
	chapel/compiler/: UnimplementedFeatures 

---------------------------------------------------------------------------

08/16/06 11:26:38 -- deitz

Log message:
	Add string coercion test case I had lying around.

Added files:
	chapel/test/trivial/deitz/: test_string_coercion1.chpl 
	                            test_string_coercion1.good 

---------------------------------------------------------------------------

08/16/06 11:27:57 -- deitz

Log message:
	Add working indefinite array over floats test.  It works by coercing
	the float to string and using the string hash function.  Awful,
	especially considering that string hash function just returns zero!

Added files:
	chapel/test/arrays/deitz/: test_indefinite8.chpl 
	                           test_indefinite8.good 

---------------------------------------------------------------------------

08/16/06 11:29:16 -- deitz

Log message:
	Add working tuple of record case I had lying around.

Added files:
	chapel/test/types/tuple/deitz/: test_tuple_of_record.chpl 
	                                test_tuple_of_record.good 

---------------------------------------------------------------------------

08/16/06 12:13:38 -- bradc

Log message:
	Now that we support automatic coercions from scalar types to
	strings, this checkin removes all fwrite() functions for scalar
	types, replacing them with a single fwrite() function that
	takes a string argument.  This has the benefits of (a) making
	sure that all file I/O is stringified identically to string
	casts (previously, we had different code for printing complexes
	and casting them to strings, e.g.); (b) making it easier to add
	new code to the fwrite() call -- error cases, locking, and such.
	
	In making this change, I had to update a few of Shannon's file
	I/O error tests, because the use of various coercions and
	inlining were confusing the line number mechanism.  Since the
	point of the tests was not to test line numbers or coercions,
	but error cases on File I/O, I put in explicit coercions to
	strings in order to avoid the wrappers and inlining that threw
	off the line numbers.  Getting line numbers right is a known
	issue, and a broader one than intended to be solved by this
	checkin.
	
	Also, updated the inlfunc1_*.good files as usual.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/file/: fwriteIntFailed.chpl 
	                         fwriteIntFailed.good 
	                         fwriteIntUnopenedFile.chpl 
	                         fwriteIntUnopenedFile.good 

---------------------------------------------------------------------------

08/16/06 12:16:50 -- deitz

Log message:
	Fix .good thinko.

Modified files:
	chapel/test/trivial/deitz/: test_string_coercion1.good 

---------------------------------------------------------------------------

08/16/06 13:56:06 -- bradc

Log message:
	Resolved linux64 regression noted by Steve earlier -- the
	array class had gotten bigger such that it went over a
	memtest threshold for a 64-bit g++ layout, but not a 32-bit
	layout.  I raised the threshhold to a somewhat higher value
	to make these tests work as a few more fields get added.

Modified files:
	chapel/runtime/src/: chplmem_tests.c 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

08/16/06 14:54:57 -- deitz

Log message:
	Added support for unions and removed 16 futures.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: primitive.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp 
	chapel/test/classes/bradc/: writeunion-workaround.good 
	                            writeunion.good 
	chapel/test/classes/deitz/: test_union2.good test_union3.future 
	                            test_union4.good 
	                            test_union_method3.good 
	chapel/test/classes/jplevyak/: union_type_hierarchy-2.good 
	                               union_type_hierarchy-3-error.good 
Removed files:
	chapel/test/classes/bradc/: writeunion-workaround.future 
	                            writeunion.future 
	chapel/test/classes/bradc/unions/: assign.future assign1a.future 
	                                   stringunion.future 
	                                   twounions.future 
	                                   writeunion.future 
	chapel/test/classes/deitz/: test_union1.future 
	                            test_union2.future 
	                            test_union4.future 
	                            test_union_method1.future 
	                            test_union_method2.future 
	                            test_union_method3.future 
	chapel/test/classes/jplevyak/: union_type_hierarchy-1.future 
	                               union_type_hierarchy-2.future 
	                               union_type_hierarchy-3-error.future 

---------------------------------------------------------------------------

08/16/06 15:05:59 -- deitz

Log message:
	Added support for assigning an arithmetic sequence to an array.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

08/16/06 16:02:34 -- waynew

Log message:
	Minor (hopefully) change to ignore subtrees with NOTEST in its root
	directory.  Should remove remote invocation of start_test that will
	do nothing.  Here, we have assumed that a directory with NOTEST will
	have NOTEST in all of its subtrees.

Modified files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

08/16/06 16:33:42 -- deitz

Log message:
	Fixed line numbers on setter and getter calls and updated the line
	numbers in 5 tests, making them correct.
	
	Added keyword error used in a special error call, for example,
	
	  error("illegal assignment to sequence's length");
	
	This error message is a static error that is printed to the user if a
	function that contains the error is called after parameter folding and
	instantiation are done.  It greatly improves the error message in a
	semi-ridiculous future test/types/seq/bradc/length.modify.chpl.
	Updated this test's output and removed the future.  The filename and
	line number associated with this error message is the filename and
	line number of the call expression from which the function was called.
	
	The error statement should only be used within parameter conditional
	statements so that it is removed if the parameter conditional
	evaluates to false.  If a function contains an error statement after
	parameter folding and instantiation, it is a static error to call this
	function.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/bradc/: callMethodOnClass.good 
	chapel/test/classes/deitz/: test_inherit_mod1.good 
	                            test_inherit_mod2.good 
	                            test_inherit_mod3.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	chapel/test/types/seq/bradc/: length.modify.good 
Removed files:
	chapel/test/types/seq/bradc/: length.modify.future 

---------------------------------------------------------------------------

08/16/06 16:39:13 -- bradc

Log message:
	Added a -norecurse flag to the testing system so that
	one can test a single directory without testing its
	children (only really useful with the -startdir flag).
	
	Next up: ability to test a single test.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

08/16/06 17:40:17 -- bradc

Log message:
	Modified the testing system to support the -onetest flag
	which takes the name of a single test and will run the
	testing system on that test only.  For example:
	
	        start_test -onetest test/trivial/bradc/declprintint.chpl
	
	For obvious reasons, the -onetest flag doesn't work in
	combination with the -startdir flag.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

08/17/06 11:47:02 -- deitz

Log message:
	Special-cased codegen of
	   -9223372036854775808
	as
	   -INT64(9223372036854775807) - INT64(1)
	
	Added folding of shift left and shift right.
	
	This will resolve our one regression.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

08/17/06 13:37:22 -- waynew

Log message:
	Changed to distribute units of work as (flat) directories rather than
	sub-trees. This can enable better load balancing.  In practice, this
	potential can be limited by directories with lots of tests/work.

Modified files:
	chapel/test/: paratest.client.pl paratest.server.pl 

---------------------------------------------------------------------------

08/17/06 14:49:03 -- bradc

Log message:
	Added a test for a feature that Steve and I just talked about --
	the desire/need for a setter method to be named the same as the
	field.  The other way to do this is to name the field something
	else and pretend that it's a real field through a setter/getter
	pair, but this has the disadvantages that:
	
	  (a) the field couldn't be named in the default constructor
	  (b) the trivial getter must be written by the user
	
	Instead, we discussed allowing the user to create setters that
	would squash the creation of the default setters and in which
	assignments to the field in question would be done using
	primitive moves rather than calls to a setter.

Added files:
	chapel/test/classes/bradc/: setterForField.chpl 
	                            setterForField.future 
	                            setterForField.good 

---------------------------------------------------------------------------

08/17/06 15:09:02 -- bradc

Log message:
	Added notes that I mailed out on the release the other
	week to the internal docs directory because I find myself
	wanting to refer to that mail constantly.

Added files:
	chapel/doc/internal/: Release2006 

---------------------------------------------------------------------------

08/17/06 15:30:57 -- bradc

Log message:
	Updated Chapel's file implementation to report better and
	more portable error messages for writing to a file that is
	not open for writing.  This should get rid of the outstanding
	cygwin and sunos regressions.
	
	Also restructured the file module so that a file's name,
	path, and mode can't be changed once the file is open, but
	this doesn't currently work due to the need to write a
	setter for a class field with the same name (future filed
	for this in previous test I committed).  The code to do this
	is checked in here, but not enabled, and I've filed 3 futures
	against this capability.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
	chapel/test/types/file/: fwriteIntFailed.good 
Added files:
	chapel/test/types/file/bradc/: changeFilenameWhileOpen.chpl 
	                               changeFilenameWhileOpen.future 
	                               changeFilenameWhileOpen.good 
	                               changeModeWhileOpen.chpl 
	                               changeModeWhileOpen.future 
	                               changeModeWhileOpen.good 
	                               changePathWhileOpen.chpl 
	                               changePathWhileOpen.future 
	                               changePathWhileOpen.good 
Removed files:
	chapel/test/types/file/: fwriteIntFailed.sunos.good 

---------------------------------------------------------------------------

08/17/06 16:55:59 -- deitz

Log message:
	Added support for hex and binary literals.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/parser/: chapel.lex 
Added files:
	chapel/test/trivial/deitz/: test_binary_literal.chpl 
	                            test_binary_literal.good 
	                            test_hex_literal.chpl 
	                            test_hex_literal.good 

---------------------------------------------------------------------------

08/18/06 10:29:53 -- deitz

Log message:
	Added support for float literals with an exponent part.  Also changed
	support to allow float literals that start with the point as in .02
	but note that we still cannot allow float literals that have no digits
	following the point.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_float.chpl test_float.good 

---------------------------------------------------------------------------

08/18/06 11:29:20 -- deitz

Log message:
	Implemented coercion of parameters to primitive types in which they
	fit and remove special-cased assignment statement that allowed a
	primitive of any size to be assigned to a smaller one.  That is, you
	can now only assign an int(8) to and int(8) or anything that can be
	coerced to an int(8).
	
	Also, implemented the correct semantics of coercions between int and
	uint; uint can only be coerced to int of a greater size.
	
	Fixed a problem with line numbers in wrappers.  A wrapper now has its
	line number and filename set to -1 and internal.  When the wrapper is
	inlined, its line number and filename is set to that of the call.
	Compiler errors using the error primitive now case the -1 line number
	too.  Also fixed the incorrectly set line number/filename on temps in
	inlining.  Removed the stopgap from two tests that Brad had modified
	to keep them working in the presence of this problem.
	
	Changed the name of the primitive types to make it be Chapel specific.
	So the cname of int(8) is still _int8 but the name is now int(8).  I
	didn't do this for complex(32) because _complex32 is used in the
	module.  I believe a better solution is that when you bind a function
	to a primitive type, you are doing that to the generic primitive.  So
	writing
	
	  def int.print()
	
	should be equivalent to
	
	  def int(?k).print()
	
	I also think I have a decent way of handling primitive types that have
	a query component to them so I'm ready to do this.  That would allow
	generic functions like
	
	  def foo(i: int(?k)) { ... }
	
	Fixed created setter function to use the return type as the rhs value
	argument's type in the built setter.  Previously this was ignored and
	'any' was used.  So something like
	
	  def foo(i: int) var : int
	
	did not require the assigned value to be an int.  This impacted
	coercion to the assigned type thus, for example, an array of uint can
	now be assigned an int parameter expression and it is coerced to uint.
	
	Added parameter folding of ** operator.
	
	Reworked this function of arrays, putting in explicit setters, to deal
	with the above changes.
	
	Update a number of tests to use explicit casts so that they work given
	the new coercion rules.
	
	Added a test to make sure that you cannot assign a parameter value
	that is too big for a primitive type.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	chapel/test/trivial/deitz/: test_int32.chpl test_int32.good 
	chapel/test/trivial/waynew/: int2uint.chpl int8-64.chpl 
	                             int8-64b.chpl int8b.chpl 
	                             uint2int.chpl uint8-64.chpl 
	chapel/test/types/file/: fwriteIntFailed.chpl 
	                         fwriteIntFailed.good 
	                         fwriteIntUnopenedFile.chpl 
	                         fwriteIntUnopenedFile.good 
Added files:
	chapel/test/trivial/deitz/: test_int8_error.chpl 
	                            test_int8_error.good 

---------------------------------------------------------------------------

08/18/06 11:30:05 -- deitz

Log message:
	Updated .goods

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 

---------------------------------------------------------------------------

08/18/06 14:50:22 -- waynew

Log message:
	One minor change and groundwork for file granularity distribution of work.
	 - Creating a file named PARAHALT will prevent future distribution of work.
	   One way to stop parallel testing in the middle.

Modified files:
	chapel/test/: paratest.client.pl paratest.server.pl 

---------------------------------------------------------------------------

08/18/06 15:14:17 -- deitz

Log message:
	Corrected .good.

Modified files:
	chapel/test/trivial/deitz/: test_int8_error.good 

---------------------------------------------------------------------------

08/18/06 16:05:46 -- deitz

Log message:
	Added support for querying the width of a primitive type in a formal
	argument as in
	
	  def foo(i: int(?k)) ...
	
	which creates a foo that can take an int of any of the widths.  This
	is done by replicating the function for each supported primitive width
	thereby allowing coercions to fall out.
	
	Used this new support to greatly simplify the modules that define
	operators and functions on the primitive types.  This removes alot of
	replicated code.
	
	Changed the assignment to complex and float so that narrowing is not
	allowed.  Following Java, you cannot write
	
	  var f: float(32) = 2.0;
	
	This requires a suffix or an explicit cast.  Apparently there is no
	parallel to the parameter expression exception for floats.
	
	Updated tests to obey this coercion rule.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp semanticChecks.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 
	chapel/test/trivial/waynew/: float32-64.chpl 
	chapel/test/types/coerce/bradc/: printcomplex.chpl 
	                                 printzeroes.chpl tostring.chpl 
	chapel/test/types/complex/waynew/: complex-simple.chpl 
Added files:
	chapel/test/functions/deitz/: test_query_int_arg.chpl 
	                              test_query_int_arg.good 

---------------------------------------------------------------------------

08/21/06 09:18:00 -- deitz

Log message:
	Updated list of unimplemented features.

Modified files:
	chapel/compiler/: UnimplementedFeatures 

---------------------------------------------------------------------------

08/21/06 10:34:35 -- deitz

Log message:
	Made some preparatory simplifications to codegen.
	
	Updated unimplemented features list.

Modified files:
	chapel/compiler/: UnimplementedFeatures 
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: alist.h baseAST.h stmt.h type.h 

---------------------------------------------------------------------------

08/21/06 12:04:54 -- deitz

Log message:
	Partitioned test/types/type_variables/deitz into 7 parts.

Added files:
	chapel/test/types/type_variables/deitz/part1/: 
	                                               test_clone_class1.chpl 
	                                               test_clone_class1.good 
	                                               test_clone_class1a.chpl 
	                                               test_clone_class1a.good 
	                                               test_clone_class1b.chpl 
	                                               test_clone_class1b.good 
	                                               test_clone_class2.chpl 
	                                               test_clone_class2.good 
	                                               test_clone_class2a.chpl 
	                                               test_clone_class2a.good 
	                                               test_clone_class2b.chpl 
	                                               test_clone_class2b.good 
	                                               test_clone_class3.chpl 
	                                               test_clone_class3.good 
	                                               test_clone_class4.chpl 
	                                               test_clone_class4.good 
	                                               test_clone_class5.chpl 
	                                               test_clone_class5.good 
	                                               test_clone_function1.chpl 
	                                               test_clone_function1.good 
	                                               test_clone_function2.chpl 
	                                               test_clone_function2.good 
	                                               test_clone_function3.chpl 
	                                               test_clone_function3.good 
	                                               test_clone_function4.chpl 
	                                               test_clone_function4.good 
	                                               test_clone_function5.chpl 
	                                               test_clone_function5.good 
	                                               test_clone_function6.chpl 
	                                               test_clone_function6.good 
	                                               test_clone_function_multiargs1.chpl 
	                                               test_clone_function_multiargs1.good 
	chapel/test/types/type_variables/deitz/part2/: 
	                                               test_typevar_class1.chpl 
	                                               test_typevar_class1.good 
	                                               test_typevar_class10.chpl 
	                                               test_typevar_class10.good 
	                                               test_typevar_class2.chpl 
	                                               test_typevar_class2.good 
	                                               test_typevar_class2a.chpl 
	                                               test_typevar_class2a.good 
	                                               test_typevar_class3.chpl 
	                                               test_typevar_class3.good 
	                                               test_typevar_class4.chpl 
	                                               test_typevar_class4.good 
	                                               test_typevar_class5.chpl 
	                                               test_typevar_class5.good 
	                                               test_typevar_class6.chpl 
	                                               test_typevar_class6.good 
	                                               test_typevar_class7.chpl 
	                                               test_typevar_class7.good 
	                                               test_typevar_class8.chpl 
	                                               test_typevar_class8.good 
	                                               test_typevar_class9.chpl 
	                                               test_typevar_class9.good 
	                                               test_typevar_function1.chpl 
	                                               test_typevar_function1.good 
	                                               test_typevar_function2.chpl 
	                                               test_typevar_function2.good 
	                                               test_typevar_function3.chpl 
	                                               test_typevar_function3.good 
	                                               test_typevar_function4.chpl 
	                                               test_typevar_function4.good 
	                                               test_typevar_record1.chpl 
	                                               test_typevar_record1.good 
	                                               test_typevar_record2.chpl 
	                                               test_typevar_record2.good 
	                                               test_typevar_record3.chpl 
	                                               test_typevar_record3.good 
	                                               test_typevar_record4.chpl 
	                                               test_typevar_record4.good 
	                                               test_typevar_record5.chpl 
	                                               test_typevar_record5.good 
	                                               test_typevar_record6.chpl 
	                                               test_typevar_record6.good 
	chapel/test/types/type_variables/deitz/part3/: 
	                                               test_instantiate1.chpl 
	                                               test_instantiate1.good 
	                                               test_instantiate2.chpl 
	                                               test_instantiate2.good 
	                                               test_instantiate3.chpl 
	                                               test_instantiate3.good 
	                                               test_instantiate4.chpl 
	                                               test_instantiate4.good 
	                                               test_instantiate_clone1.chpl 
	                                               test_instantiate_clone1.good 
	                                               test_instantiate_clone2.chpl 
	                                               test_instantiate_clone2.good 
	                                               test_instantiate_clone3.chpl 
	                                               test_instantiate_clone3.good 
	                                               test_instantiate_construct1.chpl 
	                                               test_instantiate_construct1.good 
	                                               test_overinstantiate1.chpl 
	                                               test_overinstantiate1.good 
	                                               test_overinstantiate1a.chpl 
	                                               test_overinstantiate1a.compopts 
	                                               test_overinstantiate1a.good 
	chapel/test/types/type_variables/deitz/part4/: 
	                                               test_datablock.chpl 
	                                               test_datablock.good 
	                                               test_datablock2.chpl 
	                                               test_datablock2.good 
	                                               test_datablock3.chpl 
	                                               test_datablock3.good 
	                                               test_overload_function1.chpl 
	                                               test_overload_function1.good 
	                                               test_overload_integerfloat1.chpl 
	                                               test_overload_integerfloat1.good 
	                                               test_overload_integerfloat2.chpl 
	                                               test_overload_integerfloat2.good 
	                                               test_overload_integerfloat3.chpl 
	                                               test_overload_integerfloat3.good 
	                                               test_overload_integerfloat4.chpl 
	                                               test_overload_integerfloat4.good 
	                                               test_paramvar_class1.chpl 
	                                               test_paramvar_class1.good 
	                                               test_paramvar_function1.chpl 
	                                               test_paramvar_function1.good 
	                                               test_paramvar_record1.chpl 
	                                               test_paramvar_record1.good 
	chapel/test/types/type_variables/deitz/part5/: 
	                                               inherit_instantiate.chpl 
	                                               inherit_instantiate.good 
	                                               inherit_instantiate2.chpl 
	                                               inherit_instantiate2.future 
	                                               inherit_instantiate2.good 
	                                               inherit_instantiate3.chpl 
	                                               inherit_instantiate3.good 
	                                               inherit_instantiate4.chpl 
	                                               inherit_instantiate4.future 
	                                               inherit_instantiate4.good 
	                                               where-1.chpl 
	                                               where-1.good 
	                                               where-2.chpl 
	                                               where-2.good 
	                                               where-3.chpl 
	                                               where-3.good 
	chapel/test/types/type_variables/deitz/part6/: test_myseq0.chpl 
	                                               test_myseq0.good 
	                                               test_myseq1.chpl 
	                                               test_myseq1.good 
	                                               test_myseq2.chpl 
	                                               test_myseq2.good 
	                                               test_nested1.chpl 
	                                               test_nested1.good 
	                                               test_nested2.chpl 
	                                               test_nested2.good 
	                                               test_recurse.chpl 
	                                               test_recurse.good 
	                                               test_recursiveinstantiate1.chpl 
	                                               test_recursiveinstantiate1.good 
	chapel/test/types/type_variables/deitz/part7/: construct-1b.chpl 
	                                               construct-1b.good 
	                                               test_class_record.chpl 
	                                               test_class_record.good 
	                                               test_coerce1.chpl 
	                                               test_coerce1.good 
	                                               test_error1.chpl 
	                                               test_error1.good 
	                                               test_foo_instantiated1.chpl 
	                                               test_foo_instantiated1.good 
	                                               test_generic_error1.chpl 
	                                               test_infer_class1.chpl 
	                                               test_infer_class1.good 
	                                               test_infer_class2.chpl 
	                                               test_infer_class2.good 
	                                               test_stack.chpl 
	                                               test_stack.good 
	                                               test_swap.chpl 
	                                               test_swap.good 
	                                               test_tuplelike1.chpl 
	                                               test_tuplelike1.good 
Removed files:
	chapel/test/types/type_variables/deitz/: construct-1b.chpl 
	                                         construct-1b.good 
	                                         inherit_instantiate.chpl 
	                                         inherit_instantiate.good 
	                                         inherit_instantiate2.chpl 
	                                         inherit_instantiate2.future 
	                                         inherit_instantiate2.good 
	                                         inherit_instantiate3.chpl 
	                                         inherit_instantiate3.good 
	                                         inherit_instantiate4.chpl 
	                                         inherit_instantiate4.future 
	                                         inherit_instantiate4.good 
	                                         test_class_record.chpl 
	                                         test_class_record.good 
	                                         test_clone_class1.chpl 
	                                         test_clone_class1.good 
	                                         test_clone_class1a.chpl 
	                                         test_clone_class1a.good 
	                                         test_clone_class1b.chpl 
	                                         test_clone_class1b.good 
	                                         test_clone_class2.chpl 
	                                         test_clone_class2.good 
	                                         test_clone_class2a.chpl 
	                                         test_clone_class2a.good 
	                                         test_clone_class2b.chpl 
	                                         test_clone_class2b.good 
	                                         test_clone_class3.chpl 
	                                         test_clone_class3.good 
	                                         test_clone_class4.chpl 
	                                         test_clone_class4.good 
	                                         test_clone_class5.chpl 
	                                         test_clone_class5.good 
	                                         test_clone_function1.chpl 
	                                         test_clone_function1.good 
	                                         test_clone_function2.chpl 
	                                         test_clone_function2.good 
	                                         test_clone_function3.chpl 
	                                         test_clone_function3.good 
	                                         test_clone_function4.chpl 
	                                         test_clone_function4.good 
	                                         test_clone_function5.chpl 
	                                         test_clone_function5.good 
	                                         test_clone_function6.chpl 
	                                         test_clone_function6.good 
	                                         test_clone_function_multiargs1.chpl 
	                                         test_clone_function_multiargs1.good 
	                                         test_coerce1.chpl 
	                                         test_coerce1.good 
	                                         test_datablock.chpl 
	                                         test_datablock.good 
	                                         test_datablock2.chpl 
	                                         test_datablock2.good 
	                                         test_datablock3.chpl 
	                                         test_datablock3.good 
	                                         test_error1.chpl 
	                                         test_error1.good 
	                                         test_foo_instantiated1.chpl 
	                                         test_foo_instantiated1.good 
	                                         test_infer_class1.chpl 
	                                         test_infer_class1.good 
	                                         test_infer_class2.chpl 
	                                         test_infer_class2.good 
	                                         test_instantiate1.chpl 
	                                         test_instantiate1.good 
	                                         test_instantiate2.chpl 
	                                         test_instantiate2.good 
	                                         test_instantiate3.chpl 
	                                         test_instantiate3.good 
	                                         test_instantiate4.chpl 
	                                         test_instantiate4.good 
	                                         test_instantiate_clone1.chpl 
	                                         test_instantiate_clone1.good 
	                                         test_instantiate_clone2.chpl 
	                                         test_instantiate_clone2.good 
	                                         test_instantiate_clone3.chpl 
	                                         test_instantiate_clone3.good 
	                                         test_instantiate_construct1.chpl 
	                                         test_instantiate_construct1.good 
	                                         test_myseq0.chpl 
	                                         test_myseq0.good 
	                                         test_myseq1.chpl 
	                                         test_myseq1.good 
	                                         test_myseq2.chpl 
	                                         test_myseq2.good 
	                                         test_nested1.chpl 
	                                         test_nested1.good 
	                                         test_nested2.chpl 
	                                         test_nested2.good 
	                                         test_overinstantiate1.chpl 
	                                         test_overinstantiate1.good 
	                                         test_overinstantiate1a.chpl 
	                                         test_overinstantiate1a.compopts 
	                                         test_overinstantiate1a.good 
	                                         test_overload_function1.chpl 
	                                         test_overload_function1.good 
	                                         test_overload_integerfloat1.chpl 
	                                         test_overload_integerfloat1.good 
	                                         test_overload_integerfloat2.chpl 
	                                         test_overload_integerfloat2.good 
	                                         test_overload_integerfloat3.chpl 
	                                         test_overload_integerfloat3.good 
	                                         test_overload_integerfloat4.chpl 
	                                         test_overload_integerfloat4.good 
	                                         test_paramvar_class1.chpl 
	                                         test_paramvar_class1.good 
	                                         test_paramvar_function1.chpl 
	                                         test_paramvar_function1.good 
	                                         test_paramvar_record1.chpl 
	                                         test_paramvar_record1.good 
	                                         test_recurse.chpl 
	                                         test_recurse.good 
	                                         test_recursiveinstantiate1.chpl 
	                                         test_recursiveinstantiate1.good 
	                                         test_stack.chpl 
	                                         test_stack.good 
	                                         test_swap.chpl 
	                                         test_swap.good 
	                                         test_tuplelike1.chpl 
	                                         test_tuplelike1.good 
	                                         test_typevar_class1.chpl 
	                                         test_typevar_class1.good 
	                                         test_typevar_class10.chpl 
	                                         test_typevar_class10.good 
	                                         test_typevar_class2.chpl 
	                                         test_typevar_class2.good 
	                                         test_typevar_class2a.chpl 
	                                         test_typevar_class2a.good 
	                                         test_typevar_class3.chpl 
	                                         test_typevar_class3.good 
	                                         test_typevar_class4.chpl 
	                                         test_typevar_class4.good 
	                                         test_typevar_class5.chpl 
	                                         test_typevar_class5.good 
	                                         test_typevar_class6.chpl 
	                                         test_typevar_class6.good 
	                                         test_typevar_class7.chpl 
	                                         test_typevar_class7.good 
	                                         test_typevar_class8.chpl 
	                                         test_typevar_class8.good 
	                                         test_typevar_class9.chpl 
	                                         test_typevar_class9.good 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function1.good 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function2.good 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function3.good 
	                                         test_typevar_function4.chpl 
	                                         test_typevar_function4.good 
	                                         test_typevar_record1.chpl 
	                                         test_typevar_record1.good 
	                                         test_typevar_record2.chpl 
	                                         test_typevar_record2.good 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record3.good 
	                                         test_typevar_record4.chpl 
	                                         test_typevar_record4.good 
	                                         test_typevar_record5.chpl 
	                                         test_typevar_record5.good 
	                                         test_typevar_record6.chpl 
	                                         test_typevar_record6.good 
	                                         where-1.chpl 
	                                         where-1.good 
	                                         where-2.chpl 
	                                         where-2.good 
	                                         where-3.chpl 
	                                         where-3.good 

---------------------------------------------------------------------------

08/21/06 12:16:45 -- deitz

Log message:
	Partitioned test/arrays/deitz

Added files:
	chapel/test/arrays/deitz/domains/: test_domain2.chpl 
	                                   test_domain2.good 
	                                   test_domain3.chpl 
	                                   test_domain3.good 
	                                   test_domain_1D.chpl 
	                                   test_domain_1D.good 
	                                   test_domain_arg1.chpl 
	                                   test_domain_arg1.good 
	                                   test_domain_arg2.chpl 
	                                   test_domain_arg2.good 
	                                   test_domain_arg3.chpl 
	                                   test_domain_arg3.good 
	                                   test_domain_dims.chpl 
	                                   test_domain_dims.good 
	                                   test_domains_1D.chpl 
	                                   test_domains_1D.good 
	                                   test_domains_2D.chpl 
	                                   test_domains_2D.good 
	                                   test_domains_2Da.chpl 
	                                   test_domains_2Da.good 
	                                   test_domains_2Db.chpl 
	                                   test_domains_2Db.good 
	                                   test_domains_2Dc.chpl 
	                                   test_domains_2Dc.good 
	                                   test_domains_2Dd.chpl 
	                                   test_domains_2Dd.good 
	                                   test_domains_5D.chpl 
	                                   test_domains_5D.good 
	chapel/test/arrays/deitz/myarray/: test_array_class_trial1.chpl 
	                                   test_array_class_trial1.good 
	                                   test_array_class_trial2.chpl 
	                                   test_array_class_trial2.good 
	                                   test_array_class_trial3.chpl 
	                                   test_array_class_trial3.good 
	                                   test_array_class_trial4.chpl 
	                                   test_array_class_trial4.good 
	                                   test_array_class_trial4a.chpl 
	                                   test_array_class_trial4a.good 
	                                   test_array_class_trial5.chpl 
	                                   test_array_class_trial5.good 
	                                   test_array_class_trial5a.chpl 
	                                   test_array_class_trial5a.good 
	                                   test_array_class_trial5b.chpl 
	                                   test_array_class_trial5b.good 
	                                   test_array_class_trial6.chpl 
	                                   test_array_class_trial6.good 
	chapel/test/arrays/deitz/part1/: test_array_1D.chpl 
	                                 test_array_1D.good 
	                                 test_array_2D.chpl 
	                                 test_array_2D.good 
	                                 test_array_2Da.chpl 
	                                 test_array_2Da.good 
	                                 test_array_2Db.chpl 
	                                 test_array_2Db.good 
	                                 test_array_2Dc.chpl 
	                                 test_array_2Dc.good 
	                                 test_array_3D.chpl 
	                                 test_array_3D.good 
	                                 test_array_3D_float.chpl 
	                                 test_array_3D_float.good 
	                                 test_array_8d.chpl 
	                                 test_array_8d.good 
	                                 test_array_arg1.chpl 
	                                 test_array_arg1.good 
	                                 test_array_arg2.chpl 
	                                 test_array_arg2.good 
	                                 test_array_arg3.chpl 
	                                 test_array_arg3.good 
	                                 test_array_arg4.chpl 
	                                 test_array_arg4.good 
	                                 test_array_arg5.chpl 
	                                 test_array_arg5.good 
	                                 test_array_arg6.chpl 
	                                 test_array_arg6.good 
	                                 test_array_assign1.chpl 
	                                 test_array_assign1.good 
	                                 test_array_assign2.chpl 
	                                 test_array_assign2.good 
	                                 test_array_assign3.chpl 
	                                 test_array_assign3.good 
	chapel/test/arrays/deitz/part2/: test_array_basic1.chpl 
	                                 test_array_basic1.good 
	                                 test_array_basic1a.chpl 
	                                 test_array_basic1a.good 
	                                 test_array_basic2.chpl 
	                                 test_array_basic2.good 
	                                 test_array_basic2a.chpl 
	                                 test_array_basic2a.good 
	                                 test_array_complex.chpl 
	                                 test_array_complex.good 
	                                 test_array_float1.chpl 
	                                 test_array_float1.good 
	                                 test_array_in_class.chpl 
	                                 test_array_in_class.good 
	                                 test_array_init.chpl 
	                                 test_array_init.good 
	                                 test_array_init1.chpl 
	                                 test_array_init1.good 
	                                 test_array_init2.chpl 
	                                 test_array_init2.future 
	                                 test_array_init2.good 
	                                 test_array_init3.chpl 
	                                 test_array_init3.good 
	                                 test_array_init_seq.chpl 
	                                 test_array_init_seq.good 
	                                 test_array_init_with_seq.chpl 
	                                 test_array_init_with_seq.good 
	                                 test_array_integer_2d.chpl 
	                                 test_array_integer_2d.good 
	                                 test_array_integer_3d.chpl 
	                                 test_array_integer_3d.good 
	                                 test_array_of_array1.chpl 
	                                 test_array_of_array1.future 
	                                 test_array_of_array1.good 
	                                 test_array_of_array2.chpl 
	                                 test_array_of_class1.chpl 
	                                 test_array_of_class1.good 
	                                 test_array_of_record1.chpl 
	                                 test_array_of_record1.good 
	                                 test_array_of_string1.chpl 
	                                 test_array_of_string1.good 
	                                 test_array_of_string2.chpl 
	                                 test_array_of_string2.good 
	                                 test_array_traverse1.chpl 
	                                 test_array_traverse1.good 
	chapel/test/arrays/deitz/promotion/: test_scalar_promote1.chpl 
	                                     test_scalar_promote1.good 
	                                     test_scalar_promote10.chpl 
	                                     test_scalar_promote10.future 
	                                     test_scalar_promote10.good 
	                                     test_scalar_promote2.chpl 
	                                     test_scalar_promote2.good 
	                                     test_scalar_promote3.chpl 
	                                     test_scalar_promote3.good 
	                                     test_scalar_promote4.chpl 
	                                     test_scalar_promote4.good 
	                                     test_scalar_promote5.chpl 
	                                     test_scalar_promote5.good 
	                                     test_scalar_promote6.chpl 
	                                     test_scalar_promote6.good 
	                                     test_scalar_promote7.chpl 
	                                     test_scalar_promote7.good 
	                                     test_scalar_promote8.chpl 
	                                     test_scalar_promote8.good 
	                                     test_scalar_promote9.chpl 
	                                     test_scalar_promote9.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_1D.chpl test_array_1D.good 
	                           test_array_2D.chpl test_array_2D.good 
	                           test_array_2Da.chpl 
	                           test_array_2Da.good 
	                           test_array_2Db.chpl 
	                           test_array_2Db.good 
	                           test_array_2Dc.chpl 
	                           test_array_2Dc.good 
	                           test_array_3D.chpl test_array_3D.good 
	                           test_array_3D_float.chpl 
	                           test_array_3D_float.good 
	                           test_array_8d.chpl test_array_8d.good 
	                           test_array_arg1.chpl 
	                           test_array_arg1.good 
	                           test_array_arg2.chpl 
	                           test_array_arg2.good 
	                           test_array_arg3.chpl 
	                           test_array_arg3.good 
	                           test_array_arg4.chpl 
	                           test_array_arg4.good 
	                           test_array_arg5.chpl 
	                           test_array_arg5.good 
	                           test_array_arg6.chpl 
	                           test_array_arg6.good 
	                           test_array_assign1.chpl 
	                           test_array_assign1.good 
	                           test_array_assign2.chpl 
	                           test_array_assign2.good 
	                           test_array_assign3.chpl 
	                           test_array_assign3.good 
	                           test_array_basic1.chpl 
	                           test_array_basic1.good 
	                           test_array_basic1a.chpl 
	                           test_array_basic1a.good 
	                           test_array_basic2.chpl 
	                           test_array_basic2.good 
	                           test_array_basic2a.chpl 
	                           test_array_basic2a.good 
	                           test_array_class_trial1.chpl 
	                           test_array_class_trial1.good 
	                           test_array_class_trial2.chpl 
	                           test_array_class_trial2.good 
	                           test_array_class_trial3.chpl 
	                           test_array_class_trial3.good 
	                           test_array_class_trial4.chpl 
	                           test_array_class_trial4.good 
	                           test_array_class_trial4a.chpl 
	                           test_array_class_trial4a.good 
	                           test_array_class_trial5.chpl 
	                           test_array_class_trial5.good 
	                           test_array_class_trial5a.chpl 
	                           test_array_class_trial5a.good 
	                           test_array_class_trial5b.chpl 
	                           test_array_class_trial5b.good 
	                           test_array_class_trial6.chpl 
	                           test_array_class_trial6.good 
	                           test_array_complex.chpl 
	                           test_array_complex.good 
	                           test_array_float1.chpl 
	                           test_array_float1.good 
	                           test_array_in_class.chpl 
	                           test_array_in_class.good 
	                           test_array_init.chpl 
	                           test_array_init.good 
	                           test_array_init1.chpl 
	                           test_array_init1.good 
	                           test_array_init2.chpl 
	                           test_array_init2.future 
	                           test_array_init2.good 
	                           test_array_init3.chpl 
	                           test_array_init3.good 
	                           test_array_init_seq.chpl 
	                           test_array_init_seq.good 
	                           test_array_init_with_seq.chpl 
	                           test_array_init_with_seq.good 
	                           test_array_integer_2d.chpl 
	                           test_array_integer_2d.good 
	                           test_array_integer_3d.chpl 
	                           test_array_integer_3d.good 
	                           test_array_of_array1.chpl 
	                           test_array_of_array1.future 
	                           test_array_of_array1.good 
	                           test_array_of_class1.chpl 
	                           test_array_of_class1.good 
	                           test_array_of_record1.chpl 
	                           test_array_of_record1.good 
	                           test_array_of_string1.chpl 
	                           test_array_of_string1.good 
	                           test_array_of_string2.chpl 
	                           test_array_of_string2.good 
	                           test_array_traverse1.chpl 
	                           test_array_traverse1.good 
	                           test_domain2.chpl test_domain2.good 
	                           test_domain3.chpl test_domain3.good 
	                           test_domain_1D.chpl 
	                           test_domain_1D.good 
	                           test_domain_arg1.chpl 
	                           test_domain_arg1.good 
	                           test_domain_arg2.chpl 
	                           test_domain_arg2.good 
	                           test_domain_arg3.chpl 
	                           test_domain_arg3.good 
	                           test_domain_dims.chpl 
	                           test_domain_dims.good 
	                           test_domains_1D.chpl 
	                           test_domains_1D.good 
	                           test_domains_2D.chpl 
	                           test_domains_2D.good 
	                           test_domains_2Da.chpl 
	                           test_domains_2Da.good 
	                           test_domains_2Db.chpl 
	                           test_domains_2Db.good 
	                           test_domains_2Dc.chpl 
	                           test_domains_2Dc.good 
	                           test_domains_2Dd.chpl 
	                           test_domains_2Dd.good 
	                           test_domains_5D.chpl 
	                           test_domains_5D.good 
	                           test_scalar_promote1.chpl 
	                           test_scalar_promote1.good 
	                           test_scalar_promote10.chpl 
	                           test_scalar_promote10.future 
	                           test_scalar_promote10.good 
	                           test_scalar_promote2.chpl 
	                           test_scalar_promote2.good 
	                           test_scalar_promote3.chpl 
	                           test_scalar_promote3.good 
	                           test_scalar_promote4.chpl 
	                           test_scalar_promote4.good 
	                           test_scalar_promote5.chpl 
	                           test_scalar_promote5.good 
	                           test_scalar_promote6.chpl 
	                           test_scalar_promote6.good 
	                           test_scalar_promote7.chpl 
	                           test_scalar_promote7.good 
	                           test_scalar_promote8.chpl 
	                           test_scalar_promote8.good 
	                           test_scalar_promote9.chpl 
	                           test_scalar_promote9.good 

---------------------------------------------------------------------------

08/21/06 12:20:43 -- deitz

Log message:
	Minor refactoring of complex module.

Modified files:
	chapel/modules/standard/: _chpl_complex.chpl 

---------------------------------------------------------------------------

08/21/06 12:23:51 -- deitz

Log message:
	Remove file accidentally checked in.

Removed files:
	chapel/test/arrays/deitz/part2/: test_array_of_array2.chpl 

---------------------------------------------------------------------------

08/21/06 13:18:04 -- deitz

Log message:
	Remove file accidentally checked in.

Removed files:
	chapel/test/types/type_variables/deitz/part7/: 
	                                               test_generic_error1.chpl 

---------------------------------------------------------------------------

08/21/06 13:20:47 -- deitz

Log message:
	Added stylized for_actuals loop to go over the expressions in a call's
	argument list; use for_actuals(actual, call) { ... }.  This is similar
	to for_formals(formal, fn), already supported.
	
	Added stylized zipper loop to iterate over the formals and actuals at
	the same time; use for_formals_actuals(formal, actual, call).  Note
	that the call must already be resolved.  If the number of formals does
	not match the number of actuals, an error is encountered.
	
	Changed code to use for_actuals in places.
	
	Refactored primitive operator codegen into a helper routine.
	
	Moved exprsToIndices to build.cpp.

Modified files:
	chapel/compiler/AST/: astutil.cpp build.cpp expr.cpp 
	chapel/compiler/include/: alist.h build.h expr.h 
	chapel/compiler/passes/: cleanup.cpp copy_propagation.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         parallel.cpp semanticChecks.cpp 

---------------------------------------------------------------------------

08/21/06 13:54:28 -- deitz

Log message:
	Added for_formals_backward(formal, fn) { ... }.
	
	Changed for_alist in code to use for_formals and for_formals_backward
	where possible.

Modified files:
	chapel/compiler/AST/: symbol.cpp symscope.cpp view.cpp 
	chapel/compiler/include/: alist.h 
	chapel/compiler/passes/: functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 

---------------------------------------------------------------------------

08/21/06 14:36:12 -- deitz

Log message:
	minor refactor of primitive codegen.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

08/22/06 11:19:30 -- bradc

Log message:
	Changed start_test script to skip over tests marked
	as .future by default.  Use the -futures flag to get
	the old behavior.  Also changed the nightly regression
	testing script to use the -futures flag so that nightly
	regressions will run and report as always.
	
	Haven't yet added the feature steve wants of running the
	futures only.

Modified files:
	chapel/test/: start_test sub_test 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/22/06 11:36:51 -- bradc

Log message:
	Added a -futuresonly flag to the start_test script which
	causes only future tests to be tested.
	
	Made the nightly script skip over futures when run in
	valgrind mode in hopes of helping it complete in fewer
	than 3 days.

Modified files:
	chapel/test/: start_test sub_test 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/22/06 15:53:33 -- bradc

Log message:
	Tightened up Mack's inlfunc?_report tests so that they
	only check for the inlining that they were meant to
	test and not all the rest of the inlining that occurs
	due to the way Chapel is implemneted.  These should no
	longer need to be updated when module stuff changes --
	only when things like setters and getters are renamed.
	
	As a result, please start checking the output when
	they regress and only committing new .good files if
	they make sense, as opposed to copying over the
	.exec.out.tmp file to a .good file when you make
	changes to the compiler that cause them to fail.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 
	                                         inlfunc2_report.good 
Added files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.prediff 
	                                         inlfunc2_report.prediff 

---------------------------------------------------------------------------

08/22/06 16:28:33 -- bradc

Log message:
	Changed test system to generate executables with the name "foo"
	(for a test foo.chpl) rather than a.out so that multiple copies
	of the test system can run in the same directory structure with
	less likelihood of conflicting (particularly if an agent like
	the parallel testing system is pinpointing specific tests with
	them).  Updated a few tests that had been written with "a.out"
	hardcoded into their preexec scripts.

Modified files:
	chapel/test/: sub_test 
	chapel/test/compflags/bradc/nameoutput/: localname.preexec 
	                                         localnamesavec.preexec 

---------------------------------------------------------------------------

08/22/06 16:55:27 -- marybeth

Log message:
	Committing two tests that currently fail:
	
	saxpy1.chpl should work, but fails with an error trying to assign
	an array to a constant.
	
	saxpy2.chpl works, but shouldn't.  It should fail with an error
	of using D before it's defined.

Added files:
	chapel/test/studies/blas/marybeth/: saxpy1.chpl saxpy1.good 
	                                    saxpy1.future saxpy2.chpl 
	                                    saxpy2.good saxpy2.future 

---------------------------------------------------------------------------

08/22/06 17:00:47 -- bradc

Log message:
	Removed use of strtold() to create floating point literals due
	to its non-supportedness on Sun and Cygwin (this is what broke
	the build the past few days on those platforms).  I switched
	this to strtod() because that gives us 64-bit literals which
	should be sufficient for the near-term (and in any case, is
	better than integers which seem to currently be using a routine
	that creates 32-bit literal values?)

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

08/22/06 17:22:41 -- bradc

Log message:
	Added a pair of tests that we discussed in today's
	libraries meeting that make sure a value cannot be
	used before it is defined in a function's formal
	type or default value expressions.  These are similar
	to the one that Mary Beth checked in in saxpy2.chpl
	above, but slightly different cases.

Added files:
	chapel/test/functions/bradc/useBeforeDef/: useBeforeDef.chpl 
	                                           useBeforeDef.future 
	                                           useBeforeDef.good 
	                                           useBeforeDef2.chpl 
	                                           useBeforeDef2.future 
	                                           useBeforeDef2.good 

---------------------------------------------------------------------------

08/23/06 09:39:17 -- bradc

Log message:
	Fixed yesterday's prediff scripts to use "tail" in a more
	portable way.

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.prediff 
	                                         inlfunc2_report.prediff 

---------------------------------------------------------------------------

08/23/06 15:44:26 -- deitz

Log message:
	Add a few simple tests I've used to test my upcoming records on the
	stack change.

Added files:
	chapel/test/parallel/sync/deitz/: test_sync_in_class_simple.chpl 
	                                  test_sync_in_class_simple.good 
	                                  test_sync_in_class_simple2.chpl 
	                                  test_sync_in_class_simple2.good 
	                                  test_sync_in_class_simple3.chpl 
	                                  test_sync_in_class_simple3.good 
	chapel/test/types/tuple/deitz/: test_tuples6.chpl 
	                                test_tuples6.good 

---------------------------------------------------------------------------

08/23/06 19:26:58 -- deitz

Log message:
	Changed record allocation strategy to allocate records on the stack
	rather than the heap.
	
	Added field FnSymbol::buildSetter to mean that the user specified that
	this function is a 'var' function and requires a setter.  This used to
	be done with the FnSymbol::retRef field.  The retRef field now means
	that the function returns a reference.  It is set during function
	resolution and possibly unset in cullOverReferences.
	
	Started to add strides to parameter for loops, but did not finish this
	work due to parsing problems and changing needs related to the rest of
	the changes described here.
	
	Added a PRIMITIVE_REF to indicate that a reference should point at
	what another reference points at or at a value.  Nice simplifications
	to PRIMITIVE_MOVE as a result of this addition.
	
	Ordered records to codegen in an acceptable order to avoid a C error
	of using an unspecified type.
	
	Major improvements to cullOverReferences to remove references that do
	not need to be references.
	
	Fixed a bug in inlining regarding references and updated the output of
	a complex numbers test that was not working correctly.
	
	Expect regression of memory/shannon/printMemTable2.  Brad to fix.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: build.h primitive.h stmt.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp codegen.cpp 
	                         cullOverReferences.cpp 
	                         functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	                         semanticChecks.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_htuple.chpl 
	chapel/runtime/src/: chplmem_tests.c 
	chapel/test/memory/shannon/: printMemTable.chpl 
	                             printMemTable.good 
	chapel/test/types/complex/waynew/: complex-simple.good 

---------------------------------------------------------------------------

08/24/06 11:02:59 -- bradc

Log message:
	Short-term workaround to get around the printMemTable2
	regression from last-night -- made the internal print
	Mem table routine take a threshold as an argument.
	Longer-term solution is to have a memory tracking
	module, but I couldn't get that done in time.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chplmem_tests.h 
	chapel/runtime/src/: chplmem_tests.c 
	chapel/test/memory/shannon/: printMemTable2.chpl 
	                             printMemTable2.good 

---------------------------------------------------------------------------

08/24/06 11:33:48 -- deitz

Log message:
	Reworked front-end support for reductions to break it into a function
	in order to capture the sequence before copying it to determine type
	information.  For performance later, this needs to be reengineered.
	
	Fixed a bug in handling function expressions that was pulling them out
	to far in cases where they were at module scope but in a block
	statement.
	
	Added a test
	  writeln(+ reduce [i in 1..4] (i**2));

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
Added files:
	chapel/test/types/seq/deitz/: test_reduce_forall.chpl 
	                              test_reduce_forall.good 

---------------------------------------------------------------------------

08/24/06 13:02:11 -- deitz

Log message:
	Added _init functions for each width of primitive type.  Fixed a bug
	in coercion in which a coercion wrapper was unnecessarily created for
	64-bit integer parameter to 64-bit integer coercion.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 

---------------------------------------------------------------------------

08/24/06 15:40:02 -- bradc

Log message:
	Added a round of garbage collection before each pass
	is invoked.  Use "setenv GC_PRINT_STATS" to have it
	print what it's doing at each collection point.

Modified files:
	chapel/compiler/main/: runpasses.cpp 

---------------------------------------------------------------------------

08/24/06 15:44:40 -- bradc

Log message:
	In order to make a "nogc" build work, added a stub-out
	of the call to the forced GC round that I just introduced.

Modified files:
	chapel/compiler/include/: chplalloc.h 

---------------------------------------------------------------------------

08/24/06 16:01:53 -- waynew

Log message:
	Added/enabled the following options.  Note that file distribution mode is
	still broken (-filedist).
	
	  -filedist  : distribute work at the granularity of test files (directory
	               granurality is the default.
	  -futures   : in file granurality distribution mode, include tests with
	               .futures. Default is to not include these tests in file
	               granularity distribution mode.
	
	Added the printing of the first "Error" line for each partial log generated.
	This will have fine granularity in file distribution mode.  Otherwise,
	an error indicates at least one error was encountered in the directory
	that was distributed.  You will have to look at the partial log or the
	final log to see all the error in that directory.

Modified files:
	chapel/test/: paratest.client.pl paratest.server.pl 

---------------------------------------------------------------------------

08/24/06 16:06:29 -- bradc

Log message:
	Made a bunch of classes that were not sub-classes of gc
	into sub-classes of gc to make sure that they weren't
	throwing off the garbage collector's ability to collect
	them.  Unfortunately, it seems that they weren't.

Modified files:
	chapel/compiler/ifa/: num.h 
	chapel/compiler/include/: list.h map.h uniqueName.h vec.h 

---------------------------------------------------------------------------

08/24/06 16:08:00 -- waynew

Log message:
	Oops.  Updated the comments and -help to be more accurate.
	
	#   -filedist  : distribute work at the granularity of test files (directory
	#                granurality is the default).
	#   -futures   : include .future tests (default is none).

Modified files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

08/24/06 16:54:17 -- waynew

Log message:
	Test two implementations of an iterator, old-style and desired.

Added files:
	chapel/test/functions/waynew/: itest.chpl itest.good 

---------------------------------------------------------------------------

08/24/06 17:25:19 -- bradc

Log message:
	Added support for printing out heap size statistics when
	the --print-passes flag is used.

Modified files:
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/include/: chplalloc.h 

---------------------------------------------------------------------------

08/24/06 20:51:10 -- deitz

Log message:
	Added a missing ';' to the Chapel grammar.
	Added extern declarations of yylloc in some of the parser files.
	Removed a space between the -L and the library path in the Makefile.
	Added a Makefile for darwin.
	Checked in from my mac.

Modified files:
	chapel/compiler/parser/: chapel.y parser.cpp processTokens.cpp 
	chapel/runtime/etc/: Makefile.include 
Added files:
	chapel/make/: Makefile.darwin 

---------------------------------------------------------------------------

08/24/06 21:13:23 -- deitz

Log message:
	Fixed bug in reference showing up in Wayne's itest example.  This is a stopgap partial fix.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

08/25/06 10:20:43 -- deitz

Log message:
	Moved creation of setters and getters into buildDefaultFunctions pass,
	reworked scopeResolution, and enabled user-defined setters and getters
	on fields.  Removed one future.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp symbol.cpp 
	                      symscope.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         scopeResolve.cpp 
Removed files:
	chapel/test/classes/bradc/: setterForField.future 

---------------------------------------------------------------------------

08/25/06 10:23:46 -- deitz

Log message:
	Removed traversalInfo string.
	
	Removed unused copyInfo vector.
	
	Stopped copying the filename string on each AST.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

08/25/06 11:17:23 -- waynew

Log message:
	Changed static casts to the more correct dynamic_cast.

Modified files:
	chapel/compiler/passes/: normalize.cpp parallel.cpp 

---------------------------------------------------------------------------

08/25/06 12:12:10 -- deitz

Log message:
	Removed unnecessary calls vector from FnSymbol.
	
	Added utility cleanAst that calls BaseAST::clean virtual method which
	currently only clears the Symbol::uses vector.  It is called between
	passes and removes unnecessary stuff.
	
	It also returns the high water mark of asts and the current number of
	live asts.  These values are now printed out between passes using the
	--print-passes flag.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h symbol.h vec.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 
	chapel/compiler/passes/: flattenFunctions.cpp normalize.cpp 

---------------------------------------------------------------------------

08/25/06 16:06:28 -- deitz

Log message:
	Added support for scans.
	
	Changed _min and _max functions that query the minimum and maximum
	values of a type to min and max.  Changed the name of the builtin
	reduction classes to _min and _max.  Updated numerous tests that use
	these functions.
	
	Added standard generic functions min and max that take two arguments
	and that are implemented using the < and > comparator respectively.
	Added wrapper min and max functions that take three or more arguments
	and that are implemented in terms of the two argument functions.
	
	  def min(x, y) return if x < y then x else y;
	  def max(x, y) return if x > y then x else y;
	  def min(x, y, z...?k) return min(min(x, y), (...z));
	  def max(x, y, z...?k) return max(max(x, y), (...z));
	
	The module version of these functions is decorated with the inline
	pragma for an efficient implementation.
	
	Moved constant checking after resolution.  This needs revamping.
	Changed the output of two tests, making them legal, since the error,
	writing a setter that assigns to the argument, is dead.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp semanticChecks.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_seq.chpl 
	chapel/test/distributions/bradc/foundations/: blockdist3.chpl 
	chapel/test/functions/bradc/: typefn.chpl typefn2.chpl 
	                              typefn2a.chpl typefn3.chpl 
	                              typefn4.chpl typefn4a.chpl 
	                              typefn5.chpl 
	chapel/test/functions/deitz/: test_query_int_arg.chpl 
	                              test_var_function_access.good 
	                              test_var_function_access2.good 
	chapel/test/functions/jplevyak/: type_var_fun-1.chpl 
	chapel/test/reductions/waynew/: breductions.chpl 
	chapel/test/trivial/waynew/: maxtest.chpl mintest.chpl 
	chapel/test/types/coerce/bradc/: tostring.chpl 
	chapel/test/types/complex/waynew/: complex-simple.chpl 
	chapel/test/types/scalar/bradc/: uint.chpl 
Added files:
	chapel/test/reductions/deitz/: test_scan1.chpl test_scan1.good 

---------------------------------------------------------------------------

08/25/06 16:18:29 -- deitz

Log message:
	Added a matrix record test case.

Added files:
	chapel/test/arrays/deitz/: matrix.chpl matrix.good 

---------------------------------------------------------------------------

08/25/06 16:20:02 -- deitz

Log message:
	Minor change to show off one more feature.

Modified files:
	chapel/test/arrays/deitz/: matrix.chpl 

---------------------------------------------------------------------------

08/25/06 16:46:28 -- bradc

Log message:
	Dead code elimination -- pulled out code related to unit tests
	(which we disabled a few weeks ago).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/adt/: Makefile.share map.cpp vec.cpp 
	chapel/compiler/util/: misc.cpp 
Removed files:
	chapel/compiler/adt/: list.cpp 

---------------------------------------------------------------------------

08/25/06 17:04:18 -- bradc

Log message:
	Killed libifa/ code which had escaped my notice before in
	cleaning up the ifa/ directory.  (Note that I don't believe
	this code was ever counted in our nightly code size check,
	so this was never accounted for and we won't see any further
	shrinkage on the graphs due to this check-in).

Removed files:
	chapel/compiler/ifa/libifa/: COPYRIGHT Makefile Makefile.cg 
	                             README ast_kinds.h ast_to_if1.cc 
	                             ast_to_if1.h c.g c_runtime.h 
	                             faq.html ifa.1 ifa_defs.h ifa_tests 
	                             index.html main.cc make_ast.cc 
	                             make_ast.h manual.html mkdep 
	                             parse.cc parse.h parse_structs.h 
	                             prelude.v scope.cc scope.h v.g 
	                             version.cc version.h 

---------------------------------------------------------------------------

08/25/06 17:32:56 -- bradc

Log message:
	I often use the nightly script as a sanity check to make
	sure that the code I checked in builds and runs tests
	correctly.  Sometimes I just want to make sure it builds.
	
	Added a flag -notest to it that can be used to build the
	code from the repository without running the tests as a
	short sanity check.  Running -notest also turns on the
	-debug flag by default.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/25/06 17:37:21 -- bradc

Log message:
	Due to a strange combination of events (windows file
	systems not being case sensitive, change the test
	system to name the output using -o, and the fact that
	a test happened to have the same name as a subdirectory)
	this test started failing on cygwin.  Moved the test
	into the subdirectory (a better place for it) and
	renamed it in order to get around this strange
	confluence of events.

Added files:
	chapel/test/functions/bradc/useBeforeDef/: useFnBeforeDef.chpl 
	                                           useFnBeforeDef.good 
Removed files:
	chapel/test/functions/bradc/: usebeforedef.chpl 
	                              usebeforedef.good 

---------------------------------------------------------------------------

08/28/06 14:53:59 -- deitz

Log message:
	Fixed a few bugs:
	
	Removed infinite loop in topological order calculation of records for
	code generation that was seen when a class of a record of the same
	class existed.
	
	Fixed handling of record references so that culling of over-references
	is more aggressive.  This is necessarily aggressive or we end up with
	references to records that are on the stack.
	
	Fixed debug code in normalize to use #IFDEF.
	
	Enabled appending to sequences any subtype of the elt_type.
	
	Set object default value to nil.
	
	Changed sync record into a class and special cased the 'sync var'
	pragma so that the sync class does not have a defaultValue set to nil,
	but is rather constructed.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/passes/: cleanup.cpp codegen.cpp 
	                         cullOverReferences.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_seq.chpl 
Added files:
	chapel/test/types/seq/deitz/: test_seq_class3.chpl 
	                              test_seq_class3.good 
	                              test_seq_class4.chpl 
	                              test_seq_class4.good 
	                              test_seq_class5.chpl 
	                              test_seq_class5.good 

---------------------------------------------------------------------------

08/28/06 14:59:31 -- deitz

Log message:
	Added a guard against instantiating a type or function with generic
	types.
	
	Also moved BaseAST::pragmas vector to Symbol::pragmas as pragmas are
	only used on symbols.  This also helps to make this clear, a pragma is
	not a DefExpr or and ExprStmt, but rather a Symbol.  However, pragmas
	can still be added to DefExprs or ExprStmts of DefExprs, and they are
	automatically added to Symbol::pragmas.
	
	This refactoring reduces the max heap size used on the Jacobi test
	case after pass buildDefaultFunctions by 7M.  The max heap size by the
	end of the program is mainly unchanged, growing even larger
	(relatively) in functionResolution.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp symbol.cpp 
	chapel/compiler/include/: alist.h baseAST.h symbol.h 

---------------------------------------------------------------------------

08/28/06 15:03:23 -- bradc

Log message:
	Added a --ccflags option to the compiler which allows the
	user to define a 256-character string of arguments that
	will be passed to the C compiler invocation that is used
	to compile the Chapel-generated code.
	
	For example:
	
	    chpl --ccflags -O3 foo.chpl
	
	or:
	
	    chpl --ccflags "-Wall -Werror" foo.chpl

Modified files:
	chapel/compiler/include/: files.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/etc/: Makefile.include 

---------------------------------------------------------------------------

08/28/06 15:41:46 -- bradc

Log message:
	Oops -- I had done a stupid, stupid thing when computing
	the heap sizes used by each pass.  This should be much
	more accurate.

Modified files:
	chapel/compiler/main/: runpasses.cpp 

---------------------------------------------------------------------------

08/28/06 17:07:27 -- deitz

Log message:
	Changed Vec<Vec<ArgSymbol*>*> to Vec<Vec<ArgSymbol*> > in
	functionResolution and explicitly free it.  This improves memory
	performance in resolve.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

08/29/06 11:41:21 -- deitz

Log message:
	Added Vec<FnSymbol*> gFns to contain all the functions.  This list is
	pruned between passes to remove functions that are not in the AST.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

08/30/06 10:16:34 -- deitz

Log message:
	Added test I had lying around.

Added files:
	chapel/test/trivial/deitz/: int_casts.chpl int_casts.good 

---------------------------------------------------------------------------

08/30/06 11:50:29 -- deitz

Log message:
	Refactored cleanup to collect asts only once at the top level, and
	redundantly only on where expressions.  This improvement is possible
	primarily because we no longer copy asts all the time.
	
	This improves the performance of the cleanup pass by over a factor of
	two on Jacobi, from 0.192 to 0.092 seconds on my desktop.
	
	Minor refactoring to normalize.
	
	Added vec of types called gTypes with similar meaning to gFunctions
	only for types.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp 
	chapel/compiler/include/: astutil.h baseAST.h 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	                         scopeResolve.cpp 

---------------------------------------------------------------------------

08/30/06 11:59:12 -- deitz

Log message:
	Fixed 64-bit regression of classes/bradc/setterForField.chpl.  My
	fault in my code that relied on the actual arguments to a function
	call being resolved in order in C++.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 

---------------------------------------------------------------------------

08/30/06 16:33:25 -- deitz

Log message:
	Major refactor of dynamic dispatch code in preparation for supporting
	dynamic dispatch in which the subclass is generic.  The dynamic
	dispatch code is now inserted after function resolution not during
	function resolution.  A table of all dynamic dispatchable functions
	and where they apply is built.
	
	Changed semantics to be more reasonable and more like other languages.
	A subtype's method is only dynamically dispatched if its signature
	matches exactly the signature of the supertype's method.
	
	Improved instantiation so that instantiated classes are put in the
	dispatchChildren table of the types in their dispatchParents table and
	so that instantiated methods are put in the methods table their types.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

08/30/06 17:58:24 -- waynew

Log message:
	Simple test to test begin with a single statement.

Added files:
	chapel/test/parallel/begin/waynew/: single.chpl single.good 

---------------------------------------------------------------------------

08/30/06 18:24:38 -- waynew

Log message:
	Support for begin with a single statement.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

08/30/06 18:27:04 -- waynew

Log message:
	We do not yet really support inout arguments to iterators.  Not sure if
	we want this or what the semantics are.

Added files:
	chapel/test/trivial/mjoyner/iterators/: 
	                                        nest_func_iterator2b.future 

---------------------------------------------------------------------------

08/30/06 19:09:05 -- deitz

Log message:
	Added support for dynamic dispatch where the subtype was generic and
	added a test case.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/classes/deitz/: test_dynamic_dispatch2.chpl 
	                            test_dynamic_dispatch2.good 

---------------------------------------------------------------------------

08/31/06 09:14:32 -- deitz

Log message:
	Removed reentrant iterator implementation from alist and simplified
	some code in the compiler as a result.
	
	Removed hyper all traversal which is no longer used.  This used to
	collect ast nodes in a traversal including, for example, SymExpr::var.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp 
	chapel/compiler/include/: alist.h baseAST.h 
	chapel/compiler/passes/: functionResolution.cpp 
	                         inlineFunctions.cpp verify.cpp 

---------------------------------------------------------------------------

08/31/06 14:25:06 -- waynew

Log message:
	Some more iterator function test cases. Tests include multiple args,
	param arg, and nested for.

Added files:
	chapel/test/functions/waynew/: iterator1.chpl iterator1.good 
	                               iterator2.chpl iterator2.good 
	                               iterator4a.chpl iterator4a.good 
	                               iterator4b.chpl iterator4b.good 
	                               iterator5a.chpl iterator5a.good 
	                               iterator5b.chpl iterator5b.good 
Removed files:
	chapel/test/functions/waynew/: itest.chpl itest.good 

---------------------------------------------------------------------------

08/31/06 15:30:46 -- deitz

Log message:
	Improved dynamic dispatch to cope with default values, coercions, and
	hierarchies of depth greater than one.  Added three semi-tricky test
	cases.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: functionResolution.cpp scopeResolve.cpp 
Added files:
	chapel/test/classes/deitz/dispatch/: test_dd1.chpl test_dd1.good 
	                                     test_dd2.chpl test_dd2.good 
	                                     test_dd3.chpl test_dd3.good 

---------------------------------------------------------------------------

08/31/06 16:20:39 -- deitz

Log message:
	Added 3 tests and fixed 4 bugs:
	1. Now apply this to methods that are not overridden in a subclass but
	   are called with an implicit this in the method of the subclass.
	2. Now handle the case where a cast is applied to 'this' in a method
	   that is dynamically dispatched.
	3. No longer dynamic dispatch to a type that is dead.
	4. Now codegen C casts with a parentheses around the cast.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: functionResolution.cpp scopeResolve.cpp 
Added files:
	chapel/test/classes/deitz/dispatch/: test_dd4.chpl test_dd4.good 
	                                     test_dd4b.chpl 
	                                     test_dd4b.good 
	                                     test_dd4c.chpl 
	                                     test_dd4c.good 

---------------------------------------------------------------------------

08/31/06 16:21:47 -- deitz

Log message:
	Added a test of scalar promotion and dynamic dispatch.  It worked!

Added files:
	chapel/test/classes/deitz/dispatch/: test_dd5.chpl test_dd5.good 

---------------------------------------------------------------------------

09/01/06 11:12:02 -- waynew

Log message:
	Test temporary _to_seq() function on a iterator to return a sequence. This
	allows one to do writeln( _to_seq( iteratorfn())).  The plan is to
	later automatically insert _to_seq such that the user can just write
	writeln( iteratorfn()).

Added files:
	chapel/test/functions/waynew/: iterator6.chpl iterator6.good 

---------------------------------------------------------------------------

09/01/06 14:28:26 -- waynew

Log message:
	- Primary change in tests from writeln(iterator) to writeln(_to_seq(iterator)).
	This is a temporary change.
	- Changed .good's to reflect candidate function introduced by the iterator class

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/arrays/deitz/domains/: test_domain2.chpl 
	chapel/test/classes/deitz/: test_inherit_mod1.good 
	                            test_inherit_mod2.good 
	                            test_inherit_mod3.good 
	chapel/test/classes/deitz/infer/: infer_field2.chpl 
	                                  infer_field2a.chpl 
	                                  infer_field2b.chpl 
	                                  infer_field2c.chpl 
	chapel/test/functions/deitz/: test_iterator1.chpl 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator1.chpl 
	                                        test_instantiate_iterator2.chpl 
	                                        test_instantiate_iterator3.chpl 
	                                        test_instantiate_iterator3a.chpl 
	chapel/test/types/seq/deitz/: test_seq_tuple3.chpl 

---------------------------------------------------------------------------

09/01/06 15:27:11 -- waynew

Log message:
	Fixed .good to remove filename prefix.  Previous prefix had an absolute path
	that was user-enviro-specific.

Modified files:
	chapel/test/classes/deitz/: test_inherit_mod1.good 
	                            test_inherit_mod2.good 
	                            test_inherit_mod3.good 

---------------------------------------------------------------------------

09/01/06 15:44:20 -- waynew

Log message:
	Partial check in for iterator function to iterator class implementation.
	Currently we have 10 regressions (7 real) listed below with this checkin.
	The last error category is not specific to this check in, but how we report
	the file name (path) for candidate functions. The file name needs to be more
	generic for .good comparisons.
	
	This checkin includes the following:
	 - Transformation of the iterator function to an iterator class with appropriate
	   methods.
	 - retExpr -> retExprType
	 - FnSymbol field makeGloballyVisible as a hack to let _to_seq() work.
	   Otherwise, the _to_seq() function does not have visibility to the iterator
	   class methods created in the module where the iterator function is defined.
	 - Print labels for goto statement with view_ast()
	 - Bug fix to cleanup()
	 - Steve's bug fix to resolveCall() to hangle "partial ok's" in arg lists
	
	Current failures (10) with this checkin:
	arrays/domains + iterator
	 [Error compiler :arrays/deitz/domains/test_domain2]
	 [Error compiler :arrays/deitz/domains/test_domain3]
	
	tuples + iterator
	 [Error compiler :demo/review_060130/iterators]
	 [Error compiler :functions/deitz/iterators/test_instantiate_iterator2]
	 [Error compiler :functions/deitz/iterators/test_instantiate_iterator3]
	 [Error compiler :functions/deitz/iterators/test_instantiate_iterator3a]
	 [Error compiler :types/seq/deitz/test_seq_tuple3]
	
	filename path prefix
	 [Error compiler :classes/deitz/test_inherit_mod1]
	 [Error compiler :classes/deitz/test_inherit_mod2]
	 [Error compiler :classes/deitz/test_inherit_mod3]

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp symscope.cpp 
	                      view.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 

---------------------------------------------------------------------------

09/05/06 08:47:46 -- waynew

Log message:
	Removed tabs.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

09/05/06 10:02:32 -- waynew

Log message:
	Test iterator without initializer for local (i.e., uses default value).

Added files:
	chapel/test/functions/waynew/: iterator7.chpl iterator7.good 

---------------------------------------------------------------------------

09/05/06 10:31:50 -- waynew

Log message:
	Replaced inserted call to use the correct setter function in iterator
	transformation. Removed old commented code in cleanup.

Modified files:
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 

---------------------------------------------------------------------------

09/05/06 13:43:34 -- waynew

Log message:
	Fix for iterator transformation.  Need to set retType=dtUnknown and/or
	retExprType=NULL so that resolve can work.  This checkin now passes
	3 of the tuple tests.  The other two tests with iterators+tuples,
	test_instantiate3 and test_instantiate3a contain recursive iterator calls.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

09/06/06 11:18:38 -- waynew

Log message:
	Because the iterator is transformed into a class, we now need nested
	class support to enable these tests to pass.

Added files:
	chapel/test/arrays/deitz/domains/: test_domain2.future 
	                                   test_domain3.future 

---------------------------------------------------------------------------

09/06/06 11:20:55 -- deitz

Log message:
	Added two working tests I had lying around.

Added files:
	chapel/test/arrays/deitz/: test_array_decl.chpl 
	                           test_array_decl.good 
	chapel/test/classes/deitz/: test_class6.chpl test_class6.good 

---------------------------------------------------------------------------

09/06/06 13:29:58 -- waynew

Log message:
	Update.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

09/06/06 14:19:17 -- waynew

Log message:
	Reverted back .good.  We will not print standard module functions as
	candidates on error to the user.

Modified files:
	chapel/test/classes/deitz/: test_inherit_mod1.good 
	                            test_inherit_mod2.good 
	                            test_inherit_mod3.good 

---------------------------------------------------------------------------

09/06/06 14:38:59 -- bradc

Log message:
	Made the start_test script issue a warning if -valgrind is
	used and the chpl-nogc compiler is older than the chpl
	compiler.  This is intended to help bozos like me who forget
	that one must update chpl-nogc up-to-date in order to get
	accurate -valgrind test results.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

09/06/06 14:58:52 -- deitz

Log message:
	Added support for domain assignment that reallocates arrays declared
	over the assigned domain and preserves the data in these arrays.  This
	involved adding a new base class of all array classes called _abase.
	It relies on dynamic dispatch on generics.
	
	The data is preserved by iterating over the intersection of the two
	domains in the domain assignment.  Note that strided arrays and
	domains are not yet supported.  Added a function _extended_euclid
	which I copied from the ZPL runtime where it is cited as being from
	Knuth Vol. 2, Section 4.5.2.  This function is required to compute the
	intersection of strided domains.
	
	Changed arrays from records to classes.  This happens to remove the
	duplicate data that we were allocating for arrays.  Updated the two
	memory test outputs accordingly.
	
	Fixed a bug in cleanup in which use statements were not cleaned up
	early enough.
	
	Improved how function calls are printed out so that if the actual is a
	parameter, the value is written rather than its type.  This is nice if
	the function expects a parameter though not ideal otherwise.  Also
	improved how functions are printed out, now printing param in front of
	arguments that have parameter intents.  Updated error outputs on about
	9 tests.

Modified files:
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	                          _chpl_indefinite.chpl 
	                          _chpl_sparse.chpl 
	chapel/test/classes/deitz/: test_method_call2.good 
	chapel/test/functions/deitz/: test_bad_function.good 
	                              test_default_param3.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	chapel/test/memory/shannon/: jacobi.good printMemTable.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/deitz/part7/: construct-1b.good 
	                                               test_infer_class1.good 
	                                               test_infer_class2.good 
	chapel/test/types/type_variables/jplevyak/: where-3-error.good 
Added files:
	chapel/test/domains/deitz/: test_domain_reassign1.chpl 
	                            test_domain_reassign1.good 
	                            test_domain_reassign2.chpl 
	                            test_domain_reassign2.good 

---------------------------------------------------------------------------

09/06/06 15:08:13 -- deitz

Log message:
	Reverted some code in function resolution to use a vec of pointers to
	vecs rather than the odd vec of vec code.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

09/06/06 15:12:50 -- deitz

Log message:
	Updated UnimplementedFeatures test.

Modified files:
	chapel/compiler/: UnimplementedFeatures 

---------------------------------------------------------------------------

09/06/06 15:29:33 -- waynew

Log message:
	For non-developers suppress the printing of candidate functions in standard
	modules on an unresolved function error.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

09/06/06 15:30:38 -- waynew

Log message:
	Update.  Fixed removed regressions.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

09/06/06 15:40:56 -- deitz

Log message:
	Added support for user-defined getters and a test case.  Passed three
	file module futures over to Brad.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/test/types/file/bradc/: changeFilenameWhileOpen.future 
	                               changeModeWhileOpen.future 
	                               changePathWhileOpen.future 
Added files:
	chapel/test/classes/deitz/: test_setter_getter.chpl 
	                            test_setter_getter.good 

---------------------------------------------------------------------------

09/06/06 16:25:51 -- deitz

Log message:
	Added support for casting a sequence to a tuple and a tuple to a
	sequence.  Added two tests.  Updated the list of unimplemented
	features.

Modified files:
	chapel/compiler/: UnimplementedFeatures 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_htuple.chpl 
Added files:
	chapel/test/types/seq/deitz/tuples/: seq2tuple1.chpl 
	                                     seq2tuple1.good 
	                                     tuple2seq1.chpl 
	                                     tuple2seq1.good 

---------------------------------------------------------------------------

09/06/06 16:30:36 -- deitz

Log message:
	Added test I had lying around that is now working.

Added files:
	chapel/test/trivial/deitz/: test_init_int8.chpl 
	                            test_init_int8.good 

---------------------------------------------------------------------------

09/06/06 16:57:53 -- deitz

Log message:
	Fixed a bug caught by Valgrind and identifed by Brad in which arrays
	were always allocated as if the elements were of size int64.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chplrt.h 

---------------------------------------------------------------------------

09/07/06 08:50:22 -- bradc

Log message:
	Updated the file class to use the setter and getter support that
	Steve enabled yesterday in order to prevent assignment to its
	filename, path, and mode while the file is open.  Un-futurized
	three tests that tested this behavior.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 
Removed files:
	chapel/test/types/file/bradc/: changeFilenameWhileOpen.future 
	                               changeModeWhileOpen.future 
	                               changePathWhileOpen.future 

---------------------------------------------------------------------------

09/07/06 09:12:34 -- bradc

Log message:
	This check-in adds some code for building an executable
	currently called "modulefinder" which scans a list of
	files given on the command-line to find all modules that
	they might define.  It shares the Chapel compiler lexer
	in order to reuse the capabilities of eating comments and
	string literals, but it creates its own (flat) grammar for
	scanning the file.  New tokens added to chapel.lex should
	now be added to modulefinder.y as well.
	
	This utility is not built by default, and is not currently
	used by the compiler, but is intended to eventually be used
	with a search path to find modules that a user's code is
	"use"-ing.  While not perfect, the code is in good enough
	shape that I started to get nervous not having it under CVS
	control, so am checking it in.

Modified files:
	chapel/compiler/parser/: .cvsignore Makefile chapel.lex 
	                         processTokens.cpp 
Added files:
	chapel/compiler/parser/: lexincludes.h modulefinder.cpp 
	                         modulefinder.h modulefinder.y 

---------------------------------------------------------------------------

09/07/06 10:55:31 -- bradc

Log message:
	Added a few things to keep my new tests clean.

Modified files:
	chapel/test/types/file/bradc/: .cvsignore 
Added files:
	chapel/test/types/file/bradc/: CLEANFILES 

---------------------------------------------------------------------------

09/07/06 11:00:02 -- bradc

Log message:
	Adding some stray documents that I've had around --
	a whiteboard capture from John's last meeting in Seattle
	(can't remember when that was), and David's sources for
	his SSCA2 whitepaper.

Added files:
	chapel/doc/internal/: notes.johnslastmeeting.whiteboardcapture 
	chapel/doc/internal/SSCA2/: .cvsignore Makefile newcode.tex 
	                            nuweb sane.sty ssca2.pdf ssca2.tex 
	                            ssca2.w 

---------------------------------------------------------------------------

09/07/06 14:26:29 -- deitz

Log message:
	Removed WhenStmt which was only used during parsing.  It was confusing
	to keep it around as somebody might attempt to use it.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp expr.cpp 
	                      primitive.cpp stmt.cpp 
	chapel/compiler/include/: baseAST.h build.h primitive.h stmt.h 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

09/07/06 15:32:16 -- waynew

Log message:
	Need to move iterator transformation after param folding.  Otherwise, these
	tests fail.

Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator3.future 
	                                        test_instantiate_iterator3a.future 

---------------------------------------------------------------------------

09/07/06 15:42:28 -- waynew

Log message:
	Added -valgrind option to pass "-valgrind" to start test and to change
	the target Chapel compiler to chpl-nogc.
	
	Fixed a bug along the way where no node file was specified.

Modified files:
	chapel/test/: paratest.client.pl paratest.server.pl 

---------------------------------------------------------------------------

09/08/06 09:21:54 -- deitz

Log message:
	Reworked AList<> so that it is no longer a subclass of BaseAST.
	
	Removed update_list functionality from copy which was unused.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp build.cpp expr.cpp 
	                      stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h astutil.h baseAST.h build.h 
	                          expr.h stmt.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	chapel/test/types/seq/bradc/: emptySeq.good 

---------------------------------------------------------------------------

09/08/06 10:05:15 -- deitz

Log message:
	Minor cleanup resulting from AList change.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp 
	chapel/compiler/include/: baseAST.h 

---------------------------------------------------------------------------

09/08/06 10:09:09 -- deitz

Log message:
	Added support for the --no-bounds-checking compiler flag to disable
	bounds checking.  This sets a param that is accessible by the standard
	modules as well as user code called boundsChecking.  It is set to true
	by default and false when the flag is used.
	
	Increased the size of the array in my performance test by a factor of
	64 (from 128*128 to 1024*1024) resulting in more accurate times.
	
	Tests are with the -O3 flag.
	
	  C                             0.87 seconds
	  Chapel                       83.14 seconds
	  Chapel "no bounds checking"  70.78 seconds

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: driver.h symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/performance/deitz/: test_for2d.c test_for2d.chpl 
Added files:
	chapel/test/compflags/deitz/: test_no_bounds_checking.chpl 
	                              test_no_bounds_checking.good 
	                              test_no_bounds_checking_false.chpl 
	                              test_no_bounds_checking_false.compopts 
	                              test_no_bounds_checking_false.good 
	                              test_no_bounds_checking_false2.chpl 
	                              test_no_bounds_checking_false2.compopts 
	                              test_no_bounds_checking_false2.good 

---------------------------------------------------------------------------

09/08/06 11:28:04 -- deitz

Log message:
	Added initial support for constructors.  You can now write your own
	constructors (it is a constructor because it has the same name as the
	class) but there is no way to call another constructor, etc.  Added a
	test case to show it works.
	
	Added a couple of error-catching constructors to the arithmetic
	sequence class that use the error construct.  These constructors catch
	the case where the user is trying to construct an arithmetic sequence
	out of non-integers.
	
	Removed trivial/bradc/uintloop.future and updated .good to admit that
	this is correctly an error.  Brad- take a look.

Modified files:
	chapel/compiler/passes/: normalize.cpp scopeResolve.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/trivial/bradc/: uintloop.good 
Added files:
	chapel/test/classes/deitz/constructors/: test_construct1.chpl 
	                                         test_construct1.good 
Removed files:
	chapel/test/trivial/bradc/: uintloop.future 

---------------------------------------------------------------------------

09/08/06 14:38:37 -- bradc

Log message:
	Added support to the runtime for uint config variables.

Modified files:
	chapel/runtime/include/: chplio.h config.h 
	chapel/runtime/src/: config.c 

---------------------------------------------------------------------------

09/08/06 14:43:42 -- deitz

Log message:
	Improved adomain isValidCursor routine improving performance further:
	
	  C                                    0.86 seconds
	  old O3 Chapel "no bounds checking"  70.78 seconds
	
	  new O3 Chapel "no bounds checking"  57.77 seconds

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

09/08/06 15:13:07 -- deitz

Log message:
	Switched to row major iteration order over arithmetic domains
	
	  C                                    0.86 seconds
	  old O3 Chapel "no bounds checking"  57.77 seconds
	  new O3 Chapel "no bounds checking"  54.88 seconds
	
	Updated some .goods to reflect column-major to row-major change.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/: array_forall_expr.good 
	                           test_dot_domain.good 
	chapel/test/arrays/deitz/domains/: test_domains_2D.good 
	                                   test_domains_2Da.good 
	                                   test_domains_2Db.good 
	                                   test_domains_2Dc.good 
	                                   test_domains_2Dd.good 
	                                   test_domains_5D.good 
	chapel/test/arrays/deitz/part1/: test_array_2Da.good 
	                                 test_array_2Db.good 
	                                 test_array_2Dc.good 
	                                 test_array_3D.good 
	                                 test_array_3D_float.good 
	                                 test_array_arg5.good 
	                                 test_array_arg6.good 

---------------------------------------------------------------------------

09/08/06 16:16:26 -- bradc

Log message:
	Refactored modulefinder code as suggested by Steve --
	gave it its own modulefinder.lex file rather than
	reusing the chapel.lex file in order to reduce the
	amount of work required when adding new tokens to the
	parser (these will simply be handled by the TOTHER
	catch-all token in modulefinder.lex).
	
	As a result, modulefinder.lex/y should only need to
	be updated when something structural in the code that
	could affect where modules are found changes -- for
	example, comments, string literals, and other constructs
	that involve nesting or require scanning until the end
	of something is found.

Modified files:
	chapel/compiler/parser/: Makefile chapel.lex modulefinder.y 
	                         processTokens.cpp 
Added files:
	chapel/compiler/parser/: modulefinder.lex 
Removed files:
	chapel/compiler/parser/: lexincludes.h 

---------------------------------------------------------------------------

09/08/06 16:49:32 -- deitz

Log message:
	This checkin gets the serial version of the NAS FT benchmark in Chapel
	up and running!  This is a milestone but note that it runs very slowly.
	
	Temporarily disabled folding of floating point parameters and fixed
	the parsing of complex literals to operate on the character string
	like the parsing of float literals.
	
	Fixed a bug in the working version of the NAS FT serial Chapel code in
	which I had written "m-1" instead of "m-l".
	
	Updated the NAS FT serial Chapel code to use scientific notation for
	the floating point literals.
	
	Removed the NOTEST file in test/npb/ft.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/npb/ft/: ft-serial-working1.chpl 
Added files:
	chapel/test/npb/ft/: ft-serial-working1.good ft-serial.future 
	                     ft-serial.good ft-serial.notest 
Removed files:
	chapel/test/npb/ft/: NOTEST 

---------------------------------------------------------------------------

09/08/06 17:21:56 -- waynew

Log message:
	- Implementation of single variables and some tests.  There is currently a
	case that is breaking sync/single on a test not checked in yet, but I wanted
	to checkpoint.
	
	- Bug fix for sync implementation. Reading of a sync class' members now
	readXX instead of readFE. Also renabled "no default functions" for
	syncvar to prevent i/o functions for it.
	
	- Added a sleep(int) primitive.
	
	- Removed commented out code in chplthreads.h.  Was initial attempt to
	implement sync var ops in runtime.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp view.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: cleanup.cpp codegen.cpp 
	                         functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chplthreads.h 
Added files:
	chapel/test/parallel/single/waynew/: .cvsignore simple0.chpl 
	                                     simple0.good simple0b.chpl 
	                                     simple0b.good simple1.chpl 
	                                     simple1.good simple2.chpl 
	                                     simple2.good simple3.chpl 
	                                     simple3.good simple4.chpl 
	                                     simple4.good 
	chapel/test/parallel/sync/waynew/: class3.chpl class3.good 

---------------------------------------------------------------------------

09/08/06 17:58:07 -- bradc

Log message:
	Improved make depend rules so that they would once again
	work for the nogc version of the compiler, and to clean
	up the implementation of the normal dependence generation
	a bit.
	
	To the extent that I've tested this, it seems to be working.
	If you find any sort of make scenarios that don't seem to
	work as you expect, please let me know.  Makefiles are still
	amazingly brittle...
	
	Thanks.

Modified files:
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 

---------------------------------------------------------------------------

09/11/06 09:59:33 -- waynew

Log message:
	Forgot to remove futurized tests.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

09/11/06 10:22:57 -- deitz

Log message:
	Added an error message test written by Mary Beth, now working.
	
	Fixed a bug in which an expression of any class type could be assigned
	to a variable of any class type.  The rhs now must be a subclass of
	the lhs.
	
	Fixed two buggy tests.  One tried to assign one variable to another
	variable of subclass type.  I put in an explicit cast.  (Should this
	cast be checked at runtime?  I believe yes.)
	
	The other buggy test had written
	  var d: domain(1) = [1..n, 1..n];
	and had worked because the 2D domain is stored in memory such that it
	could be accessed as if it were a 1D domain.  I fixed this test by
	dropping the second range from the domain.
	
	Special-cased assignment of nil to non-class error.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_seq.chpl 
	chapel/test/arrays/deitz/part1/: test_array_arg4.chpl 
	chapel/test/classes/deitz/dispatch/: test_dd1.chpl 
	chapel/test/types/seq/bradc/: emptySeq3.good 
Added files:
	chapel/test/classes/marybeth/: test_dispatch1-error.chpl 
	                               test_dispatch1-error.good 

---------------------------------------------------------------------------

09/11/06 10:24:06 -- deitz

Log message:
	Added a test of row major storage of arrays that explicit prints out
	some internal state to ensure that it is stored in row major.

Added files:
	chapel/test/arrays/deitz/: rowMajor.chpl rowMajor.good 

---------------------------------------------------------------------------

09/11/06 11:14:14 -- deitz

Log message:
	Added initial support for strided arrays.  They were mostly supported,
	but this updates the indexing function to take into account the stride
	and also the array write function.  They will likely not work in other
	contexts yet, e.g., changing the domain and reallocating the array.
	
	This degrades performance on the performance test by about 12 seconds:
	
		  C                                        0.86 seconds
	          Chapel with no-bounds-checking (before) 56.59 seconds
	          Chapel with no-bounds-checking          68.65 seconds

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/stride/: test_stride1.chpl 
	                                  test_stride1.good 

---------------------------------------------------------------------------

09/11/06 11:46:51 -- deitz

Log message:
	Removed support for anonymous record types declared as
	
	  var a : (x : int, y : int);
	
	This is not in the spec and I'm not sure why I added it; the parsing
	is hairy for one.  Anonymous records are still supported as
	
	  var a : record { var x : int; var y : int; };
	
	Simplifed the parser a little.

Modified files:
	chapel/compiler/parser/: chapel.y 
Removed files:
	chapel/test/classes/deitz/: test_anon_record3.chpl 
	                            test_anon_record3.good 

---------------------------------------------------------------------------

09/11/06 11:57:30 -- deitz

Log message:
	Added support for changing the stride of a domain or changing a domain
	that has non-unit stride.
	
	Added a test case.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/stride/: test_stride2.chpl 
	                                  test_stride2.good 

---------------------------------------------------------------------------

09/11/06 14:07:39 -- deitz

Log message:
	Removed new_...Literal functions which were a needless indirection
	that has been tedious to maintain.  Use the new_...Symbol functions
	instead.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         parallel.cpp 

---------------------------------------------------------------------------

09/11/06 14:28:05 -- bradc

Log message:
	Removed readline-related things from the build process.

Modified files:
	chapel/make/: Makefile.cygwin Makefile.linux Makefile.linux64 
	              Makefile.linux64_32 

---------------------------------------------------------------------------

09/11/06 15:07:41 -- deitz

Log message:
	Removed a little dead code.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

09/11/06 15:28:15 -- bradc

Log message:
	Removing an unnecessary -D flag from the ifa/ Makefile.

Modified files:
	chapel/compiler/ifa/: Makefile 

---------------------------------------------------------------------------

09/11/06 17:13:16 -- waynew

Log message:
	Test the combination of synchronizaton class fields with write function.
	In particular, we want to test that synchronization is coerced first
	(i.e., grabbing the sync lock/state first) before the file lock is
	obtained.  Otherwise, we can deadlock.

Added files:
	chapel/test/parallel/single/waynew/: class0.chpl class0.good 
	                                     class1.chpl class1.good 

---------------------------------------------------------------------------

09/11/06 17:53:48 -- waynew

Log message:
	- Bug fix for sync/single variable. Make sure that we only instantiate
	on the sync/single type only when we need to.  Otherwise, instantiate with
	the base type.
	
	- Added pragma "synchronization primitive" for the sync/single class and
	its functions.
	
	- Built getter/setter functions inherit "synchronization primitive".

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

09/12/06 09:04:32 -- bradc

Log message:
	Steve's recent improvements to line numbers seem to have fixed
	this test on all platforms.

Removed files:
	chapel/test/memory/shannon/: memmaxExceedsLineno.future 

---------------------------------------------------------------------------

09/12/06 09:57:58 -- deitz

Log message:
	Most of the traversal code uses static casts.  Reworked traversing
	ALists in the traversal to use static casts as well with new stylized
	loop for_alist_sc which is meant to only be used in get_ast_children.
	This results in a modest but measurable speedup.
	
	Profiling the code reveals that the majority of time is spent
	traversing the AST and that over-traversing in normalization is the
	main culprit.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: alist.h 

---------------------------------------------------------------------------

09/12/06 10:04:43 -- deitz

Log message:
	Added a virtual destructor to BaseAST and removed flag
	-Wno-non-virtual-dtor.

Modified files:
	chapel/compiler/include/: baseAST.h 
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

09/12/06 10:25:21 -- deitz

Log message:
	Added facility for canonicalizing strings.  All Symbol::name strings
	need to be canonicalized now.  Use canonicalize_string(char*).
	
	Removed a bunch of string copying and sped up resolution a little by
	making the visible function map a map rather than a string hash table.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp symscope.cpp 
	chapel/compiler/include/: baseAST.h map.h symbol.h symscope.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

09/12/06 13:25:17 -- deitz

Log message:
	Made a new utility astr(char*, ...) that takes between one and four
	strings and returns a canonical string of the concatenation.  Think of
	"astr" as standing for AST string.
	
	Canonicalized more of the strings in the AST.
	
	Added a measure to --print-passes so that at the end it prints the
	time spent between passes.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp symbol.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

09/12/06 14:41:22 -- deitz

Log message:
	Reworked verify (called between passes) to traverse the AST once
	rather than twice.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/passes/: verify.cpp 

---------------------------------------------------------------------------

09/12/06 15:03:30 -- deitz

Log message:
	Fixed a bug in derived records where no instance of the base record is
	created and fixed support for casting a record to its base type.
	
	Futurized three tests that inherit from a generic parent where the
	parent is generic because it has fields with no type or initialization
	expression:
	
	  class C { var x; }
	  class D: C { var y; }

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/classes/jplevyak/: inherit-1.future 
	                               inherit-2-fixed.future 
	                               inherit-2.future 

---------------------------------------------------------------------------

09/12/06 15:46:27 -- waynew

Log message:
	Minor fix to sync/single var support.  The "synchronization primitive"
	pragma need not be put on their methods explicitly.  The methods will inherit
	that pragma from the sync/single symbol during cleanup now.  Removed a
	couple pragmas accordingly in _chpl_base.chpl.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

09/12/06 17:21:21 -- deitz

Log message:
	Removed use of cname to store literal value for string immediates.
	This is now stored in only one spot for simplicity.  Changes to other
	immediates to follow.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/ifa/: num.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

09/12/06 18:04:21 -- waynew

Log message:
	update

Modified files:
	chapel/compiler/: UnimplementedFeatures 

---------------------------------------------------------------------------

09/13/06 09:31:00 -- deitz

Log message:
	Added a second MBH test that looks at passing a derived record to a
	record and ensuring that dynamic dispatch does not happen.

Added files:
	chapel/test/classes/marybeth/: test_dispatch_record.chpl 
	                               test_dispatch_record.good 

---------------------------------------------------------------------------

09/13/06 14:02:41 -- marybeth

Log message:
	Checking in the complex_expressions test with a .future.
	In reading the Matlab manual, I wanted to test out features
	of their complex variables.  Currently, our compiler can't
	handle all that Matlab can.
	
	I'm not pushing for this functionality.  But, I thought it
	should be clear about what we plan to support and what we don't.
	I will need to update the spec accordingly.

Added files:
	chapel/test/types/complex/marybeth/: complex_expressions.chpl 
	                                     complex_expressions.future 
	                                     complex_expressions.good 

---------------------------------------------------------------------------

09/13/06 15:07:31 -- marybeth

Log message:
	Correction to complex_expression.future.  I put waynew on the first
	line of the file.

Modified files:
	chapel/test/types/complex/marybeth/: complex_expressions.future 

---------------------------------------------------------------------------

09/14/06 12:18:39 -- deitz

Log message:
	Renamed ft-serial-working1 to ft-serial as this is the first serial ft
	benchmark.  The old ft-serial version still had some ZPL in it, etc.

Modified files:
	chapel/test/npb/ft/: ft-serial.chpl 
Removed files:
	chapel/test/npb/ft/: ft-serial-working1.chpl 
	                     ft-serial-working1.good ft-serial.future 
	                     ft-serial.notest 

---------------------------------------------------------------------------

09/14/06 14:27:04 -- deitz

Log message:
	Added automatic memory management of ast nodes.  Added calls to delete
	and free the memory we have in a movement to remove the use of Boehm
	GC.
	
	Added a README file in the compiler/ directory that will eventually
	contain many notes for developers to heed.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp bb.cpp expr.cpp 
	                      stmt.cpp symbol.cpp symscope.cpp type.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h stmt.h 
	                          symbol.h symscope.h type.h 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	                         parallel.cpp 

---------------------------------------------------------------------------

09/14/06 15:24:43 -- deitz

Log message:
	Added test
	
	  var x = 1, y = 1u, z = x + y;
	  writeln((x, y, z));
	
	which prints out
	
	  (1, 1, 2.0)
	
	showing an unfortunate characteristic of unsigned.  The result of
	adding a 64-bit integer to a 64-bit usigned integer is a 64-bit float.

Added files:
	chapel/test/trivial/deitz/: test_int_uint.chpl 
	                            test_int_uint.good 

---------------------------------------------------------------------------

09/14/06 15:35:40 -- deitz

Log message:
	Simplified codegen of int and uint to always print out literals as
	64-bit, until I suppose, we add support for suffixes.
	
	Stop using cname to store the literal for int, uint, and bool.  It is
	still used for float and complex.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/ifa/: num.cpp 
	chapel/compiler/passes/: normalize.cpp semanticChecks.cpp 

---------------------------------------------------------------------------

09/14/06 16:30:26 -- waynew

Log message:
	1. Mainly, partial checkin of updated indefinite domain implementation. Hash
	   functions for our primitive types and compiler generated hash function
	   for records.
	
	2. Added float2int and object2int primitives. Originally wanted float2uint
	   and object2int (i.e., hashing on uint's), but running into some
	   behavior that makes it more hairy.  Sticking with hashing on int's for now.
	
	3. Some code factoring for sync/single vars.
	
	4. A test to make sure that our hash function on records is not obviously bad.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_indefinite.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
Added files:
	chapel/test/domains/waynew/: .cvsignore record_hash.chpl 
	                             record_hash.good 

---------------------------------------------------------------------------

09/14/06 17:07:50 -- deitz

Log message:
	Changed syntax of typedef to type, as discussed, so
	
	  typedef myint: int;
	
	is now
	
	  type myint = int;
	
	Updated tests.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/test/arrays/jplevyak/: simple-4.chpl 
	chapel/test/classes/deitz/: test_class_in_usertype.chpl 
	                            test_type_in_class2.chpl 
	                            test_type_in_class3.chpl 
	                            test_type_in_class4.chpl 
	chapel/test/distributions/bradc/foundations/: blockdist1.chpl 
	                                              blockdist2.chpl 
	                                              blockdist3.chpl 
	chapel/test/domains/bradc/: domainindex.chpl 
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
	chapel/test/trivial/bradc/: defaultinit2.good 
	chapel/test/trivial/shannon/: readWriteUserType.chpl 
	chapel/test/types/tuple/bradc/: returnTuple2.chpl 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation4.chpl 
	chapel/test/types/typedefs/bradc/: localType.chpl 
	                                   localType2.chpl 
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.chpl 

---------------------------------------------------------------------------

09/14/06 17:08:51 -- deitz

Log message:
	Superficial cleanup including removal of => from parser.

Modified files:
	chapel/compiler/parser/: chapel.y chapel.lex 

---------------------------------------------------------------------------

09/14/06 17:10:46 -- deitz

Log message:
	Mark one regression that should be easy to fix
	
	[Error matching compiler output for classes/deitz/test_type_in_class2]
	
	since the class in this test is not necessarily generic, we should be
	able to use it to define the type with the default type.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

09/15/06 09:18:37 -- deitz

Log message:
	Implemented some initial internal refactoring of the ast insertion
	routines.
	
	Added a function BaseAST::inTree() to determine whether an AST is in
	the program tree.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp expr.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h astutil.h baseAST.h expr.h 
	                          stmt.h symbol.h type.h 

---------------------------------------------------------------------------

09/15/06 11:11:29 -- waynew

Log message:
	Check in Jacobi .good's and enable testing (what I didn't do, but thought
	I did).

Modified files:
	chapel/test/studies/jacobi/waynew/: example1.chpl example2.chpl 
Added files:
	chapel/test/studies/jacobi/waynew/: example1.good example2.good 
Removed files:
	chapel/test/studies/jacobi/waynew/: NOTEST 

---------------------------------------------------------------------------

09/15/06 15:10:22 -- deitz

Log message:
	Stopped using sentinels to contain parents (parentSymbol, parentStmt,
	parentExpr, parentScope) to enable insertion into alists.
	
	Added a BaseAST* parent pointer to the alist.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp build.cpp expr.cpp 
	                      stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h astutil.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp filesToAST.cpp 
Removed files:
	chapel/modules/standard/: i.chpl 

---------------------------------------------------------------------------

09/15/06 15:28:22 -- deitz

Log message:
	Fixed regression:
	[Error matching compiler output for classes/deitz/test_type_in_class2]
	
	Special-cased the use of a class as a type where the class is generic
	but has a default on the type.  See the test for an example.  This
	special case is required because of not distinguishing between typedef
	and type in classes.  It was expected and is easy to handle.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

09/15/06 15:52:59 -- deitz

Log message:
	Stopped traversing the sentinels and adding parent information to them.
	
	Temporarily, the parentSymbol of sentinel expressions and statements
	is set to 0x1 so that they are not deleted during cleanup.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp symbol.cpp 
	chapel/compiler/include/: alist.h baseAST.h 

---------------------------------------------------------------------------

09/18/06 10:46:02 -- deitz

Log message:
	Fixed a bug in the parser in which parenthesized expression could not
	have '.' applied to them as in:
	
	  (1+2*4).print()
	
	and
	
	  (d:C).foo()
	
	Note that you need to parenthesize the ':' expression in the above as
	'.' has precedence supporting code like
	
	  d:c.type
	
	Rearranged and cleaned up the parser code somewhat.
	
	Added two tests.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/functions/deitz/: test_base_method_call.chpl 
	                              test_base_method_call.good 
	chapel/test/trivial/deitz/: test_integer_method4.chpl 
	                            test_integer_method4.good 

---------------------------------------------------------------------------

09/18/06 15:33:51 -- bradc

Log message:
	Made start_test so that if the -onetest flag is used,
	futures will be tested.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

09/18/06 15:38:44 -- bradc

Log message:
	Implemented floating point and complex output so that
	it would work with NaNs and infinities.  In particular,
	we no longer print out nan.0 and inf.0.  Also made
	complexes with imaginary components that are negative
	work better (it used to print out "...+ -0.0i").  Added
	a test to lock in this behavior and updated other
	tests that ran into this problem.
	
	More specifically...
	
	* If a floating point value is a nan or infinity it will
	  print out as nan, inf, or -inf.
	
	* If a complex value has a nan real or imaginary portion,
	  it will print out as nan.
	
	* If a complex value has an infinity real or imaginary
	  portion, it will print out as inf for that component.
	  This has the unfortunate effect of an imaginary
	  (positive) infinity print out as "...+ infi".
	  suggestions for better approaches welcome.
	
	* If a complex value has a negative 0.0 imaginary value,
	  it will print out as "...- 0.0i"
	
	If you think any of these choices are wrong (and they may
	be), let me know.
	
	Suspect that input of nans and infinities would currently
	break, but there aren't any tests that do this yet... :)

Modified files:
	chapel/runtime/src/: chpltypes.c 
	chapel/test/modules/standard/math/: acosh_out_of_range.good 
	                                    atanh_asymptote.good 
	                                    atanh_out_of_range.good 
	                                    cosh_asymptote.good 
	chapel/test/types/complex/marybeth/: complex_expressions.chpl 
	                                     complex_expressions.good 
Added files:
	chapel/test/arrays/deitz/part1/: .cvsignore 
	chapel/test/types/file/bradc/scalar/: 
	                                      floatcomplexexceptions.chpl 
	                                      floatcomplexexceptions.good 
Removed files:
	chapel/test/types/complex/marybeth/: complex_expressions.future 

---------------------------------------------------------------------------

09/18/06 15:48:55 -- deitz

Log message:
	Made every function globally visible and added disambiguation based on
	visibility.  This was an idea that John and I had discussed a while
	back and which we thought had merit.  As I was working on making
	functions that had class arguments globally visible, I was forced into
	implementing this idea.
	
	In this change, the best function is chosen based on the best match.
	But if a best match cannot be found from the candidates, the
	candidates are pruned based on which are the most visible.  Then the
	remaining most visible candidates are again searched for a best.
	
	Removed two futures.
	
	Here is an example that illustrates some of the issues:
	
	def f() {
	  record R {
	    var x: int;
	  }
	  var r : R;
	  writeln(r);
	}
	
	We create a write function for R automatically.  It is nested inside f
	alongside R.
	
	Prior to this change, the write function was globally visible because
	it had a class argument, namely file.  Because it is globally visible,
	it cannot refer to anything inside f.  This is fine because it
	doesn't, but moving it outside f is a problem because the getter R.x
	is inside f and so not visible from outside f.
	
	No problem, certainly this function should not be globally visible
	just because of the file argument.  One solution is to make file a
	record.  Then the automatic write function for the record will not be
	globally visible and pulled out of f.  The problem in this case is
	that the writeln implementation in chpl_file cannot see this write
	function.
	
	Another solution is not to pull the write function out of f until
	later.  This is not what I ended up doing, but we should discuss this
	tradeoff.
	
	In general though, this relies on the special treatment of the write
	function which is globally visible because of the class file type.
	Does anybody else see this as an issue?
	
	What I don't like is that a generic function elsewhere that is
	instantiated based on a record nested in a function will not have
	access to any of the functionality on that record.
	
	Also, note that I left file a class because == is implemented to rely
	on pointer equality.

Modified files:
	chapel/compiler/AST/: symbol.cpp symscope.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_file.chpl 
Removed files:
	chapel/test/functions/deitz/: test_visible1.future 
	chapel/test/functions/deitz/nested/: test_nested_global1.future 

---------------------------------------------------------------------------

09/18/06 16:57:12 -- bradc

Log message:
	Added a future test in which we can't find
	a function that takes the expected array
	type -- we currently generate a very cryptic
	error message.  This is a placeholder to try
	and get it clarified.

Added files:
	chapel/test/arrays/bradc/errors/: badArrArgErrMsg.chpl 
	                                  badArrArgErrMsg.future 
	                                  badArrArgErrMsg.good 

---------------------------------------------------------------------------

09/18/06 17:38:52 -- bradc

Log message:
	Trying to get the query of a domain's length into the testing
	system, but can't get it to work yet.  Steve, can you look at
	this and suggest fixes?  I might be doing something stupid.

Added files:
	chapel/test/domains/bradc/: queryLength.chpl queryLength.future 
	                            queryLength.good 

---------------------------------------------------------------------------

09/18/06 18:15:53 -- bradc

Log message:
	Finally got back to work on HPCC FFT.  Pulled
	the twiddles() routine out of the C code to make
	it a standalone source file that would run and
	print output.  Got a standalone Chapel program
	computing the same thing and tucked that code
	back into fft.chpl.
	
	Also updated main() in fft.chpl to reflect new
	features and bug fixes in the compiler -- it's
	much better than the last time I worked on this...
	Nice job!!!

Modified files:
	chapel/test/hpcc/: fft.chpl 
Added files:
	chapel/test/hpcc/: twiddles.c twiddles.chpl twiddles.good 

---------------------------------------------------------------------------

09/18/06 18:27:49 -- marybeth

Log message:
	Adding a Chapel and a C version of the Random Access HPC benchmark.
	
	I started with the C version, extracting it from the HPC benchmark
	suite.  I had to modify it in order to make it a standalone program.
	
	Then, I did a pretty straightforward translation from C to Chapel.
	It's gross.  But, I wanted to make sure that the random number generation
	matched the C version.  Much more work is needed still.

Added files:
	chapel/test/studies/hpcc/RA/: ra.c ra.chpl 

---------------------------------------------------------------------------

09/18/06 20:44:11 -- deitz

Log message:
	Changed length() to length.

Modified files:
	chapel/test/domains/bradc/: queryLength.chpl 
Removed files:
	chapel/test/domains/bradc/: queryLength.future 

---------------------------------------------------------------------------

09/18/06 20:54:25 -- deitz

Log message:
	Added .good.

Added files:
	chapel/test/studies/hpcc/RA/: ra.good 

---------------------------------------------------------------------------

09/18/06 22:34:37 -- marybeth

Log message:
	Fixing earlier commit of Random Access files.  I meant to put them
	under the directory "marybeth."
	
	I also moved Steve's added ra.good file.

Added files:
	chapel/test/studies/hpcc/RA/marybeth/: ra.c ra.chpl ra.good 
Removed files:
	chapel/test/studies/hpcc/RA/: ra.chpl ra.c ra.good 

---------------------------------------------------------------------------

09/19/06 08:53:40 -- deitz

Log message:
	Removed .future.

Removed files:
	chapel/test/functions/deitz/: test_visible2.future 

---------------------------------------------------------------------------

09/19/06 10:16:00 -- deitz

Log message:
	Removed usage of Boehm GC and updated the Makefiles.
	
	Removed some dead code.

Modified files:
	./: Makefile 
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: baseAST.cpp expr.cpp primitive.cpp 
	                      symbol.cpp 
	chapel/compiler/backend/: beautify.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/ifa/: num.h 
	chapel/compiler/include/: alist.h baseAST.h bb.h chpl.h list.h 
	                          map.h primitive.h symscope.h vec.h 
	chapel/compiler/main/: arg.cpp driver.cpp runpasses.cpp 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: chapel.lex lexyacc.h modulefinder.lex 
	                         processTokens.cpp 
	chapel/compiler/util/: Makefile.share files.cpp misc.cpp 
	                       stringutil.cpp 
	chapel/make/: Makefile.base 
Removed files:
	chapel/compiler/include/: chplalloc.h uniqueName.h 
	chapel/compiler/util/: uniqueName.cpp 

---------------------------------------------------------------------------

09/19/06 11:28:35 -- waynew

Log message:
	Just another iterator test.

Added files:
	chapel/test/functions/waynew/: iterator8.chpl iterator8.good 

---------------------------------------------------------------------------

09/19/06 12:21:55 -- bradc

Log message:
	Committing a future test showing that the literal format
	0x1u is accepted by the compiler but results in a 0 value
	being stored.  If this were to somehow be fixed in the
	next few hours, it would be very useful to this afternoon's
	random access discussion... :)

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-uintliteral.chpl 
	                                    ra-bradc-uintliteral.future 
	                                    ra-bradc-uintliteral.good 

---------------------------------------------------------------------------

09/19/06 12:56:50 -- marybeth

Log message:
	Changed all unsigned literals (with the u suffix) to integer
	literals when assigning to uints.
	
	Now, the ran array is nonzero after HPCC_starts.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra.chpl 

---------------------------------------------------------------------------

09/19/06 13:25:30 -- deitz

Log message:
	Removed parent_ast_wrap and unnecessary uses of it.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp 
	chapel/compiler/include/: astutil.h 

---------------------------------------------------------------------------

09/19/06 13:29:32 -- waynew

Log message:
	auto _to_seq not in yet

Added files:
	chapel/test/functions/waynew/: iterator8.future 

---------------------------------------------------------------------------

09/19/06 14:05:37 -- waynew

Log message:
	Test creating an indefinite tuple domain.

Added files:
	chapel/test/domains/waynew/: tuple_domain.chpl tuple_domain.good 

---------------------------------------------------------------------------

09/19/06 14:38:31 -- waynew

Log message:
	.future file

Added files:
	chapel/test/domains/waynew/: tuple_domain.future 

---------------------------------------------------------------------------

09/19/06 14:47:37 -- bradc

Log message:
	My first draft rewrite of Mary Beth's ra.chpl code.  It
	seems to be working.  I've littered comments throughout
	it about things that we might like to improve in the
	implementation or language to clean it up.  I can walk
	us through these as part of today's meeting.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc.chpl ra-bradc.good 

---------------------------------------------------------------------------

09/19/06 14:56:22 -- bradc

Log message:
	Checking in some bugs/futures that I found while
	working on the RA benchmark:
	
	 ra-bradc-badlineno.chpl : an error message reports
	                           a line number, seemingly
	                           unrelated to the problem
	
	 ra-bradc-badparam.chpl :  the compiler complains
	                           about a param value even
	                           though working versions of
	                           the code declare the param
	                           in the same way
	
	 ra-bradc-duplcateErrors.chpl : the compiler reports
	                                the same error 6 times
	                                even though the function
	                                probably isn't being
	                                cloned
	
	 ra-bradc-illegalcast.chpl : a cast from domain to uint
	                             is accepted and codegened
	                             by the compiler to create
	                             nonsense;  should either be
	                             legal or report an error.
	
	Also checking in ra.c -- a version of the C code that I've
	been hacking on and embedding debug printing in.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: .cvsignore 
	                                    ra-bradc-badlineno.chpl 
	                                    ra-bradc-badlineno.future 
	                                    ra-bradc-badlineno.good 
	                                    ra-bradc-badparam.chpl 
	                                    ra-bradc-badparam.future 
	                                    ra-bradc-badparam.good 
	                                    ra-bradc-duplicateErrors.chpl 
	                                    ra-bradc-duplicateErrors.future 
	                                    ra-bradc-duplicateErrors.good 
	                                    ra-bradc-illegalcast.chpl 
	                                    ra-bradc-illegalcast.future 
	                                    ra-bradc-illegalcast.good 
	                                    ra.c 

---------------------------------------------------------------------------

09/19/06 14:57:42 -- bradc

Log message:
	Some minor updates to the emacs Chapel mode.

Modified files:
	chapel/etc/emacs/21.4/: font-lock.el 

---------------------------------------------------------------------------

09/19/06 14:58:52 -- bradc

Log message:
	Made start_test so that if the -onetest flag is used, things
	like NOTEST in the directory will be ignored.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

09/19/06 17:03:14 -- deitz

Log message:
	Changed the way in which ast wrapper nodes are automatically inserted.
	They are no longer (unsafely) added based on the dynamic type of a
	node in alist code.  They are now added when the list is accessed via
	a BaseAST.  So for example
	
	  fn->insertAtTail(new DefExpr(var));
	
	will put an ExprStmt around the DefExpr, but
	
	  fn->body->body->insertAtTail(new DefExpr(var));
	
	will not (resulting in a problem).
	
	Wrappers that are built are ExprStmt on expressions when inserted into
	a list that contains statements, DefExpr on ArgSymbols when inserted
	as a formal (use insertFormalAtTail or insertFormalAtHead now), and
	SymExpr on symbols when inserted into a CallExpr.
	
	An ExprStmt is also put around expressions that are inserted via
	insertBefore or insertAfter in a list of statements.

Modified files:
	chapel/compiler/AST/: astutil.cpp build.cpp expr.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp flattenFunctions.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         parallel.cpp 

---------------------------------------------------------------------------

09/19/06 17:13:32 -- bradc

Log message:
	Updated with commments added during the HPCC
	benchmarks meeting held today.

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc.chpl 

---------------------------------------------------------------------------

09/19/06 17:20:09 -- bradc

Log message:
	Man, in intents do work... Who woulda thunk it?
	Oh me of little faith... (I didn't even try them).

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc.chpl 

---------------------------------------------------------------------------

09/19/06 17:32:55 -- waynew

Log message:
	Added binary and hex unsigned literals.  Power to the unsigned!

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

09/19/06 18:04:05 -- waynew

Log message:
	Implemented automatic insertion of _to_seq.  _to_seq(iterator) returns a
	sequence.  Because our implemenation of iterator functions transforms the
	iterator into a class, things such as writeln(iterator) was no longer
	valid.  It needed to be manually replaced (in user .chpl code) with
	writeln(_to_seq(iterator)).  Now the replacement occurs automatically.
	
	Changed test files accordingly.  Power to the iterators!
	
	Cleaned up iterator transformation code a little more.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/test/arrays/deitz/domains/: test_domain2.chpl 
	chapel/test/classes/deitz/infer/: infer_field2.chpl 
	                                  infer_field2a.chpl 
	                                  infer_field2b.chpl 
	                                  infer_field2c.chpl 
	chapel/test/functions/deitz/: test_iterator1.chpl 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator1.chpl 
	                                        test_instantiate_iterator2.chpl 
	                                        test_instantiate_iterator3.chpl 
	                                        test_instantiate_iterator3a.chpl 
	chapel/test/functions/waynew/: iterator6.chpl iterator7.chpl 
	chapel/test/types/seq/deitz/: test_seq_tuple3.chpl 

---------------------------------------------------------------------------

09/20/06 09:41:54 -- deitz

Log message:
	Made AList<> non-generic, i.e., into AList.  This has not slowed
	compiler performance which improves slightly with this checkin.

Modified files:
	chapel/compiler/AST/: Makefile.share astutil.cpp baseAST.cpp 
	                      build.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: alist.h astutil.h baseAST.h build.h 
	                          expr.h parser.h stmt.h symbol.h type.h 
	                          yy.h 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	                         parallel.cpp 
Added files:
	chapel/compiler/AST/: alist.cpp 

---------------------------------------------------------------------------

09/20/06 09:45:56 -- deitz

Log message:
	Removed a dead routine.

Modified files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/compiler/include/: astutil.h 

---------------------------------------------------------------------------

09/20/06 10:36:02 -- waynew

Log message:
	Explicit _to_seq no longer required for iterators.

Removed files:
	chapel/test/functions/waynew/: iterator8.future 

---------------------------------------------------------------------------

09/20/06 11:59:46 -- waynew

Log message:
	Moved to indefinite dir.

Added files:
	chapel/test/domains/indefinite/waynew/: .cvsignore 
	                                        record_hash.chpl 
	                                        record_hash.good 
	                                        tuple_domain.chpl 
	                                        tuple_domain.future 
	                                        tuple_domain.good 
Removed files:
	chapel/test/domains/waynew/: .cvsignore record_hash.chpl 
	                             record_hash.good tuple_domain.chpl 
	                             tuple_domain.future 
	                             tuple_domain.good 

---------------------------------------------------------------------------

09/20/06 13:27:28 -- deitz

Log message:
	Removed .future, Wayne fixed this bug.

Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-uintliteral.future 

---------------------------------------------------------------------------

09/20/06 13:41:41 -- deitz

Log message:
	Removed sentinels from the alist implementation.
	
	This improves memory consumption but there is more to do.  Estimating
	from a graph output by massif valgrind on Jacobi, the peak memory in
	use decreases from 32M to 24M and the memory in use after resolve
	decreases from 17M to 7M.

Modified files:
	chapel/compiler/AST/: alist.cpp baseAST.cpp stmt.cpp type.cpp 
	chapel/compiler/include/: alist.h baseAST.h 
	chapel/compiler/passes/: copy_propagation.cpp normalize.cpp 

---------------------------------------------------------------------------

09/20/06 16:00:35 -- deitz

Log message:
	Changed the way error messages are reported to look more like gcc.
	
	Added "In function 'foo':" to error messages if we know what function
	the error occurred in.
	
	Reworked check_normalized and put a catch to only show the error for a
	variable undeclared to only print it once.  This gets it down to twice
	for
	
	  test/studies/hpcc/RA/bradc/ra-bradc-duplicateErrors.chpl
	
	because of nested functions being pulled out.
	
	Added a catch so the default == and != functions for records are not
	built if one already exists.
	
	Updated .goods.

Modified files:
	chapel/compiler/include/: misc.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         semanticChecks.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/classes/bradc/: callMethodOnClass.good 
	                            weirdinit.good 
	chapel/test/classes/deitz/: test_bad_function_noparens.good 
	                            test_inherit_mod1.good 
	                            test_inherit_mod2.good 
	                            test_inherit_mod3.good 
	                            test_method_call2.good 
	chapel/test/classes/deitz/inherit/: test_inherit_error1.good 
	                                    test_inherit_error2.good 
	                                    test_inherit_error3.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-2.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/classes/marybeth/: test_dispatch1-error.good 
	chapel/test/flowanalysis/recursion/: rec_fun-1.good 
	                                     rec_fun-2.good 
	                                     rec_fun-3.good 
	                                     rec_obj-1.good 
	                                     rec_obj-2.good 
	                                     rec_obj-3.good 
	chapel/test/functions/bradc/: intents-classes2-error.good 
	                              intents-error.good typefn2.good 
	chapel/test/functions/deitz/: test_bad_function.good 
	                              test_default_param3.good 
	                              test_return2.good 
	                              test_var_function1.good 
	chapel/test/functions/deitz/default/: test_default3-error.good 
	                                      test_default4-error.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	                                    test_named6-error.good 
	chapel/test/functions/jplevyak/: intent-5-error.good 
	                                 intent-7-error.good 
	                                 zeroarity-bound-error-1.good 
	chapel/test/studies/hpcc/RA/bradc/: 
	                                    ra-bradc-duplicateErrors.good 
	chapel/test/trivial/bradc/: defaultinit1a.good 
	                            initvarsamename.good 
	                            initvarsamename2.good 
	                            readmethod.good redefinevar.good 
	                            uintloop.good undefinedfn.good 
	                            undefinedfn2.good vardecls.good 
	                            vardecls1a.good whilescope2.good 
	chapel/test/trivial/bradc/entrypoint/: main2.good twomains.good 
	chapel/test/trivial/deitz/: foo.good 
	                            test_config_use_before_decl.good 
	                            test_infer1.good 
	                            test_int8_error.good 
	                            test_scope2.good 
	                            test_use_before_def1.good 
	                            test_use_before_def2.good 
	                            test_use_before_def3.good 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.good 
	chapel/test/trivial/roxana/: test_param_decl2.good 
	                             test_param_decl3.good 
	chapel/test/types/enum/deitz/: test_enum6.good 
	chapel/test/types/file/bradc/: badfile.good badfile2.good 
	                               badfile3.good 
	chapel/test/types/seq/bradc/: emptySeq3.good length.modify.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/deitz/part1/: 
	                                               test_clone_class1b.good 
	chapel/test/types/type_variables/deitz/part3/: 
	                                               test_overinstantiate1.good 
	                                               test_overinstantiate1a.good 
	chapel/test/types/type_variables/deitz/part7/: construct-1b.good 
	                                               test_error1.good 
	                                               test_infer_class1.good 
	                                               test_infer_class2.good 
	chapel/test/types/type_variables/jplevyak/: where-3-error.good 

---------------------------------------------------------------------------

09/20/06 16:32:57 -- waynew

Log message:
	Further partial checkin of indefinite hash function implementation.
	 - Added member? query function.
	 - Added tuple indefinite hash function creation.
	 - Hashing now done on 64b integers, rather than 64b uint's. Hash functions
	   do not return a negative number.  Temporary hack.
	 - == and != comparison function for tuples.
	
	Some tests testing the hashing functions.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl 
Added files:
	chapel/test/domains/indefinite/waynew/: indef1.chpl indef1.good 
	                                        indef2.chpl indef2.good 
	                                        tuple_index.chpl 
	                                        tuple_index.good 
	                                        tuple_index2.chpl 
	                                        tuple_index2.good 

---------------------------------------------------------------------------

09/21/06 09:04:57 -- deitz

Log message:
	Fixed function resolution errors further to make them look more like
	gcc errors and to get rid of extra "in function" info lines.
	
	Note that the function reported in "In function" is sometimes
	internal.  Need to fix this.

Modified files:
	chapel/compiler/include/: misc.h 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/classes/bradc/: callMethodOnClass.good 
	chapel/test/classes/deitz/: test_inherit_mod1.good 
	                            test_inherit_mod2.good 
	                            test_inherit_mod3.good 
	                            test_method_call2.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-2.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/functions/deitz/: test_bad_function.good 
	                              test_default_param3.good 
	chapel/test/functions/deitz/default/: test_default3-error.good 
	                                      test_default4-error.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/deitz/part3/: 
	                                               test_overinstantiate1.good 
	                                               test_overinstantiate1a.good 
	chapel/test/types/type_variables/deitz/part7/: construct-1b.good 
	                                               test_error1.good 
	                                               test_infer_class1.good 
	                                               test_infer_class2.good 
	chapel/test/types/type_variables/jplevyak/: where-3-error.good 

---------------------------------------------------------------------------

09/21/06 15:56:09 -- waynew

Log message:
	Added indefinite domain remove method (slow implementation) and couple of
	tests.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	                          _chpl_indefinite.chpl 
Added files:
	chapel/test/domains/indefinite/waynew/: add_remove.chpl 
	                                        add_remove.good 
	                                        add_remove2.chpl 
	                                        add_remove2.good 

---------------------------------------------------------------------------

09/22/06 16:55:37 -- deitz

Log message:
	Initial checkin of new spec with section The Conditional Statement
	created.
	
	Stubs for new sections are automatically created by a preprocessing
	perl script.  This also checks for duplicate section names and for
	unused files (changed names).
	
	A good start to the table of contents is complete for all but two
	sections:  Reductions and Scans, and Input and Output.
	
	We may want a more detail subsection breakdown for the Language
	Overview section as well.

Added files:
	chapel/spec/: .cvsignore Makefile chapel_listing.tex 
	              preprocess.pl spec.tex stub.tex syntax_listing.tex 
	chapel/spec/Acknowledgments/: Acknowledgments.tex 
	chapel/spec/Classes/: Accessing_Base_Class_Fields.tex 
	                      Ambiguities_in_Constructor_Calls.tex 
	                      Automatic_Memory_Management.tex 
	                      Class_Assignment.tex 
	                      Class_Constructors.tex 
	                      Class_Declarations.tex 
	                      Class_Field_Accesses.tex Class_Fields.tex 
	                      Class_Instances.tex Class_Method_Calls.tex 
	                      Class_Method_Declarations.tex 
	                      Class_Methods.tex 
	                      Class_Methods_without_Parentheses.tex 
	                      Classes.tex 
	                      Default_Getters_and_Setters.tex 
	                      Derived_Class_Constructors.tex 
	                      Derived_Class_Definition.tex 
	                      Getters_and_Setters.tex Inheritance.tex 
	                      Inheriting_from_Multiple_Classes.tex 
	                      Iteration_over_Classes.tex 
	                      Nested_Type_Definitions_in_Classes.tex 
	                      Overriding_Base_Class_Functions.tex 
	                      Shadowing_Base_Class_Fields.tex 
	                      The_Default_Constructor.tex 
	                      The_Iteration_Interface.tex 
	                      The_em_this_Method.tex 
	                      The_em_this_Reference.tex 
	                      User-Defined_Constructors.tex 
	                      User-Defined_Getters_and_Setters.tex 
	chapel/spec/Conversions/: Conversions.tex 
	                          Explicit_Class_Conversions.tex 
	                          Explicit_Conversions.tex 
	                          Explicit_Enumeration_Conversions.tex 
	                          Explicit_Numeric_Conversions.tex 
	                          Explicit_Record_Conversions.tex 
	                          Implicit_Class_Conversions.tex 
	                          Implicit_Compile-Time_Constant_Conversions.tex 
	                          Implicit_Conversions.tex 
	                          Implicit_Enumeration_Conversions.tex 
	                          Implicit_Numeric_Conversions.tex 
	                          Implicit_Record_Conversions.tex 
	chapel/spec/Domains_and_Arrays/: 
	                                 Adding_Indices_to_Indefinite_Domains.tex 
	                                 Adding_Indices_to_Opaque_Domains.tex 
	                                 Adding_Indices_to_Sparse_Arithmetic_Domains.tex 
	                                 Anonymous_Domains.tex 
	                                 Arithmetic_Array_Indexing.tex 
	                                 Arithmetic_Domain_Index_Types.tex 
	                                 Arithmetic_Domain_Indexing.tex 
	                                 Arithmetic_Domain_and_Array_Types.tex 
	                                 Arithmetic_Domains_and_Arithmetic_Sequences.tex 
	                                 Arithmetic_Domains_and_Arrays.tex 
	                                 Array_Assignment.tex 
	                                 Array_Indexing.tex 
	                                 Array_Initialization.tex 
	                                 Array_Promotion_of_Scalar_Functions.tex 
	                                 Array_Slicing.tex 
	                                 Array_Types.tex Arrays.tex 
	                                 Arrays_of_Arrays.tex 
	                                 Association_of_Arrays_to_Domains.tex 
	                                 Association_of_Subdomains_to_Domains.tex 
	                                 Destructive_Reallocation_of_Arrays.tex 
	                                 Domain_Assignment.tex 
	                                 Domain_Types.tex Domains.tex 
	                                 Domains_and_Arrays.tex 
	                                 Enumerated_Domain_Index_Types.tex 
	                                 Enumerated_Domain_and_Array_Types.tex 
	                                 Enumerated_Domains_and_Arrays.tex 
	                                 Formal_Arguments_of_Arithmetic_Array_Type.tex 
	                                 Formal_Arguments_of_Array_Type.tex 
	                                 Formal_Arguments_of_Domain_Type.tex 
	                                 Indefinite_Domain_Index_Types.tex 
	                                 Indefinite_Domain_and_Array_Types.tex 
	                                 Indefinite_Domains_and_Arrays.tex 
	                                 Index_Methods_on_Domains.tex 
	                                 Index_Methods_on_Subdomains.tex 
	                                 Index_Types.tex 
	                                 Iteration_over_Arrays.tex 
	                                 Iteration_over_Domains.tex 
	                                 Methods_on_Arithmetic_Domains_and_Arrays.tex 
	                                 Methods_on_Enumerated_Domains_and_Arrays.tex 
	                                 Methods_on_Indefinite_Domains_and_Arrays.tex 
	                                 Methods_on_Opaque_Domains_and_Arrays.tex 
	                                 Methods_on_Product_Domains_and_Arrays.tex 
	                                 Multidimensional_Arithmetic_Domains_and_Arrays.tex 
	                                 Opaque_Domain_Index_Types.tex 
	                                 Opaque_Domain_and_Array_Types.tex 
	                                 Opaque_Domains_and_Arrays.tex 
	                                 Preservative_Reallocation_of_Arrays.tex 
	                                 Product_Domain_Definition.tex 
	                                 Product_Domains_and_Arrays.tex 
	                                 Removing_Indices_from_Indefinite_Domains.tex 
	                                 Removing_Indices_from_Opaque_Domains.tex 
	                                 Removing_Indices_from_Sparse_Arithmetic_Domains.tex 
	                                 Sparse_Arithmetic_Domains_and_Arrays.tex 
	                                 Strided_Arithmetic_Domains_and_Arrays.tex 
	                                 Subdomain_Definition.tex 
	                                 Subdomains.tex 
	chapel/spec/Expressions/: Addition_Operators.tex 
	                          Arithmetic_Operators.tex 
	                          Bitwise_And_Operators.tex 
	                          Bitwise_Complement_Operators.tex 
	                          Bitwise_Operators.tex 
	                          Bitwise_Or_Operators.tex 
	                          Bitwise_Xor_Operators.tex 
	                          Call_Expressions.tex Casts.tex 
	                          Concatentation_Operators.tex 
	                          Conditional_Expressions.tex 
	                          Constant_Expressions.tex 
	                          Division_Operators.tex 
	                          Equality_Comparison_Operators.tex 
	                          Exponentiation_Operators.tex 
	                          Expressions.tex Forall_Expressions.tex 
	                          Indexing_Expressions.tex 
	                          Let_Expressions.tex 
	                          Literal_Expressions.tex 
	                          Logical_And_Operators.tex 
	                          Logical_Negation_Operators.tex 
	                          Logical_Operators.tex 
	                          Logical_Or_Operators.tex 
	                          Member_Access_Expressions.tex 
	                          Modulus_Operators.tex 
	                          Multiplication_Operators.tex 
	                          Ordered_Comparison_Operators.tex 
	                          Other_Operators.tex 
	                          Primary_Expressions.tex 
	                          Relational_Operators.tex 
	                          Shift_Operators.tex 
	                          Subtraction_Operators.tex 
	                          The_Arithmetic_Domain_By_Operator.tex 
	                          The_Sequence_By_Operator.tex 
	                          The_Sequence_Concatenation_Operator.tex 
	                          The_String_Concatenation_Operator.tex 
	                          The_Type_Query_Expression.tex 
	                          Unary_Minus_Operators.tex 
	                          Unary_Plus_Operators.tex 
	                          Variable_Expressions.tex 
	chapel/spec/Functions/: Accessing_Outer_Variables.tex 
	                        Default_Values.tex 
	                        Determining_Candidate_Functions.tex 
	                        Determining_More_Specific_Functions.tex 
	                        Explicit_Setter_Functions.tex 
	                        Formal_Arguments.tex Function_Calls.tex 
	                        Function_Definitions.tex 
	                        Function_Overloading.tex 
	                        Function_Resolution.tex Functions.tex 
	                        Functions_with_Class_Arguments.tex 
	                        Identifying_Visible_Functions.tex 
	                        Intents.tex Most_Specific_Function.tex 
	                        Named_Arguments.tex Nested_Functions.tex 
	                        Operator_Overloading.tex 
	                        Special_Functions.tex 
	                        The_Blank_Intent.tex The_In_Intent.tex 
	                        The_Inout_Intent.tex The_Out_Intent.tex 
	                        Variable_Functions.tex 
	                        Variable_Length_Argument_Lists.tex 
	                        Visibility_and_Function_Resolution.tex 
	chapel/spec/Generics/: Formal_Arguments_of_Generic_Type.tex 
	                       Formal_Arguments_with_Queried_Types.tex 
	                       Formal_Arguments_without_Types.tex 
	                       Function_Resolution_and_Generic_Functions.tex 
	                       Function_Visibility_in_Generic_Functions.tex 
	                       Generic_Array_Argument_Types.tex 
	                       Generic_Default_Constructors.tex 
	                       Generic_Domain_and_Sequence_Types.tex 
	                       Generic_Functions.tex Generic_Methods.tex 
	                       Generic_Types.tex Generics.tex 
	                       Instantiating_Generic_Functions.tex 
	                       Instantiating_Parameterized_Generics.tex 
	                       Parameter_Expressions.tex 
	                       Parameters_and_Generics.tex 
	                       The_em_elt_type_Type.tex 
	                       Type_Aliases_and_Generic_Types.tex 
	                       Type_Expressions.tex 
	                       Where_Expressions.tex 
	chapel/spec/Input_and_Output/: Input_and_Output.tex 
	chapel/spec/Iterators/: Iterator_Calls.tex 
	                        Iterator_Functions.tex Iterators.tex 
	                        Iterators_as_Sequences.tex 
	                        Iterators_in_For_and_Forall_Loops.tex 
	                        Making_a_Class_an_Iterator.tex 
	                        Returning_Values.tex 
	                        The_em_getHeadCursor_Method.tex 
	                        The_em_getNextCursor_Method.tex 
	                        The_em_getValue_Method.tex 
	                        The_em_isValidCursorQ_Method.tex 
	                        The_em_rank_Parameter.tex 
	                        Yielding_Values.tex 
	chapel/spec/Language_Overview/: Language_Overview.tex 
	chapel/spec/Lexical_Structure/: Case_Sensitivity.tex 
	                                Comments.tex 
	                                Compile-Time_Conditionals.tex 
	                                Grouping_Tokens.tex 
	                                Identifiers.tex Keywords.tex 
	                                Lexical_Structure.tex 
	                                Literals.tex 
	                                Operators_and_Punctuation.tex 
	                                Programs.tex Tokens.tex 
	                                White_Space.tex 
	chapel/spec/Locality_and_Distribution/: 
	                                        BlockCyclic_Distribution.tex 
	                                        Block_Distribution.tex 
	                                        Cut_Distribution.tex 
	                                        Cyclic_Distribution.tex 
	                                        Distributed_Arrays.tex 
	                                        Distributed_Domains.tex 
	                                        Distributions.tex 
	                                        Locales.tex 
	                                        Locality_and_Distribution.tex 
	                                        On.tex 
	                                        On_and_Forall_Loops.tex 
	                                        On_and_Iterators.tex 
	                                        Parallel_Execution_Model.tex 
	                                        Predefined_Locales_Array.tex 
	                                        Querying_the_Locale_of_a_Variable.tex 
	                                        Specifying_Locales_for_Computation.tex 
	                                        Standard_Distributions.tex 
	                                        Undistributed_Domains_and_Arrays.tex 
	                                        User-Defined_Distributions.tex 
	chapel/spec/Modules/: Command-Line_Arguments.tex 
	                      Explicit_Naming.tex 
	                      Implicit_Module_Names.tex 
	                      Module_Execution.tex Module_Scopes.tex 
	                      Modules.tex Nested_Modules.tex 
	                      Program_Execution.tex 
	                      Programs_with_a_Single_Module.tex 
	                      The_em_finalize_Function.tex 
	                      The_em_initialize_Function.tex 
	                      The_em_main_Function.tex Using_Modules.tex 
	chapel/spec/Notation/: Notation.tex 
	chapel/spec/Organization/: Organization.tex 
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Atomic_Transactions.tex 
	                                              Begin.tex 
	                                              Cobegin.tex 
	                                              Forall.tex 
	                                              Functions_on_Synchronization_Variables.tex 
	                                              Implicit_Synchronization_on_Variables.tex 
	                                              Memory_Consistency.tex 
	                                              Ordered_Expressions.tex 
	                                              Ordered_Forall.tex 
	                                              Parallel_Expressions.tex 
	                                              Parallel_Iterators.tex 
	                                              Parallel_Statements.tex 
	                                              Parallelism_and_Synchronization.tex 
	                                              Serial.tex 
	                                              Single_Assignment_Variables.tex 
	                                              Strong_Atomicity.tex 
	                                              Synchronization_Variables_of_Class_Type.tex 
	                                              Synchronization_Variables_of_Record_Type.tex 
	                                              Weak_Atomicity.tex 
	chapel/spec/Records/: Class_and_Record_Differences.tex 
	                      Record_Assignment.tex 
	                      Record_Declarations.tex 
	                      Record_Inheritance.tex Records.tex 
	                      Records_as_Value_Classes.tex 
	chapel/spec/Reductions_and_Scans/: Reductions_and_Scans.tex 
	chapel/spec/Scope/: Scope.tex 
	chapel/spec/Sequences/: Arithmetic_Sequences.tex 
	                        Conversions_Between_Sequences_and_Tuples.tex 
	                        Filtering_Predicates.tex 
	                        Indefinite_Sequences.tex 
	                        Indexing_into_Strings_with_Arithmetic_Sequences.tex 
	                        Iteration_over_Sequences.tex 
	                        Methods_and_Functions_on_Sequences.tex 
	                        Sequence_Assignment.tex 
	                        Sequence_Concatenation.tex 
	                        Sequence_Equality.tex 
	                        Sequence_Expressions.tex 
	                        Sequence_Indexing.tex 
	                        Sequence_Indexing_by_Integers.tex 
	                        Sequence_Indexing_by_Tuples.tex 
	                        Sequence_Promotion_of_Scalar_Functions.tex 
	                        Sequence_Type_Definitions.tex 
	                        Sequences.tex 
	                        Sequences_in_Conditional_Statements.tex 
	                        Sequences_in_Logical_Contexts.tex 
	                        Sequences_in_Select_Statements.tex 
	                        Sequences_in_While_and_Do_While_Loops.tex 
	                        Sequences_of_One-Character_Strings.tex 
	                        Strided_Arithmetic_Sequences.tex 
	                        Tensor_Product_Promotion.tex 
	                        The_em_length_Method.tex 
	                        The_em_reshape_Function.tex 
	                        The_em_reverse_Method.tex 
	                        The_em_spread_Function.tex 
	                        The_em_transpose_Function.tex 
	                        Zipper_Promotion.tex 
	chapel/spec/Standard_Modules/: Bitwise_Functions.tex Math.tex 
	                               Random_Numbers.tex 
	                               Standard_Modules.tex System.tex 
	                               Timers.tex 
	chapel/spec/Statements/: Assignment_Statements.tex Blocks.tex 
	                         Declaration_Statements.tex 
	                         Expression_Statements.tex 
	                         Function_Declaration_Statements.tex 
	                         Module_Declaration_Statements.tex 
	                         Statements.tex 
	                         Tensor_Product_Iteration.tex 
	                         The_Atomic_Statement.tex 
	                         The_Begin_Statement.tex 
	                         The_Cobegin_Statement.tex 
	                         The_Conditional_Statement.tex 
	                         The_Empty_Statement.tex 
	                         The_For_and_Forall_Loops.tex 
	                         The_On_Statement.tex 
	                         The_Return_Statement.tex 
	                         The_Select_Statement.tex 
	                         The_Serial_Statement.tex 
	                         The_Type_Select_Statement.tex 
	                         The_Use_Statement.tex 
	                         The_While_and_Do_While_Loops.tex 
	                         The_Yield_Statement.tex 
	                         Type_Declaration_Statements.tex 
	                         Variable_Declaration_Statements.tex 
	                         Zipper_Iteration.tex 
	chapel/spec/Synchronization/: Synchronization.tex 
	chapel/spec/Tuples/: Declaring_Homogeneous_Tuples.tex 
	                     Formal_Argument_Declarations_in_a_Tuple.tex 
	                     Formal_Arguments_of_Tuple_Type.tex 
	                     Homogeneous_Tuples.tex 
	                     Ignoring_Values_with_Underscore.tex 
	                     Indexing_of_Homogeneous_Tuples.tex 
	                     Tuple_Assignment.tex 
	                     Tuple_Destructuring.tex 
	                     Tuple_Expressions.tex Tuple_Indexing.tex 
	                     Tuple_Type_Definitions.tex Tuples.tex 
	                     Variable_Declarations_in_a_Tuple.tex 
	chapel/spec/Types/: Class_Types.tex Complex_Types.tex 
	                    Domain_and_Array_Types.tex 
	                    Enumerated_Types.tex 
	                    Floating-Point_Types.tex 
	                    Primitive_Type_Literals.tex 
	                    Primitive_Types.tex Record_Types.tex 
	                    Sequence_Types.tex 
	                    Signed_and_Unsigned_Integral_Types.tex 
	                    The_Bool_Type.tex The_Locale_Type.tex 
	                    The_String_Type.tex Tuple_Types.tex 
	                    Type_Aliases.tex Types.tex Union_Types.tex 
	chapel/spec/Unions/: Record_and_Union_Differences.tex 
	                     The_Type_Select_Statement_and_Unions.tex 
	                     Union_Assignment.tex Union_Declarations.tex 
	                     Union_Field_Accesses.tex Union_Fields.tex 
	                     Union_Inheritance.tex Unions.tex 
	chapel/spec/Variables/: Compile-Time_Constants.tex 
	                        Configuration_Variables.tex 
	                        Constants.tex Default_Initialization.tex 
	                        Global_Variables.tex 
	                        Local_Type_Inference.tex 
	                        Local_Variables.tex 
	                        Runtime_Constants.tex 
	                        Single_Variables.tex 
	                        Synchronization_Variables.tex 
	                        Variable_Declarations.tex Variables.tex 

---------------------------------------------------------------------------

09/22/06 17:26:39 -- deitz

Log message:
	Added some index entries.

Modified files:
	chapel/spec/: Makefile spec.tex 
	chapel/spec/Statements/: The_Conditional_Statement.tex 

---------------------------------------------------------------------------

09/25/06 08:07:54 -- deitz

Log message:
	Reworded conditional statements section.
	
	Added a couple new sections: block-level statements, operator
	precedence, user-defined compiler errors.
	
	Filled in expression statements and block-level statements sections.

Modified files:
	chapel/spec/: spec.tex syntax_listing.tex 
	chapel/spec/Statements/: Expression_Statements.tex 
	                         The_Conditional_Statement.tex 
Added files:
	chapel/spec/Expressions/: Miscellaneous_Operators.tex 
	                          Operator_Overloading.tex 
	                          Operator_Precedence_and_Associativity.tex 
	                          Operators.tex 
	chapel/spec/Lexical_Structure/: User-Defined_Compiler_Errors.tex 
	chapel/spec/Statements/: Block_Level_Statements.tex 
Removed files:
	chapel/spec/Expressions/: Concatentation_Operators.tex 
	                          Other_Operators.tex 
	chapel/spec/Functions/: Operator_Overloading.tex 

---------------------------------------------------------------------------

09/25/06 10:16:08 -- deitz

Log message:
	Fixed a minor bug in function resolution in which ambiguous errors
	were not flagged, being resolved instead almost arbitrarily.
	
	Changed user-defined compiler error function name from "error" to
	"compilerError" as it is more descriptive.
	
	Added (though commented out for now) error cases for applying the
	binary operators to an int(64) and a uint(64).  These are commented
	out because they result in an ambiguity.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_seq.chpl 

---------------------------------------------------------------------------

09/25/06 11:00:50 -- deitz

Log message:
	Added error check to guard against using a binary operator on an
	int(64) and a uint(64) unless the int(64) is a parameter that is
	positive.
	
	This is in the compiler since putting it the base module resulted in
	an ambiguous resolution error (as it should).
	
	Updated one test output file.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/test/trivial/deitz/: test_int_uint.good 

---------------------------------------------------------------------------

09/25/06 13:12:06 -- bradc

Log message:
	Removed cygwin-specific #ifdef which breaks build and
	no longer seems necessary now that GC is removed.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

09/25/06 13:14:09 -- bradc

Log message:
	Rewrote twiddles.chpl test to be 0-based rather than 1-based,
	which cleaned it up greatly.
	
	Added bitreverse.c which tests the bit reverse function in C
	and implements some MTA-specific behavior in C.

Modified files:
	chapel/test/hpcc/: twiddles.chpl 
Added files:
	chapel/test/hpcc/: bitreverse.c twiddles-onebased.chpl 
	                   twiddles-onebased.good 

---------------------------------------------------------------------------

09/25/06 13:43:46 -- bradc

Log message:
	Added an interesting future test in which a function that
	returns nothing is used to initialize a variable with
	inferred type.  The compiler infers the variable to have
	void type, which leads to other confusing messages.  My
	assumption is that we'd like to signal an error when the
	programmer attempts to use the return value of a function
	with no return type.

Added files:
	chapel/test/functions/bradc/: forgotReturn.chpl 
	                              forgotReturn.future 
	                              forgotReturn.good 
	chapel/test/functions/bradc/useBeforeDef/: .cvsignore 

---------------------------------------------------------------------------

09/25/06 13:54:52 -- deitz

Log message:
	Filled in Scope section (section 1).  Filled in blocks section.
	
	Added some more index terms.

Modified files:
	chapel/spec/Scope/: Scope.tex 
	chapel/spec/Statements/: Block_Level_Statements.tex Blocks.tex 
	                         Expression_Statements.tex 

---------------------------------------------------------------------------

09/25/06 14:58:03 -- deitz

Log message:
	Add NOOP primitive for use in the implementation.
	
	Added CallExpr* FnSymbol::visiblePoint to point to a spot in the code
	that a function should look at to determine what functions are
	visible.  This is particularly important for functions with class
	arguments which are globally visible (and so denested before function
	resolution).  This will also be used to mark the point of
	instantiation of a function.
	
	Stopped treating all functions as globally visible.
	
	Specialized global function determination so that functions that take
	arguments of type of the array or domain class are not treated
	globally.
	
	Changed "In function" message to print out outermost function for
	nested functions.
	
	This fixes regression of functions/bradc/intents-error.
	
	Removed .future for studies/hpcc/RA/bradc/ra-bradc-duplicateErrors.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp 
	                      symscope.cpp 
	chapel/compiler/include/: primitive.h symbol.h 
	chapel/compiler/passes/: normalize.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/functions/bradc/: intents-error.good 
	chapel/test/studies/hpcc/RA/bradc/: 
	                                    ra-bradc-duplicateErrors.good 
Removed files:
	chapel/test/studies/hpcc/RA/bradc/: 
	                                    ra-bradc-duplicateErrors.future 

---------------------------------------------------------------------------

09/25/06 15:07:28 -- bradc

Log message:
	Added two futures:
	
	- one notes that <<= and >>= are not supported in our current
	  implementation or spec.  I believe they should be.  If there's
	  disagreement on this topic, let me know.
	
	- the other captures a very confusing case in which a 2D array
	  is indexed in one dimension or as if it was two 1D arrays,
	  both of which turn up somewhat surprising results.  My
	  preference is to see this declared as an error.  If the
	  current behavior is expected in the language (and considered
	  useful/attractive), let me know.  I'm finding it error-prone.

Added files:
	chapel/test/arrays/bradc/: twoDasTwoOneDs.chpl 
	                           twoDasTwoOneDs.future 
	                           twoDasTwoOneDs.good 
	chapel/test/trivial/bradc/: shiftAssignOps.chpl 
	                            shiftAssignOps.future 
	                            shiftAssignOps.good 

---------------------------------------------------------------------------

09/25/06 15:16:43 -- deitz

Log message:
	Added spec readme file.

Added files:
	chapel/spec/: README 

---------------------------------------------------------------------------

09/25/06 15:32:13 -- deitz

Log message:
	Use Symbol::isCompilerTemp to mark functions as built by the compiler.
	They are then not used to print out the "In function" line in the
	error messages.  This is done currently only for the Module's init
	functions which are built by the compiler and so the name of which
	should not be printed out.
	
	Updated some .goods to reflect this change.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/classes/deitz/: test_bad_function_noparens.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-2.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/classes/marybeth/: test_dispatch1-error.good 
	chapel/test/functions/deitz/: test_bad_function.good 
	                              test_default_param3.good 
	chapel/test/functions/deitz/default/: test_default3-error.good 
	                                      test_default4-error.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	                                    test_named6-error.good 
	chapel/test/functions/jplevyak/: intent-7-error.good 
	                                 zeroarity-bound-error-1.good 
	chapel/test/trivial/bradc/: initvarsamename.good uintloop.good 
	                            whilescope2.good 
	chapel/test/trivial/deitz/: foo.good 
	                            test_config_use_before_decl.good 
	                            test_int8_error.good 
	                            test_int_uint.good 
	                            test_use_before_def1.good 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.good 
	chapel/test/types/file/bradc/: badfile.good badfile2.good 
	                               badfile3.good 
	chapel/test/types/seq/bradc/: emptySeq3.good length.modify.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/deitz/part7/: construct-1b.good 
	                                               test_error1.good 
	                                               test_infer_class1.good 
	                                               test_infer_class2.good 
	chapel/test/types/type_variables/jplevyak/: where-3-error.good 

---------------------------------------------------------------------------

09/25/06 15:55:16 -- waynew

Log message:
	Changed complex(w) to mean real(w/2) + imag(w/2).
	 - Changed default is complex(128).
	 - We no longer have complex(32).  We should have complex(w), where w=64, 128,
	   and 256.
	 - Changed internal enum widths from FLOAT_SIZE_x -> COMPLEX_SIZE_x.
	 - Added IF1_complex_type.  (Why do we still use IF1?).
	 - complex(32)->complex(64) and complex(64)->complex(128) in a bunch of tests
	   and .good's.
	 - misc. i/o routines with complex.
	
	Other
	 - We no longer support max/min on complex types.
	 - chplmem_test so that it's easier to see that the output is correct.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/ifa/: num.cpp num.h 
	chapel/compiler/include/: chpltypes.h symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/runtime/include/: chplio.h chpltypes.h config.h 
	chapel/runtime/src/: chplmem_tests.c chpltypes.c config.c 
	chapel/test/memory/shannon/: allocAndFree.good 
	chapel/test/trivial/deitz/: test_format_primitives.chpl 
	chapel/test/trivial/waynew/: mintest.chpl 
	chapel/test/types/coerce/bradc/: printcomplex.chpl 
	                                 printzeroes.chpl tostring.chpl 
	                                 tostring.good 
	chapel/test/types/complex/waynew/: complex-simple.chpl 
	                                   complex-simple.good 

---------------------------------------------------------------------------

09/25/06 15:59:16 -- bradc

Log message:
	Adding a future which shows what are either bugs in
	using hex initializers, or a major thinko in my head.

Added files:
	chapel/test/types/scalar/bradc/: uintinit.chpl uintinit.future 
	                                 uintinit.good 

---------------------------------------------------------------------------

09/25/06 16:06:28 -- deitz

Log message:
	Added an error message to catch use of a void value earlier.
	
	Removed a .future.
	
	Fixed a bug in the standard sleep function in which it was trying to
	return a void value.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/test/functions/bradc/: forgotReturn.good 
Removed files:
	chapel/test/functions/bradc/: forgotReturn.future 

---------------------------------------------------------------------------

09/25/06 16:58:13 -- bradc

Log message:
	More HPCC FT explorations:
	
	- bitreverse.chpl and bitreverse2.chpl are the bit reverse
	  function, written using some bit functions that I think
	  we'll want to support in a standard (explicitly loaded)
	  bitOps module to make the NSA happy.  I've implemented
	  those in the math module for now as a placeholder, and
	  will check in in its own commit step.
	
	- twiddles-advanced.chpl and twiddles-advanced2.chpl are
	  two futures that query information about arrays that
	  are passed in in advanced ways.  There's no short-term
	  need to get these working, but I wanted to capture
	  them for the long-term because I keep finding myself
	  wanting something like this.

Added files:
	chapel/test/hpcc/: .cvsignore bitreverse.chpl bitreverse.good 
	                   bitreverse2.chpl bitreverse2.good 
	                   twiddles-advanced.chpl 
	                   twiddles-advanced.future 
	                   twiddles-advanced.good 
	                   twiddles-advanced2.chpl 
	                   twiddles-advanced2.future 
	                   twiddles-advanced2.good 

---------------------------------------------------------------------------

09/25/06 16:59:43 -- deitz

Log message:
	Added Assignment Statements section (with all assignment operators
	that we will support), and begin and cobegin statement sections which
	are forward references that define the syntax and the statements
	briefly.

Modified files:
	chapel/spec/: syntax_listing.tex 
	chapel/spec/Statements/: Assignment_Statements.tex Blocks.tex 
	                         The_Begin_Statement.tex 
	                         The_Cobegin_Statement.tex 

---------------------------------------------------------------------------

09/25/06 17:03:20 -- deitz

Log message:
	Added support for %=, **=, &&=, ||=, <<=, and >>=.
	
	Added a test to test all op= operators.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_assignop.chpl 
	                            test_assignop.good 
Removed files:
	chapel/test/trivial/bradc/: shiftAssignOps.future 

---------------------------------------------------------------------------

09/25/06 17:28:39 -- bradc

Log message:
	Added some bit-oriented functions to the math module for now.
	Eventually they should be placed in an optionally-loaded module
	for bit Operations (and probably renamed/genericized -- I didn't
	spend much time on the names, and hard-coded lots of them to
	specific sizes and types due to strange interactions between
	ints and uints).  We should also review the library of bit
	operators that the NSA requests from the MTA and similar
	architectures to fill out this list to a full suite of gov't-
	compliant operators (assuming that it's legal for us to do so).
	
	Routines I added:
	
	  - lg -> takes an int and returns the log(2) of that value.
	          Could use a smarter algorithm if we had the "find
	          uppermost left bit" operator, but I wasn't sure
	          what to call that, so wrote it my dumb old way for
	          now
	
	  - bitMatWrite -> writes out a 64-bit uint value as an 8x8
	          bit matrix.  Intended for debugging primarily
	
	  - bitMatMultOr -> does a bitwise matrix-multiplication of
	          2 64-bit uint values using bitwise-or as the
	          combinator
	
	  - bitReverse -> reverses the lower "numBits" bits of a 64
	          bit uint value
	
	  - bitRotLeft, bitRotRight -> circularly shifts a 64-bit
	          uint value

Modified files:
	chapel/modules/standard/: _chpl_math.chpl 

---------------------------------------------------------------------------

09/25/06 17:42:04 -- bradc

Log message:
	Moved the contents of the old hpcc/ directory under the
	studies/hpcc directory.  Other than this move, did two
	small changes:
	
	  - enabled testing for the FFT directory (didn't realize
	    that it hadn't been on earlier)
	
	  - merged the recent changes to the twiddles and bitReverse
	    functions in the twiddles.chpl and bitreverse.chpl
	    tests into the main fft.chpl file and added a .good file
	    for the test.

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: .cvsignore README 
	                                     bitreverse.c 
	                                     bitreverse.chpl 
	                                     bitreverse.good 
	                                     bitreverse2.chpl 
	                                     bitreverse2.good fft.c 
	                                     fft.chpl 
	                                     twiddles-advanced.chpl 
	                                     twiddles-advanced.future 
	                                     twiddles-advanced.good 
	                                     twiddles-advanced2.chpl 
	                                     twiddles-advanced2.future 
	                                     twiddles-advanced2.good 
	                                     twiddles-onebased.chpl 
	                                     twiddles-onebased.good 
	                                     twiddles.c twiddles.chpl 
	                                     twiddles.good 
	chapel/test/studies/hpcc/RA/bradc/earlyVersions/: .cvsignore 
	                                                  NOTEST 
	                                                  randomaccess-distributed.chpl 
	                                                  randomaccess-local.chpl 
	                                                  randomaccess-redundant.chpl 
Removed files:
	chapel/test/hpcc/: NOTEST README bitreverse.c bitreverse.chpl 
	                   bitreverse.good bitreverse2.chpl 
	                   bitreverse2.good fft.c fft.chpl 
	                   randomaccess-distributed.chpl 
	                   randomaccess-local.chpl 
	                   randomaccess-redundant.chpl 
	                   twiddles-advanced.chpl 
	                   twiddles-advanced.future 
	                   twiddles-advanced.good 
	                   twiddles-advanced2.chpl 
	                   twiddles-advanced2.future 
	                   twiddles-advanced2.good 
	                   twiddles-onebased.chpl twiddles-onebased.good 
	                   twiddles.c twiddles.chpl twiddles.good 

---------------------------------------------------------------------------

09/25/06 17:42:54 -- bradc

Log message:
	Oops, forgot to cvs add this file.

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.good 

---------------------------------------------------------------------------

09/26/06 10:13:26 -- waynew

Log message:
	Updated.  My DONE's means a reasonable implementation is in. It may still
	have known bugs and/or not handle all cases.

Modified files:
	chapel/compiler/: UnimplementedFeatures 

---------------------------------------------------------------------------

09/26/06 13:16:51 -- deitz

Log message:
	Added example environment as in \begin{example} ... \end{example} to
	create an italicized example. Chapel code can be included within
	\begin{chapel} ... \end{chapel} within the example.
	
	Filled in most of the Statement subsections except return, yield, and
	declaration statements.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Statements/: Block_Level_Statements.tex 
	                         Statements.tex 
	                         Tensor_Product_Iteration.tex 
	                         The_Atomic_Statement.tex 
	                         The_Begin_Statement.tex 
	                         The_Cobegin_Statement.tex 
	                         The_Conditional_Statement.tex 
	                         The_Empty_Statement.tex 
	                         The_For_and_Forall_Loops.tex 
	                         The_On_Statement.tex 
	                         The_Select_Statement.tex 
	                         The_Serial_Statement.tex 
	                         The_Type_Select_Statement.tex 
	                         The_Use_Statement.tex 
	                         The_While_and_Do_While_Loops.tex 
	                         Zipper_Iteration.tex 
Added files:
	chapel/spec/Statements/: Alternative_Forall_Loop_Syntax.tex 

---------------------------------------------------------------------------

09/26/06 14:57:07 -- bradc

Log message:
	A few last-minute code snippets for today's meeting.

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: butterfly.c butterfly.chpl 

---------------------------------------------------------------------------

09/26/06 17:03:38 -- waynew

Log message:
	Fixed a bug with sync records.  Relaxing the constraints on reading a record,
	we no longer use a sync op to obtain the record in the coercion wrapper. The
	allows the record to be passed by ref for member setting.
	
	Added some sync record tests.  Mostly record versions of the class tests.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/parallel/sync/waynew/: record0.chpl record0.good 
	                                   record1.chpl record1.good 
	                                   record2.chpl record2.good 
	                                   record3.chpl record3.good 

---------------------------------------------------------------------------

09/26/06 17:38:03 -- bradc

Log message:
	Forgot that this directory is now being tested -- marked
	butterfly as a future (though the future is really writing
	it -- we don't seem to have a butterfly.notest option).

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: butterfly.future 
	                                     butterfly.good 

---------------------------------------------------------------------------

09/27/06 09:01:27 -- deitz

Log message:
	Added a test to show a change that function resolution needs to make
	to favor int over uint when coercions have taken place.  This shows
	another complexity of uint.  C# rules of function resolution favor int
	over uint and we plan to do the same.

Added files:
	chapel/test/functions/deitz/: test_int_uint.chpl 
	                              test_int_uint.future 
	                              test_int_uint.good 

---------------------------------------------------------------------------

09/27/06 09:38:43 -- bradc

Log message:
	Added a few more int/uint parameter argument-passing
	examples based around the ones we were throwing at C#
	yesterday...

Added files:
	chapel/test/functions/bradc/: intUint.chpl intUint.future 
	                              intUint.good intUint2.chpl 
	                              intUint2.future intUint2.good 

---------------------------------------------------------------------------

09/27/06 10:13:58 -- deitz

Log message:
	Added remaining Statements subsections.

Modified files:
	chapel/spec/Statements/: Declaration_Statements.tex 
	                         Function_Declaration_Statements.tex 
	                         Module_Declaration_Statements.tex 
	                         The_Return_Statement.tex 
	                         The_Yield_Statement.tex 
	                         Type_Declaration_Statements.tex 
	                         Variable_Declaration_Statements.tex 

---------------------------------------------------------------------------

09/27/06 11:31:15 -- deitz

Log message:
	Made conversion to a signed integer argument better than an unsigned
	integer when resolving overloaded functions.
	
	Removed three futures and broke up one future test with two
	ambiguities into two tests.
	
	Fixed a bug in implicit constant coercion in which we were off by one
	thus allowing something like
	
	  var u: uint(8) = 256;
	
	This is now an error.  It used to assign 0.  Fixed one test case by
	introducing an explicit cast.
	
	Enabled and fixed implicit constant coercion of uint parameters to
	uints that can hold them.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/functions/bradc/: intUint2.chpl intUint2.good 
	chapel/test/trivial/waynew/: uint8-64.chpl 
Added files:
	chapel/test/functions/bradc/: intUint3.chpl intUint3.good 
Removed files:
	chapel/test/functions/bradc/: intUint.future intUint2.future 
	chapel/test/functions/deitz/: test_int_uint.future 

---------------------------------------------------------------------------

09/27/06 12:46:41 -- marybeth

Log message:
	This commit outlines the Language Overview section, creating stub
	files for the sections in the Language_Overview directory.
	
	Some text was added to the section files.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Language_Overview/: Language_Overview.tex 
Added files:
	chapel/spec/Language_Overview/: Arrays_and_Distributions.tex 
	                                Basic_Language_Features.tex 
	                                Data_Distributions.tex 
	                                Data_Parallel_Constructs.tex 
	                                Data_Types_and_Variables.tex 
	                                Exploiting_Data_Locality.tex 
	                                Functions_and_Methods.tex 
	                                Generic_Programming.tex 
	                                Global_View_Programming_Model.tex 
	                                Locality_Aware_Programming.tex 
	                                Motivating_Principles.tex 
	                                Object-Oriented_Programming.tex 
	                                Parallel_Features.tex 
	                                Programs_and_Modules.tex 
	                                Sequences_and_Iterators.tex 
	                                Statements_and_Expressions.tex 
	                                Structured_Data_Types.tex 
	                                Synchronizing_and_Serializing_Tasks.tex 
	                                Task_Parallel_Constructs.tex 

---------------------------------------------------------------------------

09/27/06 14:11:37 -- bradc

Log message:
	Added a new test showing that our current resolution
	rules for integers are not faithful to the C# spec
	that we were trying to match, based on a discussion
	and explorations with Steve.
	
	This means, returning to Mary Beth's email question
	earlier that foo(8) would dispatch to the default-int
	version of foo() before it would dispatch to the 8-bit
	int version, as Steve and I had predicted previously.
	This is actually pretty reassuring.
	
	Similarly, foo(8:int(x)) should go directly to the
	int(x) version if one exists (and look for bigger
	versions afterwards if it doesn't).

Added files:
	chapel/test/functions/bradc/: resolveIntLiterals.chpl 
	                              resolveIntLiterals.future 
	                              resolveIntLiterals.good 

---------------------------------------------------------------------------

09/27/06 14:15:43 -- deitz

Log message:
	Disabled parameter coercion of 64-bit unsigned integers to smaller
	width unsigned integers.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/functions/bradc/: intUint3.good 
	chapel/test/types/coerce/bradc/: tostring.chpl 

---------------------------------------------------------------------------

09/27/06 15:14:30 -- bradc

Log message:
	Checking in a strided array argument test which shows
	that certain variations don't seem to be working.  It
	would be nice to have these cases working for the FFT
	benchmark.

Added files:
	chapel/test/arrays/bradc/: stridedArrayArg.chpl 
	                           stridedArrayArg.future 
	                           stridedArrayArg.good 

---------------------------------------------------------------------------

09/27/06 15:30:10 -- bradc

Log message:
	Another strided array case that would be nice to get
	working for the HPCC FFT code.  This one shows that
	once you start sending array slices to a function,
	modifications to the array within the function are
	not reflected in the actual array argument.  I've
	commented out the calls that don't currently resolve
	temporarily to demonstrate that even the calls that
	do resolve seem to be resulting in copies being
	inserted.

Added files:
	chapel/test/arrays/bradc/: stridedArrayArg2.chpl 
	                           stridedArrayArg2.future 
	                           stridedArrayArg2.good 

---------------------------------------------------------------------------

09/27/06 15:36:21 -- bradc

Log message:
	Made a standalone test of the C butterfly routine and
	got the Chapel version similarly testing and working.
	Wrote a preferable version using an array argument
	(butterfly2.chpl), but ran into bugs captured by my
	last two checkins that prevented it from working.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: butterfly.c butterfly.chpl 
	                                     butterfly.good 
Added files:
	chapel/test/studies/hpcc/FFT/bradc/: butterfly2.chpl 
	                                     butterfly2.future 
	                                     butterfly2.good 
Removed files:
	chapel/test/studies/hpcc/FFT/bradc/: butterfly.future 

---------------------------------------------------------------------------

09/27/06 15:55:41 -- deitz

Log message:
	Fixed mistype in manually updated test output file.

Modified files:
	chapel/test/functions/bradc/: intUint3.good 

---------------------------------------------------------------------------

09/27/06 16:04:33 -- bradc

Log message:
	A test that tries to create the value 0x8000000000000000
	in 8 different ways, only 2 of which work.  Getting shift
	operators that operate on various signed/unsigned types
	correctly would go a long way to getting these working
	better.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badshift.chpl 
	                                    ra-bradc-badshift.future 
	                                    ra-bradc-badshift.good 

---------------------------------------------------------------------------

09/27/06 16:25:08 -- bradc

Log message:
	An error message that could (eventually) use improving.
	When assigning a negative literal to a uint, the error
	calls the value a float even though it doesn't appear
	to be one to the user.

Added files:
	chapel/test/types/scalar/bradc/: assignUintNegative.chpl 
	                                 assignUintNegative.future 
	                                 assignUintNegative.good 

---------------------------------------------------------------------------

09/27/06 16:32:26 -- deitz

Log message:
	Made no coercion favor any coercion during function resolution.
	Removed .future of a test showing that an int literal favors resolving
	to a function with an int argument over an int(8) argument.
	
	Made resolution of the assignment function require an exact match for
	the first argument.  Overloading assignment is not exposed to the
	user.
	
	Fixed test outputs, one changed and one I keep trying to get right but
	don't.  Now it is right.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/functions/bradc/: intUint3.good 
	chapel/test/trivial/deitz/: test_int8_error.good 
Removed files:
	chapel/test/functions/bradc/: resolveIntLiterals.future 

---------------------------------------------------------------------------

09/27/06 16:42:50 -- bradc

Log message:
	The lg() function I implemented the other day took
	an int as a parameter.  The current one is generic.
	We may want to specialize for ints and uints once
	we have a "find highest true bit" function.  This
	version relies on /= 2 to be optimized to a shift
	by the C compiler...

Modified files:
	chapel/modules/standard/: _chpl_math.chpl 
Added files:
	chapel/test/modules/standard/math/: lg.chpl lg.good 

---------------------------------------------------------------------------

09/27/06 16:49:18 -- bradc

Log message:
	A future test showing that our flexibility in
	interpreting the type of a literal does not
	extend to conditional expressions -- instead
	a type mismatch is flagged.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-condexpr.chpl 
	                                    ra-bradc-condexpr.good 
	                                    ra-bradc-condexpr.future 

---------------------------------------------------------------------------

09/27/06 16:55:19 -- bradc

Log message:
	Took another pass over my RA implementation, improving
	the comparison against signed stuff and some other
	little things.  Was more satisfying than working on
	FFT in the face of troubles passing arrays... :)

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc.chpl 
Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-old1.chpl 
	                                    ra-bradc-old1.good 

---------------------------------------------------------------------------

09/27/06 17:08:25 -- marybeth

Log message:
	Checking in two new versions of RA.  The first one is a Chapel version
	that implements the outer loop parallelism in the MTA version (ra2.chpl).
	The second one has an inner stride of VectorLength which could vectorize
	(ra3.chpl).
	
	I'm still looking into ra3.chpl to ensure that it is correct.  I thought
	that I would check it in as it is now so that others could start to look at
	it too.

Added files:
	chapel/test/studies/hpcc/RA/marybeth/: ra2.chpl ra2.good 
	                                       ra3.chpl ra3.good 

---------------------------------------------------------------------------

09/27/06 17:57:08 -- waynew

Log message:
	Checkpoint.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Atomic_Transactions.tex 
	                                              Begin.tex 
	                                              Cobegin.tex 
	                                              Forall.tex 
	                                              Functions_on_Synchronization_Variables.tex 
	                                              Implicit_Synchronization_on_Variables.tex 
	                                              Memory_Consistency.tex 
	                                              Ordered_Expressions.tex 
	                                              Ordered_Forall.tex 
	                                              Parallel_Iterators.tex 
	                                              Parallel_Statements.tex 
	                                              Parallelism_and_Synchronization.tex 
	                                              Serial.tex 
	                                              Single_Assignment_Variables.tex 
	                                              Synchronization_Variables_of_Record_Type.tex 
Added files:
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Parallel_Array_Assignment.tex 
	                                              Parallel_Execution.tex 
	                                              Scan_and_Reduce.tex 
	                                              Sequence.tex 
	                                              Sync_Variables.tex 
Removed files:
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Parallel_Expressions.tex 

---------------------------------------------------------------------------

09/28/06 15:01:58 -- bradc

Log message:
	Tried to update these tests based on my new understanding
	that 0x80 is not -8 for an 8-bit integer, but am not at
	all convinced that I got these correct.  Am relying on
	Steve to verify these after he gets his new scheme
	implemented.

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badshift.good 
	chapel/test/types/scalar/bradc/: uintinit.chpl uintinit.future 
	                                 uintinit.good 

---------------------------------------------------------------------------

09/28/06 15:45:44 -- deitz

Log message:
	Made user-specified return type act as a cast of the actual returned
	data.  We actually want to make this a "safe cast" meaning it should
	check to make sure this is a legal coercion.
	
	Fixed html output of literals and naming of types to access the
	immediate values rather than print out an opaque/uninformative name,
	e.g., _literal_int.

Modified files:
	chapel/compiler/AST/: symbol.cpp view.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/test/functions/bradc/: typefn2.good 

---------------------------------------------------------------------------

09/28/06 16:00:49 -- bradc

Log message:
	Annotated futures related to HPCC benchmarks.

Modified files:
	chapel/test/arrays/bradc/: stridedArrayArg.future 
	                           stridedArrayArg2.future 
	chapel/test/studies/hpcc/FFT/bradc/: butterfly2.future 
	                                     twiddles-advanced.future 
	                                     twiddles-advanced2.future 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badparam.future 
	                                    ra-bradc-badshift.future 
	                                    ra-bradc-condexpr.future 
	chapel/test/types/scalar/bradc/: assignUintNegative.future 

---------------------------------------------------------------------------

09/28/06 16:45:19 -- bradc

Log message:
	Hacked a version of dfft to trace through the control flow
	in the C FFT benchmark and understand when all the specialized
	functions are called.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.c 
Added files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft.c 

---------------------------------------------------------------------------

09/28/06 16:50:56 -- bradc

Log message:
	A few more edits before I head out.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft.c 

---------------------------------------------------------------------------

09/28/06 17:28:56 -- waynew

Log message:
	Initial port of HPCC's stream.c benchmark.

Added files:
	chapel/test/studies/hpcc/STREAMS/waynew/: .cvsignore stream.chpl 
	                                          stream.future 

---------------------------------------------------------------------------

09/28/06 17:46:45 -- waynew

Log message:
	It's a little bit Scottish.

Added files:
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.good 

---------------------------------------------------------------------------

09/28/06 17:56:17 -- waynew

Log message:
	- width and size functions on variables of primitive types that return
	  number of bits and bytes, respectively. Currently seems broken on types
	  though.  Question of what to return for bool. Implementation's answer is
	  not intuitive.
	
	- Minor edits to stream.chpl.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.chpl 

---------------------------------------------------------------------------

09/28/06 18:39:16 -- marybeth

Log message:
	Some minor changes to the Statements chapter.
	
	I also modified spec.tex.  I rearranged the order of Block and Block Level Statements
	section.  I also modified the Example environment.  (I'm not tied to this example
	environment.  I wanted to suggest something different.)

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Statements/: Assignment_Statements.tex 
	                         The_Conditional_Statement.tex 
	                         The_Select_Statement.tex 
	                         The_While_and_Do_While_Loops.tex 

---------------------------------------------------------------------------

09/28/06 19:05:19 -- marybeth

Log message:
	Checking in int(64) version of ra, ra2, and ra3 in anticipation of
	switching to default 32-bit integer size.
	
	These tests work with the default 64-bit integer compiler.  Hopefully,
	they'll continue to work when the default size changes.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra.chpl ra2.chpl ra3.chpl 

---------------------------------------------------------------------------

09/29/06 10:57:58 -- deitz

Log message:
	A few more edits to put back some semantics that I thought were lost.

Modified files:
	chapel/spec/Statements/: The_Conditional_Statement.tex 
	                         The_Select_Statement.tex 

---------------------------------------------------------------------------

09/29/06 11:16:00 -- waynew

Log message:
	Changed names to bits and bytes as placeholders until it's decided.  Should
	be slightly easier to change now (even by a script, say).

Modified files:
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.chpl 

---------------------------------------------------------------------------

09/29/06 11:27:00 -- waynew

Log message:
	Cosmetic changes.  Increased total memory size a tiny bit to about 1MB/vector.
	Should be good to work with as a basis.  Updated .good.

Modified files:
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.chpl 
	                                          stream.good 

---------------------------------------------------------------------------

09/29/06 11:29:34 -- waynew

Log message:
	Test use of domain without initialization.

Added files:
	chapel/test/domains/waynew/: init.chpl init.future init.good 

---------------------------------------------------------------------------

09/29/06 11:48:32 -- deitz

Log message:
	Switched default int size to int(32) and default uint size to
	uint(32).
	
	Expect the following hpcc study regressions
	
	[Error matching program output for studies/hpcc/FFT/bradc/bitreverse]
	[Error matching program output for studies/hpcc/FFT/bradc/bitreverse2]
	[Error matching compiler output for studies/hpcc/RA/bradc/ra-bradc-old1]
	[Error matching compiler output for studies/hpcc/RA/bradc/ra-bradc]
	[Error matching compiler output for studies/hpcc/RA/marybeth/ra]
	[Error matching compiler output for studies/hpcc/RA/marybeth/ra2]
	[Error matching compiler output for studies/hpcc/RA/marybeth/ra3]
	
	which should be discussed.
	
	Updated many tests and/or test outputs.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/ifa/: num.h 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         parallel.cpp 
	chapel/modules/standard/: _chpl_file.chpl _chpl_indefinite.chpl 
	                          _chpl_math.chpl 
	chapel/runtime/include/: chplio.h config.h 
	chapel/runtime/src/: config.c 
	chapel/test/memory/shannon/: printMemTable2.chpl 
	chapel/test/reductions/waynew/: breductions.chpl 
	chapel/test/trivial/bradc/: opAssociativity.chpl 
	chapel/test/trivial/deitz/: test_int32.chpl test_int32b.chpl 
	                            test_int_uint.chpl 
	chapel/test/trivial/waynew/: int2uint.good int8-64b.chpl 
	                             maxtest.chpl mintest.chpl 
	                             uint2int.chpl uint8-64.chpl 
	                             uintliteral.chpl 
	chapel/test/types/coerce/bradc/: tostring.good 
	chapel/test/types/scalar/bradc/: uint.good 

---------------------------------------------------------------------------

09/29/06 13:59:06 -- bradc

Log message:
	Updated bit functions and HPCC tests to work with
	new default integer widths.

Modified files:
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-old1.chpl 
	                                    ra-bradc.chpl 

---------------------------------------------------------------------------

09/29/06 14:06:43 -- bradc

Log message:
	Updates on the FFT benchmarks based on work
	from home this morning.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft.c fft.chpl 

---------------------------------------------------------------------------

09/29/06 14:17:19 -- deitz

Log message:
	Removed support for integer literal suffixes including the unsigned
	suffix u, which was the only one that was supported.
	
	An integer literal is now interpreted as being the first of the
	following types that can hold it: int(32), int(64), uint(64).

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/test/arrays/bradc/: uintarr.chpl 
	chapel/test/functions/bradc/: intUint.chpl intUint2.chpl 
	                              intUint3.chpl intUint3.good 
	chapel/test/modules/standard/math/: lg.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: bitreverse2.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badlineno.chpl 
	                                    ra-bradc-badparam.chpl 
	                                    ra-bradc-badshift.chpl 
	                                    ra-bradc-condexpr.chpl 
	                                    ra-bradc-duplicateErrors.chpl 
	                                    ra-bradc-illegalcast.chpl 
	                                    ra-bradc-old1.chpl 
	                                    ra-bradc-uintliteral.chpl 
	                                    ra-bradc.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra2.chpl ra3.chpl 
	chapel/test/trivial/waynew/: uintliteral.chpl 
	chapel/test/types/scalar/bradc/: uint.chpl uintinit.chpl 

---------------------------------------------------------------------------

09/29/06 15:00:10 -- bradc

Log message:
	Fixed tests and futures based on removal of u suffix
	in combination with default uint being of 64-bit
	width.

Modified files:
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: bitreverse2.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badlineno.chpl 
	                                    ra-bradc-badparam.chpl 
	                                    ra-bradc-badshift.chpl 
	                                    ra-bradc-badshift.future 
	                                    ra-bradc-condexpr.chpl 
	                                    ra-bradc-duplicateErrors.chpl 
	                                    ra-bradc-illegalcast.chpl 
	                                    ra-bradc.chpl 
	chapel/test/types/scalar/bradc/: uintinit.chpl uintinit.good 
Removed files:
	chapel/test/types/scalar/bradc/: uintinit.future 

---------------------------------------------------------------------------

09/29/06 15:05:03 -- marybeth

Log message:
	Checking in further changes to ra, ra2 and ra3 in order for them to work
	correctly with the default 32-bit integer size.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra.chpl ra2.chpl ra3.chpl 

---------------------------------------------------------------------------

09/29/06 15:53:29 -- waynew

Log message:
	Relevant C source files for STREAMS from the HPCC bench.

Added files:
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.c io.c hpcc.h 

---------------------------------------------------------------------------

09/29/06 16:07:45 -- deitz

Log message:
	Removed .future related to goto usage since goto is no longer in the
	language.
	
	Note that there are no plans to remove it from the parser or the IR.
	It should, however, be changed to _goto and _label.

Removed files:
	chapel/test/trivial/deitz/: test_goto2.chpl test_goto2.future 
	                            test_goto2.good 

---------------------------------------------------------------------------

09/29/06 16:10:27 -- deitz

Log message:
	Expect 1 regression:
	
	[Error matching compiler output for studies/hpcc/RA/bradc/ra-bradc-old1]
	
	Changed all builtin operators on integers and unsigned integers so
	that they operate solely on 32- and 64-bit integers and unsigned
	integers.  So for
	
	  var i: int(16);
	  i = i + 1;
	
	you need a cast
	
	  var i: int(16);
	  i = (i+1):int(16);
	
	to show the potential data loss.  The following operators are changed:
	  + - ~ !  + - * / ** % & | ^ == != <= >= < > && || << >>
	
	Fixed << and >> operators to take their type from the left operand.
	The right operand must be an integral type (following C#).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_math.chpl 
	chapel/test/trivial/deitz/: test_init_int8.chpl 
	chapel/test/trivial/waynew/: int8-64.chpl uint8-64.chpl 
	                             uintliteral.chpl 
	chapel/test/types/type_variables/jplevyak/: where-3-error.good 

---------------------------------------------------------------------------

09/29/06 16:20:47 -- deitz

Log message:
	Made parameters variables (since we don't fold casts yet), removed
	extra output line in .good, and removed .future.

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badshift.chpl 
	                                    ra-bradc-badshift.good 
Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badshift.future 

---------------------------------------------------------------------------

09/29/06 16:34:42 -- bradc

Log message:
	Took a quick rewrite of Wayne's streams benchmark
	so that I'd be familiar with it for Monday's PGAS
	talk.  Moved a bunch of initialization stuff into
	config vars, made file read top-to-bottom more,
	killed some dead stuff, used more array syntax,
	reductions, etc.
	
	Could still use more work.

Added files:
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-bradc.chpl 
	                                         stream-bradc.good 

---------------------------------------------------------------------------

09/29/06 16:43:16 -- bradc

Log message:
	Fixed problem introduced by better implementation of shifts.
	It used to be that tableSize was determined to be a uint because
	of its ":int << :uint" initialization.  Now it was being
	(correctly) determined to be an int, requiring uses of it to
	be cast to uint later (or vice-versa).

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-old1.chpl 

---------------------------------------------------------------------------

09/29/06 17:03:18 -- deitz

Log message:
	Fixed bug of declaring an array over a domain that is not initialized.
	Removed a .future.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
Removed files:
	chapel/test/domains/waynew/: init.future 

---------------------------------------------------------------------------

09/29/06 17:14:01 -- waynew

Log message:
	- bits(type) instead of bits(var).
	- Changed some ugliness in stream.chpl to use bits(type) and used
	  uninitialized domain.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.chpl 

---------------------------------------------------------------------------

09/29/06 17:37:57 -- bradc

Log message:
	Updated my implementation to use the new (beautifully-named)
	bits function.

Modified files:
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-bradc.chpl 
Added files:
	chapel/test/studies/hpcc/RA/marybeth/: .cvsignore 

---------------------------------------------------------------------------

09/29/06 17:41:58 -- bradc

Log message:
	Updated coloring for Chapel mode based on Steve's
	feedback at this week's meeting.

Modified files:
	chapel/etc/emacs/21.4/: font-lock.el 

---------------------------------------------------------------------------

09/29/06 17:45:39 -- bradc

Log message:
	Was tinkering around with mg today to see how far
	we are from getting it compiling (in case I use
	it in my talk, as is likely).  Main issues are:
	
	  1) var A: [i in D] type(i) = f(i);
	  2) global boundary conditions
	  3) subdomains
	  4) timers
	
	Other than that, things were going smoothly.  I
	should try to break two levels out of the hierarchy
	explicitly and send them to all the routines to see
	how they work manually.  If that works, we're
	nearly there.

Modified files:
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
Added files:
	chapel/test/npb/mg/: mg-compilable2.chpl 

---------------------------------------------------------------------------

09/29/06 17:47:26 -- bradc

Log message:
	A trace showing how John's HPCC FT unfolds as it runs.

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft-trace.txt 

---------------------------------------------------------------------------

10/02/06 10:02:17 -- deitz

Log message:
	Enabled complex cast on a literal tuple so that something like
	
	  (2, 3):complex
	
	is a complex number.  It is currently not folded (but should be) so it
	cannot be used in a parameter specification.
	
	A literal tuple is required so
	
	  var t = (2, 3);
	  ... t:complex ...
	
	would result in an error.  Is this a wrong choice?
	
	Removed internal function _complex and updated lots of instances in
	the test suite where this internal function was being used.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_complex.chpl _chpl_htuple.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: bitreverse.chpl 
	                                     bitreverse2.chpl 
	                                     butterfly.chpl 
	                                     butterfly2.chpl fft.chpl 
	                                     twiddles-advanced.chpl 
	                                     twiddles-advanced2.chpl 
	                                     twiddles-onebased.chpl 
	                                     twiddles.chpl 
Added files:
	chapel/test/trivial/deitz/: test_complex_cast.chpl 
	                            test_complex_cast.good 

---------------------------------------------------------------------------

10/02/06 10:44:33 -- deitz

Log message:
	Disabled indexing into strings as this has caused too many problems.
	Added support for a method on strings called substring that replaces
	this.  So for example:
	
	  "hello".substring(2)    // "e"
	  "hello".substring(2..4) // "ell"
	  987.substring(2)        // 8
	
	Simplified array indexing implementation as a result of this change.
	
	Updated test cases to use substring method.
	
	Fixed two missed tests with _complex usage.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_indefinite.chpl _chpl_seq.chpl 
	chapel/test/functions/deitz/: test_int_this.chpl 
	                              test_int_this2.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: butterfly.chpl fft.chpl 
	chapel/test/trivial/deitz/demo/: sample2.chpl 
	chapel/test/types/string/deitz/: test_string_select1.chpl 
	                                 test_string_shuffle.chpl 

---------------------------------------------------------------------------

10/03/06 09:03:33 -- deitz

Log message:
	Enabled non-strided array slicing on one-dimensional non-strided
	arrays.  This is preliminary.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
Added files:
	chapel/test/arrays/deitz/part1/: test_array_arg7.chpl 
	                                 test_array_arg7.good 
	                                 test_array_arg8.chpl 
	                                 test_array_arg8.good 
	                                 test_array_arg9.chpl 
	                                 test_array_arg9.good 

---------------------------------------------------------------------------

10/03/06 09:43:59 -- deitz

Log message:
	Enabled array slicing on one-dimensional arrays including strided
	arrays or slices.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_slice_stride.chpl 
	                           test_slice_stride.good 
	                           test_slice_stride2.chpl 
	                           test_slice_stride2.good 

---------------------------------------------------------------------------

10/03/06 09:56:30 -- deitz

Log message:
	Added test case to show that strided slices of multidimensional arrays
	is also working.  But note that currently
	
	  A(1..6, 1..6)
	
	is a 2D slice that is identical to
	
	  A[1..6, 1..6]
	
	Since this is slicing, it does not use promotion which would have a
	different result.
	
	This seems wrong.  I believe A(1..6, 1..6) should refer to the
	diagonal but I can see arguments that it shouldn't.  There are
	diffculties with making it the diagonal that we should discuss.

Added files:
	chapel/test/arrays/deitz/: test_slice_stride3.chpl 
	                           test_slice_stride3.good 

---------------------------------------------------------------------------

10/03/06 10:45:48 -- deitz

Log message:
	Fixed a bug to enable slicing and viewing and then slicing and viewing
	again where I have defined sliced to mean indexing into an array and
	getting a subset of the data as an alias and viewed to mean passing an
	array to a function and remapping the indices.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_slice_stride4.chpl 
	                           test_slice_stride4.good 

---------------------------------------------------------------------------

10/03/06 12:11:34 -- deitz

Log message:
	Added support for folding of primitive casts that are applied to
	parameters.
	
	Note: casts of parameters to type complex and string are not folded.
	
	Reconstituted test/studies/hpcc/RA/bradc/ra-bradc-badshift to declare
	parameters instead of variables in two cases.
	
	Fixed a bug in which parameters that were used in the then or else
	expression of a conditional expression would not be folded.  Removed
	.future for test/studies/hpcc/RA/bradc/ra-bradc-badparam.
	
	Fixed parameter coercion to only work on 32-bit integer parameters,
	necessary now that casts are folded.

Modified files:
	chapel/compiler/ifa/: num.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/test/functions/bradc/: intUint3.good 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badshift.chpl 
Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badparam.future 

---------------------------------------------------------------------------

10/03/06 12:17:48 -- deitz

Log message:
	Fixed what is printed (removed what looks like debug printing,
	uncommented commented out function calls that look like they were
	commented out during debugging) in some future tests.  Fixed use of
	_complex function (no longer exists) to use complex cast.
	
	Removed two of the three strided slice .futures.  The remaining one
	fails because of the use of whole array ops on the viewed slice.

Modified files:
	chapel/test/arrays/bradc/: stridedArrayArg2.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: butterfly2.chpl 
Removed files:
	chapel/test/arrays/bradc/: stridedArrayArg.future 
	chapel/test/studies/hpcc/FFT/bradc/: butterfly2.future 

---------------------------------------------------------------------------

10/03/06 13:08:16 -- waynew

Log message:
	Minor mod.  Removed _element from _ddata.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

10/03/06 13:11:08 -- waynew

Log message:
	Ooops. Forgot to remove a bit of unused commented out code.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

10/03/06 14:36:12 -- deitz

Log message:
	Fixed a bug with using whole array ops and assignment on sliced arrays.
	
	Removed a .future.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Removed files:
	chapel/test/arrays/bradc/: stridedArrayArg2.future 

---------------------------------------------------------------------------

10/03/06 14:58:26 -- deitz

Log message:
	Added an indefinite domain remove test that doesn't seem to be
	working.  Wayne, can you take a look?

Added files:
	chapel/test/domains/deitz/: test_indefinite_remove.chpl 
	                            test_indefinite_remove.future 
	                            test_indefinite_remove.good 

---------------------------------------------------------------------------

10/03/06 16:41:20 -- deitz

Log message:
	Note: regression: (see reason below)
	 [Error matching compiler output for arrays/bradc/stridedArrayArg2]
	
	Added special handling of -= to allow it to call the domain's remove
	method.
	
	Made op= insert a cast to handle the case:
	
	  var i: int(8) = 2;
	  i += 1;
	
	The issue here is that we cannot translate it into
	
	  i = i + 1;
	
	since this would result in an error since i + 1 is a 32-bit int.  Thus
	op= is now handled as
	
	  a op= b
	
	is changed into
	
	  a = (a op b):a.type
	
	following C# semantics.
	
	Unfortunately this breaks support for op= on whole arrays since we
	don't want to cast it to the array.  This will require major reworking
	of casts to get right.  This is the reason for the regression.
	
	Implemented a first pass on inference on return types to infer the
	return type to be any returned type that other returned values can be
	coerced into including via the implicit coercion rule so
	
	  return i:int(8);
	  return 2;
	
	will return an int(8) since 2 can be cast into it.  We discussed a
	more restrictive rule at the meeting but I had trouble figuring out
	the semantics of what we wanted.  Treat this as preliminary.
	
	Added a future on domain remove that is the same as the last one but
	uses -= instead of the method call.
	
	Removed conditional expression hpcc future.
	
	Added two tests to look at return inference and coercion.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         semanticChecks.cpp 
Added files:
	chapel/test/domains/deitz/: test_indefinite_remove2.chpl 
	                            test_indefinite_remove2.future 
	                            test_indefinite_remove2.good 
	chapel/test/functions/deitz/infer/: test_coerce_return_type.chpl 
	                                    test_coerce_return_type.good 
	                                    test_infer_return_type.chpl 
	                                    test_infer_return_type.good 
Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-condexpr.future 

---------------------------------------------------------------------------

10/03/06 18:22:48 -- marybeth

Log message:
	Checking in 5 tests that currently fail.  These tests represent
	outstanding issues with uints in Random Access.
	
	I'm sure that these problems have been noted before.  However, I
	wanted to be thorough and to track the progress of the compiler with
	tests that came from my version of Random Access.

Added files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test1.chpl 
	                                       ra-uint-test1.future 
	                                       ra-uint-test1.good 
	                                       ra-uint-test2.chpl 
	                                       ra-uint-test2.future 
	                                       ra-uint-test2.good 
	                                       ra-uint-test3.chpl 
	                                       ra-uint-test3.future 
	                                       ra-uint-test3.good 
	                                       ra-uint-test4.chpl 
	                                       ra-uint-test4.future 
	                                       ra-uint-test4.good 
	                                       ra-uint-test5.chpl 
	                                       ra-uint-test5.future 
	                                       ra-uint-test5.good 

---------------------------------------------------------------------------

10/04/06 08:56:52 -- deitz

Log message:
	Enabled promotion of domains over its indices allowing a domain to be
	assigned to an array if the array's elements are the same type as the
	domain's indices.  Also this allows a domain to be passed to a
	function or operator that expects its indices and it is promoted.
	Added two tests.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	                          _chpl_indefinite.chpl 
Added files:
	chapel/test/domains/deitz/: test_domain_promote1.chpl 
	                            test_domain_promote1.good 
	                            test_domain_promote2.chpl 
	                            test_domain_promote2.good 

---------------------------------------------------------------------------

10/04/06 09:02:52 -- deitz

Log message:
	Removed three .future files for tests that pass.

Removed files:
	chapel/test/classes/deitz/: test_type_in_class4.future 
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test2.future 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.future 

---------------------------------------------------------------------------

10/04/06 09:06:29 -- deitz

Log message:
	Removed extra linefeed in .good and removed .future for working test.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test3.good 
Removed files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test3.future 

---------------------------------------------------------------------------

10/04/06 09:10:26 -- deitz

Log message:
	Updated .good so that it is the error message that the compiler
	generates and removed the .future file.
	
	My interpretation is that given
	
	  const logsize:int = 4;
	  const TableSize:uint(64) = (1 << logsize);
	
	the expression 1 << logsize is a 32-bit integer.  Since logsize is not
	a compiler constant (a parameter), this expression is not folded so it
	is not a parameter.  Thus it cannot be assigned to TableSize.
	
	I am not sure whether the compiler should try to fold what things that
	are not strictly speaking parameters and thus not generate errors if
	it so happens that that folding works.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test4.good 
Removed files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test4.future 

---------------------------------------------------------------------------

10/04/06 09:52:31 -- deitz

Log message:
	Note: This fix required the insertion of an unfortunate cast in each
	of the following tests
	
	  studies/hpcc/RA/bradc/ra-bradc-old1
	  studies/hpcc/RA/bradc/ra-bradc
	  studies/hpcc/RA/marybeth/ra
	
	because the domain cannot YET contain an index of type uint(64) and
	thus comparing the index with a value of uint(64) in "i != table(i)"
	requires a cast of i to uint(64) since != cannot be used on a uint(64)
	and an int.
	
	Made it so that for the binary arithmetic operators
	
	   + - * / ** % & | ^ == != > < >= <= && ||
	
	it is a compiler error if one argument is a uint(64) and the other
	argument is an int(8), int(16), int(32), or int(64).  The
	justification is that otherwise it would become a float.  This rule
	follows C#.
	
	Fixed the implementation which previously handled only the int(64) and
	uint(64) case (and which also missed the case where the int(64) was
	the left operand due to a typo).
	
	Removed a .future and updated the .good to contain the appropriate
	error message.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-old1.chpl 
	                                    ra-bradc.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test5.good 
	                                       ra.chpl 
Removed files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test5.future 

---------------------------------------------------------------------------

10/04/06 10:49:05 -- deitz

Log message:
	Fixed error message on incorrect assignment into an array.  For
	example,
	
	  var A: [1..5] uint;
	  var i: int;
	
	  A(2) = i;
	
	now gives a good error.
	
	Removed a .future and updated the .good to be an error.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test1.good 
Removed files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test1.future 

---------------------------------------------------------------------------

10/04/06 13:06:09 -- marybeth

Log message:
	Checking in the latest versions of ra2.chpl, ra2.good, ra3.chpl, ra3.good.
	These are getting very close to final versions...
	
	Both versions of Random Access now have output indicating the number of
	random streams and the length of those streams.  The ra3.chpl version
	also prints out the length of the inner vector loop.
	
	Both now print out a GUPs number and timing information.  The timer
	routines are still not implemented, however.
	
	The ra2 version is the Chapel version of the MTA code.  The ra3 version
	is the ra2 version + an inner vector loop.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra2.chpl ra2.good 
	                                       ra3.chpl ra3.good 

---------------------------------------------------------------------------

10/04/06 13:10:45 -- marybeth

Log message:
	Checking in the test ra2-param-test which fails because POLY is declared
	to be a param.  It gives the error:
	
	ra2-param-test.chpl:97: In function 'InitRandomSteps':
	ra2-param-test.chpl:103: error: illegal use of '^' on operands of type uint(64) and int
	
	It seems that POLY is not being typed correctly.

Added files:
	chapel/test/studies/hpcc/RA/marybeth/: ra2-param-test.chpl 
	                                       ra2-param-test.future 
	                                       ra2-param-test.good 

---------------------------------------------------------------------------

10/04/06 14:59:20 -- deitz

Log message:
	Added a standard module called Timers.  It must be explicitly used:
	
	  use Timers;
	
	It defines a record called Timer that supports the following methods:
	
	  def Timer.clear()
	    clears the elapsed time stored by the timer and stops it
	
	  def Timer.start()
	    starts the timer
	    it is an error if the timer is already running
	
	  def Timer.stop()
	    stops the timer and updates the elapsed time
	    it is an error if the timer is not running
	
	  def Timer.value : float
	    returns the time in seconds as a float
	    the timer may be running but can also be stopped

Modified files:
	chapel/compiler/AST/: primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/runtime/include/: chplrt.h stdchpl.h 
	chapel/runtime/src/: chpltypes.c 
Added files:
	chapel/modules/standard/: Timers.chpl 
	chapel/test/trivial/deitz/: test_timer1.chpl test_timer1.good 

---------------------------------------------------------------------------

10/04/06 15:38:15 -- deitz

Log message:
	Added support for generic arithmetic sequences so that we can handle
	arithmetic sequences over different integral types.
	
	Arithmetic sequences can be created over int, uint, int(64), and
	uint(64) where the type is resolved in the same way that the binary
	arithmetic operator type is resolved.
	
	So in the code
	
	  var u: uint = 12;
	  for i in 1..u do
	    ...
	
	i will be a uint.
	
	Fixed the output of test/trivial/bradc/uintloop since arithmetic
	sequences over unsigned ints are now allowed.
	
	Added two test cases.
	
	Note: Arithmetic domains are over ints and are not YET generic.
	
	Moved the arithmetic sequence class out of the sequence module and
	into the arithmetic domain module to deal with a bug in which generics
	were tagged incorrectly when they spanned modules in the opposite
	order to which they are normalized.  To handle this correctly means a
	more major overhaul to normalize than what is necessary now.
	
	The error was as follows.  The generic _aseq is tagged as generic when
	its module is normalized.  Since it was used in the adomain module
	which is normalized before the sequence module some generic functions
	were not being tagged as generic resulting in a function resolution
	error.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_seq.chpl 
	chapel/test/trivial/bradc/: uintloop.good 
Added files:
	chapel/test/types/seq/deitz/aseq/: test_aseq1.chpl 
	                                   test_aseq1.good 
	                                   test_aseq2-error.chpl 
	                                   test_aseq2-error.good 

---------------------------------------------------------------------------

10/04/06 15:47:48 -- deitz

Log message:
	Enabled coercion of parameters so something like
	
	  param i: int = 2;
	  param p: float = i;
	
	will produce a parameter of type float.  Prior to this fix, the
	'float' type would be ignored.
	
	In the implementation, this is handled by translating
	
	  param identifier: type = expression;
	
	to
	
	  param identifier = (expression):type;
	
	Since the cast is folded, there is no problem.
	
	Removed two .futures.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Removed files:
	chapel/test/studies/hpcc/RA/marybeth/: ra2-param-test.future 
	chapel/test/trivial/deitz/: test_coerce_param.future 

---------------------------------------------------------------------------

10/04/06 16:13:03 -- deitz

Log message:
	Minor cleanup of index type code as index(D).
	
	Fixed .good of one test that was generated with the developer flag.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	                          _chpl_indefinite.chpl 
	chapel/test/types/seq/deitz/aseq/: test_aseq2-error.good 

---------------------------------------------------------------------------

10/04/06 17:44:51 -- marybeth

Log message:
	Updated versions of ra2 and ra3 using the Timers module to
	time the benchmark.  Also, switched POLY from const to param,
	since param for this case is now working.
	
	ra2.good and ra3.good are also updated.  However, since they
	contain timing information, the output of ra2 and ra3 is no longer
	constant.  I'm not sure how that gets handled during testing.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra2.chpl ra2.good 
	                                       ra3.chpl ra3.good 

---------------------------------------------------------------------------

10/04/06 18:29:13 -- marybeth

Log message:
	Framework for submission paper to HPC challenge competition.
	
	The RA section has some text, mostly code fragments from the C,
	C+MPI, UPC and Chapel versions of the update loop.  More discussion
	is needed.

Added files:
	chapel/doc/studies/hpcc/: appendix.tex chapel_listing.tex 
	                          FFT.tex Intro.tex RA.tex STREAM.tex 
	                          submitsc06.tex Makefile bib.bib 

---------------------------------------------------------------------------

10/05/06 08:54:17 -- deitz

Log message:
	The following parameter coercions are now allowed (and only these):
	
	 int(32) -> int(8), uint(8), int(16), uint(16), uint(32)
	 int(64) -> uint(64)
	
	They are allowed if the value can fit in the target type.
	
	Added two test cases, one of int/long resolution that worked without
	this change, and one of the different aseqs that didn't work before
	the above fix.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/trivial/deitz/: test_int_long.chpl 
	                            test_int_long.good 
	chapel/test/types/seq/deitz/: test_aseq3.chpl test_aseq3.good 

---------------------------------------------------------------------------

10/05/06 11:41:58 -- deitz

Log message:
	Simplified arithmetic sequence implementation in an obvious way.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

10/05/06 13:49:39 -- marybeth

Log message:
	Updated ra2 and ra3 tests to not print out timing information.
	Updated ra3 test renaming "vector loop" to "inner loop" and
	VectorDomain to LittleStepDomain.  The parallel inner loop gives
	the benchmark nested parallelism that shouldn't be limited to
	vectorization.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra2.chpl ra2.good 
	                                       ra3.chpl ra3.good 

---------------------------------------------------------------------------

10/05/06 13:50:55 -- deitz

Log message:
	Made arithmetic domains generic over integral types so that in
	
	  [1..10:uint, 1..10:uint]
	
	the "dimensional index type" is uint.
	
	Note that all arithmetic sequences must have the same element type and
	this element type becomes the dimensional index type.  I added a
	future to wait on a better error message if this is not the case.
	
	The dimensional index type can be specified in a domain's type by
	writing, for example, domain(2, uint).
	
	Note: a dimensional index type of uint(64) is not YET working.
	
	Made abs work over int, int(64), uint, and uint(64) to avoid getting a
	float when passing it a uint.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_math.chpl 
	                          _chpl_sparse.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_uint.chpl 
	                           test_array_uint.good 
	                           test_array_uint2.chpl 
	                           test_array_uint2.future 
	                           test_array_uint2.good 
	                           test_array_uint3.chpl 
	                           test_array_uint3.good 
	                           test_array_uint4.chpl 
	                           test_array_uint4.good 
	                           test_domain_mixed_dim_types.chpl 
	                           test_domain_mixed_dim_types.future 
	                           test_domain_mixed_dim_types.good 

---------------------------------------------------------------------------

10/05/06 13:56:19 -- bradc

Log message:
	Forgot to mention, but 99 bottles of beer came up
	again as a benchmark at the PGAS workshop, so between
	that and Steve's implementation of domain promotion,
	I revisited this.
	
	* moved our implementations into a studies directory
	  and out of my trivial directory
	
	* wrote a few different versions that used promotion,
	  varying primarily based on the degree to which
	  formal argument types are used.  Interestingly,
	  even though the function was written to take an
	  integer and return a string, a lot of it promotes
	  to take an aggregate of integers (the domain) and
	  return an aggregate of strings.  This is a
	  wonderful example of the power of promotion.
	
	* except that == currently isn't promoting across
	  sequences.  Checked in a future beer version based
	  on this as well as a standalone future in the
	  types directory.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft.c 
Added files:
	chapel/test/studies/beer/: beer-submitted.chpl 
	                           beer-submitted.good beer.chpl 
	                           beer.good 
	chapel/test/studies/beer/bradc/: .cvsignore 
	                                 beer-promoted-explicit.chpl 
	                                 beer-promoted-explicit.good 
	                                 beer-promoted-infer-explicit.chpl 
	                                 beer-promoted-infer-explicit.good 
	                                 beer-promoted-infer.chpl 
	                                 beer-promoted-infer.future 
	                                 beer-promoted-infer.good 
	                                 beer-promoted-init.chpl 
	                                 beer-promoted-init.good 
	chapel/test/types/seq/bradc/: promoteSeq.chpl promoteSeq.future 
	                              promoteSeq.good 
Removed files:
	chapel/test/trivial/bradc/: beer-submitted.chpl 
	                            beer-submitted.good beer.chpl 
	                            beer.good 

---------------------------------------------------------------------------

10/05/06 14:34:05 -- bradc

Log message:
	Took out line from nightly regression script that tried
	to build the nogc version of the compiler for the valgrind
	runs.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

10/05/06 14:46:13 -- deitz

Log message:
	Inserted a few more casts to get arithmetic domains working on
	uint(64).
	
	Added a test case.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_uint64.chpl 
	                           test_array_uint64.good 

---------------------------------------------------------------------------

10/05/06 14:46:28 -- deitz

Log message:
	Disabled building default == and != function on sequences, arrays, and
	domains.  Perhaps this makes sense to disable on all types that promote.
	
	Removed .future for test/types/seq/bradc/promoteSeq.chpl.
	
	Note: test/studies/beer/bradc/beer-promoted-infer.chpl is not YET
	working because it casts a sequence to a string and casts cannot YET
	be promoted.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
Removed files:
	chapel/test/types/seq/bradc/: promoteSeq.future 

---------------------------------------------------------------------------

10/05/06 14:51:56 -- deitz

Log message:
	Updated .good and removed .future for test that has a trivial meaning
	now that indexing into strings has been disabled.

Modified files:
	chapel/test/types/seq/deitz/: test_seq_index1.good 
Removed files:
	chapel/test/types/seq/deitz/: test_seq_index1.future 

---------------------------------------------------------------------------

10/05/06 16:21:16 -- marybeth

Log message:
	Adding perl script downloaded from hpc website for counting
	lines of source.  We need to report lines of source for each benchmark
	submitted.

Added files:
	chapel/test/studies/hpcc/: sclc.pl 

---------------------------------------------------------------------------

10/05/06 16:33:22 -- waynew

Log message:
	- Array forall type with initializer. You should be able to do the following
	  in a var declaration:
	  var A: [i in D] int = jam(i);
	
	- Some tests testing array forall type with initializer.

Modified files:
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
Added files:
	chapel/test/arrays/waynew/: init1.chpl init1.good init2.chpl 
	                            init2.good init3.chpl init3.good 

---------------------------------------------------------------------------

10/05/06 16:41:44 -- waynew

Log message:
	Ooops.  Forgot to put an include in a more appropriate place.  Heh heh.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

10/06/06 10:28:01 -- marybeth

Log message:
	Updated ra2 and ra3 now that domains can be of type uint(64).
	Changed TableDomain to be of type uint(64).  Removed now unnecessary casts.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra2.chpl ra3.chpl 

---------------------------------------------------------------------------

10/06/06 10:29:19 -- deitz

Log message:
	Made the test system compare .good case sensitively.
	
	Updated function resolution error messages to all start lower case, as
	opposed to inconsistently.
	
	Updated test .good files.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/: sub_test 
	chapel/test/classes/bradc/: callMethodOnClass.good 
	                            weirdinit.good 
	chapel/test/classes/deitz/: test_inherit_mod1.good 
	                            test_inherit_mod2.good 
	                            test_inherit_mod3.good 
	                            test_method_call2.good 
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.good 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-2.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/classes/marybeth/: test_dispatch1-error.good 
	chapel/test/compflags/bradc/missinginfile/: test.good 
	chapel/test/compflags/bradc/onebadfile/: badfile.good 
	chapel/test/compflags/bradc/twomodulesnomain/: module1.good 
	chapel/test/flowanalysis/recursion/: rec_fun-1.good 
	                                     rec_fun-2.good 
	                                     rec_fun-3.good 
	                                     rec_obj-1.good 
	                                     rec_obj-2.good 
	                                     rec_obj-3.good 
	chapel/test/functions/bradc/: intUint2.good intUint3.good 
	chapel/test/functions/deitz/: test_bad_function.good 
	                              test_default_param3.good 
	chapel/test/functions/deitz/default/: test_default3-error.good 
	                                      test_default4-error.good 
	chapel/test/functions/deitz/named/: test_named3-error.good 
	chapel/test/functions/jplevyak/: zeroarity-bound-error-1.good 
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test4.good 
	chapel/test/trivial/bradc/: undefinedfn.good undefinedfn2.good 
	chapel/test/trivial/deitz/: test_int8_error.good 
	chapel/test/types/seq/bradc/: emptySeq.good emptySeq3.good 
	chapel/test/types/seq/deitz/aseq/: test_aseq2-error.good 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo5-error.good 
	chapel/test/types/type_variables/deitz/part1/: 
	                                               test_clone_class1b.good 
	chapel/test/types/type_variables/deitz/part7/: construct-1b.good 
	                                               test_error1.good 
	                                               test_infer_class1.good 
	                                               test_infer_class2.good 
	chapel/test/types/type_variables/jplevyak/: where-3-error.good 

---------------------------------------------------------------------------

10/06/06 11:21:55 -- deitz

Log message:
	Improved error messages regarding arrays and domains by making the
	type look more like Chapel code and by calling an unresolved call to
	the this function an unresolved access.  Removed a .future.  Updated a
	few .goods.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/bradc/: twoDasTwoOneDs.good 
	chapel/test/classes/bradc/: weirdinit.good 
	chapel/test/trivial/bradc/: undefinedfn.good undefinedfn2.good 
Removed files:
	chapel/test/arrays/bradc/: twoDasTwoOneDs.future 

---------------------------------------------------------------------------

10/06/06 11:52:48 -- bradc

Log message:
	Filing a future in which striding a uint-indexed
	domain by a uint doesn't seem to work.  Would be
	convenient if it did.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: 
	                                    ra-bradc-strideduintdomain.chpl 
	                                    ra-bradc-strideduintdomain.good 
	                                    ra-bradc-strideduintdomain.future 

---------------------------------------------------------------------------

10/06/06 13:26:12 -- waynew

Log message:
	Removed an arg evaluation order assumption.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

10/06/06 14:03:48 -- bradc

Log message:
	Updated ra-bradc.chpl to utilize several new features:
	
	        - uint domains
	        - better shift operators
	        - inout arguments
	        - the bits() function
	        - timers
	        - [i in D]-style array declarations
	
	and moved the last version to ra-bradc-old2.chpl.
	
	This is starting to look like really great code to me!
	(I haven't looked at Mary Beth's version in quite some
	time because it's been easier to understand improvements
	in the compiler in the code I'm familiar with;  need
	to synch back up with where Mary Beth's code is soon).

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc.chpl 
Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-old2.chpl 
	                                    ra-bradc-old2.good 

---------------------------------------------------------------------------

10/06/06 14:06:18 -- bradc

Log message:
	Minor changes to MG code that I made before sending them
	to the guy managing the NPB benchmark suite these days
	who was interested in seeing them based on the PGAS talk.

Modified files:
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl 

---------------------------------------------------------------------------

10/06/06 15:08:02 -- marybeth

Log message:
	Checking in Random module.  This module contains fillRandomVec which
	fills a vector with random floats.  There are two versions - one that
	takes a seed and one that doesn't.
	
	The module needs further review.  The module now just has function
	definitions.  We may want the ability to create random number/vector objects.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
Added files:
	chapel/modules/standard/: Random.chpl 

---------------------------------------------------------------------------

10/06/06 15:34:21 -- deitz

Log message:
	Added compiler README that I started writing a long time ago but
	forgot to check in and forgot about too.

Added files:
	chapel/compiler/: README 

---------------------------------------------------------------------------

10/09/06 09:33:12 -- deitz

Log message:
	Moved syntax and statement brief definition of atomic, begin, cobegin,
	on, and serial into the parallelism and locality chapters.  Deleted
	these sections from the statements section.  Highlighted this move
	with "@@@--------" as it needs to be folded in to this chapter.

Modified files:
	chapel/spec/: spec.tex syntax_listing.tex 
	chapel/spec/Locality_and_Distribution/: On.tex 
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Atomic_Transactions.tex 
	                                              Begin.tex 
	                                              Cobegin.tex 
	                                              Serial.tex 
	chapel/spec/Statements/: Statements.tex 
Removed files:
	chapel/spec/Statements/: The_Atomic_Statement.tex 
	                         The_Begin_Statement.tex 
	                         The_Cobegin_Statement.tex 
	                         The_On_Statement.tex 
	                         The_Serial_Statement.tex 

---------------------------------------------------------------------------

10/09/06 09:36:38 -- deitz

Log message:
	Removed some dynamic allocation of ALists in the compiler in
	preparation for removing all dynamic allocation of ALists.  Dynamic
	allocation of alists is only done in parsing now.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp normalize.cpp 
	                         parallel.cpp 

---------------------------------------------------------------------------

10/09/06 09:55:52 -- deitz

Log message:
	Moved declaration statements to the sections that define what they
	declare.  Removed forall discussion from the statements section and
	moved the alternative syntax section into the parallelism section.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Functions/: Function_Definitions.tex 
	chapel/spec/Variables/: Variable_Declarations.tex 
Added files:
	chapel/spec/Modules/: Module_Definitions.tex 
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Alternative_Forall_Loop_Syntax.tex 
	chapel/spec/Statements/: The_For_Loop.tex 
	chapel/spec/Types/: Type_Definitions.tex 
Removed files:
	chapel/spec/Statements/: Alternative_Forall_Loop_Syntax.tex 
	                         Declaration_Statements.tex 
	                         Function_Declaration_Statements.tex 
	                         Module_Declaration_Statements.tex 
	                         The_For_and_Forall_Loops.tex 
	                         Type_Declaration_Statements.tex 
	                         Variable_Declaration_Statements.tex 

---------------------------------------------------------------------------

10/09/06 09:57:57 -- deitz

Log message:
	Fixed two undefined references.

Modified files:
	chapel/spec/Parallelism_and_Synchronization/: Cobegin.tex 
	chapel/spec/Statements/: Blocks.tex 

---------------------------------------------------------------------------

10/09/06 10:04:43 -- deitz

Log message:
	Simplified codegen and added code to inlining to remove functions that
	have been inlined at that point.  This improves compiler performance
	by about 6%.

Modified files:
	chapel/compiler/passes/: codegen.cpp inlineFunctions.cpp 

---------------------------------------------------------------------------

10/09/06 10:10:08 -- deitz

Log message:
	Removed .future as this test correctly shows an error for assigning an
	int to a uint.

Modified files:
	chapel/test/types/coerce/bradc/: int2uint.good 
Removed files:
	chapel/test/types/coerce/bradc/: int2uint.future 

---------------------------------------------------------------------------

10/09/06 10:22:50 -- deitz

Log message:
	Moved return discussion to Functions section, yield discussion to
	Iterators section.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Statements/: Statements.tex 
Added files:
	chapel/spec/Functions/: The_Return_Statement.tex 
	chapel/spec/Iterators/: The_Yield_Statement.tex 
Removed files:
	chapel/spec/Iterators/: Returning_Values.tex Yielding_Values.tex 
	chapel/spec/Statements/: The_Return_Statement.tex 
	                         The_Yield_Statement.tex 

---------------------------------------------------------------------------

10/09/06 11:31:36 -- waynew

Log message:
	Nested generic class/record test.

Added files:
	chapel/test/classes/waynew/: class-rec.chpl class-rec.future 
	                             class-rec.good 

---------------------------------------------------------------------------

10/09/06 11:59:54 -- deitz

Log message:
	Started working on types and primitive types section.  Added a new
	section to discuss the implicit conversion to bool for expressions
	used in a statement context.
	
	Moved locale type section to Locality section.
	
	Changed overall document and example style.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Types/: Primitive_Types.tex 
	                    Signed_and_Unsigned_Integral_Types.tex 
	                    The_Bool_Type.tex Types.tex 
Added files:
	chapel/spec/Conversions/: 
	                          Implicit_Statement_Bool_Conversions.tex 
	chapel/spec/Locality_and_Distribution/: The_Locale_Type.tex 
Removed files:
	chapel/spec/Types/: The_Locale_Type.tex 

---------------------------------------------------------------------------

10/09/06 14:09:23 -- marybeth

Log message:
	Adding test for length and rank fields of a domain.

Added files:
	chapel/test/domains/marybeth/: testrank.chpl testrank.good 

---------------------------------------------------------------------------

10/09/06 15:09:49 -- deitz

Log message:
	Made html view slightly more robust in the event of an invalid AST.
	
	Fixed a bug in which types that are only used in other types are
	sometimes not fully processed.
	
	Removed a .future.

Modified files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/classes/waynew/: class-rec.chpl 
Removed files:
	chapel/test/classes/waynew/: class-rec.future 

---------------------------------------------------------------------------

10/09/06 15:11:40 -- bradc

Log message:
	Snapshot of my current work on the FFT code.  I believe
	that I've got the main structure and array slices being
	sent to the butterfly() routine all correct now (at least
	up to logN==8).  Twiddles may be off, and I need to rip
	out a lot of debugging code, but wanted to capture where
	I am before moving on.
	
	The .txt files are traces of what happens at execution
	time.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: .cvsignore dfft-trace.txt 
	                                     dfft.c fft.chpl 
Added files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft-trace.7.txt 
	                                     dfft-trace.8.txt 

---------------------------------------------------------------------------

10/09/06 15:24:55 -- bradc

Log message:
	This test captures an expression that I tried to write
	to cast an integer to a float and multiply it by 2:
	
	        i:float*2
	
	but which was instead interpreted as a homogeneous tuple.
	
	From the .future file:
	
	  ...Would either like to have this work as I intended
	  or generate a better error message (in the latter
	  case, this seems like yet another case that might
	  cause us to re-think our homogeneous tuple specification
	  -- note that if it required parenthesis, this ambiguity
	  would not have occurred).
	
	This is *not* on the critical path for the HPCC deadline.

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: fft-badtuple.chpl 
	                                     fft-badtuple.future 
	                                     fft-badtuple.good 

---------------------------------------------------------------------------

10/09/06 17:37:41 -- bradc

Log message:
	Added the capability to create a test-specific ".notest" file
	that says the testing system should not run that test.  Added
	one of these to the FFT code until I get it more stable.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.notest 

---------------------------------------------------------------------------

10/09/06 17:50:11 -- marybeth

Log message:
	Checking in an updated version of the Random module.  This version
	attempts to safely generate a list of random numbers in parallel.
	
	There is now a rng class.  The idea is that you create a generator
	object that is initialized with a seed.  The one generator can be
	used to generate lists of random numbers.  Multiple lists can't
	be generated in parallel with one generator object, but each list
	is safely generated in parallel.  To create multiple lists of random
	numbers in parallel, you could create a generator object for each
	list and then proceed in parallel.
	
	I'm still not sure of this implementation and hope to learn more about
	the generator before saying that this version is correct.
	
	This version needs review for conventions and for correctness.

Modified files:
	chapel/modules/standard/: Random.chpl 

---------------------------------------------------------------------------

10/09/06 17:53:55 -- marybeth

Log message:
	Checking in a version of STREAMS that initializes the vectors with random
	numbers.  **This is different from the provided reference implementation.**
	
	This version uses the Random module which is still under development.
	
	The routine that checks the results needed to be modified to account for
	the vectors being initialized with random numbers rather a constant value
	for all entries.  I used the l_1-norm to compute the relative error in the
	computed solution.

Added files:
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	                                            stream.good 

---------------------------------------------------------------------------

10/09/06 18:12:09 -- bradc

Log message:
	Some edits and fixes that get the twiddle values
	being sent to the butterfly routine starting to
	match.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft.c fft.chpl 

---------------------------------------------------------------------------

10/10/06 09:15:27 -- deitz

Log message:
	Simplified parse code and removed more dynamic AList creations.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

10/10/06 11:19:09 -- deitz

Log message:
	Changed margins so that the spec fills more of the page.
	
	Added 'implementation' environment and an implementation note.  Use
	
	  \begin{implementation}
	  ...
	  \end{implementation}
	
	Added roman numbering of the table of context pages and everything up
	to page one.
	
	Changed optional syntax to use [OPT] which subscripts 'opt' to
	indicate an optional piece of the syntax definition.  This is the way
	it is done in all the other specs that I saw (as opposed to the
	brackets we used to use).  Updated syntax everywhere the syntax
	listing is used.
	
	Filled in the rest of the Primitive Types section.

Modified files:
	chapel/spec/: spec.tex syntax_listing.tex 
	chapel/spec/Functions/: Function_Definitions.tex 
	                        The_Return_Statement.tex 
	chapel/spec/Statements/: Blocks.tex 
	                         The_Conditional_Statement.tex 
	                         The_For_Loop.tex 
	                         The_Select_Statement.tex 
	                         The_Type_Select_Statement.tex 
	chapel/spec/Types/: Complex_Types.tex Floating-Point_Types.tex 
	                    Primitive_Type_Literals.tex 
	                    The_String_Type.tex Type_Definitions.tex 
	chapel/spec/Variables/: Variable_Declarations.tex 

---------------------------------------------------------------------------

10/10/06 11:43:28 -- deitz

Log message:
	Removed subsections that had the sole purpose of forward referencing
	and put the forward reference in the supersection.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Classes/: Class_Declarations.tex 
	chapel/spec/Types/: Enumerated_Types.tex Type_Aliases.tex 
	                    Types.tex 
Removed files:
	chapel/spec/Types/: Class_Types.tex Domain_and_Array_Types.tex 
	                    Record_Types.tex Sequence_Types.tex 
	                    Tuple_Types.tex Type_Definitions.tex 
	                    Union_Types.tex 

---------------------------------------------------------------------------

10/10/06 11:47:53 -- deitz

Log message:
	Put back forward reference type sections.  I actually just meant to
	pull the syntax definitions out of here and put those in the main
	sections, but then I got carried away.

Modified files:
	chapel/spec/: spec.tex 
Added files:
	chapel/spec/Types/: Class_Types.tex Domain_and_Array_Types.tex 
	                    Record_Types.tex Sequence_Types.tex 
	                    Tuple_Types.tex Union_Types.tex 

---------------------------------------------------------------------------

10/10/06 12:06:17 -- deitz

Log message:
	Filled in type aliases section.
	
	Added new command \rsec{SectionName} to cite a section.  It places
	parentheses around the section number and precedes the number with the
	section symbol.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Classes/: Class_Declarations.tex 
	chapel/spec/Types/: Type_Aliases.tex 

---------------------------------------------------------------------------

10/10/06 13:29:20 -- deitz

Log message:
	Added hexadecimal and binary literals to the spec.

Modified files:
	chapel/spec/Types/: Primitive_Type_Literals.tex 

---------------------------------------------------------------------------

10/10/06 13:52:40 -- waynew

Log message:
	Added timing calls to the stream.chpl benchmark.
	
	Checking in a copy so that Steve can take a look at a bug with the Timers
	module value function.

Added files:
	chapel/test/studies/hpcc/STREAMS/waynew/: stream2.chpl 
	                                          stream2.notest 

---------------------------------------------------------------------------

10/10/06 13:56:06 -- waynew

Log message:
	Uncommented code to enable the timer code to be generated and cause the
	bug.

Modified files:
	chapel/test/studies/hpcc/STREAMS/waynew/: stream2.chpl 

---------------------------------------------------------------------------

10/10/06 14:04:54 -- marybeth

Log message:
	Some text for the Language Overview sections.
	
	I added modified text from existing papers and writeups about Chapel
	for the Motivating Principle sections.

Modified files:
	chapel/spec/Language_Overview/: Language_Overview.tex 
	                                Global_View_Programming_Model.tex 
	                                Generic_Programming.tex 
	                                Basic_Language_Features.tex 

---------------------------------------------------------------------------

10/10/06 14:21:18 -- deitz

Log message:
	Added a simple test to show a bug with the reference implementation
	that shows up when a timer is read without being stopped.  Working on
	a fix.

Added files:
	chapel/test/trivial/deitz/: test_timer2.chpl test_timer2.future 
	                            test_timer2.good 

---------------------------------------------------------------------------

10/10/06 14:27:28 -- bradc

Log message:
	Here's a bug that causes an expressiveness problem
	for the HPCC FT benchmark.  For some reason the
	expression -1.0i seems to have the value 0.0 + 0.0i.

Added files:
	chapel/test/types/complex/bradc/: negateimaginary.chpl 
	                                  negateimaginary.future 
	                                  negateimaginary.good 

---------------------------------------------------------------------------

10/10/06 14:34:51 -- deitz

Log message:
	Fixed a couple of bugs in arithmetic sequences:
	
	Bounds were not snapped so
	
	  1..10 by -2       ===>  10, 8, 6, 4, 2
	  1..10 by -2 by -2 ===>  1, 5, 9
	
	Now
	
	  1..10 by -2       ===>  10, 8, 6, 4, 2
	  1..10 by -2 by -2 ===>  2, 6, 10
	
	Checked in a test case.
	
	Note that
	
	  1..10 by -2
	
	now prints out as
	
	  2..10 by -2
	
	since the bounds are snapped.
	
	Fixed a bug in the write function in which negative strides were not
	written.
	
	Added a runtime error to check for a stride of 0.
	
	Updated a few .goods.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/stride/: test_stride1.good 
	                                  test_stride2.good 
	chapel/test/domains/shannon/: by4Dtuple.good 
	chapel/test/types/seq/deitz/: test_aseq3.good 

---------------------------------------------------------------------------

10/10/06 14:51:30 -- bradc

Log message:
	Got to the point where all calls to butterfly() are sending in
	the same array elements and twiddle values.  This is now quite
	close to being correct code.  Then, some cleanup will be needed.
	
	Note: that bug I checked in about -1.0i isn't as important as I
	thought it was -- turns out the literal should've been 1.0i anyway.
	
	This checkin also includes what I believe to be a bug in John Feo's
	code.  I've mailed him to confirm that this is the case.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft.c fft.chpl 

---------------------------------------------------------------------------

10/10/06 15:02:50 -- deitz

Log message:
	Really disabled folding of binary operators over strings, complexes,
	and floats.  A few cases could have gotten through.  Disabled folding
	of unary operators over these types as well.  Implemented unary + and
	- on complexes.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 

---------------------------------------------------------------------------

10/10/06 15:03:21 -- deitz

Log message:
	Removed .future.

Removed files:
	chapel/test/types/complex/bradc/: negateimaginary.future 

---------------------------------------------------------------------------

10/11/06 10:09:09 -- deitz

Log message:
	Added sequence 1..10 by -2 by -2 test case that I meant to checkin
	yesterday with the related fix.

Added files:
	chapel/test/types/seq/deitz/: test_aseq4.good test_aseq4.chpl 

---------------------------------------------------------------------------

10/11/06 10:35:49 -- deitz

Log message:
	Added distributed syntax as in
	
	  var d: domain(expression-list) distributed(expression)
	
	The distributed expression is ignored.
	
	Made domain literals parse if followed by a method on that domain
	literal.
	
	Added
	
	  def domain.size return /* the size of the domain */;

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_parse_distributed.chpl 
	                           test_parse_distributed.good 
	chapel/test/domains/deitz/: test_domain_size.chpl 
	                            test_domain_size.good 

---------------------------------------------------------------------------

10/11/06 10:54:12 -- deitz

Log message:
	Renamed domain.size to domain.numIndices.  Added convenience method
	array.numElements.  These are not implemented over indefinite domains
	and arrays.  Updated a test case.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/domains/deitz/: test_domain_size.chpl 
	                            test_domain_size.good 

---------------------------------------------------------------------------

10/11/06 10:54:38 -- deitz

Log message:
	Made culling of over references more aggressive.  This aggressiveness
	is necessary for correctness.  Note that aggressiveness is not typical
	of compilers where correctness often leads to conservativeness and/or
	reservedness.
	
	Removed a .future.
	
	Note: this also fixes test/studies/hpcc/STREAMS/waynew/stream2 which
	has a .notest attached to it.

Modified files:
	chapel/compiler/passes/: cullOverReferences.cpp 
Removed files:
	chapel/test/trivial/deitz/: test_timer2.future 

---------------------------------------------------------------------------

10/11/06 11:20:23 -- bradc

Log message:
	Fixed the last bug in getting my FFT results to match
	John Feo's code's.  Now, on to cleanup.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: dfft.c fft.chpl 

---------------------------------------------------------------------------

10/11/06 11:32:16 -- bradc

Log message:
	Rewrote to pass array slices into butterfly -- and it still
	works with no problems!!  (Thanks Steve!)

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/11/06 11:50:36 -- deitz

Log message:
	Added support for domain literals of the form
	
	  [domain-specification)
	
	where the upper bound is treated exclusively in the arithmetic domain
	case so, for example, [1..10, 1..10) is equivalent to [1..9, 1..9].
	
	A runtime error occurs if the stride of the arithmetic domain is not 1
	because I didn't know what to do otherwise.
	
	A compiler error occurs if the domain is not arithmetic.  The error
	message is not very good.
	
	Added a test case.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/domains/deitz/: test_mismatched_brackets.chpl 
	                            test_mismatched_brackets.good 

---------------------------------------------------------------------------

10/11/06 13:54:40 -- bradc

Log message:
	This is high priority for HPCC FFT -- either by
	fixing it or suggesting a clean workaround.n
	
	This future test shows that assigning an array
	the negation of its imaginary component does
	not currently work.

Added files:
	chapel/test/types/complex/bradc/: negateimaginary2.chpl 
	                                  negateimaginary2.future 
	                                  negateimaginary2.good 

---------------------------------------------------------------------------

10/11/06 13:56:36 -- marybeth

Log message:
	Updated stream.chpl to include timing and printing results.  This version
	initializes the vectors with random numbers, times the update loop, computes
	the resulting times and prints them out.

Modified files:
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	                                            stream.good 

---------------------------------------------------------------------------

10/11/06 14:10:55 -- deitz

Log message:
	This checkin fixes two related bugs!
	  This regression is now working: arrays/bradc/stridedArrayArg2
	  This future is now removed: studies/blas/marybeth/saxpy1
	
	Fixed a bug in which assigning to array arguments via whole array
	assignment was being flagged as a constant assignment error.
	
	Fixed a bug in which compound assignments, e.g., +=, are now supported
	over arrays.  A cast to the type of the lhs is put in, but this
	doesn't work over types that scalar promote, so the cast is ignored in
	that case.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	                         semanticChecks.cpp 
Removed files:
	chapel/test/studies/blas/marybeth/: saxpy1.future 

---------------------------------------------------------------------------

10/11/06 15:14:48 -- deitz

Log message:
	Made it so that the element type of a formal argument's array type can
	be elided as in
	
	  def foo(A: [?D]) { ... }
	  def foo(A: []) { ... }
	  def foo(A: [2..5]) { ... }
	
	Updated an error message to a test that tried to elide the element
	type from an array declared not as a formal argument type.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/arrays/bradc/: noelemtype.good 
Added files:
	chapel/test/arrays/deitz/: test_no_elt_type.chpl 
	                           test_no_elt_type.good 

---------------------------------------------------------------------------

10/11/06 15:14:58 -- bradc

Log message:
	Adding a test that shows if you don't overload division
	on (complex,float), you get problems with -0.0 values.
	
	Tried to fix this by adding the following routine to
	_chpl_complex.chpl:
	
	pragma "inline" def /(a: complex(?w), b: float(?w2))
	  return (a.real/b, a.imag/b): complex;
	
	but it causes a seg fault.  Some other variations that I
	tried caused ambiguities in which it seemed that casting
	to a complex or a larger float were equally viable.
	
	The following worked, but did not seem general enough:
	
	pragma "inline" def /(a: complex(?w), b: float)
	  return (a.real/b, a.imag/b): complex;
	
	Getting this fixed would be nice for HPCC FFT.

Added files:
	chapel/test/types/complex/bradc/: negateimaginary3.chpl 
	                                  negateimaginary3.future 
	                                  negateimaginary3.good 

---------------------------------------------------------------------------

10/11/06 15:17:03 -- bradc

Log message:
	This is a much lower-priority future showing that
	-0.0i imaginary literals don't seem to get preserved.
	Not necessary to get right soon, just ran into it
	along the way and was thrown off by it for quite some
	time.

Added files:
	chapel/test/types/complex/bradc/: negativeimaginaryliteral.chpl 
	                                  negativeimaginaryliteral.future 
	                                  negativeimaginaryliteral.good 

---------------------------------------------------------------------------

10/11/06 15:28:09 -- bradc

Log message:
	Cleaned up the debug printing a bit and worked around
	inability to do whole-array assignment on the real/imaginary
	components of a complex array (e.g., A.real = ... or A.imag = ...)

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/11/06 16:42:35 -- bradc

Log message:
	This is currently the highest priority for HPCC FFT
	and represents a compiler regression that's come up
	in the past few days.  From the future file:
	
	The new "snapping" by operator seems to be implemented
	incorrectly -- in particular, lo bounds must be snapped
	up and high bounds down.  In this case, a high bound
	is shown to snap up, causing a degenerate range to
	become non-empty.  See ZPL's implementation for a reference.

Added files:
	chapel/test/types/seq/bradc/: degenseq.chpl degenseq.future 
	                              degenseq.good 

---------------------------------------------------------------------------

10/11/06 17:07:22 -- deitz

Log message:
	Fixed a bug in which empty arithmetic sequences did not remain empty
	when operated on with the 'by' operator.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/types/seq/bradc/: degenseq.good 
Removed files:
	chapel/test/types/seq/bradc/: degenseq.future 

---------------------------------------------------------------------------

10/11/06 18:36:08 -- bradc

Log message:
	Fixed John's code so that it runs correctly on
	our Linux boxes and put in a bunch of (currently
	commented out) debugging print statements.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.c 

---------------------------------------------------------------------------

10/11/06 18:44:33 -- bradc

Log message:
	I spoke too soon earlier, having believed that if
	logN==10 worked other problem sizes would work as
	well.  Turned out there were still some subtle bugs
	that only showed up at larger and smaller problem
	sizes.  I believe things are now working (which is
	to say, the error keeps pace with John's for
	logN=3..17 on a ramp of input values and is less
	than the tolerance for a random input).
	
	The bugs that this version fixes are:
	  - strided degenerate sequences are correct again
	    (thanks to Steve's fix)
	  - two loops were strided incorrectly and are now
	    fixed -- one by m2 rather than 2; the other by
	    1 rather than 2.
	  - the code that manually cleans up "odd" problem
	    sizes is now correct.
	
	Now I should be in a position to clean this code up
	tomorrow.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/12/06 09:08:21 -- deitz

Log message:
	Fix to last night's regressions.  My fault.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

10/12/06 12:09:40 -- deitz

Log message:
	Made it so that methods bound to a primitive type that can be
	parameterized by the number of bits that it contains is a generic
	method.  It is replicated over all of the types.  For example,
	
	  def int.print() { ... }
	
	creates methods over all size of int.
	
	Removed a hack on the complex names and cleaned up the complex module's
	implementation of the real and imag methods.
	
	Removed a .future.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/test/trivial/deitz/: test_integer_method3.chpl 
	                            test_integer_method3.good 
Removed files:
	chapel/test/trivial/deitz/: test_integer_method3.future 

---------------------------------------------------------------------------

10/12/06 12:25:51 -- waynew

Log message:
	- Partial check in of indefinite domain implementation.
	  - most of the functionality should be there.  Currently missing
	    remapping of associated arrays when internal maps change.  Also not
	    tested yet is domain assignment.
	  - added init(d:elt_type) function for domain initialization
	- Internal _stack class (used by indef. domain). Put in a new module,
	  _chpl_ds.chpl.
	- Test growing and shrinking indef domains.
	- Test add/remove exercising reuse of removed indices.
	- Removed .future.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_indefinite.chpl 
	                          _chpl_standard.chpl 
Added files:
	chapel/modules/standard/: _chpl_ds.chpl 
	chapel/test/domains/indefinite/waynew/: indef4.chpl indef4.good 
	                                        indef6.chpl indef6.good 
Removed files:
	chapel/test/domains/deitz/: test_indefinite_remove.future 

---------------------------------------------------------------------------

10/12/06 12:30:48 -- deitz

Log message:
	Added new module Types and added a function numBits that works on
	types to this module.  It is copied from the bits function, but the
	bits function is not removed in this checkin.
	
	Added new module BitOps which is empty.
	
	Renamed module Timers to Time in expectation of adding more
	functionality.
	
	Updated some tests.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra2.chpl ra3.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream2.chpl 
	chapel/test/trivial/deitz/: test_timer1.chpl test_timer2.chpl 
Added files:
	chapel/modules/standard/: BitOps.chpl Time.chpl Types.chpl 
Removed files:
	chapel/modules/standard/: Timers.chpl 

---------------------------------------------------------------------------

10/12/06 13:37:21 -- marybeth

Log message:
	Turned off printing of timing results of stream benchmark.  Now, nightly
	tests won't fail.

Modified files:
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	                                            stream.good 

---------------------------------------------------------------------------

10/12/06 14:02:57 -- marybeth

Log message:
	Added a test that fails when using the distributed syntax.  The domain's type
	is no longer being inferred from the initialization assignment.

Added files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-test-dist.chpl 
	                                       ra-test-dist.future 
	                                       ra-test-dist.good 

---------------------------------------------------------------------------

10/12/06 14:24:18 -- deitz

Log message:
	Implemented improved Time module interface, adding units and changing
	value to elapsed.
	
	Use
	
	  timer1.elapsed(unit=hours)
	
	for long-running programs, for example.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/modules/standard/: Time.chpl 
	chapel/runtime/include/: chplrt.h 
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra2.chpl ra3.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream2.chpl 
	chapel/test/trivial/deitz/: test_timer1.chpl test_timer2.chpl 

---------------------------------------------------------------------------

10/12/06 14:26:36 -- deitz

Log message:
	Changed to "use Time" (again?).

Modified files:
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 

---------------------------------------------------------------------------

10/12/06 14:28:59 -- deitz

Log message:
	Removed extra space in .good.  It must have been generated by hand?

Modified files:
	chapel/test/domains/indefinite/waynew/: indef6.good 

---------------------------------------------------------------------------

10/12/06 14:44:00 -- deitz

Log message:
	Fixed a uint(64) arithmetic domain bug and a test, and removed a .future.
	
	If this test is meant to capture something else (the error message,
	distributed but infered domain type), check in another modified
	version.
	
	Moved floating point operations out of _chpl_base and into
	_chpl_complex in expectation of work on this.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_complex.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra-test-dist.chpl 
Removed files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-test-dist.future 

---------------------------------------------------------------------------

10/12/06 14:51:15 -- waynew

Log message:
	For indefinite domain/array, functions numIndices/numElements.
	
	Changed test to test those calls.

Modified files:
	chapel/modules/standard/: _chpl_indefinite.chpl 
	chapel/test/domains/indefinite/waynew/: indef6.chpl indef6.good 

---------------------------------------------------------------------------

10/12/06 15:32:21 -- deitz

Log message:
	Implemented getCurrentTime() and getCurrentDate() as discussed.
	Interfaces are difficult.  But I think this is good enough for a first
	pass and for now.  getCurrentTime returns a float that is the number
	of seconds since Midnight or you can specify what units to use as an
	argument to the function.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/modules/standard/: Time.chpl 
	chapel/runtime/include/: chplrt.h 
	chapel/runtime/src/: chpltypes.c 

---------------------------------------------------------------------------

10/12/06 15:36:14 -- deitz

Log message:
	Added a test of the getCurrentDate function.

Added files:
	chapel/test/functions/deitz/Time/: test_getCurrentDate.chpl 
	                                   test_getCurrentDate.good 

---------------------------------------------------------------------------

10/12/06 15:46:29 -- bradc

Log message:
	Starting cleanup.  Converted [l..h-1] expressions to [l..h)
	and cleaned up some debugging stuff.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/12/06 16:00:19 -- deitz

Log message:
	Added specification of the Time module.
	
	This needs to be reformatted.

Modified files:
	chapel/spec/: spec.tex 
Added files:
	chapel/spec/Standard_Modules/: Time.tex 
Removed files:
	chapel/spec/Standard_Modules/: Timers.tex 

---------------------------------------------------------------------------

10/12/06 16:16:43 -- bradc

Log message:
	Still cleaning up.  It's still working, so this is
	a checkpoint.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/12/06 16:30:43 -- marybeth

Log message:
	I cleaned up the Random module:
	
	- I added a standalone routine, fillRandom which takes an array and
	fills it with random numbers.  Optional arguments are seed and arand.
	I only implemented this for the case where the in/out array is 1D.
	Note:  to reproduce the same list of random numbers, you must set
	both seed and arand.
	
	- I changed the name of the class to randomStream.
	
	- I cleaned up some things in the class routines.  fillRandom is now
	much, much cleaner since I assumed it was running serially.  It also
	only works on 1D arrays so far.
	
	- If seed and arand aren't set (either when creating a randomStream
	object or when calling the fillRandom standalone routine), they are
	set to values involving calls to getCurrentTime.  I set the seed to
	the current time in microseconds and arand to the current time in
	seconds + the current time in milliseconds.  The difference in magnitude
	between seed and arand seems to produce numbers with more randomness in
	them.  If others have other ideas, please implement them.
	
	- The class keeps track of how many random numbers have been generated
	so far in that stream.  The seed and arand are kept constant.
	
	I added a test that tests the standalone routine and fillRandom for an
	object with constant seeds and arands.  The output will be constant and
	suitable for a test.

Modified files:
	chapel/modules/standard/: Random.chpl 
Added files:
	chapel/test/modules/standard/Random/marybeth/: test-Random.chpl 
	                                               test-Random.good 

---------------------------------------------------------------------------

10/12/06 16:58:26 -- bradc

Log message:
	Stopping point for today.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/12/06 17:49:56 -- marybeth

Log message:
	Updated stream benchmark with latest Random module.
	
	Set seed and arand to floats that are odd integers.  (If they aren't odd,
	then the stream will end up generating 0's at some point.)

Modified files:
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	                                            stream.good 

---------------------------------------------------------------------------

10/12/06 17:50:54 -- marybeth

Log message:
	Version of stream benchmark for review.

Added files:
	chapel/test/studies/hpcc/STREAMS/: stream.chpl stream.good 

---------------------------------------------------------------------------

10/12/06 17:58:06 -- marybeth

Log message:
	I made a few changes to the Random module:
	
	- I changed the class name to RandomStream.
	
	- I deleted the use Random in the standalone routine.
	
	- I made sure that seed and arand were always set to an odd integer float.
	
	I updated tests that use this module.

Modified files:
	chapel/modules/standard/: Random.chpl 
	chapel/test/studies/hpcc/STREAMS/: stream.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	chapel/test/modules/standard/Random/marybeth/: test-Random.chpl 

---------------------------------------------------------------------------

10/12/06 18:17:50 -- marybeth

Log message:
	Updated ra3.chpl (and just ra3, not ra2 also) to use the [) notation
	for the domains that are 0-based.  I also used the naming conventions that Brad
	and Steve agreed to.
	
	I added atomic to the update of the table.
	
	I didn't add distributed to the TableDomain declaration since I could not
	get it to work with a uint(64) type.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra3.chpl 

---------------------------------------------------------------------------

10/12/06 18:19:33 -- marybeth

Log message:
	The most recent version of RA for review.  It is almost complete, except for
	adding distributed to the declaration of the TableDomain.

Added files:
	chapel/test/studies/hpcc/RA/: ra.chpl ra.good 

---------------------------------------------------------------------------

10/12/06 18:26:06 -- marybeth

Log message:
	Updated stream benchmark.  Created a VecDomain that is distributed.

Modified files:
	chapel/test/studies/hpcc/STREAMS/: stream.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 

---------------------------------------------------------------------------

10/13/06 08:54:59 -- deitz

Log message:
	Added imag type to the compiler base.  There is currently no way to
	specify an imaginary type other than explicitly.  The main change is
	coming next.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_complex.chpl 

---------------------------------------------------------------------------

10/13/06 14:52:57 -- bradc

Log message:
	Overloaded fillRandom for 1D arrays of complex numbers.

Modified files:
	chapel/modules/standard/: Random.chpl 

---------------------------------------------------------------------------

10/13/06 15:36:36 -- bradc

Log message:
	Steve pointed out that I might want to check in a copy of
	FFT that works to prevent regressions in the next week or
	so.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: .cvsignore fft.good 
Added files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.execopts 
Removed files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.notest 

---------------------------------------------------------------------------

10/13/06 15:54:21 -- marybeth

Log message:
	Checking in simplified version of fft.  This version does not special case
	for when the twiddle factors are 1.0.  It also does not have different parallel
	versions which can be used at specified times to produce optimized results.

Added files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft.chpl fft.execopts 
	                                        fft.good 

---------------------------------------------------------------------------

10/13/06 16:01:36 -- bradc

Log message:
	Found a bug in which [i in D]-style array initializations
	don't seem to work when they are used to declare local
	variables based on queried domains.

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: fft-arrinit.chpl 
	                                     fft-arrinit.good 
	                                     fft-arrinit.future 

---------------------------------------------------------------------------

10/13/06 16:13:39 -- bradc

Log message:
	Filing a future/bug in which whole-array permutations
	don't seem to work.  For example:
	
	        A(Perm) = B;

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: fft-perm.chpl 
	                                     fft-perm.future 
	                                     fft-perm.good 

---------------------------------------------------------------------------

10/13/06 16:29:56 -- waynew

Log message:
	.future should have been removed with my previous indefinite domain checkin.

Removed files:
	chapel/test/domains/deitz/: test_indefinite_remove2.future 

---------------------------------------------------------------------------

10/13/06 16:31:48 -- bradc

Log message:
	Filing a future to flag zippered iterations that have
	different number of elements at runtime.

Added files:
	chapel/test/studies/hpcc/FFT/bradc/: fft-zip.chpl fft-zip.good 
	                                     fft-zip.future 

---------------------------------------------------------------------------

10/13/06 16:55:27 -- bradc

Log message:
	Continuing to clean this up.  Moved bitReverse() routine
	in here, added zippered iterations, made the twiddles
	calculation use more of a permutation-style of computation.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/13/06 17:12:49 -- bradc

Log message:
	Starting to rename some of these 1-letter variables...

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/13/06 17:38:41 -- bradc

Log message:
	Here's where this exercise is ending today.  I
	replaced a bunch of explicit complex manipulation
	with multiplications by 1.0i following Steve's
	nice suggestion.  Haven't replaced those weirder
	complex expressions yet -- still trying to intuit
	some sense from them.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/13/06 17:47:00 -- bradc

Log message:
	It seems that if this module has no code in it,
	it doesn't get used properly.  I added some bogus
	code for now.
	
	I have moved the BitOps from _chpl_math to here
	in my private version of the compiler, but have
	not had a chance to test yet, so will test over
	the weekend and check in on Monday if it works.
	In doing this move, I've also cleaned some of
	them up a bit/generalized them.

Modified files:
	chapel/modules/standard/: BitOps.chpl 

---------------------------------------------------------------------------

10/16/06 10:23:04 -- bradc

Log message:
	Made testing system execute a .notest test when the
	-onetest flag is used to specify it explicitly.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

10/16/06 10:26:45 -- bradc

Log message:
	Populated the BitOps module with functions from _chpl_math.
	Updated tests to "use BitOps" if necessary.

Modified files:
	chapel/modules/standard/: BitOps.chpl _chpl_math.chpl 
	chapel/test/trivial/deitz/: test_bpop.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: bitreverse.chpl 
	                                     bitreverse2.chpl 
Added files:
	chapel/test/studies/hpcc/STREAMS/marybeth/: .cvsignore 

---------------------------------------------------------------------------

10/16/06 10:28:25 -- bradc

Log message:
	Missed this one in my last check-in somehow.

Modified files:
	chapel/test/npb/ft/: ft-serial.chpl 

---------------------------------------------------------------------------

10/16/06 12:10:23 -- bradc

Log message:
	Forgot to do an update -d, and so missed fixing up this
	test during my last check-in.

Modified files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft.chpl 

---------------------------------------------------------------------------

10/16/06 13:25:14 -- deitz

Log message:
	Added front-end and module support for an imaginary type called
	imaginary.
	
	Update .good and fixed regression types/complex/bradc/negateimaginary.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp view.cpp 
	chapel/compiler/ifa/: num.cpp num.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/runtime/include/: chplio.h chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/types/complex/bradc/: negateimaginary.good 

---------------------------------------------------------------------------

10/16/06 13:42:15 -- deitz

Log message:
	Removed .future of working test.

Removed files:
	chapel/test/types/complex/bradc/: negateimaginary3.future 

---------------------------------------------------------------------------

10/16/06 15:43:33 -- waynew

Log message:
	Fixed a bug with function local array declaration with iterator
	initialization. Removed .future in a test that showed this.
	
	Fixed a bug with remove for indefinite domains.
	
	Test case that I forgot to check in last time.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_indefinite.chpl 
Added files:
	chapel/test/domains/indefinite/waynew/: indef7.chpl indef7.good 
Removed files:
	chapel/test/studies/hpcc/FFT/bradc/: fft-arrinit.future 

---------------------------------------------------------------------------

10/17/06 11:29:55 -- bradc

Log message:
	A very strange bug in which if a module defines a const, an
	internal error occurs in the verify pass.  If the const is
	re-defined to be a var, the problem goes away.
	
	This is the reason that I couldn't introduce a new
	standard module yesterday -- the first declaration
	in it was a const.  Surely other standard modules
	contain consts?

Added files:
	chapel/test/modules/bradc/: use_modulewithconst.chpl 
	                            use_modulewithconst.compopts 
	                            use_modulewithconst.future 
	                            use_modulewithconst.good 
	chapel/test/modules/bradc/usemodulewithconst/: 
	                                               moduleWithConst.chpl 

---------------------------------------------------------------------------

10/17/06 11:31:51 -- bradc

Log message:
	Forgot this file in my previous check-in.

Added files:
	chapel/test/modules/bradc/usemodulewithconst/: NOTEST 

---------------------------------------------------------------------------

10/17/06 12:01:57 -- marybeth

Log message:
	Checking in a test for an error that I got when updating the Random
	module.

Added files:
	chapel/test/classes/marybeth/: test-init.chpl test-init.future 
	                               test-init.good 

---------------------------------------------------------------------------

10/17/06 12:08:05 -- bradc

Log message:
	Filing a bug in which functions with two default
	arguments don't seem to set up the second default
	value...  :(

Added files:
	chapel/test/functions/bradc/: defaultParamBoolInt.chpl 
	                              defaultParamBoolInt.future 
	                              defaultParamBoolInt.good 

---------------------------------------------------------------------------

10/17/06 13:19:15 -- bradc

Log message:
	Removed GC-specific aspects of testing
	system now that we no longer use GC.
	This should get the valgrind tests
	that much closer to working.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

10/17/06 15:10:40 -- bradc

Log message:
	This is the bug that my Needle in the Haystack mails
	were searching for.
	
	It seems that when a single program contains both
	uint and int domains, it causes ambiguities in the
	realloc routines.

Added files:
	chapel/test/arrays/bradc/: intuintarr.chpl intuintarr.future 
	                           intuintarr.good 

---------------------------------------------------------------------------

10/17/06 16:04:01 -- bradc

Log message:
	Added two new modules, one automatic, one standard:
	
	  _chpl_machine.chpl : defines machine-oriented
	                       concepts like the "locale" type
	
	  Memory.chpl : defines optional memory-oriented
	                routines
	
	Both of these could use more work, but provide a
	starting point.  Added a few tests of the
	_chpl_machine module.  Memory tests will come next.
	
	Also added a numBytes() function to the Types module,
	which is implemented in terms of numBits().
	
	There are two expected REGRESSIONS which I need
	to check into, but couldn't mentally handle juggling
	anymore:
	
	[Error matching program output for memory/shannon/reallocWithoutMalloc]
	[Error matching program output for memory/shannon/reallocWithoutMallocLineno]
	
	In more detail:
	
	_chpl_machine.chpl defines...
	
	  numLocales -- the number of locales the job is
	                running on; currently hard-coded to 1
	
	  LocaleDomain -- a domain describing the domain of
	                  locales the job is running on;
	                  this should maybe be retired
	
	  locale -- the "opaque" locale type;  currently
	            implemented as a class that prints out
	            LOCALEk when written.
	
	It wants to define:
	
	  Locale -- the array of locales the job is running on
	
	except that this causes the intuintarr.chpl bug for
	any tests that use a uint domain.
	
	Memory.chpl defines:
	
	  memUints -- an enumeration like the one in Time.chpl
	              but for memory
	
	  physicalMemory -- a routine that takes a locale
	                    number and returns the amount of
	                    physical memory available on that
	                    locale; currently hard-coded to
	                    be the value on my machine.
	
	  Locale -- the array of locales the job is running on.
	            This is here for now so that I can use it
	            in certain tests without breaking others.

Modified files:
	chapel/runtime/src/: config.c 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: Types.chpl _chpl_standard.chpl 
Added files:
	chapel/modules/standard/: Memory.chpl _chpl_machine.chpl 
	chapel/test/modules/standard/machine/: machine.chpl machine.good 
	                                       numLocales2.chpl 
	                                       numLocales2.execopts 
	                                       numLocales2.good 

---------------------------------------------------------------------------

10/17/06 16:40:05 -- bradc

Log message:
	Added a HPCCProblemSize module that computes
	the problem size for an HPCC test given:
	
	  - an element type
	  - the number of vectors to be allocated
	  - the fraction of memory to use
	  - whether or not a power-of-2 should be
	    returned
	
	Also checking in a test that computes these
	numbers for the three benchmarks we're
	working on.
	
	This code would be improved by support for
	multiple default values as caputured in the
	defaultParamBoolInt.chpl test I checked in
	earlier.

Added files:
	chapel/test/studies/hpcc/common/: probSize.chpl probSize.notest 
	                                  testProbSize.chpl 
	                                  testProbSize.compopts 
	                                  testProbSize.good 

---------------------------------------------------------------------------

10/17/06 17:00:08 -- bradc

Log message:
	Trying to clean up my version of the compiler --
	this change affects Chapel developers by moving
	the [filename.chpl:lineno] information that
	points out where an internal error/warning
	occurred to the end of an error line.  I've been
	using this for 2-3 weeks or so now (since we
	last disccussed it) and have been finding it
	makes everything much easier to parse.
	
	If, after trying it for a few days, Steve and
	Wayne disagree, we can change it back.  Last
	we discussed people were either open to it,
	or tired of arguing with me.  :)

Modified files:
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

10/17/06 17:03:45 -- bradc

Log message:
	This check-in adds support for setting configuration
	variables using --varName=... in addition to the
	traditional -svarName=...  (I think that there was
	general support for this concept and that the more
	contentious question was whether or not to continue
	to support the -s flag).
	
	This check-in also fixes the two regressions caused
	by my checkin of the Memory and _chpl_machine modules.
	I think my use of strings and/or a halt() routine is
	what caused them to regress, because the buffer space
	allocated by glom_strings before we started tracking
	memory was then reallocated after we started tracking
	memory.  Got around this by special-casing that pointer
	in the track memory routine for now (and this should
	get cleaned up when I rewrite the memory tracking code
	in Chapel).

Modified files:
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: arg.c chplmem.c chpltypes.c config.c 
	chapel/test/execflags/shannon/: invalidExecOption.good 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarFileStringsNoEquals.good 
Added files:
	chapel/test/studies/hpcc/RA/: .cvsignore 
	chapel/test/studies/hpcc/STREAMS/bradc/: .cvsignore 

---------------------------------------------------------------------------

10/18/06 09:52:44 -- bradc

Log message:
	Checking in a test of an iterator in a class that, if
	we could get it working, would be really nice for
	creating an iterator without our RandomStream class.

Added files:
	chapel/test/functions/iterators/bradc/: iteratorInClass.chpl 
	                                        iteratorInClass.future 
	                                        iteratorInClass.good 

---------------------------------------------------------------------------

10/18/06 10:50:39 -- marybeth

Log message:
	I updated the Random module with the suggested changes by Brad
	and Steve.
	
	- Now, only one seed is required to initialize the generator.
	
	- The seed is now an integer.
	
	- If the given seed is even, it is incremented by 1 so that is the
	required odd integer.
	
	I updated the tests that use the module accordingly.

Modified files:
	chapel/modules/standard/: Random.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 
	chapel/test/studies/hpcc/FFT/marybeth/: fft.chpl 
	chapel/test/studies/hpcc/STREAMS/: stream.chpl stream.good 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	                                            stream.good 

---------------------------------------------------------------------------

10/18/06 11:57:22 -- waynew

Log message:
	Changed additional instances using grep to tread input as text file.
	Hopefully, this should remove the issues with a binary file being
	generated for the log or summary file.

Modified files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

10/18/06 14:50:49 -- marybeth

Log message:
	Correcting a typo in the stream.good file.

Modified files:
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.good 

---------------------------------------------------------------------------

10/18/06 14:56:03 -- marybeth

Log message:
	Checking in an updated fft.good which matches the output, given the
	current Random module.

Modified files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft.good 

---------------------------------------------------------------------------

10/18/06 16:08:41 -- bradc

Log message:
	Learned that my config var setting via -- change
	from the other day didn't work for config vars
	that start with "m".  This remedies that slightly
	by making all config vars that don't start with
	the same name as any of our memory flags work.
	The more general solution still waits for the
	memory tracking code to be put into a Chapel
	module.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/memory/shannon/: invalidMemFlag.good 

---------------------------------------------------------------------------

10/18/06 16:23:38 -- bradc

Log message:
	Made a small change to the Random number module, such that
	if "0" is passed in as the seed, it requests the module to
	pick a seed at random (in particular, using the clock).

Modified files:
	chapel/modules/standard/: Random.chpl 

---------------------------------------------------------------------------

10/18/06 16:53:21 -- bradc

Log message:
	A small change to the Random number module.
	Added a "SeedGenerator" which gives the
	capability of having the module generate
	seeds for you.  Currently, this is done by
	using sentinel values (i.e., naming the 0
	value that my previous checkin used).
	However, I think the next version of this
	should actually have the class generate
	the seed and return it.  This provides the
	right illusion for the HPCC codes, so I'm
	going to come back to it later.
	
	Currently, the only seed that it will
	generate is the "useClockMS" seed -- the
	one that we've been using internally to
	the module.

Modified files:
	chapel/modules/standard/: Random.chpl 

---------------------------------------------------------------------------

10/18/06 16:54:21 -- bradc

Log message:
	My revision to the stream.chpl benchmark.  This is
	the candidate I'd like to propose writing the paper
	around.  Please review and send me comments as soon
	as you get a chance.

Added files:
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.chpl 
	                                   stream-candidate.compopts 
	                                   stream-candidate.execopts 
	                                   stream-candidate.good 

---------------------------------------------------------------------------

10/18/06 16:56:26 -- bradc

Log message:
	Oops, forgot one more renaming that I wanted.

Modified files:
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.chpl 

---------------------------------------------------------------------------

10/18/06 17:58:57 -- waynew

Log message:
	Changed test a little to show that no default values for the generic params
	are being set correctly in the wrapper.  Previous test/note suspected that
	it was only the latter generics in the list.

Modified files:
	chapel/test/functions/bradc/: defaultParamBoolInt.chpl 
	                              defaultParamBoolInt.future 
	                              defaultParamBoolInt.good 

---------------------------------------------------------------------------

10/18/06 17:59:11 -- bradc

Log message:
	Fixed my streams norm calculation and naming of the norm
	variable as pointed out by Mary Beth.
	
	Realized I hadn't checked in the routine to print out
	the problem size in my common problem size module...
	(Which is too bad because I had deleted it from my
	private copy :(

Modified files:
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.chpl 
	chapel/test/studies/hpcc/common/: probSize.chpl 

---------------------------------------------------------------------------

10/19/06 10:25:37 -- bradc

Log message:
	

Modified files:
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.good 
	chapel/test/studies/hpcc/common/: probSize.chpl 

---------------------------------------------------------------------------

10/19/06 10:53:20 -- waynew

Log message:
	Added a delay to help remove the possibility of trying to access a log
	in an inconsistent state.

Modified files:
	chapel/test/: paratest.client.pl 

---------------------------------------------------------------------------

10/19/06 13:10:24 -- marybeth

Log message:
	I neglected to update this test when I updated the Random module.
	It now uses the class and functions appropriately.

Modified files:
	chapel/test/modules/standard/Random/marybeth/: test-Random.chpl 
	                                               test-Random.good 

---------------------------------------------------------------------------

10/19/06 13:13:36 -- bradc

Log message:
	A future showing that const declarations and
	initializations within an iterator do not
	work the same/as solidly as they do outside
	of an iterator.
	
	Low-to-not-a-priority for HPCC.  Just wanted
	to capture it since I bumped into it.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-constInIterator.chpl 
	                                    ra-constInIterator.future 
	                                    ra-constInIterator.good 

---------------------------------------------------------------------------

10/19/06 13:47:46 -- bradc

Log message:
	Checking in a little test that creates an
	iterator that generates the random numbers
	from the RA benchmark in sequential order.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-iter.chpl ra-iter.good 

---------------------------------------------------------------------------

10/19/06 13:59:35 -- bradc

Log message:
	Added a second RA iterator test that generates
	a piece of the random stream, given a starting
	point.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-iter2.chpl ra-iter2.good 
	                                    ra-nums.c 

---------------------------------------------------------------------------

10/19/06 14:24:09 -- bradc

Log message:
	Another iterator bug -- using a domain inside an
	iterator compiles, but results in a runtime seg
	fault.
	
	Again, not a priority for HPCC -- have a workaround.
	But wanted to capture it for posterity.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-domainInIterator.chpl 
	                                    ra-domainInIterator.future 
	                                    ra-domainInIterator.good 

---------------------------------------------------------------------------

10/19/06 14:38:42 -- bradc

Log message:
	Added a test that creates some schedule-style
	iterators for domains, expected to be of use
	in RA.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-schedules.chpl 
	                                    ra-schedules.good 

---------------------------------------------------------------------------

10/19/06 14:42:30 -- bradc

Log message:
	Adding a placeholder for iterators inferring their
	return types.  This is medium priority for RA.chpl.

Added files:
	chapel/test/functions/iterators/bradc/: .cvsignore 
	                                        iteratorInferReturn.chpl 
	                                        iteratorInferReturn.future 
	                                        iteratorInferReturn.good 

---------------------------------------------------------------------------

10/19/06 16:31:21 -- bradc

Log message:
	Snapshotting a partial version of RA that's
	generating good output in my version of the
	compiler, but won't work in the project yet.
	Don't want to lose this.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-snapshot1.chpl 
	                                    ra-snapshot1.future 
	                                    ra-snapshot1.good 

---------------------------------------------------------------------------

10/19/06 17:09:00 -- bradc

Log message:
	Another snapshot implementing all of RA
	that currently works only in my directory.
	
	Also, added compopts and execopts to the
	first snapshot, which I forgot earlier.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-snapshot1.compopts 
	                                    ra-snapshot1.execopts 
	                                    ra-snapshot2.chpl 
	                                    ra-snapshot2.compopts 
	                                    ra-snapshot2.execopts 
	                                    ra-snapshot2.future 
	                                    ra-snapshot2.good 

---------------------------------------------------------------------------

10/19/06 17:27:45 -- bradc

Log message:
	Next snapshot -- successfully got all types to uints.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-snapshot3.chpl 
	                                    ra-snapshot3.compopts 
	                                    ra-snapshot3.execopts 
	                                    ra-snapshot3.future 
	                                    ra-snapshot3.good 

---------------------------------------------------------------------------

10/19/06 17:47:39 -- bradc

Log message:
	Checking in a test showing that + reductions over
	booleans don't work -- results in a compiler error.
	
	Medium priority for HPCC.

Added files:
	chapel/test/reductions/bradc/: boolAsInt.chpl boolAsInt.future 
	                               boolAsInt.good 

---------------------------------------------------------------------------

10/19/06 18:03:00 -- bradc

Log message:
	Adding a future showing that when a parameter is
	used in an iterator, compilation breaks.
	
	Medium priority for HPCC

Modified files:
	chapel/test/functions/iterators/bradc/: .cvsignore 
Added files:
	chapel/test/functions/iterators/bradc/: paramInIterator.chpl 
	                                        paramInIterator.future 
	                                        paramInIterator.good 

---------------------------------------------------------------------------

10/19/06 18:09:14 -- bradc

Log message:
	My fourth and final snapshot for the day --
	trying to remove as many casts and type
	specifications as possible.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-snapshot4.chpl 
	                                    ra-snapshot4.compopts 
	                                    ra-snapshot4.execopts 
	                                    ra-snapshot4.future 
	                                    ra-snapshot4.good 

---------------------------------------------------------------------------

10/19/06 18:11:12 -- bradc

Log message:
	Oops, forgot to change the const back to a param
	before checking in.

Modified files:
	chapel/test/functions/iterators/bradc/: paramInIterator.chpl 

---------------------------------------------------------------------------

10/20/06 10:07:19 -- bradc

Log message:
	Checking in a future where a module's use of a type
	declaration results in an unresolved function error
	when the files are listed in a particular order.
	
	No priority for HPCC -- reordering the files fixes
	the problems.

Modified files:
	chapel/test/modules/bradc/: .cvsignore 
Added files:
	chapel/test/modules/bradc/: typeInModule.chpl 
	                            typeInModule.compopts 
	                            typeInModule.future 
	                            typeInModule.good 
	chapel/test/modules/bradc/helperModules/: NOTEST 
	                                          typeInModule2.chpl 

---------------------------------------------------------------------------

10/20/06 10:15:21 -- bradc

Log message:
	Checking in a test that shows that comma-separated
	type declarations are not currently supported in
	the parser.
	
	This is low-priority for the HPCC benchmarks.
	Aesthetic/orthogonality only.

Added files:
	chapel/test/types/typedefs/bradc/: commaSeparatedTypes.chpl 
	                                   commaSeparatedTypes.future 
	                                   commaSeparatedTypes.good 

---------------------------------------------------------------------------

10/20/06 10:23:36 -- bradc

Log message:
	A test showing that an atomic statement must currently
	use curly brackets.  Would be nice, aesthetically, if
	it did not require them for a single statement atomic
	like:
	
	        A(i) ^= temp;
	
	Low priority for HPCC -- aesthetics only.

Added files:
	chapel/test/parallel/atomic/bradc/: .cvsignore 
	                                    atomicSingleStmt.chpl 
	                                    atomicSingleStmt.future 
	                                    atomicSingleStmt.good 

---------------------------------------------------------------------------

10/20/06 10:28:06 -- deitz

Log message:
	Added working type folding test.

Added files:
	chapel/test/functions/deitz/: test_type_fold1.chpl 
	                              test_type_fold1.good 

---------------------------------------------------------------------------

10/20/06 10:52:40 -- deitz

Log message:
	Added test to capture weird behavior of int and uint arrays and
	removed one that was working.

Added files:
	chapel/test/arrays/bradc/: intuintarr2.chpl intuintarr2.future 
	                           intuintarr2.good 
Removed files:
	chapel/test/arrays/bradc/: intuintarr.future 

---------------------------------------------------------------------------

10/20/06 11:39:22 -- deitz

Log message:
	Fixed a problem in function resolution in which method tokens and
	setter tokens, used at call sites to indicate method calls and
	assignments respectively, could be incorrectly instantiated to an
	argument that takes any type.  These now are specially treated in
	function resolution to ensure that they are only passed to an argument
	that expects a method token type or a setter token type.
	
	Fixed array getter and setters to implement a type match on the
	indexing arguments to allow scalar promotion over these types.  This
	enables scalar promotion over array indexing allowing an array to be
	indexed by an array.
	
	Futurized test/studies/hpcc/RA/marybeth/ra-uint-test1 waiting for a
	better error message.
	
	Removed future for test/studies/hpcc/FFT/bradc/fft-perm.
	
	Note: Currently in function resolution, we scalar promote only over a
	type that is specified, never over a generic any.  In addition, we
	favor instantiating over promoting.  A better idea may be to extend
	the semantics so we would scalar promote over any by trying to
	instantiate with the scalar promotion type first.  We can think about
	this with examples once we write out the function resolution
	algorithm.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/studies/hpcc/RA/marybeth/: ra-uint-test1.future 
Removed files:
	chapel/test/studies/hpcc/FFT/bradc/: fft-perm.future 

---------------------------------------------------------------------------

10/20/06 11:56:44 -- bradc

Log message:
	Renamed printTiming to printStats to reflect the
	fact that time-dependent but non-timing statistics
	are also printed out.

Modified files:
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.chpl 
	                                   stream-candidate.execopts 

---------------------------------------------------------------------------

10/20/06 14:36:13 -- bradc

Log message:
	This is my proposed version of RA for the paper.  It
	currently works in my version of the compiler, but not
	in the project version, so I'm filing it as a future in
	order to get comments on it now while I work on merging
	my changes safely into the project version of the
	compiler.
	
	The other todo here is to understand the X1's
	vectorization approach well enough to create a version
	of this that uses a vectorizable inner loop -- I'm
	working with the midwest guys to figure this out.

Added files:
	chapel/test/studies/hpcc/RA/: ra-candidate.chpl 
	                              ra-candidate.compopts 
	                              ra-candidate.execopts 
	                              ra-candidate.future 
	                              ra-candidate.good 
	                              ra-randstream.chpl 

---------------------------------------------------------------------------

10/20/06 14:43:29 -- bradc

Log message:
	Added some casts to my problem size printing
	routine in order to make it work with both
	int and uint problem sizes.

Modified files:
	chapel/test/studies/hpcc/common/: probSize.chpl 

---------------------------------------------------------------------------

10/20/06 16:22:58 -- bradc

Log message:
	Some minor changes:
	- added a .notest file for ra-randstream.chpl, which is just
	  a module for ra-candidate.chpl
	- applied some comments from Steve to probSize.chpl
	- fixed some unnecessary module uses in ra-candidate/randstream

Modified files:
	chapel/test/studies/hpcc/RA/: ra-candidate.chpl 
	                              ra-randstream.chpl 
	chapel/test/studies/hpcc/common/: probSize.chpl 
Added files:
	chapel/test/studies/hpcc/RA/: ra-randstream.notest 

---------------------------------------------------------------------------

10/20/06 16:29:17 -- waynew

Log message:
	Fix for generic args with default values.  They are no longer generic and
	take the type of the default expression.  This bug was shown by the test
	functions/bradc/defaultParamBoolInt.chpl.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

10/20/06 16:36:10 -- waynew

Log message:
	Forgot to remove .future when checking in the fix.

Removed files:
	chapel/test/functions/bradc/: defaultParamBoolInt.future 

---------------------------------------------------------------------------

10/20/06 16:56:35 -- deitz

Log message:
	Simplified functions relating to arithmetic domains that required a
	variable number of arguments.  They are more exact now.  The types
	required are more exact now.  This should help with error messages,
	coercions, and scalar promotion.
	
	Futurized one error message test pending a better error message.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/bradc/: twoDasTwoOneDs.future 

---------------------------------------------------------------------------

10/20/06 16:59:45 -- bradc

Log message:
	Removing an unnecessary argument type thanks
	to Wayne's fix.

Modified files:
	chapel/test/studies/hpcc/common/: probSize.chpl 

---------------------------------------------------------------------------

10/20/06 17:02:42 -- deitz

Log message:
	Removed .future of passing test.

Removed files:
	chapel/test/types/complex/bradc/: 
	                                  negativeimaginaryliteral.future 

---------------------------------------------------------------------------

10/20/06 17:05:52 -- bradc

Log message:
	Refactored standard module parsing code so that
	fewer characters are required to add a new
	standard module.
	
	Added a "Schedules" module that I'd originally
	thought would be used for RA, but so far is
	not (may yet be for the vector implementation).
	Didn't want to lose this code, though it should
	be considered more deeply before going into
	the spec, e.g.
	
	Added low and high functions to the adomain
	to return the low and high bounds as integers
	for a 1D adomain.  Would like to return tuples
	for higher-dimensional domains, but need more
	help to get that working, so used a compilerError
	in that case for now.
	
	Added a subBlocks iterator to use with adomains
	as a stand-in until iterators are supported
	within classes.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/modules/standard/: Schedules.chpl 

---------------------------------------------------------------------------

10/22/06 12:12:21 -- marybeth

Log message:
	Fixed fft.chpl to work with odd and even sizes of logN.  (Previously,
	it only worked for odd sizes.)
	
	Added a test for logN=6.

Modified files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft.chpl 
Added files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.chpl 
	                                        fft-test-even.execopts 
	                                        fft-test-even.good 

---------------------------------------------------------------------------

10/23/06 09:22:43 -- waynew

Log message:
	Ooops.  Checked in my debugging version of the test case by mistake.
	Caused the night tests to fail... heh heh.

Modified files:
	chapel/test/functions/bradc/: defaultParamBoolInt.chpl 

---------------------------------------------------------------------------

10/23/06 10:02:15 -- bradc

Log message:
	Now that there is a standard Schedules module,
	I rewrote my ra-schedules.chpl test to use it,
	which fixed this weekend's regressions.
	
	Removed the ra-schedules.* tests and also all
	the placeholding snapshots of ra that I checked
	in out of paranoia when I was feeling like I
	was walking a tightrope with it last week.

Added files:
	chapel/test/modules/standard/Schedules/bradc/: .cvsignore 
	                                               schedules.chpl 
	                                               schedules.good 
Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-schedules.chpl 
	                                    ra-schedules.good 
	                                    ra-snapshot1.chpl 
	                                    ra-snapshot1.compopts 
	                                    ra-snapshot1.execopts 
	                                    ra-snapshot1.future 
	                                    ra-snapshot1.good 
	                                    ra-snapshot2.chpl 
	                                    ra-snapshot2.compopts 
	                                    ra-snapshot2.execopts 
	                                    ra-snapshot2.future 
	                                    ra-snapshot2.good 
	                                    ra-snapshot3.chpl 
	                                    ra-snapshot3.compopts 
	                                    ra-snapshot3.execopts 
	                                    ra-snapshot3.future 
	                                    ra-snapshot3.good 
	                                    ra-snapshot4.chpl 
	                                    ra-snapshot4.compopts 
	                                    ra-snapshot4.execopts 
	                                    ra-snapshot4.future 
	                                    ra-snapshot4.good 

---------------------------------------------------------------------------

10/23/06 10:08:39 -- bradc

Log message:
	Made the numIndices function for adomains
	return a value of the per-dimension index
	type rather than int(32), as it was before.
	This is a partial stepping stone to the
	current proposed solution to parameterize
	this function by a type and make the
	per-dimension index type be the default
	type (something that I didn't have time
	to undertake on this check-in).

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

10/23/06 11:29:10 -- deitz

Log message:
	Changed the semantics of for loops so that if there is more than one
	iterator expression, it needs to be enclosed in brackets (tensor
	product) or parentheses (zipper).  Changed the implementation of this
	to be more consistent with the implementation of domains.  Tuples now
	support the iterator interface if the elements in the tuple are
	iteratable.
	
	Added a new record in the modules called _square_tuple that implements
	the tensor product.
	
	Removed code in the compiler to build tensor product and zipper
	iteration loops.
	
	Fixed .good file of functions/deitz/test_square2 as we now iterate
	over tensor product promotions in row-major order.
	
	This fixes numerous bugs with zipper and tensor product iteration only
	some of which have shown up.

Modified files:
	chapel/compiler/AST/: build.cpp symbol.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_htuple.chpl 
	chapel/test/functions/deitz/: test_square2.good 
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 
	chapel/test/types/seq/deitz/: test_zipper1.chpl 
Added files:
	chapel/test/types/tuple/deitz/: test_iterate.chpl 
	                                test_iterate.good 

---------------------------------------------------------------------------

10/23/06 11:31:59 -- waynew

Log message:
	Added a test case to explore a little how tightly to bind a generic arg
	to the default expression's type (inspired by a small talk with Brad while
	waiting for a bus).  My call is that if the user really cares, they
	shoudld specify the type or use a value/expression that subsumes the
	allowable types.
	
	Oops. Forgot to remove another mod to Brad's original test.

Modified files:
	chapel/test/functions/bradc/: defaultParamBoolInt.chpl 
Added files:
	chapel/test/functions/waynew/: defaults.chpl defaults.good 

---------------------------------------------------------------------------

10/23/06 13:50:13 -- marybeth

Log message:
	Very minor changes to fft.chpl to get rid of an unused variable
	and to use a multiply instead of a shift operator.

Modified files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft.chpl 

---------------------------------------------------------------------------

10/23/06 15:12:45 -- deitz

Log message:
	Improved the reallocate method to be resilient in the face of multiple
	domain types of the same rank.  It was resilient to multiple domain
	types of different ranks (which prior to the addition of the domain
	dimension index type was the only distinction).  This is still not how
	it should be written (see comment in code).
	
	Moved Locale definition from Memory module to _chpl_machine module.
	
	This fixes the HPCC ``showstopper'' issue.

Modified files:
	chapel/modules/standard/: Memory.chpl _chpl_adomain.chpl 
	                          _chpl_machine.chpl 
Removed files:
	chapel/test/arrays/bradc/: intuintarr2.future 

---------------------------------------------------------------------------

10/23/06 16:26:10 -- deitz

Log message:
	Added initial support for indefinite arithmetic sequences.  You can
	iterate over them.
	
	Not supported are indefinite arithmetic sequences with no upper bound
	and a negative stride and with no lower bound and a positive stride.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/types/seq/deitz/indefinite/: test_indefinite1.chpl 
	                                         test_indefinite1.good 

---------------------------------------------------------------------------

10/23/06 16:26:39 -- deitz

Log message:
	Updated implementation of + reduce (but did not update other
	reductions) to reflect a better semantics.
	
	Prior, the result of a + reduce had the same type as the input type.
	This was a problem for a + reduction over values of bool type because
	the result of + cannot not be stored in a bool with an explicit
	coercion because of a loss of data.
	
	The new semantic is that given a reduction
	
	  op reduce expr
	
	the resulting type is the type of the expression
	
	  expr op expr.
	
	So the result of + reduce (/ true, false, true, false /) is 2.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
Removed files:
	chapel/test/reductions/bradc/: boolAsInt.future 

---------------------------------------------------------------------------

10/23/06 16:39:07 -- bradc

Log message:
	Removed the future for the current RA candidate,
	since Steve fixed the remaining outstanding issue.

Removed files:
	chapel/test/studies/hpcc/RA/: ra-candidate.future 

---------------------------------------------------------------------------

10/23/06 16:41:26 -- bradc

Log message:
	Removed cast from bool-to-int for
	verification reduction in RA,
	thanks to Steve's last check-in.

Modified files:
	chapel/test/studies/hpcc/RA/: ra-candidate.chpl 

---------------------------------------------------------------------------

10/23/06 16:44:46 -- bradc

Log message:
	Removed artificial upper bounds from
	zippered iterations, using indefinite
	notation that Steve just implemented.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 

---------------------------------------------------------------------------

10/23/06 16:51:48 -- deitz

Log message:
	Type declarations can now define multiple types as in
	
	  type t = int, t2 = float;
	
	Fixed a typo and removed a .future.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/types/typedefs/bradc/: commaSeparatedTypes.chpl 
Removed files:
	chapel/test/types/typedefs/bradc/: commaSeparatedTypes.future 

---------------------------------------------------------------------------

10/23/06 16:52:07 -- deitz

Log message:
	Atomic statements no longer require curly brackets, allowing for
	something like
	
	  atomic x += 1;
	
	Removed a .future.

Modified files:
	chapel/compiler/parser/: chapel.y 
Removed files:
	chapel/test/parallel/atomic/bradc/: atomicSingleStmt.future 

---------------------------------------------------------------------------

10/23/06 17:21:32 -- bradc

Log message:
	Used new capability to comma-separate types.

Modified files:
	chapel/test/studies/hpcc/RA/: ra-candidate.chpl 

---------------------------------------------------------------------------

10/23/06 17:29:24 -- bradc

Log message:
	Removed braces around singleton atomic statement.

Modified files:
	chapel/test/studies/hpcc/RA/: ra-candidate.chpl 

---------------------------------------------------------------------------

10/24/06 10:54:19 -- deitz

Log message:
	Filled in rest of Types section.
	
	Fixed section references in Statements section.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Statements/: Assignment_Statements.tex Blocks.tex 
	                         Statements.tex 
	                         The_Type_Select_Statement.tex 
	chapel/spec/Types/: Class_Types.tex Domain_and_Array_Types.tex 
	                    Enumerated_Types.tex Record_Types.tex 
	                    Sequence_Types.tex Tuple_Types.tex 
	                    Type_Aliases.tex Union_Types.tex 

---------------------------------------------------------------------------

10/24/06 11:07:14 -- deitz

Log message:
	Changed float to real in the spec.
	
	Added imag to the spec.
	
	Added new environment rationale to be used to explain choices.  Use
	"\begin{rationale}".
	
	Changed real and imag methods to re and im.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Types/: Complex_Types.tex 
Added files:
	chapel/spec/Types/: Imaginary_Types.tex Real_Types.tex 
Removed files:
	chapel/spec/Types/: Floating-Point_Types.tex 

---------------------------------------------------------------------------

10/24/06 11:13:43 -- deitz

Log message:
	More changes of float to real and addition of imag (using grep for
	completeness).

Modified files:
	chapel/spec/Standard_Modules/: Time.tex 
	chapel/spec/Types/: Primitive_Type_Literals.tex 
	                    Primitive_Types.tex 

---------------------------------------------------------------------------

10/24/06 15:57:13 -- bradc

Log message:
	Removed "useLog2ProbSize" flag from stream
	benchmark since it isn't really a part of
	the benchmark's specification.

Modified files:
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.chpl 

---------------------------------------------------------------------------

10/24/06 16:12:13 -- deitz

Log message:
	Fixed implementation to match semantics of a single index expression.
	This expression can be a tuple, which is then destructured.
	
	So
	
	  for i,j in D do { ... }
	
	is no longer legal and must be written
	
	  for (i,j) in D do { ... }
	
	Updated test cases.
	
	Overall, this simplifies the compiler slightly.
	
	Added a good test case of doubly destructured indexing as in
	
	  for ((i,j),(k,l)) in ([1..2,3..4],[5..6,7..8]) do ...

Modified files:
	chapel/compiler/AST/: build.cpp symbol.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/bradc/: domarr.chpl domarr2.chpl 
	                           twoDasTwoOneDs.chpl 
	chapel/test/arrays/deitz/: jacobi-no-inline.chpl 
	                           jacobi-unoptimized.chpl jacobi.chpl 
	                           jacobi2.chpl jacobi3.chpl 
	                           jacobi4.chpl matrix.chpl 
	                           test_anon_domain2.chpl 
	                           test_array_uint.chpl 
	                           test_domain_mixed_dim_types.chpl 
	chapel/test/arrays/deitz/domains/: test_domains_2Db.chpl 
	                                   test_domains_2Dc.chpl 
	chapel/test/arrays/deitz/part1/: test_array_2Db.chpl 
	                                 test_array_2Dc.chpl 
	                                 test_array_3D.chpl 
	                                 test_array_3D_float.chpl 
	                                 test_array_8d.chpl 
	                                 test_array_assign1.chpl 
	                                 test_array_assign2.chpl 
	                                 test_array_assign3.chpl 
	chapel/test/arrays/deitz/part2/: test_array_integer_2d.chpl 
	                                 test_array_integer_3d.chpl 
	                                 test_array_of_class1.chpl 
	                                 test_array_of_record1.chpl 
	                                 test_array_traverse1.chpl 
	chapel/test/arrays/deitz/stride/: test_stride1.chpl 
	                                  test_stride2.chpl 
	chapel/test/arrays/waynew/: init3.chpl 
	chapel/test/demo/review_060130/: iterators.chpl jacobi.chpl 
	                                 jacobi2.chpl 
	chapel/test/domains/roxana/index/: test_index_expr.chpl 
	chapel/test/flowanalysis/newast/: domarr.chpl 
	chapel/test/interpreter/deitz/: domarr.chpl 
	chapel/test/memory/shannon/: jacobi.chpl printMemTable.chpl 
	chapel/test/no_infer/: jacobi.chpl 
	chapel/test/performance/deitz/: test_for2d.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: fft-zip.chpl fft.chpl 
	chapel/test/studies/jacobi/bocchino/: jacobi.chpl 
	chapel/test/studies/jacobi/deitz/: jacobi.chpl 
	chapel/test/studies/jacobi/waynew/: example1.chpl example2.chpl 
	chapel/test/types/seq/deitz/: test_zipper1.chpl 
Added files:
	chapel/test/domains/deitz/: test_cross_domains.chpl 
	                            test_cross_domains.good 

---------------------------------------------------------------------------

10/24/06 16:16:17 -- deitz

Log message:
	Add 3 tests in my directory not checked in:
	
	Added working uint test.
	
	Added future of "true + true" which currently yields "true" instead of
	"2".
	
	Added future of arrays of arrays.

Added files:
	chapel/test/arrays/deitz/: test_array_of_array2.chpl 
	                           test_array_of_array2.future 
	                           test_array_of_array2.good 
	chapel/test/trivial/deitz/: test_true_plus.chpl 
	                            test_true_plus.future 
	                            test_true_plus.good test_uint.chpl 
	                            test_uint.good 

---------------------------------------------------------------------------

10/25/06 11:31:29 -- deitz

Log message:
	Added "--print-statistics nku" which prints out statistics about the
	AST and memory usage.  If k is in the string passed to this flag, the
	kilobytes is printed out, if n is in the flag paseed, the number of
	nodes is printed out, if neither k nor n is passed, just the total
	memory is passed.
	
	The number and memory required broken down by type of AST node is
	printed out between each pass before and after cleaning (automatic
	garbage AST collection) is done.  It is only printed if there has been
	a change.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 

---------------------------------------------------------------------------

10/25/06 13:04:00 -- waynew

Log message:
	Bug fix that, hopefully, should cure the recurring dead lock in the
	night tests.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

10/25/06 13:07:46 -- bradc

Log message:
	This check-in makes the following language-level
	naming changes:
	
	        "float" is now called "real"
	        "imaginary" is now called "imag"
	        the ".real" and ".imag" complex number
	          destructurers are now ".re" and ".im"
	
	The compiler internals have also been renamed to
	use the term "real" rather than "float" in any
	context where there is also an "imag" version of
	the concept.  In contexts where the same value
	is used for both reals and imags, it retains
	the term float.  Hopefully I have been consistent
	about this.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/doc/studies/hpcc/: chapel_listing.tex 
	chapel/modules/standard/: Random.chpl Schedules.chpl Time.chpl 
	                          Types.chpl _chpl_base.chpl 
	                          _chpl_complex.chpl _chpl_file.chpl 
	                          _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl _chpl_math.chpl 
	papers/hpcc06/: chapel_listing.tex conventions.tex stream.tex 
	chapel/runtime/include/: chplio.h chplrt.h chpltypes.h config.h 
	chapel/runtime/src/: chplmem_tests.c chpltypes.c config.c 
	chapel/spec/: chapel_listing.tex 
	chapel/test/Samples/ex1-astlog/: astlog1.good 
	chapel/test/Share/: ambiguousclass.chpl record-2.chpl 
	                    record-3.chpl 
	chapel/test/arrays/bradc/: domarr.chpl domarr1a.chpl 
	                           domarr2.chpl intuintarr.chpl 
	                           intuintarr2.chpl twoDasTwoOneDs.chpl 
	                           twoDasTwoOneDs.good 
	chapel/test/arrays/bradc/errors/: badArrArgErrMsg.chpl 
	                                  badArrArgErrMsg.good 
	chapel/test/arrays/deitz/: jacobi-no-inline.chpl 
	                           jacobi-unoptimized.chpl jacobi.chpl 
	                           jacobi2.chpl jacobi3.chpl 
	                           jacobi4.chpl jacobi5.chpl matrix.chpl 
	                           test_copy_array.chpl 
	                           test_indefinite1.chpl 
	                           test_indefinite2.chpl 
	                           test_indefinite8.chpl 
	                           test_no_elt_type.chpl 
	chapel/test/arrays/deitz/domains/: test_domain_arg3.chpl 
	chapel/test/arrays/deitz/part1/: test_array_3D_float.chpl 
	                                 test_array_arg1.chpl 
	                                 test_array_arg2.chpl 
	                                 test_array_arg2.good 
	chapel/test/arrays/deitz/part2/: test_array_basic2.chpl 
	                                 test_array_basic2a.chpl 
	                                 test_array_float1.chpl 
	                                 test_array_init.chpl 
	                                 test_array_of_class1.chpl 
	                                 test_array_of_record1.chpl 
	                                 test_array_traverse1.chpl 
	chapel/test/arrays/jplevyak/: ranks-1.chpl 
	chapel/test/classes/bradc/: badred.chpl namecheck.chpl 
	                            noinit.chpl noinit2.chpl 
	                            trivialclass.chpl weirdinit.chpl 
	                            writeclass.chpl writeclass1a.chpl 
	                            writeclass2.chpl writeclass2a.chpl 
	                            writeclass3.chpl writerecord.chpl 
	                            writerecord1a.chpl writerecord2.chpl 
	                            writeunion-workaround.chpl 
	                            writeunion.chpl 
	chapel/test/classes/bradc/records/: assignRecord.chpl 
	                                    assignRecord2.chpl 
	                                    assignRecord3.chpl 
	                                    namecheck.chpl 
	                                    twoRecords.chpl 
	                                    twoRecords2.chpl 
	chapel/test/classes/bradc/unions/: assign.chpl assign1a.chpl 
	                                   stringunion.chpl 
	                                   twounions.chpl 
	                                   writeunion.chpl 
	chapel/test/classes/deitz/: test_badclass1.chpl test_class1.chpl 
	                            test_class1a.chpl test_class2.chpl 
	                            test_class3.chpl test_class4.chpl 
	                            test_class5.chpl 
	                            test_class_with1.chpl 
	                            test_class_with2.chpl 
	                            test_class_with3.chpl 
	                            test_dynamic_dispatch2.chpl 
	                            test_inherit_mod1.chpl 
	                            test_inherit_mod2.chpl 
	                            test_inherit_mod3.chpl 
	                            test_method1.chpl test_method1a.chpl 
	                            test_method2.chpl 
	                            test_mycomplex_record.chpl 
	                            test_nested_record1.chpl 
	                            test_nested_record2.chpl 
	                            test_nested_record_function.chpl 
	                            test_record1.chpl test_record2.chpl 
	                            test_record3.chpl test_record4.chpl 
	                            test_record5.chpl test_record6.chpl 
	                            test_record7.chpl test_record8.chpl 
	                            test_record9.chpl 
	                            test_record_assign1.chpl 
	                            test_record_method1.chpl 
	                            test_record_method2.chpl 
	                            test_record_with1.chpl 
	                            test_sum_type1.chpl test_union1.chpl 
	                            test_union2.chpl test_union3.chpl 
	                            test_union4.chpl 
	                            test_union_method1.chpl 
	                            test_union_method2.chpl 
	                            test_union_method3.chpl 
	chapel/test/classes/deitz/inherit/: test_inherit1.chpl 
	                                    test_inherit2.chpl 
	                                    test_inherit3.chpl 
	                                    test_inherit4.chpl 
	                                    test_inherit4b.chpl 
	                                    test_value1.chpl 
	                                    test_value2.chpl 
	chapel/test/classes/jplevyak/: sum_type-1.chpl 
	chapel/test/classes/marybeth/: test_dispatch1-error.chpl 
	chapel/test/classes/shannon/: overloadedFunction.chpl 
	                              overloadedFunction.good 
	chapel/test/classes/waynew/: class-rec.chpl 
	chapel/test/demo/review_060130/: history_accumulator.chpl 
	                                 jacobi.chpl jacobi2.chpl 
	chapel/test/domains/deitz/: test_domain_reassign1.chpl 
	                            test_domain_reassign2.chpl 
	                            test_indefinite_remove.chpl 
	                            test_indefinite_remove2.chpl 
	chapel/test/domains/indefinite/waynew/: indef2.chpl indef6.chpl 
	                                        indef7.chpl 
	chapel/test/domains/roxana/index/: test_index_expr.chpl 
	                                   test_index_expr0.chpl 
	                                   test_index_expr2.chpl 
	chapel/test/domains/waynew/: init.chpl 
	chapel/test/execflags/shannon/configs/: configVarFile.chpl 
	                                        configVarFloat.chpl 
	                                        configVarInvalidFloat.chpl 
	                                        configVarInvalidFloat.good 
	                                        configVarInvalidFloatLineno.chpl 
	                                        configVarInvalidFloatLineno.good 
	                                        configVarNotInModule.chpl 
	                                        configVarSetNotDeclared.chpl 
	                                        configVarTwoModsNoneSpecified.chpl 
	chapel/test/execflags/shannon/configs/help/: configVar-Dash.chpl 
	                                             configVar-Dash.good 
	                                             configVarSetOver.chpl 
	                                             configVarSetOver.good 
	                                             configVarSetTwoTypes.chpl 
	                                             configVarSetTwoTypes.good 
	                                             configVarTwoModules.chpl 
	                                             configVarTwoModules.good 
	chapel/test/flowanalysis/jplevyak/: bug1.good cs1.good cs3.good 
	                                    cs5.good destruct.good 
	                                    destruct2.good 
	                                    destruct3.good 
	                                    dispatch2.good 
	                                    dispatch3.good literal.good 
	                                    multiplereturn.good 
	                                    named.good structtype.good 
	chapel/test/flowanalysis/jplevyak/constants/: 
	                                              constant_folding.good 
	chapel/test/flowanalysis/newast/: domarr.chpl sum_type-1.chpl 
	                                  sum_type-1.good 
	                                  sum_type-2.chpl 
	                                  sum_type-2.good var.good 
	                                  var2.good 
	chapel/test/functions/bradc/: arrayArg-explicit.chpl 
	                              arrayArg.chpl 
	                              defaultParamBoolInt.chpl 
	                              intents-arrays.chpl 
	                              intents-arrays2.chpl 
	                              intents-arrays2a.chpl 
	                              intents-classes.chpl 
	                              intents-classes2-error.chpl 
	                              intents-classes2.chpl 
	                              intents-classes3.chpl 
	                              intents-classes4.chpl typefn.chpl 
	                              typefn.good typefn2.chpl 
	                              typefn2.good typefn2a.chpl 
	                              typefn2a.good typefn4a.chpl 
	                              typefn4a.good 
	chapel/test/functions/deitz/: test_square2.chpl 
	chapel/test/functions/deitz/default/: test_default2.chpl 
	                                      test_default3-error.chpl 
	                                      test_default3-error.good 
	                                      test_default3.chpl 
	                                      test_default4-error.chpl 
	                                      test_default4-error.good 
	                                      test_default4.chpl 
	                                      test_default5.chpl 
	                                      test_default6.chpl 
	chapel/test/functions/deitz/named/: test_named2.chpl 
	chapel/test/functions/deitz/nested/: test_nested_global1.chpl 
	chapel/test/functions/deitz/varargs/: test_varargs1.chpl 
	                                      test_varargs10.chpl 
	                                      test_varargs9.chpl 
	                                      test_varargs9.good 
	                                      test_varargs_write.chpl 
	                                      test_varargs_write.good 
	chapel/test/functions/iterators/bradc/: iteratorInClass.chpl 
	chapel/test/functions/jplevyak/: call_mapping-2.chpl 
	                                 subsume-1.chpl 
	                                 type_var_fun-1.chpl 
	                                 type_var_fun-1.good 
	chapel/test/functions/waynew/: defaults.chpl 
	chapel/test/interpreter/deitz/: domarr.chpl 
	chapel/test/memory/shannon/: allocAndFree.good 
	                             configVarFile.chpl freedMalloc.good 
	                             jacobi.chpl printMemTable.chpl 
	chapel/test/modules/bradc/: twomodulessamevar.chpl 
	chapel/test/modules/standard/Random/marybeth/: test-Random.chpl 
	chapel/test/modules/standard/Schedules/bradc/: schedules.chpl 
	chapel/test/modules/standard/math/: abs.chpl acos.chpl 
	                                    acosh.chpl 
	                                    acosh_out_of_range.chpl 
	                                    asin.chpl asinh.chpl 
	                                    atan.chpl atan2.chpl 
	                                    atanh.chpl 
	                                    atanh_asymptote.chpl 
	                                    atanh_out_of_range.chpl 
	                                    cbrt.chpl ceil.chpl cos.chpl 
	                                    cosh.chpl 
	                                    cosh_asymptote.chpl erf.chpl 
	                                    erfc.chpl exp.chpl 
	                                    expm1.chpl floor.chpl 
	                                    lgamma.chpl log.chpl 
	                                    log10.chpl log1p.chpl 
	                                    rint.chpl sin.chpl sinh.chpl 
	                                    sqrt.chpl tan.chpl tanh.chpl 
	chapel/test/modules/standard/math/interpret/: exp2.chpl 
	                                              log2.chpl 
	                                              nearbyint.chpl 
	                                              round.chpl 
	                                              tgamma.chpl 
	                                              trunc.chpl 
	chapel/test/no_infer/: jacobi.chpl test_tuple_simple4.chpl 
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/ft/: ft-serial.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
	                     mg-compilable2.chpl 
	chapel/test/parallel/single/waynew/: class0.chpl class1.chpl 
	chapel/test/parallel/sync/waynew/: class0.chpl record0.chpl 
	                                   simple0.chpl 
	chapel/test/parsing/jplevyak/: literal.good 
	chapel/test/reductions/bradc/: maxreduce.chpl sumreduce2.chpl 
	chapel/test/reductions/bradc/manual/: threeuses-cast.chpl 
	                                      threeuses.chpl 
	                                      twouses.chpl 
	chapel/test/reductions/waynew/: reductions.chpl 
	chapel/test/sparse/deitz/: test_sparse1.chpl 
	chapel/test/ssca/ssca2/: ssca2.blc-hack.chpl ssca2.blc.chpl 
	                         ssca2.blc.init.chpl 
	chapel/test/studies/blas/marybeth/: saxpy1.chpl saxpy2.chpl 
	                                    saxpy_simple.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: butterfly.chpl 
	                                     butterfly2.chpl 
	                                     fft-arrinit.chpl 
	                                     fft-badtuple.chpl 
	                                     fft-perm.chpl fft-zip.chpl 
	                                     fft.chpl 
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.chpl 
	                                        fft.chpl 
	chapel/test/studies/hpcc/RA/: ra.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-old1.chpl 
	                                    ra-bradc-old2.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra.chpl 
	                                       ra2-param-test.chpl 
	                                       ra2.chpl ra3.chpl 
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.chpl 
	                                   stream.chpl stream.good 
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-bradc.chpl 
	                                         stream-bradc.good 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	                                            stream.good 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.chpl 
	                                          stream2.chpl 
	chapel/test/studies/hpcc/common/: probSize.chpl 
	                                  testProbSize.chpl 
	chapel/test/studies/jacobi/bocchino/: jacobi.chpl 
	chapel/test/studies/jacobi/bradc/: jacobi-play-brad.chpl 
	                                   jacobi-play2-brad.chpl 
	                                   jacobi-rankind-brad.chpl 
	                                   jacobi-simple-brad.chpl 
	                                   jacobi-simple-compiles.chpl 
	                                   jacobi-slice-brad.chpl 
	chapel/test/studies/jacobi/deitz/: jacobi.chpl jacobi2.chpl 
	chapel/test/studies/jacobi/jplevyak/: jacobi-jp-broken-1.chpl 
	                                      jacobi-jp-broken-2.chpl 
	                                      jacobi-jp-notes.chpl 
	                                      jacobi-jp-working.chpl 
	chapel/test/studies/jacobi/waynew/: example1.chpl example2.chpl 
	chapel/test/trivial/bradc/: coerce.chpl coerce2.chpl 
	                            defaultinit.chpl defaultinit1a.chpl 
	                            defaultinit2.chpl undefinedfn.chpl 
	                            unroll.chpl unroll.good 
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.nodom.chpl 
	                                    arrinit.notypep.typepr.chpl 
	                                    arrinit.notypep.typeprind.chpl 
	                                    arrinit.notypep.typeprind2.chpl 
	                                    arrinit.typep.type.chpl 
	                                    arrinit.typep.typeind.chpl 
	                                    arrinit.typep.typepr.chpl 
	chapel/test/trivial/deitz/: coerce.chpl coerce2.chpl 
	                            test_coerce_param.chpl 
	                            test_float.chpl test_for_param.chpl 
	                            test_for_param2.chpl 
	                            test_format_primitives.chpl 
	                            test_let1.chpl test_scope1.chpl 
	                            test_scope2.chpl 
	                            test_type_select1-handcode.chpl 
	                            test_type_select1-handcode.good 
	                            test_type_select1.chpl 
	                            test_type_select1.good 
	                            test_var_decl1.chpl 
	                            test_var_decl3.chpl 
	                            test_var_decl_coerce.chpl 
	                            test_var_decl_shared1.chpl 
	chapel/test/trivial/deitz/demo/: sample1.chpl sample1b.chpl 
	chapel/test/trivial/mjoyner/nestedfndef/: nested_fndef3.chpl 
	                                          nested_fndef4.chpl 
	                                          nested_fndef5.chpl 
	chapel/test/trivial/shannon/: exp.chpl readWriteFloatInt.chpl 
	                              readWriteUserType.chpl 
	                              readWriteUserType.good 
	chapel/test/trivial/shannon/quit/: halt.chpl haltNoArgs.chpl 
	                                   haltOneArg.chpl 
	chapel/test/trivial/waynew/: float32-64.chpl identity.chpl 
	                             identity.good maxtest.chpl 
	                             mintest.chpl simple.chpl 
	chapel/test/types/coerce/bradc/: printzeroes.chpl tostring.chpl 
	chapel/test/types/complex/bradc/: negateimaginary2.chpl 
	                                  negateimaginary3.chpl 
	chapel/test/types/complex/deitz/: test_complex3.chpl 
	                                  test_complex4.chpl 
	                                  test_complex_overload.chpl 
	                                  test_complex_overload.good 
	chapel/test/types/complex/jplevyak/: complex-2.chpl 
	chapel/test/types/complex/waynew/: complex-simple.chpl 
	chapel/test/types/file/: freadClass.chpl freadIntFloat.chpl 
	                         freadNoFloat.chpl freadNoFloat.good 
	                         freadToClassDataMember.chpl 
	chapel/test/types/file/bradc/scalar/: 
	                                      floatcomplexexceptions.chpl 
	chapel/test/types/seq/bradc/: recordSeq.chpl 
	chapel/test/types/seq/deitz/: test_seq_class1.chpl 
	                              test_seq_class2.chpl 
	                              test_seq_record1.chpl 
	chapel/test/types/tuple/bradc/: returnTuple.chpl 
	                                returnTuple2.chpl 
	                                returnTuple3.chpl 
	                                writeTuple.chpl 
	chapel/test/types/tuple/deitz/: test_tuple_of_tuples.chpl 
	                                test_tuple_record_implementation1.chpl 
	                                test_tuple_record_implementation10.chpl 
	                                test_tuple_record_implementation11.chpl 
	                                test_tuple_record_implementation12.chpl 
	                                test_tuple_record_implementation13.chpl 
	                                test_tuple_record_implementation14.chpl 
	                                test_tuple_record_implementation16.chpl 
	                                test_tuple_record_implementation2.chpl 
	                                test_tuple_record_implementation3.chpl 
	                                test_tuple_record_implementation5.chpl 
	                                test_tuple_record_implementation6.chpl 
	                                test_tuple_record_implementation7.chpl 
	                                test_tuple_record_implementation8.chpl 
	                                test_tuple_record_implementation9.chpl 
	                                test_tuple_simple3.chpl 
	                                test_tuple_simple4.chpl 
	                                test_tuple_simple7.chpl 
	                                test_tuples2.chpl 
	chapel/test/types/tuple/jplevyak/: destruct-1.chpl 
	                                   destruct-2.chpl 
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo1.chpl 
	                                                   test_foo3.chpl 
	                                                   test_foo4.chpl 
	                                                   test_foo5-error.chpl 
	                                                   test_foo5-error.good 
	                                                   test_foo5.chpl 
	chapel/test/types/type_variables/deitz/part1/: 
	                                               test_clone_class1b.good 
	                                               test_clone_function2.chpl 
	                                               test_clone_function3.chpl 
	                                               test_clone_function4.chpl 
	                                               test_clone_function5.chpl 
	                                               test_clone_function6.chpl 
	chapel/test/types/type_variables/deitz/part2/: 
	                                               test_typevar_function2.chpl 
	                                               test_typevar_function4.chpl 
	chapel/test/types/type_variables/deitz/part4/: 
	                                               test_overload_function1.chpl 
	                                               test_overload_integerfloat1.chpl 
	                                               test_overload_integerfloat1.good 
	                                               test_overload_integerfloat2.chpl 
	                                               test_overload_integerfloat2.good 
	                                               test_overload_integerfloat3.chpl 
	                                               test_overload_integerfloat3.good 
	                                               test_overload_integerfloat4.chpl 
	                                               test_overload_integerfloat4.good 
	chapel/test/types/type_variables/deitz/part5/: 
	                                               inherit_instantiate.chpl 
	                                               inherit_instantiate2.chpl 
	                                               inherit_instantiate3.chpl 
	                                               inherit_instantiate4.chpl 
	                                               where-1.chpl 
	                                               where-2.chpl 
	                                               where-2.good 
	chapel/test/types/type_variables/deitz/part7/: construct-1b.chpl 
	                                               construct-1b.good 
	                                               test_coerce1.chpl 
	                                               test_coerce1.good 
	chapel/test/types/type_variables/jplevyak/: construct-1.chpl 
	                                            test_coerce1.chpl 
	                                            test_coerce1.good 
	                                            test_coerce2.chpl 
	                                            test_coerce2.good 
	                                            type_variable-2.chpl 
	                                            typevar_constraint-1.chpl 
	                                            where-2.chpl 
	                                            where-3-error.chpl 
	                                            where-3-error.good 
	chapel/test/types/typedefs/bradc/: commaSeparatedTypes.chpl 

---------------------------------------------------------------------------

10/25/06 14:01:28 -- deitz

Log message:
	Moved modUses vector out of BaseAST and into both ModuleSymbol and
	BlockStmt, the two nodes it can be associated with.  This reduces the
	high memory mark of AST from 23439 to 17269 kilobytes.  It also
	reduces the time to compile Jacobi from 10.14 to 8.72 seconds.  Though
	interestingly when I experimented with increasing the size of the
	BaseAST node by adding memory to it, that decreased the time 9.28
	seconds.  These times are very consistent from run to run, but it may
	still be consistent noise.

Modified files:
	chapel/compiler/AST/: symbol.cpp symscope.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symbol.h symscope.h 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 

---------------------------------------------------------------------------

10/25/06 15:08:02 -- waynew

Log message:
	Slightly different interpretation of single variables. Used a broadcast
	instead of a series of signals.  Added broadcast primitives.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/runtime/include/: chplthreads.h 
	chapel/runtime/src/: chplthreads.c 

---------------------------------------------------------------------------

10/25/06 15:48:22 -- deitz

Log message:
	Made CallExpr::partialTag bool instead of an enum since it really only
	has two states: can be partially called, cannot.  This is used for
	method calls like
	
	  x.foo(y)
	
	which is translated into
	
	  foo(_mt, x)(y)
	
	where the inner call expression is marked as partial to allow for the
	case where x.foo is a method or a field that is an array.
	
	Figured out what CallExpr::methodTag does.  It should be renamed
	CallExpr::noParens to indicate that this is a function call that
	requires no parens in the function to catch an error for calling
	
	  def Bar.x { ... }
	
	as
	
	  bar.x()
	
	instead of
	
	  bar.x
	
	Added a new command to GDB so you can now write
	
	  view ast
	
	instead of
	
	  call print_view(ast)

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp view.cpp 
	chapel/compiler/include/: chplenum.h expr.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

10/25/06 16:02:50 -- bradc

Log message:
	Renamed the integer log-base-2 function from lg()
	to log2(), overloading it with the floating point
	log2() function.  Added "log2" to the set of C
	symbols that Chapel should rename to avoid using
	the rename pragma.  Updated tests.

Modified files:
	chapel/compiler/passes/: codegen.cpp 
	chapel/modules/standard/: _chpl_math.chpl 
	chapel/test/modules/standard/math/: lg.chpl lg.good 
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: bitreverse.chpl 
	                                     bitreverse2.chpl fft.chpl 
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.chpl 
	                                        fft.chpl 
	chapel/test/studies/hpcc/RA/: ra-candidate.chpl 
	                              ra-randstream.chpl ra.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-old2.chpl 
	                                    ra-bradc.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra2-param-test.chpl 
	                                       ra2.chpl ra3.chpl 
	chapel/test/studies/hpcc/STREAMS/: stream.chpl 
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-bradc.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream2.chpl 
	chapel/test/studies/hpcc/common/: probSize.chpl 

---------------------------------------------------------------------------

10/25/06 16:09:07 -- deitz

Log message:
	Added gdb
	  nview ast
	command to call nprint_view(ast)
	
	Added gdb
	  iview i
	command to call iprint_iview(i)
	
	Note: these can be shorthanded as v, nv, and iv.

Modified files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/include/: view.h 
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

10/25/06 18:20:27 -- bradc

Log message:
	Oops, forgot to commit this test with my
	previous work on lg() -- the old lg()
	supported negative floats in a way that
	the new log2() approach currently does
	not.  This is a future I assigned to
	myself.

Added files:
	chapel/test/modules/standard/math/: lg2.chpl lg2.future lg2.good 

---------------------------------------------------------------------------

10/26/06 12:15:44 -- deitz

Log message:
	Removed FnType.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp symscope.cpp 
	                      type.cpp view.cpp 
	chapel/compiler/include/: baseAST.h type.h view.h 

---------------------------------------------------------------------------

10/26/06 16:12:41 -- bradc

Log message:
	Some small formatting changes.

Modified files:
	chapel/test/studies/hpcc/RA/: ra-randstream.chpl 

---------------------------------------------------------------------------

10/26/06 16:13:16 -- bradc

Log message:
	Minor futzing with names.

Modified files:
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.chpl 

---------------------------------------------------------------------------

10/26/06 16:14:18 -- bradc

Log message:
	Changed the compute problem size routine
	for the HPCC benchmarks so that if it
	is constrained to be a power of 2, it
	returns the log2() of the value rather
	than the value itself (since we were
	then using log2() against it anyway).
	Renamed it accordingly.
	
	Also, some minor formatting changes to
	ra-candidate.chpl

Modified files:
	chapel/test/studies/hpcc/RA/: ra-candidate.chpl 
	chapel/test/studies/hpcc/common/: probSize.chpl 
	                                  testProbSize.chpl 

---------------------------------------------------------------------------

10/27/06 09:32:14 -- deitz

Log message:
	Fixed index expressions (which now must be parenthesized) that I missed.

Modified files:
	chapel/test/npb/ft/: ft-serial.chpl 

---------------------------------------------------------------------------

10/27/06 09:34:17 -- deitz

Log message:
	Increased timing window threshold of timer test to make it less likely
	to regress.

Modified files:
	chapel/test/trivial/deitz/: test_timer1.chpl 

---------------------------------------------------------------------------

10/27/06 11:47:58 -- bradc

Log message:
	Working on generating the model FFT code (still using
	John's structure -- will plug in Mary Beth's cleaner
	version once I get the gross details correct).
	
	Also did some cleaning to the old fft.chpl based on
	bug fixes.

Modified files:
	chapel/test/studies/hpcc/FFT/bradc/: fft.chpl 
Added files:
	chapel/test/studies/hpcc/FFT/: .cvsignore fft-candidate-sm.chpl 
	                               fft-candidate-sm.compopts 
	                               fft-candidate-sm.execopts 
	                               fft-candidate-sm.good 

---------------------------------------------------------------------------

10/27/06 11:56:04 -- bradc

Log message:
	Forgot a future for this test.

Added files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.future 

---------------------------------------------------------------------------

10/27/06 12:13:20 -- bradc

Log message:
	Sanity check snapshot of FFT code.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 
	                               fft-candidate-sm.execopts 
	                               fft-candidate-sm.good 
Removed files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.future 

---------------------------------------------------------------------------

10/27/06 12:23:29 -- bradc

Log message:
	Next snapshot.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 

---------------------------------------------------------------------------

10/27/06 12:29:27 -- bradc

Log message:
	Next snapshot.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 

---------------------------------------------------------------------------

10/27/06 12:42:23 -- bradc

Log message:
	Snapshot.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 

---------------------------------------------------------------------------

10/27/06 12:47:37 -- bradc

Log message:
	<*Click*>

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 

---------------------------------------------------------------------------

10/27/06 12:56:59 -- bradc

Log message:
	Moved complex interpolations out into helper
	functions.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 

---------------------------------------------------------------------------

10/27/06 12:59:14 -- bradc

Log message:
	Snapshot.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 

---------------------------------------------------------------------------

10/27/06 13:14:02 -- bradc

Log message:
	Changed Twiddles back to W in the
	deep routines at Mary Beth's
	suggestion.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 

---------------------------------------------------------------------------

10/27/06 13:55:53 -- bradc

Log message:
	Final (small) edit to this, I hope.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 

---------------------------------------------------------------------------

10/27/06 14:10:22 -- marybeth

Log message:
	Update of simple fft loop to reflect Brad's style.

Modified files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft.chpl 

---------------------------------------------------------------------------

10/27/06 14:30:35 -- marybeth

Log message:
	Checking in 1d fft using 2d ffts with transpose.  This version would
	be suited for distributed memory architectures.

Added files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft2d.chpl fft2d.good 
	                                        fft2d.execopts 

---------------------------------------------------------------------------

10/27/06 15:17:49 -- marybeth

Log message:
	Adding my implementations to Brad's framework.
	
	The simple fft is in fft-candidate.
	
	The 2d fft is in fft-candidate.  This one needs more work to be robust.
	It works for size logN=8.  It should work for only even sizes of logN,
	but it currently doesn't.  This implementation needs to be extended to handle
	odd sizes of logN.

Added files:
	chapel/test/studies/hpcc/FFT/: fft-candidate.chpl 
	                               fft-candidate.compopts 
	                               fft-candidate.execopts 
	                               fft-candidate-2d.chpl 
	                               fft-candidate-2d.compopts 
	                               fft-candidate-2d.execopts 
	                               fft-candidate-2d.good 

---------------------------------------------------------------------------

10/27/06 16:53:51 -- bradc

Log message:
	Put fft-candidate.chpl into more of the HPCC
	formatting style and reordered routines to
	the order that I'm writing about them.
	
	Added distributions to both domains.
	
	Added a .good file.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 
	                               fft-candidate.chpl 
Added files:
	chapel/test/studies/hpcc/FFT/: fft-candidate.good 

---------------------------------------------------------------------------

10/27/06 16:56:31 -- marybeth

Log message:
	Changed outer loop of iteration in dfft to remove unnecessary test
	for m2 > numElements.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate.chpl 

---------------------------------------------------------------------------

10/30/06 09:36:17 -- deitz

Log message:
	Removed ExprStmt and Stmt classes.  Moved subclasses of Stmt
	(BlockStmt, ReturnStmt, GotoStmt, CondStmt) under Expr.
	
	Made AList contain an Expr rather than a BaseAST.  This is an
	advantage since we no longer need to verify that Symbols or Types are
	not in a list.  They cannot be in a list.
	
	Moved the following fields from BaseAST to Expr: prev, next, list.
	Moved related functionality to the Expr class as well.
	
	For compiling Jacobi, this change decreases memory usage by 17% and
	decreases compilation time by 11%.
	
	To do:
	
	  Rename and refactor parentStmt() function.  This function is
	  designed to return the statement-level expression, i.e., the top
	  Expr or the Expr whose parentExpr is a Stmt.  A better name is
	  getStmtExpr() or simply getStmt().
	
	  Add verification to make sure no STMT_* expressions are children of
	  CallExpr.

Modified files:
	chapel/compiler/AST/: alist.cpp astutil.cpp baseAST.cpp bb.cpp 
	                      build.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp view.cpp 
	chapel/compiler/include/: alist.h astutil.h baseAST.h bb.h 
	                          build.h expr.h stmt.h symbol.h 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: Makefile.share 
	                         buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp copy_propagation.cpp 
	                         cullOverReferences.cpp 
	                         flattenFunctions.cpp 
	                         functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	                         parallel.cpp scopeResolve.cpp 
	                         verify.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

10/30/06 10:41:08 -- deitz

Log message:
	Removed about half of the uses of the new parentStmt() function.
	
	Renamed the parentStmt() function to getExprStmt() to better describe
	what it does: return the statement-level AST.
	
	Added IS_STMT and IS_EXPR macros, currently used only in parentStmt(),
	to distinguish the two types of expressions.

Modified files:
	chapel/compiler/AST/: expr.cpp view.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         codegen.cpp copy_propagation.cpp 
	                         cullOverReferences.cpp 
	                         flattenFunctions.cpp 
	                         functionResolution.cpp 
	                         inlineFunctions.cpp normalize.cpp 
	                         parallel.cpp scopeResolve.cpp 

---------------------------------------------------------------------------

10/30/06 11:14:30 -- deitz

Log message:
	Moved BaseAST::parentSymbol to Expr::parentSymbol.  Removed
	verification that this was not used by Symbol and Type.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

10/30/06 11:40:33 -- waynew

Log message:
	Corrected test.  Was failing because we changed the default int's width
	from 64->32b. The format string was expecting a 64b integer.
	
	Added a .future showing a problem with literals and non-default width
	types.

Modified files:
	chapel/test/trivial/deitz/: test_format_primitives.chpl 
Added files:
	chapel/test/trivial/deitz/: test_format_primitives2.chpl 
	                            test_format_primitives2.future 
	                            test_format_primitives2.good 

---------------------------------------------------------------------------

10/30/06 13:42:57 -- deitz

Log message:
	Simplified generated code names of types and functions slightly.  Some
	of the type names are still rather long.
	
	Improved copy propagation to apply to actual arguments that are in the
	available set.  I was previously not doing this as I was worried about
	pass by reference.  Now with references more clear, this turned out to
	be easy.
	
	Improved copy propagation to apply through casts.
	
	These copy propagation changes decrease the LOC for the generated code
	for Jacobi from 8736 to 7952 (about 9%).
	
	Added a bunch more symbols to the "must mangle" list.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: codegen.cpp copy_propagation.cpp 

---------------------------------------------------------------------------

10/30/06 13:43:31 -- deitz

Log message:
	Updated .good

Modified files:
	chapel/test/trivial/mjoyner/inlinefunc/: inlfunc1_report.good 

---------------------------------------------------------------------------

10/30/06 14:46:58 -- deitz

Log message:
	Started deleting symbols and types when they are removed from the AST.
	Note: UnresolvedSymbols and Immediates are never deleted.
	
	This drops the memory usage at codegen time from 6833k to 2928k.  The
	maximum memory used (AST after function resolution) decreases only
	slightly.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

10/30/06 16:02:23 -- deitz

Log message:
	Refactored code related to param for loops.  Before this change, param
	loops were special-cased using four fields in the BlockStmt.  This
	change adds a new primitive that just needs to appear inside the
	BlockStmt to signal that it controls the parameter for loop.
	
	This fixes a bug in parameter for loops that require parameter folding
	as in "for param i in 1..5+5 do."  It also simplifies our
	representation, but does not impact memory much.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp expr.cpp 
	                      primitive.cpp stmt.cpp 
	chapel/compiler/include/: expr.h primitive.h stmt.h 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

10/30/06 17:31:15 -- waynew

Log message:
	Made some changes to Section 9. Still under construction. Checkpoint.

Modified files:
	chapel/spec/: spec.tex 
	chapel/spec/Parallelism_and_Synchronization/: Begin.tex 
	                                              Cobegin.tex 
	                                              Forall.tex 
	                                              Ordered_Expressions.tex 
	                                              Ordered_Forall.tex 
	                                              Parallel_Array_Assignment.tex 
	                                              Parallelism_and_Synchronization.tex 
	                                              Serial.tex 
	                                              Single_Assignment_Variables.tex 
	                                              Sync_Variables.tex 
Added files:
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Implicit_Parallelism.tex 
	                                              Parallel_Expressions.tex 
Removed files:
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Scan_and_Reduce.tex 
	                                              Sequence.tex 

---------------------------------------------------------------------------

10/31/06 12:55:06 -- deitz

Log message:
	Fixed code generation of integer literals to not print out the INT64
	macro if the integer literal is small.
	
	Marked Symbol::isCompilerTemp to true for a few more temporaries
	inserted by the compiler.
	
	Made --print-passes print out the total time of all the passes (and
	the time between the passes).
	
	Improved copy propagation to work on function calls not nested in
	moves.
	
	Improved dead variable elimination by making it iterative until it
	stops removing dead variables.
	
	Eliminated more dead expressions including getters with no purpose and
	assignments from x to x.
	
	This change decreases the LOC in the generated code of Jacobi by 9%.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: copy_propagation.cpp normalize.cpp 

---------------------------------------------------------------------------

10/31/06 13:52:05 -- bradc

Log message:
	Adding a future capturing the casts of floating
	point tuples to complexes that I think should
	work to be consistent with the language's
	use of casts in other contexts.  Currently only
	casting to a default "complex" type works.

Added files:
	chapel/test/types/complex/bradc/: tuple2complex.chpl 
	                                  tuple2complex.future 
	                                  tuple2complex.good 

---------------------------------------------------------------------------

10/31/06 14:00:29 -- bradc

Log message:
	Another future being filed to capture workarounds in
	the HPCC codes.  This one captures a test in which
	an explicit type was required to make param values
	in a conditional expression typecheck.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-condexpr.chpl 
	                                    ra-condexpr.future 
	                                    ra-condexpr.good 

---------------------------------------------------------------------------

10/31/06 14:15:27 -- deitz

Log message:
	Added Symbol::isConfig() and Symbol::isImmediate() convenience functions.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

10/31/06 14:21:19 -- bradc

Log message:
	Fixed the SeedGenerator class so that rather than
	returning a sentinel that was checked for in the
	Random Number generator, it actually creates the
	seed value itself.  Eventually need to clean this
	up to be parameterized by a type, but this keeps
	the interface we argued for in the HPCC paper
	but implements it more properly.

Modified files:
	chapel/modules/standard/: Random.chpl 

---------------------------------------------------------------------------

10/31/06 14:52:14 -- bradc

Log message:
	A future I found during HPCC in which we generate
	a confusing error message when two modules of the
	same name are found in the user code.

Added files:
	chapel/test/modules/bradc/: multipleModulesSameName.chpl 
	                            multipleModulesSameName.future 
	                            multipleModulesSameName.good 

---------------------------------------------------------------------------

10/31/06 16:02:25 -- bradc

Log message:
	These are some minor changes that were made to
	the HPCC study benchmarks prior to submitting the
	paper but which I didn't have time to check
	in.  I still need to do a comparison to get the
	codes we submitted locked into the testing system,
	and to remove some old drafts that aren't worth
	keeping around for testing purposes.

Modified files:
	chapel/test/studies/hpcc/FFT/: fft-candidate.chpl 
	chapel/test/studies/hpcc/RA/: .cvsignore ra-candidate.chpl 
	                              ra-randstream.chpl 

---------------------------------------------------------------------------

10/31/06 16:16:52 -- bradc

Log message:
	A future showing that types defined by named params
	can't be used in separate modules.  When this is fixed
	it can be folded into the official RA and this test
	can be removed.

Added files:
	chapel/test/modules/bradc/: ra-paramWidth.chpl 
	                            ra-paramWidth.compopts 
	                            ra-paramWidth.future 
	                            ra-paramWidth.good 
	chapel/test/modules/bradc/helperModules/: ra-randstream.chpl 

---------------------------------------------------------------------------

10/31/06 16:19:41 -- bradc

Log message:
	Checking utilities into our util/ directory
	- diffLatexCode: script for diffing latex code
	- replstring: script for replacing text in files

Added files:
	chapel/util/: diffLatexCode replstring 

---------------------------------------------------------------------------

11/01/06 09:41:51 -- deitz

Log message:
	Reorganized the spec so that we use a single file per section rather
	than a directory per section and a file per subsection and
	subsubsection in each directory.
	
	The tex files in these directories are no longer used.  To be removed.

Modified files:
	chapel/spec/: Makefile spec.tex 
Added files:
	chapel/spec/: Acknowledgments.tex Classes.tex Conversions.tex 
	              Domains_and_Arrays.tex Expressions.tex 
	              Functions.tex Generics.tex Input_and_Output.tex 
	              Iterators.tex Language_Overview.tex 
	              Lexical_Structure.tex 
	              Locality_and_Distribution.tex Modules.tex 
	              Notation.tex Organization.tex 
	              Parallelism_and_Synchronization.tex Records.tex 
	              Reductions_and_Scans.tex Scope.tex Sequences.tex 
	              Standard_Modules.tex Statements.tex Tuples.tex 
	              Types.tex Unions.tex Variables.tex 
Removed files:
	chapel/spec/: preprocess.pl 

---------------------------------------------------------------------------

11/01/06 09:55:17 -- deitz

Log message:
	Removed old per-section files.

Removed files:
	chapel/spec/Acknowledgments/: Acknowledgments.tex 
	chapel/spec/Classes/: Accessing_Base_Class_Fields.tex 
	                      Ambiguities_in_Constructor_Calls.tex 
	                      Automatic_Memory_Management.tex 
	                      Class_Assignment.tex 
	                      Class_Constructors.tex 
	                      Class_Declarations.tex 
	                      Class_Field_Accesses.tex Class_Fields.tex 
	                      Class_Instances.tex Class_Method_Calls.tex 
	                      Class_Method_Declarations.tex 
	                      Class_Methods.tex 
	                      Class_Methods_without_Parentheses.tex 
	                      Classes.tex 
	                      Default_Getters_and_Setters.tex 
	                      Derived_Class_Constructors.tex 
	                      Derived_Class_Definition.tex 
	                      Getters_and_Setters.tex Inheritance.tex 
	                      Inheriting_from_Multiple_Classes.tex 
	                      Iteration_over_Classes.tex 
	                      Nested_Type_Definitions_in_Classes.tex 
	                      Overriding_Base_Class_Functions.tex 
	                      Shadowing_Base_Class_Fields.tex 
	                      The_Default_Constructor.tex 
	                      The_Iteration_Interface.tex 
	                      The_em_this_Method.tex 
	                      The_em_this_Reference.tex 
	                      User-Defined_Constructors.tex 
	                      User-Defined_Getters_and_Setters.tex 
	chapel/spec/Conversions/: Conversions.tex 
	                          Explicit_Class_Conversions.tex 
	                          Explicit_Conversions.tex 
	                          Explicit_Enumeration_Conversions.tex 
	                          Explicit_Numeric_Conversions.tex 
	                          Explicit_Record_Conversions.tex 
	                          Implicit_Class_Conversions.tex 
	                          Implicit_Compile-Time_Constant_Conversions.tex 
	                          Implicit_Conversions.tex 
	                          Implicit_Enumeration_Conversions.tex 
	                          Implicit_Numeric_Conversions.tex 
	                          Implicit_Record_Conversions.tex 
	                          Implicit_Statement_Bool_Conversions.tex 
	chapel/spec/Domains_and_Arrays/: 
	                                 Adding_Indices_to_Indefinite_Domains.tex 
	                                 Adding_Indices_to_Opaque_Domains.tex 
	                                 Adding_Indices_to_Sparse_Arithmetic_Domains.tex 
	                                 Anonymous_Domains.tex 
	                                 Arithmetic_Array_Indexing.tex 
	                                 Arithmetic_Domain_Index_Types.tex 
	                                 Arithmetic_Domain_Indexing.tex 
	                                 Arithmetic_Domain_and_Array_Types.tex 
	                                 Arithmetic_Domains_and_Arithmetic_Sequences.tex 
	                                 Arithmetic_Domains_and_Arrays.tex 
	                                 Array_Assignment.tex 
	                                 Array_Indexing.tex 
	                                 Array_Initialization.tex 
	                                 Array_Promotion_of_Scalar_Functions.tex 
	                                 Array_Slicing.tex 
	                                 Array_Types.tex Arrays.tex 
	                                 Arrays_of_Arrays.tex 
	                                 Association_of_Arrays_to_Domains.tex 
	                                 Association_of_Subdomains_to_Domains.tex 
	                                 Destructive_Reallocation_of_Arrays.tex 
	                                 Domain_Assignment.tex 
	                                 Domain_Types.tex Domains.tex 
	                                 Domains_and_Arrays.tex 
	                                 Enumerated_Domain_Index_Types.tex 
	                                 Enumerated_Domain_and_Array_Types.tex 
	                                 Enumerated_Domains_and_Arrays.tex 
	                                 Formal_Arguments_of_Arithmetic_Array_Type.tex 
	                                 Formal_Arguments_of_Array_Type.tex 
	                                 Formal_Arguments_of_Domain_Type.tex 
	                                 Indefinite_Domain_Index_Types.tex 
	                                 Indefinite_Domain_and_Array_Types.tex 
	                                 Indefinite_Domains_and_Arrays.tex 
	                                 Index_Methods_on_Domains.tex 
	                                 Index_Methods_on_Subdomains.tex 
	                                 Index_Types.tex 
	                                 Iteration_over_Arrays.tex 
	                                 Iteration_over_Domains.tex 
	                                 Methods_on_Arithmetic_Domains_and_Arrays.tex 
	                                 Methods_on_Enumerated_Domains_and_Arrays.tex 
	                                 Methods_on_Indefinite_Domains_and_Arrays.tex 
	                                 Methods_on_Opaque_Domains_and_Arrays.tex 
	                                 Methods_on_Product_Domains_and_Arrays.tex 
	                                 Multidimensional_Arithmetic_Domains_and_Arrays.tex 
	                                 Opaque_Domain_Index_Types.tex 
	                                 Opaque_Domain_and_Array_Types.tex 
	                                 Opaque_Domains_and_Arrays.tex 
	                                 Preservative_Reallocation_of_Arrays.tex 
	                                 Product_Domain_Definition.tex 
	                                 Product_Domains_and_Arrays.tex 
	                                 Removing_Indices_from_Indefinite_Domains.tex 
	                                 Removing_Indices_from_Opaque_Domains.tex 
	                                 Removing_Indices_from_Sparse_Arithmetic_Domains.tex 
	                                 Sparse_Arithmetic_Domains_and_Arrays.tex 
	                                 Strided_Arithmetic_Domains_and_Arrays.tex 
	                                 Subdomain_Definition.tex 
	                                 Subdomains.tex 
	chapel/spec/Expressions/: Addition_Operators.tex 
	                          Arithmetic_Operators.tex 
	                          Bitwise_And_Operators.tex 
	                          Bitwise_Complement_Operators.tex 
	                          Bitwise_Operators.tex 
	                          Bitwise_Or_Operators.tex 
	                          Bitwise_Xor_Operators.tex 
	                          Call_Expressions.tex Casts.tex 
	                          Conditional_Expressions.tex 
	                          Constant_Expressions.tex 
	                          Division_Operators.tex 
	                          Equality_Comparison_Operators.tex 
	                          Exponentiation_Operators.tex 
	                          Expressions.tex Forall_Expressions.tex 
	                          Indexing_Expressions.tex 
	                          Let_Expressions.tex 
	                          Literal_Expressions.tex 
	                          Logical_And_Operators.tex 
	                          Logical_Negation_Operators.tex 
	                          Logical_Operators.tex 
	                          Logical_Or_Operators.tex 
	                          Member_Access_Expressions.tex 
	                          Miscellaneous_Operators.tex 
	                          Modulus_Operators.tex 
	                          Multiplication_Operators.tex 
	                          Operator_Overloading.tex 
	                          Operator_Precedence_and_Associativity.tex 
	                          Operators.tex 
	                          Ordered_Comparison_Operators.tex 
	                          Primary_Expressions.tex 
	                          Relational_Operators.tex 
	                          Shift_Operators.tex 
	                          Subtraction_Operators.tex 
	                          The_Arithmetic_Domain_By_Operator.tex 
	                          The_Sequence_By_Operator.tex 
	                          The_Sequence_Concatenation_Operator.tex 
	                          The_String_Concatenation_Operator.tex 
	                          The_Type_Query_Expression.tex 
	                          Unary_Minus_Operators.tex 
	                          Unary_Plus_Operators.tex 
	                          Variable_Expressions.tex 
	chapel/spec/Functions/: Accessing_Outer_Variables.tex 
	                        Default_Values.tex 
	                        Determining_Candidate_Functions.tex 
	                        Determining_More_Specific_Functions.tex 
	                        Explicit_Setter_Functions.tex 
	                        Formal_Arguments.tex Function_Calls.tex 
	                        Function_Definitions.tex 
	                        Function_Overloading.tex 
	                        Function_Resolution.tex Functions.tex 
	                        Functions_with_Class_Arguments.tex 
	                        Identifying_Visible_Functions.tex 
	                        Intents.tex Most_Specific_Function.tex 
	                        Named_Arguments.tex Nested_Functions.tex 
	                        Special_Functions.tex 
	                        The_Blank_Intent.tex The_In_Intent.tex 
	                        The_Inout_Intent.tex The_Out_Intent.tex 
	                        The_Return_Statement.tex 
	                        Variable_Functions.tex 
	                        Variable_Length_Argument_Lists.tex 
	                        Visibility_and_Function_Resolution.tex 
	chapel/spec/Generics/: Formal_Arguments_of_Generic_Type.tex 
	                       Formal_Arguments_with_Queried_Types.tex 
	                       Formal_Arguments_without_Types.tex 
	                       Function_Resolution_and_Generic_Functions.tex 
	                       Function_Visibility_in_Generic_Functions.tex 
	                       Generic_Array_Argument_Types.tex 
	                       Generic_Default_Constructors.tex 
	                       Generic_Domain_and_Sequence_Types.tex 
	                       Generic_Functions.tex Generic_Methods.tex 
	                       Generic_Types.tex Generics.tex 
	                       Instantiating_Generic_Functions.tex 
	                       Instantiating_Parameterized_Generics.tex 
	                       Parameter_Expressions.tex 
	                       Parameters_and_Generics.tex 
	                       The_em_elt_type_Type.tex 
	                       Type_Aliases_and_Generic_Types.tex 
	                       Type_Expressions.tex 
	                       Where_Expressions.tex 
	chapel/spec/Input_and_Output/: Input_and_Output.tex 
	chapel/spec/Iterators/: Iterator_Calls.tex 
	                        Iterator_Functions.tex Iterators.tex 
	                        Iterators_as_Sequences.tex 
	                        Iterators_in_For_and_Forall_Loops.tex 
	                        Making_a_Class_an_Iterator.tex 
	                        The_Yield_Statement.tex 
	                        The_em_getHeadCursor_Method.tex 
	                        The_em_getNextCursor_Method.tex 
	                        The_em_getValue_Method.tex 
	                        The_em_isValidCursorQ_Method.tex 
	                        The_em_rank_Parameter.tex 
	chapel/spec/Language_Overview/: Arrays_and_Distributions.tex 
	                                Basic_Language_Features.tex 
	                                Data_Distributions.tex 
	                                Data_Parallel_Constructs.tex 
	                                Data_Types_and_Variables.tex 
	                                Exploiting_Data_Locality.tex 
	                                Functions_and_Methods.tex 
	                                Generic_Programming.tex 
	                                Global_View_Programming_Model.tex 
	                                Language_Overview.tex 
	                                Locality_Aware_Programming.tex 
	                                Motivating_Principles.tex 
	                                Object-Oriented_Programming.tex 
	                                Parallel_Features.tex 
	                                Programs_and_Modules.tex 
	                                Sequences_and_Iterators.tex 
	                                Statements_and_Expressions.tex 
	                                Structured_Data_Types.tex 
	                                Synchronizing_and_Serializing_Tasks.tex 
	                                Task_Parallel_Constructs.tex 
	chapel/spec/Lexical_Structure/: Case_Sensitivity.tex 
	                                Comments.tex 
	                                Compile-Time_Conditionals.tex 
	                                Grouping_Tokens.tex 
	                                Identifiers.tex Keywords.tex 
	                                Lexical_Structure.tex 
	                                Literals.tex 
	                                Operators_and_Punctuation.tex 
	                                Programs.tex Tokens.tex 
	                                User-Defined_Compiler_Errors.tex 
	                                White_Space.tex 
	chapel/spec/Locality_and_Distribution/: 
	                                        BlockCyclic_Distribution.tex 
	                                        Block_Distribution.tex 
	                                        Cut_Distribution.tex 
	                                        Cyclic_Distribution.tex 
	                                        Distributed_Arrays.tex 
	                                        Distributed_Domains.tex 
	                                        Distributions.tex 
	                                        Locales.tex 
	                                        Locality_and_Distribution.tex 
	                                        On.tex 
	                                        On_and_Forall_Loops.tex 
	                                        On_and_Iterators.tex 
	                                        Parallel_Execution_Model.tex 
	                                        Predefined_Locales_Array.tex 
	                                        Querying_the_Locale_of_a_Variable.tex 
	                                        Specifying_Locales_for_Computation.tex 
	                                        Standard_Distributions.tex 
	                                        The_Locale_Type.tex 
	                                        Undistributed_Domains_and_Arrays.tex 
	                                        User-Defined_Distributions.tex 
	chapel/spec/Modules/: Command-Line_Arguments.tex 
	                      Explicit_Naming.tex 
	                      Implicit_Module_Names.tex 
	                      Module_Definitions.tex 
	                      Module_Execution.tex Module_Scopes.tex 
	                      Modules.tex Nested_Modules.tex 
	                      Program_Execution.tex 
	                      Programs_with_a_Single_Module.tex 
	                      The_em_finalize_Function.tex 
	                      The_em_initialize_Function.tex 
	                      The_em_main_Function.tex Using_Modules.tex 
	chapel/spec/Notation/: Notation.tex 
	chapel/spec/Organization/: Organization.tex 
	chapel/spec/Parallelism_and_Synchronization/: 
	                                              Alternative_Forall_Loop_Syntax.tex 
	                                              Atomic_Transactions.tex 
	                                              Begin.tex 
	                                              Cobegin.tex 
	                                              Forall.tex 
	                                              Functions_on_Synchronization_Variables.tex 
	                                              Implicit_Parallelism.tex 
	                                              Implicit_Synchronization_on_Variables.tex 
	                                              Memory_Consistency.tex 
	                                              Ordered_Expressions.tex 
	                                              Ordered_Forall.tex 
	                                              Parallel_Array_Assignment.tex 
	                                              Parallel_Execution.tex 
	                                              Parallel_Expressions.tex 
	                                              Parallel_Iterators.tex 
	                                              Parallel_Statements.tex 
	                                              Parallelism_and_Synchronization.tex 
	                                              Serial.tex 
	                                              Single_Assignment_Variables.tex 
	                                              Strong_Atomicity.tex 
	                                              Sync_Variables.tex 
	                                              Synchronization_Variables_of_Class_Type.tex 
	                                              Synchronization_Variables_of_Record_Type.tex 
	                                              Weak_Atomicity.tex 
	chapel/spec/Records/: Class_and_Record_Differences.tex 
	                      Record_Assignment.tex 
	                      Record_Declarations.tex 
	                      Record_Inheritance.tex Records.tex 
	                      Records_as_Value_Classes.tex 
	chapel/spec/Reductions_and_Scans/: Reductions_and_Scans.tex 
	chapel/spec/Scope/: Scope.tex 
	chapel/spec/Sequences/: Arithmetic_Sequences.tex 
	                        Conversions_Between_Sequences_and_Tuples.tex 
	                        Filtering_Predicates.tex 
	                        Indefinite_Sequences.tex 
	                        Indexing_into_Strings_with_Arithmetic_Sequences.tex 
	                        Iteration_over_Sequences.tex 
	                        Methods_and_Functions_on_Sequences.tex 
	                        Sequence_Assignment.tex 
	                        Sequence_Concatenation.tex 
	                        Sequence_Equality.tex 
	                        Sequence_Expressions.tex 
	                        Sequence_Indexing.tex 
	                        Sequence_Indexing_by_Integers.tex 
	                        Sequence_Indexing_by_Tuples.tex 
	                        Sequence_Promotion_of_Scalar_Functions.tex 
	                        Sequence_Type_Definitions.tex 
	                        Sequences.tex 
	                        Sequences_in_Conditional_Statements.tex 
	                        Sequences_in_Logical_Contexts.tex 
	                        Sequences_in_Select_Statements.tex 
	                        Sequences_in_While_and_Do_While_Loops.tex 
	                        Sequences_of_One-Character_Strings.tex 
	                        Strided_Arithmetic_Sequences.tex 
	                        Tensor_Product_Promotion.tex 
	                        The_em_length_Method.tex 
	                        The_em_reshape_Function.tex 
	                        The_em_reverse_Method.tex 
	                        The_em_spread_Function.tex 
	                        The_em_transpose_Function.tex 
	                        Zipper_Promotion.tex 
	chapel/spec/Standard_Modules/: Bitwise_Functions.tex Math.tex 
	                               Random_Numbers.tex 
	                               Standard_Modules.tex System.tex 
	                               Time.tex 
	chapel/spec/Statements/: Assignment_Statements.tex 
	                         Block_Level_Statements.tex Blocks.tex 
	                         Expression_Statements.tex 
	                         Statements.tex 
	                         Tensor_Product_Iteration.tex 
	                         The_Conditional_Statement.tex 
	                         The_Empty_Statement.tex 
	                         The_For_Loop.tex 
	                         The_Select_Statement.tex 
	                         The_Type_Select_Statement.tex 
	                         The_Use_Statement.tex 
	                         The_While_and_Do_While_Loops.tex 
	                         Zipper_Iteration.tex 
	chapel/spec/Synchronization/: Synchronization.tex 
	chapel/spec/Tuples/: Declaring_Homogeneous_Tuples.tex 
	                     Formal_Argument_Declarations_in_a_Tuple.tex 
	                     Formal_Arguments_of_Tuple_Type.tex 
	                     Homogeneous_Tuples.tex 
	                     Ignoring_Values_with_Underscore.tex 
	                     Indexing_of_Homogeneous_Tuples.tex 
	                     Tuple_Assignment.tex 
	                     Tuple_Destructuring.tex 
	                     Tuple_Expressions.tex Tuple_Indexing.tex 
	                     Tuple_Type_Definitions.tex Tuples.tex 
	                     Variable_Declarations_in_a_Tuple.tex 
	chapel/spec/Types/: Class_Types.tex Complex_Types.tex 
	                    Domain_and_Array_Types.tex 
	                    Enumerated_Types.tex Imaginary_Types.tex 
	                    Primitive_Type_Literals.tex 
	                    Primitive_Types.tex Real_Types.tex 
	                    Record_Types.tex Sequence_Types.tex 
	                    Signed_and_Unsigned_Integral_Types.tex 
	                    The_Bool_Type.tex The_String_Type.tex 
	                    Tuple_Types.tex Type_Aliases.tex Types.tex 
	                    Union_Types.tex 
	chapel/spec/Unions/: Record_and_Union_Differences.tex 
	                     The_Type_Select_Statement_and_Unions.tex 
	                     Union_Assignment.tex Union_Declarations.tex 
	                     Union_Field_Accesses.tex Union_Fields.tex 
	                     Union_Inheritance.tex Unions.tex 
	chapel/spec/Variables/: Compile-Time_Constants.tex 
	                        Configuration_Variables.tex 
	                        Constants.tex Default_Initialization.tex 
	                        Global_Variables.tex 
	                        Local_Type_Inference.tex 
	                        Local_Variables.tex 
	                        Runtime_Constants.tex 
	                        Single_Variables.tex 
	                        Synchronization_Variables.tex 
	                        Variable_Declarations.tex Variables.tex 

---------------------------------------------------------------------------

11/01/06 09:57:07 -- deitz

Log message:
	Removed README which explained the preprocess script (no longer used).

Removed files:
	chapel/spec/: README 

---------------------------------------------------------------------------

11/01/06 10:00:07 -- deitz

Log message:
	Removed stub.

Removed files:
	chapel/spec/: stub.tex 

---------------------------------------------------------------------------

11/01/06 10:13:44 -- deitz

Log message:
	Updated listings settings and changed font to times based on the hpcc work.

Modified files:
	chapel/spec/: chapel_listing.tex spec.tex syntax_listing.tex 

---------------------------------------------------------------------------

11/01/06 11:29:45 -- deitz

Log message:
	Filled in the first four parts of the function section and moved the
	method syntax to the class section.

Modified files:
	chapel/spec/: Classes.tex Functions.tex 

---------------------------------------------------------------------------

11/01/06 11:44:46 -- deitz

Log message:
	Added function intents section.

Modified files:
	chapel/spec/: Functions.tex 

---------------------------------------------------------------------------

11/01/06 13:38:00 -- bradc

Log message:
	Checking in a fix for the lack of isinf() on Sun boxes --
	implemented it as a macro in a new chplfp.h file and
	specialized this file for the Sun platform.
	
	Note that Sun compilations currently enter an infinite
	loop in the normalize pass, unrelated to this change
	but undetected since this change has broken testing
	(after other mail-related settings broke it previously).

Modified files:
	chapel/runtime/src/: chpltypes.c 
Added files:
	chapel/runtime/include/: chplfp.h 
	chapel/runtime/include/sunos/: chplfp.h 

---------------------------------------------------------------------------

11/01/06 14:44:48 -- deitz

Log message:
	Increased window of test passing to mirror the changes I made to
	test_timer1 a few weeks ago.

Modified files:
	chapel/test/trivial/deitz/: test_timer2.chpl 

---------------------------------------------------------------------------

11/01/06 14:46:22 -- deitz

Log message:
	Simplfied code generation code and some file generation code.  Pruning
	and dead code elimination to follow.
	
	Added to the generated code another file, called _main.c, that
	contains a #include of the header file and all the module's C files.
	This file is then compiled by the c compiler.  Prior, each of the C
	files was compiled and preprocessed separately and each included the
	header file.
	
	This change improves compilation time by 27% when compiling Jacobi.

Modified files:
	chapel/compiler/AST/: symbol.cpp symscope.cpp 
	chapel/compiler/include/: files.h symbol.h 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

11/01/06 14:52:39 -- deitz

Log message:
	Removed some dead code.

Modified files:
	chapel/compiler/include/: files.h 
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

11/01/06 14:59:52 -- waynew

Log message:
	For those who like complex, min/max are back in.
	
	Added tests and renable use in one of Brad's test.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/test/trivial/waynew/: maxtest.chpl maxtest.good 
	                             mintest.chpl mintest.good 
	chapel/test/types/coerce/bradc/: tostring.chpl tostring.good 

---------------------------------------------------------------------------

11/01/06 16:28:42 -- bradc

Log message:
	Added "new" to the C-reserved identifiers list.

Modified files:
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

11/01/06 16:30:30 -- bradc

Log message:
	Replaced all instances of immediate->v_int64 with
	immediate->int_value() in order to get rid of
	endianness assumptions causing infinite loops
	and other errors on the Sun platform.
	
	This causes two regressions that I haven't had
	a chance to investigate yet:
	
	[Error matching compiler output for arrays/deitz/test_indefinite2]
	[Error matching compiler output for arrays/deitz/test_indefinite7]

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

11/01/06 16:56:15 -- bradc

Log message:
	Made a change to the platform script so that if CHPL_PLATFORM
	is already set, it will return that value rather than trying
	to determine what platform you're on.  I've convinced myself
	that this shouldn't break anything, but please let me know
	if it creates problems for anyone's setup.

Modified files:
	chapel/util/: platform 

---------------------------------------------------------------------------

11/01/06 17:04:40 -- deitz

Log message:
	Filled in the variable function section.
	
	Started to write the function resolution section.
	
	Added some index terms to the Functions section.
	
	Removed "Special Functions" section.  What was this supposed to be?
	
	Corrected chapel listing keywords (no comma after then).
	
	Made example, implementation, and rational a quote rather than a
	minipage so page breaks could appear inside them.

Modified files:
	chapel/spec/: Functions.tex chapel_listing.tex spec.tex 

---------------------------------------------------------------------------

11/02/06 12:10:18 -- bradc

Log message:
	Changed the %d string literal for reading in
	an int from %lld to %d.  This code is still
	really hacky and nonportable, though.  Need
	to somehow abstract formatting strings to
	be less architecture specific.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 

---------------------------------------------------------------------------

11/02/06 12:13:17 -- deitz

Log message:
	Added first pass of function resolution section.  Added class
	promotion to Classes section to discuss user-defined scalar promotion.

Modified files:
	chapel/spec/: Classes.tex Functions.tex 

---------------------------------------------------------------------------

11/02/06 14:26:45 -- bradc

Log message:
	Fixed cases in parameter folding where the
	int64 field of a union was assumed when in
	fact it was the int32 field.
	
	This points out a potentially worrisome
	aspect of this code which is that if it's
	assuming that it knows the size of both
	arguments when it doesn't, it makes me
	worry that it thinks it knows whether
	both arguments are signed/unsigned when
	in fact it may not (in particular, there
	seems as if there used to be an assumption
	that both arguments were the same type/width.
	The new assumption is that they are both the
	same int/uint-ness.  In general, it seems like
	the full cross-product should be handled
	unless I'm missing something obvious).
	
	In any case, this change doesn't make this
	code any worse...

Modified files:
	chapel/compiler/ifa/: num.cpp 

---------------------------------------------------------------------------

11/02/06 14:33:31 -- deitz

Log message:
	Finished first pass writeup of the Functions section, adding nested
	functions and variable length argument lists sections.
	
	Added stub section to Statements section to discuss parameter for loops.
	
	Added stub section to Tuples section to discuss tuple destructuring
	expressions, e.g., (...x) where x is a tuple.

Modified files:
	chapel/spec/: Functions.tex Statements.tex Tuples.tex 

---------------------------------------------------------------------------

11/02/06 15:28:48 -- deitz

Log message:
	Fixed Statements section in spec to define the new semantics of for
	loops where parentheses need to be used, as opposed to an index list
	or iterator list that is not parenthesized.

Modified files:
	chapel/spec/: Statements.tex 

---------------------------------------------------------------------------

11/02/06 15:32:18 -- deitz

Log message:
	Changed all references to sections via
	
	  in Section~\ref{section_label}
	
	to
	
	  in~\rsec{section_label}
	
	which is the preferred way and inserts the section symbol.

Modified files:
	chapel/spec/: Functions.tex Types.tex 

---------------------------------------------------------------------------

11/02/06 15:34:12 -- deitz

Log message:
	Fixed a bug that showed up when the tuple get and tuple set function
	were over-instantiated (instantiated even when they shouldn't be).
	There is no way of getting around this.  Although we can prune
	over-instantiation, we cannot do so completely.
	
	This fixes last night's two regressions.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

11/02/06 15:37:40 -- deitz

Log message:
	Spot checked and fixed a bug.

Modified files:
	chapel/spec/: Types.tex 

---------------------------------------------------------------------------

11/02/06 16:50:59 -- deitz

Log message:
	Started writing lexical structure section.  Checkpoint.

Modified files:
	chapel/spec/: Lexical_Structure.tex 

---------------------------------------------------------------------------

11/02/06 16:58:43 -- waynew

Log message:
	Script to tar up the necessary files for a release.

Added files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/03/06 13:10:19 -- bradc

Log message:
	Check-in to fix more Sun regressions.  This code
	addresses a to-me inexplicable inconsistency
	between the Sun and Linux builds of the compiler
	in which a cast of a double value greater than
	MAX_INT down to an int32 resulted in different
	behaviors on different platforms in folding the
	pow() function.
	
	Rather than solve this problem, I beat my head
	against it for several hours and then decided
	that using pow() to implement integer exponentiation
	was a bad idea anyway, so rewrote the integer cases
	to perform the math explicitly using integer values.
	This could certainly be optimized, but at least is
	generating correct, portable values.
	
	As with yesterday's checkins, I have lingering
	concerns about folding ** operators that take
	operands of different types; but like yesterday's
	check-in, this one merely propagates the
	existing assumptions, fixes the portability issues,
	and doesn't break anything that currently works.
	
	This change also includes some changes to cast_code.cc
	from direct accesses to the 64-bit int/uint fields
	of the union to use the int_value()/uint_value()
	methods.  In retrospect, these are probably
	unnecessary (and in fact, I now believe that they
	should be unnecessary everywhere if we were using
	unions in a typesafe manner, suggesting that
	we aren't), but also don't hurt and cause greps
	for v_int64 to result in fewer hits.

Modified files:
	chapel/compiler/ifa/: cast_code.cc num.cpp 

---------------------------------------------------------------------------

11/03/06 14:35:08 -- bradc

Log message:
	Renamed cast_code.cpp as cast_code.cc because I never
	find the .cc file in any of my greppings of the sources.

Modified files:
	chapel/compiler/ifa/: num.cpp 
Added files:
	chapel/compiler/ifa/: cast_code.cpp 
Removed files:
	chapel/compiler/ifa/: cast_code.cc 

---------------------------------------------------------------------------

11/03/06 14:39:45 -- bradc

Log message:
	Modified gen_release script to build tarball from
	a fresh copy of the sources checked out into /tmp
	(or $TMPDIR if set).  Result is left in $CHPLHOME
	if set.  In /tmp or $TMPDIR otherwise.

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/03/06 14:57:15 -- deitz

Log message:
	Finished first pass at sequences section.

Modified files:
	chapel/spec/: Sequences.tex 

---------------------------------------------------------------------------

11/03/06 14:58:03 -- deitz

Log message:
	Fixed an undefined reference.

Modified files:
	chapel/spec/: Parallelism_and_Synchronization.tex 

---------------------------------------------------------------------------

11/03/06 15:04:44 -- deitz

Log message:
	Fixed a slight problem with my last checkin.

Modified files:
	chapel/spec/: Sequences.tex 

---------------------------------------------------------------------------

11/03/06 15:27:18 -- bradc

Log message:
	Switched our LICENSE file over to the MIT license
	in anticipation of the release.
	
	Changed the --copyright flag to only print the
	copyright and added a --license flag to print
	out the full license (as the copyright used to).
	Removed blank lines from both flags' output.
	Added a test of the license flag and updated
	the copyright flag test.

Modified files:
	./: LICENSE 
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/test/compflags/bradc/copyright/: .cvsignore PREDIFF 
Added files:
	chapel/test/compflags/bradc/license/: .cvsignore COMPOPTS NOEXEC 
	                                      PREDIFF declint.chpl 

---------------------------------------------------------------------------

11/03/06 16:18:49 -- deitz

Log message:
	Finished first pass of Lexical Structure section.

Modified files:
	chapel/spec/: Expressions.tex Lexical_Structure.tex 

---------------------------------------------------------------------------

11/06/06 13:16:19 -- deitz

Log message:
	Finished first pass of writing Conversions section.

Modified files:
	chapel/spec/: Conversions.tex chapel_listing.tex 

---------------------------------------------------------------------------

11/06/06 13:31:46 -- bradc

Log message:
	In preparation for the release...
	
	Added separation of arguments into user and developer
	categories, and also added capability to add separators
	that group flags into categories for output of --help.
	Feel free to give feedback on how it looks/could be
	improved.
	
	Renamed a few flags to keep columns lined up/clarify:
	--print-tokens => --print-code-size
	--no-bounds-checking => -no-bounds-check
	--instantiation-limit => -instantiate-max
	
	Added tests of help displays for users and developers.

Modified files:
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/test/compflags/bradc/tokenflags/: tokentest3.compopts 
	chapel/test/compflags/deitz/: 
	                              test_no_bounds_checking_false.compopts 
	                              test_no_bounds_checking_false2.compopts 
	chapel/test/types/type_variables/deitz/part3/: 
	                                               test_overinstantiate1a.compopts 
Added files:
	chapel/test/compflags/bradc/help/: develhelp.chpl 
	                                   develhelp.compopts 
	                                   develhelp.good 
	                                   develhelp.prediff 
	                                   develhelp.txt userhelp.chpl 
	                                   userhelp.compopts 
	                                   userhelp.good 
	                                   userhelp.prediff userhelp.txt 

---------------------------------------------------------------------------

11/06/06 14:10:27 -- bradc

Log message:
	Reworking old release-oriented Makefile rules to support
	addition of copyrights to source files and Makefiles.

Modified files:
	./: Makefile 
	chapel/make/: Makefile.release 

---------------------------------------------------------------------------

11/06/06 14:27:47 -- bradc

Log message:
	Removed gc files from CVS to speed up checkouts.

Removed files:
	chapel/third-party/boehmgc/: gc-valgrind.patch gc6.3.tar.gz 
	                             gc6.5.tar.gz 
	chapel/third-party/boehmgc/gc6.5/: AmigaOS.c BCC_MAKEFILE 
	                                   EMX_MAKEFILE MacOS.c 
	                                   MacProjects.sit.hqx 
	                                   Makefile.DLLs Makefile.am 
	                                   Makefile.direct Makefile.dj 
	                                   Makefile.in NT_MAKEFILE 
	                                   NT_STATIC_THREADS_MAKEFILE 
	                                   NT_THREADS_MAKEFILE 
	                                   OS2_MAKEFILE PCR-Makefile 
	                                   README.QUICK SMakefile.amiga 
	                                   WCC_MAKEFILE acinclude.m4 
	                                   aclocal.m4 add_gc_prefix.c 
	                                   allchblk.c alloc.c 
	                                   alpha_mach_dep.S backgraph.c 
	                                   blacklst.c callprocs 
	                                   checksums.c config.guess 
	                                   config.sub configure 
	                                   configure.host configure.in 
	                                   darwin_stop_world.c dbg_mlc.c 
	                                   depcomp digimars.mak 
	                                   dyn_load.c finalize.c gc.mak 
	                                   gc_cpp.cc gc_cpp.cpp 
	                                   gc_dlopen.c gcc_support.c 
	                                   gcj_mlc.c gcname.c headers.c 
	                                   hpux_test_and_clear.s 
	                                   ia64_save_regs_in_stack.s 
	                                   if_mach.c if_not_there.c 
	                                   install-sh libtool.m4 
	                                   ltmain.sh mach_dep.c malloc.c 
	                                   mallocx.c mark.c mark_rts.c 
	                                   mips_sgi_mach_dep.s 
	                                   mips_ultrix_mach_dep.s misc.c 
	                                   missing mkinstalldirs 
	                                   new_hblk.c obj_map.c os_dep.c 
	                                   pc_excludes pcr_interface.c 
	                                   powerpc_darwin_mach_dep.s 
	                                   pthread_stop_world.c 
	                                   pthread_support.c ptr_chck.c 
	                                   real_malloc.c reclaim.c 
	                                   rs6000_mach_dep.s setjmp_t.c 
	                                   solaris_pthreads.c 
	                                   solaris_threads.c 
	                                   sparc_mach_dep.S 
	                                   sparc_netbsd_mach_dep.s 
	                                   sparc_sunos4_mach_dep.s 
	                                   specific.c stubborn.c 
	                                   threadlibs.c typd_mlc.c 
	                                   version.h win32_threads.c 
	chapel/third-party/boehmgc/gc6.5/cord/: cordbscs.c cordprnt.c 
	                                        cordtest.c cordxtra.c 
	                                        de.c de_cmds.h 
	                                        de_win.ICO de_win.RC 
	                                        de_win.c de_win.h 
	chapel/third-party/boehmgc/gc6.5/doc/: .cvsignore Makefile.am 
	                                       Makefile.in README 
	                                       README.DGUX386 README.Mac 
	                                       README.MacOSX README.OS2 
	                                       README.amiga 
	                                       README.arm.cross 
	                                       README.autoconf 
	                                       README.changes 
	                                       README.contributors 
	                                       README.cords 
	                                       README.darwin README.dj 
	                                       README.environment 
	                                       README.ews4800 README.hp 
	                                       README.linux 
	                                       README.macros 
	                                       README.rs6000 README.sgi 
	                                       README.solaris2 
	                                       README.uts README.win32 
	                                       barrett_diagram 
	                                       debugging.html gc.man 
	                                       gcdescr.html 
	                                       gcinterface.html 
	                                       leak.html scale.html 
	                                       simple_example.html 
	                                       tree.html 
	chapel/third-party/boehmgc/gc6.5/include/: .cvsignore 
	                                           Makefile.am 
	                                           Makefile.in cord.h 
	                                           ec.h gc.h gc_alloc.h 
	                                           gc_allocator.h 
	                                           gc_amiga_redirects.h 
	                                           gc_backptr.h 
	                                           gc_config_macros.h 
	                                           gc_cpp.h gc_gcj.h 
	                                           gc_inl.h gc_inline.h 
	                                           gc_local_alloc.h 
	                                           gc_mark.h 
	                                           gc_pthread_redirects.h 
	                                           gc_typed.h javaxfc.h 
	                                           leak_detector.h 
	                                           new_gc_alloc.h 
	                                           weakpointer.h 
	chapel/third-party/boehmgc/gc6.5/include/private/: cord_pos.h 
	                                                   darwin_semaphore.h 
	                                                   darwin_stop_world.h 
	                                                   dbg_mlc.h 
	                                                   gc_hdrs.h 
	                                                   gc_locks.h 
	                                                   gc_pmark.h 
	                                                   gc_priv.h 
	                                                   gcconfig.h 
	                                                   pthread_stop_world.h 
	                                                   pthread_support.h 
	                                                   solaris_threads.h 
	                                                   specific.h 

---------------------------------------------------------------------------

11/06/06 14:28:46 -- bradc

Log message:
	Modified gen_release script to tag all source and
	Makefile files with Cray copyright information
	before tarring them up.

Modified files:
	chapel/make/: Makefile.release 
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/06/06 14:55:48 -- bradc

Log message:
	Next generation of license-oriented changes:
	
	- removed etc/ directory which contained our mods to
	  emacs files because they are GPL and I didn't want
	  to risk infecting our source tree with that.  We
	  can always release the emacs mode files separately
	  to fix this issue, or write them to merge with
	  emacs' provided files rather than copying and
	  modifying the files
	
	- changed the format of the C COPYRIGHT comment
	  slightly.

Modified files:
	chapel/make/: Makefile.release 
	chapel/util/: gen_release 
Added files:
	chapel/test/npb/ft/: .cvsignore 
	chapel/test/studies/hpcc/FFT/marybeth/: .cvsignore 

---------------------------------------------------------------------------

11/06/06 15:21:41 -- deitz

Log message:
	Changed syntax listing so apostrophes are not printed out in the
	syntax diagram.  Improved the syntax diagram.  Apostrophes are still
	required in the latex code.
	
	Filled in Variables section introduction.
	
	Filled in cast expression section and refactored explicit conversions section.

Modified files:
	chapel/spec/: Conversions.tex Expressions.tex Variables.tex 
	              chapel_listing.tex syntax_listing.tex 

---------------------------------------------------------------------------

11/06/06 15:49:34 -- deitz

Log message:
	Added default initialization section to Variables section.
	
	Set the column spacing of syntax listings to fixed, the default, after
	having trouble with the other spacing formats.

Modified files:
	chapel/spec/: Variables.tex syntax_listing.tex 

---------------------------------------------------------------------------

11/06/06 15:50:28 -- bradc

Log message:
	Made the gen_release script run the bison and flex
	steps of building the release to avoid relying on
	the users of the release having these tools.

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/07/06 10:07:07 -- deitz

Log message:
	Finished first pass of Variables section.

Modified files:
	chapel/spec/: Variables.tex 

---------------------------------------------------------------------------

11/07/06 11:50:22 -- bradc

Log message:
	This change has four components:
	
	1) removed CHPL_SYSTEM_DIR/--sys-dir capability and replaced it
	   with a CHPLHOME/--chplhome capability.
	
	2) removed dead compiler flags:
	   --premalloc
	   --no-header-errors
	
	3) removed dead code:
	   compiler/etc/c_runtime.h
	   compiler/etc/valgrind.suppressions
	   init_system() routine which seemed very erroneous (e.g.,
	      memcpy's based on sizeof a char*, stringcats that dropped
	      the returned string on the floor
	
	4) fixed help tests by setting chplhome to a bogus value for the
	   purposes of diffing
	
	In a bit more detail:
	
	1) We used to support a poorly-named --sys-dir/$CHPL_SYSTEM_DIR
	capability, which pointed to the location of the compiler
	directory.  From this, we often inferred the value of CHPLHOME,
	which points to the root of the chapel directory structure,
	and which we set in our environment for other reasons.  Got
	rid of the "system directory" capability and now use CHPLHOME
	as the single location that needs to be defined from which
	other locations are found.
	
	2) These flags didn't seem to serve any purpose any longer.
	
	3) The files here are out-of-date, related to low-level codegen
	(which doesn't exist anymore) and using valgrind with BoehmGC
	(which we don't do anymore).  The routine mentioned was simply
	buggy through-and-through and didn't serve a clear purpose.
	
	4) chplhome is set by default to the location of the compiler
	with ../../ appended, so the help tests were failing because
	the output was dependent on where the tests were run.  Set
	chplhome explicitly on the command line to get around this
	problem.

Modified files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/include/: driver.h files.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/test/: start_test 
	chapel/test/compflags/bradc/help/: develhelp.compopts 
	                                   develhelp.good develhelp.txt 
	                                   userhelp.compopts 
	                                   userhelp.good userhelp.txt 
	chapel/test/flowanalysis/newast/: COMPOPTS 
Added files:
	chapel/test/compflags/bradc/help/: .cvsignore 
Removed files:
	chapel/compiler/etc/: c_runtime.h valgrind.suppressions 
	chapel/test/functions/jplevyak/: 
	                                 zeroarity-bound-error-1.compopts 

---------------------------------------------------------------------------

11/07/06 14:04:09 -- bradc

Log message:
	This change places the compiler into the directory:
	
	     chapel/bin/$platform/
	
	rather than
	
	     chapel/compiler/$platform/
	
	as was done previously.  It also changes the test
	scripts to refer to this new location by default.
	A copy of the compiler is also left in:
	
	     chapel/compiler/
	
	as before.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
	chapel/test/: paratest.client.pl paratest.server.pl start_test 

---------------------------------------------------------------------------

11/07/06 15:17:34 -- deitz

Log message:
	Added subsection titled Forall Expressions to this section with label
	that I reference in the Expressions sections.

Modified files:
	chapel/spec/: Parallelism_and_Synchronization.tex 

---------------------------------------------------------------------------

11/07/06 16:37:09 -- deitz

Log message:
	Finished first pass of Expressions section.
	
	Inserted \cleardoublepage commands between sections so that each
	section starts on an odd page.
	
	Some other minor fixes/changes.

Modified files:
	chapel/spec/: Expressions.tex Functions.tex 
	              Lexical_Structure.tex Records.tex Sequences.tex 
	              Statements.tex Variables.tex chapel_listing.tex 
	              spec.tex syntax_listing.tex 

---------------------------------------------------------------------------

11/07/06 17:02:04 -- bradc

Log message:
	Added sample dot-files for users to refer to when
	setting up their Chapel environment.

Added files:
	chapel/etc/dotFiles/: dot_bashrc dot_cshrc 

---------------------------------------------------------------------------

11/07/06 17:15:29 -- bradc

Log message:
	Enabled "default" and "all" make targets for the
	top-level Makefile.  Now that we no longer have
	a third-party directory, the main reasons that I
	disabled these rules (namely, the fact that the
	third-party directory always rebuilt itself) are
	gone.  This will also make things clearer for the
	users.
	
	All existing targets remain, for those of us whose
	brains have rewired themselves to always make comprt.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

11/07/06 17:58:23 -- bradc

Log message:
	Started authoring some READMEs for the release.

Added files:
	./: README 
	chapel/doc/: README.building 

---------------------------------------------------------------------------

11/07/06 18:04:10 -- bradc

Log message:
	Updated gen_release script to grab README files
	and etc/dotFiles directory and contents.

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/07/06 18:29:29 -- bradc

Log message:
	Initial stab at a README on using the Chapel compiler.

Modified files:
	./: README 
	chapel/util/: gen_release 
Added files:
	chapel/doc/: README.compiling 

---------------------------------------------------------------------------

11/07/06 23:09:52 -- marybeth

Log message:
	Checking in some sections for Language Overview.  Since I grabbed
	some text from Brad's hpcc paper, I included some of his environment
	definitions.

Modified files:
	chapel/spec/: Language_Overview.tex spec.tex chapel_listing.tex 

---------------------------------------------------------------------------

11/07/06 23:13:40 -- marybeth

Log message:
	Fixed a typo in the table in the Language Overview section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/08/06 09:28:43 -- deitz

Log message:
	Fixed all Section references to use \rsec.

Modified files:
	chapel/spec/: Modules.tex Parallelism_and_Synchronization.tex 
	              Statements.tex Types.tex 

---------------------------------------------------------------------------

11/08/06 10:34:26 -- deitz

Log message:
	Finished first pass of Modules section.

Modified files:
	chapel/spec/: Modules.tex Statements.tex 

---------------------------------------------------------------------------

11/08/06 11:26:07 -- bradc

Log message:
	Moved all HPCC example codes into a subdirectory of
	the release examples directory (I don't think all
	release examples need to go into subdirectories, but
	there are enough helper files and such for HPCC --
	and they will be a publicly-documented suite of
	codes -- that I thought it made sense in this instance).
	
	Removed all candidate versions of the HPCC benchmarks,
	made sure that the top-level versions matched those
	in the paper line by line (thanks to Steve's diffLatexCode
	script), and renamed the published versions using hpcc06
	in their names.
	
	Moved the sclc script (the HPCS team's script for language-
	independent line (and token?) counting) into the util directory.

Modified files:
	papers/hpcc06/: probsize-code.tex 
	chapel/test/studies/hpcc/RA/: ra-randstream.chpl 
	chapel/test/studies/hpcc/common/: probSize.chpl 
Added files:
	chapel/test/release/examples/hpcc06/: .cvsignore fft-mta.chpl 
	                                      fft-mta.compopts 
	                                      fft-mta.execopts 
	                                      fft-mta.good fft.chpl 
	                                      fft.compopts fft.execopts 
	                                      fft.good probSize.chpl 
	                                      probSize.notest 
	                                      ra-randstream.chpl 
	                                      ra-randstream.notest 
	                                      ra.chpl ra.compopts 
	                                      ra.execopts ra.good 
	                                      stream.chpl 
	                                      stream.compopts 
	                                      stream.execopts 
	                                      stream.good 
	chapel/test/studies/hpcc/FFT/: fft-hpcc06-mta.chpl 
	                               fft-hpcc06-mta.compopts 
	                               fft-hpcc06-mta.execopts 
	                               fft-hpcc06-mta.good 
	                               fft-hpcc06.chpl 
	                               fft-hpcc06.compopts 
	                               fft-hpcc06.execopts 
	                               fft-hpcc06.good 
	chapel/test/studies/hpcc/RA/: ra-hpcc06.chpl ra-hpcc06.compopts 
	                              ra-hpcc06.execopts ra-hpcc06.good 
	chapel/test/studies/hpcc/STREAMS/: stream-hpcc06.chpl 
	                                   stream-hpcc06.compopts 
	                                   stream-hpcc06.execopts 
	                                   stream-hpcc06.good 
	chapel/util/: sclc.pl 
Removed files:
	chapel/test/studies/hpcc/: sclc.pl 
	chapel/test/studies/hpcc/FFT/: fft-candidate-sm.chpl 
	                               fft-candidate-sm.compopts 
	                               fft-candidate-sm.execopts 
	                               fft-candidate-sm.good 
	                               fft-candidate.chpl 
	                               fft-candidate.compopts 
	                               fft-candidate.execopts 
	                               fft-candidate.good 
	chapel/test/studies/hpcc/RA/: ra-candidate.chpl 
	                              ra-candidate.compopts 
	                              ra-candidate.execopts 
	                              ra-candidate.good ra.chpl ra.good 
	chapel/test/studies/hpcc/STREAMS/: stream-candidate.chpl 
	                                   stream-candidate.compopts 
	                                   stream-candidate.execopts 
	                                   stream-candidate.good 
	                                   stream.chpl stream.good 

---------------------------------------------------------------------------

11/08/06 11:33:46 -- deitz

Log message:
	Made "index(Domain)" useable in an expression context.  This has to do
	with a problem parsing types.  This needs to be revisited so we can
	parse things like
	
	  var s: Stack((int, int));
	
	Since here (int, int) is used in the context of an expression.  This
	is already captured as a future.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

11/08/06 11:36:00 -- deitz

Log message:
	Added example GenericStack that is an example program showing
	implementation and use of a generic stack class.

Added files:
	chapel/test/release/examples/: GenericStack.chpl 
	                               GenericStack.good 

---------------------------------------------------------------------------

11/08/06 11:49:58 -- marybeth

Log message:
	Made modifications to Language Overview that were suggested by Steve.
	Got rid of syntax diagrams and added a few examples.  I inlined the table
	and examples, rather than using the table and example environment.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/08/06 12:04:52 -- bradc

Log message:
	Added an initial README directory to the examples directory
	and renamed Steve's files to use an initial lowercase letter
	(with his blessing).

Added files:
	chapel/test/release/examples/: README genericStack.chpl 
	                               genericStack.good 
Removed files:
	chapel/test/release/examples/: GenericStack.chpl 
	                               GenericStack.good 

---------------------------------------------------------------------------

11/08/06 12:59:20 -- deitz

Log message:
	Removed a thinko in a printf in which an argument was passed even though it was ignored.  Mac gcc issues a warning.

Modified files:
	chapel/compiler/AST/: view.cpp 

---------------------------------------------------------------------------

11/08/06 13:25:56 -- deitz

Log message:
	Removed --scalar-promotion flag.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

11/08/06 13:30:55 -- deitz

Log message:
	Fixed two more warnings on the Mac.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

11/08/06 13:32:24 -- bradc

Log message:
	Updated help message for release.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

11/08/06 13:32:53 -- bradc

Log message:
	Updated gen_release script to create examples
	directory.

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/08/06 13:50:25 -- deitz

Log message:
	Renamed --no-scalar-replacement to --scalar-replace so it is no longer inverted.

Modified files:
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

11/08/06 14:36:02 -- deitz

Log message:
	Finished first pass of Organization section.

Modified files:
	chapel/spec/: Organization.tex Scope.tex 

---------------------------------------------------------------------------

11/08/06 15:06:17 -- deitz

Log message:
	Made spacing between section numbers and section titles in table of contents bigger so that spaces actually appear when subsection numbers are high.

Modified files:
	chapel/spec/: spec.tex 

---------------------------------------------------------------------------

11/08/06 15:10:54 -- deitz

Log message:
	Caught ToC indents up to ToC number spacing change.

Modified files:
	chapel/spec/: spec.tex 

---------------------------------------------------------------------------

11/08/06 16:20:50 -- deitz

Log message:
	Finished first pass write-up of Tuples section.

Modified files:
	chapel/spec/: Tuples.tex Variables.tex 

---------------------------------------------------------------------------

11/08/06 17:07:41 -- deitz

Log message:
	Finished first pass write-up of Iterators section.

Modified files:
	chapel/spec/: Iterators.tex 

---------------------------------------------------------------------------

11/08/06 17:21:05 -- bradc

Log message:
	Added a CONTRIBUTORS file for the release.

Modified files:
	chapel/util/: gen_release 
Added files:
	./: CONTRIBUTORS 

---------------------------------------------------------------------------

11/08/06 18:01:49 -- bradc

Log message:
	Continued fiddling with READMEs.

Modified files:
	./: README 
	chapel/doc/: README.building README.compiling 

---------------------------------------------------------------------------

11/08/06 18:29:59 -- waynew

Log message:
	Check point.  Some more edits on parallel section.
	
	Moved array assignment section to domain/array section.

Modified files:
	chapel/spec/: Domains_and_Arrays.tex 
	              Parallelism_and_Synchronization.tex 

---------------------------------------------------------------------------

11/09/06 09:06:08 -- bradc

Log message:
	Next pass on cleaning up the compiler help message.

Modified files:
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/test/compflags/bradc/help/: .cvsignore develhelp.txt 
	                                   userhelp.txt 
Removed files:
	chapel/test/compflags/bradc/help/: develhelp.good userhelp.good 

---------------------------------------------------------------------------

11/09/06 13:52:39 -- deitz

Log message:
	Started first pass over Classes section.

Modified files:
	chapel/spec/: Classes.tex 

---------------------------------------------------------------------------

11/09/06 15:31:43 -- deitz

Log message:
	Finished first pass of Notation section.

Modified files:
	chapel/spec/: Expressions.tex Notation.tex 

---------------------------------------------------------------------------

11/09/06 15:53:29 -- deitz

Log message:
	Updated Notation section (meant to fix this before my last checkin).

Modified files:
	chapel/spec/: Notation.tex 

---------------------------------------------------------------------------

11/09/06 16:36:16 -- bradc

Log message:
	Took pass through overview and updated FFT codes
	to use the distributed domain describing the
	problem size rather than anonymous domains that
	might have resulted on execution on a single
	locale by default.

Modified files:
	papers/hpcc06/: fft-code.tex fft-walkthrough.tex overview.tex 
	chapel/test/release/examples/hpcc06/: fft.chpl 
	chapel/test/studies/hpcc/FFT/: fft-hpcc06.chpl 

---------------------------------------------------------------------------

11/09/06 17:06:56 -- marybeth

Log message:
	Started a table in the Statements section.  Checking it in for early
	comments.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/10/06 14:56:13 -- bradc

Log message:
	Pulled some extraneous curly braces out of FFT to
	make it more consistent with the style of the other
	benchmarks.

Modified files:
	papers/hpcc06/: TODO fft-cat.tex fft-code.tex 
	                fft-walkthrough.tex overview.tex results.tex 
	chapel/test/release/examples/hpcc06/: fft.chpl 
	chapel/test/studies/hpcc/FFT/: fft-hpcc06.chpl 

---------------------------------------------------------------------------

11/10/06 17:31:56 -- bradc

Log message:
	Another small cleanup to FFT -- using *= rather than
	x = x * ...

Modified files:
	papers/hpcc06/: fft-cat.tex fft-code.tex overview.tex 
	chapel/test/release/examples/hpcc06/: fft.chpl 
	chapel/test/studies/hpcc/FFT/: fft-hpcc06.chpl 

---------------------------------------------------------------------------

11/10/06 18:23:02 -- marybeth

Log message:
	Added table of statement examples.  Each example is a Chapel code that
	can be compiled and run.  I made tests of each example and put them
	in test/spec/marybeth.

Modified files:
	chapel/spec/: Language_Overview.tex 
Added files:
	chapel/test/spec/marybeth/: assign.chpl block.chpl cond.chpl 
	                            expstmt.chpl for.chpl 
	                            modulesexample.chpl select.chpl 
	                            typeselect.chpl use.chpl while.chpl 
	                            assign.good block.good cond.good 
	                            expstmt.good for.good 
	                            modulesexample.good select.good 
	                            typeselect.good use.good while.good 

---------------------------------------------------------------------------

11/10/06 18:33:19 -- marybeth

Log message:
	Added comments to each example code, indicating the name of the test
	file.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/10/06 22:34:37 -- marybeth

Log message:
	Added string to list of keywords in chapel_listing.tex.
	
	If there is a reason that string should not be a keyword,
	you can change it back.

Modified files:
	chapel/spec/: chapel_listing.tex 

---------------------------------------------------------------------------

11/11/06 13:07:25 -- marybeth

Log message:
	Deleted unnecessary casts.

Modified files:
	chapel/test/spec/marybeth/: for.chpl select.chpl 

---------------------------------------------------------------------------

11/13/06 11:14:41 -- deitz

Log message:
	Finished first pass over Generic Functions.

Modified files:
	chapel/spec/: Generics.tex 

---------------------------------------------------------------------------

11/13/06 14:09:18 -- deitz

Log message:
	Finished first pass of Generics section.

Modified files:
	chapel/spec/: Generics.tex Types.tex 

---------------------------------------------------------------------------

11/13/06 17:53:10 -- marybeth

Log message:
	Update to Language_Overview section.  I added more examples, changed
	the type table and added more text.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/13/06 17:55:49 -- marybeth

Log message:
	Added test examples for Expressions.

Added files:
	chapel/test/spec/marybeth/: let.chpl let.good query.chpl 
	                            query.good condexp.chpl condexp.good 
	                            casts.chpl casts.good 

---------------------------------------------------------------------------

11/14/06 07:29:22 -- marybeth

Log message:
	Creating two futures - one with the select statement and one with casts.

Added files:
	chapel/test/trivial/marybeth/: casts1.chpl casts1.future 
	                               casts1.good select1.chpl 
	                               select1.future select1.good 

---------------------------------------------------------------------------

11/14/06 08:43:24 -- deitz

Log message:
	Added index terms for the sections I wrote except for Iterators and Generics.

Modified files:
	chapel/spec/: Conversions.tex Expressions.tex Functions.tex 
	              Lexical_Structure.tex Modules.tex Sequences.tex 
	              Statements.tex Tuples.tex Types.tex Variables.tex 

---------------------------------------------------------------------------

11/14/06 10:20:40 -- deitz

Log message:
	Removed a few warnings encountered with the new g++ compiler.

Modified files:
	chapel/compiler/include/: alist.h stmt.h 

---------------------------------------------------------------------------

11/14/06 11:11:23 -- deitz

Log message:
	Added index terms for Generics and Iterators.  Fixed generic stack
	example in spec (included directly).

Modified files:
	chapel/spec/: Functions.tex Generics.tex Iterators.tex 

---------------------------------------------------------------------------

11/14/06 11:17:16 -- deitz

Log message:
	Fixed a minor bug in which the 'otherwise' clause of all select
	statements was ignored.  Removed a .future.

Modified files:
	chapel/compiler/AST/: build.cpp 
Removed files:
	chapel/test/trivial/marybeth/: select1.future 

---------------------------------------------------------------------------

11/14/06 12:32:51 -- marybeth

Log message:
	Checking in more text to the Domains and Arrays section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/14/06 13:12:11 -- deitz

Log message:
	Updated .good and removed .future on working test.

Modified files:
	chapel/test/trivial/marybeth/: casts1.good 
Removed files:
	chapel/test/trivial/marybeth/: casts1.future 

---------------------------------------------------------------------------

11/14/06 14:28:46 -- marybeth

Log message:
	Correcting two test failures.  I updated let.good to match the current
	version of let.chpl.  I changed the output of use.chpl so that it's not a
	varying value.  I also changed use.chpl to call elapsed() instead of
	referencing accumulated directly.

Modified files:
	chapel/test/spec/marybeth/: use.chpl use.good let.good 

---------------------------------------------------------------------------

11/14/06 14:33:02 -- waynew

Log message:
	Test for dynamic dispatch brought up by the indefinite domain implementation.
	This checks that we can handle complex formal argument types with our
	signature check for dynamic dispatch. We need to resolve formals before
	the final signature check for dynamic dispatch addition.
	
	A fix is about to be checked in by Steve.  Temporary .future here.

Added files:
	chapel/test/classes/waynew/: dyndis2.chpl dyndis2.good 
	                             dyndis2.future 

---------------------------------------------------------------------------

11/14/06 14:57:13 -- deitz

Log message:
	This checkin fixes a bug associated with a test case that Wayne is
	checking in shortly or has already checked in.  This checkin
	represents work done by both Wayne and I.
	
	Fixed a bug in which dynamic dispatch failed to work on a method in a
	subclass if the method defined a formal argument that had a
	complicated type expression (e.g. seq(int)) because the signature
	match function was being applied too early.  This fix moves the
	application of the signature match check after instantiation of the
	subclass method so that the formal arguments can be resolved.  This
	leads to the possibility of more over-instantiation since we may
	instantiate a subclass method even if the function does not match
	fully.  A new method possible_signature_match is defined to try to
	reduce the amount of over-instantiation and make sure that valid
	substitutions can be found for the instantiation.
	
	This bug fix is required for work on growing and shrinking indefinite
	domains.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/spec/: Locality_and_Distribution.tex 

---------------------------------------------------------------------------

11/14/06 15:37:13 -- deitz

Log message:
	Finished first pass over Locality and Distribution section.

Modified files:
	chapel/spec/: Locality_and_Distribution.tex 

---------------------------------------------------------------------------

11/14/06 15:40:52 -- deitz

Log message:
	Removed .future.

Removed files:
	chapel/test/classes/waynew/: dyndis2.future 

---------------------------------------------------------------------------

11/14/06 16:06:35 -- deitz

Log message:
	Finished first pass over Acknowledgments section.  Made a few small
	changes to Classes section.

Modified files:
	chapel/spec/: Acknowledgments.tex Classes.tex 

---------------------------------------------------------------------------

11/14/06 17:02:33 -- waynew

Log message:
	Correction to hand generated .good file.

Modified files:
	chapel/test/classes/waynew/: dyndis2.good 

---------------------------------------------------------------------------

11/14/06 18:17:31 -- marybeth

Log message:
	Using longtable package to produce tables that span multiple pages.
	This package will repeat the table headers at the top of continued
	table on each page.
	
	I updated the tables in the language overview to use this the longtable
	environment offered in the longtable package.  The statement and expression
	examples tables now break between pages automatically.

Modified files:
	chapel/spec/: spec.tex Language_Overview.tex 

---------------------------------------------------------------------------

11/15/06 11:30:24 -- deitz

Log message:
	Checkpoint on Domains and Arrays section.

Modified files:
	chapel/spec/: Domains_and_Arrays.tex Functions.tex 

---------------------------------------------------------------------------

11/15/06 11:44:12 -- deitz

Log message:
	Add iterator future for test to pre-order iterate over a tree.

Added files:
	chapel/test/functions/deitz/iterators/: tree.future tree.good 
	                                        tree.chpl 

---------------------------------------------------------------------------

11/15/06 11:56:50 -- waynew

Log message:
	1. Implementation for
	   - indefinite domain array assignment
	   - indefinite domain assignment
	   - remapping of indef. dom arrays when the domain is doubled or halved
	     which can occur with domain index additions/deletions or domain
	     assignment. This was enabled by the dyn. dispatch fix Steve checked
	     in yesterday.
	
	2. Some tests.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	                          _chpl_indefinite.chpl 
Added files:
	chapel/test/domains/indefinite/waynew/: indef8-fail2.chpl 
	                                        indef8-fail2.good 
	                                        indef8.chpl indef8.good 
	                                        indef9.chpl indef9.good 
	                                        indef9a.chpl 
	                                        indef9a.good 

---------------------------------------------------------------------------

11/15/06 13:40:11 -- waynew

Log message:
	Test to capture why an array of sync/single vars does not current work.
	
	From sarray.future:
	The error here is that internal routines are coercing the synchronizing
	variable to its base type when they should be using the synchronizing
	variable type itself.  A fix would be to mark internal functions with
	pragmas such that calls within them do not coerce their sync var arguments
	because:
	 - the called function has been marked
	 - or the callee function has been marked

Added files:
	chapel/test/parallel/single/waynew/: sarray.chpl sarray.future 
	                                     sarray.good 

---------------------------------------------------------------------------

11/15/06 13:43:13 -- waynew

Log message:
	Typo in the description, "callee" -> "calling".

Modified files:
	chapel/test/parallel/single/waynew/: sarray.future 

---------------------------------------------------------------------------

11/15/06 14:51:30 -- deitz

Log message:
	More work on Arrays and Domains section, almost through arithmetic arrays part.

Modified files:
	chapel/spec/: Domains_and_Arrays.tex chapel_listing.tex 
	              syntax_listing.tex 

---------------------------------------------------------------------------

11/15/06 15:02:29 -- deitz

Log message:
	Changed stub remark for internal release.

Modified files:
	chapel/spec/: Classes.tex Domains_and_Arrays.tex 
	              Input_and_Output.tex Records.tex 
	              Reductions_and_Scans.tex Standard_Modules.tex 
	              Unions.tex 

---------------------------------------------------------------------------

11/15/06 22:36:48 -- marybeth

Log message:
	Cleaning up conditional example.

Modified files:
	chapel/test/spec/marybeth/: cond.chpl 

---------------------------------------------------------------------------

11/15/06 22:39:56 -- marybeth

Log message:
	Adding tests for sequence and iterator examples included in spec.

Added files:
	chapel/test/spec/marybeth/: seq.chpl seq.good seq2.chpl 
	                            seq2.good iterator.chpl 
	                            iterator.good 

---------------------------------------------------------------------------

11/15/06 22:43:13 -- marybeth

Log message:
	Updates to language overview:
	
	- Divided up some sections.
	- Added text and examples to sequence and iterator sections.
	- Cleaned up beginning.  This text is now just a placeholder.  It needs
	  improvement.
	- I addressed some of Steve's comments.
	- I deleted part of the statement and expression examples.  They are no
	long entire programs.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/16/06 09:10:13 -- waynew

Log message:
	- Checkpoint for parallel/sync section.
	- Minor fix for int(16) range in type section.
	- Added synchronization-type for variable declaration.

Modified files:
	chapel/spec/: Types.tex Variables.tex 
	              Parallelism_and_Synchronization.tex 

---------------------------------------------------------------------------

11/16/06 12:57:57 -- marybeth

Log message:
	Updated sequence example so that insertion sort doesn't use a temporary array.

Modified files:
	chapel/test/spec/marybeth/: seq.chpl 

---------------------------------------------------------------------------

11/16/06 14:54:09 -- waynew

Log message:
	Added a simple binary tree example using cobegin to construct and walk it
	in parallel.

Modified files:
	chapel/test/release/examples/: README 
Added files:
	chapel/test/release/examples/: tree_construct.chpl 
	                               tree_construct.good 

---------------------------------------------------------------------------

11/16/06 15:43:09 -- bradc

Log message:
	Two variations on the stream benchmark that I created
	while trying to get timings that didn't have memory
	leaks.  stream-nopromote uses:
	
	        [i in ProbSpace] A(i) = B(i) + alpha * C(i);
	
	and works and runs in a few seconds.  stream-slice.chpl
	uses:
	
	        A(ProbSpace) = B(ProbSpace) + alpha * C(ProbSpace);
	
	and gets the wrong answer for some reason... I haven't
	been able to figure it out yet, so am putting it in as
	a future for now.

Added files:
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-nopromote.chpl 
	                                         stream-nopromote.compopts 
	                                         stream-nopromote.execopts 
	                                         stream-nopromote.good 
	                                         stream-slice.chpl 
	                                         stream-slice.compopts 
	                                         stream-slice.execopts 
	                                         stream-slice.future 
	                                         stream-slice.good 

---------------------------------------------------------------------------

11/16/06 15:46:29 -- marybeth

Log message:
	Another update to the sequence example.

Modified files:
	chapel/test/spec/marybeth/: seq.chpl 

---------------------------------------------------------------------------

11/16/06 15:46:46 -- deitz

Log message:
	Improved iterator transform to handle iterators that do not specify a
	return type.
	
	Minor modification to function resolution so that when trying to
	figure out only the return type of a function, it does not resolve a
	function if the function's return type is known.
	
	Fixed view to only show the return type of functions, not the unused
	type field as well.

Modified files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

11/16/06 15:48:31 -- deitz

Log message:
	Added working sequence test.

Added files:
	chapel/test/types/seq/deitz/: test_seq10.chpl test_seq10.good 

---------------------------------------------------------------------------

11/16/06 15:50:46 -- bradc

Log message:
	Final versions of FFT that were in our paper.

Modified files:
	chapel/test/release/examples/hpcc06/: fft-mta.chpl fft.chpl 
	chapel/test/studies/hpcc/FFT/: fft-hpcc06-mta.chpl 
	                               fft-hpcc06.chpl 

---------------------------------------------------------------------------

11/16/06 15:55:00 -- deitz

Log message:
	Added a new .future that tests our implementation of iterators to make
	sure we don't create sequences in a loop (we currently do) and to make
	sure that we don't actually execute the iterator to determine its type
	(we currently do).

Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_side_effect.chpl 
	                                        test_iterator_side_effect.future 
	                                        test_iterator_side_effect.good 

---------------------------------------------------------------------------

11/16/06 16:07:45 -- bradc

Log message:
	Put a "quick start" approach to the release in the top-level
	README as requested by Steve.  Steve, if you could review
	this and see if it meets your goals, that would be great.

Modified files:
	./: README 

---------------------------------------------------------------------------

11/16/06 16:08:16 -- waynew

Log message:
	Bug fix to prevent inserting _to_seq in the following call:
	 - _copy
	 - _init

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

11/16/06 16:23:17 -- marybeth

Log message:
	Adding another version of the sequence example, as suggested by Brad.
	It currently isn't as clean as it should be.  I'll check in another test
	to capture what isn't working properly.
	
	This test does work properly.

Added files:
	chapel/test/spec/marybeth/: seq3.chpl seq3.good 

---------------------------------------------------------------------------

11/16/06 16:28:52 -- marybeth

Log message:
	Adding a failing test with concatenation of partial sequences that
	indexed with variable arithmetic sequences.

Added files:
	chapel/test/spec/marybeth/: seq4.chpl seq4.future seq4.good 

---------------------------------------------------------------------------

11/16/06 16:45:06 -- bradc

Log message:
	Updated READMEs on building and compiling the
	compiler.

Modified files:
	chapel/doc/: README.building README.compiling 

---------------------------------------------------------------------------

11/16/06 16:47:50 -- bradc

Log message:
	Made a new doc/release directory to contain documents
	that should be in the doc/ directory of the release
	and moved the two READMEs into it.

Added files:
	chapel/doc/release/: README.building README.compiling 
Removed files:
	chapel/doc/: README.building README.compiling 

---------------------------------------------------------------------------

11/16/06 17:04:55 -- marybeth

Log message:
	Updates to language overview:
	
	- Updated example in sequences section.  Added new simple example to
	  show more of sequence syntax.
	- I updated the Arrays and Domains section.  I added a simple example
	  to introduce the section.  More is to be done here.  A good motivating
	  example will be added next week.
	- I reorganized the sections slightly.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/16/06 17:10:19 -- waynew

Log message:
	Added a producer-consumer example using a sync(hronization) variable.
	
	Minor style changes to match the others.

Modified files:
	chapel/test/release/examples/: README tree_construct.chpl 
Added files:
	chapel/test/release/examples/: prod-cons.chpl prod-cons.good 

---------------------------------------------------------------------------

11/16/06 17:15:17 -- bradc

Log message:
	Changed gen_release to make doc/release directory
	into doc/ directory for the release.

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/16/06 17:58:07 -- bradc

Log message:
	Added a README.files to the top-level directory which defines the
	overall directory structure and top-level files.
	
	Added a README to the doc/release directory to describe what the
	docs in the release are.  Added our HPCC report.
	
	Modified the gen_release script to grab these things.

Modified files:
	./: README 
	chapel/util/: gen_release 
Added files:
	./: README.files 
	chapel/doc/release/: README hpcc06.pdf 

---------------------------------------------------------------------------

11/16/06 18:03:36 -- bradc

Log message:
	copied timedexec script for tests to release

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/17/06 09:42:40 -- bradc

Log message:
	Mary Beth pointed out that I had forgotten to
	check in my hello world example.

Added files:
	chapel/test/release/examples/: hello.chpl hello.good 

---------------------------------------------------------------------------

11/17/06 09:44:49 -- bradc

Log message:
	Oops -- forgot to add hello.chpl to the README.

Modified files:
	chapel/test/release/examples/: README 

---------------------------------------------------------------------------

11/17/06 10:17:19 -- bradc

Log message:
	Simplified hello, world example as requested.

Modified files:
	chapel/test/release/examples/: hello.chpl 

---------------------------------------------------------------------------

11/17/06 11:11:35 -- deitz

Log message:
	Removed two working .futures.

Removed files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_side_effect.future 
	chapel/test/functions/iterators/bradc/: 
	                                        iteratorInferReturn.future 

---------------------------------------------------------------------------

11/17/06 11:20:31 -- deitz

Log message:
	Added a working iterator test and an iterator future with the to_seq function.

Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_side_effect2.chpl 
	                                        test_iterator_side_effect2.good 
	                                        test_iterator_side_effect3.chpl 
	                                        test_iterator_side_effect3.future 
	                                        test_iterator_side_effect3.good 

---------------------------------------------------------------------------

11/17/06 13:37:56 -- deitz

Log message:
	Fixed a bug in which a forall expression that iterated over an empty
	iterator returned an uninitialized sequence.
	
	Removed a .future.

Modified files:
	chapel/compiler/AST/: build.cpp 
Removed files:
	chapel/test/spec/marybeth/: seq4.future 

---------------------------------------------------------------------------

11/17/06 13:47:09 -- deitz

Log message:
	Fixed up and cleaned up insertion sort example slightly.

Modified files:
	chapel/spec/: Language_Overview.tex 
	chapel/test/spec/marybeth/: seq4.chpl 

---------------------------------------------------------------------------

11/17/06 14:07:36 -- deitz

Log message:
	Changed Spec version to 0.6.0 and labeled it a draft for the internal
	release.  For the external release, we should be able to bump this to
	0.6.1 and not label it as a draft.
	
	Added a copy of spec.pdf to doc/release and updated the README in this
	directory.

Modified files:
	chapel/doc/release/: README 
	chapel/spec/: spec.tex 
Added files:
	chapel/doc/release/: spec.pdf 

---------------------------------------------------------------------------

11/17/06 14:09:33 -- bradc

Log message:
	Added an -examples flag to the nightly test script
	that causes it to run the tests on the release/examples
	directory only.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

11/17/06 14:17:30 -- deitz

Log message:
	Added a .future that shows a problem with a side effect in a forall expression.

Added files:
	chapel/test/functions/deitz/: test_forallexpr2.chpl 
	                              test_forallexpr2.future 
	                              test_forallexpr2.good 

---------------------------------------------------------------------------

11/17/06 14:17:37 -- bradc

Log message:
	Moved sub_* test scripts into Bin subdirectory, just to
	keep the release test directory structure cleaner.

Modified files:
	chapel/test/: start_clean start_test 
	chapel/test/release/examples/: README 
	chapel/util/: gen_release 
Added files:
	chapel/test/Bin/: sub_clean sub_test 
Removed files:
	chapel/test/: sub_clean sub_test 

---------------------------------------------------------------------------

11/17/06 14:39:26 -- bradc

Log message:
	README updates.

Modified files:
	./: README 
	chapel/doc/release/: README 

---------------------------------------------------------------------------

11/17/06 15:04:16 -- bradc

Log message:
	Makefile changes:
	
	* Stopped copying the built compiler back into the
	  compiler/ directory.
	
	* Built runtime libraries into lib/$(CHPL_PLATFORM)/
	  rather than runtime/src/$(CHPL_PLATFORM)/
	
	* Made top-level clobber rule blow away bin and
	  lib subdirectories.

Modified files:
	./: Makefile 
	chapel/compiler/: Makefile 
	chapel/doc/release/: README.building 
	chapel/make/: Makefile.base 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/src/: Makefile 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

11/17/06 15:16:49 -- bradc

Log message:
	Renamed the environment variable CHPLHOME to CHPL_HOME.
	Make sure to update any dot-files you use to set up your
	Chapel environment!!

Modified files:
	./: README README.files 
	chapel/compiler/main/: driver.cpp 
	chapel/doc/release/: README.building 
	chapel/etc/dotFiles/: dot_bashrc dot_cshrc 
	chapel/test/: paratest.server.pl start_test 
	chapel/test/Bin/: nightly.cron nightly.debug.cron 
	                  nightly.novgr.cron 
	chapel/test/compflags/bradc/help/: develhelp.txt userhelp.txt 
	chapel/util/: gen_release lookForTabs 

---------------------------------------------------------------------------

11/17/06 15:43:12 -- deitz

Log message:
	Added a file STATUS that has a list of unimplemented features and
	bugs.  I have not added the bugs yet.

Modified files:
	./: README.files 
Added files:
	./: STATUS 

---------------------------------------------------------------------------

11/17/06 15:44:36 -- bradc

Log message:
	Added 99 bottles of beer example to the release.

Modified files:
	chapel/test/release/examples/: README 
Added files:
	chapel/test/release/examples/: .cvsignore beer.chpl beer.good 

---------------------------------------------------------------------------

11/17/06 15:53:36 -- deitz

Log message:
	Added a few more bugs to the STATUS file.

Modified files:
	./: STATUS 

---------------------------------------------------------------------------

11/17/06 16:07:05 -- waynew

Log message:
	Added scripts to set CHPL environment variables. Updated gen_release to
	include these files.

Modified files:
	chapel/util/: gen_release 
Added files:
	chapel/util/: setchplenv.bash setchplenv.csh 

---------------------------------------------------------------------------

11/17/06 16:12:05 -- deitz

Log message:
	Added STATUS file to gen_release.

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/17/06 16:21:42 -- waynew

Log message:
	Small tweak to exclude .cvsignore files for directories whose
	entire contents are included.

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/17/06 16:31:28 -- deitz

Log message:
	Added README.bugs.

Added files:
	chapel/doc/release/: README.bugs 

---------------------------------------------------------------------------

11/17/06 16:55:01 -- deitz

Log message:
	Removed DIRS.

Modified files:
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/17/06 17:01:50 -- bradc

Log message:
	Next draft of main READMEs -- added an "executing Chapel
	programs" README; updated the quickstart to use Wayne's
	scripts, moved information about setting up the Chapel
	environment into a README.chplenv.

Modified files:
	./: README 
	chapel/doc/release/: README 
Added files:
	chapel/doc/release/: README.chplenv README.executing 

---------------------------------------------------------------------------

11/17/06 17:02:28 -- waynew

Log message:
	Check if the Logs directory exists.  If not, create one.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

11/17/06 17:04:12 -- bradc

Log message:
	Added "--" to list of help options for compiler-generated
	executable.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/execflags/shannon/: help.good 
	chapel/test/execflags/shannon/configs/help/: configVar-Dash.good 
	                                             configVarDefaultValue.good 
	                                             configVarHelp.good 
	                                             configVarModStrings1.good 
	                                             configVarModStrings2.good 
	                                             configVarSetOver.good 
	                                             configVarSetTwoTypes.good 
	                                             configVarTwoModules.good 
	                                             varNameEnumQM.good 
	                                             varNameQMark.good 

---------------------------------------------------------------------------

11/17/06 17:10:38 -- bradc

Log message:
	Removed etc/dotFiles from release given Wayne's
	nice util/setchplenv.* scripts.

Modified files:
	./: README.files 
	chapel/util/: gen_release 

---------------------------------------------------------------------------

11/17/06 17:11:12 -- bradc

Log message:
	Slight mods to READMEs.

Modified files:
	./: README 
	chapel/doc/release/: README.chplenv 

---------------------------------------------------------------------------

11/17/06 17:16:18 -- bradc

Log message:
	Moved Steve's memory-related README to be called
	MEMORY to prevent it from being included in the
	release.  This can be re-architected later, but
	this was the fastest way to solve this problem.

Added files:
	chapel/compiler/: MEMORY 
Removed files:
	chapel/compiler/: README 

---------------------------------------------------------------------------

11/17/06 17:25:13 -- bradc

Log message:
	Dotting a few i's and crossing a few t's.  Ready
	for a final test before mailing the guinea pigs.

Modified files:
	./: README.files 
	chapel/doc/release/: README README.bugs 
	chapel/test/release/examples/: README 

---------------------------------------------------------------------------

11/17/06 17:28:28 -- bradc

Log message:
	Oops, had CHPL_HOME reference in quick start before
	the environment was set up.

Modified files:
	./: README 

---------------------------------------------------------------------------

11/17/06 17:31:03 -- waynew

Log message:
	Quickly added some known bugs with begin and sync vars off the top of my head.

Modified files:
	./: STATUS 

---------------------------------------------------------------------------

11/17/06 17:36:52 -- bradc

Log message:
	This is my last futzing with this file.

Modified files:
	./: README 

---------------------------------------------------------------------------

11/20/06 10:09:48 -- deitz

Log message:
	Added a new block-tag BLOCK_TYPE to indicate that the code in this
	block statement is only used to determine type information.  Such
	blocks are removed after function resolution.
	
	Used BLOCK_TYPE to rework the forall expression code so that
	side-effecting forall expression codes work correctly.
	
	Simplified some code.

Modified files:
	chapel/compiler/AST/: alist.cpp build.cpp 
	chapel/compiler/include/: alist.h build.h stmt.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

11/20/06 10:33:16 -- bradc

Log message:
	Was finding that the runtime was rebuilding
	itself with every make.  This change makes
	the lib/ directory more explicitly to try
	and avoid this problem.  It seems to work.

Modified files:
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

11/20/06 10:33:20 -- deitz

Log message:
	Finished first pass over Classes section.

Modified files:
	chapel/spec/: Classes.tex 

---------------------------------------------------------------------------

11/20/06 10:46:21 -- deitz

Log message:
	Finished first pass of Records section.

Modified files:
	chapel/spec/: Classes.tex Records.tex 

---------------------------------------------------------------------------

11/20/06 10:56:21 -- deitz

Log message:
	Finished even shakier first pass over Unions section.

Modified files:
	chapel/spec/: Unions.tex 

---------------------------------------------------------------------------

11/20/06 11:08:24 -- deitz

Log message:
	Added index entries for classes, records, and unions.

Modified files:
	chapel/spec/: Classes.tex Records.tex Unions.tex 

---------------------------------------------------------------------------

11/20/06 13:08:36 -- bradc

Log message:
	Updated copyright messages in source files to reflect
	the way John and I discussed they should look.

Modified files:
	chapel/compiler/util/: files.cpp 
	chapel/compiler/adt/: vec.cpp 
	chapel/compiler/include/: arg.h beautify.h list.h map.h vec.h 
	chapel/compiler/main/: arg.cpp 

---------------------------------------------------------------------------

11/20/06 13:13:09 -- deitz

Log message:
	Took a pass over the parallelism and synchronization section, adding
	index terms, implementation notes, and making some modest and some
	immodest changes.

Modified files:
	chapel/spec/: Parallelism_and_Synchronization.tex 

---------------------------------------------------------------------------

11/20/06 13:13:15 -- bradc

Log message:
	Oops, slight mistake -- John called his source files
	.cc files rather than .cpp in his ifa release.

Modified files:
	chapel/compiler/adt/: vec.cpp 
	chapel/compiler/main/: arg.cpp 

---------------------------------------------------------------------------

11/20/06 14:39:48 -- bradc

Log message:
	Scripts to do a test of the release: generates a release,
	unpacks it, executes the commands suggested in the top-level
	README, and runs the tests in the examples directory.
	Sends out mail indicating success or failure.
	
	Developers can use "testRelease -debug" to try this themselves,
	in which case the result is sent directly to them.  The -cron
	flag is meant for use by cron jobs and will mail the
	chapel_cronmail alias.  I set up a nightly run for linux
	machines.

Added files:
	chapel/util/: testRelease testReleaseHelp 

---------------------------------------------------------------------------

11/20/06 15:06:06 -- deitz

Log message:
	Removed a couple of functions in _chpl_file that were defined over _nilType.

Modified files:
	chapel/modules/standard/: _chpl_file.chpl 

---------------------------------------------------------------------------

11/20/06 15:32:54 -- bradc

Log message:
	Found an old reference to CHPL_SYSTEM_DIR and
	changed it to CHPL_HOME.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

11/20/06 15:33:28 -- bradc

Log message:
	Made a few mistakes when moving sub_test into
	test/Bin, which may be the cause for the new
	mallocOutOfMemory problems on chap0x.  About
	to test.

Modified files:
	chapel/test/: start_test 
	chapel/test/memory/shannon/outofmemory/: sub_test 

---------------------------------------------------------------------------

11/20/06 16:15:33 -- deitz

Log message:
	Started Input and Output section.
	
	Fixed a few bugs with handling ! in \chpl commands.
	
	Fixed a couple labels.

Modified files:
	chapel/spec/: Domains_and_Arrays.tex Expressions.tex 
	              Input_and_Output.tex Records.tex Sequences.tex 

---------------------------------------------------------------------------

11/20/06 16:41:44 -- deitz

Log message:
	Made the application of unary minus on a value of type uint(64) into a
	compiler error.  Undefined unary minus on uint(32).
	
	Reworked abs on values of uint(32) and uint(64) to return the value
	since it is always greater than zero.
	
	Added two tests of unary minus on unsigneds.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_math.chpl 
Added files:
	chapel/test/trivial/deitz/: test_negate_uint32.chpl 
	                            test_negate_uint32.good 
	                            test_negate_uint64.chpl 
	                            test_negate_uint64.good 

---------------------------------------------------------------------------

11/20/06 16:43:43 -- deitz

Log message:
	Added front-end support for on-statements.  Since there is only one
	locale, the statement has no effect.  The expression of the
	on-statement is evaluated for side effects.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_on_syntax.chpl 
	                            test_on_syntax.good 

---------------------------------------------------------------------------

11/21/06 10:50:35 -- deitz

Log message:
	Disabled !, &&, and || on int(32), int(64), uint(32), and uint(64).
	These operators are now only predefined on operands of bool type.
	
	Fixed usage errors in halt and assert where ! was applied to a value
	of int type; I changed it to compare the integer to zero.
	
	Fixed default fread over classes.
	
	Fixed a few test cases.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_file.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra.chpl 
	chapel/test/trivial/bradc/: conditional.chpl 
	chapel/test/trivial/shannon/: bitwise_ops.chpl compSampler.chpl 
	                              logical_and.chpl logical_not.chpl 

---------------------------------------------------------------------------

11/21/06 11:35:33 -- deitz

Log message:
	Reworked the implementation of && and || to use short-circuit
	evaluation, so the second operand is not evaluated if the first
	operand determines the result.  Since these can be overloaded, the
	semantics are defined as follows:
	
	  expr1 && expr2  ==>  if expr1.false? then false else expr2.true?
	  expr1 || expr2  ==>  if expr1.true? then true else expr2.true?
	
	The methods false? and true? are predefined over bool type (so && and
	|| are predefined over bool type).  The definitions are as follows:
	
	  def bool.true? return this;
	  def bool.false? return !this;
	
	To overload && and ||, the user should overload the methods false? and
	true? on the type(s) that the overloading is desired on.
	
	Since conditional expressions are not yet folded, && and || are no
	longer folded.
	
	Updated array reallocate function to use & instead of && in an
	expression that needs to be folded.
	
	Added a test.
	
	Updated the spec on logical or and logical and.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp 
	chapel/compiler/include/: build.h primitive.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	chapel/spec/: Expressions.tex 
	chapel/test/types/type_variables/deitz/part5/: where-2.chpl 
Added files:
	chapel/test/trivial/deitz/: test_shortcircuit_land_lor.chpl 
	                            test_shortcircuit_land_lor.good 

---------------------------------------------------------------------------

11/21/06 12:53:49 -- deitz

Log message:
	Reworked two "no codegen" "rename" defined functions in the modules.
	
	Simplified ridiculous implementation of exit.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/compiler/passes/: codegen.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile 
Removed files:
	chapel/runtime/include/: exit.h 
	chapel/runtime/src/: exit.c 

---------------------------------------------------------------------------

11/22/06 17:22:10 -- marybeth

Log message:
	Adding another iterator test which is used as an example in the spec.

Added files:
	chapel/test/spec/marybeth/: iterator2.chpl iterator2.good 

---------------------------------------------------------------------------

11/22/06 17:23:09 -- marybeth

Log message:
	Update to language overview.  I merged the sequences and iterators sections
	and added another iterator example.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/27/06 10:15:41 -- bradc

Log message:
	Added a test showing that if one thread exits, others
	will exit as well.

Added files:
	chapel/test/parallel/cobegin/bradc/: .cvsignore exitone.chpl 
	                                     exitone.good 

---------------------------------------------------------------------------

11/27/06 13:49:34 -- deitz

Log message:
	Changed implementation of fwrite and fread:
	
	The user can now define a method called write bound to any type.  This
	method must take an argument of file type.  Default write methods are
	created if the user does not define one.
	
	There is a method write also bound to file that can take any number of
	arguments.  The user should always write things like
	
	  f.write(x)
	
	where f is a file and x is a value that they want to write.
	
	There is also a method writeln bound to file that can take any number
	of arguments.
	
	Calls to the functions writeln and write, which can take any
	arguments, call the methods writeln and write bound to stdout.
	
	The read method is different.  The read method must always be bound to
	the file type.  It's argument is inout and can be of the type that
	should be read.  Multiple arguments can be passed to the read method
	and this is handled, currently, by the compiler.
	
	The advantage to having write methods bound to the file and bound to
	the type being written is two-fold: 1. the locking can be handled in
	the method bound to the file (thus it is good for the user to always
	call this one) and 2. we dynamically dispatch based on the class being
	written (I updated three test cases to this effect).
	
	Updated many tests.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp expr.cpp type.cpp 
	chapel/compiler/include/: build.h type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp normalize.cpp 
	                         scopeResolve.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_file.chpl _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl 
	                          _chpl_machine.chpl _chpl_seq.chpl 
	                          _chpl_sparse.chpl 
	chapel/test/arrays/deitz/: matrix.chpl 
	chapel/test/classes/bradc/: writeclass1a.chpl writerecord1a.chpl 
	chapel/test/classes/deitz/: test_record_user_write.chpl 
	chapel/test/classes/deitz/dispatch/: test_dd5.good 
	chapel/test/classes/deitz/inherit/: test_inherit4.good 
	chapel/test/demo/review_060130/: history_accumulator.chpl 
	chapel/test/trivial/deitz/demo/: sample1.chpl sample1a.chpl 
	                                 sample1b.chpl 
	chapel/test/types/file/: freadBoolean.chpl freadClass.chpl 
	                         freadComplex.chpl freadEnum.chpl 
	                         freadIntFailed.chpl freadIntFloat.chpl 
	                         freadIntUnopenedFile.chpl 
	                         freadNoFloat.chpl freadNoInt.chpl 
	                         freadNotABoolean.chpl freadString.chpl 
	                         freadToClassDataMember.chpl 
	                         fwriteIntFailed.chpl fwriteIntFile.chpl 
	                         fwriteIntStdout.chpl 
	                         fwriteIntUnopenedFile.chpl 
	                         fwriteMultipleInts.chpl 
	                         fwriteSelectStmt.chpl 
	                         fwritelnBooleanFile.chpl 
	                         fwritelnClassFile.chpl 
	                         fwritelnComplexFile.chpl 
	                         fwritelnEnumFile.chpl 
	                         fwritelnFloatFile.chpl 
	                         fwritelnIntFile.chpl 
	                         fwritelnIntFloatString.chpl 
	                         fwritelnStringFile.chpl 
	                         invalidMode.chpl 
	chapel/test/types/file/bradc/: badfile.chpl badfile2.chpl 
	                               badfile3.chpl 
	chapel/test/types/seq/deitz/: test_seq_class4.good 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation16.chpl 
	chapel/test/types/type_variables/deitz/part2/: 
	                                               test_typevar_record3.chpl 
	                                               test_typevar_record4.chpl 
	                                               test_typevar_record5.chpl 
	                                               test_typevar_record6.chpl 
	chapel/test/types/type_variables/deitz/part7/: test_stack.chpl 

---------------------------------------------------------------------------

11/27/06 14:11:54 -- deitz

Log message:
	Removed internal release draft notice from spec and bumped to 0.6.1.
	
	Rearranged Standard Modules section to how I want it.

Modified files:
	chapel/spec/: Standard_Modules.tex spec.tex 

---------------------------------------------------------------------------

11/27/06 14:32:09 -- bradc

Log message:
	Added cygwin soft-links to the .cvsignore files
	to allow cross-compiling without leaving a mess.

Modified files:
	chapel/compiler/adt/: .cvsignore 
	chapel/compiler/AST/: .cvsignore 
	chapel/compiler/backend/: .cvsignore 
	chapel/compiler/ifa/: .cvsignore 
	chapel/compiler/main/: .cvsignore 
	chapel/compiler/parser/: .cvsignore 
	chapel/compiler/passes/: .cvsignore 
	chapel/compiler/util/: .cvsignore 
	chapel/runtime/src/: .cvsignore 

---------------------------------------------------------------------------

11/27/06 14:35:28 -- marybeth

Log message:
	Changed iterator2 test, removing return type on iterator, so that
	test works with more recent versions of the compiler.

Modified files:
	chapel/test/spec/marybeth/: iterator2.chpl 

---------------------------------------------------------------------------

11/27/06 15:10:33 -- deitz

Log message:
	Finished first pass of Input and Output.

Modified files:
	chapel/spec/: Input_and_Output.tex 

---------------------------------------------------------------------------

11/27/06 15:41:26 -- bradc

Log message:
	Removing FILES files from the release, as they
	haven't been maintained and have been thwarting
	the cygwin build for some time.  If we decide
	we want to reinstate this concept, we might
	use README.files, as we do in the top-level
	directory of the release.

Removed files:
	chapel/compiler/adt/: FILES 
	chapel/compiler/backend/: FILES 
	chapel/compiler/main/: FILES 
	chapel/compiler/util/: FILES 

---------------------------------------------------------------------------

11/27/06 15:45:10 -- deitz

Log message:
	Finished first pass on Reductions and Scans.

Modified files:
	chapel/spec/: Reductions_and_Scans.tex 

---------------------------------------------------------------------------

11/27/06 16:47:45 -- deitz

Log message:
	Fixed a bug (caught by Brad's 20-20) in which the comment delimiter
	was italicized when it shouldn't have been in the explanation of
	comments.

Modified files:
	chapel/spec/: Lexical_Structure.tex 

---------------------------------------------------------------------------

11/27/06 17:25:50 -- bradc

Log message:
	Took a housecleaning pass over the Makefile
	structure in order to make things more
	sane going forward and to simplify the
	release's build steps:
	
	- made a bunch of the -Wall -Werror flags that we throw
	  only get turn on when CHPL_DEVELOPER is true to avoid
	  having these break the build of a user with a different
	  version of gcc/g++.
	
	- made runtime/etc/Makefile.include include the general
	  Makefile.$(CHPL_PLATFORM) file in order to support the
	  ability to specify platform-specific Makefiles
	
	- split CFLAGS into those for the compiler, runtime, and
	  generated code (COMP_CFLAGS, RUNTIME_CFLAGS, GEN_CFLAGS)
	  to avoid confusion about which are which.
	
	- took hard-coded flags and compilers out of the runtime
	  Makefiles
	
	- removed dead Makefile variables and libraries
	
	- reworked depend rule for compiler directory to avoid
	  building a useless directory

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/backend/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: Makefile 
	chapel/compiler/util/: Makefile 
	chapel/make/: Makefile.cygwin Makefile.gnu Makefile.linux 
	              Makefile.linux64 Makefile.linux64_32 
	              Makefile.sunos 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/src/: Makefile 
Added files:
	chapel/compiler/make/: Makefile.compiler.commonrules 
	                       Makefile.compiler.rules 
Removed files:
	chapel/runtime/etc/: Makefile.macros 

---------------------------------------------------------------------------

11/27/06 18:22:16 -- bradc

Log message:
	Updated the RA test in the examples directory to
	remove explicit iterator return types.
	
	Added an ra-latest.chpl to the studies/hpcc
	directory with the same modification, intending
	hpcc06 to remain a snapshot of what we submitted
	to the competition.
	
	Added a README to the hpcc06 directory, as well as
	a Makefile that builds these examples since they
	are a bit more complicated than the rest of the
	examples.

Modified files:
	chapel/test/release/examples/: README 
	chapel/test/release/examples/hpcc06/: ra-randstream.chpl 
	chapel/test/studies/hpcc/RA/: ra-hpcc06.compopts 
	                              ra-randstream.chpl 
Added files:
	chapel/test/release/examples/hpcc06/: Makefile README 
	chapel/test/studies/hpcc/RA/: ra-latest.chpl ra-latest.compopts 
	                              ra-latest.execopts ra-latest.good 
	                              ra-randstream-hpcc06.chpl 

---------------------------------------------------------------------------

11/28/06 10:17:05 -- bradc

Log message:
	Oops -- forgot to duplicate the notest file when I
	duplicated the randstream file last night.

Added files:
	chapel/test/studies/hpcc/RA/: ra-randstream-hpcc06.notest 

---------------------------------------------------------------------------

11/28/06 11:02:53 -- bradc

Log message:
	Added test that prints the min..max range of all scalar
	numeric types, because I'm always trying to remember what
	these values are.

Added files:
	chapel/test/types/scalar/bradc/: minmax.chpl minmax.good 

---------------------------------------------------------------------------

11/28/06 12:34:20 -- bradc

Log message:
	A future showing that casting uint values to complexes
	doesn't work.

Added files:
	chapel/test/types/complex/bradc/: uintToComplex.chpl 
	                                  uintToComplex.future 
	                                  uintToComplex.good 

---------------------------------------------------------------------------

11/28/06 13:28:00 -- deitz

Log message:
	Added generic types 'integral' and 'numeric' to allow for the
	specification of generic arguments that are restricted to being any
	int or uint, or any numeric type.
	
	Renamed bpop to bitPop and made it generic over integral.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: BitOps.chpl _chpl_base.chpl 
	chapel/test/npb/ft/: ft-serial.chpl 
	chapel/test/trivial/deitz/: test_bpop.chpl 

---------------------------------------------------------------------------

11/28/06 13:28:53 -- deitz

Log message:
	Added second bitPop test.

Added files:
	chapel/test/trivial/deitz/: test_bpop2.chpl test_bpop2.good 

---------------------------------------------------------------------------

11/28/06 13:30:54 -- deitz

Log message:
	Finished first pass of BitOps section.  Reformatted code definitions
	and explanations.

Modified files:
	chapel/spec/: Standard_Modules.tex chapel_listing.tex 

---------------------------------------------------------------------------

11/28/06 14:33:56 -- bradc

Log message:
	Updated testing system so that if a .good file
	with a machine name embedded into it exists,
	that is used rather than the .platform.good
	or generic .good files.

Modified files:
	chapel/test/: start_test 
	chapel/test/Bin/: sub_test 

---------------------------------------------------------------------------

11/28/06 14:35:50 -- bradc

Log message:
	Added "this" to an INT_FATAL() to make its output
	clearer.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

11/28/06 14:37:56 -- deitz

Log message:
	Finished first pass of Math module.  I believe we want to rethink the
	functions we provide in Chapel to make them thread-safe and
	consistently named.

Modified files:
	chapel/spec/: Standard_Modules.tex chapel_listing.tex 

---------------------------------------------------------------------------

11/28/06 14:43:14 -- bradc

Log message:
	Prior to this check-in, we had the memory per locale
	hardcoded for my solitary machine.  This check-in
	causes the physicalMemory() routine to actually
	return the amount of physical memory on the locale.
	This is done using a new primitive, implemented in
	the runtime chplsys.c/h files, which uses sysconf()
	on most platforms, except for cygwin where it isn't
	defined in the same way as on other machines (the
	workaround is implemented in runtime/include/chplsys.h,
	along with a comment capturing why this workaround is
	necessary).
	
	Changed the interface for physicalMemory() so that
	the type used to return the value can be specified
	by the user.  uint(64) is the default, but smaller
	ints or floats can be desireable depending on the
	locale's memory size and memory units requested.
	
	Added a test that queries the memory in a bunch of
	different ways, and added .good files for all of the
	machines that we do most of our testing on.  If you
	find I've made a mistake or left a machine off, feel
	encouraged to make the fix yourself (hopefully verifying
	by some other means that the memory returned is correct
	to avoid problems like I found on cygwin).

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/modules/standard/: Memory.chpl 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile 
Added files:
	chapel/runtime/include/: chplsys.h 
	chapel/runtime/src/: chplsys.c 
	chapel/test/modules/standard/memory/countMemory/: .cvsignore 
	                                                  README 
	                                                  countMemory.bradc2-xp-lap.good 
	                                                  countMemory.chap01.good 
	                                                  countMemory.chap02.good 
	                                                  countMemory.chap03.good 
	                                                  countMemory.chap04.good 
	                                                  countMemory.chap05.good 
	                                                  countMemory.chap06.good 
	                                                  countMemory.chap07.good 
	                                                  countMemory.chap08.good 
	                                                  countMemory.chevy.wc.cray.com.good 
	                                                  countMemory.chpl 
	                                                  countMemory.good 
	                                                  countMemory.mono.wc.cray.com.good 
	                                                  countMemory.solitary.wc.cray.com.good 
	                                                  countMemory.stemp6.wc.cray.com.good 

---------------------------------------------------------------------------

11/28/06 14:49:22 -- deitz

Log message:
	Minor cleanup to log2 and abs to make them similar and inline with the spec.

Modified files:
	chapel/modules/standard/: _chpl_math.chpl 

---------------------------------------------------------------------------

11/28/06 15:36:21 -- deitz

Log message:
	Added reference to string.substring(i: int) method.

Modified files:
	chapel/spec/: Types.tex 

---------------------------------------------------------------------------

11/28/06 16:23:26 -- deitz

Log message:
	Added more functions I found in the modules that need to go into some
	modules or into a list of functions.  This is a checkpoint until I sort.

Modified files:
	chapel/spec/: Standard_Modules.tex chapel_listing.tex 

---------------------------------------------------------------------------

11/28/06 16:40:25 -- bradc

Log message:
	My last checkin caused regressions to the hpcc06 codes
	due to its change of the physicalMemory() routine from
	returning an int to returning a uint(64).  This checkin
	fixes those regressions and also changes the default
	return type to be a int(64), which should be sufficiently
	large for the forseeable future and also simplifies the
	math that we do.
	
	Nevertheless, switching to an int(64) did require changes
	to the probSize.chpl module, causing me to adopt the
	following attitude about the HPCC implementations in the
	release: we'll make changes to them as we feel necessary
	or appropriate, and track the changes in the README in
	that directory so that users will know how they differ
	from the codes in our paper.
	
	Having adopted this philosophy, I also made the memRatio
	argument to the problem size computation into a config
	var, as suggested in the paper.
	
	This checkin and my previous one leave one remaining
	regression, which is that the testProblemSize.chpl
	test is now machine-specific and requires me to create
	.good files for each machine...

Modified files:
	chapel/modules/standard/: Memory.chpl 
	chapel/test/release/examples/hpcc06/: README probSize.chpl 
	chapel/test/studies/hpcc/common/: probSize.chpl 

---------------------------------------------------------------------------

11/28/06 16:51:14 -- bradc

Log message:
	Based on Steve's suggestion and arguments that I
	woudn't lose any of the current benefits, changed
	physicalMemory() from a standalone function to
	a method on the locale type and updated the tests
	that utilize it.

Modified files:
	chapel/modules/standard/: Memory.chpl 
	chapel/test/modules/standard/memory/countMemory/: 
	                                                  countMemory.chpl 
	chapel/test/release/examples/hpcc06/: README probSize.chpl 
	chapel/test/studies/hpcc/common/: probSize.chpl 

---------------------------------------------------------------------------

11/28/06 16:53:27 -- bradc

Log message:
	Just realized that I'd forgotten to add this header
	file which was required by my initial checkin to
	implement physicalMemory() correctly for cygwin.

Added files:
	chapel/runtime/include/cygwin/: chplsys.h 

---------------------------------------------------------------------------

11/28/06 18:29:36 -- marybeth

Log message:
	Adding an abs routine for complex data types.

Modified files:
	chapel/modules/standard/: _chpl_math.chpl 

---------------------------------------------------------------------------

11/28/06 18:36:49 -- marybeth

Log message:
	Adding a working test of complex absolute value routine.
	
	Adding a future for casting a tuple to complex(64).  The compiler hits
	an internal error.

Added files:
	chapel/test/types/complex/marybeth/: complex_abs.chpl 
	                                     complex_abs.good 
	                                     complex_tuple_64.chpl 
	                                     complex_tuple_64.future 
	                                     complex_tuple_64.good 

---------------------------------------------------------------------------

11/28/06 18:49:56 -- marybeth

Log message:
	Creating a future for a test with a function which has statements only within a
	type select statement.  When compiling this test, the compiler complains that
	there is illegal use of a function that doesn't return a value.

Added files:
	chapel/test/trivial/marybeth/: typeselect.chpl typeselect.future 
	                               typeselect.good 

---------------------------------------------------------------------------

11/28/06 19:41:08 -- marybeth

Log message:
	Adding a test for the Norm module example to be included in the spec.

Added files:
	chapel/test/spec/marybeth/: Norm.chpl Norm.notest testnorm.chpl 
	                            testnorm.good 

---------------------------------------------------------------------------

11/28/06 19:43:37 -- marybeth

Log message:
	Adding testnorm.compopts.  (Missed checking it in with previous commit
	of testnorm.)

Added files:
	chapel/test/spec/marybeth/: testnorm.compopts 

---------------------------------------------------------------------------

11/28/06 20:49:41 -- marybeth

Log message:
	Added an example near the beginning of the language overview section.
	More explanation of the example will be coming.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/29/06 09:48:02 -- bradc

Log message:
	Removed tabs from comments to make nightly check happy.

Modified files:
	chapel/runtime/include/cygwin/: chplsys.h 

---------------------------------------------------------------------------

11/29/06 09:49:16 -- deitz

Log message:
	Added abs(x: complex) to the spec.

Modified files:
	chapel/spec/: Standard_Modules.tex 

---------------------------------------------------------------------------

11/29/06 10:54:10 -- deitz

Log message:
	Finished first pass of Standard Modules except for Random (left to
	Brad) and perhaps a few rearrangements here and there.

Modified files:
	chapel/spec/: Standard_Modules.tex 

---------------------------------------------------------------------------

11/29/06 12:07:12 -- deitz

Log message:
	Moved Language Overview to OLD file.
	
	Added new Language Overview section skeleton.

Modified files:
	chapel/spec/: Language_Overview.tex 
Added files:
	chapel/spec/: Language_Overview_OLD.tex 

---------------------------------------------------------------------------

11/29/06 12:08:25 -- deitz

Log message:
	Added modules Standard and Math (previously _chpl_math).
	
	Removed bits function (replaced already with numBits).
	
	Moved sleep function to Time.
	
	Moved assert, exit, and halt to Standard.
	
	Moved min and max on types to Types.  These should not be implemented
	with primitives, in my opinion.  Just hard code them with the values.
	
	Updated some tests.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: BitOps.chpl Time.chpl Types.chpl 
	                          _chpl_base.chpl _chpl_file.chpl 
	                          _chpl_standard.chpl 
	chapel/test/parallel/cobegin/bradc/: exitone.chpl 
	chapel/test/parallel/single/waynew/: class0.chpl class1.chpl 
	                                     simple1.chpl simple2.chpl 
	                                     simple3.chpl simple4.chpl 
	chapel/test/parallel/sync/waynew/: record1.chpl record2.chpl 
	chapel/test/release/examples/: prod-cons.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc.chpl 
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-bradc.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream.chpl 
	                                          stream2.chpl 
Added files:
	chapel/modules/standard/: Math.chpl Standard.chpl 
Removed files:
	chapel/modules/standard/: _chpl_math.chpl 

---------------------------------------------------------------------------

11/29/06 13:30:50 -- deitz

Log message:
	Added a second generic stack example that uses an array implementation
	rather than a linked list implementation.  The array is doubled as
	necessary.

Modified files:
	chapel/test/release/examples/: README genericStack.chpl 
Added files:
	chapel/test/release/examples/: genericStack2.chpl 
	                               genericStack2.good 

---------------------------------------------------------------------------

11/29/06 13:47:00 -- deitz

Log message:
	Copied the Generic Stack codes into the spec.  I left them in the
	Language_Overview.tex file so MB can decide if she wants to or how she
	wants to work with multiple files.
	
	Added a numberedchapel environment that can be used for these program
	codes with numbering on the left.
	
	I left the comments in the code though we may want to remove these
	given that there will be alot of walkthrough text.

Modified files:
	chapel/spec/: Language_Overview.tex chapel_listing.tex 

---------------------------------------------------------------------------

11/29/06 13:51:18 -- deitz

Log message:
	Minor cleanup of producer consumer example.  It is nice and simple.  I
	changed the parameters to config variables since they don't need to be
	parameters and they are nice to vary (sleepTime, numIterations).

Modified files:
	chapel/test/release/examples/: prod-cons.chpl 

---------------------------------------------------------------------------

11/29/06 13:53:15 -- deitz

Log message:
	Stuck producer consumer example in overview section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

11/29/06 14:15:05 -- deitz

Log message:
	Took a second pass over the user-defined compiler errors section (6.5).

Modified files:
	chapel/spec/: Lexical_Structure.tex 

---------------------------------------------------------------------------

11/29/06 14:39:04 -- bradc

Log message:
	Steve noticed that my Makefile changes of the other day
	had killed our ability to specify --ccflags as well as
	the default ccflags value of -g.  This change re-enables
	that capability, and also allows platforms to set CFLAGS
	for the generated code that cannot be overridden by the
	user by splitting the GEN_CFLAGS variable into GEN_CFLAGS
	and COMP_GEN_CFLAGS.  The latter is the variable that is
	defined by the --ccflags option.
	
	Sorry for the regression.  If anyone has time to create
	a test against --ccflags that will catch such regressions
	in the future, that would be great.  Doing so in a
	portable way would be slightly tricky, but maybe not
	impossible by having prediff grep the output of a
	--print-commands compilation for the flag in question
	(potentially even a bogus flag to make sure the grep hits)?

Modified files:
	chapel/compiler/util/: files.cpp 
	chapel/runtime/etc/: Makefile.include 

---------------------------------------------------------------------------

11/29/06 15:35:06 -- deitz

Log message:
	Refactored _chpl_base folding _chpl_complex into it.  It is now sorted
	by operator.  Moved conjg to Math.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: Math.chpl _chpl_base.chpl 
	                          _chpl_file.chpl _chpl_standard.chpl 
	chapel/spec/: Standard_Modules.tex 
Removed files:
	chapel/modules/standard/: _chpl_complex.chpl 

---------------------------------------------------------------------------

11/29/06 15:40:54 -- deitz

Log message:
	Added mention of integral and numeric to the spec.

Modified files:
	chapel/spec/: Generics.tex 

---------------------------------------------------------------------------

11/30/06 13:26:37 -- marybeth

Log message:
	Corrected an error with the definition of the "sleep" function in
	the Time module.  It should take a uint as input rather than an int.

Modified files:
	chapel/spec/: Standard_Modules.tex 

---------------------------------------------------------------------------

11/30/06 13:45:37 -- deitz

Log message:
	Removed <=, >=, <, >, over bool.
	
	Fixed small bug in spec (% as /).

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/spec/: Expressions.tex 

---------------------------------------------------------------------------

11/30/06 15:07:49 -- deitz

Log message:
	Renamed PRIMITIVE_CHPL_free to PRIMITIVE_CHPL_FREE to make it like all
	the other primitives.  Note that this primitive is not yet ever used.
	
	Simplified array assignment functions.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/modules/standard/: _chpl_adomain.chpl 

---------------------------------------------------------------------------

11/30/06 15:40:12 -- deitz

Log message:
	Finished first pass of section through arithmetic domains and arrays.

Modified files:
	chapel/spec/: Domains_and_Arrays.tex 

---------------------------------------------------------------------------

11/30/06 16:48:18 -- deitz

Log message:
	Finished first pass over Domains and Arrays section.  Added keywords
	sparse and opaque.

Modified files:
	chapel/spec/: Domains_and_Arrays.tex chapel_listing.tex 
	              syntax_listing.tex 

---------------------------------------------------------------------------

11/30/06 16:59:28 -- deitz

Log message:
	Changed spec version number to 0.701 under the following assumptions:
	
	We should increment by 0.1 when each of the following major events
	happen:
	
	  1. All of the sentences in the Spec are English and make sense.
	
	  2. The Locality and Distributions section is completed and accurate
	     to the first major version of the Chapel release (1.0).
	
	  3. Every other section is completed and accurate to the first major
	     version of the Chapel release (1.0).

Modified files:
	chapel/spec/: spec.tex 

---------------------------------------------------------------------------

11/30/06 17:52:51 -- marybeth

Log message:
	Checking in the getting started section and some text for the producer-consumer
	walk-through.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/01/06 09:25:25 -- deitz

Log message:
	Removed .future for working test.

Removed files:
	chapel/test/functions/deitz/: test_forallexpr2.future 

---------------------------------------------------------------------------

12/01/06 10:13:40 -- deitz

Log message:
	Moved variable declarations in runtime codes that were not at the top
	of a scope to the top of a scope, making them C instead of C++.
	
	This gets them to compile on sunos with an old gcc.
	
	The runtime build breaks looking for etags.

Modified files:
	chapel/runtime/include/: arg.h 
	chapel/runtime/src/: arg.c chplio.c chplmem.c chplmem_tests.c 
	                     chpltypes.c config.c 

---------------------------------------------------------------------------

12/01/06 11:43:49 -- deitz

Log message:
	Refactored the code that prunes the AST after function resolution
	(removes dead types and functions, removes method and setter tokens,
	...) and added comments to this piece of code.
	
	Improved function resolution time by almost 8% due primarily to less
	AST collection traversals.
	
	Added utility function get_string that takes an Expr* and returns a
	char* if the Expr* is a string literal.  It fails if the Expr* is not
	a string literal.  This complements the non-fatal get_string that
	returns a bool if the Expr* is not a string literal and returns the
	char* in a second argument passed by a pointer.

Modified files:
	chapel/compiler/AST/: astutil.cpp expr.cpp symbol.cpp 
	chapel/compiler/include/: astutil.h expr.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

12/01/06 11:45:10 -- deitz

Log message:
	Made the array and domain wrapper class types have the same name as
	the type of the array and domain class that they wrap.  This improves
	array and domain error messages, getting rid of the ludicrously long
	type names.
	
	Removed one .future.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/arrays/bradc/: twoDasTwoOneDs.good 
Removed files:
	chapel/test/arrays/bradc/: twoDasTwoOneDs.future 

---------------------------------------------------------------------------

12/01/06 11:58:29 -- deitz

Log message:
	Added flags
	
	  -Wdeclaration-after-statement -Wnested-externs
	
	for developer compiling of runtime sources to catch C++ism and nested
	externs.

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

12/01/06 12:00:20 -- deitz

Log message:
	Undid last change as these options are not handled on gcc on the chap
	servers.

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

12/01/06 14:18:57 -- deitz

Log message:
	Fixed a bug in which prototypes in the generated code without argument
	lists were not declared with 'void' as the argument list.
	
	Fixed a bug in which the few functions we put in the generated code
	that are created during code generation (relating to enumerated types
	and config variables) did not have prototypes.
	
	Applied all of the runtime warning flags to the generated list of
	compilation flags if the developer flag is set.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: codegen.cpp 
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

12/01/06 14:52:57 -- deitz

Log message:
	Fixed minor typo in .goods.

Modified files:
	chapel/test/modules/standard/memory/countMemory/: 
	                                                  countMemory.chap04.good 
	                                                  countMemory.chap05.good 

---------------------------------------------------------------------------

12/01/06 14:56:26 -- deitz

Log message:
	Added --print-dispatch developer option to print out the dynamic
	dispatch functions table.  Previously I had code in the compiler that
	could be uncommented.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

12/01/06 16:08:32 -- waynew

Log message:
	Added enumeration of bugs derived from the list of current future tests. Did
	not include futures labeled as error message or semantic.  Some bugs are
	listed under multiple sections.
	
	There are a couple futures that I could not come up with a concise
	description of.  These are:
	 - studies/hpcc/STREAMS/bradc/stream-slice
	 - distributions/bradc/foundations/blockdist2

Modified files:
	./: STATUS 
	chapel/test/parallel/sync/deitz/: test_sync2.future 

---------------------------------------------------------------------------

12/01/06 16:19:30 -- bradc

Log message:
	Original reason for filing this future was resolved,
	and another error was preventing it from passing.
	Fixed test and output, test now works.

Modified files:
	chapel/test/distributions/bradc/foundations/: blockdist2.chpl 
	                                              blockdist2.good 
Removed files:
	chapel/test/distributions/bradc/foundations/: blockdist2.future 

---------------------------------------------------------------------------

12/01/06 16:32:04 -- marybeth

Log message:
	Completed the producer-consumer walk-through section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/01/06 17:39:10 -- bradc

Log message:
	Adding two jacobi codes to the release for consideration.
	
	  jacobi.chpl:  is a pretty straightforward implementation
	  jacobi-routine.chpl: abstracts jacobi into a routine
	
	Based on the following, I suspect we'd want to remove
	jacobi-routine.chpl from the release and use jacobi.chpl for the
	walkthrough.
	
	Both codes contain workarounds:
	
	In both:
	
	1) Array slicing assignments:
	
	        A(ProblemSpace) = Temp(ProblemSpace);
	   and
	        Temp(ADomain) = A;
	
	   didn't seem to work.  Is this something we could generate a
	   compiler error for -- it takes some effort to track down.
	
	In routine version:
	
	2) Can't seem to query both domain and type in one argument:
	
	        def foo(A: [?AD] ?t)
	
	3) Couldn't find a way to query the high bound of a dimension
	   of an adomain.  Used _high for time being.
	
	4) Can't declare variables in tuple-destructuring style:
	
	        var (x,y) = foo();

Modified files:
	chapel/test/release/examples/: README 
Added files:
	chapel/test/release/examples/: jacobi-routine.chpl 
	                               jacobi-routine.good jacobi.chpl 
	                               jacobi.good 

---------------------------------------------------------------------------

12/01/06 17:54:59 -- bradc

Log message:
	First pass at cleaning up norm example for release/spec.

Modified files:
	chapel/test/release/examples/: README 
Added files:
	chapel/test/release/examples/: norm.chpl norm.good 

---------------------------------------------------------------------------

12/01/06 17:59:28 -- bradc

Log message:
	Second pass of norm code.

Modified files:
	chapel/test/release/examples/: norm.chpl 

---------------------------------------------------------------------------

12/01/06 18:09:19 -- bradc

Log message:
	Final edits to norm example.  This is a really
	good example, and I'm happy with this code.
	No workarounds, I believe.  Comments from others
	welcome.

Modified files:
	chapel/test/release/examples/: norm.chpl norm.good 

---------------------------------------------------------------------------

12/01/06 18:12:47 -- bradc

Log message:
	Just noticed that I never changed this
	to color "real" and "imag" rather than
	"float"...

Modified files:
	chapel/etc/emacs/21.4/: font-lock.el 

---------------------------------------------------------------------------

12/04/06 10:47:31 -- bradc

Log message:
	Two futures that came up while putting together
	jacobi examples:
	
	  1) querying both the domain and element type of
	     an array argument results in a syntax error.
	
	  2) slicing the LHS of an array assignment causes
	     the assignment to take place incorrectly (a
	     single value seems to get smeared across the
	     whole subarray).

Added files:
	chapel/test/arrays/bradc/: sliceassign.chpl sliceassign.future 
	                           sliceassign.good 
	chapel/test/functions/bradc/: querydomelem.chpl 
	                              querydomelem.future 
	                              querydomelem.good 

---------------------------------------------------------------------------

12/04/06 10:58:13 -- deitz

Log message:
	Fixed a bug in which an array slice on the left-hand side of an
	assignment could not be assigned a non-scalar, i.e., an array, another
	array slice, or a sequence.
	
	Added tests of things like
	  A(D) = B(D);
	  A(2..4) = B(2..4);

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_assign_slice.chpl 
	                           test_assign_slice.good 
	                           test_assign_slice2.chpl 
	                           test_assign_slice2.good 

---------------------------------------------------------------------------

12/04/06 10:59:19 -- deitz

Log message:
	Removed a .future that is now working.

Removed files:
	chapel/test/arrays/bradc/: sliceassign.future 

---------------------------------------------------------------------------

12/04/06 11:13:05 -- deitz

Log message:
	Added low, high and stride methods to arithmetic sequences, added a
	test, added documentation to the spec.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/spec/: Sequences.tex 
Added files:
	chapel/test/types/seq/deitz/: test_aseq5.chpl test_aseq5.good 

---------------------------------------------------------------------------

12/04/06 11:46:35 -- deitz

Log message:
	Added a flag "--warn-promotion" to print a warning for each call that
	requires scalar promotion.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

12/04/06 12:09:54 -- bradc

Log message:
	Updated jacobis w.r.t. Steve's recent bug fixes/feature
	improvements.  Filed a future against slicing with square
	brackets to complement my earlier one.

Modified files:
	chapel/test/release/examples/: jacobi-routine.chpl jacobi.chpl 
Added files:
	chapel/test/arrays/bradc/: sliceassignsquare.chpl 
	                           sliceassignsquare.future 
	                           sliceassignsquare.good 

---------------------------------------------------------------------------

12/04/06 12:13:06 -- deitz

Log message:
	Added test to show that generics are favored over promotions in
	function resolution.

Added files:
	chapel/test/functions/deitz/: test_promotion_generic.chpl 
	                              test_promotion_generic.good 

---------------------------------------------------------------------------

12/04/06 12:26:14 -- deitz

Log message:
	Fixed a small bug in the setter versions of the "array indexing by a
	domain or arithmetic sequence" functions in which the = was left off
	of the function definition.  It was only working in the test cases
	because scalar promotion over the normal setter function was working
	correctly for these cases.
	
	Added a test.
	
	Removed a .future.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
Added files:
	chapel/test/arrays/deitz/: test_assign_slice3.chpl 
	                           test_assign_slice3.good 
Removed files:
	chapel/test/arrays/bradc/: sliceassignsquare.future 

---------------------------------------------------------------------------

12/04/06 12:33:24 -- bradc

Log message:
	Updated jacobi tests.  I think jacobi.chpl
	is now in a good format for publishing (modulo
	comments from others).  jacobi-routine.chpl
	could still be made better once we can query
	the array argument's domain and type (in
	particular, the jacobi can be made generic
	across array types).x

Modified files:
	chapel/test/release/examples/: jacobi-routine.chpl jacobi.chpl 

---------------------------------------------------------------------------

12/04/06 14:05:46 -- marybeth

Log message:
	Updated the producer-consumer example walkthrough with my own changes and
	Steve's.  I added the jacobi and norm examples.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/04/06 15:24:04 -- marybeth

Log message:
	Changes to the producer-consumer section based on Wayne's comments.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/04/06 15:52:39 -- bradc

Log message:
	Modified Makefiles to remove dependence on the existence
	of etags.  If it exists, TAGS files are created, otherwise
	they are not.

Modified files:
	chapel/compiler/: Makefile 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

12/04/06 15:58:59 -- bradc

Log message:
	In putting together a jacobi example last week, I was going
	to start by reviewing all the jacobi studies and getting
	them working, removing NOTESTS, updating futures, etc.  In
	the end, decided that was taking too long, so only got
	through Rob's directory and part of mine, but wanted to
	check in what I had done.
	
	Here, Rob's original version used a subdomain, which isn't
	currently implemented.  I also created a "workaround" version
	that replaces the subdomain with a domain(2) declaration, but
	is otherwise unchanged.

Modified files:
	chapel/test/studies/jacobi/bocchino/: jacobi.chpl 
Added files:
	chapel/test/studies/jacobi/bocchino/: .cvsignore jacobi.future 
	                                      jacobi.good 
	                                      jacobi.workaround.chpl 
	                                      jacobi.workaround.good 
Removed files:
	chapel/test/studies/jacobi/bocchino/: NOTEST 

---------------------------------------------------------------------------

12/04/06 16:03:31 -- deitz

Log message:
	Added a primitive _mem_used and corresponding function in Memory
	called memoryUsed() that returns the current number of allocated bytes
	of memory.  Using this function requires the --memstat flag.  If the
	--memstat flag is used, it normally prints out the amount of memory in
	use at the end of the program.  If the memoryUsed() function is
	called, however, it does not.
	
	Added a .future that shows a leak in the usage of writeln (most likely
	caused by strings).

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/modules/standard/: Memory.chpl 
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: chplmem.c 
Added files:
	chapel/test/memory/deitz/: test_trivial_leak.chpl 
	                           test_trivial_leak.compopts 
	                           test_trivial_leak.good 

---------------------------------------------------------------------------

12/04/06 16:19:44 -- deitz

Log message:
	Fixed a small bug in the runtime code that I introduced with my C++ to
	C changes.
	
	This fixes the regression
	  execflags/shannon/configs/configVarFileStringsMismatch

Modified files:
	chapel/runtime/src/: config.c 

---------------------------------------------------------------------------

12/04/06 16:34:52 -- bradc

Log message:
	Updated clobber rule to only remove bin/ and lib/
	directories if no other platforms are using them.
	This prevents a linux installation from removing
	the binaries and libraries of a cygwin or linux64
	installation, for example.
	
	Changed the message printed when making platform-
	specific subdirectories to clarify some confusion
	Kevin was having during the build of the release.

Modified files:
	./: Makefile 
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

12/04/06 17:11:47 -- waynew

Log message:
	Clarification of a bug with begin blocks + local class/record vars.
	
	Added tests with a begin block + class/record vars.

Modified files:
	./: STATUS 
Added files:
	chapel/test/parallel/begin/waynew/: class1.chpl class1.good 
	                                    class2.chpl class2.future 
	                                    class2.good record1.chpl 
	                                    record1.good record2.chpl 
	                                    record2.future record2.good 

---------------------------------------------------------------------------

12/04/06 17:12:37 -- bradc

Log message:
	Proving my job security is effective by correcting the
	amount of memory available on chap08, as pointed out by
	Steve.  chap08 has ~4k less memory than chap01, 06, and
	07 for some reason.

Modified files:
	chapel/test/modules/standard/memory/countMemory/: 
	                                                  countMemory.chap08.good 

---------------------------------------------------------------------------

12/04/06 17:18:12 -- marybeth

Log message:
	Update to Jacobi section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/04/06 17:55:15 -- bradc

Log message:
	Made our Makefiles resilient in the face of new platforms.
	Previously, the build would simply break due to a missing
	make/Makefile.$CHPL_PLATFORM file.  Now, the fact that
	the platform is new is announced, the user is asked whether
	the platform uses the gnu toolsuite or not, and a template
	Makefile is created for them, along with a message warning
	them that further edits might be needed, and that they
	should send any qyestions or edits to us so that we can
	support their platform better in future releases.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile.generic Makefile.generic.gnu 

---------------------------------------------------------------------------

12/04/06 18:04:06 -- waynew

Log message:
	Fixed a bug where a begin block referenced a local variable that
	was a class or record.  Removed a couple futures that tested this
	and updated the list of bugs for release.

Modified files:
	./: STATUS 
	chapel/compiler/AST/: expr.cpp 
Removed files:
	chapel/test/parallel/begin/waynew/: class2.future record2.future 

---------------------------------------------------------------------------

12/05/06 09:07:45 -- deitz

Log message:
	Added .future.

Added files:
	chapel/test/memory/deitz/: test_trivial_leak.future 

---------------------------------------------------------------------------

12/05/06 09:23:03 -- deitz

Log message:
	Added future that shows a memory leak with arrays.

Added files:
	chapel/test/memory/deitz/: test_array_leak.chpl 
	                           test_array_leak.compopts 
	                           test_array_leak.future 
	                           test_array_leak.good 

---------------------------------------------------------------------------

12/05/06 11:41:58 -- deitz

Log message:
	Added support for declaring variables using tuple-like syntax as in
	
	  var (x, y) = foo();
	
	and
	
	  var (a, b, c) : 3*int;
	
	Removed spec note on non-implementation status of this feature.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/spec/: Tuples.tex 
Added files:
	chapel/test/types/tuple/deitz/: test_tuple_var_decl1.chpl 
	                                test_tuple_var_decl1.good 

---------------------------------------------------------------------------

12/05/06 12:12:14 -- deitz

Log message:
	Removed .future for working test.

Removed files:
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-slice.future 

---------------------------------------------------------------------------

12/05/06 13:11:19 -- deitz

Log message:
	Made homogeneous tuple type declarations sugar when they occur only in
	the places listed in the spec.  This fixes some multiplication
	ambiguities.  Updated the places where this sugar can be used in the
	spec.  Homogeneous tuple types can be specified as top-level types in
	variable declarations, type alias declarations, formal argument
	declarations, and function return type declarations.
	
	Removed a .future.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/spec/: Tuples.tex 
	chapel/test/types/seq/deitz/: test_seq_htuple1.chpl 
	                              test_seq_htuple2.chpl 
	chapel/test/types/tuple/deitz/: test_htuple6.chpl 
Removed files:
	chapel/test/studies/hpcc/FFT/bradc/: fft-badtuple.future 

---------------------------------------------------------------------------

12/05/06 13:54:11 -- bradc

Log message:
	Mdae the testProbSize.chpl test compute a .good
	file using the output of the countMemory test,
	since the output is machine-dependent based on
	the amount of memory, yet we don't want to have
	to maintain two memory-related tests on a platform-
	by-platform basis.
	
	I've tested this on 4 platforms and it seems to
	be working.  Let me know if you find that it
	doesn't for another machine.

Added files:
	chapel/test/studies/hpcc/common/: .cvsignore computeProbSize.pl 
	                                  testProbSize.prediff 
Removed files:
	chapel/test/studies/hpcc/common/: testProbSize.good 

---------------------------------------------------------------------------

12/05/06 14:09:40 -- bradc

Log message:
	Made these scripts resilient to paths that contain
	spaces for use on windows/cygwin.
	
	Also added print messages to indicate what the
	scripts are doing for users who want to incorporate
	the commands into their own dotfile structure.

Modified files:
	chapel/util/: setchplenv.bash setchplenv.csh 

---------------------------------------------------------------------------

12/05/06 14:31:30 -- bradc

Log message:
	Added a new script setchplenv.sh for a true bourne
	shell, and switched .bash to be more bash-centric.
	(the pure bourne-shell version is ugly enough that
	I didn't want to impose it on bash users).

Modified files:
	./: README 
	chapel/doc/release/: README.chplenv 
	chapel/util/: gen_release setchplenv.bash 
Added files:
	chapel/util/: setchplenv.sh 

---------------------------------------------------------------------------

12/05/06 15:06:10 -- deitz

Log message:
	Added cat_futures script to test directory to print out all the
	futures and the corresponding Chapel codes.  See also cat_tests and
	cat_goods.

Added files:
	chapel/test/: cat_futures 

---------------------------------------------------------------------------

12/05/06 15:48:37 -- deitz

Log message:
	Note: regress: arrays/deitz/jacobi-no-inline.  Disabling inlining
	stops working with this checkin; I'm looking into it.
	
	Initial work to turn casts into function calls to allow promotion over
	casts.  In this change, I added a single cast function to handle all
	casts with the same primitive.  The main difference is that the
	primitive cast is wrapped by a function call.  The next step is to
	specialize the function calls to only those types for which we allow
	casts.
	
	The single cast function is specialize to sync and single types with
	the synchronization primitive to avoid coercing the synchronization in
	the cast.  A better idea is to special-case the cast function in the
	compiler otherwise we would have to replicate all of the cast
	functions on sync and single.
	
	Specialized the cast function to handle tuple to complex casts without
	any compiler intervention.  Removed two .futures now that we cast all
	2-tuples to any of the parameterized complex types.

Modified files:
	chapel/compiler/AST/: build.cpp symbol.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_htuple.chpl 
	chapel/test/: cat_futures 
	chapel/test/trivial/deitz/: test_shortcircuit_land_lor.chpl 
Removed files:
	chapel/test/types/complex/bradc/: tuple2complex.future 
	chapel/test/types/complex/marybeth/: complex_tuple_64.future 

---------------------------------------------------------------------------

12/05/06 15:51:17 -- bradc

Log message:
	Added a prerequisites file to try and list our
	assumptions and prerequisites for using Chapel.
	There are probably other things I'm missing
	here.
	
	Also, put in an explicit note about using
	make rather than gmake on Cygwin since gmake
	is not available there (but make is
	GNU-compatible).

Modified files:
	./: README 
Added files:
	chapel/doc/release/: README.prereqs 

---------------------------------------------------------------------------

12/05/06 16:02:29 -- bradc

Log message:
	C-isms crept back into the runtime, so I fixed them and
	enabled the -W flags that Steve enabled the other day
	only if CHPL_DEVELOPER is set and gcc version 3.4.x is
	used (this means that when we upgrade to a newer gcc,
	these warnings will go away again, but I couldn't come
	up with a less fragile approach easily).

Modified files:
	chapel/make/: Makefile.gnu 
	chapel/runtime/src/: chplmem.c config.c 

---------------------------------------------------------------------------

12/05/06 16:06:25 -- deitz

Log message:
	Changed the cast function from a var function to a non-var function.
	Casts are no longer lvalues.  Updated the spec.
	
	Why did I make them lvalues?  Should they be?  They are not in C.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/spec/: Expressions.tex 

---------------------------------------------------------------------------

12/05/06 16:09:36 -- bradc

Log message:
	Updated the FFT examples in the release to use casts
	to the named type "elemType" rather than "complex",
	based on Steve's latest change.  Updated the README
	to note this change.

Modified files:
	chapel/test/release/examples/hpcc06/: .cvsignore README 
	                                      fft-mta.chpl fft.chpl 

---------------------------------------------------------------------------

12/05/06 16:22:20 -- bradc

Log message:
	Two changes that ought to fix the develhelp and userhelp
	regressions:
	
	1) Removed the develhelp test (testing --help from a
	   developer's perspective), on the basis that we don't
	   care if developer's flags are poorly documented, and
	   that they change more frequently, causing more work
	   to keep this test updated.
	
	2) Added a sub_test script that unsets the CHPL_UNOPTIMIZED
	   flag so that Steve's unoptimized regressions don't keep
	   failing on this test.

Added files:
	chapel/test/compflags/bradc/help/: sub_test 
Removed files:
	chapel/test/compflags/bradc/help/: develhelp.chpl 
	                                   develhelp.compopts 
	                                   develhelp.prediff 
	                                   develhelp.txt 

---------------------------------------------------------------------------

12/05/06 16:31:29 -- bradc

Log message:
	On reflection, put Cygwin-specific prerequisites
	into their own file figuring that nobody would
	find them in README.prereqs.

Modified files:
	./: README 
	chapel/doc/release/: README README.prereqs 
Added files:
	chapel/doc/release/: README.cygwin 

---------------------------------------------------------------------------

12/05/06 16:39:43 -- bradc

Log message:
	Based on Kevin's feedback, reproduced problem that unpacking
	the release with WinZip converts LF -> CR+LF, breaking the
	build.  Put a note to this effect (how to avoid, how to fix)
	in the Cygwin README.

Modified files:
	chapel/doc/release/: README.cygwin 

---------------------------------------------------------------------------

12/05/06 16:57:24 -- bradc

Log message:
	Added a Makefile to the examples directory that
	can be used to build all of the examples, or one
	at a time by name.  This uses gmake's generics
	capabilities, so when new tests are added to the
	directory, they should be added to the TARGETS
	list in the Makefile (as well as the README as
	before), but no additional work should be required.

Modified files:
	chapel/test/release/examples/: .cvsignore README 
Added files:
	chapel/test/release/examples/: Makefile 

---------------------------------------------------------------------------

12/05/06 20:09:58 -- marybeth

Log message:
	Completed first draft of Jacobi section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/06/06 10:22:01 -- deitz

Log message:
	Inserted temporary variables for all formal arguments.  The temporary
	variables are initialized with the new special _pass function.  For
	all types except arrays, this calls the _copy function which is used
	in cases where a new variable is initialized to an expression where no
	type is specified.  The _copy function is equivalent to assignment in
	all cases.  For arrays, the _pass function simply returns the same
	array reference, thus allowing arrays to be passed by reference.
	
	Since the types of formal arguments are known at the point the _pass
	function is inserted, it is not strictly necessary.  However, it does
	push some mechanism into the modules rather than tying policy to the
	compiler, which makes the implementation more robust.
	
	Removed three .futures.
	
	Updated one .good as it was wrong and is now right.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	chapel/test/functions/deitz/: test_var_function_access2.good 
Removed files:
	chapel/test/functions/deitz/: test_formal_copy1.future 
	chapel/test/parallel/sync/deitz/: test_sync1.future 
	                                  test_sync2.future 

---------------------------------------------------------------------------

12/06/06 10:29:26 -- deitz

Log message:
	Removed .future.  Error message seems good to me.  It was a .future
	because it used to mention a float in the assignment of an integer to
	an unsigned integer.  It now mentions only integers.

Modified files:
	chapel/test/types/scalar/bradc/: assignUintNegative.good 
Removed files:
	chapel/test/types/scalar/bradc/: assignUintNegative.future 

---------------------------------------------------------------------------

12/06/06 10:35:02 -- deitz

Log message:
	Snapshot spec for second internal release.

Modified files:
	chapel/doc/release/: spec.pdf 

---------------------------------------------------------------------------

12/06/06 10:48:59 -- deitz

Log message:
	Updated error message in .good which looks very good.  Removed .future.

Modified files:
	chapel/test/arrays/deitz/: test_array_uint2.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_uint2.future 

---------------------------------------------------------------------------

12/06/06 11:46:58 -- waynew

Log message:
	Checked in a bad test. Corrected test caught by Brad.

Modified files:
	chapel/test/parallel/begin/waynew/: record2.chpl 

---------------------------------------------------------------------------

12/06/06 14:26:35 -- deitz

Log message:
	Editing pass through STATUS with Wayne

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: 
	                                    ra-bradc-strideduintdomain.future 
	chapel/test/classes/deitz/: test_type_in_class3.future 
	./: STATUS 

---------------------------------------------------------------------------

12/06/06 15:24:17 -- deitz

Log message:
	Implemented inout and out to no longer incorrectly rely on pass by
	reference.  Arguments of in and inout are copied in.  Arguments of
	inout and out are copied out.
	
	Fixed a bug in copy propagation in which it was assumed that none of
	the primitives altered an argument.  The primitive fscanf does, though
	this really ought to be wrapped in a primitive that just returns the
	value scanned in.  Copy propagation is now disabled on all arguments
	to the fscanf primitive.
	
	Removed 6 .future files.  Fixed one of the .chpl files to not use a
	variable without a type or an initializer.  Fixed one of the .good
	files to assume left-to-right evaluation order so that the same
	variable passed to multiple inout arguments gets its value back from
	the one on the right.
	
	Removed --formal-temps flag as this is now done.  Removed old code to
	insert formal temps during normalization.
	
	Removed handling of out arguments during normalization.  This is now
	handled with the formal temp insertion.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: copy_propagation.cpp 
	                         functionResolution.cpp normalize.cpp 
	chapel/test/functions/jplevyak/: intent-9.chpl 
	chapel/test/trivial/preston/: aliasing.good 
Removed files:
	chapel/test/functions/bradc/: intents-arrays2.future 
	                              intents-arrays2a.future 
	                              intents-classes3.future 
	                              intents-classes4.future 
	chapel/test/functions/jplevyak/: intent-9.future 
	chapel/test/trivial/preston/: aliasing.future 

---------------------------------------------------------------------------

12/06/06 16:15:35 -- deitz

Log message:
	Finished edit pass of STATUS with Wayne.

Modified files:
	./: STATUS 
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-construct.future 

---------------------------------------------------------------------------

12/06/06 16:52:49 -- deitz

Log message:
	Fixed a bug in handling out intents on generic arguments in which they
	were initialized to nil.
	
	Fixed a .future Chapel code to not assign (1..n) to a domain; I made
	it use [1..n] instead.  Also added a missing writeln.  Removed the
	.future file as this test now works.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/functions/bradc/: intents-arrays.chpl 

---------------------------------------------------------------------------

12/06/06 16:56:08 -- deitz

Log message:
	Actually removed .future.

Removed files:
	chapel/test/functions/bradc/: intents-arrays.future 

---------------------------------------------------------------------------

12/06/06 17:21:10 -- marybeth

Log message:
	Corrected the Frobenius norm calculation.  Added abs to the 2-norm
	vector calculation.
	
	Changed the test program so that D1 = [1..4].  It gives a better
	comparison to D2.  (And, it was how I noticed the Frobenius norm was
	defined incorrectly.)

Modified files:
	chapel/test/release/examples/: norm.chpl norm.good 

---------------------------------------------------------------------------

12/06/06 17:43:38 -- waynew

Log message:
	Test of begin with references to an array variable.
	
	Found a bug with synchronization variables in the expression of a
	conditional statement.  Added .futures and updated STATUS.

Modified files:
	./: STATUS 
Added files:
	chapel/test/parallel/begin/waynew/: array1.chpl array1.good 
	chapel/test/parallel/sync/waynew/: if1.chpl if1.future if1.good 
	                                   if2.chpl if2.future if2.good 

---------------------------------------------------------------------------

12/06/06 21:09:31 -- marybeth

Log message:
	Removed the query on the domain for the third version of the
	norm function.  It's not needed, and confusing for it to be there.

Modified files:
	chapel/test/release/examples/: norm.chpl 

---------------------------------------------------------------------------

12/06/06 21:48:53 -- marybeth

Log message:
	Removing the :[] specification on array formal arguments when
	the domain is not needed.

Modified files:
	chapel/test/release/examples/: norm.chpl 

---------------------------------------------------------------------------

12/06/06 22:08:41 -- marybeth

Log message:
	Initial draft of Norm section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/07/06 12:10:17 -- marybeth

Log message:
	Added : [] type specification for all array formal arguments in the norm example.

Modified files:
	chapel/test/release/examples/: norm.chpl 

---------------------------------------------------------------------------

12/07/06 12:53:18 -- marybeth

Log message:
	Updates to Norm section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/07/06 15:26:38 -- bradc

Log message:
	Filled in initial definition of Random module.
	
	Also improved spacing for standard module
	definitions -- horizontal spacing is now good.
	Vertical spacing is improved, but could use
	further work (which I'm going to try now.
	Wanted to checkpoint before going futher).

Modified files:
	chapel/spec/: Standard_Modules.tex chapel_listing.tex 

---------------------------------------------------------------------------

12/07/06 16:34:00 -- bradc

Log message:
	First cut at motivating principles section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/07/06 17:25:20 -- marybeth

Log message:
	Snapshot of Jacobi revision.  More revisions to come this evening.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/07/06 17:39:57 -- bradc

Log message:
	Rewrote the Getting Started section to more closely
	match our examples/ directory and README in terms of
	the code example, the filename, and the commands given.
	In doing so, got rid of the definition of the entry
	point and added a short description of organizing
	code into modules, with initialization routines and
	entry points.  On one hand this might be a bit much
	for the getting started section.  On the other, it
	sets up the basic Chapel code structure and hopefully
	will lead into the other examples nicely.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/07/06 17:41:06 -- bradc

Log message:
	Now that we have Makefiles in the release,
	added a step to the test of the release
	to make sure they work (i.e., can be invoked
	without resulting in an error).

Modified files:
	chapel/util/: testReleaseHelp 

---------------------------------------------------------------------------

12/07/06 17:41:58 -- bradc

Log message:
	Updated the examples Makefile to recursively go into
	the hpcc06 subdirectory for the all and clean commands.
	Also made both clean commands use -f so that it doesn't
	complain if the files aren't there.

Modified files:
	chapel/test/release/examples/: Makefile 
	chapel/test/release/examples/hpcc06/: Makefile 

---------------------------------------------------------------------------

12/07/06 23:06:21 -- marybeth

Log message:
	Update to Jacobi section.  Added labels for the numbered code listing lines
	and finished revising the section for now.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/08/06 12:36:16 -- marybeth

Log message:
	Changed config var declarations to be comma-separated list in
	prod-cons example.

Modified files:
	chapel/test/release/examples/: prod-cons.chpl 

---------------------------------------------------------------------------

12/08/06 12:58:24 -- marybeth

Log message:
	Updated Norm and Prod-cons sections to add labels to code listings.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/08/06 14:21:35 -- bradc

Log message:
	Removed distinction between language specifiers
	and developers in contributors file.  Added names
	of people who helped with testing.

Modified files:
	./: CONTRIBUTORS 

---------------------------------------------------------------------------

12/08/06 17:35:21 -- marybeth

Log message:
	First pass of linked list stack example.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/08/06 18:02:34 -- bradc

Log message:
	Made the RA example run in a tractable amount of time
	and avoid the main memory leak by making the sequential
	verification used if the number of locales is less than
	log2(m).  Previously, had made the verification step be
	"false" assuming vast numbers of locales, but as we
	learned today, it makes the verification take a ridiculously
	long time for a single locale.  On my machine, this now
	runs in 3 minues, 15 seconds without causing any major
	swapping.

Modified files:
	chapel/test/release/examples/hpcc06/: README ra.chpl 

---------------------------------------------------------------------------

12/08/06 18:22:49 -- marybeth

Log message:
	First pass of array implementation of stack example section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/11/06 14:01:39 -- waynew

Log message:
	Bug fix.  Temporary fix.  Added getElemType function to iterator
	interface so that _to_seq can use it to declare the sequence type
	without calling getNextCursor (indirectly).  Otherwise, side-effects
	occur more than they should.
	
	Removed .future testing side-effects of iterators.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
Removed files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_side_effect3.future 

---------------------------------------------------------------------------

12/11/06 15:36:07 -- deitz

Log message:
	Implemented first pass of memory management on the generated code.
	This memory management uses reference counting which should be
	effective on our standard array and sequence implementations.  It is
	preferable to a more sophisticated garbage collection technique for
	data structures to which it can apply as it can free memory as soon as
	possible.  This is especially important for large arrays.  It is also
	a viable technique for handling references to variables that are
	allocated on the heap for the implementation of begin statements.
	
	Added a flag --free-memory to enable this memory management.  It is
	off by default.  The memory management is all handled in a single pass
	before code generation called memoryManage.
	
	Current limitations include:
	
	  - memory leaks for all strings
	  - memory leaks for all ddata allocated vectors (arrays)
	  - memory leaks associated with our implementation of references
	  - this implementation is not yet thread safe; the reference count is
	    not incremented or decremented atomically
	  - this implementation is not optimized; there is excessive code
	      bloat for which optimizations over temporaries should be
	      effective (generated code size increases by ~1500 LOC for
	      jacobi.chpl)
	  - unknown problems on a handful of tests (<10)
	
	Added 4 tests that show some simple examples for which this first pass
	implementation applies.
	
	Added 2 .futures which should be fixed with better reference handling,
	which is something we need to do anyway.
	
	Added convenience functions:
	
	  FnSymbol::getReturnSymbol() - returns the symbol that is returned by
	    a function assuming the function has been normalized
	
	  FnSymbol::insertBeforeReturn(Expr* ast) - inserts an expression as
	    the last expression in a function before the return statement.  If
	    there is a label before the return statement, it is inserted
	    before this label.  We may need two variants of this and I have to
	    look into why I am using the before return label version.
	
	Added PRIMITIVE_GET_MEMBER_VALUE to return the value of a member
	access rather than a reference to the member value.  This is only put
	in the IR during the memory management pass so as to avoid even more
	excessive code than what is already generated.
	
	Reworked code generation of PRIMITIVE_CHPL_FREE which is never used
	and was previously used to free variables with the on_heap flag,
	presumably those used for our implementation of begin.
	
	Added primitives for garbage collection:
	
	  PRIMITIVE_CLASS_NULL: checks to see if a class is null; with changes
	    I made while in the middle of this, we could potentially do this
	    instead with the != operator and nil to avoid this primitive.
	  PRIMITIVE_GC_INIT: set reference count to zero
	  PRIMITIVE_GC_FREE: decrement reference count
	  PRIMITIVE_GC_TOUCH: increment reference count
	  PRIMITIVE_GC_ISPOS: return true if reference count is positive
	  PRIMITIVE_GC_ISNEG: return true if reference count is negative; this
	    is used only for error checking in the implementation; checks are
	    put in the generated code to make sure the reference count never
	    goes below 0, which should be impossible
	
	Added primitive PRIMITIVE_INT_ERROR to halt the executable and print
	out the cryptic "compiler generated error" message.  This should
	eventually be parameterized on strings, but I didn't do this because
	at some point I was trying to change the string representation.
	
	Note: the call to _free is special-cased for references (which need to
	be reworked) to make sure the reference itself is not null.
	
	Added generated code to initialize all pointers to NULL so that we can
	free uninitialized variables (without marking the initial MOVE).  The
	function _free is designed to not do anything if the pointer is NULL.
	
	Changed the generation of variable declarations to be done at the
	function level since we need to free all local variables at the end of
	the function.  We can't do this trivially with a BlockStmt because of
	goto statements, primarily the goto statements used to ensure that a
	function has a single return point.
	
	All classes now have a field _ref_count in the generated code to keep
	track of the references to it.  It is currently an int(32) but perhaps
	should be an int(64).

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: driver.h primitive.h symbol.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share functionResolution.cpp 
Added files:
	chapel/compiler/passes/: memoryManage.cpp 
	chapel/test/memory/deitz/: EXECOPTS test_seq_leak.chpl 
	                           test_seq_leak.future 
	                           test_seq_leak.good 
	                           test_trivial_leak2.chpl 
	                           test_trivial_leak2.good 
	                           test_trivial_leak3.chpl 
	                           test_trivial_leak3.good 
	                           test_trivial_leak4.chpl 
	                           test_trivial_leak4.good 
	                           test_trivial_leak5.chpl 
	                           test_trivial_leak5.good 
	                           test_trivial_leak6.chpl 
	                           test_trivial_leak6.future 
	                           test_trivial_leak6.good 
Removed files:
	chapel/test/memory/deitz/: test_array_leak.compopts 
	                           test_trivial_leak.compopts 

---------------------------------------------------------------------------

12/11/06 15:38:21 -- deitz

Log message:
	Updated memory test changes as the size of a class has increased.  A
	_ref_count field is added to all classes, even if memory management is
	disabled, as it is by default.

Modified files:
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
	                             printMemTable2.good 

---------------------------------------------------------------------------

12/11/06 16:52:33 -- deitz

Log message:
	Added --free-memory compiler option to my memory leak tests directory.

Added files:
	chapel/test/memory/deitz/: COMPOPTS 

---------------------------------------------------------------------------

12/12/06 09:15:22 -- deitz

Log message:
	Added code during the pruning phase at the end of function resolution
	to eliminate all type actuals and formals from the IR since these have
	already served their purpose of resolution and instantiation.
	
	This fixes the issue with using --no-inline.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

12/12/06 09:35:17 -- deitz

Log message:
	Fixed C warnings by making the formal temp we put in to replace type
	formals a compiler temporary so that we remove them even when they are
	at the global level via inlining.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

12/12/06 15:20:28 -- marybeth

Log message:
	Update to Jacobi example.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/12/06 15:40:53 -- marybeth

Log message:
	Next snapshot of Jacobi section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/12/06 16:18:31 -- marybeth

Log message:
	Corrected typo in halt message in norm example.

Modified files:
	chapel/test/release/examples/: norm.chpl 

---------------------------------------------------------------------------

12/12/06 16:35:29 -- marybeth

Log message:
	Update to Norm section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/12/06 16:47:47 -- deitz

Log message:
	Fixed memory manager to work with aliases (isReference) at least in
	principle.  This removes a .future, but there is still a leak with
	sequences (and all the other short-comings discussed).
	
	The basic change is that aliases are now special cased.  The
	definition of the alias (via a PRIMITIVE_REF) does not result in a
	touch; the idea being that the temporary alias is temporary and does
	not require bumping the count.  Then also there is no free put in at
	the end of the function when the alias goes out of scope.  However, we
	do touch and free the aliases on general moves because this impacts
	whatever they are aliasing.
	
	Note that the aliases need to be temporary because we have no handle
	to up their reference count since it would require a double touch not
	only on a move to the alias but also on a move to whatever is aliased.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp 
Removed files:
	chapel/test/memory/deitz/: test_trivial_leak6.future 

---------------------------------------------------------------------------

12/12/06 16:57:37 -- marybeth

Log message:
	Changes to Producer-Consumer and Stack examples.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/12/06 17:10:47 -- marybeth

Log message:
	Fixed the use of small with the verbatim environments.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/13/06 10:06:06 -- deitz

Log message:
	Inserted GC normalization temporaries during the memory management
	pass to handle the case where a symbol on the left of a MOVE is also
	used in the expression on the right of the move.
	
	Fixed a bug in memory management in which the captured result of a
	function that returned an alias would not be touched; normally there
	is a touch in the function on the returned value and therefore there
	should be no touch at the call-site but in the case of aliases there
	is no touch in the function since there is no touch on the initial
	PRIMITIVE_REF to aliases.
	
	Removed the sequence leak test .future file.
	
	Using --free-memory seems to work on most tests though it is not yet
	freeing arrays and I haven't tested it to see how it does on all of
	the tests.  It also is unoptimized and currently slows down Jacobi on
	a 25x25 array by 48%.  I think there is some easy optimization work to
	do.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp 
Removed files:
	chapel/test/memory/deitz/: test_seq_leak.future 

---------------------------------------------------------------------------

12/13/06 10:09:44 -- deitz

Log message:
	Simplified the format of these memory leak tests.

Modified files:
	chapel/test/memory/deitz/: test_array_leak.chpl 
	                           test_array_leak.good 
	                           test_trivial_leak.chpl 
	                           test_trivial_leak.good 

---------------------------------------------------------------------------

12/13/06 11:35:07 -- bradc

Log message:
	This workshop is frustrating me, so I implemented
	support for carriage-return linefeeds in the
	lexer and added a test to ensure it works.

Modified files:
	chapel/compiler/parser/: chapel.lex 
Added files:
	chapel/test/trivial/bradc/: containsCRLF.chpl containsCRLF.good 

---------------------------------------------------------------------------

12/13/06 11:42:12 -- bradc

Log message:
	Updated CONTRIBUTORS to reflect latest round of
	testing.

Modified files:
	./: CONTRIBUTORS 

---------------------------------------------------------------------------

12/13/06 12:09:08 -- waynew

Log message:
	Some edits.

Modified files:
	chapel/spec/: Parallelism_and_Synchronization.tex 

---------------------------------------------------------------------------

12/13/06 13:36:04 -- deitz

Log message:
	Made _free functions on a class call the _free functions on the
	subclass if the class is an instance of the subclass at runtime.
	Basically, this means that _free is now dynamically dispatched, like a
	C++ virtual destructor.
	
	Added a primitive to free the ddata vector and added a call to this
	primitive in the _free function of all ddata classes.
	
	Fixed a bug in which the calls to free variables when they go out of
	scope did not handle functions with returns not at the end.  These
	free calls are now inserted with a new convenience function
	inserBeforeReturnAfterLabel which complements insertBeforeReturn;
	instead of inserting an expression right before the label befpre the
	return (at the end of the function if the function is followed to the
	end), the expression is inserted right before the return and these
	expressions are executed regardless of what return is taken.
	
	Removed .future file for array leak test.  This changes seems to get
	us to the point where we are freeing all memory associated with
	sequences, arrays, and domains.  It currently has very high overhead.
	To enable it, use --free-memory.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp primitive.cpp 
	                      symbol.cpp 
	chapel/compiler/include/: primitive.h symbol.h 
	chapel/compiler/passes/: memoryManage.cpp 
	chapel/runtime/include/: chplrt.h 
	chapel/runtime/src/: chplmem.c 
Removed files:
	chapel/test/memory/deitz/: test_array_leak.future 

---------------------------------------------------------------------------

12/13/06 14:02:26 -- deitz

Log message:
	Added code so that we only build _free and _touch functions on types
	that require them.  Previously we built these functions on all classes
	and records.  We now build them on all classes but not on all records.
	We only build them on records if some field in the record is a type
	that has a _free function.
	
	This improves performance when using memory management on Jacobi on a
	25x25 array from 54% overhead to 18% overhead.  More to do.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp 

---------------------------------------------------------------------------

12/13/06 14:22:54 -- deitz

Log message:
	Made a new test of Jacobi that is executed in a function.  The
	function returns a tuple that contains the number of iterations and
	the delta.  Added memory stats to the test to print out the memory
	used after the function minus the memory used before the function.
	This prints out zero.
	
	On the single test that I ran, --free-memory adds about 20% overhead.
	I believe this can be decreased significantly with some more
	optimization work.  I also ran this flag on the full test suite and
	see five regressions:
	
	Runtime error (likely because of an untouched reference):
	  arrays/deitz/part2/test_array_of_class1
	  classes/bradc/records/assignRecord2
	
	Compiler error on cobegin packaging:
	  parallel/cobegin/waynew/locals
	
	Non-deterministic (likely because GC is not thread-safe):
	  parallel/begin/waynew/simple2
	  parallel/sync/deitz/test_sync1

Added files:
	chapel/test/memory/deitz/: test_jacobi_leak.chpl 
	                           test_jacobi_leak.good 

---------------------------------------------------------------------------

12/13/06 14:47:22 -- marybeth

Log message:
	More complete edits to Jacobi section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/13/06 15:03:52 -- waynew

Log message:
	Added couple memory leak check tests for indefinite domains and arrays.

Added files:
	chapel/test/domains/indefinite/waynew/: memory1.chpl 
	                                        memory1.compopts 
	                                        memory1.execopts 
	                                        memory1.future 
	                                        memory1.good 
	                                        memory2.chpl 
	                                        memory2.compopts 
	                                        memory2.execopts 
	                                        memory2.good 

---------------------------------------------------------------------------

12/13/06 15:18:00 -- deitz

Log message:
	Added a script to the util directory to walk over a trace file created
	with the --memtrace execution option and report all of the mallocs
	that are not freed and compute the leaked size.

Added files:
	chapel/util/: lookForLeakInTrace 

---------------------------------------------------------------------------

12/13/06 17:08:17 -- marybeth

Log message:
	Completed edits to Stack section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/13/06 17:50:03 -- marybeth

Log message:
	Edits to producer-consumer section that address Brad's comments.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/14/06 10:38:12 -- waynew

Log message:
	Forgot to update with iterator+side-effects temporary bug fix.

Modified files:
	./: STATUS 

---------------------------------------------------------------------------

12/14/06 11:32:07 -- marybeth

Log message:
	Changed font size in \chpl environment to \small.  It looks better with the
	font size of the normal text.

Modified files:
	chapel/spec/: chapel_listing.tex 

---------------------------------------------------------------------------

12/14/06 12:46:35 -- marybeth

Log message:
	Added index items to Domains and Arrays section.

Modified files:
	chapel/spec/: Domains_and_Arrays.tex 

---------------------------------------------------------------------------

12/14/06 13:17:23 -- deitz

Log message:
	Added touch and free calls to handle the elements of ddata vectors via
	the ARRAY_SET primitive.  Made related changes to get GC to work with
	arrays of classes.  Added a test.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: memoryManage.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chplrt.h 
	chapel/runtime/src/: chplmem.c 
Added files:
	chapel/test/memory/deitz/: test_array_of_class_leak.chpl 
	                           test_array_of_class_leak.good 

---------------------------------------------------------------------------

12/14/06 13:42:54 -- deitz

Log message:
	Fixed a bug in GC in which a returned value was not touched at the
	call site if the returned symbol was an argument.  It should be since
	the arguments are not touched.  GC is now working on all
	non-multithreaded tests, though with some efficiency issues.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp 

---------------------------------------------------------------------------

12/14/06 13:53:26 -- deitz

Log message:
	Fixed a bug in which fields in a type nested in a function were freed
	as if they were variables in the function.
	
	This fixes the cobegin test when using --free-memory.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp 

---------------------------------------------------------------------------

12/14/06 14:41:10 -- deitz

Log message:
	Applied Wayne's suggested edits and bug fixes to the spec.

Modified files:
	chapel/spec/: Classes.tex Conversions.tex Domains_and_Arrays.tex 
	              Expressions.tex Functions.tex Generics.tex 
	              Iterators.tex Locality_and_Distribution.tex 
	              Records.tex Sequences.tex Statements.tex 
	              Tuples.tex Types.tex Variables.tex 
	              syntax_listing.tex 

---------------------------------------------------------------------------

12/14/06 14:55:47 -- marybeth

Log message:
	Changes to motivating principles section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/14/06 14:57:12 -- deitz

Log message:
	Added a .future to show that we leak memory related to putting things
	on the heap to handle begin.

Added files:
	chapel/test/memory/deitz/: test_threaded_leak.chpl 
	                           test_threaded_leak.future 
	                           test_threaded_leak.good 

---------------------------------------------------------------------------

12/14/06 14:57:44 -- deitz

Log message:
	Fixed .good to be what we want not what we have.

Modified files:
	chapel/test/memory/deitz/: test_threaded_leak.good 

---------------------------------------------------------------------------

12/14/06 15:03:12 -- deitz

Log message:
	Update wrong memory info on chap07

Modified files:
	chapel/test/modules/standard/memory/countMemory/: 
	                                                  countMemory.chap07.good 

---------------------------------------------------------------------------

12/14/06 15:08:39 -- marybeth

Log message:
	Added a few comments in norm example.

Modified files:
	chapel/test/release/examples/: norm.chpl 

---------------------------------------------------------------------------

12/14/06 15:21:18 -- marybeth

Log message:
	Added a few comments in jacobi example.

Modified files:
	chapel/test/release/examples/: jacobi.chpl 

---------------------------------------------------------------------------

12/14/06 15:33:49 -- marybeth

Log message:
	Added standard header comment to norm, jacobi and prod-cons.

Modified files:
	chapel/test/release/examples/: norm.chpl jacobi.chpl 
	                               prod-cons.chpl 

---------------------------------------------------------------------------

12/14/06 15:41:32 -- deitz

Log message:
	Simplified nested function to handle conditional || and && operators.
	These cannot be used as an lvalue so the nested function does not have
	to be a setter.  (Really we shouldn't use nested functions at all, but
	we have some more work to do on the IR before that can happen).  There
	was an exponential explosion in long expressions of multiple || or &&
	subexpressions.
	
	This fixes domains/indefinite/waynew/record_hash which uses a large
	but modest || expression and was timing out on the Sun and almost
	crashing on our Linux systems even.  Since the test used 14 ||
	operators in a single expression, this resulted in the creation of,
	crazily, 16384 functions, 14 of which were used.

Modified files:
	chapel/compiler/AST/: build.cpp 

---------------------------------------------------------------------------

12/14/06 16:13:37 -- marybeth

Log message:
	Changed norm example to implement Frobenius norm for vectors.
	(It's the same as the 2-norm.)
	
	Changed the test program too, so the output changed.
	
	Corresponding changes will be made to the spec.

Modified files:
	chapel/test/release/examples/: norm.chpl norm.good 

---------------------------------------------------------------------------

12/14/06 16:35:37 -- marybeth

Log message:
	Updated norm example section with comments from Steve, Wayne and John.
	
	Changed the vector norm case to compute the Frobenius norm (which is the
	2-norm for vectors).
	
	Added 3 comments to the example code.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/14/06 18:13:48 -- marybeth

Log message:
	Updates to jacobi, prod-cons and stack.
	
	Intro to examples section added.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/14/06 18:32:31 -- deitz

Log message:
	Disabled bytesPerLocale on Mac OS X to get the runtime to compile.

Modified files:
	chapel/runtime/src/: chplsys.c 
Added files:
	chapel/runtime/include/darwin/: chplsys.h 

---------------------------------------------------------------------------

12/14/06 20:53:42 -- deitz

Log message:
	Kludge on seqNode _free during code generation to make it
	non-recursive.  A more general solution is later, after the initial
	release.
	
	Replaced --free-memory with --no-gc and made garbage collection the
	default.  Expect regressions associated with begin, cobegin, and
	garbage collection.
	
	Expect regression compflags/bradc/help/userhelp.  There needs to be
	some short readme about how to update this test.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: memoryManage.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
Removed files:
	chapel/test/domains/indefinite/waynew/: memory1.compopts 
	                                        memory2.compopts 
	chapel/test/memory/deitz/: COMPOPTS 

---------------------------------------------------------------------------

12/15/06 09:55:30 -- deitz

Log message:
	Disabled GC on the class that stores local arguments for begin and
	cobegin since it is specially treated.
	
	There is an error on
	  parallel/sync/deitz/test_sync2
	which I believe can easily be fixed.  This fixes the other regressions.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp parallel.cpp 

---------------------------------------------------------------------------

12/15/06 10:27:11 -- deitz

Log message:
	Added touch to variables referenced by begin and cobegin wrapper
	class.  These are not freed, so there is a memory leak here.  But that
	is better than a seg fault and/or memory corruption.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp 

---------------------------------------------------------------------------

12/15/06 11:00:27 -- marybeth

Log message:
	Changes to jacobi and jacobi-routine:  Added more comments.  Changed
	variable names from A and Temp to X and XNew.

Modified files:
	chapel/test/release/examples/: jacobi.chpl jacobi-routine.chpl 

---------------------------------------------------------------------------

12/15/06 11:02:17 -- deitz

Log message:
	Reformatted STATUS.

Modified files:
	./: STATUS 

---------------------------------------------------------------------------

12/15/06 11:04:05 -- waynew

Log message:
	Added locks to the reference counting mechanism for our garbage collection.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/passes/: parallel.cpp 

---------------------------------------------------------------------------

12/15/06 11:06:08 -- marybeth

Log message:
	Update to jacobi.chpl to keep lines with comments to 80 characters.

Modified files:
	chapel/test/release/examples/: jacobi.chpl 

---------------------------------------------------------------------------

12/15/06 12:06:45 -- marybeth

Log message:
	Update to jacobi section, changing the names of the arrays from A and Temp
	to X and XNew.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/15/06 12:42:02 -- bradc

Log message:
	Incorporated feedback from John, Steve, Wayne into overview.
	Bumped version number to 0.702 for release.
	
	Anybody else have outstanding edits to the overview, or can
	we capture the PDF into the release docs directory?

Modified files:
	chapel/spec/: Language_Overview.tex spec.tex 

---------------------------------------------------------------------------

12/15/06 13:34:38 -- bradc

Log message:
	Removing jacobi-routine from examples directory.

Modified files:
	chapel/test/release/examples/: Makefile README 
Removed files:
	chapel/test/release/examples/: jacobi-routine.chpl 
	                               jacobi-routine.good 

---------------------------------------------------------------------------

12/15/06 14:22:16 -- marybeth

Log message:
	Added just a couple comments to the examples.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/15/06 14:44:02 -- marybeth

Log message:
	Added index label for array slicing.

Modified files:
	chapel/spec/: Domains_and_Arrays.tex 

---------------------------------------------------------------------------

12/15/06 14:47:13 -- bradc

Log message:
	Adding futurized file I/O example that has three
	bugs: whole array reads, multiple-argument reads,
	and multiple-argument writes to files not being
	spaced apart properly.  Adding a working version
	of the test as well.
	
	Adding future showing that using --chpl-cg-lines
	causes both branches of a conditional to be taken.
	
	Updated STATUS file with these issues.

Modified files:
	./: STATUS 
	chapel/test/types/file/: .cvsignore 
Added files:
	chapel/test/compflags/bradc/: .cvsignore linenoConditional.chpl 
	                              linenoConditional.compopts 
	                              linenoConditional.future 
	                              linenoConditional.good 
	chapel/test/types/file/: fileIO.chpl fileIO.future fileIO.good 
	                         fileIO2.chpl fileIO2.good 

---------------------------------------------------------------------------

12/15/06 14:50:01 -- bradc

Log message:
	A few updates/clarifications.

Modified files:
	./: STATUS 

---------------------------------------------------------------------------

12/15/06 15:02:56 -- marybeth

Log message:
	Added index labels to Input and Output section.

Modified files:
	chapel/spec/: Input_and_Output.tex 

---------------------------------------------------------------------------

12/15/06 15:40:07 -- marybeth

Log message:
	Added index labels to overview section.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

12/15/06 16:10:33 -- bradc

Log message:
	Tightened up wording of README and added a paragraph
	about the performance bottlenecks.

Modified files:
	chapel/test/release/examples/hpcc06/: README 

---------------------------------------------------------------------------

12/15/06 16:30:54 -- deitz

Log message:
	Release version of spec.

Modified files:
	chapel/doc/release/: spec.pdf 

---------------------------------------------------------------------------

12/15/06 16:32:09 -- bradc

Log message:
	Added stream-nopromote.chpl to the examples directory
	which replaces the A = B + alpha * C; line with a
	forall loop, causing it to run in ~30 seconds on
	solitary rather than hours.
	
	Updated the README files to note this difference and
	added the build option to the Makefile.  Also made
	the hpcc06 Makefile throw the --ccflags=-O3 option
	for maximum performance.

Modified files:
	chapel/test/release/examples/: README 
	chapel/test/release/examples/hpcc06/: .cvsignore Makefile README 
Added files:
	chapel/test/release/examples/hpcc06/: stream-nopromote.chpl 
	                                      stream-nopromote.compopts 
	                                      stream-nopromote.execopts 
	                                      stream-nopromote.good 

---------------------------------------------------------------------------

12/15/06 16:37:28 -- bradc

Log message:
	Bumped version number to 0.4.-1 in hopes that
	after check in, it will bump to 0.4.0 for the
	release.

Modified files:
	./: BUILD_VERSION 
	chapel/compiler/main/: version_num.h 

---------------------------------------------------------------------------

12/18/06 10:44:42 -- bradc

Log message:
	Updated the userhelp and version tests and added a
	README file for the userhelp test.

Modified files:
	chapel/test/compflags/bradc/help/: userhelp.txt 
	chapel/test/compflags/bradc/noexec/: version.goodstart 
Added files:
	chapel/test/compflags/bradc/help/: README 

---------------------------------------------------------------------------

12/18/06 11:39:11 -- deitz

Log message:
	Removed type fields from classes and records after function resolution.
	
	Updated seqNode _free kludge to work without these type fields.
	
	Changed _ref_count to int(64) mainly to get memory tests working on
	all platforms.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

12/18/06 11:39:55 -- deitz

Log message:
	Updated memory tests with change to _ref_count

Modified files:
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
	                             printMemTable2.good 

---------------------------------------------------------------------------

12/18/06 11:59:07 -- deitz

Log message:
	Removed unused code for scalar replacement of records.  This has been
	unused for a long time, never was working, and would be more trouble
	than it would be worth using as a starting point to do this work at a
	later point.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

12/18/06 14:30:17 -- bradc

Log message:
	Added a developer's flag (--ccwarnings) to turn on
	warnings with the compiler-generated C code.  Once
	we are back to a warning-free state (or maybe we
	are, I didn't test this), the intention is to turn
	this on in one or all of our nightly regressions.

Modified files:
	chapel/compiler/include/: files.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

12/19/06 09:49:11 -- deitz

Log message:
	Added two functions for traversing expressions (no symbols or types)
	in post-order without first collecting them all into a vector.
	
	  Expr* getFirstExpr(expr)
	  Expr* getNextExpr(expr)
	
	Added a stylized loop for_exprs_postorder.  For example, use
	
	  for_exprs_postorder(expr, fn->body) { ... }
	
	to traverse the expressions in the body of a function.  The identifier
	expr is a new variable of type Expr*.
	
	Refactored internal traversal of function resolution to use this new
	traversal function instead of collect_top_asts.  It has the same
	semantics, but does not do the whole collection first.  This change is
	in preparation for moving parameter folding into function resolution.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

12/19/06 11:28:30 -- deitz

Log message:
	Removed unused FnSymbol::hasVarArgs.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/19/06 14:36:11 -- deitz

Log message:
	Moved expansion of functions that take a variable number of arguments
	(...) into function resolution.  Unspecified variable number of
	arguments are now handled in a more exact way (the arguments are
	stamped out based on the number of actual arguments at the call site).
	This is currently done during the determination of candidate functions
	so we may still stamp out the function even if the call does not
	result in a call to this function.  The stamped out functions are
	cached so we only stamp out one version for each different number of
	actual arguments.
	
	Statistics for compilation of arrays/deitz/jacobi
	  Speedup of compilation:        10.0%
	  Decrease in maximum AST size:  13.5%

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

12/20/06 11:13:14 -- deitz

Log message:
	Minor changes to normalize in order to clean and understand parameter
	folding and the type changes in normalization.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/20/06 18:14:51 -- waynew

Log message:
	Small hack to remove a memory leak generated by use of begin blocks.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp parallel.cpp 

---------------------------------------------------------------------------

12/21/06 12:18:51 -- bradc

Log message:
	Copy of Dongarra's reference LU code in Matlab
	and a few attempts to sketch that code out in
	Chapel, with some liberties taken.  This needs
	more work, but wanted to snapshot, and for Mary
	Beth's reference.

Added files:
	chapel/test/studies/lu/: NOTEST dongarra-lu-compiles.chpl 
	                         dongarra-lu.chpl dongarra.matlab 

---------------------------------------------------------------------------

12/21/06 13:20:44 -- deitz

Log message:
	Removed change_types_to_values from normalization pass.
	
	Made Symbol::isTypeVariable true for all type symbols.  This is used
	on VarSymbols to signal that it is a type.  Now that type symbols are
	left in the AST in the places where they were changed to variables,
	this signal lets us know that it is a type.
	
	Minor change to function resolution to evaluate the default
	constructor for more types than previous.  This is necessitated
	because moves are associated with less types.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

12/21/06 15:30:54 -- deitz

Log message:
	Removed most uses of build(ast) function, replacing them with
	normalize(ast).  Two more uses to be removed next.
	
	Rearranged code in buildDefaultFunctions and refactored it to use gFns
	rather than its own functions vector.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp parallel.cpp 

---------------------------------------------------------------------------

12/22/06 09:29:35 -- deitz

Log message:
	Removed build(fn) function.  Use normalize instead, and scopeResolve
	if necessary.
	
	Refactored code to build default read and write functions.  All
	default functions are now built in buildDefaultFunctions.

Modified files:
	chapel/compiler/AST/: astutil.cpp type.cpp 
	chapel/compiler/include/: astutil.h type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 

---------------------------------------------------------------------------

12/22/06 11:16:45 -- deitz

Log message:
	Added or expanded .cvsignore files in test directory.

Modified files:
	chapel/test/release/examples/hpcc06/: .cvsignore 
	chapel/test/studies/hpcc/RA/: .cvsignore 
Added files:
	chapel/test/arrays/deitz/domains/: .cvsignore 
	chapel/test/arrays/deitz/myarray/: .cvsignore 
	chapel/test/arrays/deitz/part2/: .cvsignore 
	chapel/test/arrays/deitz/promotion/: .cvsignore 
	chapel/test/arrays/deitz/stride/: .cvsignore 
	chapel/test/arrays/waynew/: .cvsignore 
	chapel/test/classes/deitz/constructors/: .cvsignore 
	chapel/test/classes/deitz/dispatch/: .cvsignore 
	chapel/test/classes/marybeth/: .cvsignore 
	chapel/test/classes/waynew/: .cvsignore 
	chapel/test/compflags/bradc/twomodulesnomain/: .cvsignore 
	chapel/test/compflags/deitz/: .cvsignore 
	chapel/test/domains/deitz/: .cvsignore 
	chapel/test/domains/marybeth/: .cvsignore 
	chapel/test/domains/waynew/: .cvsignore 
	chapel/test/execflags/bradc/: .cvsignore 
	chapel/test/flowanalysis/recursion/: .cvsignore 
	chapel/test/functions/deitz/: test_fold1.chpl test_fold1.good 
	chapel/test/functions/deitz/Time/: .cvsignore 
	chapel/test/functions/deitz/hips06/: .cvsignore 
	chapel/test/functions/deitz/infer/: .cvsignore 
	chapel/test/functions/waynew/: .cvsignore 
	chapel/test/memory/deitz/: .cvsignore 
	chapel/test/studies/blas/marybeth/: .cvsignore 
	chapel/test/studies/jacobi/bradc/: .cvsignore 
	chapel/test/trivial/marybeth/: .cvsignore 
	chapel/test/types/type_variables/deitz/part5/: .cvsignore 

---------------------------------------------------------------------------

12/22/06 11:17:55 -- deitz

Log message:
	Moved fold_params as far down in normalization as possible.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

12/22/06 11:40:12 -- deitz

Log message:
	Added minimal support for parameter functions by moving some parameter
	folding into function resolution to enable a test of parameter
	functions to work.  The full parameter folding mechanism still exists
	in normalization.  Parameter folding handled in function resolution
	includes expansion of homogeneous tuple types, folding of primitive
	moves, and updating of symbols that are parameters as determined by
	the folding of primitive moves.
	
	A parameter function is declared like a variable function except with
	the keyword param in place of var.
	
	During function resolution, if a call resolves to a parameter
	function, the call is replaced by the parameter that the function
	returns.
	
	Added Symbol tag canParam to complement canReference.  This tag is
	used on temporaries to say that they can become parameters if a
	parameter is moved into it during the parameter folding that takes
	place in function resolution.
	
	Added FnSymbol tag isParam to mark a function as a parameter function.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

12/22/06 14:49:35 -- marybeth

Log message:
	Checking in fft2d.future.
	
	I didn't have time to fully resolve this problem in my mind.  I'd like to
	keep this as a future until I can do a more thorough comparison between
	the linux and linux64 environments.

Added files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft2d.future 

---------------------------------------------------------------------------

01/02/07 10:32:41 -- deitz

Log message:
	Removed expansion of homogeneous tuples from normalization.  Applied
	function resolution folding to the resolution of type expressions of
	formal arguments and function returns.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

01/03/07 09:46:56 -- deitz

Log message:
	Refactored instantiation so that the where clause can be folded using
	function resolution parameter folding.
	
	Applied function resolution parameter folding to the default
	expressions on type arguments.
	
	Moved folding of parameterized primitive types to function resolution.
	Replicated folding of _init, _copy, _cast, type equality and
	inequality in function resolution (also done in normalization).
	Replicated folding of << and >> in functio n resolution using
	parameter functions added to the base module.
	
	Fixed cast in bpop test which will no longer work once parameter
	folding follows the semantics of function resolution.  This is worth
	noting:
	
	  -2:int(8)
	
	currently produces an int(8) value of -2 since 2 is cast to an int(8)
	and then - is applied to it using parameter folding which maintains
	the int(8) type.  But were this not folded, the result would be an
	int(32) since all operations apply only to 32 and 64 bit integers.
	Once parameter folding is handled correctly, the result will be the
	same, an int(32) with value -2.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         semanticChecks.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/test/trivial/deitz/: test_bpop2.chpl 

---------------------------------------------------------------------------

01/03/07 14:21:17 -- bradc

Log message:
	Fixed memory test regressions as a stopgap until the
	memory routines can be rewritten in Chapel as a module.

Modified files:
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
	                             printMemTable2.chpl 
	                             printMemTable2.good 
Added files:
	chapel/test/memory/shannon/: memstatPrint.linux64.good 
	                             printFinalMemStat.linux64.good 

---------------------------------------------------------------------------

01/03/07 16:38:21 -- deitz

Log message:
	Replicated the rest of parameter folding into function resolution.  It
	is still first exercised in normalization and so this code is not
	going to have much effect until more of that code is removed.  Added
	parameter versions of the other arithmetic functions that we fold.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

01/04/07 10:10:11 -- deitz

Log message:
	Replicated handling of getters of parameters and types in function
	resolution parameter folding (from normalization parameter handling).
	
	Moved normalization parameter folding to the end of normalization.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

01/04/07 11:09:19 -- bradc

Log message:
	Fixed this test to work on Linux64 by making
	the threshold twice as great as the aarray size.

Modified files:
	chapel/test/memory/shannon/: printMemTable2.chpl 
	                             printMemTable2.good 

---------------------------------------------------------------------------

01/04/07 13:31:10 -- deitz

Log message:
	Decreased the precedence of casts below unary minus.  Updated the spec
	and fixed a test case.
	
	For example, this means '-2: uint(32)' is a uint(32), not an int(64).

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/spec/: Expressions.tex 
	chapel/test/trivial/marybeth/: casts1.chpl 

---------------------------------------------------------------------------

01/04/07 16:06:34 -- deitz

Log message:
	Fixed some problems with parameter loop folding resulting from its
	move to function resolution.
	
	Normalization parameter folding is still turned on, but turning it off
	now works for many simple codes (1280/1476 tests).

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

01/05/07 09:52:45 -- deitz

Log message:
	Added canType field to Symbol to mirror canParam field.  It is used
	for compiler inserted temporaries and signals that the temporary can
	be a type.  This fixes some problems with moving parameter folding
	into function resolution.  When disabling normalization parameter
	folding, we are now at 1387/1476 tests passing.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

01/05/07 13:45:38 -- deitz

Log message:
	Applied function resolution parameter folding to the variable argument
	expression on a formal argument.  Disabling normalization parameter
	folding now results in only 6 regressions.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/05/07 15:22:25 -- bradc

Log message:
	Fixed a SunOS regression due to their sprintf()
	not being as resilient to NULL pointers as Linux's.

Modified files:
	chapel/compiler/parser/: countTokens.cpp 

---------------------------------------------------------------------------

01/05/07 16:29:32 -- deitz

Log message:
	Removed .future for test that has been working for a while.  I'm not
	sure why at some point I thought it wasn't as it doesn't appear that
	it wasn't.

Removed files:
	chapel/test/functions/bradc/: defaultParamInOut.future 

---------------------------------------------------------------------------

01/05/07 16:30:51 -- deitz

Log message:
	Disabled parameter folding in normalization.  This completes the move
	of parameter folding into function resolution and should enable some
	major improvements and bug fixes.
	
	Fixed variable argument expansion to handle generic functions better
	in the case that a function is generic but due to the variable
	argument list needs to be instantiated twice, once on the arguments
	before the variable number of arguments and then on the arguments
	after.  This shows up in arrays/deitz/test_assign_slice2 which has a
	situation like
	
	  def foo(x, a: int... x.rank, y) {
	
	This function needs to be instantiated twice.  In a first pass, x
	needs to be instantiated.  Then the argument list can be expanded.
	Then, only after the argument list is instantiated, y can be
	instantiated.  The actual corresponding to y is not known before the
	variable argument list is expanded.
	
	One way to simplify instantiation may be to have it work on one
	argument at a time and always rely on multiple instantiations when
	multiple arguments require subsitutions.
	
	Made it so that the isGeneric tag on functions is now copied when the
	functions are copied.  It is unset during instantiation.  This enables
	the case where parameter folding replicates a nested function that is
	generic.  Previously, copied functions were set non-generic and
	instantiation used copying.  This change is more sane and does not
	embed this in copying.
	
	Disabled checking for over-instantiation on functions defined in the
	base module.  This includes all of the parameter folding functions.
	This makes the error message clearer for
	types/type_variables/deitz/part3/test_overinstantiate1.  Without this
	disabling, the compiler complains about + being over-instantiated.
	Though not a problem in any of our tests, each unique parameter folded
	value now results in a unique instantiation.  There is room for
	optimization here, but it may not be as bad as it sounds.
	
	Moved the checking of valid enumerated type constants after
	resolution, rather than after normalization, since parameter folding
	is in function resolution.  Enumerated types and their constants are
	still not as orthogonal as one would like, see comment in function
	resolution.
	
	Updated test_param_fold5 to make a bogus function call in an
	unexecuted path rather than a bogus variable access, since the bogus
	variable access is now an error, with parameter folding in function
	resolution.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         semanticChecks.cpp 
	chapel/test/trivial/deitz/: test_param_fold5.chpl 

---------------------------------------------------------------------------

01/05/07 17:14:38 -- bradc

Log message:
	Started cleaning up this directory so the NOTEST could
	be removed before the release, but never finished.

Modified files:
	chapel/test/studies/jacobi/bradc/: jacobi-play-brad.chpl 
	                                   jacobi-rankind-brad.chpl 
	                                   jacobi-simple-brad.chpl 
	                                   jacobi-simple-compiles.chpl 
	                                   jacobi-slice-brad.chpl 
Added files:
	chapel/test/studies/jacobi/bradc/: jacobi-play-brad.notest 
	                                   jacobi-play2-brad.notest 
	                                   jacobi-rankind-brad.notest 
	                                   jacobi-simple-brad.future 
	                                   jacobi-simple-brad.good 
	                                   jacobi-simple-compiles.good 
	                                   jacobi-slice-brad.future 
	                                   jacobi-slice-brad.good 
	                                   jacobi-slice-compiles.chpl 
	                                   jacobi-slice-compiles.good 
Removed files:
	chapel/test/studies/jacobi/bradc/: NOTEST 

---------------------------------------------------------------------------

01/05/07 17:17:49 -- bradc

Log message:
	Since param functions are now supported, changed the
	numBits() and numBytes() functions in the Types module
	into param functions and removed an unnecessary cast
	in the probSize module of the HPCC study.

Modified files:
	chapel/modules/standard/: Types.chpl 
	chapel/test/release/examples/hpcc06/: README probSize.chpl 

---------------------------------------------------------------------------

01/05/07 17:25:30 -- bradc

Log message:
	Mary Beth pointed out that what I thought was an
	approximate equals was actually a not-equals.  Oops!
	Also, removed a file which I didn't realize never
	got filled in.
	
	Still need to break this into three cases: ideal
	implementation, safe implementation, compiles
	currently.

Modified files:
	chapel/test/studies/lu/: dongarra-lu.chpl 
Removed files:
	chapel/test/studies/lu/: dongarra-lu-compiles.chpl 

---------------------------------------------------------------------------

01/08/07 09:34:36 -- deitz

Log message:
	Removed dead code for parameter folding in normalization.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

01/08/07 09:40:15 -- deitz

Log message:
	Removed .future files for tests that work now that parameter folding
	is done during function resolution.  Brad- see the note in
	
	  test/modules/bradc/ra-paramWidth.future
	
	It mentions fixing something in some of the ra* benchmarks.

Removed files:
	chapel/test/modules/bradc/: ra-paramWidth.future 
	                            use_modulewithconst.future 

---------------------------------------------------------------------------

01/08/07 11:49:37 -- deitz

Log message:
	Changed handling of instantiation by parameters to use the function
	resolution parameter map rather than to subsitute the parameters
	directly into the function.  Then changed handling of the parameter
	map in function resolution to insert a cast if the type of the symbol
	that the parameter is replacing is different then the type of the
	parameter.  This fixes a .future which showed that "true + true"
	yielded true rather than 2 even though "var x = true; var y = true; x
	+ y" yielded 2.  Parameter folding is now the same as regular
	evaluation in this case.  Removed a .future.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
Removed files:
	chapel/test/trivial/deitz/: test_true_plus.future 

---------------------------------------------------------------------------

01/08/07 12:21:38 -- deitz

Log message:
	Added a _cond_test inlined function to serve two purposes:
	
	  Restrict conditional expressions to bool, classes, and integral
	  types, as per the spec.
	
	  Act on sync and single variables so they are read when used as
	  conditional expressions.  This is not yet working because of an
	  ambiguity resulting because a sync variable is itself a class and
	  thus an object.
	
	I use conditional expressions here to refer to those expressions
	controlling if...then statements and expressions, while statements,
	and do...while statements.
	
	Added a test to show an error when using if on floats.  Previously
	this "worked" and compared the float as C does.  Now it uses the
	compilerError function to complain about the type.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_base.chpl 
Added files:
	chapel/test/trivial/deitz/: test_bad_if.chpl test_bad_if.good 

---------------------------------------------------------------------------

01/08/07 16:36:45 -- bradc

Log message:
	Based on Steve's latest parameter folding fix, changed
	RA code to use randWidth named parameter to define
	randType rather than hard-coding the value "64".

Modified files:
	chapel/test/release/examples/hpcc06/: README ra-randstream.chpl 

---------------------------------------------------------------------------

01/08/07 16:46:24 -- deitz

Log message:
	Added a pragma "no object" and applied it to the _singlevar and
	_syncvar generic classes that implement synchronization variables.
	This pragma makes it so that these classes do not inherit from object,
	the root of all classes.  This fixes the ambiguity with the new
	_cond_test function and makes using a single or sync var in the
	context of a conditional statement condition or while statement
	condition count as a read.  Removed two .futures.
	
	The previous ambiguity arose because the _cond_test function is
	defined over object and bool so a sync var of bool could be coerced to
	both an object and a bool.  Now, sync var can no longer be coerced to
	object.  That is good.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
Removed files:
	chapel/test/parallel/sync/waynew/: if1.future if2.future 

---------------------------------------------------------------------------

01/15/07 10:05:45 -- deitz

Log message:
	Enabled cast from uint to complex. Removed a .future.

Modified files:
	chapel/compiler/AST/: expr.cpp 
Removed files:
	chapel/test/types/complex/bradc/: uintToComplex.future 

---------------------------------------------------------------------------

01/15/07 10:24:49 -- deitz

Log message:
	Removed types in AST that are on the rhs of moves during function
	resolution cleanup.  This reenables --unoptimized and fixes the single
	general regression.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/15/07 11:15:07 -- deitz

Log message:
	Removed 2 superfluous calls to normalize now that parameter folding is
	part of resolution.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/15/07 12:02:20 -- deitz

Log message:
	Simplified implementation of short-circuiting && and || to rely on the
	single method "true?" rather than the two methods "true?" and
	"false?".  Updated the spec to document this change.  While I was
	defining this, I knew I wanted to make this change.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/spec/: Expressions.tex 

---------------------------------------------------------------------------

01/15/07 13:14:22 -- deitz

Log message:
	Refactored tag_generic to move it into function resolution and out of
	normalization.  This should be almost enough to stop renormalizing on
	each instantiation, but this checkin does not make that change.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 

---------------------------------------------------------------------------

01/15/07 13:39:13 -- deitz

Log message:
	Stopped normalizing every function that is instantiated.  The only
	functions that are now normalized during instantiation are the tuple
	functions which are built during instantiation and so need to be
	normalized.  This decreases function resolution time by 23%.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

01/15/07 14:03:52 -- deitz

Log message:
	Moved cullOverReferences from after inlining to before parallel2 and
	inlining.  This decreases time spent culling excess references by 64%
	(0.181 to 0.066) and better organizes the pass list into categories.
	Added some documentation to the passlist file.

Modified files:
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

01/15/07 14:11:49 -- deitz

Log message:
	Stylized all pass functions to use caps rather than underscores
	between words.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         semanticChecks.cpp 

---------------------------------------------------------------------------

01/15/07 14:46:10 -- deitz

Log message:
	Removed extra curly braces in generated functions that appear after
	local variable declarations and were introduced within the past few
	months, during the addition of reference counts.
	
	Removed noops after function resolution.  Most are inserted during
	function resolution.
	
	This combination of changes shortens the generated code for jacobi to
	9607 lines (counted via wc output/*) from 11259 lines.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/15/07 16:47:27 -- waynew

Log message:
	Groundwork for the serial block feature.
	 - Added primitives to set/get per-thread serial-mode state
	 - _chpl_cobegin and _chpl_begin runtime routines now look at the serial-mode
	   state
	 - Added locks in the chplmem runtime for memtrack, memstat, and memtrace
	   states.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: parallel.cpp 
	chapel/runtime/include/: chplmem.h chplthreads.h 
	chapel/runtime/src/: chplmem.c chplthreads.c 

---------------------------------------------------------------------------

01/16/07 09:23:45 -- deitz

Log message:
	Refactored implementation of local copy propagation making some minor
	changes and removing some unnecessary conservativeness.
	
	Rearranged include list in normalize.cpp.

Modified files:
	chapel/compiler/passes/: copy_propagation.cpp normalize.cpp 

---------------------------------------------------------------------------

01/16/07 10:42:08 -- deitz

Log message:
	Stopped inserting casts into default wrappers.
	
	Removed _cast functions defined over sync and single variable types.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/modules/standard/: _chpl_base.chpl 

---------------------------------------------------------------------------

01/16/07 15:20:38 -- waynew

Log message:
	Final bits of the serial block implementation.
	 - Changed the parser to recognize serial and build the serial block.
	 - Reversed the order of the reversed statements in a cobegin. Order matters
	   now.
	
	Added a couple begin and cobegin tests with serial.

Modified files:
	chapel/compiler/AST/: build.cpp view.cpp 
	chapel/compiler/include/: build.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: parallel.cpp 
	chapel/runtime/src/: chplthreads.c 
Added files:
	chapel/test/parallel/serial/waynew/: begin1a.chpl begin1a.good 
	                                     begin1b.chpl begin1b.good 
	                                     cobegin1a.chpl 
	                                     cobegin1a.good 
	                                     cobegin1b.chpl 
	                                     cobegin1b.good 

---------------------------------------------------------------------------

01/17/07 09:24:46 -- deitz

Log message:
	Removed some unnecessary casts that were inserted around a default
	value of a type even if the type could be inferred from the default
	value.  The only case where it cannot be inferred is with regards to
	classes where the default value of all class types is nil.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

01/17/07 09:52:16 -- deitz

Log message:
	note: I'm working on implementing the _cast function; the changes in
	this checkin were part of a bigger change.  I'm pulling them out to
	try to isolate a bug.
	
	Extended compilerError semantics so that it looks more like a halt; it
	can now print out strings and types, rather than just a single string.
	Updated the spec.
	
	Renamed _nilType to nil at the start of function resolution so that
	errors relating to this type will be less mysterious to the user.
	
	Inserted a call to resolve the types of the formal arguments to a
	function after it is instantiated and before the where clause is
	expanded to handle codes like
	
	  def foo(type t, x: int(32)) where x.type == t {
	
	In this code, the type of the formal argument x needs to be resolved
	before the where clause can be evaluated, but in some cases the type
	of x cannot be resolved until after the function is instantiated.
	Added a test case.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/spec/: Lexical_Structure.tex 
Added files:
	chapel/test/functions/deitz/: test_where.chpl test_where.good 

---------------------------------------------------------------------------

01/17/07 11:05:52 -- deitz

Log message:
	Note: regressions:
	
	[Error matching compiler output for arrays/bradc/stridedArrayArg2]
	[Error matching compiler output for studies/blas/marybeth/saxpy1]
	
	  These tests use an illegal cast to implement something like
	
	    A *= 2;
	
	  where A is an array.  We need to be more careful about the implicit
	  cast that we add to implement compound assignments.  Recall that
	  this implicit cast is necessary to handle int(8), uint(8), etc.
	
	[Error matching compiler output for classes/deitz/dispatch/test_dd1]
	
	  This test uses a dynamic cast to convert a class C to a class D
	  where D is derived from C.  Dynamic casts are not yet implemented
	  but I'm working on it now.
	
	Specialized _cast function which prior to this change had been
	completely generic except for the special handling of tuples to
	complex.
	
	Added _cast functions between all primitive types as well as a generic
	one that works for all implicit coercions other than the primitive
	types.  Added an error case to catch all illegal casts and print out a
	descriptive error message that mentions the two types by name.
	
	Fixed the output to
	
	  test classes/bocchino/test_nil_is_false
	
	This simple test contains an explicit cast of the value nil to bool.
	I remember that what this test was supposed to check was to see if you
	can do something like "if c then ..." where c is a class.  This
	follows the statement implicit bool conversion rule and I wrote a test
	that checks to make sure we can handle that.  This is very different
	from allowing an explicit conversion from classes to bool.  That is
	not in the spec so this test now works correctly and shows an error.
	
	Added a stopgap in the domain module to handle domain assignment where
	the left-hand side is nil.  This only occurs in certain cases where a
	domain is a field in a class.  An example shows up in
	
	  arrays/deitz/part2/test_array_in_class

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	chapel/test/classes/bocchino/: test_nil_is_false.good 

---------------------------------------------------------------------------

01/17/07 11:51:04 -- deitz

Log message:
	Implemented dynamic casts so you can cast a C to a D (assuming D is
	derived from C).  The result is nil if the C value is not D or a
	subclass of D.
	
	Note that dynamic casts require a runtime check.  Normal casts do not
	require a runtime check since they are always valid.
	
	Added a test case.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/modules/standard/: _chpl_base.chpl 
Added files:
	chapel/test/classes/deitz/dispatch/: test_dc1.chpl test_dc1.good 

---------------------------------------------------------------------------

01/17/07 13:38:00 -- deitz

Log message:
	Added working test of error message for illegal cast.

Added files:
	chapel/test/trivial/deitz/: test_illegal_cast.chpl 
	                            test_illegal_cast.good 

---------------------------------------------------------------------------

01/17/07 13:40:47 -- deitz

Log message:
	Updated error message of test and removed .future.

Modified files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-illegalcast.good 
Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-illegalcast.future 

---------------------------------------------------------------------------

01/17/07 14:55:33 -- deitz

Log message:
	Reworked implementation of
	
	  lhs op= rhs
	
	to use the special function _compound_cast which currently only
	inserts a cast if the type of the lhs is a primitive type.  It does
	not yet verify that the rhs can be assigned to the lhs in a simple
	assignment.
	
	Updated the spec.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/spec/: Statements.tex 

---------------------------------------------------------------------------

01/17/07 15:18:24 -- deitz

Log message:
	Enabled scalar promotion over casts by removing the generic catch-all
	_cast function that served to generated compiler errors.  Specialized
	the compiler error for casts within the compiler if the _cast function
	is unresolved or ambiguous.  This is necessary since a generic
	argument is favored over a promoted argument during function
	resolution.
	
	Added a test case.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_cast.chpl 
	                           test_array_cast.good 

---------------------------------------------------------------------------

01/17/07 15:46:34 -- deitz

Log message:
	Removed .future of a test that is now working, probably because of the
	stopgap fix to the handling of domains inside classes.

Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-domainInIterator.future 

---------------------------------------------------------------------------

01/17/07 17:30:59 -- waynew

Log message:
	Bug fix.  Use of uninitialized data.  Showed up as bug in some threaded
	tests on the Sun platform, but is really was a bug on all platforms.
	Those should pass the nightly tests now.

Modified files:
	chapel/runtime/src/: chplthreads.c 

---------------------------------------------------------------------------

01/18/07 15:58:34 -- deitz

Log message:
	Added four working tests that I had in my copy.

Added files:
	chapel/test/classes/deitz/: test_adotbdotcdotd.chpl 
	                            test_adotbdotcdotd.good 
	chapel/test/functions/deitz/: test_var_function2.chpl 
	                              test_var_function2.good 
	chapel/test/types/tuple/deitz/: test_tuple_index.chpl 
	                                test_tuple_index.good 
	chapel/test/types/type_variables/deitz/: test_default1.chpl 
	                                         test_default1.good 

---------------------------------------------------------------------------

01/18/07 16:11:11 -- deitz

Log message:
	Removed extra writeln in test and removed .future.

Modified files:
	chapel/test/functions/bradc/: nameDefaultParamInOut.chpl 
Removed files:
	chapel/test/functions/bradc/: nameDefaultParamInOut.future 

---------------------------------------------------------------------------

01/18/07 16:21:11 -- deitz

Log message:
	Updated error message output on two tests and removed .futures.  These
	are now yielding pretty decent error messages.

Modified files:
	chapel/test/functions/jplevyak/: introduce-dispatch-1.good 
	                                 zeroarity-bound-error-2.good 
Removed files:
	chapel/test/functions/jplevyak/: introduce-dispatch-1.future 
	                                 zeroarity-bound-error-2.future 

---------------------------------------------------------------------------

01/19/07 14:21:33 -- deitz

Log message:
	Added code to mangle the names of arguments and fields that are
	duplicated within the same function or class.  This can happen in the
	iterator class and its constructor because the names of fields in this
	class are taken directly from local variables.
	
	Added a test case of an iterator that has local variables with the
	same name.

Modified files:
	chapel/compiler/passes/: codegen.cpp 
Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_local_vars_same_name.chpl 
	                                        test_iterator_local_vars_same_name.good 

---------------------------------------------------------------------------

01/19/07 15:31:14 -- deitz

Log message:
	This checkin gets recursive iterators working.
	
	Undid my previous checkin: removed code to mangle the names of
	arguments and fields that are duplicated within the same function or
	class.  At least for fields, the names need to be unique throughout
	compilation; mangling the cname is insufficient.
	
	Set the return type of the coercion wrapper to be the return type of
	the wrapped function when the wrapper is built.  The same is done with
	the default wrapper; it helps with recursive functions and types.
	
	Added a special check to resolve_type_expr to check to see if the
	retExprType resolves to a type before resolving the function.  This
	gets rid of a recursive type dependency when a function uses a
	constructor to specify its return type and that constructor calls the
	function to determine the type of its fields.
	
	Added =, constructors, and the rhs of setters to places to not insert
	a _to_seq function.  Disabled inserting the _to_seq function on
	iterator classes that are types, rather than values.  This is a
	troubled list.  To avoid inserting sequences for iterators, we should
	see if we can come up with a more systematic decision.
	
	Fixed a bug in which the temporaries put in for formal arguments to
	handle pass by copy were used to replace expressions in the formal
	argument list even though these formal temporaries were not set until
	inside the function.
	
	Mangled the names of all of the fields put into an iterator class in
	the presence of duplicate local variable names.  There is still a
	problem if an argument name duplicates a local variable name.
	
	Added more return type information to the functions that are built up
	for an iterator to handle recursive iterators.
	
	Fixed and removed a .future that defines an iterator over a tree.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: codegen.cpp functionResolution.cpp 
	                         normalize.cpp 
	chapel/test/functions/deitz/iterators/: tree.chpl 
Removed files:
	chapel/test/functions/deitz/iterators/: tree.future 

---------------------------------------------------------------------------

01/19/07 17:15:26 -- bradc

Log message:
	Due to fixes in the compiler for domain promotion,
	my illegalcast test became legal, but also had
	enough other problems that it was hard to fix (and
	poorly named).  So instead, captured the same
	thing it was trying to do (assign domain to array)
	using a working copy from a similar era and
	created a new test for it which works.

Added files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-domainPromote.chpl 
	                                    ra-bradc-domainPromote.good 
Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-illegalcast.chpl 
	                                    ra-bradc-illegalcast.good 

---------------------------------------------------------------------------

01/19/07 17:18:55 -- bradc

Log message:
	Updated lexer to work with cpkg/v5 (in particular with
	flex 2.5.33, bison 1.875d, and g++ 4.1.1).  Most of
	this involved renaming yylineno (a variable we had
	invented) because flex now defines it.  Also, dialed
	down warnings on generated C code for developers
	because the flex-generated code causes warnings.
	
	Haven't yet checked to see whether this will fix the
	problem that Wael was seeing (which he fixed in a
	different manner).  That's work for next week.
	
	This code compiled and ran under cpkg/v4 and cpkg/v5
	on linux, and worked on the chap servers without
	using modules, so hopefully won't break too much
	this weekend.  :)

Modified files:
	chapel/compiler/include/: yy.h 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/compiler/parser/: Makefile parser.cpp processTokens.cpp 
	                         yy.c 

---------------------------------------------------------------------------

01/22/07 10:53:55 -- deitz

Log message:
	Fixed an interaction between scope resolution and the UserType
	construct so that when the UserType is subsituted during scope
	resolution, the subsituted expression is scope resolved.  This fixes a
	module ordering issue.  Removed a .future.

Modified files:
	chapel/compiler/passes/: scopeResolve.cpp 
Removed files:
	chapel/test/modules/bradc/: typeInModule.future 

---------------------------------------------------------------------------

01/22/07 11:27:54 -- deitz

Log message:
	Added syntactic support for subdomains without any semantic checking.
	I added this as it is used in the tests, i.e., with the keyword
	subdomain.  The spec is different; it suggests the keyword domain is
	used instead of subdomain.  This may be an error in the spec.
	
	Removed three .futures.
	
	Refiled future studies/jacobi/bradc/jacobi-simple-brad under the
	semantic heading meaning that we should discuss whether this test is
	legal.  It attempts to promote over tuples.  Do we want to allow that?
	
	Refiled future classes/bradc/badred under the semantic heading also.
	Should this test be rewritten to test the structural interface of
	reductions?  It is outdated Chapel in many respects.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/classes/bradc/: badred.future 
	chapel/test/studies/jacobi/bocchino/: jacobi.chpl 
	chapel/test/studies/jacobi/bradc/: jacobi-simple-brad.future 
Removed files:
	chapel/test/domains/bradc/: subdomain.future 
	chapel/test/studies/jacobi/bocchino/: jacobi.future 
	chapel/test/studies/jacobi/bradc/: jacobi-slice-brad.future 

---------------------------------------------------------------------------

01/22/07 12:00:27 -- bradc

Log message:
	Removed badred test which, as Steve points out, is horribly
	out-of-synch with the spec.

Removed files:
	chapel/test/classes/bradc/: badred.chpl badred.future 
	                            badred.good 

---------------------------------------------------------------------------

01/22/07 14:15:20 -- deitz

Log message:
	Improved constant assignment checking by specializing the code
	generated for a constant definition in fix_def_expr.
	
	Removed hack in insertion of formal temps.
	
	Updated a test and removed a .future.
	
	The following three tests need to be fixed:
	
	  [Error matching compiler output for release/examples/hpcc06/fft-mta]
	  [Error matching compiler output for studies/hpcc/FFT/fft-hpcc06-mta]
	  [Error matching compiler output for studies/hpcc/RA/marybeth/ra]
	
	They reassign constants in error at the user level.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	                         semanticChecks.cpp 
	chapel/test/trivial/deitz/: test_assign_const.chpl 
	                            test_assign_const.good 
Removed files:
	chapel/test/trivial/deitz/: test_assign_const.future 

---------------------------------------------------------------------------

01/22/07 14:17:45 -- deitz

Log message:
	Fixed assignment to constant in test.

Modified files:
	chapel/test/studies/hpcc/RA/marybeth/: ra.chpl 

---------------------------------------------------------------------------

01/22/07 14:50:28 -- deitz

Log message:
	Fixed .future semantic question test to use %d instead of %lld now
	that int is not 64 bits by default.

Modified files:
	chapel/test/trivial/bradc/: formatoutput.chpl 

---------------------------------------------------------------------------

01/22/07 14:58:22 -- deitz

Log message:
	Fixed .good to match user error output, rather than developer error output.

Modified files:
	chapel/test/trivial/deitz/: test_assign_const.good 

---------------------------------------------------------------------------

01/22/07 15:03:25 -- deitz

Log message:
	Fixed casting from integral types to enumerated types.
	
	Removed a .future relating to an arithmetic domain defined with an
	enumerated type (not an enumerated domain).

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/test/arrays/bradc/: enumarray.chpl enumarray.good 
Removed files:
	chapel/test/arrays/bradc/: enumarray.future 

---------------------------------------------------------------------------

01/22/07 15:12:58 -- deitz

Log message:
	Removed .future that makes no sense (outdated probably); it inherits
	from the builtin _domain wrapper class.

Removed files:
	chapel/test/trivial/shannon/: condReturn3.chpl 
	                              condReturn3.future 
	                              condReturn3.good 

---------------------------------------------------------------------------

01/22/07 15:32:28 -- deitz

Log message:
	Specialized error message on tuples of non-static size.  Removed a
	.future.
	
	Started taking a pass over .futures and updating the messages.  We
	should discuss semantic futures and what we should do with them.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/trivial/bradc/: formatoutput.future 
	chapel/test/trivial/deitz/: test_format_primitives2.chpl 
	                            test_format_primitives2.future 
	chapel/test/trivial/jplevyak/: destruct-arg-1.future 
	chapel/test/trivial/shannon/: condReturn.future condReturn2.chpl 
	                              condReturn2.good 
Removed files:
	chapel/test/trivial/shannon/: condReturn2.future 

---------------------------------------------------------------------------

01/22/07 15:34:16 -- bradc

Log message:
	Added a new test directory for users codes (ones that are legal
	to put into our repository, anyway), and added an initial code
	that Richard Barrett sent me (diffuse2d-orig.chpl) and my rewrite
	of it to fix bugs and improve style slightly
	(diffuse2d-orig-blc.chpl).  This comes from an email conversation
	we've been having as he's been getting used to the language.

Added files:
	chapel/test/users/rbarrett/: .cvsignore diffuse2d-orig-blc.chpl 
	                             diffuse2d-orig-blc.execopts 
	                             diffuse2d-orig-blc.good 
	                             diffuse2d-orig.chpl 
	                             diffuse2d-orig.notest 

---------------------------------------------------------------------------

01/22/07 15:50:00 -- deitz

Log message:
	Fixed syntax on one test and removed a .future.
	
	Updated several more .futures.

Modified files:
	chapel/test/arrays/deitz/: test_array_of_array2.future 
	chapel/test/arrays/deitz/part2/: test_array_init2.chpl 
	                                 test_array_init2.good 
	                                 test_array_of_array1.future 
	chapel/test/trivial/marybeth/: typeselect.future 
	chapel/test/trivial/mjoyner/iterators/: 
	                                        nest_func_iterator2b.future 
Removed files:
	chapel/test/arrays/deitz/part2/: test_array_init2.future 

---------------------------------------------------------------------------

01/22/07 16:36:21 -- bradc

Log message:
	Fixed a bug in which a const was being reassigned
	that just showed up due to Steve's compiler
	improvements.

Modified files:
	chapel/test/release/examples/hpcc06/: README fft-mta.chpl 
	chapel/test/studies/hpcc/FFT/: fft-hpcc06-mta.chpl 

---------------------------------------------------------------------------

01/22/07 16:44:16 -- bradc

Log message:
	Removed a test that is no longer generating the same error
	message that caused it to get filed (and I can't even figure
	out where/why it did), and which is otherwise redundant.

Removed files:
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-badlineno.chpl 
	                                    ra-bradc-badlineno.future 
	                                    ra-bradc-badlineno.good 

---------------------------------------------------------------------------

01/22/07 16:46:43 -- deitz

Log message:
	Improved compiler error message for illegal types in if or while
	conditions.
	
	The error for studies/beer/bradc/beer-promoted-infer.future looks
	valid to me.  Brad, take a look and let me know if you agree or not.

Modified files:
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/test/trivial/deitz/: test_bad_if.good 

---------------------------------------------------------------------------

01/23/07 11:16:06 -- deitz

Log message:
	Made resolution of functions robust to the case where a function may
	or may not return a value based on parameters and instantiation.
	
	Updated .good error for test and removed .future.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/trivial/shannon/: condReturn.good 
Removed files:
	chapel/test/trivial/shannon/: condReturn.future 

---------------------------------------------------------------------------

01/23/07 11:58:03 -- deitz

Log message:
	Added working test I had in my directory.

Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_over_classes.chpl 
	                                        test_iterator_over_classes.good 

---------------------------------------------------------------------------

01/23/07 13:22:32 -- deitz

Log message:
	Enabled iterator methods by:
	
	  1. Mangling the names of the formal arguments when inserting them as
	     fields into an iterator class.  The same mangling is done for
	     local variables to allow two local variables with the same name.
	     Now two formals can have the same name as well.
	
	  2. Disabling the insertion of a method token as a field and
	     eliminating it from the call site of the constructor in the
	     iterator wrapper.  This was not strictly necessary.
	
	Added a very simple iterator in a class test.
	
	Fixed an oversight in a .good of a future, and removed three .futures.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/test/functions/iterators/bradc/: iteratorInClass.good 
Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_in_class.chpl 
	                                        test_iterator_in_class.good 
Removed files:
	chapel/test/arrays/deitz/domains/: test_domain2.future 
	                                   test_domain3.future 
	chapel/test/functions/iterators/bradc/: iteratorInClass.future 

---------------------------------------------------------------------------

01/23/07 13:59:02 -- deitz

Log message:
	Fixed an uninitialized variable thinko in the code to build a default
	hash function for a record that only showed up when encountering code
	that contained an empty record (no fields).  Added a test that
	contains an empty record.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
Added files:
	chapel/test/classes/deitz/: test_empty_record.chpl 
	                            test_empty_record.good 

---------------------------------------------------------------------------

01/23/07 14:03:58 -- deitz

Log message:
	Updated a .good and removed two .futures for visibility tests that now
	work, but were failing because of empty records.

Modified files:
	chapel/test/functions/jplevyak/scoping/: visibility-4.good 
Removed files:
	chapel/test/functions/jplevyak/scoping/: visibility-1.future 
	                                         visibility-4.future 

---------------------------------------------------------------------------

01/23/07 14:15:37 -- bradc

Log message:
	Adding a future showing that normal error messages (like
	use-before-def) that occur in iterators result in confusing
	and repetitious error messages.

Added files:
	chapel/test/functions/iterators/bradc/: iteratorBadError.chpl 
	                                        iteratorBadError.future 
	                                        iteratorBadError.good 

---------------------------------------------------------------------------

01/23/07 14:19:10 -- deitz

Log message:
	Refiled and elaborated on several futures.

Modified files:
	chapel/test/arrays/deitz/promotion/: 
	                                     test_scalar_promote10.future 
	chapel/test/arrays/jplevyak/: simple-4.future 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator2a.future 
	                                        test_instantiate_iterator3.future 
	                                        test_instantiate_iterator3a.future 
	chapel/test/functions/iterators/bradc/: iteratorBadError.future 

---------------------------------------------------------------------------

01/23/07 14:24:31 -- deitz

Log message:
	Improved list_futures script to alphabetize the output.  The order was
	somewhat random as the names of the futures changed.  This also has
	the advantage of grouping similar problems.  I use the headings 'error
	message' to mean that we need to improve the error message and
	'semantic' to mean that we need to discuss the meaning of this test.

Modified files:
	chapel/test/: list_futures 

---------------------------------------------------------------------------

01/23/07 14:28:51 -- deitz

Log message:
	Refiled two futures.

Modified files:
	chapel/test/modules/bradc/: multipleModulesSameName.future 
	chapel/test/studies/hpcc/FFT/marybeth/: fft2d.future 

---------------------------------------------------------------------------

01/23/07 15:21:41 -- deitz

Log message:
	Added a working iterator method test that references this.
	
	Added a working array type alias test.

Added files:
	chapel/test/arrays/deitz/: test_array_type_alias.chpl 
	                           test_array_type_alias.good 
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_in_class2.chpl 
	                                        test_iterator_in_class2.good 

---------------------------------------------------------------------------

01/23/07 16:11:23 -- deitz

Log message:
	Mangled the names of compiler-introduced iterator classes in case a
	program has two iterators of the same name.  The issue is that default
	functions are built based on the names of the types rather than the
	types themselves.  This should be looked into further.  Can we avoid
	basing this decision on type names?
	
	Added some type info to some of the fields of an iterator class if
	they are known in the iterator function.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

01/24/07 10:20:26 -- deitz

Log message:
	Categorized all .future files as follows:
	
	? - The test needs to be examined and categorized.  If you are filing
	    a future and are not positive what is wrong, label it "?" so that
	    either you or someone else can look at it later as time allows.
	
	semantic - The test illustrates something that is questionable in the
	           language.  These need to be discussed as a group.  They
	           should either be removed, categorized as a bug
	
	error message - The test shows a place where the compiler should
	                provide a better error message.
	
	In addition to these general categories, the rest of the .futures now
	have some specific bug category that summarizes what is wrong.  I only
	use a user name to mean that this test is wrong and needs to be fixed
	by this person.
	
	As a proposal, I think we should use a username if you have taken
	ownership of a bug or are working on it.  In this case, you can put
	your user name next to the category in the future.  Here is the
	breakdown of the 62 futures to date:
	
	16 semantic
	8 error message
	4 generic iterators
	3 global use before def
	3 memory leak
	3 uninstantiated generic parent
	2 array of arrays
	2 inout
	1 ?
	1 array fields and type aliases
	1 array of syncs
	1 cg-chpl-lineno
	1 complicated expression in class
	1 config var value in help message
	1 const in iterator and param coercions
	1 file I/O
	1 formal type from default value
	1 generic classes with default types
	1 invalid executable command line arguments
	1 lg2 error on real types
	1 marybeth
	1 nested classes
	1 parameter folding
	1 primitive to string conversions
	1 promoted var function
	1 query variables
	1 return in type select
	1 type in expression context
	1 zippered iteration

Modified files:
	chapel/test/arrays/jplevyak/: simple-4.future 
	chapel/test/classes/deitz/: test_type_in_class1.future 
	chapel/test/classes/marybeth/: test-init.future 
	chapel/test/compflags/bradc/: linenoConditional.future 
	chapel/test/domains/indefinite/waynew/: memory1.future 
	                                        tuple_domain.future 
	chapel/test/execflags/shannon/: spellingTest.future 
	chapel/test/execflags/shannon/configs/help/: 
	                                             configVarDefaultValue.future 
	chapel/test/functions/bradc/useBeforeDef/: useBeforeDef.future 
	                                           useBeforeDef2.future 
	chapel/test/functions/deitz/: test_default_type.future 
	chapel/test/functions/iterators/bradc/: paramInIterator.future 
	chapel/test/modules/standard/math/: lg2.future 
	chapel/test/parallel/single/waynew/: sarray.future 
	chapel/test/studies/beer/bradc/: beer-promoted-infer.future 
	chapel/test/studies/blas/marybeth/: saxpy2.future 
	chapel/test/studies/hpcc/FFT/bradc/: twiddles-advanced.future 
	                                     twiddles-advanced2.future 
	chapel/test/studies/hpcc/RA/bradc/: ra-constInIterator.future 
	chapel/test/types/complex/bradc/: negateimaginary2.future 

---------------------------------------------------------------------------

01/24/07 11:55:13 -- deitz

Log message:
	Added threaded test that shows a runtime bug for string concatenation.
	No future because I am checking in a fix presently.

Added files:
	chapel/test/parallel/begin/deitz/: .cvsignore 
	                                   test_string_cat.chpl 
	                                   test_string_cat.good 

---------------------------------------------------------------------------

01/24/07 11:56:59 -- deitz

Log message:
	Fixed a bug in the runtime _glom_strings routine in which a global
	array of strings (!!) was used by the routine in a thread-unsafe
	manner.  Removed the global array of strings and simplified.

Modified files:
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chplmem.c chpltypes.c 

---------------------------------------------------------------------------

01/24/07 12:57:46 -- diten

Log message:
	Check in a test that shows an apparent problem with assigning domains
	from within class methods.

Added files:
	chapel/test/trivial/diten/: class_domain_init.chpl 
	                            class_domain_init.future 
	                            class_domain_init.good 

---------------------------------------------------------------------------

01/24/07 13:05:51 -- diten

Log message:
	Add a description of the problem to the .future file

Modified files:
	chapel/test/trivial/diten/: class_domain_init.future 

---------------------------------------------------------------------------

01/24/07 13:35:47 -- deitz

Log message:
	Categorized .future as 'uninitialized domain field.'  This test looks
	like it would be a good starting point for somebody trying to get
	arrays of arrays working.

Modified files:
	chapel/test/trivial/diten/: class_domain_init.future 

---------------------------------------------------------------------------

01/24/07 13:53:43 -- deitz

Log message:
	Filed .future related to for loop surrounding begin.  This test is
	nondeterministic (unfortunately!) but I'm not sure it should ever show
	the behaviour that it is showing.

Added files:
	chapel/test/parallel/begin/deitz/: test_begin.chpl 
	                                   test_begin.future 
	                                   test_begin.good 

---------------------------------------------------------------------------

01/24/07 13:58:43 -- deitz

Log message:
	Filed a future that shows that cg-chpl-lineno is not thread-safe.

Added files:
	chapel/test/parallel/begin/deitz/: test_begin_error_lineno.chpl 
	                                   test_begin_error_lineno.future 
	                                   test_begin_error_lineno.good 

---------------------------------------------------------------------------

01/24/07 14:00:12 -- deitz

Log message:
	Fixed good .good.  Added .compopts to run with --cg-chpl-lineno.

Modified files:
	chapel/test/parallel/begin/deitz/: test_begin_error_lineno.good 
Added files:
	chapel/test/parallel/begin/deitz/: 
	                                   test_begin_error_lineno.compopts 

---------------------------------------------------------------------------

01/24/07 14:59:59 -- deitz

Log message:
	Filed a bug trying to cast a string to an int.
	
	Some primitive type casts are not implemented.  Is this supposed to work?

Added files:
	chapel/test/trivial/deitz/: test_string2int.chpl 
	                            test_string2int.future 
	                            test_string2int.good 

---------------------------------------------------------------------------

01/25/07 10:49:53 -- deitz

Log message:
	Implemented first draft of casts from strings to all other primitive
	types.
	
	Added runtime files chplcast.h and chplcast.c that should eventually
	contain all of the cast functions and macros.
	
	Disabled parameter folding of a few more casts involving real,
	imaginary, complex, and string types.
	
	Added a test case.  Removed a .future.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile 
Added files:
	chapel/runtime/include/: chplcast.h 
	chapel/runtime/src/: chplcast.c 
	chapel/test/trivial/deitz/: test_string2prims.chpl 
	                            test_string2prims.good 
Removed files:
	chapel/test/trivial/deitz/: test_string2int.future 

---------------------------------------------------------------------------

01/25/07 12:09:12 -- bradc

Log message:
	With Steve's recent improvements, moved the subBlocks
	iterator into the domain class hierarchy rather than
	having it be a standalone function.  This is something
	I think of as being part of a distribution's optional
	interface, though as such, I suspect it will continue
	to evolve as we continue to get distributions better
	specified.  In any case, it is better as a method on
	a domain than it was as a standalone iterator.

Modified files:
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/modules/bradc/: ra-paramWidth.chpl 
	chapel/test/release/examples/hpcc06/: ra.chpl 
	chapel/test/studies/hpcc/RA/: ra-hpcc06.chpl ra-latest.chpl 

---------------------------------------------------------------------------

01/25/07 12:14:25 -- deitz

Log message:
	Removed %format string casts from this test and modified test so that
	it still captures the future of array promotion.

Modified files:
	chapel/test/trivial/bradc/: formatoutput.chpl formatoutput.good 

---------------------------------------------------------------------------

01/25/07 12:16:18 -- deitz

Log message:
	Removed two tests that tested nothing more than the %format strings.
	One of these was a future that showed this was not implemented on all
	types.

Removed files:
	chapel/test/trivial/deitz/: test_format_primitives2.chpl 
	                            test_format_primitives2.future 
	                            test_format_primitives2.good 
	                            test_format_primitives.chpl 
	                            test_format_primitives.good 

---------------------------------------------------------------------------

01/25/07 13:15:03 -- bradc

Log message:
	Fixed spelling of Petr's name in hpcc document.

Modified files:
	chapel/doc/release/: hpcc06.pdf 

---------------------------------------------------------------------------

01/25/07 14:19:06 -- deitz

Log message:
	Refactored cast code from primitive types to strings, moving it out of
	chpltypes and into chplcast and using macros to avoid replicated code.
	
	Removed %format cast kludge.  Fixed some test cases.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: expr.h primitive.h 
	chapel/compiler/passes/: cleanup.cpp 
	chapel/modules/standard/: _chpl_base.chpl 
	chapel/runtime/include/: chplcast.h chpltypes.h 
	chapel/runtime/src/: chplcast.c chpltypes.c 
	chapel/test/arrays/bradc/: enumarray.chpl enumarray.good 
	chapel/test/npb/ft/: ft-serial.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	chapel/test/studies/hpcc/STREAMS/waynew/: stream2.chpl 

---------------------------------------------------------------------------

01/25/07 14:22:50 -- bradc

Log message:
	Tiny fix to Random -- it prints out a message indicating
	that fillRandom() isn't supported for 2D or higher arrays,
	but doesn't give any indication where this message is
	coming from, which makes it hard to determine who's printing
	it out when encountering it.  Put the name fillRandom()
	into the message to clarify.  (Should really, probably turn
	it into a halt(), but didn't quite have the stomach to go
	this far).
	
	Maybe David would enjoy implementing fillRandom() for
	higher dimensional-arrays as an exercise using Chapel
	domains and arrays?

Modified files:
	chapel/modules/standard/: Random.chpl 

---------------------------------------------------------------------------

01/25/07 15:09:05 -- diten

Log message:
	Add a few currently passing tests.  These aren't designed to test any
	specific compiler functionality, but mostly just to get familiar with the
	language and compiler.

Added files:
	chapel/test/trivial/diten/: jacobi.chpl jacobi.good life.chpl 
	                            life.good linediff.chpl 
	                            linediff.good linked_list.chpl 
	                            linked_list.good mandelbrot.chpl 
	                            mandelbrot.good 

---------------------------------------------------------------------------

01/25/07 15:21:16 -- bradc

Log message:
	Updated copyright dates to include 2007.

Modified files:
	./: COPYRIGHT LICENSE 

---------------------------------------------------------------------------

01/25/07 15:36:19 -- bradc

Log message:
	Oops forgot to update README about change to ra.chpl that
	will show up in the release.

Modified files:
	chapel/test/release/examples/hpcc06/: README 

---------------------------------------------------------------------------

01/26/07 12:41:35 -- diten

Log message:
	Remove a restriction on the domain rank from the fillRandom functions.
	Without changing anything else, the support is there for filling higher order
	domains with random values.  Also add two tests to check that functionality.

Modified files:
	chapel/modules/standard/: Random.chpl 
Added files:
	chapel/test/trivial/diten/: test_2D_fillRandom_complex.chpl 
	                            test_2D_fillRandom_complex.good 
	                            test_2D_fillRandom_real.chpl 
	                            test_2D_fillRandom_real.good 

---------------------------------------------------------------------------

01/26/07 14:05:59 -- deitz

Log message:
	Removed special handling of config variables during code generation.
	Instead it uses explicit casting from strings to primitive types.  The
	primitive ops to handle configuration variables are
	
	 _config_has_value: returns true if the config was passed to a.out
	 _config_get_value: returns the value of the config passed to a.out
	
	Implemented support for casts from strings to enumerated types.
	
	Removed disabling of copy propagation based on kludge codegen
	treatment of configuration variables.
	
	Added support for configuration variables and unified the support of
	constants in fix_def_expr.  Refactored and documented fix_def_expr.
	This routine normalizes the DefExpr of variables.
	
	Removed INIT_CONFIG macro.
	
	Futurized several tests that expect error messages due to invalid
	configuration variable assignments.  The cast from strings to
	primitive types does not currently generate errors.  I am looking into
	doing this hopefully with a unified way to generate fatal errors with
	line numbers in runtime functions.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp symbol.cpp 
	                      symscope.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         copy_propagation.cpp normalize.cpp 
	chapel/runtime/include/: config.h 
	chapel/test/execflags/shannon/configs/: configVarBadEnum.good 
	                                        configVarFileBadEnum.good 
Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarInvalidBoolean.future 
	                                        configVarInvalidBooleanLineno.future 
	                                        configVarInvalidComplex.future 
	                                        configVarInvalidComplexLineno.future 
	                                        configVarInvalidFloat.future 
	                                        configVarInvalidFloatLineno.future 
	                                        configVarInvalidInteger.future 
	                                        configVarInvalidIntegerLineno.future 

---------------------------------------------------------------------------

01/26/07 14:57:28 -- diten

Log message:
	Move tests for fillRandom to the modules/standard/Random directory from the
	trivial directory.

Added files:
	chapel/test/modules/standard/Random/diten/: 
	                                            test_2D_fillRandom_complex.chpl 
	                                            test_2D_fillRandom_complex.good 
	                                            test_2D_fillRandom_real.chpl 
	                                            test_2D_fillRandom_real.good 
Removed files:
	chapel/test/trivial/diten/: test_2D_fillRandom_complex.chpl 
	                            test_2D_fillRandom_complex.good 
	                            test_2D_fillRandom_real.chpl 
	                            test_2D_fillRandom_real.good 

---------------------------------------------------------------------------

01/26/07 15:46:48 -- deitz

Log message:
	Fixed Sun build error in new runtime file.

Modified files:
	chapel/runtime/src/: chplcast.c 

---------------------------------------------------------------------------

01/29/07 09:48:19 -- deitz

Log message:
	Updated .future and .good.  This test fails because of a bug with the
	reference counting gc and the special handling of begin blocks or heap
	variables.

Modified files:
	chapel/test/parallel/begin/deitz/: test_begin.future 
	                                   test_begin.good 

---------------------------------------------------------------------------

01/29/07 11:45:02 -- deitz

Log message:
	Fixed a gc bug with begin blocks inside loops.
	
	Removed pragma "beginblk refcount" which was an attempt to handle the
	beginblk class using the standard gc reference counting.  This class
	is more easily handled separately.
	
	Removed a .future.

Modified files:
	chapel/compiler/passes/: memoryManage.cpp parallel.cpp 
Removed files:
	chapel/test/parallel/begin/deitz/: test_begin.future 

---------------------------------------------------------------------------

01/30/07 17:20:06 -- bradc

Log message:
	Checking in a test inspired by Paul Casella's post-tech
	forum question: "if a config const/var's default value
	is over-ridden on the command line, is its initializing
	expression evaluated?"  My answer was that it shouldn't
	be.  I wrote this test last week and found that it was.
	Since then, Steve cleaned up the implementation of configs
	and now it works as expected.

Added files:
	chapel/test/execflags/bradc/: defaultconfig.chpl 
	                              defaultconfig.execopts 
	                              defaultconfig.good 

---------------------------------------------------------------------------

01/30/07 17:48:38 -- bradc

Log message:
	This is Richard Barrett's second version of his code (now
	many days old, I was just slow to check it in) and my
	rewrite of that code to make it work and test a bit better.

Modified files:
	chapel/test/users/rbarrett/: .cvsignore 
Added files:
	chapel/test/users/rbarrett/: diffuse2d-v3-blc.chpl 
	                             diffuse2d-v3-blc.good 
	                             diffuse2d-v3.chpl 
	                             diffuse2d-v3.notest 

---------------------------------------------------------------------------

01/31/07 10:40:22 -- deitz

Log message:
	Updated unimplemented features list to reflect recent progress.

Modified files:
	chapel/compiler/: UnimplementedFeatures 

---------------------------------------------------------------------------

01/31/07 11:04:36 -- deitz

Log message:
	Expect regressions:
	
	[Error matching program output for memory/shannon/freedWithoutMallocLineno]
	[Error matching program output for memory/shannon/memmaxExceedsLineno]
	[Error matching program output for memory/shannon/memstatFlagLineno]
	[Error matching program output for memory/shannon/memtrackFlagLineno]
	[Error matching program output for memory/shannon/reallocWithoutMallocLineno]
	[Error matching program output for memory/shannon/outofmemory/mallocOutOfMemoryLineno]
	[Error matching program output for trivial/shannon/readStringOverflowLineno]
	
	Pair programmed the following with David.
	
	Added primitives get_lineno and get_filename to mark places where user
	line numbers and filenames should be printed.  This is currently only
	done in the halt and assert functions.  It needs to be added to
	certain primitives.
	
	Removed global variables chpl_input_lineno and chpl_input_filename.
	
	Fixed a .future where line numbers on errors were printed out
	incorrectly in a parallel context.
	
	Added a pass insertLineNumbers after resolution to insert line numbers
	and filenames to functions that are in the standard modules so that
	user line numbers and filename are printed out instead.
	
	Removed access to global line number and filename from runtime.  This
	leads to a few regressions that will be fixed when we start passing
	line numbers and filenames to some primitives.  I will be working on
	this now.
	
	Updated output to compflags/bradc/help/userhelp.chpl.
	
	Removed compiler option --cg-chpl-lineno and updated tests not to use
	this.
	
	Updated tests that didn't previously show line numbers because they
	did not use --cg-chpl-lineno.  They now do show line numbers.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: primitive.h stmt.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	chapel/modules/standard/: Standard.chpl _chpl_base.chpl 
	chapel/runtime/include/: error.h 
	chapel/runtime/src/: error.c 
	chapel/test/arrays/deitz/: test_bounds1.good test_bounds2.good 
	chapel/test/arrays/waynew/: init2.good 
	chapel/test/classes/bradc/: setterForField.good 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/compflags/bradc/help/: userhelp.txt 
	chapel/test/domains/indefinite/waynew/: indef8-fail2.good 
	chapel/test/execflags/shannon/configs/: configVarBadEnum.good 
	                                        configVarFileBadEnum.good 
	chapel/test/modules/standard/machine/: numLocales2.good 
	chapel/test/parallel/single/waynew/: simple0.good simple0b.good 
	chapel/test/sparse/deitz/: test_sparse1.good 
	chapel/test/spec/marybeth/: expstmt.good 
	chapel/test/trivial/shannon/quit/: haltOneArg.good 
	chapel/test/types/file/bradc/: changeFilenameWhileOpen.good 
	                               changeModeWhileOpen.good 
	                               changePathWhileOpen.good 
Removed files:
	chapel/test/domains/shannon/: expandError.compopts 
	                              interiorErrorNeg.compopts 
	                              interiorErrorPos.compopts 
	                              interiorErrorPosLarge.compopts 
	chapel/test/memory/shannon/: freedWithoutMallocLineno.compopts 
	                             memmaxExceedsLineno.compopts 
	                             memstatFlagLineno.compopts 
	                             memtrackFlagLineno.compopts 
	                             reallocWithoutMallocLineno.compopts 
	chapel/test/memory/shannon/outofmemory/: 
	                                         mallocOutOfMemoryLineno.compopts 
	chapel/test/trivial/mjoyner/seq/: seq_index1.compopts 
	chapel/test/trivial/shannon/: multipleArgAssert.compopts 
	                              readStringOverflowLineno.compopts 
	                              readWriteBool.compopts 
	                              readWriteBoolLineno.compopts 
	                              readWriteComplex.compopts 
	                              readWriteComplexFail1.compopts 
	                              readWriteComplexLineno.compopts 
	                              readWriteEnum.compopts 
	chapel/test/trivial/shannon/quit/: assert.compopts halt.compopts 
	                                   haltNoArgs.compopts 
	chapel/test/types/file/: closeStdin.compopts 
	                         closedWithoutOpen.compopts 
	                         freadComplex.compopts 
	                         freadIntFailed.compopts 
	                         freadIntUnopenedFile.compopts 
	                         freadNoFloat.compopts 
	                         freadNoInt.compopts 
	                         freadNotABoolean.compopts 
	                         fwriteIntFailed.compopts 
	                         fwriteIntUnopenedFile.compopts 
	                         invalidMode.compopts 
	                         openStdout.compopts 
	                         unableToOpenFile.compopts 

---------------------------------------------------------------------------

01/31/07 11:05:59 -- deitz

Log message:
	Forgot to add new file.

Added files:
	chapel/compiler/passes/: insertLineNumbers.cpp 

---------------------------------------------------------------------------

01/31/07 11:38:35 -- bradc

Log message:
	Trying to shorten running time of test to
	lower probability of timeout on Sunos
	until we eliminate promotion temps.

Modified files:
	chapel/test/users/rbarrett/: diffuse2d-v3-blc.chpl 

---------------------------------------------------------------------------

01/31/07 15:49:42 -- marybeth

Log message:
	Changed font style in syntax_listing.tex.  Now, the
	text should be variable and not fixed.
	
	Changed "implementation" environment to "status" environment.
	Added "note" environment for Implementors' note.  Changed all
	implementation environments to status environments in the body
	of the spec.

Modified files:
	chapel/spec/: Classes.tex Domains_and_Arrays.tex 
	              Input_and_Output.tex Iterators.tex 
	              Locality_and_Distribution.tex Modules.tex 
	              Parallelism_and_Synchronization.tex Sequences.tex 
	              Statements.tex Tuples.tex Types.tex Unions.tex 
	              spec.tex syntax_listing.tex 

---------------------------------------------------------------------------

01/31/07 17:24:12 -- marybeth

Log message:
	Steve pointed out how the terminal symbols were not handled
	properly in my first attempt.  Here is the next attempt at
	the syntax_listing file.

Modified files:
	chapel/spec/: syntax_listing.tex 

---------------------------------------------------------------------------

02/01/07 14:54:02 -- deitz

Log message:
	This checkin fixes the current regressions.
	
	Added support for passing user code line number and filename
	information to primitives in the runtime that require it for reporting
	errors.  Added line number and filename arguments to many functions in
	the runtime.  In some places in the runtime, I pass 0, 0 to avoid
	adding it to more functions.  These need to be cleaned up in another
	checkin.
	
	Added PrimitiveOp::passLineno to signal that this primitive requires
	line number and filename information.  This is added to the AST just
	before code generation so as not to burden code in the rest of the
	compiler.  Moved insertLineNumbers just before code generation.
	
	Removed support for the "no codegen" pragma and turned the last of the
	functions that used it (to test the runtime memory functions) into
	primitives.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp 
	                      symbol.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: cleanup.cpp codegen.cpp 
	                         inlineFunctions.cpp 
	                         insertLineNumbers.cpp memoryManage.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/modules/standard/: _chpl_base.chpl _chpl_standard.chpl 
	chapel/runtime/include/: chplio.h chplmem.h chplmem_tests.h 
	                         chplrt.h chplthreads.h error.h 
	chapel/runtime/src/: arg.c chplio.c chplmem.c chplmem_tests.c 
	                     chplthreads.c chpltypes.c config.c error.c 
	                     main.c 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/memory/shannon/: freedWithoutMalloc.good 
	                             memmaxExceeds.good memstatFlag.good 
	                             memtrackFlag.good 
	                             reallocWithoutMalloc.good 
	chapel/test/memory/shannon/outofmemory/: mallocOutOfMemory.good 
	chapel/test/trivial/shannon/: readStringOverflow.good 

---------------------------------------------------------------------------

02/01/07 15:09:42 -- deitz

Log message:
	Removed --cg-chpl-lineno compiler option and then .future on test that
	now works.

Removed files:
	chapel/test/memory/shannon/: memmaxExceedsLineno2.compopts 
	                             memmaxExceedsLineno2.future 

---------------------------------------------------------------------------

02/01/07 15:16:27 -- deitz

Log message:
	Removed tests that were duplicated solely to use the --cg-chpl-lineno
	flag and to not use the flag.

Removed files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarInvalidBooleanLineno.chpl 
	                                        configVarInvalidBooleanLineno.compopts 
	                                        configVarInvalidBooleanLineno.execopts 
	                                        configVarInvalidBooleanLineno.future 
	                                        configVarInvalidBooleanLineno.good 
	                                        configVarInvalidComplexLineno.chpl 
	                                        configVarInvalidComplexLineno.compopts 
	                                        configVarInvalidComplexLineno.execopts 
	                                        configVarInvalidComplexLineno.future 
	                                        configVarInvalidComplexLineno.good 
	                                        configVarInvalidFloatLineno.chpl 
	                                        configVarInvalidFloatLineno.compopts 
	                                        configVarInvalidFloatLineno.execopts 
	                                        configVarInvalidFloatLineno.future 
	                                        configVarInvalidFloatLineno.good 
	                                        configVarInvalidIntegerLineno.chpl 
	                                        configVarInvalidIntegerLineno.compopts 
	                                        configVarInvalidIntegerLineno.execopts 
	                                        configVarInvalidIntegerLineno.future 
	                                        configVarInvalidIntegerLineno.good 
	chapel/test/memory/shannon/: freedWithoutMallocLineno.chpl 
	                             freedWithoutMallocLineno.execopts 
	                             freedWithoutMallocLineno.good 
	                             memmaxExceedsLineno.chpl 
	                             memmaxExceedsLineno.execopts 
	                             memmaxExceedsLineno.good 
	                             memstatFlagLineno.chpl 
	                             memstatFlagLineno.good 
	                             memtrackFlagLineno.chpl 
	                             memtrackFlagLineno.good 
	                             reallocWithoutMallocLineno.chpl 
	                             reallocWithoutMallocLineno.execopts 
	                             reallocWithoutMallocLineno.good 
	chapel/test/memory/shannon/outofmemory/: 
	                                         mallocOutOfMemoryLineno.chpl 
	                                         mallocOutOfMemoryLineno.good 
	chapel/test/trivial/shannon/: readStringOverflowLineno.chpl 
	                              readStringOverflowLineno.good 
	                              readStringOverflowLineno.ifuture 
	                              readStringOverflowLineno.stdin 
	                              readWriteBoolLineno.chpl 
	                              readWriteBoolLineno.good 
	                              readWriteBoolLineno.ifuture 
	                              readWriteBoolLineno.stdin 
	                              readWriteComplexLineno.chpl 
	                              readWriteComplexLineno.good 
	                              readWriteComplexLineno.ifuture 
	                              readWriteComplexLineno.stdin 

---------------------------------------------------------------------------

02/01/07 15:30:42 -- marybeth

Log message:
	My best attempt at getting the syntax listing to look better.

Modified files:
	chapel/spec/: syntax_listing.tex 

---------------------------------------------------------------------------

02/01/07 15:45:33 -- bradc

Log message:
	A few interesting array slicing tests inspired
	by a suggestion made by Paul Casella -- using
	math on arithmetic sequences to create interesting
	slices for arrays with less repetition of values
	in the upper and lower bounds.
	
	The first test works (slices into an array directly).
	The second doesn't (tries to pass the slice into a
	function expecting an array [1..4].  I believe this
	is because operations on arithmetic sequences
	currently result in converting the arithmetic sequence
	into a sequence of ints, so I filed it as a semantic
	future.
	
	These tests also raise the question of whether:
	
	      1..n by 2
	
	should result in the sequence:
	
	      1, 2, 3, 4, ... 2*n
	
	or:
	
	      1, 3, 5, 7, 9, 2*n-1
	
	It currently seems to be the latter unless I'm missing
	something.  I'm not sure whether or not this seems
	right to me offhand.  There's definitely a question
	here in my mind.  (If it turns out to be the former,
	I need to add some "by" expressions to my test to make
	it work as intended).

Added files:
	chapel/test/arrays/bradc/: paulslice.chpl paulslice.good 
	                           paulslice2.chpl paulslice2.future 
	                           paulslice2.good 

---------------------------------------------------------------------------

02/01/07 16:06:37 -- bradc

Log message:
	Another semantic future which breaks the "operations on
	arithmetic sequences" question from my previous check-in
	into its own test.  Fixing the CVSLOG message for that
	commit, it should have asked:
	
	      These tests also raise the question of whether:
	
	            (1..n)*2
	
	      should result in the sequence:
	
	            2, 3, 4, ... 2*n  (i.e., scale the low and high bounds)
	
	      or:
	
	            2, 4, 6, 8, 10, 2*n  (i.e., scale each sequence element)
	
	This test more clearly illustrates that doing ops on
	sequences results in the realization of the sequence,
	without mixing it into the array slicing question
	as in the previous test.  I'd like for us to consider
	making arithmetic ops on scalars & arithmetic sequences
	result in arithmetic sequences, so am filing this future
	to help us confront that question (eventually).

Added files:
	chapel/test/types/seq/bradc/: multArithSeq.chpl 
	                              multArithSeq.future 
	                              multArithSeq.good 

---------------------------------------------------------------------------

02/01/07 16:10:50 -- bradc

Log message:
	Adding a future test of using an enumerated domain/array.
	This isn't yet implemented, but I had this test lying
	around after my previous enumarray.chpl test was fixed
	up.

Modified files:
	chapel/test/arrays/bradc/: enumarray.chpl 
Added files:
	chapel/test/arrays/bradc/: enumarray2.chpl enumarray2.future 
	                           enumarray2.good 

---------------------------------------------------------------------------

02/01/07 16:24:14 -- marybeth

Log message:
	Checking in test of for..begin.

Added files:
	chapel/test/parallel/begin/marybeth/: test_forbegin.chpl 
	                                      test_forbegin.good 

---------------------------------------------------------------------------

02/01/07 16:24:55 -- bradc

Log message:
	Committing a future test trying promotion of
	short-circuiting operators that I wrote after
	our discussion from the other day.

Added files:
	chapel/test/arrays/bradc/: promote-shortcircuit.chpl 
	                           promote-shortcircuit.future 
	                           promote-shortcircuit.good 

---------------------------------------------------------------------------

02/01/07 16:42:48 -- deitz

Log message:
	How do we deal with intents and coercions?  Does this test make sense?
	
	Should intents disable coercions?  If so, should this be an error, or
	should the dispatch constraint be a match exactly.  Consider also the
	implicit subclass conversions.

Added files:
	chapel/test/trivial/deitz/: test_coerce_inout.chpl 
	                            test_coerce_inout.future 
	                            test_coerce_inout.good 

---------------------------------------------------------------------------

02/01/07 16:53:28 -- diten

Log message:
	Add ability to not assign tuple fields that are given as "_" on the lhs of
	a tuple destructuring.  Also, make "_" a keyword so it cannot be used as a
	symbol name.  Add tests for these.
	
	For example,
	var a, b: int;
	(a, _, b) = (0, foo(), 1);
	
	results in foo getting called, but the return value is not assigned to anything.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/passes/: cleanup.cpp semanticChecks.cpp 
Added files:
	chapel/test/types/tuple/diten/: tensor_destructure.chpl 
	                                tensor_destructure.good 
	                                tuple_underscore.chpl 
	                                tuple_underscore.good 
	                                underscore_is_special.chpl 
	                                underscore_is_special.good 

---------------------------------------------------------------------------

02/01/07 16:57:58 -- bradc

Log message:
	Cleaned up more of the lexer by making the C file
	we were compiling into a .cpp file, removing
	extern "C" declarations in our header files,
	getting rid of special compiler flags.  Please
	let me know if this breaks anyone's builds.  I've
	tested on linux, linux64, and sunos so far.

Modified files:
	chapel/compiler/include/: yy.h 
	chapel/compiler/parser/: .cvsignore Makefile chapel.lex 
Added files:
	chapel/compiler/parser/: yy.cpp 
Removed files:
	chapel/compiler/parser/: yy.c 

---------------------------------------------------------------------------

02/02/07 09:46:39 -- bradc

Log message:
	Quick fix to address last night's broken build.

Modified files:
	chapel/compiler/parser/: Makefile Makefile.share chapel.lex 

---------------------------------------------------------------------------

02/02/07 10:03:58 -- bradc

Log message:
	Cleaner fix to yesterday's problem, and more
	portable to future versions of flex.

Modified files:
	chapel/compiler/parser/: Makefile Makefile.share chapel.lex 

---------------------------------------------------------------------------

02/02/07 13:06:42 -- bradc

Log message:
	Steve found a make problem with bison 1.875 (the
	non-module bison on Linux) whereas I had only tested
	bison 1.875d (the module-based bison).  This checkin
	should fix the problem and hopefully be my last
	fix to the parser/scanner build process today.  Please
	let me know if you find any other problems.

Modified files:
	chapel/compiler/parser/: Makefile 

---------------------------------------------------------------------------

02/02/07 16:35:07 -- deitz

Log message:
	Readded future of test that does not show a line number in the runtime
	error message.

Added files:
	chapel/test/memory/shannon/: memmaxExceedsLineno2.future 

---------------------------------------------------------------------------

02/02/07 16:41:30 -- deitz

Log message:
	Fixed regression from yesterday on missing error message on
	
	  trivial/deitz/test_infer1.chpl
	
	caused by missing curly braces on nested if condition.

Modified files:
	chapel/compiler/passes/: semanticChecks.cpp 

---------------------------------------------------------------------------

02/05/07 09:24:40 -- deitz

Log message:
	Updated .good due to format string change.

Modified files:
	chapel/test/npb/ft/: ft-serial.good 

---------------------------------------------------------------------------

02/05/07 09:52:46 -- deitz

Log message:
	Enabled writing to strings using a write method on strings as in
	
	  s.write(A, b, i);
	
	where s is a string and A, b, and i are variables of types that can be
	written using the general write mechanism including the default write
	methods that are created by the compiler.  This is not your typical
	user-defineable string method as the 'this' argument is changed via
	assignment.  Rationale: It is intuitive rather than orthogonal and the
	oddness is contained.
	
	Added support for inheriting from a Writer class that allows other
	classes to be defined that can be written to.  The only method that
	needs to be overridden is a method called "writeIt" that takes a
	string.  (Yes, I am open to better names.)  To override the default
	approach to writing for a given type, you now need to override a
	method called writeThis (used to be write) that takes an argument of
	type Writer.  An example is shown in
	
	  classes/deitz/test_write_class.chpl
	
	Updated the Input and Output section of the spec.
	
	Added dtWriter to compiler to point to the Writer class type defined
	in the standard modules.  Reworked the creation of the default
	writeThis methods to use dtWriter in their definition.
	
	Added pragma "ref this" to indicate that 'this' is a reference.  This
	is used to implement the string.write method that requires changing
	the implicit 'this' argument.
	
	Fixed a bug in function resolution in which method and setter tokens
	could be 'passed' to formal arguments of generic any types and create
	functions instantiated by these tokens.
	
	Changed all write methods in the modules and the tests that took files
	to be writeThis methods that take Writers.
	
	Added two test cases of writing to strings and one test case of a
	user-defined Writer subclass.

Modified files:
	chapel/compiler/include/: runtime.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         filesToAST.cpp functionResolution.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_file.chpl 
	                          _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl 
	                          _chpl_machine.chpl _chpl_seq.chpl 
	                          _chpl_sparse.chpl 
	chapel/spec/: Input_and_Output.tex 
	chapel/test/arrays/deitz/: matrix.chpl 
	chapel/test/classes/bradc/: writeclass1a.chpl writerecord1a.chpl 
	chapel/test/classes/deitz/: test_record_user_write.chpl 
	chapel/test/demo/review_060130/: history_accumulator.chpl 
	chapel/test/trivial/deitz/demo/: sample1.chpl sample1a.chpl 
	                                 sample1b.chpl 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation16.chpl 
	chapel/test/types/type_variables/deitz/part2/: 
	                                               test_typevar_record3.chpl 
	                                               test_typevar_record4.chpl 
	                                               test_typevar_record5.chpl 
	                                               test_typevar_record6.chpl 
	chapel/test/types/type_variables/deitz/part7/: test_stack.chpl 
Added files:
	chapel/test/classes/deitz/: test_write_class.chpl 
	                            test_write_class.good 
	chapel/test/trivial/deitz/: test_string_write.chpl 
	                            test_string_write.good 
	                            test_string_write2.chpl 
	                            test_string_write2.good 

---------------------------------------------------------------------------

02/05/07 11:34:14 -- deitz

Log message:
	Unified runtime and compiler runtime error message printing to use the
	same mechanism and style.
	
	Removed get_lineno and get_filename primitives.  Added printError
	primitive which is the function in the runtime that prints out runtime
	errors.
	
	Reimplemented and simplified insertLineNumbers to avoid the need for
	the get_lineno and get_filename primitives.  This speeds it up by a
	factor of two as well (though it is not a bottleneck).
	
	Commented insertLineNumbers.
	
	Reworked halt and assert in the standard modules to call into the
	runtime error printing routine.  Used string.write functionality to
	pass it a single string.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: insertLineNumbers.cpp 
	chapel/modules/standard/: Standard.chpl _chpl_base.chpl 
	chapel/runtime/src/: error.c 

---------------------------------------------------------------------------

02/05/07 11:35:51 -- deitz

Log message:
	Updated .goods to reflect last change.

Modified files:
	chapel/test/arrays/deitz/: test_bounds1.good test_bounds2.good 
	chapel/test/arrays/waynew/: init2.good 
	chapel/test/classes/bradc/: setterForField.good 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/domains/indefinite/waynew/: indef8-fail2.good 
	chapel/test/domains/shannon/: expandError.good 
	                              interiorErrorNeg.good 
	                              interiorErrorPos.good 
	                              interiorErrorPosLarge.good 
	chapel/test/execflags/shannon/: invalidExecOption.good 
	                                unexpectedFlag.good 
	chapel/test/execflags/shannon/configs/: configVarBadEnum.good 
	                                        configVarDash.good 
	                                        configVarDashS.good 
	                                        configVarDashSVarEquals.good 
	                                        configVarFileBadEnum.good 
	                                        configVarFileStringOverflow.good 
	                                        configVarFileStringsMismatch.good 
	                                        configVarFileStringsNoEquals.good 
	                                        configVarInvalidName.good 
	                                        configVarNotInModule.good 
	                                        configVarSetNotDeclared.good 
	                                        configVarTwoModsNoneSpecified.good 
	                                        configVarWithSpaces.good 
	chapel/test/memory/shannon/: freedWithoutMalloc.good 
	                             invalidMemFlag.good 
	                             memmaxBytes.good memmaxExceeds.good 
	                             memmaxInput.good memmaxIntOnly.good 
	                             memstatEquals.good memstatFlag.good 
	                             memtraceNoFilename.good 
	                             memtrackFlag.good 
	                             reallocWithoutMalloc.good 
	                             thresholdWithoutTrace.good 
	chapel/test/memory/shannon/outofmemory/: mallocOutOfMemory.good 
	chapel/test/modules/standard/machine/: numLocales2.good 
	chapel/test/parallel/single/waynew/: simple0.good simple0b.good 
	chapel/test/sparse/deitz/: test_sparse1.good 
	chapel/test/spec/marybeth/: expstmt.good 
	chapel/test/trivial/mjoyner/seq/: seq_index1.good 
	chapel/test/trivial/shannon/: multipleArgAssert.good 
	                              readStringOverflow.good 
	                              readWriteBool.good 
	                              readWriteComplex.good 
	                              readWriteComplexFail1.good 
	                              readWriteEnum.good 
	chapel/test/trivial/shannon/quit/: assert.good halt.good 
	                                   haltNoArgs.good 
	                                   haltOneArg.good 
	chapel/test/types/file/: closeStdin.good closedWithoutOpen.good 
	                         freadComplex.good freadIntFailed.good 
	                         freadIntUnopenedFile.good 
	                         freadNoFloat.good freadNoInt.good 
	                         freadNotABoolean.good 
	                         fwriteIntFailed.good 
	                         fwriteIntUnopenedFile.good 
	                         invalidMode.good openStdout.good 
	                         unableToOpenFile.good 
	chapel/test/types/file/bradc/: changeFilenameWhileOpen.good 
	                               changeModeWhileOpen.good 
	                               changePathWhileOpen.good 

---------------------------------------------------------------------------

02/05/07 11:53:53 -- deitz

Log message:
	Added .future that looks at accessing a variable inside a module
	directly with something like M.x where M is a module.

Added files:
	chapel/test/trivial/deitz/: test_module_access1.chpl 
	                            test_module_access1.future 
	                            test_module_access1.good 

---------------------------------------------------------------------------

02/05/07 14:12:21 -- marybeth

Log message:
	Changing for...begin test to have determinate output.

Modified files:
	chapel/test/parallel/begin/marybeth/: test_forbegin.chpl 
	                                      test_forbegin.good 

---------------------------------------------------------------------------

02/05/07 14:51:12 -- deitz

Log message:
	Added a distribution class hook.  There is no parent distribution
	class since the arrays are generic and this would violate return
	restrictions on class methods.  The Distribution class therefore must
	implement a structural interface.
	
	Added a serial distribution class called
	
	  SingleLocaleDistribution
	
	that is the default distribution class.  It is used currently to build
	our default arithmetic and associative domains.
	
	Removed support for writing "distributed" and not specifying a
	distribution.  Currently the distribution must be a value, not a type.
	
	Defined a bogus variable Block to be an instance of the
	SingleLocaleDistribution class to support its use in tests.
	
	Changed reference to "block" distribution to refer to "Block" in
	several of MB's tests.  Changed a reference to "blockcyclic" to
	"Block" in studies/hpcc/RA/marybeth/ra-test-dist.chpl.
	
	Expect major module code renaming and refactoring presently, and then
	an example of defining a user-defined array and domain via a
	distribution.  As always, I am open to naming suggestions, have only a
	preference for consistency.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: _chpl_adomain.chpl 
	chapel/test/arrays/deitz/: test_parse_distributed.chpl 
	                           test_parse_distributed.good 
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.chpl 
	                                        fft.chpl 
	chapel/test/studies/hpcc/RA/marybeth/: ra-test-dist.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 

---------------------------------------------------------------------------

02/05/07 15:13:19 -- deitz

Log message:
	Changed elt_type to eltType.  Updated the spec.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_base.chpl 
	                          _chpl_ds.chpl _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl _chpl_seq.chpl 
	                          _chpl_sparse.chpl 
	chapel/spec/: Generics.tex Sequences.tex 
	chapel/test/reductions/bradc/manual/: usetype2.chpl 
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.chpl 
	                                        fft.chpl 
	chapel/test/types/type_variables/deitz/part2/: 
	                                               test_typevar_record2.chpl 
	chapel/test/types/type_variables/deitz/part7/: test_stack.chpl 

---------------------------------------------------------------------------

02/05/07 15:22:06 -- marybeth

Log message:
	Simple LU routine to serve as baseline test for
	other Chapel versions which use other features.
	
	The output of this routine also matches the output
	of the LU routine in Matlab.

Added files:
	chapel/test/studies/lu/marybeth/: lu1.chpl lu1.good 

---------------------------------------------------------------------------

02/05/07 16:00:55 -- deitz

Log message:
	Renamed several standard modules and files, and refactored:
	
	Changed:
	
	Old module file        New module file
	===============        ===============
	_chpl_file.chpl        _IO.chpl
	_chpl_htuple.chpl      _Tuple.chpl
	_chpl_adomain.chpl     _Arrays.chpl and _SingleLocaleArithmetic.chpl
	_chpl_indefinite.chpl  _SingleLocaleAssociative.chpl
	_chpl_sparse.chpl      _SingleLocaleSparse.chpl
	
	Split _chpl_adomain which used to contain the arithmetic array and
	domain implementations plus the array and domain wrapper
	implementations into two files.  The wrappers are now in _Arrays, the
	arithmetic implementations are now in _SingleLocaleArithmetic.
	
	Moved the arithmetic sequence code back into _chpl_seq.chpl.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: _chpl_seq.chpl _chpl_standard.chpl 
Added files:
	chapel/modules/standard/: _Arrays.chpl _IO.chpl 
	                          _SingleLocaleArithmetic.chpl 
	                          _SingleLocaleAssociative.chpl 
	                          _SingleLocaleSparse.chpl _Tuple.chpl 
Removed files:
	chapel/modules/standard/: _chpl_adomain.chpl _chpl_file.chpl 
	                          _chpl_htuple.chpl 
	                          _chpl_indefinite.chpl 
	                          _chpl_sparse.chpl 

---------------------------------------------------------------------------

02/05/07 16:57:58 -- marybeth

Log message:
	Modification of lu1 test to use array slices into the
	i dimension of A.

Added files:
	chapel/test/studies/lu/marybeth/: lu3.chpl lu3.good 

---------------------------------------------------------------------------

02/05/07 17:02:32 -- deitz

Log message:
	Moved halt and assert code in Standard.chpl to _IO.chpl.
	
	Renamed several standard module files:
	
	_Arrays.chpl                   ChapelArray.chpl
	_IO.chpl                       ChapelIO.chpl
	_SingleLocaleArithmetic.chpl   SingleLocaleArithmetic.chpl
	_SingleLocaleAssociative.chpl  SingleLocaleAssociative.chpl
	_SingleLocaleSparse.chpl       SingleLocaleSparse.chpl
	_Tuple.chpl                    ChapelTuple.chpl
	_chpl_base.chpl                ChapelBase.chpl
	_chpl_ds.chpl                  ChapelUtil.chpl
	_chpl_machine.chpl             ChapelLocale.chpl
	_chpl_seq.chpl                 ChapelSeq.chpl
	_chpl_standard.chpl            ChapelStandard.chpl
	
	Rationale:
	
	Some of these standard modules export an interface, others do not.  In
	all cases, we can't rename what a user calls their own file and we can
	expose to the user the name of these modules without exposing their
	implementation.  I'm open to discuss these names if anybody cares.
	The Chapel prefix is meant to signify that the user will never want to
	'use' this module or explicitly name anything in it with the module
	name.
	
	The distinctions that we need to draw between these modules are:
	
	  Are they 'used' automatically?
	  Will the user ever want to name one explicitly?
	  Will they be specialized or changed when porting Chapel?
	
	Here is my best summary of what is in all of the modules:
	
	BitOps.chpl                    bit manipulation operations
	ChapelArray.chpl               wrapper arrays and domains
	ChapelBase.chpl                core features like + and ddata
	ChapelIO.chpl                  file, Writer, halt, ...
	ChapelLocale.chpl              locale type and functionality
	ChapelSeq.chpl                 sequences and arithmetic sequences
	ChapelStandard.chpl            factored automatic uses
	ChapelTuple.chpl               tuples and tensor-product tuples
	ChapelUtil.chpl                internal utilities, e.g., a stack
	Math.chpl                      math functions
	Memory.chpl                    memoryUsed and querying physical memory
	Random.chpl                    random numbers
	Schedules.chpl                 unknown
	SingleLocaleArithmetic.chpl    base single locale arithmetic arrays
	SingleLocaleAssociative.chpl   base single locale associative arrays
	SingleLocaleSparse.chpl        base single locale sparse arrays
	Time.chpl                      timing and time/date query functions
	Types.chpl                     functions on base types

Modified files:
	chapel/compiler/AST/: build.cpp type.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/runtime/src/: config.c 
Added files:
	chapel/modules/standard/: ChapelArray.chpl ChapelBase.chpl 
	                          ChapelIO.chpl ChapelLocale.chpl 
	                          ChapelSeq.chpl ChapelStandard.chpl 
	                          ChapelTuple.chpl ChapelUtil.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 
	                          SingleLocaleSparse.chpl 
Removed files:
	chapel/modules/standard/: Standard.chpl _Arrays.chpl _IO.chpl 
	                          _SingleLocaleArithmetic.chpl 
	                          _SingleLocaleAssociative.chpl 
	                          _SingleLocaleSparse.chpl _Tuple.chpl 
	                          _chpl_base.chpl _chpl_ds.chpl 
	                          _chpl_machine.chpl _chpl_seq.chpl 
	                          _chpl_standard.chpl 

---------------------------------------------------------------------------

02/06/07 09:19:39 -- deitz

Log message:
	Re-disabled printing out config variables that exist in the standard
	modules prefixed with "Chapel" (changed from "_chpl_") in the config
	help message.  I don't think we should disable printing these.

Modified files:
	chapel/runtime/src/: config.c 

---------------------------------------------------------------------------

02/06/07 10:04:28 -- deitz

Log message:
	Set the rank of associative domains to 1.  This was previously
	necessarily set to 0 before parameter folding was moved into function
	resolution.  Fixed the reallocate method, removing a few hacks.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 

---------------------------------------------------------------------------

02/06/07 11:40:00 -- deitz

Log message:
	Renamed SingleLocale arrays and domains.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 
	                          SingleLocaleSparse.chpl 

---------------------------------------------------------------------------

02/06/07 13:26:43 -- deitz

Log message:
	Renamed some array and domain interface methods as they will be
	exposed to the user.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 
	                          SingleLocaleSparse.chpl 

---------------------------------------------------------------------------

02/06/07 13:59:11 -- deitz

Log message:
	Made the view function in the single locale arithmetic array not need
	to access the array wrapper.  Commented out an unused single locale
	arithmetic array indexing function.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 

---------------------------------------------------------------------------

02/06/07 14:50:57 -- diten

Log message:
	Fix a problem with the code:
	def foo(a:int, b:int, c:int) {
	  return (a, b, c);
	}
	var (a, _, c) = foo(1, 2, 3);
	
	The _ in the tuple was being treated as a var name in the parser, so during
	the checkParse phase an error was getting issued since "_" is not a valid
	variable name.  Now throw away the value that would be stored to the "_"
	position and don't complain about it or generate a variable for it.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/types/tuple/diten/: tuple_var_def.chpl 
	                                tuple_var_def.good 

---------------------------------------------------------------------------

02/06/07 15:10:37 -- bradc

Log message:
	This test uses the "var (x, y, _)" construct to
	create a destructuring-style declaration of variables
	while dropping other tuple values on the floor.  It
	currently causes a seg fault, but probably has a
	not-too-difficult fix.

Added files:
	chapel/test/types/tuple/bradc/: underscoreInVarDecl.chpl 
	                                underscoreInVarDecl.future 
	                                underscoreInVarDecl.good 

---------------------------------------------------------------------------

02/06/07 16:34:13 -- deitz

Log message:
	Made the slice function in the single locale arithmetic array not need
	to access the array wrapper.  Simplified to a single slice function.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 

---------------------------------------------------------------------------

02/06/07 16:35:21 -- deitz

Log message:
	Implemented low and high functions on single locale arithmetic domains
	for domains of all ranks.  It only worked with rank one domains.

Modified files:
	chapel/modules/standard/: SingleLocaleArithmetic.chpl 

---------------------------------------------------------------------------

02/06/07 16:44:52 -- waynew

Log message:
	Minor edits to comments.

Modified files:
	chapel/runtime/include/: chplthreads.h 
	chapel/runtime/src/: chplthreads.c 

---------------------------------------------------------------------------

02/07/07 09:30:01 -- deitz

Log message:
	Added a test that captures the difference between variables declared
	outside of the for loop and those declared inside the for loop that
	shows up when a begin is inside the for loop.

Added files:
	chapel/test/parallel/begin/deitz/: test_global_for_begin.chpl 
	                                   test_global_for_begin.good 

---------------------------------------------------------------------------

02/07/07 10:21:20 -- deitz

Log message:
	Unified assignment to arrays to be by shape as specified in the spec,
	removing the need for a method assign to be written on arrays.  We may
	eventually add something like this as an optimization, however.
	
	Added a method strideBy to SingleLocaleArithmeticDomain to allow a
	domain to be strided, rather than by overloading the 'by' operator,
	which is not possible for the user.
	
	Updated an associative array assignment test to follow the semantics
	of assignment via shape.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	chapel/test/domains/indefinite/waynew/: indef8-fail2.good 

---------------------------------------------------------------------------

02/07/07 10:33:27 -- deitz

Log message:
	Removed unused assign methods.

Modified files:
	chapel/modules/standard/: SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 

---------------------------------------------------------------------------

02/07/07 11:15:01 -- waynew

Log message:
	Minor cleanup and comments.

Modified files:
	chapel/test/: paratest.client.pl paratest.server.pl 

---------------------------------------------------------------------------

02/07/07 11:24:58 -- diten

Log message:
	Fix a problem with handling of "_" in tuple style variable defs.
	
	Move the check for a symbol name of "_" to a point a little later in the
	parse.  Previously a DefExpr was not inserted into the AST if its symbol name
	was "_".  This threw off a count of which tuple field matched with which
	variable, and resulted in a bad pointer dereference when the first field was
	an underscore.  Now, the DefExpr is inserted, but later removed if its symbol
	name is "_".

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/types/tuple/diten/: tuple_var_def.good 
Removed files:
	chapel/test/types/tuple/bradc/: underscoreInVarDecl.future 

---------------------------------------------------------------------------

02/07/07 13:59:10 -- waynew

Log message:
	Minor comment changes.  Also changed halt message to match new style and
	associated test outputs.

Modified files:
	chapel/modules/standard/: ChapelBase.chpl 
	                          SingleLocaleAssociative.chpl 
	chapel/test/parallel/single/waynew/: simple0.good simple0b.good 

---------------------------------------------------------------------------

02/07/07 14:49:06 -- deitz

Log message:
	Changed test_for2d.c to use int instead of long long int for
	comparative purposes since Chapel int is not 32 bits.
	
	Here is a summary of results from running this performance test today:
	
	test_for2d.c                              :  0.40 sec
	
	test_for2d.chpl (w/out garbage collection): 17.46 sec
	test_for2d.chpl (w/out gc & bounds checks): 10.19 sec
	
	test_for2d.chpl (w/ garbage collection): > 4 min and killed
	
	Clearly the current reference counting implementation and indeed
	reference counting in general is not a good idea.  We should fix
	promotion, optimize array and domain wrapper classes specially, rip
	the reference counting work out, and handle garbage collection right.

Modified files:
	chapel/test/performance/deitz/: test_for2d.c 

---------------------------------------------------------------------------

02/07/07 15:17:06 -- waynew

Log message:
	Minor comment changes and cleanup.

Modified files:
	chapel/compiler/passes/: parallel.cpp 

---------------------------------------------------------------------------

02/07/07 16:56:05 -- bradc

Log message:
	Checking in sketches of NAS CG for reference.  These leave out
	some particularly sticky details like initializing the sparse
	domain and array.  cg-core.chpl is just the conjugant gradiant
	subroutine in isolation for reference.  cg.chpl wraps it with
	some of the trappings of the benchmark (though it could use
	more as well).

Added files:
	chapel/test/npb/cg/bradc/: NOTEST cg-core.chpl cg.chpl 

---------------------------------------------------------------------------

02/08/07 14:47:25 -- bradc

Log message:
	Added David's list to the CONTRIBUTORS list.

Modified files:
	./: CONTRIBUTORS 

---------------------------------------------------------------------------

02/08/07 15:15:32 -- diten

Log message:
	Initial handling for accessing fields in a module with moduleName.fieldName
	without having used the module in the current scope.  This is currently working
	for fields and non-overloaded functions.

Modified files:
	chapel/compiler/passes/: scopeResolve.cpp 
Added files:
	chapel/test/modules/diten/: module_overloaded_function.chpl 
	                            module_overloaded_function.good 
	                            nested_module_collision.chpl 
	                            nested_module_collision.future 
	                            nested_module_collision.good 

---------------------------------------------------------------------------

02/08/07 17:11:41 -- bradc

Log message:
	Two minor changes:
	
	1) improvement to an internal error message about
	   not finding a field within a struct to print
	   out the name of the field.
	
	2) a few refactorings of the start_test script
	   and am trying the -i (ignore interrupts flag)
	   with tee to see if that fixes the cygwin
	   cron job regressions.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/test/: start_test 

---------------------------------------------------------------------------

02/09/07 13:33:00 -- deitz

Log message:
	Added CallExpr field BlockStmt::loopInfo to eventually contain all
	loop related information for all for and while loops.  The plan is to
	eventually lower for loops after function resolution so that they can
	be specialized to iterator ranks.
	
	Reworked parameter for loops to use the loopInfo field to store the
	PRIMITIVE_LOOP_PARAM call that determines the indices of the parameter
	for loop.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp expr.cpp stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

02/09/07 16:35:12 -- bradc

Log message:
	Another, hopefully invisible, change to the testing
	system, allowing it to be run with a new "-notee" flag
	in order to avoid using the tee utility.  In this
	case output is written directly to the Log file
	without reflecting it to the console.  This is being
	added in hopes of getting the cygwin regressions to
	complete again.

Modified files:
	chapel/test/: start_test 
Added files:
	chapel/test/Bin/: cat2File 

---------------------------------------------------------------------------

02/12/07 09:18:03 -- deitz

Log message:
	Made while..do loops use the BlockStmt::loopInfo field with simple
	primitive call PRIMITIVE_LOOP_WHILEDO throughout compilation.  This
	means while loops are code generated as C while loops.
	
	Updated basic block generation code to handle loops specified with
	loopInfo calls.

Modified files:
	chapel/compiler/AST/: bb.cpp build.cpp expr.cpp primitive.cpp 
	                      stmt.cpp view.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: copy_propagation.cpp 

---------------------------------------------------------------------------

02/12/07 10:29:47 -- deitz

Log message:
	Made do..while loops use the BlockStmt::loopInfo field with simple
	primitive call PRIMITIVE_LOOP_DOWHILE throughout compilation.  This
	means do..while loops are code generated as C while loops.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp stmt.cpp 

---------------------------------------------------------------------------

02/12/07 16:12:51 -- bradc

Log message:
	Following up today's developer meeting, added a test of
	enumerated domains and arrays as we might use them in the
	NPB as a future test for David's reference (cg-enumDomArr.chpl).
	
	Also added a non-future version that uses an arithmetic domain for
	comparison.

Added files:
	chapel/test/npb/cg/bradc/: .cvsignore cg-arithDomArr.chpl 
	                           cg-arithDomArr.execopts 
	                           cg-arithDomArr.good cg-core.notest 
	                           cg-enumDomArr.chpl 
	                           cg-enumDomArr.execopts 
	                           cg-enumDomArr.future 
	                           cg-enumDomArr.good cg.notest 
Removed files:
	chapel/test/npb/cg/bradc/: NOTEST 

---------------------------------------------------------------------------

02/12/07 17:28:24 -- bradc

Log message:
	Adding a future showing that using arrays within
	iterators seems to cause problems -- in this case
	a runtime segfault.

Added files:
	chapel/test/functions/iterators/bradc/: arrayInIterator.chpl 
	                                        arrayInIterator.future 
	                                        arrayInIterator.good 

---------------------------------------------------------------------------

02/13/07 10:57:41 -- bradc

Log message:
	Checking the sources for Wayne's communication libraries
	survey into CVS.

Added files:
	chapel/doc/internal/commLibs/: .cvsignore Makefile 
	                               armci-stride.eps armci-stride.fig 
	                               armci-vector.eps armci-vector.fig 
	                               armci.tex chapel.bib 
	                               comm_libs.tex gasnet.tex 
	                               mpi2-epoch.eps mpi2-epoch.fig 
	                               mpi2.tex rma.eps rma.fig 
	                               shmem.tex 

---------------------------------------------------------------------------

02/13/07 11:05:27 -- deitz

Log message:
	Reworked mechanism to determine whether a class promotes over scalar
	types.  It used to be marked by specifying an iterator with the name
	'this' even though the iterator was ignored.  It is now specified by
	declaring a field called '_promotionType' and the type of this field
	is used to determine the type of the scalar over which the class
	promotes.  The '_' indicates that this is not being exposed to users
	yet.  There are many options of how to indicate a class promotes that
	we need to think through before we expose it to the user, if we expose
	it to the user.
	
	The 'this' iterator approach has a number of problems.  The main
	implementation difficulty is that we rely on the structural iterator
	interface instead of iterator functions.  A language difficulty is
	that iterators can be used like normal functions so there is an
	inherent ambiguity between the this iterator and the this function.
	Even assuming we allow 'this' iterators, we may not want to say that
	any class that defines a 'this' iterator promotes.  Besides, it is
	currently limited to built-in types and not yet exposed to the user.
	
	This checkin dramatically simplifies the compiler code used to detect
	scalar promotion.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: ChapelArray.chpl ChapelSeq.chpl 

---------------------------------------------------------------------------

02/13/07 11:40:46 -- deitz

Log message:
	Implemented minloc and maxloc to explicitly require an index.  See new
	test for example.

Modified files:
	chapel/modules/standard/: ChapelSeq.chpl 

---------------------------------------------------------------------------

02/13/07 11:41:11 -- deitz

Log message:
	Forgot to add test of minloc and maxloc.

Added files:
	chapel/test/reductions/deitz/: test_loc_reduce.chpl 
	                               test_loc_reduce.good 

---------------------------------------------------------------------------

02/13/07 11:52:59 -- marybeth

Log message:
	Changed forbegin test to be deterministic.  I used a sync var
	to ensure that the threads started by the begin statements would
	execute serially, and a single var to ensure that the final printing
	would occur after all threads were complete.

Modified files:
	chapel/test/parallel/begin/marybeth/: test_forbegin.chpl 
	                                      test_forbegin.good 

---------------------------------------------------------------------------

02/13/07 16:10:13 -- deitz

Log message:
	Normalized returns and yields in preparation of moving the iterator
	transformation after function resolution.
	
	Removed ReturnStmt subclass.  It is replaced by two primitives:
	PRIMITIVE_RETURN and PRIMITIVE_YIELD.  This is more consistent within
	our representation given the normalization of returns and yields such
	that the return is the last statement in a function and has no effect
	on code generation.
	
	Though it should be clear that the elimination of unnecessary
	variations is good, I will mention that this change both simplifies
	the compiler and makes it more effective.  For example, without any
	extra effort, copy propagation is more applicable and our generated
	code is shorter.

Modified files:
	chapel/compiler/AST/: baseAST.cpp bb.cpp build.cpp expr.cpp 
	                      primitive.cpp stmt.cpp symbol.cpp view.cpp 
	chapel/compiler/include/: baseAST.h expr.h primitive.h stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         cullOverReferences.cpp 
	                         functionResolution.cpp 
	                         inlineFunctions.cpp memoryManage.cpp 
	                         normalize.cpp parallel.cpp 
	                         semanticChecks.cpp 

---------------------------------------------------------------------------

02/13/07 16:59:38 -- marybeth

Log message:
	Added another forbegin test which does not serialize the begin threads
	for each iteration of the for loop.  I set the default output to be
	deterministic, but the test does allow for the user to choose non-deterministic
	output.

Added files:
	chapel/test/parallel/begin/marybeth/: test_forbegin2.chpl 
	                                      test_forbegin2.good 

---------------------------------------------------------------------------

02/14/07 14:01:41 -- deitz

Log message:
	Added new gdb command lv and new debug function list_view called by
	lv.  This new debug facility attempts to print out the IR in a more
	concise fashion than nv.
	
	For example, to print out the DefExpr of the init function of the user
	module by BaseAST::id number using the ast function, type
	
	(gdb) lv ast(36672)
	
	The result is as follows:
	
	36672   def fn __init_test_var_decl4[36670]:void[8]
	36671     {
	86051       def _tmp[86049]:bool[15]
	86052       move( _tmp[86049] call( fn ![5500] __run_test_var_decl4_firsttime[36673] ) )
	36682       if _tmp[86049]
	36683         {
	86038           goto _end___init_test_var_decl4[86034]
	36683         }
	86055       move( __run_test_var_decl4_firsttime[36673] call( fn =[105] __run_test_var_decl4_firsttime[36673] false[20] ) )
	36752       call( fn __init_ChapelStandard[10203] )
	86040       def _typeTmp[86039]:string[75]
	86044       move( _typeTmp[86039] "" )
	36653       def s[36652]:string[75]
	86046       move( s[36652] _typeTmp[86039] )
	86057       move( s[36652] call( fn =[243] s[36652] "hello world" ) )
	36667       call( fn writeln[183455] s[36652] )
	86035       def _end___init_test_var_decl4[86034]
	86036       return( _void[9] )
	36671     }
	
	The numbers to the left indicate the BaseAST::id number of the
	particular top-level expression written on that line.  Note that the
	numbers match for block statement opens and closes.
	
	All primitive calls are indicated by the name of the primitive
	followed by the arguments in parentheses.  Function calls are
	indicated by 'call' followed by the base expression and then the
	arguments in parentheses.

Modified files:
	chapel/compiler/AST/: view.cpp 
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

02/14/07 14:17:15 -- bradc

Log message:
	Updating Wayne's paper sources based on most recent version
	that he mailed me this morning.

Modified files:
	chapel/doc/internal/commLibs/: comm_libs.tex gasnet.tex 

---------------------------------------------------------------------------

02/15/07 12:05:57 -- marybeth

Log message:
	Removed printing from within the threads so that test_forbegin2
	truly does have deterministic output.
	
	(Duh.  I do know how to program in parallel.  I'm just being lazy
	thinking about the output since the threads tend to run in a
	deterministic way.)

Modified files:
	chapel/test/parallel/begin/marybeth/: test_forbegin2.chpl 
	                                      test_forbegin2.good 

---------------------------------------------------------------------------

02/16/07 16:28:41 -- deitz

Log message:
	Added test I forgot to add when I implemented low and high on arrays
	for dimensions other than one (2/6).

Added files:
	chapel/test/trivial/deitz/: test_array_low.chpl 
	                            test_array_low.good 

---------------------------------------------------------------------------

02/20/07 12:32:16 -- diten

Log message:
	Initial check in for handling classes nested in other classes.  Some things
	that are mostly working:
	 * Classes are now allowed to be defined inside of other classes.
	 * Nested classes can be constructed from within the class they are nested in.
	 * Symbols in an instance of a nested class can be accessed using 'nested.x'.
	 * Inner classes with the same name as outer classes don't collide.
	
	Things known to not yet be working or that have known flaws:
	  class outerClass {
	    var a: int;
	    class innerClass {
	      def foo() {
	        a = 3; // "a" not defined
	      }
	    }
	    var innerInstance = inner(); // working but not correct
	  }
	
	  * In innerClass.foo(), a should refer to outerClass.a.  The outer this
	    pointer is available in innerClass, but is not yet used.
	  * The constructor inner() is internally called "inner".  It is a
	    constructor, so should be internally called "_construct_inner".
	
	Since these changes do not cause any new test failures, I'm checking in the
	changes despite knowing some of it is incorrect.  Additional work to follow.

Modified files:
	chapel/compiler/include/: type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: Makefile.share cleanup.cpp 
	                         functionResolution.cpp 
	chapel/test/modules/diten/: nested_module_collision.chpl 
	chapel/test/trivial/diten/: linked_list.chpl 
Added files:
	chapel/compiler/passes/: flattenClasses.cpp 
	chapel/test/classes/diten/: class_nest_simple.chpl 
	                            class_nest_simple.good 
	                            doublenest.chpl doublenest.good 
	                            test_no_name_collision.chpl 
	                            test_no_name_collision.good 

---------------------------------------------------------------------------

02/20/07 15:15:58 -- deitz

Log message:
	Made for loops use the BlockStmt::loopInfo field throughout
	compilation.  Before resolution, for loops store two symbols, an index
	and an iterator.  During resolution, for loops are expanded into calls
	into the iterator interface and the for loop is changed to store only
	a single condition symbol, much like a while loop.
	
	Added utility function istr that takes an integer and returns a
	canonicalized string.  The functions astr and istr return unique char*
	pointers stored in a hash table allowing for fast string comparisons
	of canonicalized strings.
	
	Moved the iterator transformation into its own pass called
	lowerIterators.  The code has been completely rewritten.  This pass is
	run after function resolution now.  Previously, iterators were
	transformed during normalization.  This improves the generated code in
	some ways.  With some optimizations to the iterator function before
	the transformation, e.g. copy propagation, this can be improved
	further.
	
	Sorted functions in a module prior to code generation so that we
	generate the functions in order.  Also added a comment before each
	function is printed that lists its location in the Chapel source.
	
	Reworked function resolution to determine the return type of
	iterators, change it into a sequence of whatever it yields, and ensure
	that the append function is always resolved.  The append function is
	then used in the iterator transform to build up an actual sequence in
	the case that the iterator is not called inside a loop.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp expr.cpp 
	                      primitive.cpp stmt.cpp symbol.cpp 
	                      symscope.cpp type.cpp 
	chapel/compiler/include/: baseAST.h primitive.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: Makefile.share functionResolution.cpp 
	                         inlineFunctions.cpp memoryManage.cpp 
	                         normalize.cpp 
Added files:
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

02/20/07 15:40:45 -- deitz

Log message:
	Removed a few old unused prototypes from the generated code.

Modified files:
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

02/20/07 16:05:41 -- deitz

Log message:
	Applied the optimizations in the copy propagation pass to iterator
	functions before the iterators are lowered to try to decrease the
	number of fields in the iterator class.  The next thing to do is
	implement a live variable analysis and only put locals into the
	iterator class if the local is live at any yield point.
	
	Prototyped all optimizing transformations in new file optimizations.h.

Modified files:
	chapel/compiler/passes/: copy_propagation.cpp lowerIterators.cpp 
Added files:
	chapel/compiler/include/: optimizations.h 

---------------------------------------------------------------------------

02/21/07 09:20:20 -- deitz

Log message:
	Removed .future files for five tests that are now working due to
	moving the iterator transformation after function resolution.

Removed files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator3.future 
	                                        test_instantiate_iterator3a.future 
	chapel/test/functions/iterators/bradc/: arrayInIterator.future 
	                                        paramInIterator.future 
	chapel/test/studies/hpcc/RA/bradc/: ra-constInIterator.future 

---------------------------------------------------------------------------

02/21/07 09:27:34 -- deitz

Log message:
	Updated a test due to change which made 1*int not equivalent to int
	and removed a .future, due to yesterday's iterator transformation
	move.

Modified files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator2a.chpl 
Removed files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator2a.future 

---------------------------------------------------------------------------

02/21/07 12:03:44 -- diten

Log message:
	Fix execution time segmentation violations when nested classes are used and
	the --unoptimized flag is on.
	
	Was inserting an expression that did an assignment that looked like: "a = a;".
	With optimization on, this got removed.  With optimization off, it got
	translated to "free(a); a = a; touch(a);".
	
	I stopped inserting the "a = a"; assignment, and flattened one other assignment
	to use a temp variable, ie: "a = b;" became: "_tmp = b; a = _tmp;"

Modified files:
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

02/21/07 12:36:28 -- deitz

Log message:
	Started work on updating Conversions section in the Spec.  More to do.
	
	Removed implementation support for -- commenting style.

Modified files:
	chapel/compiler/parser/: chapel.lex 
	chapel/spec/: Conversions.tex 
	chapel/test/classes/bradc/: callMethodOnClass.chpl 
	chapel/test/classes/bradc/unions/: assign1a.chpl 
	chapel/test/compflags/bradc/tokenflags/: tokentest.chpl 
	                                         tokentest2.chpl 
	                                         tokentest3.chpl 
	chapel/test/distributions/bradc/foundations/: blockdist2.chpl 
	                                              blockdist3.chpl 
	chapel/test/domains/roxana/index/: test_index_expr0.chpl 
	chapel/test/modules/bradc/manymodules/: flatmodules.chpl 
	                                        manymodules.chpl 
	chapel/test/trivial/bradc/: testAllScopes.chpl 
	                            testAllScopes2.chpl 
	chapel/test/trivial/preston/: aliasing.chpl boundfunction.chpl 
	                              gcd.chpl if.chpl tuple.chpl 
	chapel/test/types/file/: freadToClassDataMember.chpl 
	chapel/test/types/seq/bradc/: length.modify.chpl 
	chapel/test/types/tuple/bradc/: writeTuple.chpl 
	chapel/test/types/typedefs/bradc/: localType.chpl 
	                                   localType2.chpl 
	chapel/test/types/typedefs/jplevyak/: copy_typedef-1.chpl 

---------------------------------------------------------------------------

02/21/07 13:11:33 -- marybeth

Log message:
	Removed printing from within the threads so that test_forbegin
	has deterministic output.

Modified files:
	chapel/test/parallel/begin/marybeth/: test_forbegin.chpl 
	                                      test_forbegin.good 

---------------------------------------------------------------------------

02/22/07 10:33:51 -- deitz

Log message:
	Reenabled check to make sure that we do not define the same symbol
	twice in the symboltable.  I'm not sure when or why this was disabled.

Modified files:
	chapel/compiler/AST/: symscope.cpp 

---------------------------------------------------------------------------

02/22/07 11:59:23 -- deitz

Log message:
	Started cleanup of module-initFn-scopes-symboltable mess.  This
	checkin goes a long way towards fixing the global use before def
	futures, but falls short.
	
	Extended the initFn so that everything in a module, including types
	and functions, are placed in the initFn, until normalize, at which
	point types, functions, and global variables are removed from the
	initFn.
	
	Removed the initFn kludge that sets its scope to the module's scope.
	This improves the quality of generated code without extra cruft
	because it allows the initFn to have local variables.
	
	Added a stopgap to scope resolution to avoid shadowing functions and
	variables by methods of the same name.  Further improvements to the
	symbol table should eliminate the need for this stopgap.
	
	Removed hack in verification to handle the initFn scope kludge which
	sped up verification measurably.

Modified files:
	chapel/compiler/AST/: build.cpp symscope.cpp 
	chapel/compiler/passes/: functionResolution.cpp memoryManage.cpp 
	                         normalize.cpp scopeResolve.cpp 
	                         semanticChecks.cpp verify.cpp 
	chapel/test/classes/deitz/: test_method_call2.good 

---------------------------------------------------------------------------

02/22/07 14:52:23 -- deitz

Log message:
	Simplified ModuleSymbol replacing the fields
	
	  AList* stmts
	  SymScope* modScope
	  Vec<ModuleSymbol*> modUses
	
	with the single field
	
	  BlockStmt* block
	
	This reduces the unnecessary variations that we make when associating
	scopes with AST nodes by one.
	
	Removed unused global variable inUserModule, unused methods
	numUserModules and setModScope, and unused macro OPERATOR_CHAR.

Modified files:
	chapel/compiler/AST/: astutil.cpp baseAST.cpp build.cpp stmt.cpp 
	                      symbol.cpp symscope.cpp view.cpp 
	chapel/compiler/include/: stmt.h symbol.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp codegen.cpp 
	                         copy_propagation.cpp flattenClasses.cpp 
	                         flattenFunctions.cpp 
	                         functionResolution.cpp memoryManage.cpp 
	                         normalize.cpp parallel.cpp 
	                         printProgram.cpp scopeResolve.cpp 
	                         verify.cpp 

---------------------------------------------------------------------------

02/22/07 15:16:07 -- diten

Log message:
	Add initial handling of references to outer class variables from inner classes.
	Every nested class instance has a "this0" pointer which points to the
	instance of the class it is nested in.  For every variable reference in the
	inner class, implicitly add this.this0.this0... etc. until the symbol resolves.
	Do the same for methods.

Modified files:
	chapel/compiler/AST/: symscope.cpp 
	chapel/compiler/passes/: scopeResolve.cpp 
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

02/22/07 15:31:41 -- deitz

Log message:
	Removed ::print and printProgram functionality so that we no longer
	need to maintain this code.  Testing showed that it is dated.  The
	view methods replace this functionality.

Modified files:
	chapel/compiler/AST/: alist.cpp baseAST.cpp expr.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h stmt.h 
	                          symbol.h type.h 
	chapel/compiler/passes/: Makefile.share 
Removed files:
	chapel/compiler/passes/: printProgram.cpp 

---------------------------------------------------------------------------

02/22/07 15:43:58 -- deitz

Log message:
	Added two nested class .futures for David.

Added files:
	chapel/test/classes/deitz/nested/: .cvsignore test_nested1.chpl 
	                                   test_nested1.future 
	                                   test_nested1.good 
	                                   test_nested2.chpl 
	                                   test_nested2.future 
	                                   test_nested2.good 

---------------------------------------------------------------------------

02/22/07 15:47:44 -- deitz

Log message:
	Reenabled -Werror under the assumption that disabling it was not meant
	to be checked in.

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

02/22/07 16:45:25 -- deitz

Log message:
	Simplified promotion wrapper build code so that it no longer needs to
	call scope resolution.  All scope resolution is now done in the
	scopeResolve pass.
	
	Also made a few arguments take constant character strings rather than
	just character strings.

Modified files:
	chapel/compiler/AST/: baseAST.cpp build.cpp expr.cpp symbol.cpp 
	chapel/compiler/include/: baseAST.h expr.h symbol.h 

---------------------------------------------------------------------------

02/23/07 09:07:29 -- deitz

Log message:
	Forgot to change -- to // in this regression.

Modified files:
	chapel/test/npb/ft/: ft-serial.chpl 

---------------------------------------------------------------------------

02/23/07 09:25:46 -- deitz

Log message:
	Added working test of nested iterator.

Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_nested_iterator.chpl 
	                                        test_nested_iterator.good 

---------------------------------------------------------------------------

02/23/07 12:48:09 -- deitz

Log message:
	Fixed a bug in sequence inference in which a copied sequence would
	alias an old one. In "var ss = s;" where ss and s are sequences, ss
	was an alias of s rather than a copy of it.
	
	Added a test for this bug.

Modified files:
	chapel/modules/standard/: ChapelSeq.chpl 
Added files:
	chapel/test/types/seq/deitz/: test_seq_copy.chpl 
	                              test_seq_copy.good 

---------------------------------------------------------------------------

02/23/07 12:48:34 -- deitz

Log message:
	Removed duplicated code from AST build functions build_reduce and
	build_scan by removing build_scan and adding an optional third
	argument to build_reduce that flags whether this should be a scan.
	The only difference between these two functions was whether a call to
	_reduce or _scan was inserted.
	
	Improved performance of reductions and scans be removing an
	unnecessary "big" compiler temporary.  A big compiler temporary is a
	copy of whatever it was assigned, rather than just a reference to it.
	This is especially troubling regarding arrays and sequences.  I hope
	to get to the point eventually where the compiler can identify all of
	the places where big temporaries are inserted; I believe this can be
	restricted to a single place in the compiler according to a unifying
	strategy I have in mind for optimizing promotion, iterators, and
	forall expressions.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

02/23/07 13:39:23 -- diten

Log message:
	If class D is nested in class C, then from a method in class C "var d: D = D()"
	was getting compiler time errors.  These were due to improperly treating the D
	type specifier as a D constructor call while adding this/this0 pointers.
	
	Fix this by verifying that the parent is a CallExpr before adding the pointers.

Modified files:
	chapel/compiler/passes/: scopeResolve.cpp 

---------------------------------------------------------------------------

02/23/07 13:40:01 -- deitz

Log message:
	Added domain methods setIndices(x) and getIndices() to set a domain
	based on the indices 'x' and return the indices that define a domain.
	Domain assignment is thus accomplished by getting the indices out of
	one domain and passign them into the other domain via setIndices.
	
	The method setIndices should not yet be called directly since it does
	not do a reallocation.  This would be a minor change to get working, I
	believe.
	
	Note that the domain assignment error message has changed to complain
	about the setIndices method.
	
	Added flag --default-dist, as suggested by Brad, to change the default
	distribution that is associated with non-distributed domains.  By
	default, it is SingleLocaleDistribution.
	
	This flag may help developers by allowing a set of array tests to be
	run with the new distribution.  However, a few things also need to
	happen to make this a possibility.  The distribution has to be in a
	module that all of these tests can automatically use and that does not
	necessarily require the tests to have a main function (if they don't).

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 
	chapel/test/arrays/deitz/: test_array_uint2.good 

---------------------------------------------------------------------------

02/23/07 14:33:22 -- diten

Log message:
	Add a test and a future for nested classes. nesting_with_inheritance checks
	that the correct instance of a variable is chosen when an inner class
	instance references a variable it inherited from a parent class which is also
	defined in an outer class.
	
	deep_nest nests classes 9 levels deep and from the innermost calls methods
	and references variables in outer classes to ensure the proper versions are
	chosen.  Currently, a method call is not getting function resolved due to
	this/outer pointers.

Added files:
	chapel/test/classes/diten/: deep_nest.chpl deep_nest.future 
	                            deep_nest.good 
	                            nesting_with_inheritance.chpl 
	                            nesting_with_inheritance.good 

---------------------------------------------------------------------------

02/26/07 12:21:03 -- bradc

Log message:
	Initial user code from Aniruddha Shet, part of Robert
	Harrison's group at ORNL.  Does some simulated
	array slice assignments similar to what one might
	want in a coupled climate model.

Added files:
	chapel/test/users/shetag/: .cvsignore ccs.chpl ccs.good 

---------------------------------------------------------------------------

02/26/07 12:24:54 -- bradc

Log message:
	A future showing that currently we permit a const
	array to be assigned to.  This should eventually
	become illegal.

Added files:
	chapel/test/arrays/bradc/: constArray.chpl constArray.future 
	                           constArray.good 

---------------------------------------------------------------------------

02/26/07 12:30:13 -- bradc

Log message:
	One more future showing that tuples of config vars
	don't currently work and don't give a clear error
	message if they're not meant to work.  (I think it'd
	be nice to support them, but even if that's not the
	general perception, a better error message is
	in order).

Added files:
	chapel/test/execflags/bradc/: tupleConfig.chpl 
	                              tupleConfig.future 
	                              tupleConfig.good 

---------------------------------------------------------------------------

02/27/07 08:17:13 -- deitz

Log message:
	Removed code that inserted _to_seq functions for iterator classes when
	iterators were transformed before function resolution.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

02/27/07 09:49:42 -- deitz

Log message:
	Refactored cleanup to fix cross-module issues.  Added a test that
	showed a cross-module issue, but that is probably not the only one.
	This issue shows that a subclass in a different module will not work
	if the parent class has a field in it.  Added some comments to the
	cleanup pass.

Modified files:
	chapel/compiler/include/: astutil.h passes.h 
	chapel/compiler/passes/: cleanup.cpp 
Added files:
	chapel/test/classes/deitz/: test_inherit1.chpl 
	                            test_inherit1.good 

---------------------------------------------------------------------------

02/27/07 10:44:53 -- deitz

Log message:
	This major change lays the groundwork for supporting multiple types of
	domains that interact.  It also causes three regressions due to double
	allocation of arrays.  I'm working on this next but want to separate
	out this work.  Expect:
	
	 [Error matching program output for memory/shannon/jacobi]
	 [Error matching program output for memory/shannon/printMemTable]
	 [Error matching program output for memory/shannon/printMemTable2]
	
	Changed the array and domain wrapper classes into records. This has
	the advantage of removing an extra memory reference when accessing
	arrays and domains and simplifies the code base since arrays and
	domains associate automatic storage like records.
	
	Removed some special treatment of the _init function in normalization
	in which temporaries were not inserted for its actual argument thus
	enabling a brittle but important transformation in function
	resolution.  Reworked the transformation in function resolution.
	
	Reworked the DefExpr transformation, simplifying it.  As a side
	benefit, we now generate a much better error message for
	classes/bradc/weirdinit.
	
	Moved the _arrs sequence of base arrays out of the domain wrapper and
	into the domain base class. This is a better place for this array
	since it can become accessible to user code and because of the array
	and domain wrapper record change.  However, there is now a cycle
	between arrays and domains since the domain classes keep a sequence of
	all of the arrays declared over them. Futurized three memory leak
	tests.
	
	Added a necessary method buildEmptyDomain() to the domain
	interface. This method creates an empty domain of that domain type and
	handles the case where a domain is not initialized in a less fragile
	way without requiring special casing code. Previously, the _value
	class was left nil instead of being produced empty.
	
	Specified _pass, _init, and _copy functions for the domain wrapper to
	control the exact behavior of argument passing, variable declarations
	with types, and variable declarations with initialization expressions.
	
	Reworked the _init function on the array wrapper which must never have
	been used; it was a classic case of infinite recursion.
	
	With the addition of a field to BaseDomain, made all calls to subclass
	domain constructors use pass by name because the _arrs field in
	BaseDomain is the expected first argument to the constructor.
	
	These changes make arrays and domains as fields in classes
	significantly more stable.  Removed .future for
	trivial/diten/class_domain_init.

Modified files:
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 
	                          SingleLocaleSparse.chpl 
	chapel/test/classes/bradc/: weirdinit.good 
Added files:
	chapel/test/memory/deitz/: test_array_leak.future 
	                           test_array_of_class_leak.future 
	                           test_jacobi_leak.future 
Removed files:
	chapel/test/trivial/diten/: class_domain_init.future 

---------------------------------------------------------------------------

02/27/07 12:00:04 -- deitz

Log message:
	Fixed the double allocation of arrays removing the three failures I
	mentioned in my last checkin.
	
	Added new array type record called ArrayTypeInfo that is meant to
	serve as runtime type information of an array.  The array type in
	Chapel is complicated because the domain that is tied to the type has
	runtime information associated with it that needs to be used to
	declare an array of a given type.
	
	Work is still required to enable arrays of arrays in a sane way, but
	this may be a start.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: ChapelArray.chpl 

---------------------------------------------------------------------------

02/27/07 12:09:48 -- marybeth

Log message:
	Adding four test cases which use the same 10X10 test
	matrix (magic square of dimension 10).
	
	nopivlu - LU without pivoting
	pivlu - LU with pivoting
	
	nopivlublock - Block LU without pivoting
	pivlublock - Block LU with pivoting

Added files:
	chapel/test/studies/lu/marybeth/: nopivlu.chpl nopivlu.good 
	                                  pivlu.chpl pivlu.good 
	                                  nopivlublock.chpl 
	                                  nopivlublock.good 
	                                  pivlublock.chpl 
	                                  pivlublock.good 

---------------------------------------------------------------------------

02/27/07 13:51:35 -- bradc

Log message:
	Added a couple of tests motivated by Aniruddha Shet's
	ccs.chpl code in which he noticed that array slicing
	using degenerate dimensions didn't work -- one had to
	use "i..i" rather than simply "i".  While this is
	related to our discussion about having rank-dropping
	slicing, his use of such ranges and these tests are
	independent of that decision, I believe.

Added files:
	chapel/test/arrays/bradc/: sliceViaSingleton.chpl 
	                           sliceViaSingleton.future 
	                           sliceViaSingleton.good 
	                           sliceViaSingleton3d.chpl 
	                           sliceViaSingleton3d.future 
	                           sliceViaSingleton3d.good 

---------------------------------------------------------------------------

02/27/07 14:31:30 -- deitz

Log message:
	Unified forall expressions, predicated forall expressions, the special
	array declaration syntax that looks like a forall expression, and
	promotion with the new implementation of iterators.  The functions
	that are used to implement these four language concepts are now
	implemented as iterators.  This unifies the introduction of sequence
	temporaries and should allow for their removal.  Their removal will
	have an effect on the semantics of some corner cases, I think, but I
	also think that we can define our semantics to allow their removal.
	
	This results in a major simplification to build_for_expr.
	
	Disabled inlining on promotion wrappers due to a reference counting
	bug.

Modified files:
	chapel/compiler/AST/: build.cpp symbol.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

02/27/07 14:45:54 -- deitz

Log message:
	Added a test case of a code that would produce a different answer if
	we inserted sequence temporaries for promotion.  In this code
	
	  var n: int;
	
	  def foo(i: int) {
	    n = n + 1;
	    writeln(i);
	  }
	
	  def bar(i: int) return n + i;
	
	  foo(bar(1..10));
	
	the call to bar promotes it over the values one to ten.  If the result
	of the promotion of bar is captured in a sequence at this point, then
	it returns the values one to ten exactly.  That is what currently
	happens and the .good file is defined as such.  If a sequence does not
	capture the results of bar but rather the results are sent into foo to
	promote it, then n will be changed and the results that bar produces
	will be changed as its execution is interleaved with foo.
	
	I think this is how we should define the semantics of promotion and
	forall expressions.  If we think of these as being possible in
	parallel, then the semantics can be defined as potentially serial, in
	an arbitrary order, or concurrently.  That would make the output
	nondeterministic, but allows for parallelization and optimization.

Added files:
	chapel/test/arrays/deitz/promotion/: 
	                                     test_scalar_promote_side_effect.chpl 
	                                     test_scalar_promote_side_effect.good 

---------------------------------------------------------------------------

02/27/07 14:52:32 -- marybeth

Log message:
	Future for test which attempts to initialize a 2-D array from
	a file.

Added files:
	chapel/test/arrays/marybeth/: testinit.chpl testinit.future 
	                              testinit.good 

---------------------------------------------------------------------------

02/27/07 15:10:14 -- deitz

Log message:
	Added missing data file. Called file class constructor. Used pass by
	name mechanism since the order of arguments specified did not match
	the order of the fields.  Removed .future.

Modified files:
	chapel/test/arrays/marybeth/: testinit.chpl 
Added files:
	chapel/test/arrays/marybeth/: Adata.dat 
Removed files:
	chapel/test/arrays/marybeth/: testinit.future 

---------------------------------------------------------------------------

02/27/07 15:54:33 -- deitz

Log message:
	Added a developer flag --warn-temporary that warns about sequence
	temporaries being inserted into the generated code.  It is possible
	that we can eventually change this to a compiler failure, but for now
	sequence temporaries are inserted during compilation.  I'm not sure
	that they are restricted solely to the place where I've added this
	warning.  We can tighten up the compiler code to be more sure, but it
	is not totally clear at this point.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

02/27/07 17:41:27 -- marybeth

Log message:
	Changed the following tests so that the test matrix A is
	read in from Adata.dat.
	
	nopivlu.chpl
	pivlu.chpl
	
	nopivlublock.chpl
	pivlublock.chpl

Modified files:
	chapel/test/studies/lu/marybeth/: nopivlu.chpl pivlu.chpl 
	                                  nopivlublock.chpl 
	                                  pivlublock.chpl 
Added files:
	chapel/test/studies/lu/marybeth/: Adata.dat 

---------------------------------------------------------------------------

02/28/07 08:48:24 -- deitz

Log message:
	Put the code to determine the element type for a reduction into a type
	block so that it is used only to determine type information in
	function resolution and is not code generated.

Modified files:
	chapel/compiler/AST/: build.cpp 

---------------------------------------------------------------------------

02/28/07 11:30:44 -- deitz

Log message:
	Refactored lowerIterators and added some comments, including an
	overview and plan at the top.
	
	Added a test code to illustrate the iterator transformation.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 
Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_transform.chpl 
	                                        test_iterator_transform.good 

---------------------------------------------------------------------------

02/28/07 16:40:02 -- deitz

Log message:
	Small fix to comment of future plan.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

03/01/07 12:21:42 -- marybeth

Log message:
	Adding a test program which implements an array stored in column major
	order.  To use this type of array, the domain is declared with:
	
	distributed(CMODist())
	
	and the array is then declared with this domain.
	
	This program tests assignment, slicing and writing of this new
	type of array.

Added files:
	chapel/test/arrays/marybeth/: CMO_array.chpl CMO_array.good 

---------------------------------------------------------------------------

03/02/07 10:00:33 -- deitz

Log message:
	Started working on eliminating sequence temporaries.  This checkin
	goes a long way to get this working.  The propagation of iterator
	types is now extended to clone and specialize functions.  The next
	step is to clone and specialize classes that iterators are captured
	in.  This is particularly important and maybe only important as far as
	tuples are concerned because tuples are used to implement zipper
	iteration which is encountered in the common case of assignment to
	arrays.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

03/05/07 10:49:41 -- deitz

Log message:
	Implemented scalar replacement of aggregates. It is off by default but
	has been tested on the complete test suite and is effective at
	eliminating tuples. However, it does run into two problems:
	
	First, if inlining is disabled, the generated code may fail to compile
	because it appears that we would need to pass a reference by
	reference, but only one level of referencing is currently
	supported. To get this working will require improvements to reference
	handling. This issue is seen in arrays/deitz/jacobi-no-inline.
	
	Second, if an array of tuples is created, or more precisely, if a
	ddata of tuples is created, then we run into an issue because the
	element of the ddata vector needs to continue to be a tuple. To get
	this working will require a small extension to the ddata
	primitives. This issue is seen in release/examples/genericStack2.
	
	Also, scalar replacement of aggregates initially seems to result in a
	slow-down when applied to the 2D performance test, but I have not
	looked into this. It should not necessarily be surprising as we pass
	more arguments to functions and potentially create more globals,
	etc. Performance can probably be improved but it remains unclear
	whether this will buy us anything significant.
	
	Note that we should add an option to apply scalar replacement of
	aggregates only to the array and domain wrappers which should both
	contain only a single field. This would effectively eliminate these
	wrappers.
	
	Why did I implement this now? In order to apply iterator propagation
	in the zippered or tensored context, there were two ways to
	proceed. First, iterators could be propagated into classes and the
	classes cloned, my initial plan. Second, tuples of sequences could be
	destructured before iterator propagation avoiding the need to take the
	first approach. Scalar replacement is not yet done before iterator
	propagation so this work does not yet have the desired effect.
	
	Added two flags
	
	  --scalar-replace-tuples
	
	   Apply scalar replacement of aggregates optimization to tuples. This
	   effectively eliminates tuples in the generated code, replacing the
	   records with the scalar component. This optimization is off by
	   default.
	
	  --no-iterator-propagation
	
	   Disable propagation of iterator classes. This causes sequence
	   temporaries to be inserted for every promotion, forall expression,
	   and iterator invocation.
	
	Added two tests to check these flags.
	
	Note that I updated
	
	  compflags/bradc/help/userhelp
	
	I updated this test mindlessly. This test judges the appearance of the
	help message which lists all the flags. I added two more flags with
	longer names than would fit in the allocated spot. I don't believe
	that all of the flag names we should use should be so short. The
	longer names are more descriptive. I would suggest a refactoring where
	there is a short list of the options followed by the options with
	longer explanations in alphabetical order. The short list or the long
	list or both can be categorized.

Modified files:
	chapel/compiler/include/: driver.h optimizations.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share lowerIterators.cpp 
	chapel/modules/standard/: ChapelTuple.chpl 
	chapel/test/compflags/bradc/help/: userhelp.txt 
Added files:
	chapel/compiler/passes/: scalarReplace.cpp 
	chapel/test/arrays/deitz/: jacobi-scalar-replace-tuples.chpl 
	                           jacobi-scalar-replace-tuples.compopts 
	                           jacobi-scalar-replace-tuples.good 
	                           test_plus_seq_temps.chpl 
	                           test_plus_seq_temps.compopts 
	                           test_plus_seq_temps.good 

---------------------------------------------------------------------------

03/05/07 10:57:00 -- bradc

Log message:
	Start at first draft of report on Chapel preliminary
	release.

Added files:
	chapel/doc/internal/prelimRelease/: .cvsignore prelimRelease.tex 

---------------------------------------------------------------------------

03/05/07 11:53:50 -- bradc

Log message:
	Finished pass on initial draft of preliminary
	release report.

Modified files:
	chapel/doc/internal/prelimRelease/: prelimRelease.tex 

---------------------------------------------------------------------------

03/05/07 11:59:20 -- bradc

Log message:
	Spellcheck.

Modified files:
	chapel/doc/internal/prelimRelease/: prelimRelease.tex 

---------------------------------------------------------------------------

03/05/07 12:08:40 -- deitz

Log message:
	Minor simplification to codegen for move primitive.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

03/05/07 13:59:34 -- deitz

Log message:
	Moved the insertion of return temporaries into a single spot, during
	the pruning of function resolution.  Removed the two instances of this
	code, from scalarReplace and memoryManage.
	
	Made a minor simplification to cullOverReferences.

Modified files:
	chapel/compiler/passes/: cullOverReferences.cpp 
	                         functionResolution.cpp memoryManage.cpp 
	                         scalarReplace.cpp 

---------------------------------------------------------------------------

03/05/07 15:06:00 -- bradc

Log message:
	Made a few edits based on Mary Beth's high-level feedback.

Modified files:
	chapel/doc/internal/prelimRelease/: .cvsignore prelimRelease.tex 

---------------------------------------------------------------------------

03/06/07 10:32:44 -- deitz

Log message:
	Removed the _promotionType field and parameter fields from classes and
	records after function resolution.  This is similar to the removal of
	type fields.  The _promotionType field is used only to control how
	scalar promotion works.
	
	Made it so that by default scalar replacement is applied to the
	default array and domain wrapper records thus eliminating them from
	the generated code.  This ensures testing of scalar replacement.  Note
	that currently if --no-inline is specified, this scalar replacement is
	disabled.  (No noticeable performance effect on test_for2d, though I
	see more tests timing out during execution when testing on the
	servers.)
	
	Added a pass prune() that removes all dead types and functions from
	the AST.  This is called now after the optimizations, including scalar
	replacement, which makes some types dead.
	
	Added a flag --no-scalar-replace-array-wrappers to disable scalar
	replacement on the array and domain wrapper records.

Modified files:
	chapel/compiler/AST/: astutil.cpp 
	chapel/compiler/include/: driver.h optimizations.h 
	chapel/compiler/main/: driver.cpp passlist.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         functionResolution.cpp 
	                         scalarReplace.cpp 

---------------------------------------------------------------------------

03/06/07 12:09:43 -- deitz

Log message:
	Refactored propagateIteratorType and requiresSequenceTemporary to take
	a calling context rather than to attempt propagation at the call site.
	This is particularly difficult in determining the requirement for a
	sequence temporary without cloning the function.  The context is
	currently a single call, but it should be extended to a stack so that
	it can be unwound.
	
	Fixed a bug in the propagation of iterators in which all iterator
	interface methods were treated as being over an iterator class, rather
	than just those over a corresponding sequence type.
	
	Added inline pragmas to tuple constructors.
	
	Prototyped inlineCall(CallExpr*) in optimizations.h.
	
	Added code to scalar replace tuples of sequences and sequence nodes,
	but disabled it.  By doing this scalar replacement before propagating
	iterators, sequence temporaries are not always needed in zipper or
	tensor contexts.  However, more work needs to be done to make this
	work.

Modified files:
	chapel/compiler/include/: optimizations.h 
	chapel/compiler/passes/: cleanup.cpp inlineFunctions.cpp 
	                         lowerIterators.cpp 
	chapel/modules/standard/: ChapelSeq.chpl 

---------------------------------------------------------------------------

03/06/07 12:11:15 -- deitz

Log message:
	Added a directory of tests that use the --warn-temporary flag to
	ensure that the removal of sequence temporaries continues to work.
	One .future requires that the context become a stack instead of a
	single call as described in my last checkin.
	
	Changed the initialization of the Locale array in the standard modules
	so that a warning is not issued for this code on every compilation.
	Once iterator propagation applies to this case, we can change it back
	if wanted.

Modified files:
	chapel/modules/standard/: ChapelLocale.chpl 
Added files:
	chapel/test/functions/deitz/iterators/temps/: .cvsignore 
	                                              COMPOPTS 
	                                              test_iterator_temp1.chpl 
	                                              test_iterator_temp1.good 
	                                              test_iterator_temp2.chpl 
	                                              test_iterator_temp2.compopts 
	                                              test_iterator_temp2.good 
	                                              test_iterator_temp3.chpl 
	                                              test_iterator_temp3.good 
	                                              test_iterator_temp4.chpl 
	                                              test_iterator_temp4.future 
	                                              test_iterator_temp4.good 

---------------------------------------------------------------------------

03/06/07 12:17:42 -- marybeth

Log message:
	Added a new version of the no pivot, blocked LU which defines
	domains D11, D12, D21, D22 to correspond to the linear algebra
	block definitions for the lu block algorithm.  I used these
	domains where I could.  This is a long way from the version of
	the algorithm that I envision, but it's a step in that direction.

Added files:
	chapel/test/studies/lu/marybeth/: blocks.chpl blocks.good 

---------------------------------------------------------------------------

03/06/07 13:27:27 -- deitz

Log message:
	Extended iterator propagation so that the calling context is a stack
	rather than simply a single call.  This extends its applicability as
	illustrated in functions/deitz/iterators/temps/test_iterator_temp4.
	
	Removed a .future.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 
Removed files:
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp4.future 

---------------------------------------------------------------------------

03/06/07 14:59:21 -- bradc

Log message:
	Started taking second pass through this document.
	More to do still.

Modified files:
	chapel/doc/internal/prelimRelease/: prelimRelease.tex 

---------------------------------------------------------------------------

03/06/07 15:56:04 -- deitz

Log message:
	Added a .future showing a bug with shallow domain copies.

Added files:
	chapel/test/arrays/deitz/: test_assign_copy.chpl 
	                           test_assign_copy.future 
	                           test_assign_copy.good 

---------------------------------------------------------------------------

03/06/07 16:44:23 -- deitz

Log message:
	Removed some dead code from function resolution that used to handle
	the _init function.  Only half of that specialization is still
	necessary.
	
	Fixed the _copy function on domains so that domain copying is deep.
	Thus in
	
	  var D1 = D2;
	
	D1 is not an alias of D2.
	
	Removed a .future.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: ChapelArray.chpl 
Removed files:
	chapel/test/arrays/deitz/: test_assign_copy.future 

---------------------------------------------------------------------------

03/06/07 16:55:32 -- bradc

Log message:
	Finished second pass of this document.

Modified files:
	chapel/doc/internal/prelimRelease/: prelimRelease.tex 

---------------------------------------------------------------------------

03/07/07 09:55:31 -- deitz

Log message:
	Removed the domain wrapper field from the array wrapper.  The array
	wrapper record now stores all the relevant type information to create
	its own domain wrapper record on the domain that the wrapped array
	points.  It does so via the parenthesesless method _dom which
	conveniently replaces the field dom.  This is a clean substitution and
	a nice use of a productivity feature.
	
	Specialized scalar replacement to take advantage of records with only
	a single field.  They use the return mechanism instead of pass by
	reference in this case.  Since with this change, the array and domain
	wrapper records each contain a single field, this specialization of
	scalar replacement succeeds.
	
	This fixes the regressions and time outs so there is an issue related
	to the pass by reference scalar replacement approach, probably related
	to passing references by reference, but I'll have to look into it
	further.
	
	I'm seeing some platform-specific failures of
	
	  release/examples/genericStack2
	
	which I am looking into.  This fixes other problems so I'm checking in.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp scalarReplace.cpp 
	chapel/modules/standard/: ChapelArray.chpl 

---------------------------------------------------------------------------

03/07/07 11:31:30 -- bradc

Log message:
	Incorporated changes based on (most of) Steve and Mary
	Beth's comments.  I'm not planning to do much more with
	this for MS2, barring any showstoppers that people note.
	
	Checking in the PDF version that I'll send to Keith.

Modified files:
	chapel/doc/internal/prelimRelease/: .cvsignore prelimRelease.tex 
Added files:
	chapel/doc/internal/prelimRelease/: prelimRelease.pdf 

---------------------------------------------------------------------------

03/07/07 11:32:23 -- deitz

Log message:
	Fixed a bug in domain assignment where a domain could lose track of
	the arrays that it was tracking.  This fixes the cross-platform
	difficulties and valgrind errors with release/examples/genericStack2.

Modified files:
	chapel/modules/standard/: SingleLocaleArithmetic.chpl 

---------------------------------------------------------------------------

03/07/07 19:19:58 -- marybeth

Log message:
	Checking in minor changes that Keith requested.

Modified files:
	chapel/doc/internal/prelimRelease/: prelimRelease.tex 
	                                    prelimRelease.pdf 

---------------------------------------------------------------------------

03/08/07 08:22:18 -- deitz

Log message:
	Changed references of A.dom to A.domain.

Modified files:
	chapel/test/studies/lu/marybeth/: blocks.chpl nopivlu.chpl 
	                                  nopivlublock.chpl pivlu.chpl 
	                                  pivlublock.chpl 

---------------------------------------------------------------------------

03/08/07 08:31:49 -- deitz

Log message:
	Cleaned up the code generation of _chpl_header.h.  Beautify is run on
	it and typedefs are folded into the struct declaration except for
	class references which need to come first.  The types, global
	variables, and function prototypes are now generated in a sorted
	order, rather than arbitrarily.  Comments are generated to divide the
	file into its constituent parts:
	
	  Class Reference Types
	  Enumerated Types
	  Records and Unions (Hierarchically)
	  Classes
	  Function Prototypes
	  Global Variables
	
	Removed the extra linefeed between the closing } of a then block and
	the else keyword.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

03/08/07 11:22:45 -- deitz

Log message:
	Removed extra parameter to fprintf.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

03/08/07 11:35:04 -- marybeth

Log message:
	Changed header to include proprietary notice and the title of the
	paper on each page.

Modified files:
	chapel/doc/internal/prelimRelease/: prelimRelease.tex 
	                                    prelimRelease.pdf 

---------------------------------------------------------------------------

03/08/07 12:17:24 -- deitz

Log message:
	Removed unnecessary use of compute_sym_uses in normalize.

Modified files:
	chapel/compiler/passes/: normalize.cpp 

---------------------------------------------------------------------------

03/08/07 12:22:43 -- deitz

Log message:
	Fixed paratest.server.pl to test subdirectories of parent directories
	that have a NOTEST file in them.  This increases coverage of the
	parallel testing script by 9 tests and three directories that it was
	missing:
	
	  npb/cg/bradc
	  npb/ft
	  studies/lu/marybeth

Modified files:
	chapel/test/: paratest.server.pl 

---------------------------------------------------------------------------

03/08/07 14:35:29 -- deitz

Log message:
	Updated Scope section with changes from today's meeting.

Modified files:
	chapel/spec/: Scope.tex 

---------------------------------------------------------------------------

03/09/07 10:55:05 -- deitz

Log message:
	Made compute_sym_uses build up two vectors on symbols: uses and defs.
	The defs vector contains uses of the symbol on the left-hand side of
	MOVE and REF primitives and in a pass by reference context of a
	function call.  The uses vector contains all the other uses and also
	contains the uses in a pass by reference context of a function call.
	
	Fixed a bug in constant assignment detection.  Constants can no longer
	be passed with INOUT or OUT intents.  Added a test of this check.

Modified files:
	chapel/compiler/AST/: astutil.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: copy_propagation.cpp 
	                         cullOverReferences.cpp 
	                         functionResolution.cpp 
	                         lowerIterators.cpp normalize.cpp 
	                         semanticChecks.cpp 
	chapel/test/functions/deitz/: test_var_function1.good 
Added files:
	chapel/test/functions/deitz/: test_inout_const.chpl 
	                              test_inout_const.good 

---------------------------------------------------------------------------

03/09/07 11:26:26 -- deitz

Log message:
	Minor simplification due to defs/uses split.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

03/09/07 11:46:20 -- deitz

Log message:
	Added code to ensure that a sequence temporary is inserted during
	iterator propagation if the iterator is propagated through a symbol
	that is defined multiple times.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

03/09/07 15:28:00 -- diten

Log message:
	Add a future showing weird behavior iterating over indefinite domains with
	enum index types.  Also, it causes an abort that goes away with the
	--no-scalar-replace-array-wrapper option.

Added files:
	chapel/test/types/enum/diten/: enumDom.chpl enumDom.future 
	                               enumDom.good 

---------------------------------------------------------------------------

03/12/07 09:42:58 -- deitz

Log message:
	Added a new performance test suite cgapb which stands for "C gets A
	plus B" where C, A, and B are 2D arrays.  The parameters are currently
	set to 1024x1024 arrays.  There is one C version and two Chapel
	versions.  The baseline Chapel version is succinct but requires
	promotion.  The "_loop" Chapel version uses an explicit forall loop
	with indexing.

Added files:
	chapel/test/performance/deitz/: test_cgapb.c test_cgapb.chpl 
	                                test_cgapb.good 
	                                test_cgapb_loop.chpl 
	                                test_cgapb_loop.good 

---------------------------------------------------------------------------

03/12/07 10:45:20 -- deitz

Log message:
	Reimplemented the sequence class to no longer use a linked list
	implementation.  I did this to enable a simplified iterator
	propagation optimization.  Before this change, the cursor of the
	sequence was different than the cursor of the iterator class,
	requiring that the cursor type of the iterator class be propagated
	where necessary.  With this change, the cursor types are the same so
	propagation of the cursor type will no longer be necessary.

Modified files:
	chapel/modules/standard/: ChapelSeq.chpl 

---------------------------------------------------------------------------

03/12/07 12:43:55 -- diten

Log message:
	Add enumerated domains and arrays.  Enumerated domains and arrays are
	currently implemented on top of indefinite domains/arrays.  Add a primitive
	__primitive("isEnumType", t) which is true if t is an enum type or value.
	Add default functions _enum_enumerate(type t) for each enum defined.  This
	gives a sequence of all values in the enumeration.
	
	Still can't pass the test/npb/cg/bradc/cg-enumDomArr future due to a problem
	where the enum type gets changed to int(8) in "for (i,j) in (a.domain,s) do"
	where "a" has an enumerated domain.  If one instance of that for loop gets
	changed to "for (j,i) in (s,a.domain) do" in a standard module, then this
	test passes.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         filesToAST.cpp functionResolution.cpp 
	chapel/modules/standard/: ChapelArray.chpl ChapelStandard.chpl 
	                          SingleLocaleArithmetic.chpl 
	chapel/test/types/enum/diten/: enumDom.chpl 
Added files:
	chapel/modules/standard/: SingleLocaleEnum.chpl 

---------------------------------------------------------------------------

03/12/07 13:57:27 -- diten

Log message:
	Fix a misspelling of "Indices".

Modified files:
	chapel/modules/standard/: SingleLocaleEnum.chpl 

---------------------------------------------------------------------------

03/12/07 14:18:02 -- deitz

Log message:
	REGRESSION NOTE
	
	  arrays/deitz/promotion/test_scalar_promote_side_effect
	
	  Here the sequence temporary is eliminated but the promotion results
	  in an iterator that READS a global variable and the iterator class
	  is propagated into a function that WRITES to the global variable.
	  We do not do any safety testing to ensure that iterator propagation
	  can be applied.  There has also been some discussion as to what the
	  semantics really should be.  This case is worth examining.
	
	PERFORMANCE HIGHLIGHT
	
	  Here are some initial results to the C=A+B test:
	
	  test_cgapb.c                               1.96 seconds
	    -O3
	  test_cgapb_loop.chpl (explicit indexing)  23.87 seconds
	    --no-gc --no-bounds-checks --ccflags "-O3"
	
	  These times are consistent with my other performance test.  They
	  show about an order of magnitude difference that can probably be
	  isolated almost completely to the array access code with most of
	  that being accounted for by the potential for strided arrays.
	
	  For test_cgapb.chpl (promotion), before this change, memory climbed
	  too dramatically with the temporary sequence to use --no-gc.  With
	  reference counting, the program timed out at over four minutes
	  though did not run out of memory.  Also note that the explicit
	  indexing version times out with reference counting as well.  After
	  this change,
	
	  test_cgapb.chpl (promotion)               53.63 seconds
	    --no-gc --no-bounds-checks --ccflags "-O3"
	
	  It is possible that overly complicated control flow accounts for the
	  slowdown here.  I have several plans to eliminate the complication
	  which I want to do regardless of whether it is the major culprit or
	  not.
	
	Added support to clone a class or record if an iterator class is
	captured into one of its fields as in the case of zipper iteration
	where an iterator class is captured into a tuple record.  This
	currently is only done one-deep meaning that zipper iteration of
	zipper iteration will not yet work.
	
	Removed cursor propagation code since the cursor of an iterator class
	is identical to the cursor of a sequence.
	
	Made the capture of iterator classes into variables as in
	
	  var x = foo();
	
	where foo is an iterator or
	
	  var x = A + B;
	
	where A and B are arrays always result in a sequence temporary since
	otherwise the semantics of the program could be odd.  For example,
	given code like
	
	  var T = A(APerm);
	  A = T;
	
	requires that A(APerm) is captured into a temporary in order to give
	the expected results since otherwise data dependencies would be
	violated.
	
	Specialized the _pass function of sequences to not make a copy when
	passing iterator classes via a pragma.  When scalar promotion results
	in an array this specialization will not be necessary since arrays are
	passed without making a copy in the usual case.
	
	Simplified the code in
	functions/deitz/iterators/temps/test_iterator_temp4.chpl to not
	capture an iterator in a variable since that now results in a
	sequence temporary.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 
	chapel/modules/standard/: ChapelSeq.chpl 
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp4.chpl 

---------------------------------------------------------------------------

03/12/07 15:02:49 -- deitz

Log message:
	Removed dead code to scalar replace tuples before iterator propagation
	since iterator propagation clones tuples now.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

03/12/07 15:07:28 -- deitz

Log message:
	Added test of C = A + B to ensure that a sequence temporary is not inserted.

Added files:
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp5.chpl 
	                                              test_iterator_temp5.good 

---------------------------------------------------------------------------

03/12/07 15:14:17 -- deitz

Log message:
	Added two iterator temporary futures.
	
	Test 6 shows that a temporary is inserted for a double promotion or
	more as in E = A + B + C.
	
	Test 7 shows that a temporary is inserted for an invocation of an
	iterator that has a default value.
	
	Fixing these tests may remove the iterator temporaries from the hpcc
	benchmarks.

Added files:
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp6.chpl 
	                                              test_iterator_temp6.future 
	                                              test_iterator_temp6.good 
	                                              test_iterator_temp7.chpl 
	                                              test_iterator_temp7.future 
	                                              test_iterator_temp7.good 

---------------------------------------------------------------------------

03/12/07 16:24:10 -- deitz

Log message:
	Made the default wrapper for an iterator into an iterator to avoid a
	sequence temporary for invocations of an iterator with a default
	value.  This work should be extended to coercion and order wrappers as
	well.  Removed a .future.
	
	This removes the last sequence temporary from hpcc ra. For
	
	  release/examples/hpcc06/ra.chpl
	
	compiled with
	
	  --ccflags "-O3" --no-gc --no-bounds-checks
	
	you can now see it run in under 20 seconds:
	
	  Problem size = 16777216 (2**24)
	  Bytes per array = 134217728
	  Total memory required (GB) = 0.125
	  Number of updates = 67108864
	
	  Number of errors is: 0
	
	  Validation: SUCCESS
	  Execution time = 18.9979
	  Performance (GUPS) = 0.00353244
	
	There is more optimization work to do but this is a huge leap forward!

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Removed files:
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp7.future 

---------------------------------------------------------------------------

03/13/07 10:43:17 -- deitz

Log message:
	Refactored lowerIterators to use a class to keep track of the lowered
	iterator information (the functions and class). This is important to
	separate the lowering of the iterator from its propagation. By
	lowering all iterators first, there is a better chance of propagating
	one iterator into another as in promotion of promotion. Updated
	comments to reflect what still needs to be handled.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

03/13/07 11:50:20 -- deitz

Log message:
	Inserted a necessary guard against recursively cloning records since
	iterator propagation does not recursively clone records yet. Added a
	test that requires a record of a record to be cloned as a .future
	since two temporary sequences are inserted currently.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 
Added files:
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp8.chpl 
	                                              test_iterator_temp8.future 
	                                              test_iterator_temp8.good 

---------------------------------------------------------------------------

03/13/07 11:50:27 -- bradc

Log message:
	Checking in some CG iterator code that was in-progress a few
	weeks ago so that I can work on it on my laptop during the
	snoozy hardware talks.

Modified files:
	chapel/test/npb/cg/bradc/: cg.chpl 
Added files:
	chapel/test/npb/cg/bradc/: cg-makea.chpl cg-makea.notest 
	                           cg-makea2.chpl cg-makea2.notest 

---------------------------------------------------------------------------

03/13/07 14:39:12 -- bradc

Log message:
	This is a program I've been working on that tries to generate the CG
	random matrix using iterators.
	
	Made some edits to this since my last checkin to get it compiling and
	executing.  Haven't yet done a comparison against the NAS CG
	implementation to see if it's generating the same random indices and
	values, but it is running and generating random indices and values.

Modified files:
	chapel/test/npb/cg/bradc/: cg-makea.chpl 

---------------------------------------------------------------------------

03/13/07 14:47:43 -- diten

Log message:
	Add a new option -set (short -s) that sets config param variables.  It is
	used as "-s name=value" or "-s name".  The first form sets "name" to "value",
	and the second form assumes "name" is of type bool and toggles its value.
	
	Setting a config param string with -s is not yet working.  Also, currently,
	both config and non-config params of types more complicated than int fail to
	compile if a type is explicitly given: "param r: real = 3.14;".
	
	Add test configparam.chpl which uses -s to set a few config param variables.
	Add future configparam_nonint.chpl which shows the problem with explicitly
	setting the type of param variables.
	Add future configparam_string.chpl which shows a segmentation fault when
	trying to set a config param string via -s.

Modified files:
	chapel/compiler/ifa/: num.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: normalize.cpp 
Added files:
	chapel/test/compflags/diten/: configparam.chpl 
	                              configparam.compopts 
	                              configparam.good 
	                              configparam_nonint.chpl 
	                              configparam_nonint.compopts 
	                              configparam_nonint.future 
	                              configparam_nonint.good 
	                              configparam_string.chpl 
	                              configparam_string.compopts 
	                              configparam_string.future 
	                              configparam_string.good 

---------------------------------------------------------------------------

03/13/07 14:51:18 -- bradc

Log message:
	Nice mod to previous version in which I replaced a
	large (150,000) element array that probably stores
	~16 nonzero elements at a time with an enumerated
	domain.  A sparse domain could also be used, once
	implemented.  Given its use, I think either is
	equally attractive.

Modified files:
	chapel/test/npb/cg/bradc/: cg-makea.chpl 
Added files:
	chapel/test/npb/cg/bradc/: cg-makea.good 
Removed files:
	chapel/test/npb/cg/bradc/: cg-makea.notest 

---------------------------------------------------------------------------

03/13/07 15:04:18 -- bradc

Log message:
	Removed some dead variables that my previous change
	eliminated the need for.
	
	Also, forgot to mention in the previous log message:
	the last three versions of this code have all "worked"
	(generated consistent answers, though maybe not the
	official NAS data yet), though I only remembered to
	remove the .notest file last time around.
	
	Sorry for the disjointed nature of these messages.
	Still trying to listen to talks with half an ear.

Modified files:
	chapel/test/npb/cg/bradc/: cg-makea.chpl 

---------------------------------------------------------------------------

03/13/07 15:24:48 -- bradc

Log message:
	More dead variable elimination and some simplification
	to tangled control flow in sprnvc().

Modified files:
	chapel/test/npb/cg/bradc/: cg-makea.chpl 

---------------------------------------------------------------------------

03/13/07 15:31:44 -- bradc

Log message:
	Removed (outdated) magic number.  This is probably my
	last change for today.  Should pay attention from here
	on out.

Modified files:
	chapel/test/npb/cg/bradc/: cg-makea.chpl 

---------------------------------------------------------------------------

03/14/07 10:25:24 -- deitz

Log message:
	Added an _init function for all enumerated types in
	buildDefaultFunctions. This fixes a bug best illustrated in the new
	test types/enum/deitz/test_enum7.chpl. Without this _init function,
	the _init function for int(8) was selected by function resolution via
	a coercion.
	
	Fixed a bug in expanding tuples via (...x) syntax within a tuple
	construction as in ((...xs), x). This idiom allows a new tuple to be
	constructed that contains the components of tuple xs and the new value
	x creating a tuple of size one more than xs. Since the tuple
	constructor call was generated in the parser before the expansion
	tuple was expanded in function resolution, the parameter size of the
	tuple was set incorrectly. This is now fixed during the tuple
	expansion. This bug is best illustrated in the new test
	domains/deitz/test_enum_domain1.chpl but would have shown up for any
	attempt to zipper together three or more entities, something I reckon
	has never been done before.
	
	Removed three .futures. Fixed arrays/bradc/enumarray2.chpl which
	attempted to assign an arithmetic domain to an enumerated
	domain. Removing this assignment fixes this test.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp 
	chapel/modules/standard/: SingleLocaleEnum.chpl 
	chapel/test/arrays/bradc/: enumarray2.chpl 
Added files:
	chapel/test/domains/deitz/: test_enum_domain1.chpl 
	                            test_enum_domain1.good 
	chapel/test/types/enum/deitz/: test_enum7.chpl test_enum7.good 
Removed files:
	chapel/test/arrays/bradc/: enumarray2.future 
	chapel/test/npb/cg/bradc/: cg-enumDomArr.future 
	chapel/test/types/enum/diten/: enumDom.future 

---------------------------------------------------------------------------

03/14/07 15:40:43 -- diten

Log message:
	Add support for config param string, real, and imag.  For string, special-case
	it to use a different Immediate() constructor than the others. For the others,
	remove casts where the result type and size are the same as the original type
	and size.
	
	Update my simple config param test to test more types.
	Update the userhelp test to reflect the new command line argumenti -s/-set.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/test/compflags/bradc/help/: userhelp.txt 
	chapel/test/compflags/diten/: configparam.chpl 
	                              configparam.compopts 
	                              configparam.good 
Removed files:
	chapel/test/compflags/diten/: configparam_nonint.future 
	                              configparam_string.future 

---------------------------------------------------------------------------

03/14/07 16:34:17 -- bradc

Log message:
	Forgot that my cg-makea.chpl test relied on changes
	to the Random module which I'd made but never checked
	in, resulting in last night's regression.
	
	This commit makes those changes, adding a getNext()
	function to the RandomStream class so that values
	can be plucked out one at a time as in CG's
	initialization.  In doing so, it cleans up the internal
	state of the RandomStream class a bit, replacing the
	numGenerated count with a cursorVal cursor to track
	where in the random stream we currently are.  This
	results in equivalent behavior as well as being
	incrementally faster.
	
	In cleaning up Random.chpl for this commit, had to
	modify the way I used it in cg-makea.chpl a bit, which
	exposed a bug in my thinking and modified the output
	a bit.  Still haven't verified it against that which
	is generated by the official NPB version.

Modified files:
	chapel/modules/standard/: Random.chpl 
	chapel/test/npb/cg/bradc/: cg-makea.chpl cg-makea.good 

---------------------------------------------------------------------------

03/14/07 16:41:32 -- bradc

Log message:
	Tiny change.  In preparing for MS2, I noticed that we did
	not mention the STATUS file in the top-level README.

Modified files:
	./: README 

---------------------------------------------------------------------------

03/15/07 10:16:54 -- deitz

Log message:
	Collapsed the tuple of integers orig into a single integer orig in the
	SingleLocaleArithmeticArray class. This optimization results in a 1.7%
	improvement to the test_for2d performance test.

Modified files:
	chapel/modules/standard/: SingleLocaleArithmetic.chpl 

---------------------------------------------------------------------------

03/15/07 11:13:03 -- bradc

Log message:
	A subtle and difficult to track down bug is shown in
	piVals.chpl.  From the future:
	
	In the generated C code, this test emits a floating point
	literal value for the initialization of x that does not
	have sufficient precision -- the last several digits are
	truncated.  This does not show up in general because our
	default floating point output truncates the output similarly
	and we have no way of adding more precision.  Thus, the error
	only occurs when math is performed on the value that reveals
	the missing precision, as demonstrated here by the subtraction
	of the upper digits.
	
	The strange thing is seen in piVals1a.chpl, which demonstrates
	that if a floating point parameter value of the appropriate
	magnitude is used, the original code suddenly works.  My guess
	is that this may be due to our hashing on literal values, but
	that's only a guess.
	
	piVals2.chpl is meant to show that there is sufficient precision
	to do the original operation.
	
	I hope that this is a bug and not some weird corner case in the
	language semantics that I don't understand.

Added files:
	chapel/test/types/scalar/bradc/: piVals.chpl piVals.future 
	                                 piVals.good piVals1a.chpl 
	                                 piVals1a.good piVals2.chpl 
	                                 piVals2.good 

---------------------------------------------------------------------------

03/15/07 14:58:21 -- deitz

Log message:
	Disabled folding of casts to reals (except of course from reals of the
	same size).
	
	Removed a .future.
	
	Changed the output to a test of the line
	
	  param x : real = 1;
	
	since coercion 1 to a real is no longer folded and thus x is assigned
	a non-parameter value.  This gets the fairly good feedback:
	
	  error: Initializing parameter 'x' to value not known at compile time

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/trivial/deitz/: test_coerce_param.good 
Removed files:
	chapel/test/types/scalar/bradc/: piVals.future 

---------------------------------------------------------------------------

03/16/07 10:24:15 -- deitz

Log message:
	Unified indefinite arithmetic sequences and arithmetic sequences into
	a new record called 'range' and exposed to the user as such. This can
	be renamed easily. The main work of this checkin is in the
	unification.
	
	The range type is generic on an integral element type eltType and an
	integer boundedType.  This integer should be changed to an enum if or
	when we support parameter enums.  The values have the following
	meaning:
	
	  0: bounded range with a low and a high
	  1: unbounded range with only a low bound
	  2: unbounded range with only a high bound
	
	Both eltType and boundedType need to be specified in the type though I
	would like to made boundedType default to 0 but that didn't work yet.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: ChapelArray.chpl ChapelSeq.chpl 
	                          SingleLocaleArithmetic.chpl 
	chapel/test/arrays/deitz/: test_array_uint2.good 
	chapel/test/arrays/marybeth/: CMO_array.chpl 

---------------------------------------------------------------------------

03/16/07 15:07:20 -- bradc

Log message:
	Next pass at cg-makea.chpl -- the iterator is now returning
	the correct pattern of sparse indices and values for the
	sparse matrix in CG.  In order to get this to work, I had
	to rework the Random module so that it didn't round odd
	seeds up to the next even seed value (the NPB doesn't do
	this and relies on an odd seed).  Working with MB to try
	and remember why we built that into the code.
	
	Turns out that our HPCC benchmark codes also all used
	odd seeds, so changed these to the next larger even
	seed in the studies/hpcc directory (to preserve the
	output), and changed the output of the tests in the
	release/ subdirectory (to keep the codes looking the
	same to the end-user).
	
	In doing this, also cleaned up the Random module a bit to
	make it use Chapel better as well as the fact that the
	randlc functions were embedded in a class and could use
	that to store state.

Modified files:
	chapel/modules/standard/: Random.chpl 
	chapel/test/modules/standard/Random/marybeth/: test-Random.chpl 
	chapel/test/npb/cg/bradc/: cg-makea.chpl cg-makea.good 
	chapel/test/release/examples/hpcc06/: fft-mta.good fft.good 
	                                      stream-nopromote.good 
	                                      stream.good 
	chapel/test/studies/hpcc/FFT/: fft-candidate-2d.chpl 
	                               fft-hpcc06-mta.chpl 
	                               fft-hpcc06.chpl 
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.chpl 
	                                        fft.chpl 
	chapel/test/studies/hpcc/STREAMS/: stream-hpcc06.chpl 
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-nopromote.chpl 
	                                         stream-slice.chpl 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 

---------------------------------------------------------------------------

03/16/07 16:06:10 -- bradc

Log message:
	Started a new test -- cg-makea2.chpl -- which takes the
	random indices and values computed by the iterator in
	cg-makea.chpl and stores the values into a dense array.
	Then prints out the nonzero values of the array for
	comparison purposes with the NAS CG benchmark.  Currently
	they are the same.  Next step is to see if performing the
	CG computation on this dense array results in the correct
	answer.
	
	Cleaned up cg-makea.chpl a bit in minor ways (removed
	some commented out test code)

Modified files:
	chapel/test/npb/cg/bradc/: cg-makea.chpl cg-makea2.chpl 
Added files:
	chapel/test/npb/cg/bradc/: cg-makea2.good 
Removed files:
	chapel/test/npb/cg/bradc/: cg-makea2.notest 

---------------------------------------------------------------------------

03/19/07 09:15:44 -- diten

Log message:
	Configuration parameter support for enumerated types.
	
	In normalize, add a check for config parameters of enumerated type which loops
	over the values of an enum type, checking if any match the value passed on
	the command line.  If yes, set the parameter to that value.
	
	In function resolution, when folding _copy of immediate values, also fold
	_copy calls of enumerated values.  When removing defPoints of immediate vars
	and adding them to the paramMap, also remove defPoints of enums and add them
	to the paramMap.
	
	In instantiate_tuple_get and instantiate_tuple_set, ensure that the VarSymbol
	is not NULL before checking its immediate value.  If it is NULL, it is an
	EnumSymbol, not a VarSymbol, so for now, just treat it like non-integral
	values and return the unmodified function.
	
	Give the EnumSymbol class an isParam() function.  It always returns true since
	EnumSymbols are always known at compile time.
	
	Also, move the code to remove type casts that cast something to its own type
	into a function.  This code could be used in areas other than parameter
	folding, and removing it makes the _call parameter folding code a lot cleaner
	than it would have been if I left it there.
	
	Update my simple config param test to include enum checks.
	Add test for a function with param formals with an enumerated type.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/test/compflags/diten/: configparam.chpl 
	                              configparam.compopts 
	                              configparam.good 
Added files:
	chapel/test/functions/diten/: enumparamfunc.chpl 
	                              enumparamfunc.compopts 
	                              enumparamfunc.good 

---------------------------------------------------------------------------

03/19/07 09:20:16 -- marybeth

Log message:
	Added comments to the Random module to better document
	the type of generator that is implemented.

Modified files:
	chapel/modules/standard/: Random.chpl 

---------------------------------------------------------------------------

03/19/07 10:27:22 -- deitz

Log message:
	Added files iterator.cpp and iterator.h to contain functions on
	iterators and to hold the IteratorInfo class that connects an iterator
	to the functions and class that implement it.
	
	Moved lowerIterator function to iterator.cpp.  This function takes an
	iterator and converts it to a function that returns an iterator class
	that supports functions which implement the iterator interface over
	this class.

Modified files:
	chapel/compiler/AST/: Makefile.share symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: lowerIterators.cpp 
Added files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/compiler/include/: iterator.h 

---------------------------------------------------------------------------

03/19/07 10:56:35 -- bradc

Log message:
	Removed some dead code from the runtime relating to how
	scalars are formatted in I/O and how config vars/consts
	are parsed from the command-line.  This has been dead
	for some time, just noticed it.  There's likely more to
	do here, but I was just grabbing at some low-hanging
	fruit while working on CG.

Modified files:
	chapel/runtime/include/: chplio.h config.h 
	chapel/runtime/src/: config.c 

---------------------------------------------------------------------------

03/19/07 10:58:57 -- deitz

Log message:
	Changed --no-gc to --ref-count turning reference counting off by
	default and enabled with this flag.
	
	Updated the bane of my regression testing existence
	  compflags/bradc/help/userhelp.chpl.
	
	Added a few compopts files to the testing system to use --ref-count on
	tests that require it thus continuing the testing of this
	functionality.
	
	Updated a few memory tests since classes by default no longer have a
	reference counter and lock field.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: memoryManage.cpp 
	chapel/test/compflags/bradc/help/: userhelp.txt 
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
Added files:
	chapel/test/domains/indefinite/waynew/: memory1.compopts 
	                                        memory2.compopts 
	chapel/test/memory/deitz/: COMPOPTS 

---------------------------------------------------------------------------

03/19/07 11:31:13 -- deitz

Log message:
	Added --no-bounds-checks and --ccflags "-O3" to the COMPOPTS file in
	my performance test directory.  This should make them execute faster
	and probably within the time limit of the testing system.

Added files:
	chapel/test/performance/deitz/: COMPOPTS 

---------------------------------------------------------------------------

03/19/07 11:53:53 -- deitz

Log message:
	Updated linux64 .good files for two tests.  These .good files look the
	same as the standard .good file.  Perhaps they are unnecessary.

Modified files:
	chapel/test/memory/shannon/: memstatPrint.linux64.good 
	                             printFinalMemStat.linux64.good 

---------------------------------------------------------------------------

03/19/07 11:55:54 -- deitz

Log message:
	Removed linux64 .good files for these tests since they match the
	regular .good files.  They did not match with reference counting
	because the thread lock was bigger on linux64.

Removed files:
	chapel/test/memory/shannon/: memstatPrint.linux64.good 
	                             printFinalMemStat.linux64.good 

---------------------------------------------------------------------------

03/19/07 13:22:15 -- bradc

Log message:
	Put check back into Random module, fixing it to ensure
	that seed is odd rather than even as it was before.
	Updated tests whose output had been generated using an
	even seed to use an odd and added a test that uses an
	even seed to make sure that the Random module changes
	it to odd.

Modified files:
	chapel/modules/standard/: Random.chpl 
	chapel/test/modules/standard/Random/marybeth/: test-Random.chpl 
	                                               test-Random.good 
	chapel/test/studies/hpcc/FFT/: fft-candidate-2d.chpl 
	                               fft-candidate-2d.good 
	                               fft-hpcc06-mta.chpl 
	                               fft-hpcc06-mta.good 
	                               fft-hpcc06.chpl fft-hpcc06.good 
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.chpl 
	                                        fft-test-even.good 
	                                        fft.chpl fft.good 
	chapel/test/studies/hpcc/STREAMS/: stream-hpcc06.chpl 
	                                   stream-hpcc06.good 
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-nopromote.chpl 
	                                         stream-nopromote.good 
	                                         stream-slice.chpl 
	                                         stream-slice.good 
	chapel/test/studies/hpcc/STREAMS/marybeth/: stream.chpl 
	                                            stream.good 
Added files:
	chapel/test/modules/standard/Random/bradc/: 
	                                            test-Random-evenseed.chpl 
	                                            test-Random-evenseed.good 

---------------------------------------------------------------------------

03/19/07 14:13:45 -- deitz

Log message:
	Enabled support for parameters in classes and records that have
	default/initialization values.  In this case, the parameter does not
	need to be passed to the constructor.  This was a very easy change to
	make.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/classes/deitz/: test_default_param.chpl 
	                            test_default_param.good 
	                            test_default_param2.chpl 
	                            test_default_param2.good 

---------------------------------------------------------------------------

03/19/07 14:33:47 -- deitz

Log message:
	Added a test of a class with an enum parameter with a default.

Added files:
	chapel/test/classes/deitz/: test_default_param3.chpl 
	                            test_default_param3.good 

---------------------------------------------------------------------------

03/19/07 14:52:50 -- deitz

Log message:
	Added defaults to the generic fields of the range type to make it a
	range over int and with boundedType equal to 0 by default.  Added a
	test of the range type.

Modified files:
	chapel/modules/standard/: ChapelSeq.chpl 
	                          SingleLocaleArithmetic.chpl 
Added files:
	chapel/test/types/seq/deitz/: test_range.chpl test_range.good 

---------------------------------------------------------------------------

03/19/07 16:28:03 -- bradc

Log message:
	First working version of NAS CG in Chapel (verified
	for Class S only).  This implementation uses a dense
	domain/array to store the sparse matrix, so results
	in unnecessary memory overhead and lots and lots of
	multiplications by 0.0, blowing execution time out
	of the water.  But it serves as a good model for what
	the sparse will look like once the sparse domains and
	arrays are supported.

Modified files:
	chapel/test/npb/cg/bradc/: cg.chpl 
Added files:
	chapel/test/npb/cg/bradc/: cg-dense.chpl cg-dense.execopts 
	                           cg-dense.good 

---------------------------------------------------------------------------

03/19/07 17:04:58 -- bradc

Log message:
	Took a brief clean-up pass over the CG code.
	
	I forgot to mention that the one big open question
	that this raises other than implementing sparse
	domains and arrays is how we should express
	partial reductions in the language (and then get
	them implemented).

Modified files:
	chapel/test/npb/cg/bradc/: cg-dense.chpl cg-dense.execopts 
	                           cg-dense.good 

---------------------------------------------------------------------------

03/19/07 17:09:17 -- bradc

Log message:
	Improved our syntax error messages so that (a) they no
	longer mention yytext (an internal variable name), and
	so that they are more similar to our other error
	messages.  Note that this error message is currently
	special-cased because it refers to the yyfilename and
	lineno (and is the only one which does).  If anyone
	has thoughts about unifying it more, let me know.
	
	Thus, a syntax error currently ends up looking like:
	
	filename.chpl:lineno syntax error: near 'sourcetoken'

Modified files:
	chapel/compiler/parser/: yy.cpp 
	chapel/test/classes/deitz/: test_badclass1.good 
	chapel/test/parsing/shannon/: invalidToken.good 
	chapel/test/trivial/bradc/: defaultinit2.good 

---------------------------------------------------------------------------

03/19/07 18:25:11 -- bradc

Log message:
	Broke the makea() iterator and support code into its own
	module to modularize it, allow it to be reused, and give
	the ability to swap different generators into the benchmark.
	This file is called cg-makea.chpl.  The previous test called
	cg-makea.chpl is now called cg-makea1.chpl.
	
	Rewrote cg-dense.chpl to make use of this module.
	
	Added files:
	  cg-ideal.chpl -- an idealized version of cg-dense.chpl that
	                   uses sparse domains and arrays and partial
	                   reductions
	  cg-commented.chpl -- a commented version of the above
	  cg-makea-commented.chpl -- a commented version of cg-makea

Modified files:
	chapel/test/npb/cg/bradc/: cg-dense.chpl cg-makea.chpl 
Added files:
	chapel/test/npb/cg/bradc/: cg-commented.chpl cg-commented.notest 
	                           cg-dense.compopts cg-ideal.chpl 
	                           cg-ideal.notest 
	                           cg-makea-commented.chpl 
	                           cg-makea-commented.notest 
	                           cg-makea.notest cg-makea1.chpl 
	                           cg-makea1.good cg-makea1.out 
Removed files:
	chapel/test/npb/cg/bradc/: cg-makea.good 

---------------------------------------------------------------------------

03/19/07 21:31:02 -- marybeth

Log message:
	Checking in block LU algorithm that demonstrates some
	desired functionality.  This is for discussion purposes.

Added files:
	chapel/test/studies/lu/marybeth/: blocks-wish.mb 

---------------------------------------------------------------------------

03/20/07 12:06:24 -- deitz

Log message:
	Added support for using a query type or parameter nested inside a type
	in a formal argument's type specification.  This is only supported at
	one level deep.  This supports the following code with the following
	transformations given a class C parameterized by a type t and a type
	tt (as in Class C { type t; type tt; ... }):
	
	  def foo(c: C(?u)) { var x: u; ... }
	=>
	  def foo(c: C) { var x: c.t; ... }
	
	  def foo(c: C(tt=?u)) { var x: u; ... }
	=>
	  def foo(c: C) { var x: c.tt; ... }
	
	  def foo(c: C(int, ?u) { var x: y; ... }
	=>
	  def foo(c: C) where c.t == int { var x: c.tt; ... }
	
	The Generics chapter of the specification needs to be updated with
	these semantics.  The semantic interaction with variable length
	argument lists is forthcoming.  Deeper nesting semantics seems like it
	should be straightforward.  Query types or parameters cannot be used
	except in the specification of a formal argument's type.  The
	interaction with subclasses needs to be defined.
	
	Our current path of language definition is likely to eventually
	require a healthy dose of limitations and restrictions leading to
	non-orthogonalities that are hopefully outweighed by simplicity and
	practical considerations.
	
	Added four test cases.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: normalize.cpp semanticChecks.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: test_query_field1.chpl 
	                                         test_query_field1.good 
	                                         test_query_field2.chpl 
	                                         test_query_field2.good 
	                                         test_query_field3.chpl 
	                                         test_query_field3.good 
	                                         test_query_field4.chpl 
	                                         test_query_field4.good 

---------------------------------------------------------------------------

03/20/07 13:51:24 -- deitz

Log message:
	Moved handling of top-level query types to the same place that nested
	query types and parameters are handled.
	
	Simplified code in the parser, code to check the AST after parsing,
	and removed some code in cleanup.  Added a block of code in normalize.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 
	                         semanticChecks.cpp 

---------------------------------------------------------------------------

03/20/07 17:54:22 -- bradc

Log message:
	Some additional scrubbing of the Random module,
	including fixing its getNth() routine which had
	not previously been working or tested.  Added a
	test to ensure that it continues working.

Modified files:
	chapel/modules/standard/: Random.chpl 
Added files:
	chapel/test/modules/standard/Random/bradc/: .cvsignore 
	                                            testGetNth.chpl 
	                                            testGetNth.good 

---------------------------------------------------------------------------

03/21/07 09:07:36 -- deitz

Log message:
	Removed .future of nested query type in formal argument type.

Removed files:
	chapel/test/types/type_variables/deitz/functions/: 
	                                                   test_foo7.future 

---------------------------------------------------------------------------

03/21/07 10:57:47 -- bradc

Log message:
	A few cosmetic changes to CG.  Moved a config var that
	is specific to makea into cg-makea.chpl.  Fixed a typo
	in codes that are not being tested, but filed for future
	reference that Mary Beth caught.

Modified files:
	chapel/test/npb/cg/bradc/: .cvsignore cg-commented.chpl 
	                           cg-dense.chpl cg-ideal.chpl 
	                           cg-makea-commented.chpl cg-makea.chpl 
Removed files:
	chapel/test/npb/cg/bradc/: cg-makea1.out 

---------------------------------------------------------------------------

03/21/07 11:41:38 -- deitz

Log message:
	Added support for query types and nested query types and parameters
	within the context of a variable-length argument's type specification.
	
	A query variable of a variable-length argument must be indexed into as
	if it is a tuple in order to get a specific instance.  It is currently
	illegal to access the query variable as a whole.
	
	Some examples should clarify and the spec should be updated with the
	new semantics:
	
	  def foo(x: ?t ...?k) { var y: t(2); ...
	=>
	  def foo(x ...?k) { var y: x(2).type; ...
	
	Given a class C parameterized by a type t and a type tt:
	
	  def foo(c: C(int, ?u) ...?k) { var y: u(1); ...
	=>
	  def foo(c: C ...?k) where AND_EXPAND(c, t, int) { var y: c(1).tt; ...
	
	The AND_EXPAND primitive is explained below.  Assuming k == 2:
	
	  def foo(c1: C, c2: C) where (c1.t == int) &
	                              (c2.t == int) { var y: c1.tt; ...
	
	Note that the type of the c arguments is always generic even if "C" is
	not generic in the sense that all of the parameters or types have
	default values.
	
	  writeln(x);
	    var y: t(2);
	    writeln(y);
	  }
	
	Added a new primitive PRIMITIVE_TUPLE_AND_EXPAND that takes three
	arguments: the formal argument, the field accessed from this formal
	argument, and an expression it is to be compared against using '=='.
	This primitive is expanded during function resolution based on the
	size of the tuple in a similar way to PRIMITIVE_TUPLE_EXPAND.  The
	expansion is transformed as follows:
	
	  PRIMITIVE_TUPLE_AND_EXPAND x t int
	=>
	  (x(1).t == int) & (x(2).t == int) & (x(3).t == int) & ...
	
	Added parameter method _isIntegralType(type t) to determine whether a
	type is an integral type.  Used this to avoid "initializing" ranges
	that are instantiated over non-integral types.  This happens because
	we specify ranges based on the dimensional index types of an array
	wrapper.  If it is an array wrapper of an associative array with a
	non-integral type, then the type of the formal argument is
	instantiated to determine if the function is called and this leads to
	errors for non-integral associative arrays even though that method
	should never be ultimately selected.
	
	Added three tests.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: functionResolution.cpp normalize.cpp 
	chapel/modules/standard/: ChapelBase.chpl ChapelSeq.chpl 
Added files:
	chapel/test/types/type_variables/deitz/: test_query_field5.chpl 
	                                         test_query_field5.good 
	                                         test_query_field6.chpl 
	                                         test_query_field6.good 
	                                         test_query_field7.chpl 
	                                         test_query_field7.good 

---------------------------------------------------------------------------

03/21/07 12:04:30 -- diten

Log message:
	Parameter folding of relational operators on enum types.
	
	Added a generic type "enumerated" which matches all enum types.  Added param
	functions to do the relational operations over type "enumerated".
	
	Added test "paramenums" showing parameter enums being folded over relational
	operators.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: ChapelBase.chpl 
Added files:
	chapel/test/types/enum/diten/: paramenums.chpl paramenums.good 

---------------------------------------------------------------------------

03/21/07 13:27:43 -- diten

Log message:
	Clean up my new code for relational operator folding over enum values with a
	few suggestions from Steve.  Use get_int() from expr.cpp instead of writing my
	own nearly identical version of it.
	
	Fix an off-by-one bug in the values of enums without initialization expressions
	when doing this folding.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

03/21/07 14:52:14 -- bradc

Log message:
	A future showing that homogeneous tuple syntax is a bit
	feisty -- moreso than I (or Steve) were predicting over
	lunch.  In particular, tuples of tuples don't seem to be
	supported, and arrays of tuples don't seem to work well
	either.
	
	We may decide that some of these forms are illegal which
	is fine -- this test just captures some of the forms that
	I was experimenting with.

Added files:
	chapel/test/types/tuple/bradc/: homogTupleArr.chpl 
	                                homogTupleArr.future 
	                                homogTupleArr.good 

---------------------------------------------------------------------------

03/21/07 14:59:29 -- bradc

Log message:
	As soon as I committed the previous test, realized that
	I should've made a similar test for heterogeneous tuples.
	This one works much better, except for the one case that
	mixes arrays, homog tuples and het tuples.

Added files:
	chapel/test/types/tuple/bradc/: hetTupleArr.chpl 
	                                hetTupleArr.future 
	                                hetTupleArr.good 

---------------------------------------------------------------------------

03/21/07 15:08:12 -- deitz

Log message:
	Fixed a bug in function resolution in which a variable-length argument
	that is also generic would never be expanded if the variable-length
	expression involved any non-trivial expression.
	
	Added a test case.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_generic_vararg.chpl 
	                                         test_generic_vararg.good 

---------------------------------------------------------------------------

03/21/07 15:20:57 -- deitz

Log message:
	Added a parameter stridable to ranges.  This parameter is true by
	default but is made false for literal ranges without strides.  I think
	I should change this to false by default and make it true only if "by"
	is used on the range.  This is in keeping with my proposal for domains
	in which stridable would be false by default.  Thus to declare a
	variable range using type inference that could eventually be assigned
	a stride, the user would have to write
	
	  var r = 1..n by 1
	
	Specialized functionality on ranges to the case where there is no
	stride.  For a simple test case like
	
	  for i in 1..n do
	    writeln(i);
	
	this decreases the relevant generated LOC from 52 to 14 when inlining
	the iterator methods on range.  Why?  Because for strided ranges, we
	have to handle the case where the stride is negative and start
	traversing from high and going down to low.
	
	Added an inline pragma to the iterator methods on range.
	
	Made compiler error messages that are printed out using the
	compilerError mechanism show line numbers that are in user code.
	Improved the quality of the error message for domain assignment
	between domains that have different index types.
	
	Important note: Adding stridable to the type of ranges has an impact.
	The following is now illegal because the return type cannot be
	inferred.  The two returned ranges have stridable set differently.
	
	  def foo(stride_by_two: bool) {
	    if stride_by_two then
	      return 1..10 by 2;
	    else
	      return 1..10;
	  }

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: ChapelArray.chpl ChapelSeq.chpl 
	                          SingleLocaleArithmetic.chpl 
	chapel/test/arrays/deitz/: test_array_uint2.good 

---------------------------------------------------------------------------

03/21/07 16:27:29 -- marybeth

Log message:
	Second attempt at desired block LU with no pivoting.  It's much closer
	to the desired implementation.  This is for discussion purposes.

Added files:
	chapel/test/studies/lu/marybeth/: blocks-wish2.mb 

---------------------------------------------------------------------------

03/21/07 16:46:19 -- deitz

Log message:
	Made stridable parameter of range have default false.  Use
	
	  range(stridable=true)
	
	for ranges that can be strided, or use "by 1" on literals.

Modified files:
	chapel/modules/standard/: ChapelSeq.chpl 
	                          SingleLocaleArithmetic.chpl 
	chapel/test/arrays/marybeth/: CMO_array.chpl 

---------------------------------------------------------------------------

03/21/07 17:07:43 -- bradc

Log message:
	This is a series of tests, some of which work,
	some of which are futures, that explore stencil
	operations like the ones Richard Barrett is
	working on.  They also formed good practice for
	me to see what's involved in implementing sparse
	arrays.
	
	There is one future here that reveals a bug
	rather than an unimplemented feature --
	arrayOfSpsArray-workaround-generictype.chpl
	Steve should take a look at this, ideally.
	
	arrayOfArray.chpl : this is the basic stencil
	  we'd like to have work.  It uses arrays of
	  arrays, though so doesn't work today.
	
	arrayOfArray2.chpl : this is a variation that
	  uses domain promotion rather than a forall
	  expression to express the inner loop reduction.
	
	arrayOfArray-workaround.chpl : this is a
	  workaround that uses a 3*(3*real) tuple to
	  implement the 3x3 array elements.  It's a
	  bit ugly because our indices are -1..1 and
	  the tuples are indexed using 1..3, so we have
	  to adjust by 2.
	
	arrayOfArray-workaround2.chpl : this is a
	  workaround that implements a 3x3 array by
	  creating a record that contains a 3x3 array.
	  The fact that this works makes it seem as
	  though arrays of arrays must be close to
	  working (?).
	
	arrayOfSpsArray.chpl : the 3x3 arrays that
	  Richard's group are looking at are 0.0 along
	  their diagonals, so this version uses a
	  sparse 3x3 array to express that (may be a
	  bad idea performance-wise, but worth getting
	  working).
	
	arrayOfSpsArray2.chpl : same as arrayOfArray2.chpl,
	  but for the sparse case.
	
	fakeSpsArr.chpl : a record that implements a
	  sparse array-like thing, using this() var
	  functions.
	
	fakeSpsArr2.chpl : a variation on the above
	  in which I use this() and =this() functions
	  to protect against assigning to the IRV,
	  which should not be legal.
	
	arrayOfSpsArray-workaround.chpl : a workaround
	  of arrayOfSpsArray.chpl which uses the fake
	  sparse array structure of fakeSpsArr.chpl
	  above to implement the inner arrays.
	
	arrayOfSpsArray-workaround-generictype.chpl :
	  a variation on the above which shows that
	  if a generic record whose type parameter has
	  a default type is used as an array element,
	  the type must be explicitly specified, which
	  I suspect is not what we want.

Added files:
	chapel/test/arrays/bradc/workarounds/: .cvsignore 
	                                       arrayOfArray-workaround.chpl 
	                                       arrayOfArray-workaround.good 
	                                       arrayOfArray-workaround2.chpl 
	                                       arrayOfArray-workaround2.good 
	                                       arrayOfArray.chpl 
	                                       arrayOfArray.future 
	                                       arrayOfArray.good 
	                                       arrayOfArray2.chpl 
	                                       arrayOfArray2.future 
	                                       arrayOfArray2.good 
	                                       arrayOfSpsArray-workaround-generictype.chpl 
	                                       arrayOfSpsArray-workaround-generictype.future 
	                                       arrayOfSpsArray-workaround-generictype.good 
	                                       arrayOfSpsArray-workaround.chpl 
	                                       arrayOfSpsArray-workaround.good 
	                                       arrayOfSpsArray.chpl 
	                                       arrayOfSpsArray.future 
	                                       arrayOfSpsArray.good 
	                                       arrayOfSpsArray2.chpl 
	                                       arrayOfSpsArray2.future 
	                                       arrayOfSpsArray2.good 
	                                       fakeSpsArr.chpl 
	                                       fakeSpsArr.good 
	                                       fakeSpsArr2.chpl 
	                                       fakeSpsArr2.good 

---------------------------------------------------------------------------

03/22/07 10:45:04 -- deitz

Log message:
	Added a runtime check to halt if a non-stridable range is assigned a
	non-unit stride.  Added a test to check this halt.  Fixed a test to
	avoid it.

Modified files:
	chapel/modules/standard/: ChapelSeq.chpl 
	chapel/test/types/seq/deitz/: test_aseq2.chpl 
Added files:
	chapel/test/arrays/deitz/: test_error_stride_range.chpl 
	                           test_error_stride_range.good 

---------------------------------------------------------------------------

03/22/07 12:20:24 -- deitz

Log message:
	Added a working test that shows the correct behaviour with resolving a
	method without parentheses over a method with parentheses.

Added files:
	chapel/test/classes/deitz/: test_method_noparens_precedence.chpl 
	                            test_method_noparens_precedence.good 

---------------------------------------------------------------------------

03/22/07 13:37:18 -- bradc

Log message:
	Checking in a slew of futures from my work on the
	stencil codes and idioms yesterday.  Most of these
	are pretty low priority.  About half are semantic
	questions or open issues in the form of placeholder
	tests while the other half are cases where I think
	we could do a better job of helping the user
	through semantic checks or better error messages.
	
	topLevelFnNoParens.chpl
	topLevelIteratorNoParens.chpl : these are meant to
	  reopen the question about whether we should support
	  top-level functions and iterators without parens
	  as we do for class methods.  It seems orthogonal
	  and useful to me, and I can't currently come up
	  with an argument against it.  These tests are
	  meant to keep a placeholder for this question,
	  either to enable support for it, or to log a
	  rationale paragraph in the spec explaining why not.
	
	weirdMessage.chpl : this is just a test in which the
	  error message was very surprising to me, and worth
	  filing to see if it could be improved or clarified
	  (for my sake if not the user's).
	
	setterReturns.chpl
	setterReturns2.chpl : these functions define setter
	  functions that return values.  There isn't any
	  point in having a setter function return a value,
	  and arguably it should be an error.  I think it
	  should be an error or warning in order to help
	  people (like me) who are converting var functions
	  into setters to remember that setters don't return
	  values, they take the RHS value in as an argument.
	  (the error message probably should not say this, but
	  getting an error would've put me on a productive
	  path much more quickly than emailing Steve and
	  looking through standard module code did.
	
	retLitFromVarFn.chpl
	retLocFromVarFn.chpl : these two tests try to return
	  things from a var fn that I don't think make sense
	  to.  One currently results in a very confusing
	  error message, the other "works" but may take awhile
	  for a user to debug.  Throwing an error message
	  would help in both cases, assuming others agree
	  with their illegality.

Added files:
	chapel/test/functions/bradc/: topLevelFnNoParens.chpl 
	                              topLevelFnNoParens.future 
	                              topLevelFnNoParens.good 
	                              weirdMessage.chpl 
	                              weirdMessage.future 
	                              weirdMessage.good 
	chapel/test/functions/bradc/setterFns/: .cvsignore 
	                                        setterReturns.chpl 
	                                        setterReturns.future 
	                                        setterReturns.good 
	                                        setterReturns2.chpl 
	                                        setterReturns2.future 
	                                        setterReturns2.good 
	chapel/test/functions/bradc/varFns/: .cvsignore 
	                                     retLitFromVarFn.chpl 
	                                     retLitFromVarFn.future 
	                                     retLitFromVarFn.good 
	                                     retLocFromVarFn.chpl 
	                                     retLocFromVarFn.future 
	                                     retLocFromVarFn.good 
	chapel/test/functions/iterators/bradc/: 
	                                        topLevelIteratorNoParens.chpl 
	                                        topLevelIteratorNoParens.future 
	                                        topLevelIteratorNoParens.good 

---------------------------------------------------------------------------

03/22/07 15:41:51 -- bradc

Log message:
	Checking in a C implementation of HPCC RA, based on
	our Chapel implementation.  It seems to get the
	same numerical results as the Chapel version (verified
	on n=1..10).
	
	*** NOTE: I didn't implement the timing routines for
	this code.  That still needs to be done.  Ideally,
	the same routines we use for Chapel could be used,
	but I was too lazy to hook those in (thought it would
	be more "above-the-board if Steve did it :).
	
	To execute, supply a single command line argument that
	gives the log_2 of the problem size (equivalent to
	--n=...) in the Chapel version.
	
	Use the following -D options during compilation to change
	default printing:
	  -DprintParams=0 to turn off printing the problem size
	  -DprintArrays=1 to turn on the printing of arrays
	  -DprintStats=0 to turn off the printing of timing/GUPS

Added files:
	chapel/test/studies/hpcc/RA/performance/: .cvsignore ra.c 

---------------------------------------------------------------------------

03/22/07 16:40:41 -- bradc

Log message:
	Fixed the core dump Steve was seeing due to the fact
	that I'd allocated the C table using a static array
	(on the stack) rather than a dynamically-allocated
	one.  This version now works and gets the same
	result as Chapel for --n=20.

Modified files:
	chapel/test/studies/hpcc/RA/performance/: ra.c 

---------------------------------------------------------------------------

03/22/07 16:57:12 -- deitz

Log message:
	Added timing to the C version of RA that Brad wrote.
	
	For n=24, the C version uses 25.5% of my machine's memory which is
	identical to the Chapel versions (where sequentialVerify is true).
	
	Using -O3 for C
	Using --ccflags "-O3" --no-bounds-checks for Chapel
	
	C                               9.52 seconds  0.0070 gups
	Chapel                         18.94 seconds  0.0035 gups
	Chapel (non-stridable array)   15.62 seconds  0.0043 gups
	
	The non-stridable array optimization is not yet checked in.  This
	optimization has a bigger payoff on my 2D kernel loop.

Modified files:
	chapel/test/studies/hpcc/RA/performance/: ra.c 

---------------------------------------------------------------------------

03/23/07 10:13:43 -- bradc

Log message:
	First pass at getting an emacs 22.0 font-lock + mode
	for Chapel.  Lots of work yet remains, but getting
	some coloring should be better than nothing.  The
	approach I'm taking here (mimicking C/C++) may be
	inherently broken as well since our declaration
	syntax is so different -- things may need to be done
	more from scratch.  But I think we can get at least
	as far with this approach as we did last time.
	
	More edits to come.  This is just a placeholder,
	but one that should be somewhat helpful.
	
	Dropping the following lines into your .emacs mode
	ought to bring up Chapel mode automatically when
	loading a Chapel file if your CHPL_HOME envvar is
	set.
	
	; PREPEND CHPL etc/emacs/major.minor to emacs load path
	(setq chpl-home (getenv "CHPL_HOME"))
	(if (string= chpl-home nil)
	    nil
	  (setq load-path (cons (concat chpl-home
	                                "/etc/emacs/"
	                                (number-to-string emacs-major-version)
	                                "."
	                                (number-to-string emacs-minor-version))
	                        load-path))
	  )
	
	; make entering chpl-mode load the cc-mode file
	(autoload 'chpl-mode "cc-mode" "Chpl enhanced cc-mode" t)
	
	; turn on font coloring by default
	(global-font-lock-mode t)
	
	; make loading files with .chpl extension enter us into chpl-mode
	(setq auto-mode-alist (cons '("\\.chpl$" . chpl-mode)
	                            auto-mode-alist))

Added files:
	chapel/etc/emacs/22.0/: .cvsignore cc-defs.el cc-fonts.el 
	                        cc-langs.el cc-menus.el cc-mode.el 

---------------------------------------------------------------------------

03/23/07 15:06:47 -- bradc

Log message:
	Further improvements to emacs mode for Chapel.
	
	Also started a second attempt at an emacs mode
	starting from the pascal.el file to see if our
	declaration style would work better there.  It
	did, but I broke enough stuff along the way
	that it isn't so good yet.  Called this version
	chapel-mode for contrast, and deserves a bit
	more work, but perhaps not today.
	
	Also checking in the original source files that
	I started from for comparison's sake.

Modified files:
	chapel/etc/emacs/22.0/: .cvsignore cc-langs.el 
Added files:
	chapel/etc/emacs/22.0/: cc-defs.orig.el cc-fonts.orig.el 
	                        cc-langs.orig.el cc-menus.orig.el 
	                        cc-mode.orig.el chapel.el pascal.orig.el 

---------------------------------------------------------------------------

03/23/07 16:11:08 -- marybeth

Log message:
	Desired version of Block LU with pivoting.  An iterator, array views,
	maxIndex reduction, a swap operator and subdomains (or domain slices?)
	are used to express the algorithm cleanly.
	
	For pivoting, I swapped the entire rows during the LU factorization
	of A11.  For an optimal parallel version, you probably want to group
	these swaps and apply them across the entire rows all at once, after
	the factorization of A11 is complete.
	
	Also, in this checkin, I fixed the desired version for Block LU without
	pivoting.  (I added a var declaration for Block and Unfact.)

Modified files:
	chapel/test/studies/lu/marybeth/: blocks-wish2.mb 
Added files:
	chapel/test/studies/lu/marybeth/: pivblock-wish.mb 

---------------------------------------------------------------------------

03/23/07 16:19:03 -- bradc

Log message:
	A generic class test that seems like it ought to work,
	but isn't.  This uses behavior that I'd hoped to use
	in the sparse domain implementation.  I might be missing
	something obvious.  The error message isn't very helpful
	in that it doesn't point to anything in the user code.

Added files:
	chapel/test/classes/bradc/: genericTypes.chpl 
	                            genericTypes.future 
	                            genericTypes.good 

---------------------------------------------------------------------------

03/23/07 17:14:17 -- bradc

Log message:
	Small improvement to my syntax error fix of the
	other day so that we don't print out the "near"
	clause if yytext is empty.

Modified files:
	chapel/compiler/parser/: yy.cpp 

---------------------------------------------------------------------------

03/23/07 17:14:45 -- bradc

Log message:
	Added subdomain to type list for emacs mode.

Modified files:
	chapel/etc/emacs/22.0/: cc-langs.el 

---------------------------------------------------------------------------

03/23/07 17:18:12 -- bradc

Log message:
	Initial (bad) implementation of sparse domain/array.
	Supports addition of indices and indexing of array.
	Currently can't hold more than 30 nonzero values.
	
	Uses a (naive) tuple of sequences to store the indices
	in something approximating unsorted coordinate format.
	The array currently has its data stored using a 30
	element array, hence the limitation.
	
	Made it so that sparse arrays currently have to
	be subdomains of a parent domain that specifies
	their bounding boxes (in the parser).
	
	Added a test that creates a sparse domain to describe
	a diagonal array, initializes it, and prints out the
	array (manually).
	
	Next stop: try to implement coordinate storage or
	CSR more realistically.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleSparse.chpl 
	chapel/test/sparse/deitz/: test_sparse1.chpl test_sparse1.good 
Added files:
	chapel/test/sparse/bradc/: sparseArray.chpl sparseArray.good 

---------------------------------------------------------------------------

03/26/07 11:07:30 -- deitz

Log message:
	Fixed a bug with using a generic class or record with default values
	on all of its generic fields in general.  Previously a fix was
	special-cased for appearances of these types at the top-level of a
	type expression or within a cast.
	
	Added a most basic test of this case.
	
	Also removed a .future of a not-so-basic test of this case.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/classes/deitz/: test_generics1.chpl 
	                            test_generics1.good 
Removed files:
	chapel/test/arrays/bradc/workarounds/: 
	                                       arrayOfSpsArray-workaround-generictype.future 

---------------------------------------------------------------------------

03/26/07 11:32:56 -- deitz

Log message:
	Regressed
	
	  types/seq/deitz/test_seq_class5
	
	I understand the issue with this test, believe there needs to be a way
	to make it work, but also believe that the change will be non-trivial.
	Since this is a large change, I'm checking in separately now.
	
	Added a stridable parameter to the built-in implementation of
	arithmetic domains and arrays, as well as sparse arithmetic domains
	and arrays (questionable now that sparse arithmetic domains do not use
	or define the reference to their arithmetic domain and array).
	
	A domain of type domain(2) can never be strided, similar to the
	semantics of the standard range type.  The comparable domain type that
	can be strided must be specified as domain(2,stridable=true).
	
	A literal arithmetic domain is stridable if any of the ranges used to
	define it are stridable and otherwise is not stridable.  This is
	computed during compilation using the recursive parameter function
	_any_stridable.
	
	The stridable parameter improves array access speed significantly.
	This initial checkin shows a speedup of 3.9 on the test_for2d kernel
	over the code without this change:
	
	  C compiler flags:       -O3
	  Chapel compiler flags:  --no-bounds-checks --ccflags "-O3"
	
	  test_for2d.c     0.39 seconds
	  test_for2d.chpl  4.64
	  test_for2d.chpl  1.19
	
	Changed the way array arguments work.  All array arguments now result
	in generic code meaning that it is specialized based on the call site.
	Though not specified yet, a where clause should be used to restrict
	the actual arguments to match in rank and element type if we feel that
	is desirable.
	
	Changed the way field types are set during function resolution.  They
	are now set when the constructor is resolved based on
	PRIMITIVE_SET_MEMBER rather than when the formal argument types to a
	constructor are resolved.  This is necessary to deal with array fields
	where the default expression is set to nil and does not reflect the
	actual type of the field.  This change resulted in the regression
	above.  Of concern, only that single test failed.
	
	Made the renaming of array and domain types more robust by looking for
	the name of a field rather than a position.  It previously assumed the
	eltType field was first and the dom field was fourth.
	
	Changed a few tests that did things like
	
	  var d: domain(1) = [1..n by 2];
	
	to
	
	  var d = [1..n by 2];
	
	Alternatively, this could have been
	
	  var d: domain(1,stridable=true) = [1..n by 2];

Modified files:
	chapel/compiler/passes/: cleanup.cpp functionResolution.cpp 
	                         normalize.cpp 
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleSparse.chpl 
	chapel/test/arrays/bradc/: twoDasTwoOneDs.good 
	chapel/test/arrays/deitz/stride/: test_stride1.chpl 
	                                  test_stride2.chpl 
	chapel/test/arrays/marybeth/: CMO_array.chpl 
	chapel/test/domains/bradc/: bydomain.chpl 
	chapel/test/domains/shannon/: by4Dtuple.chpl 

---------------------------------------------------------------------------

03/26/07 11:44:10 -- deitz

Log message:
	Made a trivial change to log this correction to a comment in my
	previous checkin:
	
	Instead of writing
	
	  var d: domain(1,stridable=true) = [1..n by 2];
	
	the way this works is
	
	  var d: domain(1) distributed(SingleLocaleDistribution(stridable=true))
	       = [1..n by 2];
	
	This is because stridable is not part of all arithmetic domains but
	rather is part of this particular distribution.  Perhaps it should be
	part of all arithmetic domains though.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 

---------------------------------------------------------------------------

03/26/07 15:28:03 -- bradc

Log message:
	Fixed an indentation problem in emacs Chapel mode
	with Steve's help.  I believe that since our for,
	forall, and if statements don't require parens
	to surround their controlling expressions putting
	them in the same definition area as the same
	concepts in C, C++, Java results in tabbing problems.
	So, put them in my miscellaneous grab-bag keywords
	list instead.  This seems to fix the indentation
	problem.
	
	Also added "where" to the grabbag.

Modified files:
	chapel/etc/emacs/22.0/: cc-langs.el 

---------------------------------------------------------------------------

03/27/07 16:51:31 -- bradc

Log message:
	Another fix to the emacs mode requested by Steve.
	This should fix the issue where Chapel classes need
	not end with semicolons as in C++, so indentation
	following a class/record should be correct.

Modified files:
	chapel/etc/emacs/22.0/: cc-langs.el 

---------------------------------------------------------------------------

03/27/07 17:38:58 -- bradc

Log message:
	This is a checkin to log a confusing compiler message
	I got while working last night, captured in
	weirdParamInit3.chpl.  It's not clear to me whether
	the code ought to be legal or not.  weirdParamInit.chpl
	and weirdParamInit2.chpl imply that perhaps it ought to
	be, but even if it isn't, the error message could be
	improved to be (a) clearer, and (b) point to the line
	where the problem is occurring.  More details and
	thought in the .future.x

Added files:
	chapel/test/classes/bradc/paramInClass/: .cvsignore 
	                                         weirdParamInit.chpl 
	                                         weirdParamInit.good 
	                                         weirdParamInit2.chpl 
	                                         weirdParamInit2.good 
	                                         weirdParamInit3.chpl 
	                                         weirdParamInit3.future 
	                                         weirdParamInit3.good 

---------------------------------------------------------------------------

03/27/07 17:46:20 -- bradc

Log message:
	Haven't fully tested, but this change works on
	the sparse/ and array/ test directories, and
	I couldn't resist being the only person to
	check in developer code on a weekday for the
	first time in who knows how long...
	
	This change adds a notion of out-of-boundness
	to sparse arrays such that if a sparse array
	is accessed out-of-bounds an error occurs (if
	bounds checking is turned on); if it is accessed
	in-bounds and at a represented element the array
	element is returned; and otherwise the IRV or
	"zero" value is returned.  Added two tests to
	check this behavior.
	
	In doing this change, added a member?() check
	to the SingleLocaleArithmetic domain and to
	the BaseDomain class so that the SparseDomain
	could store a pointer to its parent (for
	whom we don't want to assume any particular
	implementation/distribution) and query whether
	something was in or out of bounds for it.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleSparse.chpl 
Added files:
	chapel/test/sparse/bradc/: outOfBounds.chpl outOfBounds.good 
	                           sparseArray2.chpl sparseArray2.good 

---------------------------------------------------------------------------

03/28/07 09:49:12 -- bradc

Log message:
	Commiting original versions of old emacs lisp
	files that I had sitting around for reference.

Added files:
	chapel/etc/emacs/21.4/: cc-langs.orig.el cc-menus.orig.el 
	                        cc-mode.orig.el font-lock.orig.el 

---------------------------------------------------------------------------

03/28/07 09:57:48 -- bradc

Log message:
	A variation on Steve's test_method_noparens_precedence.chpl
	test demonstrating that parenthesis-less methods shadow
	parenthesis-ful methods even if they are a better match.
	I think there was general agreement to generate an error
	in this case, but this is an interesting enough test for
	future reference (whatever we decide) that it seemed worth
	filing away.

Added files:
	chapel/test/classes/bradc/: 
	                            test_method_noparens_precedence_mismatch.chpl 
	                            test_method_noparens_precedence_mismatch.good 

---------------------------------------------------------------------------

03/28/07 10:05:54 -- bradc

Log message:
	A few stray .cvsignore files.

Added files:
	chapel/test/compflags/bradc/badflagdash/: .cvsignore 
	chapel/test/modules/standard/memory/: .cvsignore 

---------------------------------------------------------------------------

03/28/07 10:45:00 -- deitz

Log message:
	Added a new field "origOff" to the SingleLocaleArithmeticArray class
	to store a precomputed combination of the off tuple and the orig value
	to reduce the number of fields accessed and the number of subtractions
	in an array access of non-stridable arrays.
	
	The performance impact is insignificant at least on test_for2d:
	
	c -O3                             : 0.40
	chpl before -O3 --no-bounds-checks: 1.20
	chpl after  -O3 --no-bounds-checks: 1.19

Modified files:
	chapel/modules/standard/: SingleLocaleArithmetic.chpl 

---------------------------------------------------------------------------

03/28/07 10:47:07 -- deitz

Log message:
	Removed a test that has been regressing due to the odd _copy function
	on sequences.  Since sequences are on their way out and this test
	cannot be reproduced using normal classes and records, there is no
	reason to keep it around.

Removed files:
	chapel/test/types/seq/deitz/: test_seq_class5.chpl 
	                              test_seq_class5.good 

---------------------------------------------------------------------------

03/28/07 11:21:49 -- bradc

Log message:
	Added some initial support for building Chapel
	for the MTA including initial support for
	cross-compilation:
	
	Cross Compiling
	---------------
	To build the compiler to run on one platform
	(say the linux64 front-end to an MTA), but
	have the runtime and compiler-generated code
	get built for another, set an additional
	variable CHPL_CROSS_PLATFORM which specifies
	the platform from which you'll be cross-
	compiling.  For example, on linux-ion, you
	would set:
	
	setenv CHPL_PLATFORM mta
	setenv CHPL_CROSS_PLATFORM linux64
	
	You will also likely want to make your path
	refer to the cross-compiler version of the
	chpl compiler:
	
	set path = ($CHPL_HOME/bin/$CHPL_CROSS_PLATFORM $path)
	
	MTA-specific changes
	--------------------
	Added initial MTA Makefile settings file as well
	as some mta-specific runtime header files (e.g.,
	the MTA does not yet support stdint.h so I've set
	up some of the features we rely on from it in a
	spoofed file there.  More will need to be added,
	I'm sure).
	
	Changed some Makefile.include syntax to be more
	MTA-compatible (though we're using gmake ?!) and
	consistent with how we invoke the util/platform
	script in Makefile.platform.
	
	Misc
	----
	Added a "printplatform" target to Makefile.base
	so that from within any other directory that
	supports a Makefile, you can do "make printplatform"
	to see what that directory and its Makefile think
	the platform is.  When cross-compiling, for example,
	"make printplatform" in the compiler directory
	should print your cross-compiling platform whereas
	the runtime and generated code directories should
	print the target platform.

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/make/: Makefile.base 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/src/: .cvsignore 
Added files:
	chapel/make/: Makefile.mta 
	chapel/runtime/include/mta/: chplsys.h stdint.h 

---------------------------------------------------------------------------

03/28/07 13:14:38 -- bradc

Log message:
	Added a "ranlib" step to our runtime library build
	Makefile, which causes a warning to go away on the
	MTA, and seems to work fine on other platforms.  If
	this causes problems on some platform, we can define
	RANLIB to be something like "echo" on that platform.

Modified files:
	chapel/make/: Makefile.generic Makefile.gnu Makefile.mta 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

03/28/07 14:54:06 -- bradc

Log message:
	This check-in renames the Makefile variable PLATFORM
	to be CHPL_MAKE_PLATFORM to avoid conflicting with
	environment variables of the same name.  In particular,
	environment variables become Makefile variables if they
	are not explicitly set, so our Makefiles were fragile
	in their use of this variable name considering that we
	weren't interested in inheriting a value from the
	environment, just chose a simple name.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: Makefile Makefile.include 
	chapel/compiler/adt/: Makefile Makefile.include 
	chapel/compiler/backend/: Makefile Makefile.include 
	chapel/compiler/ifa/: Makefile Makefile.include 
	chapel/compiler/ifa/make_prims/: Makefile 
	chapel/compiler/main/: Makefile Makefile.include 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	chapel/compiler/parser/: Makefile Makefile.include 
	chapel/compiler/passes/: Makefile Makefile.include 
	chapel/compiler/util/: Makefile Makefile.include 
	chapel/make/: Makefile Makefile.base Makefile.platform 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

03/28/07 15:02:04 -- bradc

Log message:
	One more fix to the top-level Makefile that
	my grepmake script skipped (!), and two
	dead ones that were overdue to be removed.

Modified files:
	./: Makefile 
Removed files:
	chapel/third-party/: Makefile 
	chapel/third-party/boehmgc/: Makefile 

---------------------------------------------------------------------------

03/28/07 15:37:42 -- bradc

Log message:
	Filing two tests of declaring an array within a class.
	If the array is uninitialized, the test works as
	expected.  If the array is initialized, the class
	constructor cannot be resolved.

Added files:
	chapel/test/classes/bradc/arrayInClass/: .cvsignore 
	                                         genericArray.chpl 
	                                         genericArray.good 
	                                         genericArrayWithInit.chpl 
	                                         genericArrayWithInit.future 
	                                         genericArrayWithInit.good 

---------------------------------------------------------------------------

03/28/07 17:24:29 -- bradc

Log message:
	An intriguing error.  Something about this code causes
	the compiler to access an alist out of bounds.

Added files:
	chapel/test/classes/bradc/overloadMethods/: printType.chpl 
	                                            printType.future 
	                                            printType.good 

---------------------------------------------------------------------------

03/28/07 17:30:55 -- bradc

Log message:
	A series of tests that might indicate some of the
	challenges that might lie ahead of us with stridable
	as a parameter in a range -- creating an abstract base
	class that has a tuple of ranges that supports some
	sort of bbox() or getRange() (or similar equivalent of
	our current this() function on domains) may be difficult
	to do due to the requirements on return types of
	overloaded methods.  Ran afoul of this when trying to
	have the sparse domain query its parent domain's
	bounding box/ranges.  If I'm missing something obvious,
	would be glad to hear it.

Added files:
	chapel/test/classes/bradc/overloadMethods/: .cvsignore 
	                                            v1NoReturnValue.chpl 
	                                            v1NoReturnValue.good 
	                                            v2NoReturnValueButType.chpl 
	                                            v2NoReturnValueButType.good 
	                                            v3aoneClassReturnMatch.chpl 
	                                            v3aoneClassReturnMatch.good 
	                                            v3oneClassReturnMatch.chpl 
	                                            v3oneClassReturnMatch.good 
	                                            v4oneClassReturnNoMatch.chpl 
	                                            v4oneClassReturnNoMatch.future 
	                                            v4oneClassReturnNoMatch.good 
	                                            v5bothReturnTypes.chpl 
	                                            v5bothReturnTypes.future 
	                                            v5bothReturnTypes.good 

---------------------------------------------------------------------------

03/28/07 19:09:26 -- marybeth

Log message:
	I made changes to the pivoting and non-pivoting block LU versions
	as was discussed in the library meeting yesterday.  I recorded the
	changes in the comments of the code.
	
	- I improved the names of the subdomains and the iterator.
	- I cleaned up the algorithm, taking out tests for hi+1 > n and
	for empty domains, assuming that subdomains with indices out
	of range of the original domain are empty (and don't give an
	error).  I made sure that if certain domains were empty, the
	loops were written in such a way that they would not execute
	and the algorithm would fall out.
	- I changed the views into A for the case with pivoting, during
	the first factorization steps of the algorithm.  I use A1 and A2
	during the factorization of the active block columns of A (A1).  After
	that is complete, then A12 and A22 are used to complete the computations
	for the A2 block.
	- I removed the declarations of the subdomains.
	- I changed the declaration of the pivot array to be an index of A1D.
	- I changed the swap operator to <==>.
	
	I did not yet add tasks to swap rows of A2 while A1 is being factored.

Added files:
	chapel/test/studies/lu/marybeth/: blocks-wish3.mb 
	                                  pivblock-wish2.mb 

---------------------------------------------------------------------------

03/29/07 11:47:06 -- bradc

Log message:
	A quick test to ensure that we're not a multiple
	dispatch language for purposes of my sanity.  :)

Added files:
	chapel/test/classes/bradc/: dynDispatchOnArg.chpl 
	                            dynDispatchOnArg.good 

---------------------------------------------------------------------------

03/30/07 10:52:27 -- deitz

Log message:
	Removed all temporary sequences.  This impacts the semantics of the
	language in important ways:
	
	1. Iterators, forall expressions, and promoted functions that are not
	   pure (side effects, read globals) are not evaluated fully until
	   they are iterated over.  This change impacts
	     arrays/deitz/promotion/test_scalar_promote_side_effect
	     functions/deitz/test_forallexpr2
	   I updated the .good, but if promotion or forall expressions result
	   in parallel execution, these tests are non-deterministic.
	
	2. Iterators, forall expressions, and promoted functions do not return
	   sequences unless the result is captured into a variable in the
	   Chapel program.  This means that, for example, # cannot be applied
	   to an iterator.  Nor can an iterator be indexed into.  On the plus
	   side, I can make iterators return arrays with a trivial change.
	   This change impacts
	     [Error matching compiler output for spec/marybeth/seq3]
	     [Error matching compiler output for spec/marybeth/seq4]
	     [Error matching compiler output for types/seq/deitz/test_seq10]
	   Since we are in a good position to remove sequences entirely, these
	   tests should probably be removed.  Removed my test and alerted MB
	   to the issue.
	
	The major change in this checkin is the removal of the iterator
	propagation optimization.  Instead, iterator classes are prototyped in
	function resolution and propagated via instantiation at this point.
	Iterators do not actually result in sequences unless the result is
	captured into a variable via the _copy function.
	
	Removed the --warn-temporary flag since sequence temporaries are no
	longer inserted, except by the Chapel programmer.  Removed the
	--no-iterator-propagation flag since this optimization no longer
	exists.
	
	Factored lowerIterator, which changes an iterator into a class and
	methods, into two functions.  The function prototypeIteratorInfo is
	now used during function resolution to prototype the class and methods
	though the actual bodies of the class and methods are not created
	until the lowerIterators pass in using the lowerIterator function.
	
	Added primitive PRIMITIVE_GET_IC_TYPE to return the element type of an
	iterator class.  This is used in the definition of the _copy function
	of iterator classes in order to determine the element type of the
	sequence (or array eventually) that the iterator is changed into when
	it is captured into a variable.
	
	Added a built-in generic type _iteratorClass that can be used to
	define functions that work on iterators (or promotions or forall
	expressions).  Used this generic to define a write function over
	iterators, which prints it out like a sequence, a _pass function, and
	a _copy function.  The _pass function has no effect so that iterators
	or promotions can be passed into other functions and/or nested.  The
	scalar promotion type of an iterator class is set to the return type
	of the iterator function.  The _copy function results in an actual
	sequence so that iterators can be captured into Chapel variables.
	
	Extended flattenFunctions to also flatten types defined in functions.
	
	This checkin greatly improves the performance of the stream benchmark
	though it is still slower than the no-promotion version.  The fft
	benchmark requires more work but I have some guesses.

Modified files:
	chapel/compiler/AST/: expr.cpp iterator.cpp primitive.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: driver.h iterator.h primitive.h type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: flattenFunctions.cpp 
	                         functionResolution.cpp 
	                         lowerIterators.cpp 
	chapel/modules/standard/: ChapelSeq.chpl 
	chapel/test/arrays/deitz/promotion/: 
	                                     test_scalar_promote_side_effect.good 
	chapel/test/functions/deitz/: test_forallexpr2.good 
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp2.good 
Removed files:
	chapel/test/arrays/deitz/: test_plus_seq_temps.compopts 
	chapel/test/functions/deitz/iterators/temps/: COMPOPTS 
	                                              test_iterator_temp2.compopts 

---------------------------------------------------------------------------

03/30/07 11:38:12 -- deitz

Log message:
	Removed one user temp from the fft benchmark, but this code will
	require some form of garbage collection to run fast in order to handle
	excess array alias classes (via slices) and domain classes via domain
	creations in inner loops.

Modified files:
	chapel/test/release/examples/hpcc06/: fft.chpl 

---------------------------------------------------------------------------

03/30/07 11:57:40 -- bradc

Log message:
	Propagated Steve's fft.chpl change to fft-mta.chpl
	and updated the README file (which is designed to
	track changes in the code since we wrote the HPCC
	paper for those using the paper to understand the
	code).

Modified files:
	chapel/test/release/examples/hpcc06/: README fft-mta.chpl 

---------------------------------------------------------------------------

03/30/07 12:26:30 -- diten

Log message:
	Make the line numbers for the formals for default constructors match the
	line numbers for the fields they initialize.  Make the line numbers for the
	VarSymbols created for default wrappers be the same as the numbers for the
	formals of the function getting wrapped.  This makes for more descriptive error
	messages when class field initialization fails, for example.
	
	Add a simple test for this.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: cleanup.cpp 
Added files:
	chapel/test/classes/diten/: error_default_field_init.chpl 
	                            error_default_field_init.good 
	                            error_default_field_init.prediff 

---------------------------------------------------------------------------

03/30/07 12:41:22 -- marybeth

Log message:
	Rewrote sorting routine that was implemented with sequences.
	It's now implemented with a 1D array.
	
	Note:  writeln(x(order)) still outputs a sequence literal.
	
	Adding sort.chpl, sort.good.  Removing seq3.chpl, seq3.good,
	seq4.chpl, seq4.good.

Added files:
	chapel/test/spec/marybeth/: sort.chpl sort.good 

---------------------------------------------------------------------------

03/30/07 12:44:30 -- marybeth

Log message:
	Last commit did not remove any files.
	Removing seq3.chpl, seq3.good, seq4.chpl, seq4.good.

Removed files:
	chapel/test/spec/marybeth/: seq3.chpl seq3.good seq4.chpl 
	                            seq4.good 

---------------------------------------------------------------------------

03/30/07 13:01:56 -- bradc

Log message:
	Caused runtime error messages to print out internal
	module filenames/locations when the --devel flag is
	turned on.  Otherwise, the user filename/line number
	is printed as before.
	
	Also, added a --no-devel flag to support the ability
	to override a developer environment variable without
	unsetting it (decided not to make --devel a toggle
	for fear that it would result in confusing behavior).
	
	Changed the --help message to not print out the
	compiler version information in order to make
	the userhelp.chpl test work in a more traditional
	way where the userhelp.good file should be updated
	rather than the userhelp.txt file.
	
	Turned out to be troublesome to have two flags (--devel
	and --no-devel) change the same variable with our
	current argument-parsing scheme, so created a new
	flag type "N" (for "No-" flag) which is similar to the
	"F" flag except that it supports both positive and
	negative variations.  Thus, creating "devel" as an "N"
	flag causes "--devel" to work like an "F" flag and
	"--no-devel" to work like the "f" version of the flag.
	(Could imagine adding an "n" flag that reverses this
	sense, much as "F" and "f" are opposites, but didn't
	do this now).

Modified files:
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/compiler/passes/: insertLineNumbers.cpp 
	chapel/test/compflags/bradc/help/: .cvsignore README 
Added files:
	chapel/test/compflags/bradc/help/: userhelp.good 
Removed files:
	chapel/test/compflags/bradc/help/: userhelp.prediff userhelp.txt 

---------------------------------------------------------------------------

03/30/07 15:31:33 -- bradc

Log message:
	Added support for a --gdb flag on the compiler-generated
	executable, much as we support for the compiler itself.
	Obviously, Steve's various "view" functions aren't supported
	here since they don't make sense, but otherwise things
	should be more or less identical to how they work within
	the compiler.  Please let me know if you find any obvious
	bugs.  The point of this (as with the compiler flag) is
	to support the ability to quickly start debugging a particular
	run without having to explicitly specify a bunch of
	command-line flags within the gdb session.
	
	Note that while Steve's view commands don't make sense
	within this context, we could generate some other commands
	that would be very nice, such as mapping functions from
	Chapel identifier names to C names and vice-versa, as
	a means of helping the user work with our generated
	code a bit easier.
	
	In making this change, created a single _chpl_exit()
	exit point for Chapel programs to (a) cleanup state
	on the way out of the program, and (b) provide a
	location to set a gdb breakpoint in case of non-zero
	exit.  Also made errors return a non-zero exit code,
	which seems appropriate.
	
	Due to the above change, made sub_test not complain if
	a test returns a non-zero exit code.  I hope this is
	reasonable...  I couldn't think of why this would be
	a concern.
	
	Added a test of using the --gdb flag on the generated
	executable, similar to the one we have for the compiler
	--gdb flag.
	
	Also, adding in some missing .cvsignore files in the
	test directories.

Modified files:
	chapel/compiler/AST/: primitive.cpp 
	chapel/runtime/include/: chplrt.h 
	chapel/runtime/src/: Makefile arg.c config.c error.c 
	chapel/test/Bin/: sub_test 
	chapel/test/execflags/shannon/: help.good 
	chapel/test/execflags/shannon/configs/help/: configVar-Dash.good 
	                                             configVarHelp.good 
	                                             configVarModStrings1.good 
	                                             configVarModStrings2.good 
	                                             configVarSetOver.good 
	                                             configVarSetTwoTypes.good 
	                                             configVarTwoModules.good 
	                                             varNameEnumQM.good 
	                                             varNameQMark.good 
Added files:
	chapel/runtime/include/: chplexit.h gdb.h 
	chapel/runtime/src/: chplexit.c gdb.c 
	chapel/test/execflags/bradc/gdbddash/: .cvsignore EXECOPTS 
	                                       PREDIFF declint.chpl 
	                                       declint.good 
	                                       declint.stdin 
	chapel/test/modules/standard/machine/: .cvsignore 
	chapel/test/sparse/bradc/: .cvsignore 
	chapel/test/spec/marybeth/: .cvsignore 

---------------------------------------------------------------------------

03/30/07 17:11:10 -- deitz

Log message:
	Refactored code to build the iterator class in preparation to
	specialize and optimize a common case.

Modified files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/compiler/include/: iterator.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

04/02/07 08:54:32 -- diten

Log message:
	Change the call to primitive "exit" to "_chpl_exit".  This corrects the
	undefined primitive errors seen in recent testing.

Modified files:
	chapel/modules/standard/: ChapelBase.chpl 

---------------------------------------------------------------------------

04/02/07 10:04:20 -- bradc

Log message:
	Added sparse keyword to emacs mode.

Modified files:
	chapel/etc/emacs/22.0/: cc-langs.el 

---------------------------------------------------------------------------

04/02/07 10:13:14 -- bradc

Log message:
	Improved the default sparse domain/array format to use
	CRS (Compressed Row Storage).  This removes the 30
	nonzeroes limitation from the previous version.  However,
	there are still some limitations and workarounds:  (1) I
	don't query the parent domain's row range as I should, but
	instead hardcode it to be -1..2000, implying that (a) 2002
	rows are represented for every sparse domain, and (b) if a
	row outside this range is specified, an out-of-bounds error
	will occur;  (2) I'm currently not reallocating the sparse
	arrays for a domain when a new index is added to it
	properly.  This means that if the domain is created before
	the sparse array's elements are defined, things will work;
	if the sparse array's elements are defined and then the
	domain is modified they won't.
	
	Added a bunch of tests showing that this format can be used
	to express the sparse domain and array from NAS CG, as well
	as some simple standalone tests.  Also added some futures
	showing the need to reallocate arrays more intelligently.
	
	Fixed a problem with my last checkin to sub_test, in which
	a timeout would show up as two errors rather than one, due
	to the fact that I forgot to break out of the loop upon
	timing out.

Modified files:
	chapel/modules/standard/: SingleLocaleSparse.chpl 
	chapel/test/Bin/: sub_test 
	chapel/test/npb/cg/bradc/: cg-makea.chpl cg-makea1.chpl 
	                           cg-makea2.chpl 
	chapel/test/sparse/bradc/: .cvsignore 
Added files:
	chapel/test/npb/cg/bradc/: README cg-makea1-small-sparse.chpl 
	                           cg-makea1-small-sparse.compopts 
	                           cg-makea1-small-sparse.execopts 
	                           cg-makea1-small-sparse.good 
	                           cg-makea1-small.chpl 
	                           cg-makea1-small.compopts 
	                           cg-makea1-small.execopts 
	                           cg-makea1-small.good 
	                           cg-makea1-sparse.chpl 
	                           cg-makea1-sparse.compopts 
	                           cg-makea1-sparse.good 
	                           cg-makea1.compopts 
	                           cg-makea2-small-sparse.chpl 
	                           cg-makea2-small-sparse.compopts 
	                           cg-makea2-small-sparse.execopts 
	                           cg-makea2-small-sparse.future 
	                           cg-makea2-small-sparse.good 
	                           cg-makea2-sparse.chpl 
	                           cg-makea2-sparse.compopts 
	                           cg-makea2-sparse.future 
	                           cg-makea2-sparse.good 
	                           cg-makea2.compopts cg-makea3.chpl 
	                           cg-makea3.compopts cg-makea3.good 
	chapel/test/sparse/bradc/: sparseArray3.chpl sparseArray3.good 
	                           sparseArray4.chpl sparseArray4.future 
	                           sparseArray4.good 

---------------------------------------------------------------------------

04/02/07 10:20:40 -- bradc

Log message:
	Fixed a C++-ism (declaring variables after
	executable code has been specified) in the
	--gdb code I checked in last week.  This
	was breaking the cygwin compile.

Modified files:
	chapel/runtime/src/: gdb.c 

---------------------------------------------------------------------------

04/02/07 10:37:46 -- bradc

Log message:
	Futurizing one long-running test for now.  May
	remove or .notest this after more analysis.

Added files:
	chapel/test/npb/cg/bradc/: cg-makea1-sparse.future 

---------------------------------------------------------------------------

04/02/07 13:18:14 -- bradc

Log message:
	Change the way we munge overloaded names in the generated
	code from:
	
	     _<id>_<chapel_name>
	
	to:
	
	     _<chapel_name>_<id>
	
	which makes it easier to view values when debugging the
	generated code in gdb.  In particular, you can do:
	
	          (gdb) p myvar
	
	and if myvar isn't found (implying it's been renamed),
	you can do:
	
	          (gdb) p _myvar_<TAB>
	
	and TAB completion will complete the variable name if
	there's only one visible in the current scope; otherwise,
	it will list the candidates (and you will need to inspect
	the generated code to determine which you want).

Modified files:
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

04/02/07 13:27:55 -- bradc

Log message:
	Changed ranges so that sequences initialized to be
	degenerate retain their degenerate bounds rather
	than pegging them to 1..0.  This seems important
	now that the range is a user-level concept, as
	demonstrated in the new test below, degenRange.chpl,
	in which the user uses a range to store bounding
	box information.  If the bounds are set to 1..0,
	this doesn't achieve the desired effect.  As it
	turns out, we don't seem to rely on the 1..0 bounds
	anywhere in the code.
	
	We do rely on the stride being set to 1 for
	degenerate arrays at initialization time, so
	I left that logic in, though I'm not convinced
	it's right.  Want to look at that in a separate
	check-in, though.  (In particular, taking it
	out breaks the degenseq.chpl test below.

Modified files:
	chapel/modules/standard/: ChapelSeq.chpl 
	                          SingleLocaleArithmetic.chpl 
	chapel/test/types/seq/bradc/: degenseq.good 
Added files:
	chapel/test/types/range/bradc/: .cvsignore degenRange.chpl 
	                                degenRange.good 

---------------------------------------------------------------------------

04/02/07 13:37:02 -- bradc

Log message:
	Updated path to perl now that cpkg/v3 doesn't exist.
	Hopefully this is a portable path.

Modified files:
	chapel/test/: cat_futures cat_goods cat_tests 

---------------------------------------------------------------------------

04/02/07 14:20:59 -- bradc

Log message:
	Fixed range issue mentioned in my previous checkin
	where the stride of a degenerate range was fixed
	to be 1.  Changed this so that the stride is
	maintained even if a range is degenerate.

Modified files:
	chapel/modules/standard/: ChapelSeq.chpl 
	chapel/test/types/seq/bradc/: degenseq.good 

---------------------------------------------------------------------------

04/02/07 14:23:33 -- bradc

Log message:
	Added a brief description of the --gdb flag in the user
	documentation.

Modified files:
	chapel/doc/release/: README.executing 

---------------------------------------------------------------------------

04/02/07 14:57:04 -- bradc

Log message:
	Updated weirdParamInit3.future to capture David's observation
	from last week's developer meeting, and added a second case
	that doesn't initialize D.c to see if that has any effect.
	Both of these tests raise semantic questions about the language
	for me which might be clearer to others -- basically related
	to how generic D is with respect to its c field -- the degree
	to which declaring c to be a C or initializing it with a C
	binds its genericity for all D instances vs. ones that use
	that default initializer.

Modified files:
	chapel/test/classes/bradc/paramInClass/: weirdParamInit3.future 
Added files:
	chapel/test/classes/bradc/paramInClass/: weirdParamInit4.chpl 
	                                         weirdParamInit4.future 
	                                         weirdParamInit4.good 

---------------------------------------------------------------------------

04/02/07 14:59:24 -- bradc

Log message:
	Minor changes to the sparse domain/array implementation
	to support dense iteration, allowing the first sparse
	CG to compile and run.  This is still suboptimal in
	that the partial reduction is being expressed using
	dense loops over the sparse matrix bounding box implying
	that the same O(N**2) flops are being executed as in
	cg-dense.chpl.  A sparse matrix representation is used,
	but the computation is still dense.
	
	This checkin also retains the limitations of the previous
	-- sparse domain may not be changed once sparse array
	is assigned (or values will get messed up), and bounding
	box of sparse domain has some assumptions built into it.

Modified files:
	chapel/modules/standard/: SingleLocaleSparse.chpl 
	chapel/test/npb/cg/bradc/: .cvsignore 
Added files:
	chapel/test/npb/cg/bradc/: cg-sparse.chpl cg-sparse.compopts 
	                           cg-sparse.execopts cg-sparse.good 

---------------------------------------------------------------------------

04/02/07 15:49:12 -- bradc

Log message:
	A test demonstrating a compiler seg fault that I ran
	into (and haven't yet found a way to work around)
	when adding a bbox() query to the domain class
	hierarchy.

Added files:
	chapel/test/classes/bradc/overloadMethods/: virtualIsHalt.chpl 
	                                            virtualIsHalt.future 
	                                            virtualIsHalt.good 

---------------------------------------------------------------------------

04/02/07 16:49:23 -- deitz

Log message:
	Removed invalid sequence test that I meant to remove last week.

Removed files:
	chapel/test/types/seq/deitz/: test_seq10.good test_seq10.chpl 

---------------------------------------------------------------------------

04/02/07 16:52:35 -- deitz

Log message:
	Fixed a bug in the dynamic dispatch construction code in which calls
	that are no longer in the AST were not ignored.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
Removed files:
	chapel/test/classes/bradc/overloadMethods/: virtualIsHalt.future 

---------------------------------------------------------------------------

04/02/07 17:34:14 -- bradc

Log message:
	Fixed a bug in the sparse implementation in which
	an off-by-one error could cause extra (redundant)
	indices from being stored in the sparse domain.
	
	Added a test that counts the number of indices
	in a sparse domain to prevent against this kind
	of error slipping in unnoticed in the future.
	
	Made the sparse implementation a bit more
	efficient by searching a row for a particular
	index from top-to-bottom rather than bottom-to-top
	to optimize for the case when indices are being
	added in sorted order.
	
	Should consider doing a binary rather than linear
	search to improve this further.

Modified files:
	chapel/modules/standard/: SingleLocaleSparse.chpl 
Added files:
	chapel/test/npb/cg/bradc/: cg-makea1-small-sparse-countInds.chpl 
	                           cg-makea1-small-sparse-countInds.compopts 
	                           cg-makea1-small-sparse-countInds.execopts 
	                           cg-makea1-small-sparse-countInds.good 

---------------------------------------------------------------------------

04/03/07 09:46:07 -- bradc

Log message:
	My OS upgrade must have freed up some memory for the
	user to use, causing the countMemory test's output
	to change.  This should fix the two linux regressions
	we saw on my test run last night.

Modified files:
	chapel/test/modules/standard/memory/countMemory/: 
	                                                  countMemory.solitary.wc.cray.com.good 

---------------------------------------------------------------------------

04/03/07 11:33:47 -- deitz

Log message:
	Specialized the iterator interface methods for iterators that have a
	stylized form consisting of a single for loop with a yield statement
	in that loop.
	
	The function isSingleLoopIterator determines whether an iterator has
	this form by checking the following conditions:
	
	  1. There is exactly one for-loop and no other loops.
	  2. The single for-loop is top-level to the function.
	  3. There is exactly one yield.
	  4. The single yield is top-level to the for-loop.
	  5. There are no goto statements.
	
	The single loop iterator has the following form:
	
	  iterator foo() {
	    BLOCK I
	    for loop {
	      BLOCK II
	      yield statement
	      BLOCK III
	    }
	    BLOCK IV
	  }
	
	The getHeadCursor and getNextCursor methods are specialized to
	simplify the control flow that would be created using the general
	transformation.  The getHeadCursor method contains blocks I, II, and
	IV where II and IV are guarded in a conditional.  The getNextCursor
	method contains blocks III, II, and IV where II and IV are guarded in
	a conditional.
	
	Performance Results
	-------------------
	
	RA (Problem size = 2**25)
	C                         22.013
	CHPL before this change   33.432  51.9% overhead
	CHPL                      25.849  17.4% overhead
	
	RA (Problem size = 2**20)
	C                          0.490
	CHPL before this change    0.774  58.0% overhead
	CHPL                       0.617  25.9% overhead
	
	STREAM (Problem size = 11051520)
	CHPL no promotion version  1.526
	CHPL before this change    8.058  428% overhead
	CHPL                       7.819  412% overhead
	
	These tests show the expected gain on RA.  This optimization does not
	help STREAM nearly as much.  That will require different changes.
	
	We don't yet have a C version of STREAM to test against.  My guess,
	based on the test_for2d performance issue, is that even the no
	promotion version shows some significant overhead.

Modified files:
	chapel/compiler/AST/: iterator.cpp 

---------------------------------------------------------------------------

04/03/07 12:27:05 -- deitz

Log message:
	Changed the boundedType field of the range type to an enumerated type
	called BoundedRangeType with values bounded, boundedLow, and
	boundedHigh.
	
	Located the BoundedRangeType in the base module to support the
	--nostdincs flag.
	
	It appears that a parameter integer cannot be coerced to a parameter
	enumerated type so
	
	  range(int,0)
	
	is no longer valid.  It must be
	
	  range(int,bounded)
	
	Updated tests.
	
	Note.  Enumerated types in Java define the constant symbols in the
	scope of the enumeration type.  This has some advantages as far as the
	name space is concerned.  To access a constant, the programmer writes:
	
	  BoundedRangeType.bounded
	
	Without making this change, we could also take the approach of nesting
	BoundedRangeType in the range type and defining some (static?)
	constants with the names that we want the user to access.  For
	example, they could then specify range.bounded instead of bounded.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: ChapelArray.chpl ChapelBase.chpl 
	                          ChapelSeq.chpl 
	                          SingleLocaleArithmetic.chpl 
	chapel/test/arrays/marybeth/: CMO_array.chpl 
	chapel/test/classes/bradc/overloadMethods/: v1NoReturnValue.chpl 
	                                            v2NoReturnValueButType.chpl 
	                                            v3aoneClassReturnMatch.chpl 
	                                            v3oneClassReturnMatch.chpl 
	                                            virtualIsHalt.chpl 

---------------------------------------------------------------------------

04/03/07 13:59:01 -- bradc

Log message:
	Next two compiler errors I ran into in doing dynamic
	dispatch.  dispatchNil.chpl shows a case where
	dynamic dispatch codegen's a method call on nil
	rather than reporting an error or avoiding generating
	this code.  The second case shows an alist-out-of-bounds
	internal error, apparently due to type inference in a
	dynamic dispatch case.

Added files:
	chapel/test/classes/bradc/dispatchNil/: .cvsignore 
	                                        dispatchNil-alistError.chpl 
	                                        dispatchNil-alistError.future 
	                                        dispatchNil-alistError.good 
	                                        dispatchNil.chpl 
	                                        dispatchNil.future 
	                                        dispatchNil.good 

---------------------------------------------------------------------------

04/03/07 16:13:56 -- deitz

Log message:
	Fixed a bug in which copy propagation propagated the nil value to the
	dynamic dispatch GETCID primitive resulting in invalid C.  The GETCID
	primitive now generates 0 when its first argument is nil.

Modified files:
	chapel/compiler/AST/: expr.cpp 
Removed files:
	chapel/test/classes/bradc/dispatchNil/: dispatchNil.future 

---------------------------------------------------------------------------

04/03/07 17:14:23 -- deitz

Log message:
	Fixed a bug in the code to clone functions with formal arguments that
	are parameterized primitive types (e.g., int(?k)) in which an
	assumption was made that a type expression call had at least one
	argument.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
Removed files:
	chapel/test/classes/bradc/dispatchNil/: 
	                                        dispatchNil-alistError.future 

---------------------------------------------------------------------------

04/03/07 17:40:20 -- bradc

Log message:
	This check-in has four nice changes, very orthogonal:
	
	1a) It introduces a BaseArithmeticDomain class between
	    the BaseDomain class and the SingleLocaleArithmetic
	    and SingleLocaleSparse domain classes.  Currently
	    it is not used much, but we expect it will be moreso
	    as time goes on.
	
	1b) It fixes one of the simplifying assumptions in my
	    sparse domain implementation in which I'd hard-coded
	    the set of rows to be -1..2000.  Now the set of
	    rows is taken from the parent domain.  So if you're
	    creating a sparse domain over a parent domain with
	    rows -5..5 the sparse domain will have those same
	    11 rows.
	
	1c) It adds a bbox() method to the arithmetic domain
	    hierarhcy which takes an integer and returns a
	    non-strided range defining the bounding box for
	    that dimension.  I don't like this name, interface,
	    etc., but found myself struggling a lot with
	    the "stridable" parameter with such a routine, so
	    found that bounding boxes could be interpreted
	    as never being strided to avoid the issue for now.
	    Will try to refine this in future versions,
	    probably by parameterizing the BaseArithmeticDomain
	    to be strided or not (which Steve predicts will
	    cause problems).
	
	2) Fixed an issue in the array._dom method which
	   builds a new domain wrapper for a pre-existing
	   domain so that it no longer would call the
	   buildEmptyDomain() method but would simply
	   wrap the existing domain guts in the default
	   constructor (rather than as a separate assignment
	   afterwards).
	
	3) Fixed a bug in which printing out an empty array
	   resulted in an out-of-bounds error in its write()
	   function.  Fixed this in a fairly dumb way by
	   checking the number of indices before printing
	   anything.  Restructuring the loop should also do
	   it and probably more efficiently, but I took the
	   shortcut to avoid the effort.  I/O is slow by nature
	   anyway.  Added a test of this.
	
	4) Fixed a minor bug in Sparse domains that showed up
	   when the correct number of rows was supported, in
	   which we didn't update quite enough of the rowStart
	   entries -- off by one.  Domain slicing would've
	   helped here.  :)

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleSparse.chpl 
Added files:
	chapel/test/arrays/bradc/io/: .cvsignore writeEmpty.chpl 
	                              writeEmpty.good 

---------------------------------------------------------------------------

04/04/07 09:33:58 -- deitz

Log message:
	Added initial support for a 'view' operator of arrays.  This supports
	the following idioms where A is an array:
	
	  var AA => A;             // AA is an alias of A
	  var AA => A[2..4, 2..4]; // AA is an alias of the slice of A
	
	Currently there is no way to reindex the alias of the array.  The view
	operator can only be used in a variable declaration context.
	
	Added Symbol::isUserAlias to mark such aliases in the compiler.
	Specialized handling of these variables in fix_def_expr to ensure that
	they are aliases.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: normalize.cpp 
Added files:
	chapel/test/arrays/deitz/: test_alias1.chpl test_alias1.good 
	                           test_alias2.chpl test_alias2.good 

---------------------------------------------------------------------------

04/04/07 09:47:59 -- deitz

Log message:
	Added two query tests I had in my directory.

Added files:
	chapel/test/types/type_variables/deitz/: test_query_field8.chpl 
	                                         test_query_field8.good 
	                                         test_query_field9.chpl 
	                                         test_query_field9.good 

---------------------------------------------------------------------------

04/04/07 09:49:45 -- deitz

Log message:
	Removed .future files for three working tests.

Removed files:
	chapel/test/classes/bradc/overloadMethods/: printType.future 
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp6.future 
	                                              test_iterator_temp8.future 

---------------------------------------------------------------------------

04/04/07 09:51:00 -- deitz

Log message:
	Added another test I had in my directory.

Added files:
	chapel/test/functions/deitz/iterators/temps/: 
	                                              test_iterator_temp9.chpl 
	                                              test_iterator_temp9.good 

---------------------------------------------------------------------------

04/04/07 13:38:54 -- deitz

Log message:
	Simplified the SingleLocaleArithmeticArray slice method to use tuple
	assignment.
	
	Made implicit rank change from an actual to a formal into a compiler
	error.  Added a test case.

Modified files:
	chapel/modules/standard/: SingleLocaleArithmetic.chpl 
Added files:
	chapel/test/arrays/deitz/: test_illegal_rank_change.chpl 
	                           test_illegal_rank_change.good 

---------------------------------------------------------------------------

04/04/07 15:51:00 -- bradc

Log message:
	Made a fix to the sparse array implementation --
	previously I was using a var this function, which
	meant that the IRV could be over-written if the
	user tried to write to an index not in the sparse
	index set.  Broke this into a this() and =this()
	function where the this() function returns the
	IRV and the =this() function calls halt().

Modified files:
	chapel/modules/standard/: SingleLocaleSparse.chpl 
Added files:
	chapel/test/sparse/bradc/: assignIRV.chpl assignIRV.good 

---------------------------------------------------------------------------

04/05/07 14:10:21 -- bradc

Log message:
	Added the first sparse version of CG which builds the
	sparse domain and array within the testing system's
	default timeout.  It does this by adding a new iterator
	to the cg-makea.chpl module that (a) creates the random
	indices adding them to a sparse domain to eliminate
	duplicates, (b) copies the indices out of the domain and
	into an array, (c) sorting the array, and (d) yielding
	the elements of the array.  By yielding the array
	elements in order, the insertion-sort-like step of
	adding random indices to a CRS storage structure is
	avoided, causing something that runs in time closer to
	linear time.
	
	Added a new standard module -- Sort -- which defines
	InsertionSort and QuickSort routines accepting a
	generic 1D array whose elements support < and >
	operators.
	
	Some minor changes to the Sparse domain to avoid an
	unnecessary range variable and to expose nnz to the
	user as a means of preallocating some the O(nnz)
	arrays and avoid relying on recursive doubling.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: SingleLocaleSparse.chpl 
	chapel/test/npb/cg/bradc/: cg-makea.chpl 
Added files:
	chapel/modules/standard/: Sort.chpl 
	chapel/test/npb/cg/bradc/: cg-makea1-sparse-sort.chpl 
	                           cg-makea1-sparse-sort.compopts 
	                           cg-makea1-sparse-sort.good 

---------------------------------------------------------------------------

04/05/07 14:18:34 -- bradc

Log message:
	Filing a bug in which a cobegin that contains function
	calls whose arguments are array slices results in a C
	compile-time error.

Modified files:
	chapel/test/parallel/cobegin/bradc/: .cvsignore 
Added files:
	chapel/test/parallel/cobegin/bradc/: arrayargs.chpl 
	                                     arrayargs.future 
	                                     arrayargs.good 

---------------------------------------------------------------------------

04/05/07 14:18:59 -- bradc

Log message:
	Added begin and cobegin to emacs Chapel mode.

Modified files:
	chapel/etc/emacs/22.0/: cc-langs.el 

---------------------------------------------------------------------------

04/06/07 14:00:14 -- deitz

Log message:
	This change fixes a bug with composing slicing and viewing.  Recall
	that slicing is accomplished by indexing into an array with a domain.
	Slicing results in a slection of a subset of the elements in the array
	but does not change the indices of any particular element.  Viewing is
	accomplished by passing an array to a function that expects an array
	over a different index set.  Viewing changes the mapping from indices
	to elements but results in an array with the same shape as the
	original array.  Eventually aliasing will be extended to allow for
	reindexing.
	
	Removed the scalar field orig from the arithmetic array and replaced
	it with a tuple field adj.  Basic indexing into an arithmetic array is
	thus accomplished using the following formula for each dimension:
	
	  (((index - off) * blk) / str) + adj
	
	Given an array with dimensional values for off, blk, str, and adj, and
	a reference to a domain given by L..H by S, then viewing the array
	over a new domain given by NL..NH by NS results in a new array
	descriptor given by
	
	  new off = NL
	  new blk = blk * S / str
	  new str = NS
	  new adj = adj
	
	and striding the array over a new domain given by NL..NH by NS results
	in a new array descriptor given by
	
	  new off = NL
	  new blk = blk
	  new str = str
	  new adj = adj + blk * (off - NL) / str
	
	Renamed origOff to factoredOffs as this optimization in the
	non-stridable case factors out the offsets.  It should also factor the
	adjustments in as well.
	
	Thanks is dues to Brad who helped in determining the above formulae.

Modified files:
	chapel/modules/standard/: SingleLocaleArithmetic.chpl 
Added files:
	chapel/test/arrays/deitz/: test_view_slice.chpl 
	                           test_view_slice.good 

---------------------------------------------------------------------------

04/06/07 14:30:39 -- deitz

Log message:
	Renamed the method 'view' to 'reindex' since this more clearly
	suggests the meaning of this method.

Modified files:
	chapel/compiler/passes/: normalize.cpp 
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleArithmetic.chpl 

---------------------------------------------------------------------------

04/06/07 14:42:04 -- diten

Log message:
	Add an initial version of the NAS integer sort benchmark.  It uses a slightly
	modified version of Brad's QuickSort routine.  The required size specified by
	the benchmark spec (2**23) is too large, so as well as the two classes
	specified by the spec, also add a third with the more managable 2**17 size.

Added files:
	chapel/test/npb/is/diten/: is.chpl is.good 

---------------------------------------------------------------------------

04/06/07 15:42:41 -- deitz

Log message:
	Added support for reindexing when creating aliases.  Simply put the
	domain that you want to index the alias through between the : and the
	=> operators.  For example, use
	
	  var AA : [1..5, 1..5] => A[4..9, 4..9];
	
	to reindex the slice of A with the new indices starting at 1.
	
	Added two test cases.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/arrays/deitz/: test_alias3.chpl test_alias3.good 
	                           test_alias4.chpl test_alias4.good 

---------------------------------------------------------------------------

04/09/07 11:33:00 -- bradc

Log message:
	This check-in gets the CG benchmark working in a
	reasonable amount of time (~20 seconds when compiled
	with --ccflags=-O3) for the first time.  It still is
	not asymptotically correct because it still uses a
	random access to get at the array, which requires a
	binary search over the elements within a row.
	
	The changes involved include:
	
	* adding a standard Search module to support things
	  like linear and binary searches on 1D arrays.  The
	  current interface is a bit crufty -- I wanted to
	  be able to pass in an array slice to be searched
	  like A[lo..hi], however, this resulted in us running
	  out of memory building array slice wrappers given
	  the number of binary searches required for CG.  GC
	  may be an answer to this, but it would also be great
	  if we could optimize the deallocation of these short-
	  lived wrappers to avoid fragmenting the heap too much.
	
	* added a very rough draft "per-dimension" iterator to
	  the array wraper class in order to support sparse
	  iteration, which is a function of the dimension being
	  indexed.  The current interface is somewhat hard-coded
	  for either 2D, or possible for assuming that dimensions
	  are traversed in order, but I'm not sure we want to make
	  either assumption.  On the other hand, I still don't
	  have great insight into how to do a per-dimension
	  iterator interface well.
	
	* implemented the multidimensional iterator for the sparse
	  domain for the first time, though this isn't actually
	  used in the CG benchmark.  I did add/modify a few more
	  tests to use it.  It is far more awkward to write as the
	  4 iterator methods than it would be to write as an
	  iterator -- incentive to switch over, if we're in a position
	  to do so.  I sketched out the way we'd like to write the
	  iterator in a comment.
	
	* Updated CG sparse tests to run full S problem size,
	  and to compile with the --ccflags=-O3 flag.

Modified files:
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/modules/standard/: ChapelArray.chpl 
	                          SingleLocaleSparse.chpl 
	chapel/test/npb/cg/bradc/: cg-makea.chpl 
	                           cg-makea1-sparse-sort.chpl 
	                           cg-makea1-sparse-sort.compopts 
	                           cg-sparse.chpl cg-sparse.compopts 
	                           cg-sparse.execopts cg-sparse.good 
Added files:
	chapel/modules/standard/: Search.chpl 
	chapel/test/npb/cg/bradc/: cg-sparse-dimiter.chpl 
	                           cg-sparse-dimiter.compopts 
	                           cg-sparse-dimiter.execopts 
	                           cg-sparse-dimiter.good 
	chapel/test/sparse/bradc/: sparseArray5.chpl sparseArray5.good 

---------------------------------------------------------------------------

04/09/07 11:52:56 -- deitz

Log message:
	Added an internal error check to inlining to ensure that an argument
	symbol is not returned by a function being inlined.  Without this
	check, an error that is difficult to track down shows up later.
	
	Fixed the single forall iterator getNextCursor function to return a
	temporary variable rather than an argument symbol.
	
	Added (commented out) inline pragmas to the single forall iterator
	methods.

Modified files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/compiler/passes/: inlineFunctions.cpp 

---------------------------------------------------------------------------

04/09/07 11:58:53 -- bradc

Log message:
	Adding a --ccflags=-O3 flag to the ft-serial.chpl
	test in hopes of avoiding the timeout problem on
	SunOS' nightly regressions (seemed to get us under
	the timeout when running manually now).

Added files:
	chapel/test/npb/ft/: ft-serial.compopts 

---------------------------------------------------------------------------

04/09/07 13:09:23 -- diten

Log message:
	Add a test of the QuickSort function in the Sort module.  For some input arrays
	it is getting into an "infinite" loop.

Added files:
	chapel/test/modules/diten/: quickSort.chpl quickSort.good 

---------------------------------------------------------------------------

04/09/07 14:38:46 -- diten

Log message:
	Make the seed to the RandomStream class in my QuickSort test be set to
	something that causes the "infinite" loop failure instead of the current time.

Modified files:
	chapel/test/modules/diten/: quickSort.chpl 

---------------------------------------------------------------------------

04/09/07 16:06:36 -- bradc

Log message:
	Fixed the bug in Quicksort that David identified -- the
	partitioning step entered an infinite loop when the low,
	high, and pivot values were all equal.  While a one-line
	fix sufficed to solve the problem, I took this opportunity
	to add median-of-three pivoting, and make my approach more
	identical to the code in my textbook (I'd avoided it due
	to the lack of a pre-increment operator last time around,
	but this bug made it clear how and why to address that).
	
	Added a test that sorts an array of all-equal values to
	flag this issue even more directly than David's test does.

Modified files:
	chapel/modules/standard/: Sort.chpl 
Added files:
	chapel/test/modules/standard/Sort/bradc/: .cvsignore 
	                                          quickSort-constArr.chpl 
	                                          quickSort-constArr.good 

---------------------------------------------------------------------------

04/09/07 16:25:51 -- bradc

Log message:
	A pair of config var tests that I ran into while
	debugging David's quicksort tests.  One shows
	that config vars of size int(64) get squeezed
	through a 32-bit int at some point, losing sigfigs
	(maybe we knew this; I forgot).  The other asks
	for range-checking of config var values since it
	seems like a reasonable place to eat that overhead
	and avoid confusion (would've saved me some time
	anyway).

Added files:
	chapel/test/execflags/bradc/: int32configBad.chpl 
	                              int32configBad.execopts 
	                              int32configBad.future 
	                              int32configBad.good 
	                              int64config.chpl 
	                              int64config.execopts 
	                              int64config.future 
	                              int64config.good 

---------------------------------------------------------------------------

04/10/07 08:56:35 -- diten

Log message:
	Add an atoi64 function to the runtime so 64 bit config vars can be correctly
	read in. Make the _string_to_int64 and _string_to_uint64 macros used for string
	to 64 bit integer casts be calls to atoi64 instead of atoi.
	
	C standard libraries don't define any 64 bit atoi type functions, so if we want
	to do this (and I think we do), we have to define our own.
	
	This fixes Brad's int64config.chpl test, so remove that .future.  The atoi
	function doesn't do error checking, so my atoi64 doesn't either.  This means
	int32configBad.chpl still incorrectly accepts out of range values.

Modified files:
	chapel/runtime/include/: chpltypes.h chplcast.h 
	chapel/runtime/src/: chpltypes.c 

---------------------------------------------------------------------------

04/10/07 09:00:36 -- diten

Log message:
	Actually remove int64config.future mentioned in my last commit.

Removed files:
	chapel/test/execflags/bradc/: int64config.future 

---------------------------------------------------------------------------

04/10/07 09:56:17 -- deitz

Log message:
	Removed code to capture the "append" function of sequences which used
	to be used to insert temporary sequences.
	
	Removed code to improve the performance of freeing sequence nodes
	since we no longer have sequence nodes.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/passes/: functionResolution.cpp 

---------------------------------------------------------------------------

04/10/07 11:10:03 -- deitz

Log message:
	Removed support for # and #= from the compiler.  Replaced uses with a
	new function _seqcat and _append_in_place.  To remove sequences, I
	will probably leave an internal _seq record for testing and phase-out
	purposes.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/modules/standard/: ChapelArray.chpl ChapelSeq.chpl 
	                          ChapelTuple.chpl 
	                          SingleLocaleAssociative.chpl 
	chapel/test/classes/deitz/: test_inherit1.chpl 
	chapel/test/classes/waynew/: dyndis2.chpl 
	chapel/test/spec/marybeth/: seq.chpl 
	chapel/test/trivial/deitz/: test_assignop.chpl 
	                            test_assignop.good 
	chapel/test/trivial/deitz/demo/: sample2.chpl 
	chapel/test/types/seq/bradc/: emptySeq2a.chpl hashEquals.chpl 
	                              returnSeq2.chpl 
	chapel/test/types/seq/deitz/: test_seq4.chpl test_seq5.chpl 
	                              test_seq6.chpl test_seq7.chpl 
	                              test_seq_class2.chpl 
	                              test_seq_class3.chpl 
	                              test_seq_class4.chpl 
	                              test_seq_record2.chpl 

---------------------------------------------------------------------------

04/10/07 16:17:45 -- deitz

Log message:
	Removed support for sequence literals.  To build an internal sequence
	class, use the _seq function with variable number of arguments.  This
	will eventually be changed to a list class in a library that we test.
	
	Added support for assigning tuples to arrays.  This replaces the
	sequence literal syntax.  The rank of the tuple must match the rank of
	the array.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/modules/standard/: ChapelArray.chpl ChapelSeq.chpl 
	                          ChapelTuple.chpl 
	chapel/test/arrays/bradc/workarounds/: arrayOfSpsArray.chpl 
	                                       arrayOfSpsArray2.chpl 
	chapel/test/arrays/deitz/: jacobi5.chpl test_array_cast.chpl 
	                           test_no_elt_type.chpl 
	                           test_tuple_of_array.chpl 
	chapel/test/arrays/deitz/part1/: test_array_arg3.chpl 
	chapel/test/arrays/deitz/part2/: test_array_init_seq.chpl 
	                                 test_array_init_with_seq.chpl 
	chapel/test/arrays/deitz/promotion/: test_scalar_promote1.chpl 
	                                     test_scalar_promote10.chpl 
	                                     test_scalar_promote3.chpl 
	                                     test_scalar_promote4.chpl 
	                                     test_scalar_promote5.chpl 
	                                     test_scalar_promote6.chpl 
	                                     test_scalar_promote7.chpl 
	                                     test_scalar_promote8.chpl 
	chapel/test/classes/bradc/records/: assignRecord2.chpl 
	chapel/test/classes/deitz/dispatch/: test_dd5.chpl 
	chapel/test/functions/deitz/: test_promotion_generic.chpl 
	chapel/test/memory/deitz/: test_seq_leak.chpl 
	chapel/test/no_infer/: test_seq1.chpl 
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/cg/bradc/: cg-arithDomArr.chpl cg-commented.chpl 
	                           cg-dense.chpl cg-enumDomArr.chpl 
	                           cg-ideal.chpl 
	                           cg-makea1-small-sparse-countInds.chpl 
	                           cg-makea1-small-sparse.chpl 
	                           cg-makea1-small.chpl 
	                           cg-makea1-sparse-sort.chpl 
	                           cg-makea1-sparse.chpl cg-makea1.chpl 
	                           cg-makea2-small-sparse.chpl 
	                           cg-makea2-sparse.chpl cg-makea2.chpl 
	                           cg-makea3.chpl cg-sparse-dimiter.chpl 
	                           cg-sparse.chpl cg.chpl 
	chapel/test/npb/ft/: ft-serial.chpl 
	chapel/test/npb/is/diten/: is.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
	                     mg-compilable2.chpl 
	chapel/test/ssca/ssca2/: ssca2.blc-hack.chpl ssca2.origpar.chpl 
	chapel/test/studies/jacobi/bradc/: jacobi-play-brad.chpl 
	                                   jacobi-play2-brad.chpl 
	chapel/test/studies/jacobi/deitz/: jacobi2.chpl 
	chapel/test/studies/jacobi/jplevyak/: jacobi-jp-broken-1.chpl 
	                                      jacobi-jp-broken-2.chpl 
	                                      jacobi-jp-notes.chpl 
	                                      jacobi-jp-working.chpl 
	                                      jacobi-jp1.chpl 
	                                      jacobi-jp2.chpl 
	                                      jacobi-jp3.chpl 
	                                      jacobi-jp4.chpl 
	chapel/test/trivial/deitz/demo/: sample2.chpl 
	chapel/test/trivial/mjoyner/seq/: seq_index1.chpl 
	                                  seq_index2.chpl 
	                                  seq_reverse.chpl 
	chapel/test/types/enum/diten/: enumDom.chpl 
	chapel/test/types/seq/bradc/: hashEquals.chpl length.chpl 
	                              length.modify.chpl promoteSeq.chpl 
	                              recordSeq.chpl returnSeq.chpl 
	                              returnSeq2.chpl 
	chapel/test/types/seq/deitz/: test_reduce1.chpl test_seq1.chpl 
	                              test_seq1a.chpl test_seq1b.chpl 
	                              test_seq1c.chpl test_seq1d.chpl 
	                              test_seq2.chpl test_seq3.chpl 
	                              test_seq4.chpl test_seq5.chpl 
	                              test_seq6.chpl test_seq7.chpl 
	                              test_seq8.chpl test_seq8b.chpl 
	                              test_seq9.chpl test_seq_arg.chpl 
	                              test_seq_class1.chpl 
	                              test_seq_class2.chpl 
	                              test_seq_copy.chpl 
	                              test_seq_htuple1.chpl 
	                              test_seq_htuple2.chpl 
	                              test_seq_index1.chpl 
	                              test_seq_index2.chpl 
	                              test_seq_index3.chpl 
	                              test_seq_of_seq.chpl 
	                              test_seq_of_seq2.chpl 
	                              test_seq_record1.chpl 
	                              test_seq_reverse1.chpl 
	                              test_seq_reverseindex1.chpl 
	                              test_seq_tuple.chpl 
	                              test_seq_tuple2.chpl 
	chapel/test/types/seq/deitz/tuples/: seq2tuple1.chpl 
	chapel/test/types/tuple/deitz/: test_iterate.chpl 
	chapel/test/types/tuple/shannon/: sequenceInTuple.chpl 
	chapel/test/types/type_variables/deitz/part5/: where-3.chpl 
	chapel/test/types/type_variables/deitz/part6/: test_myseq2.chpl 
Removed files:
	chapel/test/types/seq/bradc/: emptySeq.chpl emptySeq.good 

---------------------------------------------------------------------------

04/10/07 16:41:55 -- bradc

Log message:
	Fixed an issue in the Random number module in which I'd
	initialized the random stream in an off-by-one manner,
	causing results of NPB benchmarks to differ from the
	reference versions.
	
	Updated output of tests that reflect the values generated
	using Random streams.

Modified files:
	chapel/modules/standard/: Random.chpl 
	chapel/test/npb/cg/bradc/: cg-makea.chpl 
	chapel/test/modules/standard/Random/bradc/: 
	                                            test-Random-evenseed.good 
	                                            testGetNth.good 
	chapel/test/modules/standard/Random/marybeth/: test-Random.good 
	chapel/test/release/examples/hpcc06/: fft-mta.good fft.good 
	                                      stream-nopromote.good 
	                                      stream.good 
	chapel/test/studies/hpcc/FFT/: fft-candidate-2d.good 
	                               fft-hpcc06-mta.good 
	                               fft-hpcc06.good 
	chapel/test/studies/hpcc/FFT/bradc/: fft.good 
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.good 
	                                        fft.good 
	chapel/test/studies/hpcc/STREAMS/: stream-hpcc06.good 
	chapel/test/studies/hpcc/STREAMS/bradc/: stream-nopromote.good 
	                                         stream-slice.good 

---------------------------------------------------------------------------

04/10/07 16:44:16 -- bradc

Log message:
	Fixing up CG benchmarks so that they are more portable
	across platforms w.r.t. floating point precision.  In
	particular, added print of final zeta value as a checksum,
	and a config var to control the printing of error values.
	This makes the output somewhat more conformant to the
	reference version of the benchmark.
	
	Removed cg-sparse-dimiter.chpl which had become
	redundant.
	
	In naming my variable printError, found it clashed with
	an internal-only symbol in the runtime, so changed the
	printError and printInternalError functions to include
	an initial underscore.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/modules/standard/: ChapelBase.chpl 
	chapel/runtime/include/: error.h 
	chapel/runtime/src/: arg.c chplio.c chplmem.c chplsys.c 
	                     chplthreads.c config.c error.c gdb.c 
	chapel/test/npb/cg/bradc/: cg-sparse.chpl cg-sparse.execopts 
	                           cg-sparse.good 
Removed files:
	chapel/test/npb/cg/bradc/: cg-sparse-dimiter.chpl 
	                           cg-sparse-dimiter.compopts 
	                           cg-sparse-dimiter.execopts 
	                           cg-sparse-dimiter.good 

---------------------------------------------------------------------------

04/10/07 16:52:09 -- deitz

Log message:
	Removed support for casting sequences to tuples and tuples to sequences.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
	chapel/test/types/type_variables/deitz/part6/: test_myseq2.chpl 
Removed files:
	chapel/test/types/seq/deitz/tuples/: seq2tuple1.chpl 
	                                     seq2tuple1.good 
	                                     tuple2seq1.chpl 
	                                     tuple2seq1.good 

---------------------------------------------------------------------------

04/10/07 16:59:26 -- bradc

Log message:
	Removed _seq() exprs in my tests where a tuple
	expression suffices.

Modified files:
	chapel/test/npb/cg/bradc/: cg-arithDomArr.chpl cg-commented.chpl 
	                           cg-dense.chpl cg-enumDomArr.chpl 
	                           cg-ideal.chpl 
	                           cg-makea1-small-sparse-countInds.chpl 
	                           cg-makea1-small-sparse.chpl 
	                           cg-makea1-small.chpl 
	                           cg-makea1-sparse-sort.chpl 
	                           cg-makea1-sparse.chpl cg-makea1.chpl 
	                           cg-makea2-small-sparse.chpl 
	                           cg-makea2-sparse.chpl cg-makea2.chpl 
	                           cg-makea3.chpl cg-sparse.chpl cg.chpl 
	chapel/test/studies/jacobi/bradc/: jacobi-play-brad.chpl 
	                                   jacobi-play2-brad.chpl 

---------------------------------------------------------------------------

04/10/07 17:53:17 -- marybeth

Log message:
	I changed the two test_forbegin tests so that each thread updates
	a counter after assigning to a and b arrays.  Once that counter gets
	to three, a and b are output.

Modified files:
	chapel/test/parallel/begin/marybeth/: test_forbegin.chpl 
	                                      test_forbegin2.chpl 

---------------------------------------------------------------------------

04/11/07 09:49:45 -- deitz

Log message:
	Removed assorted minor sequence references in compiler.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp iterator.cpp 
	                      primitive.cpp 
	chapel/compiler/include/: build.h iterator.h primitive.h 
	                          runtime.h 
	chapel/compiler/main/: runtime.cpp 
	chapel/compiler/passes/: filesToAST.cpp 

---------------------------------------------------------------------------

04/11/07 10:11:39 -- marybeth

Log message:
	Filing a future for this type of assignment statement:
	
	 x += 1;
	
	where x is a sync var.  This gets a compiler error, complaining
	that there is an unresolved call to readFE.

Added files:
	chapel/test/parallel/begin/marybeth/: test_forbegin3.chpl 
	                                      test_forbegin3.future 
	                                      test_forbegin3.good 

---------------------------------------------------------------------------

04/11/07 10:51:41 -- diten

Log message:
	Change calls to atoi for string to integer casts into calls to strtoull. This
	way, there is enough precision to handle 64 bit casts in most cases.
	
	Remove the atoi64 function added previously to handle this.

Modified files:
	chapel/runtime/include/: chplcast.h chpltypes.h 
	chapel/runtime/src/: chpltypes.c 

---------------------------------------------------------------------------

04/11/07 11:57:38 -- diten

Log message:
	Write the rank function in a way more closely resembling the C reference code,
	but without buckets.  Add the partial verification step and the rest of the
	problem classes that were missing.  Rename is.chpl and is.good to
	is_no_buckets.chpl and is_no_buckets.good.

Added files:
	chapel/test/npb/is/diten/: is_no_buckets.chpl is_no_buckets.good 
Removed files:
	chapel/test/npb/is/diten/: is.chpl is.good 

---------------------------------------------------------------------------

04/12/07 11:06:09 -- deitz

Log message:
	Made .future test use += on syncs as intended.
	
	This is only an issue because += has alternative semantics on domains.

Modified files:
	chapel/test/parallel/begin/marybeth/: test_forbegin3.chpl 

---------------------------------------------------------------------------

04/12/07 14:31:12 -- deitz

Log message:
	Updated test to use tuple rather than sequence to initialize array.

Modified files:
	chapel/test/npb/is/diten/: is_no_buckets.chpl 

---------------------------------------------------------------------------

04/12/07 17:44:44 -- marybeth

Log message:
	Changed the output of fft2d and fft-test-even so that the error is
	not printed.  This will eliminate the future for fft2d and not cause
	problems passing these tests on multiple platforms where the error
	can vary.
	
	This is not a fix just so that these tests can pass.  After careful
	examination of these tests, I realized that maxerr was being
	computed by scaling the infinity norm of the difference between Z and z,
	and then multiplying it by 2^(51) (which has 16 digits).  Since maxerr is
	typically 10^(-2) on all platforms tested, that indicates that 18 digits of
	Z and z match.  That is more than you can expect with 64 bit floating
	point arithmetic.  You should see differences between architectures at
	this point.
	
	It is a config parameter whether or not to print the error.  I set
	this parameter to be false in the .execopts file for both tests.  Now,
	the tests do not print anything but a success or failure message, along
	with the size of the problem tested.

Modified files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft2d.chpl fft2d.good 
	                                        fft2d.execopts 
	                                        fft-test-even.chpl 
	                                        fft-test-even.good 
	                                        fft-test-even.execopts 
Removed files:
	chapel/test/studies/hpcc/FFT/marybeth/: fft2d.future 

---------------------------------------------------------------------------

04/13/07 09:51:37 -- deitz

Log message:
	Removed sequences.
	
	Made the enum_enumerate function return a tuple of the enumeration
	values rather than a sequence.
	
	Made a captured iterator turn into a 1D array rather than a sequence.
	Promotion is handled identically.
	
	Added a List module with a list record that implements a generic
	single linked list.
	
	Replaced sequences with lists in the implementation of arrays.
	
	Moved range to its own module.  Moved reductions to their own module.
	Removed the sequence module.
	
	Enabled parsing of primitives as types.
	
	Updated many tests, removed some.
	
	Futurized two tests to improve error messages.
	
	Removed tests for sequence indexing and reversing.
	
	Futurized test/spec/marybeth/seq for review.
	
	Up next, removing (/ and /) when printing out lists and iterators
	directly.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         filesToAST.cpp 
	chapel/modules/standard/: ChapelArray.chpl ChapelLocale.chpl 
	                          ChapelStandard.chpl ChapelTuple.chpl 
	                          SingleLocaleAssociative.chpl 
	                          SingleLocaleEnum.chpl 
	chapel/test/arrays/deitz/: jacobi5.chpl 
	chapel/test/arrays/deitz/promotion/: test_scalar_promote1.chpl 
	                                     test_scalar_promote10.chpl 
	                                     test_scalar_promote3.chpl 
	                                     test_scalar_promote4.chpl 
	                                     test_scalar_promote5.chpl 
	                                     test_scalar_promote6.chpl 
	                                     test_scalar_promote7.chpl 
	chapel/test/classes/bradc/records/: assignRecord2.chpl 
	chapel/test/classes/deitz/: test_inherit1.chpl 
	chapel/test/classes/deitz/dispatch/: test_dd5.chpl 
	chapel/test/classes/deitz/infer/: infer_field2.chpl 
	                                  infer_field2a.chpl 
	                                  infer_field2b.chpl 
	                                  infer_field2c.chpl 
	chapel/test/classes/waynew/: dyndis2.chpl 
	chapel/test/functions/deitz/: test_promotion_generic.chpl 
	chapel/test/memory/deitz/: test_seq_leak.chpl 
	chapel/test/no_infer/: test_seq1.chpl 
	chapel/test/npb/: mg.chpl 
	chapel/test/npb/ft/: ft-serial.chpl 
	chapel/test/npb/mg/: mg-annotated.chpl mg-compilable.chpl 
	                     mg-compilable2.chpl 
	chapel/test/spec/marybeth/: iterator.good seq.chpl sort.chpl 
	chapel/test/ssca/ssca2/: ssca2.blc-hack.chpl ssca2.blc.chpl 
	                         ssca2.blc.init.chpl 
	chapel/test/studies/jacobi/deitz/: jacobi2.chpl 
	chapel/test/studies/jacobi/jplevyak/: jacobi-jp-broken-1.chpl 
	                                      jacobi-jp-broken-2.chpl 
	                                      jacobi-jp-notes.chpl 
	                                      jacobi-jp-working.chpl 
	                                      jacobi-jp1.chpl 
	                                      jacobi-jp2.chpl 
	                                      jacobi-jp3.chpl 
	                                      jacobi-jp4.chpl 
	chapel/test/trivial/deitz/demo/: sample2.chpl 
	chapel/test/types/enum/diten/: enumDom.chpl 
	chapel/test/types/seq/bradc/: emptySeq2.chpl emptySeq2a.chpl 
	                              emptySeq3.chpl hashEquals.chpl 
	                              length.chpl length.modify.chpl 
	                              recordSeq.chpl returnSeq.chpl 
	                              returnSeq2.chpl returnSeq2.good 
	chapel/test/types/seq/deitz/: test_reduce1.chpl test_seq1.chpl 
	                              test_seq1a.chpl test_seq1b.chpl 
	                              test_seq1c.chpl test_seq1d.chpl 
	                              test_seq2.chpl test_seq3.chpl 
	                              test_seq4.chpl test_seq4.good 
	                              test_seq5.chpl test_seq6.chpl 
	                              test_seq7.chpl test_seq8.chpl 
	                              test_seq8b.chpl test_seq9.chpl 
	                              test_seq_arg.chpl 
	                              test_seq_class1.chpl 
	                              test_seq_class2.chpl 
	                              test_seq_class3.chpl 
	                              test_seq_class4.chpl 
	                              test_seq_htuple1.chpl 
	                              test_seq_htuple2.chpl 
	                              test_seq_of_seq.chpl 
	                              test_seq_of_seq2.chpl 
	                              test_seq_record1.chpl 
	                              test_seq_record2.chpl 
	                              test_seq_record2.good 
	                              test_seq_return1.chpl 
	                              test_seq_tuple.chpl 
	                              test_seq_tuple2.chpl 
	chapel/test/types/tuple/deitz/: test_iterate.chpl 
	chapel/test/types/tuple/shannon/: sequenceInTuple.chpl 
Added files:
	chapel/modules/standard/: ChapelRange.chpl ChapelReduce.chpl 
	                          List.chpl 
	chapel/test/spec/marybeth/: seq.future 
	chapel/test/types/seq/bradc/: emptySeq3.future 
	                              length.modify.future 
Removed files:
	chapel/modules/standard/: ChapelSeq.chpl 
	chapel/test/arrays/deitz/promotion/: test_scalar_promote8.chpl 
	                                     test_scalar_promote8.good 
	chapel/test/trivial/mjoyner/seq/: seq_index1.chpl 
	                                  seq_index1.good 
	                                  seq_index2.chpl 
	                                  seq_index2.good 
	                                  seq_reverse.chpl 
	                                  seq_reverse.good 
	chapel/test/types/seq/bradc/: promoteSeq.chpl promoteSeq.good 
	chapel/test/types/seq/deitz/: test_seq_copy.chpl 
	                              test_seq_copy.good 
	                              test_seq_index1.chpl 
	                              test_seq_index1.good 
	                              test_seq_index2.chpl 
	                              test_seq_index2.good 
	                              test_seq_index3.chpl 
	                              test_seq_index3.good 
	                              test_seq_reverse1.chpl 
	                              test_seq_reverse1.good 
	                              test_seq_reverseindex1.chpl 
	                              test_seq_reverseindex1.good 
	chapel/test/types/type_variables/deitz/part5/: where-3.chpl 
	                                               where-3.good 

---------------------------------------------------------------------------

04/13/07 10:52:55 -- deitz

Log message:
	Removed (/ and /) when printing out lists and iterators directly.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl List.chpl 
	chapel/test/arrays/deitz/: array_forall_expr.good 
	chapel/test/arrays/deitz/domains/: test_domain2.good 
	                                   test_domain3.good 
	chapel/test/arrays/deitz/promotion/: test_scalar_promote3.good 
	                                     test_scalar_promote4.good 
	                                     test_scalar_promote5.good 
	                                     test_scalar_promote6.good 
	                                     test_scalar_promote7.good 
	                                     test_scalar_promote9.good 
	chapel/test/arrays/marybeth/: CMO_array.good 
	chapel/test/classes/bradc/records/: assignRecord2.good 
	chapel/test/classes/deitz/: test_inherit1.good 
	chapel/test/classes/deitz/infer/: infer_field2.good 
	                                  infer_field2a.good 
	                                  infer_field2b.good 
	                                  infer_field2c.good 
	chapel/test/domains/deitz/: test_domain_promote2.good 
	chapel/test/functions/deitz/: test_forallexpr1.good 
	                              test_forallexpr2.good 
	                              test_iterator1.good 
	                              test_promotion_generic.good 
	chapel/test/functions/deitz/iterators/: 
	                                        test_instantiate_iterator1.good 
	                                        test_instantiate_iterator2.good 
	                                        test_instantiate_iterator2a.good 
	                                        test_instantiate_iterator3.good 
	                                        test_instantiate_iterator3a.good 
	                                        test_iterator_side_effect3.good 
	chapel/test/functions/waynew/: iterator6.good iterator7.good 
	                               iterator8.good 
	chapel/test/reductions/deitz/: test_scan1.good 
	chapel/test/spec/marybeth/: sort.good 
	chapel/test/trivial/deitz/: test_predicate.good 
	chapel/test/trivial/deitz/demo/: sample2.good 
	chapel/test/types/seq/bradc/: emptySeq2.good emptySeq2a.good 
	                              hashEquals.good length.good 
	                              recordSeq.good returnSeq.good 
	                              returnSeq2.good 
	chapel/test/types/seq/deitz/: test_aseq4.good 
	                              test_promote_aseq.good 
	                              test_reduce1.good test_seq1.good 
	                              test_seq1a.good test_seq1b.good 
	                              test_seq1c.good test_seq1d.good 
	                              test_seq2.good test_seq3.good 
	                              test_seq4.good test_seq5.good 
	                              test_seq6.good test_seq7.good 
	                              test_seq8.good test_seq8b.good 
	                              test_seq9.good test_seq_arg.good 
	                              test_seq_class1.good 
	                              test_seq_class2.good 
	                              test_seq_class3.good 
	                              test_seq_class4.good 
	                              test_seq_htuple1.good 
	                              test_seq_htuple2.good 
	                              test_seq_of_seq.good 
	                              test_seq_of_seq2.good 
	                              test_seq_record1.good 
	                              test_seq_record2.good 
	                              test_seq_return1.good 
	                              test_seq_tuple.good 
	                              test_seq_tuple2.good 
	                              test_seq_tuple3.good 
	chapel/test/types/tuple/shannon/: sequenceInTuple.good 

---------------------------------------------------------------------------

04/13/07 11:51:00 -- deitz

Log message:
	Changed test that used old-style comments and removed .future.
	
	Updated two .futures as error message futures, not semantic futures.

Modified files:
	chapel/test/distributions/bradc/foundations/: blockdist1.chpl 
	chapel/test/functions/bradc/setterFns/: setterReturns.future 
	                                        setterReturns2.future 
Removed files:
	chapel/test/distributions/bradc/foundations/: blockdist1.future 

---------------------------------------------------------------------------

04/13/07 12:01:19 -- deitz

Log message:
	Updated -- comments to //.

Modified files:
	chapel/test/Share/: ambiguousclass.chpl domain-3.chpl 
	                    module-1.chpl module-2-error.chpl 
	chapel/test/compflags/bradc/onebadfile/: badfile.chpl 
	chapel/test/flowanalysis/newast/: enumarray.chpl 
	chapel/test/ssca/ssca2/: ssca2.blc-hack.chpl ssca2.blc.chpl 
	                         ssca2.blc.init.chpl ssca2.chpl 
	                         ssca2.orig.chpl ssca2.origpar.chpl 
	                         ssca2.parses.chpl 
	                         ssca2.typedarrays.chpl 
	chapel/test/studies/hpcc/RA/bradc/: ra-bradc-old1.chpl 
	                                    ra-bradc-old2.chpl 
	chapel/test/studies/jacobi/deitz/: jacobi.chpl 

---------------------------------------------------------------------------

04/13/07 12:03:39 -- diten

Log message:
	Make a few minor spec typo fixes and syntax diagram corrections.

Modified files:
	chapel/spec/: Variables.tex Types.tex 

---------------------------------------------------------------------------

04/13/07 12:05:59 -- deitz

Log message:
	Filed Aniruddha Shet bug as future.

Added files:
	chapel/test/arrays/deitz/: test_special_init_bug.chpl 
	                           test_special_init_bug.future 
	                           test_special_init_bug.good 

---------------------------------------------------------------------------

04/13/07 14:06:53 -- diten

Log message:
	Realized that I was using forall loops in places that shouldn't be executed in
	parallel.  Changed them to regular for loops.  Also, inserted an atomic
	statement in a forall loop where a value is decremented then used as an array
	index.

Modified files:
	chapel/test/npb/is/diten/: is_no_buckets.chpl 

---------------------------------------------------------------------------

04/13/07 14:47:05 -- marybeth

Log message:
	Added the openissue environment in spec.tex.
	
	Added a NOTES file that documents the five sections within the
	spec and their intended uses:
	
	  example
	  status
	  note
	  rationale
	  openissue
	
	The NOTES file also gives some guidelines for reviewing and
	updating the spec.  These guidelines are the summary of a
	discussion from a spec review meeting earlier this year.

Modified files:
	chapel/spec/: spec.tex 
Added files:
	chapel/spec/: NOTES 

---------------------------------------------------------------------------

04/13/07 15:04:33 -- diten

Log message:
	It was suggested that I use a scan to do the addition of the ranks array
	elements.  This does exactly what I needed, so use a scan.

Modified files:
	chapel/test/npb/is/diten/: is_no_buckets.chpl 

---------------------------------------------------------------------------

04/13/07 15:19:39 -- deitz

Log message:
	Updated .good I forgot to change with list (seq) output change.

Modified files:
	chapel/test/classes/deitz/dispatch/: test_dd5.good 

---------------------------------------------------------------------------

04/13/07 15:35:53 -- deitz

Log message:
	Fixed a bug in iterators in which the iterator class would not be
	updated if a field of a record was changed possibly via a method.
	
	This change simplifies the logic in building iterators by storing back
	all fields into the iterator class regardless of whether the field was
	changed or not.  This fix devastates performance resulting in a
	slowdown of 48% on RA at size 2**20.  Improvement is possible, but
	correctness trumps performance.
	
	Added a test case to guard this bug.

Modified files:
	chapel/compiler/AST/: iterator.cpp 
Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_tuple_in_iterator.chpl 
	                                        test_tuple_in_iterator.good 

---------------------------------------------------------------------------

04/13/07 15:49:38 -- bradc

Log message:
	Adding single and sync to emacs coloring mode.

Modified files:
	chapel/etc/emacs/22.0/: cc-langs.el 

---------------------------------------------------------------------------

04/13/07 16:07:11 -- bradc

Log message:
	Fixed seg fault when using --print-code-size
	flag on SunOS.  Turned out to be a buffer
	overflow problem that valgrind on linux
	didn't catch, perhaps due to a different
	memory layout.  This fixes the bug that
	was causing the problem and puts in internal
	error checks to avoid something else causing
	a similar problem in this code in the future.

Modified files:
	chapel/compiler/parser/: countTokens.cpp 

---------------------------------------------------------------------------

04/13/07 17:04:58 -- bradc

Log message:
	Added top-level debug/optimization flags to the compiler:
	
	  -g : adds debugging support for generated C code
	  -O : adds optimization support for generated C code
	
	Currently these flags only affect the generated C code
	and do not affect other optimizations/transformations
	that the compiler performs.  We may want to do this
	eventually, but for now it seemed like it would be
	easier to keep them decoupled.
	
	In particular, -g causes --cg-cpp-lines to be flipped
	on by default (it can now be flipped back off via the
	--no-cg-cpp-lines flag) and compiles the generated C
	code using -g (or, more generally, whatever
	DEBUG_CFLAGS the platform-specific Makefile defines).
	
	Similarly, -O compiles the generated C code using -O
	(or, more generally, whatever OPT_CFLAGS the platform-
	specific Makefile defines.
	
	Previously, we were setting the --ccflags command to
	"-g" by default.  This is no longer the case, so if
	you liked that default, you should setenv CHPL_DEBUG
	to true.
	
	Also, changed our tests that currently used
	--ccflags=-O3 to simply use -O for simplicity.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/make/: Makefile.generic Makefile.gnu Makefile.mta 
	chapel/test/compflags/bradc/help/: userhelp.good 
	chapel/test/npb/cg/bradc/: cg-makea1-sparse-sort.compopts 
	                           cg-sparse.compopts 
	chapel/test/npb/ft/: ft-serial.compopts 
	chapel/test/performance/deitz/: COMPOPTS 

---------------------------------------------------------------------------

04/16/07 07:46:15 -- diten

Log message:
	Add a compiler flag --copy-collect that is false by default.  This way I can
	work on this without interrupting any other work.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

04/16/07 10:52:20 -- bradc

Log message:
	Removing future for working test (answer to
	question posed in future is now "arrays").

Removed files:
	chapel/test/trivial/bradc/: formatoutput.future 

---------------------------------------------------------------------------

04/16/07 11:02:56 -- bradc

Log message:
	Added a bunch of variable initializations (mostly setting
	pointers to NULL) that eliminate warnings when compiling
	with -O3.  Working toward better support for building
	the compiler -O3 for use by nightly regressions and
	optionally testing on the chap0x servers.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp symbol.cpp 
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         functionResolution.cpp scopeResolve.cpp 

---------------------------------------------------------------------------

04/16/07 13:29:32 -- deitz

Log message:
	Removed support for the structural interface methods getHeadCursor,
	getNextCursor, isValidCursor?, and getValue that allow a class or
	record to be iterated over.  Now use the default iterator named,
	currently though I'm not especially tied to it, "ault".  This is as in
	"def ault".
	
	Reworked all structural interface methods to be specified as an ault
	iterator.
	
	Added an internal _getIterator function that returns the ault iterator
	or an iterator class itself.
	
	Note that tuples and zipper iteration is implemented explicitly via
	the structural interface methods currently.
	
	Removed a test that makes use of this structural interface.  Updated
	another that illustrates our internal iterator transform.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/modules/standard/: ChapelArray.chpl ChapelBase.chpl 
	                          ChapelRange.chpl ChapelTuple.chpl 
	                          List.chpl SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 
	                          SingleLocaleEnum.chpl 
	                          SingleLocaleSparse.chpl 
	chapel/test/arrays/marybeth/: CMO_array.chpl 
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_transform.chpl 
Removed files:
	chapel/test/functions/waynew/: iterator1.chpl iterator1.good 

---------------------------------------------------------------------------

04/16/07 15:15:45 -- bradc

Log message:
	Changes to make the compiler and runtime compile
	and execute properly when compiled -O3.  These
	include:
	
	- making the gdbBreakHere functions non-static
	  so that they won't be optimized away during
	  compilation.
	
	- removing an unsafe pointer cast used for our
	  associative arrays that caused the code to
	  be incorrect when optimized -- replacing this
	  with a union fixed the problem
	
	- adding an initialization in the runtime.
	
	Also, made the Makefiles so that if CHPL_DEVELOPER
	isn't set, the compiler and runtime will be
	compiled -O3 by default.  My next step is to make
	sure that the nightly regression tests compile -O3
	to simulate the user experience.
	
	As a developer, you can also request that things
	be built -O3 by doing:
	
	   make OPTIMIZE=1
	
	on your Makefile command lines.  You may also want
	to disable debugging via:
	
	   make DEBUG=0 OPTIMIZE=1

Modified files:
	chapel/compiler/include/: misc.h 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/compiler/util/: misc.cpp 
	chapel/runtime/include/: chplexit.h 
	chapel/runtime/src/: Makefile chplexit.c chplmem.c chpltypes.c 

---------------------------------------------------------------------------

04/16/07 15:49:08 -- deitz

Log message:
	Removed references to the structural iterator interface in the spec.

Modified files:
	chapel/spec/: Iterators.tex 

---------------------------------------------------------------------------

04/16/07 16:01:26 -- bradc

Log message:
	Removed a C++-style declaration which followed a code segment.
	Also added a comment and named things a bit better in my rewrite
	of Wayne's real-to-int cast.

Modified files:
	chapel/runtime/src/: chpltypes.c 

---------------------------------------------------------------------------

04/16/07 16:03:22 -- bradc

Log message:
	Refactored Makefiles a bit...
	
	(1) made it so that setting DEBUG=0 on the command line
	    works as advertised in my last Makefile-oriented
	    check-in.  Turns out I had overlooked a mistake
	    somehow.
	
	(2) made it so that Makefile.base sets CFLAGS based on
	    OPTIMIZE and DEBUG rather than the platform-specific
	    Makefiles in order to avoid repeating logic
	    unnecessarily.

Modified files:
	chapel/make/: Makefile.base Makefile.generic Makefile.gnu 
	              Makefile.mta 

---------------------------------------------------------------------------

04/16/07 16:10:01 -- bradc

Log message:
	Changed nightly regression testing switch so that it would
	turn off DEBUG and turn on OPTIMIZE to try and simulate the
	user experience.  If called with CHPL_DEVELOPER set to true
	(which my cron jobs do), it will still use all the -Wall
	style flags to make sure problems don't leak into our code.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/16/07 17:01:14 -- deitz

Log message:
	Removed support for ? in identifiers.
	
	Updated spec, changing member? to member and true? to isTrue.

Modified files:
	chapel/compiler/AST/: build.cpp iterator.cpp 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: ChapelArray.chpl ChapelBase.chpl 
	                          ChapelTuple.chpl ChapelUtil.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleAssociative.chpl 
	                          SingleLocaleEnum.chpl 
	                          SingleLocaleSparse.chpl 
	chapel/spec/: Domains_and_Arrays.tex Expressions.tex 
	              Lexical_Structure.tex 
	chapel/test/arrays/marybeth/: CMO_array.chpl 
	chapel/test/domains/indefinite/waynew/: add_remove.chpl 
	                                        add_remove.good 
	                                        add_remove2.chpl 
	                                        add_remove2.good 
	                                        indef1.chpl indef1.good 
	                                        indef2.chpl indef2.good 
	                                        indef4.chpl indef4.good 
	                                        memory2.chpl 
	                                        tuple_index.chpl 
	                                        tuple_index2.chpl 
	chapel/test/execflags/shannon/configs/help/: configVar-Dash.chpl 
	                                             configVar-Dash.execopts 
	                                             configVar-Dash.good 
	                                             varNameEnumQM.chpl 
	                                             varNameEnumQM.execopts 
	                                             varNameEnumQM.good 
	                                             varNameQMark.chpl 
	                                             varNameQMark.execopts 
	                                             varNameQMark.good 
	chapel/test/functions/deitz/iterators/: 
	                                        test_iterator_transform.chpl 
	chapel/test/npb/cg/bradc/: cg-makea-commented.chpl cg-makea.chpl 
	                           cg.chpl 
	chapel/test/release/examples/: genericStack.chpl 
	                               genericStack2.chpl 
	chapel/test/trivial/diten/: linked_list.chpl 
Removed files:
	chapel/test/trivial/deitz/: test_function_question_mark.chpl 
	                            test_function_question_mark.good 

---------------------------------------------------------------------------

04/17/07 09:34:57 -- bradc

Log message:
	Fixed final uninitialized variable warning that comes
	up when compiling -O3 only with older versions of g++.
	Fixed the regression tests to use the module version as
	well (were previously using the /usr/bin version).

Modified files:
	chapel/compiler/ifa/: num.h 

---------------------------------------------------------------------------

04/17/07 11:02:08 -- marybeth

Log message:
	The test, nopivlublock-alias.chpl is a modification to
	the non-pivoting block LU so that array aliases are used.
	There are a few modifications that are needed to make this
	test compile and run:  A1D is a range and not a 1D domain,
	the output of the iterator, IterateByBlocks are two ranges
	rather than two subdomains and a temporary variable, slice,
	is needed to represent the indefinite subdomain CurrentBlockInds(k+1..).
	
	This test successfully uses the array alias operator.

Added files:
	chapel/test/studies/lu/marybeth/: nopivlublock-alias.chpl 
	                                  nopivlublock-alias.good 

---------------------------------------------------------------------------

04/17/07 13:26:41 -- marybeth

Log message:
	The test, pivlublock-alias.chpl is a modification to
	the pivoting block LU so that array aliases are used.
	There are a few modifications that are needed to make this
	test compile and run.  A1D is a range and not a 1D domain.
	The output of the iterator, IterateByBlocks are three ranges
	rather than three subdomains. Temporary variables, slice1 and slice2,
	are needed to represent indefinite subdomains.  Swap operators
	(or swap routines) are not implemented yet and the swapping of rows
	is coded inline with the algorithm.  The maxIndex reduction is not
	implemented yet either and is inlined in the code.
	
	This test successfully uses the array alias operator.

Added files:
	chapel/test/studies/lu/marybeth/: pivlublock-alias.chpl 
	                                  pivlublock-alias.good 

---------------------------------------------------------------------------

04/17/07 14:52:57 -- deitz

Log message:
	Added a flag
	
	  --no-single-loop-iterator-opt
	
	to disable the specialization of iterators that are composed of a
	single for loop.
	
	Added an inline pragma to the _pass function for iterator classes.

Modified files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/modules/standard/: ChapelArray.chpl 
	chapel/test/compflags/bradc/help/: userhelp.good 

---------------------------------------------------------------------------

04/17/07 14:55:23 -- bradc

Log message:
	Adding two C versions of the STREAM Triad benchmark.
	- stream-index.c uses C indexing into the 1D arrays.
	- stream-walker.c uses a pointer to wak through the
	  arrays
	
	IMPORTANT NOTE: Currently neither of the vectors are
	set up using the same random numbers as in the Chapel
	benchmark, they are merely initialized to constant
	values.  This should not affect performance, but
	should probably be done for consistency.  I knew I
	wasn't going to get that done in this sitting, so am
	checking in what I have.

Added files:
	chapel/test/studies/hpcc/STREAMS/performance/: .cvsignore 
	                                               stream-index.c 
	                                               stream-walker.c 

---------------------------------------------------------------------------

04/17/07 14:59:41 -- diten

Log message:
	Overload the binary operators +,-,/,*,**,%,&,|,^,>>,<<,<=,>=,<,>,!=,== and
	unary operators +,-,~,! over tuples.  This defines 3 versions of each overloaded
	binary operator:
	
	1. tuple1 op tuple2 where tuple1.size == tuple2.size
	This returns a possibly heterogenous tuple where the type of each element i is
	the type of "tuple1(i) op tuple2(i)" if this type is defined.
	
	!= and == are exceptions, these return a single truth value. It would probably
	be better to either define all of the comparison operators to return a single
	value, or define all to return tuples.
	
	2. tuple op scalar
	Applies tuple(i) op scalar for each element in the tuple.  Again, the result
	can be heterogenous.
	
	3. scalar op tuple
	Applies scalar op tuple(i) for each element.
	
	Add some tests checking these operators.
	
	There are 6 known new failures.

Modified files:
	chapel/modules/standard/: ChapelTuple.chpl 
Added files:
	chapel/test/types/tuple/diten/: onetuple.chpl onetuple.good 
	                                tupleArithOperators.chpl 
	                                tupleArithOperators.good 
	                                tupleBitOps.chpl 
	                                tupleBitOps.good 
	                                tupleComparisons.chpl 
	                                tupleComparisons.good 
	                                tupleNestedOps.chpl 
	                                tupleNestedOps.good 
	                                tuplePlusString.chpl 
	                                tuplePlusString.good 

---------------------------------------------------------------------------

04/17/07 16:15:29 -- bradc

Log message:
	Removed explicit overloads of tuple addition that were
	inserted as workarounds until it was supported in the
	implementation.

Modified files:
	chapel/test/arrays/bradc/workarounds/: 
	                                       arrayOfArray-workaround.chpl 
	                                       arrayOfArray-workaround2.chpl 
	                                       arrayOfSpsArray-workaround-generictype.chpl 
	                                       arrayOfSpsArray-workaround.chpl 
	chapel/test/studies/jacobi/bradc/: jacobi-simple-compiles.chpl 
	chapel/test/users/rbarrett/: diffuse2d-v3-blc.chpl 

---------------------------------------------------------------------------

04/17/07 16:52:24 -- bradc

Log message:
	Re-added the valgrind.suppressions file for the
	Chapel compiler since the OS upgrade seems to
	have caused getpwuid() to result in a valgrind
	error on every compile and IS has been slow to
	respond to my request for help on this issue.
	
	Re-enabled the use of this supressions file
	when using the test system.  This should allow
	us to distinguish between real and spurious
	valgrind errors the next time we run valgrind
	regressions.

Modified files:
	chapel/test/Bin/: sub_test 
Added files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

04/17/07 17:01:59 -- marybeth

Log message:
	Adding a test that fails to compile in which abs(A) is sent as a parameter
	to a function that takes an array for its input.  That function call
	does not get resolved, giving an error that an array type was expected
	by the function.
	
	It seems that abs(A) should be an array, so this is a bug.

Added files:
	chapel/test/arrays/marybeth/: test_arrayops.chpl 
	                              test_arrayops.future 
	                              test_arrayops.good 

---------------------------------------------------------------------------

04/18/07 07:34:05 -- diten

Log message:
	Add a future where a call to + on tuples is flagged as ambiguous when it should
	resolve to the + defined in the test.  Strangely, removing the line declaring
	the unused array of records "C" results in choosing the correct version of +.

Added files:
	chapel/test/types/tuple/diten/: tupleOverloadedPlus.chpl 
	                                tupleOverloadedPlus.future 
	                                tupleOverloadedPlus.good 

---------------------------------------------------------------------------

04/18/07 11:09:21 -- bradc

Log message:
	Added "register" to the list of reserved C words
	that need mangling.

Modified files:
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

04/18/07 11:12:01 -- bradc

Log message:
	Adding a bunch of tests to the users/shetag directory
	to track current conversations/requests with Aniruddha:
	
	* condarr.chpl : initializing an array with a conditional
	  expr
	* condarr-blc.chpl : my workaround, which works
	* shareIterator-blc*.chpl : some examples of writing an
	  iterator to be shared between two tasks
	  - : the first version I got working with the current
	      compiler
	  -release : a version attempted for the release compiler
	      which deadlocks for that compiler for reasons unknown.
	      Works with current compiler.
	  -register : uses a routine called register()
	* syncarr.chpl : using an array of sync vars

Modified files:
	chapel/test/users/shetag/: .cvsignore 
Added files:
	chapel/test/users/shetag/: condarr-blc2.chpl condarr-blc2.good 
	                           condarr.chpl condarr.future 
	                           condarr.good 
	                           shareIterator-blc-register.chpl 
	                           shareIterator-blc-register.execopts 
	                           shareIterator-blc-register.good 
	                           shareIterator-blc-release.chpl 
	                           shareIterator-blc-release.execopts 
	                           shareIterator-blc-release.good 
	                           shareIterator-blc.chpl 
	                           shareIterator-blc.execopts 
	                           shareIterator-blc.good syncarr.chpl 
	                           syncarr.future syncarr.good 

---------------------------------------------------------------------------

04/18/07 11:34:14 -- marybeth

Log message:
	Took out checks for degenerate range in nopivlublock-alias and
	pivlublock-alias tests.  These routines had been written with a
	test on the bounds of the range, slice, in one particular part of
	the routine.  It had been getting out of bounds errors without
	this test.  With an update to latest version of compiler, the errors
	I saw yesterday are no longer there.  The checks are no longer needed.

Modified files:
	chapel/test/studies/lu/marybeth/: pivlublock-alias.chpl 
	                                  nopivlublock-alias.chpl 

---------------------------------------------------------------------------

04/18/07 12:34:52 -- marybeth

Log message:
	Modification to pivlublock-alias.chpl to use maxloc reduce.

Modified files:
	chapel/test/studies/lu/marybeth/: pivlublock-alias.chpl 

---------------------------------------------------------------------------

04/18/07 13:16:56 -- bradc

Log message:
	Checking in some codes that Aniruddha wrote to start and
	do a producer/consumer computation of the Fock matrix.
	fock-1.chpl is a sequential version that works.
	fock-1-begin.chpl is a version that Aniruddha tried that
	  used a begin to spawn off a number of consumer tasks.
	  It turns out it has some races, so is not tested, but
	  captured here for reference.
	fock-1-begin-blc.chpl is my rewrite which eliminates the
	  races and gets the same result as the original code.

Added files:
	chapel/test/users/shetag/fock/: .cvsignore fock-1-begin-blc.chpl 
	                                fock-1-begin-blc.good 
	                                fock-1-begin.chpl 
	                                fock-1-begin.notest fock-1.chpl 
	                                fock-1.good 

---------------------------------------------------------------------------

04/18/07 13:22:55 -- bradc

Log message:
	Checking in a temporary version of sub_test to help me
	determine why valgrind tests within a nightly regression
	test run are not being suppressed properly.  This will
	generate some extraneous output that can cause things
	to fail, but only when using the -valgrind flag (which
	isn't working very well right now on desktop systems
	anyway).

Modified files:
	chapel/test/Bin/: sub_test 

---------------------------------------------------------------------------

04/18/07 14:30:20 -- bradc

Log message:
	A couple of changes to the gdb tests to deal with a
	message that comes up on the Suns when things are
	compiled without "-g" saying "no debugging symbols
	found."  For the compiler --gdb test, I just
	grepped this message away along with some other
	messages we grep away.  For the executable --gdb
	test, I switched the test to compile with -g, which
	seems like a good thing to do for a test of the
	debugger anyway.

Modified files:
	chapel/test/compflags/bradc/gdbddash/: PREDIFF 
Added files:
	chapel/test/execflags/bradc/gdbddash/: COMPOPTS 

---------------------------------------------------------------------------

04/18/07 14:34:35 -- bradc

Log message:
	Adding another suppression to the valgrind suppressions
	file to see if it fixes the problems I was seeing in
	the regression system.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

04/18/07 15:32:40 -- deitz

Log message:
	Optimized the bug fix of iterators (04/13/07 15:35:53) to only store
	back fields that are records since records are the only entities that
	can change within normal function calls or not at definition points.
	
	Extended the single loop iterator optimization to handle while..do
	loops as well as for loops.
	
	Removed an unnecessary load of a field from the iterator class in the
	getHeadCursor method.  It is not necessary to load since it has not
	been initialized yet.
	
	Enabled inlining of the iterator methods for iterator classes that are
	single loop iterators.
	
	Improved the default iterator for ranges so that the boundedType is
	folded.
	
	Added a specialized scalar replacement optimization that works on both
	classes and records and is currently applied to iterator classes if
	possible.  The code is contained in scalarReplaceClassVars.  This
	optimization works in two parts:
	
	First, all variables of the class type that have exactly one
	definition that is a simple copy of another variable of the class type
	are replaced by the copied variable.
	
	Second, all variables of the class type that have exactly one
	definition that is a new allocation of the class type and that are
	only used as the base expression in GET_MEMBER and SET_MEMBER
	primitive calls, are "scalar replaced" by the fields of the class.
	
	Performance Results
	-------------------
	
	RA (Problem size = 2**25)
	C    21.421
	CHPL 23.460   9.5% overhead
	
	RA (Problem size = 2**20)
	C     0.479
	CHPL  0.544  13.6% overhead
	
	These results mark a point in time where serial RA in Chapel shows an
	overhead of less than 10% over C.

Modified files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/compiler/passes/: scalarReplace.cpp 
	chapel/modules/standard/: ChapelRange.chpl 

---------------------------------------------------------------------------

04/18/07 16:51:22 -- deitz

Log message:
	Fixed a bug in function resolution in which non-generic functions were
	not more specific than generic functions except for generic functions
	over "any" type (type left off).
	
	Removed a .future.
	
	This fixes the three outstanding regressions.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
Removed files:
	chapel/test/types/tuple/diten/: tupleOverloadedPlus.future 

---------------------------------------------------------------------------

04/18/07 17:04:35 -- marybeth

Log message:
	Adding blockLU test.  This test contains:
	
	- a blockLU routine which implements block LU with pivoting
	- a test of blockLU on the matrix A (initialized by an input file)
	- the input file and block size are now config const and config var
	
	This test uses a new data file by default:  Amagic10.dat.
	This is the same matrix that is in Adata.dat, but with n and blk
	at the start of the file.

Added files:
	chapel/test/studies/lu/marybeth/: blockLU.chpl blockLU.good 
	                                  Amagic10.dat 

---------------------------------------------------------------------------

04/19/07 11:08:11 -- bradc

Log message:
	Removing semantic future that was waiting to see whether
	we supported tuple addition or not.  Once David implemented
	it, it started working.

Removed files:
	chapel/test/studies/jacobi/bradc/: jacobi-simple-brad.future 

---------------------------------------------------------------------------

04/19/07 15:38:33 -- deitz

Log message:
	Made some clean simplifications to the single loop iterator
	implementation methods that eliminate some unnecessary complexity with
	the computation of the condition variables.

Modified files:
	chapel/compiler/AST/: iterator.cpp 

---------------------------------------------------------------------------

04/19/07 15:41:43 -- diten

Log message:
	Change the behavior of the tuple comparison operators.  Now, when acting on
	n-tuple arguments, instead of returning an n-tuple of bools, return a single
	bool.  The comparison is similar to the normal definition of string comparison.
	
	For the "scalar op n-tuple" operations, treat the scalar as an n-tuple of
	repeated values.
	
	Also, change the where clauses "where a.size == b.size" into the function under
	an if statement with a compilerError.  This way, for size mis-matches there is
	a descriptive error instead of the couldn't resolve call error.
	
	Update my test for tuple comparisons to reflect this behavior.

Modified files:
	chapel/modules/standard/: ChapelTuple.chpl 
	chapel/test/types/tuple/diten/: tupleComparisons.good 

---------------------------------------------------------------------------

04/19/07 16:13:37 -- marybeth

Log message:
	Checking in two tests that compare the two ranges in a 2D domain.
	The first test, test_compare_range does not compile.  Checking for
	the equality of two ranges or computing the min of two ranges
	does not compile.
	
	The second test, test_compare_range2 compiles and runs successfully.
	It replaces the equality test and min computation with code that will
	compile - comparing the .low and .high fields of a range and comparing
	the .length fields of the range to determine the min range.

Added files:
	chapel/test/domains/marybeth/: test_compare_range2.chpl 
	                               test_compare_range2.good 
	                               test_compare_range.chpl 
	                               test_compare_range.future 
	                               test_compare_range.good 

---------------------------------------------------------------------------

04/19/07 16:17:45 -- bradc

Log message:
	Future for Steve to look at, resulting in an ic error
	message.  (Not exactly the one I sent you over email,
	but a similar enough case that it is likely to be
	related).

Added files:
	chapel/test/arrays/bradc/slices/: .cvsignore icError.chpl 
	                                  icError.future icError.good 

---------------------------------------------------------------------------

04/19/07 16:22:16 -- bradc

Log message:
	Removed my manual overloads of < and > on 2-tuples,
	since the language now does this for us.

Modified files:
	chapel/test/npb/cg/bradc/: cg-makea.chpl 

---------------------------------------------------------------------------

04/19/07 16:32:21 -- bradc

Log message:
	Implemented swap operator using "<=>" as the syntax and
	implementing it using function calls in the internal
	modules.  Used two overloads -- one for the generic case
	which uses inout arguments and should work for any two
	variables that are legal to assign to one another; a
	second for arrays, to avoid allocating array temporaries
	and making inout copies in the generic case.  Conceived
	of having a third version that handled domains more
	efficiently, taking advantage of their pass-by-reference
	semantics, but it turns out that you can't assign a domain
	within a function because it's treated as "const".  Maybe a
	topic for future semantic discussions?
	
	Added tests of swapping scalars, arrays, and domains.
	Used swap operator in Sort.chpl module.  Couldn't get
	it to work for the array slices in BlockLU yet, though
	I believe it should work for the pivot vector.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/modules/standard/: ChapelArray.chpl ChapelBase.chpl 
	                          Sort.chpl 
	chapel/test/studies/lu/: dongarra-lu.chpl 
Added files:
	chapel/test/modules/jplevyak/: .cvsignore 
	chapel/test/statements/bradc/swaps/: .cvsignore swap.chpl 
	                                     swap.good swapArray.chpl 
	                                     swapArray.good 
	                                     swapDomain.chpl 
	                                     swapDomain.good 
	chapel/test/studies/lu/marybeth/: .cvsignore 

---------------------------------------------------------------------------

04/19/07 16:39:04 -- bradc

Log message:
	Refiling my semantic future from earlier today as
	an error message future.  Added a constructor
	future capturing the way of writing the constructor
	that we discussed at the meeting.  Also, removed
	the "constructor" keyword from these tests.

Modified files:
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-construct.chpl 
	                                      threeclasstypes-construct.future 
Added files:
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-construct2.chpl 
	                                      threeclasstypes-construct2.future 
	                                      threeclasstypes-construct2.good 

---------------------------------------------------------------------------

04/19/07 17:16:06 -- bradc

Log message:
	Removed "constructor" keyword from compiler -- we now
	use "def" with the class name as the function name.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/Share/: typevar-2.chpl 

---------------------------------------------------------------------------

04/20/07 10:16:46 -- bradc

Log message:
	Fixed a really foolish bug with swapping arrays -- though
	I was looping over the two arrays' domains in a zippered
	manner, I was also swapping A(i) with B(i) rather than A(i)
	with B(j), which assumed that both arrays were indexed the
	same way.  Duh.  Added a test to lock in this behavior.
	
	This allows blockLU to use swaps with the following change
	applied:
	
	< //        piv(k) <==> piv(ind);
	< //        A(k,..) <==> A(ind,..);
	<         var temp = piv(k);
	<         piv(k) = piv(ind);
	<         piv(ind) = temp;
	<         for i in A1D {
	<           rtemp = A(k,i);
	<           A(k,i) = A(ind,i);
	<           A(ind,i) = rtemp;
	<         }
	---
	>         piv(k) <=> piv(ind);
	>         A(k..k,A1D) <=> A(ind..ind,A1D);

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 
Added files:
	chapel/test/statements/bradc/swaps/: swapArrayDiffIndices.chpl 
	                                     swapArrayDiffIndices.good 

---------------------------------------------------------------------------

04/20/07 10:23:26 -- bradc

Log message:
	Updated future on this test -- realized that the
	reason it isn't working is that it uses rank-change
	slicing which is known to be unimplemented.

Modified files:
	chapel/test/arrays/bradc/slices/: icError.future 

---------------------------------------------------------------------------

04/20/07 10:35:38 -- deitz

Log message:
	Improved the effectiveness of dead variable elimination to eliminate
	variables that are defined multiple times but each time with moves.
	Previously, variables would not be removed if they had more than one
	definition.
	
	Along with my last checkin, this decreases the number of lines of code
	generated to implement the simple loop "for i in 1..10 do writeln(i)"
	from 56 to 36.
	
	Working on a more dramatic change shortly.

Modified files:
	chapel/compiler/passes/: copy_propagation.cpp 

---------------------------------------------------------------------------

04/20/07 10:51:52 -- marybeth

Log message:
	Updating blockLU test to use the swap operator.

Modified files:
	chapel/test/studies/lu/marybeth/: blockLU.chpl 

---------------------------------------------------------------------------

04/20/07 12:19:13 -- deitz

Log message:
	Added support for functions without parentheses that are called
	without parentheses.  Such functions are resolved during scope
	resolution.  The visible flag is set to false so that they cannot be
	resolved later during function resolution, which would allow them to
	be called with parentheses.  That would be ambiguous if the return
	type were something that defined a this method.
	
	Inserted a check when determining the main function to require that
	the main function have parentheses.
	
	Added an error test case where a function that has no parentheses is
	called with parentheses.

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp cleanup.cpp 
	                         scopeResolve.cpp semanticChecks.cpp 
	chapel/test/classes/deitz/: test_bad_function_noparens.good 
	chapel/test/trivial/bradc/entrypoint/: main2.good 
Added files:
	chapel/test/functions/deitz/: test_function_noparens_error.chpl 
	                              test_function_noparens_error.good 
Removed files:
	chapel/test/functions/bradc/: topLevelFnNoParens.future 

---------------------------------------------------------------------------

04/20/07 14:10:22 -- deitz

Log message:
	Fixed a bug that I accidentally introduced in the last checkin with
	secondary methods that have no parentheses.

Modified files:
	chapel/compiler/passes/: cleanup.cpp normalize.cpp 

---------------------------------------------------------------------------

04/20/07 14:23:58 -- bradc

Log message:
	A couple of class tests, one seemingly a bug.
	
	1) overloadMethodArg.chpl shows that if a method has an
	   argument that shares its name, the argument does not
	   shadow the method name within the method definition.
	   This seems odd to me (and caused lots of problems due
	   to the use of arguments named "dim" throughout a lot
	   of the standard modules once I renamed the domain
	   "this()" function to be "dim()".
	
	2) The other tests whether a method that expects parens
	   can be parenthesized before the argument list as in
	   (c.foo)(args...).  It can, as expected.

Added files:
	chapel/test/classes/bradc/: overloadMethodArg.chpl 
	                            overloadMethodArg.future 
	                            overloadMethodArg.good 
	                            parensBeforeMethod.chpl 
	                            parensBeforeMethod.good 

---------------------------------------------------------------------------

04/20/07 14:36:30 -- deitz

Log message:
	Fixed a bug in the default equality and inequality operators for
	records and classes that support promotion.  You can now use == and !=
	on ranges.
	
	Updated the .future message of
	
	  test/domains/marybeth/test_compare_range
	
	to "semantic" because this test calls min on ranges.  Should <
	et. al. be overloaded for ranges?  What should it mean?

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/test/domains/marybeth/: test_compare_range.future 

---------------------------------------------------------------------------

04/20/07 14:54:25 -- bradc

Log message:
	Switched reference to a cpkg version of perl to
	a generic version of perl.

Modified files:
	chapel/util/: replstring 

---------------------------------------------------------------------------

04/20/07 14:56:20 -- bradc

Log message:
	Removed ability to index into a domain to get the range
	of one of its dimensions.  Replaced this with a dim()
	method that takes an int and returns the range.  Had to
	rename a number of arguments named "dim" in the modules
	that conflicted with this method, some correctly, others
	due to the bug filed in overloadMethodArg.chpl.
	
	Also added parser support for the full unbounded range
	"..", though it isn't useful for anything yet.
	
	Next step: support domain slicing.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/modules/standard/: ChapelArray.chpl ChapelBase.chpl 
	                          ChapelRange.chpl Schedules.chpl 
	                          SingleLocaleArithmetic.chpl 
	                          SingleLocaleSparse.chpl 
	chapel/test/arrays/deitz/: matrix.chpl 
	chapel/test/arrays/deitz/domains/: test_domain_dims.chpl 
	chapel/test/demo/review_060130/: iterators.chpl 
	chapel/test/domains/bradc/: queryLength.chpl 
	chapel/test/domains/marybeth/: test_compare_range2.chpl 
	                               testrank.chpl 
	chapel/test/npb/cg/bradc/: cg-dense.chpl cg-sparse.chpl 
	chapel/test/npb/ft/: ft-serial.chpl 
	chapel/test/release/examples/: norm.chpl 
	chapel/test/sparse/deitz/: test_sparse1.good 
	chapel/test/spec/marybeth/: Norm.chpl 
	chapel/test/studies/hpcc/FFT/: fft-candidate-2d.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: bitreverse.chpl 
	                                     bitreverse2.chpl fft.chpl 
	                                     twiddles-onebased.chpl 
	                                     twiddles.chpl 
	chapel/test/studies/hpcc/FFT/marybeth/: fft-test-even.chpl 
	                                        fft2d.chpl 
	chapel/test/studies/lu/marybeth/: blockLU.chpl blocks.chpl 
Added files:
	chapel/test/sparse/deitz/: test_sparse1.future 
	chapel/test/types/complex/marybeth/: .cvsignore 
	chapel/test/types/complex/waynew/: .cvsignore 

---------------------------------------------------------------------------

04/20/07 15:42:37 -- deitz

Log message:
	Fixed a bug in scope resolution in which methods would shadow all
	symbols including symbols that were more local.
	
	Fixed a misspelling of writlen and removed a .future.

Modified files:
	chapel/compiler/passes/: scopeResolve.cpp 
	chapel/test/classes/bradc/: overloadMethodArg.chpl 
Removed files:
	chapel/test/classes/bradc/: overloadMethodArg.future 

---------------------------------------------------------------------------

04/20/07 16:32:21 -- deitz

Log message:
	Added an error check against iterators that have formal arguments with
	intents.  Removed a .future.

Modified files:
	chapel/compiler/passes/: semanticChecks.cpp 
	chapel/test/trivial/mjoyner/iterators/: 
	                                        nest_func_iterator2b.good 
Removed files:
	chapel/test/trivial/mjoyner/iterators/: 
	                                        nest_func_iterator2b.future 

---------------------------------------------------------------------------

04/20/07 17:27:56 -- bradc

Log message:
	Added support for slicing for ranges, domains, and
	arrays using partially-bounded or un-bounded ranges.
	This is to say, you can slice into a range, domain,
	or array using "l..", "..u", or ".." in each dimension,
	and the missing bounds will be inherited from context.
	
	Some caveats in this change:
	
	(1) Using strided slices and/or slicing strided
	    ranges/domains/arrays is not yet implemented
	
	(2) The new domain that's created will be a
	    SingleLocaleDomain, when it ought to inherit
	    the distribution from the domain being sliced.
	
	With this change, Mary Beth's block LU test can take
	advantage of unbounded ranges using the following
	patch:
	
	79,81c79,81
	<       slice0 = k..UnfactoredInds.high;
	<       slice1 = k+1..UnfactoredInds.high;
	<       slice2 = k+1..CurrentBlockInds.high;
	---
	>       slice0 = UnfactoredInds(k..);
	>       slice1 = UnfactoredInds(k+1..);
	>       slice2 = UnfactoredInds(k+1..CurrentBlockInds.high);
	87c87
	<         A(k..k,A1D) <=> A(ind(1)..ind(1),A1D);
	---
	>         A(k..k,..) <=> A(ind(1)..ind(1),..);
	105c105
	<         slice2 = k+1..CurrentBlockInds.high;
	---
	>         slice2 = CurrentBlockInds(k+1..);
	
	Improvements to the Sort and Search modules should
	also be possible, but I haven't investigated those
	yet.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl ChapelRange.chpl 
Added files:
	chapel/test/arrays/bradc/slices/: unboundedSlices.chpl 
	                                  unboundedSlices.good 
	                                  unboundedSlices2D.chpl 
	                                  unboundedSlices2D.good 
	chapel/test/domains/bradc/: domainSlices.chpl domainSlices.good 
	chapel/test/types/range/bradc/: rangeSlices.chpl 
	                                rangeSlices.good 

---------------------------------------------------------------------------

04/20/07 17:28:54 -- marybeth

Log message:
	Checking in a MatrixOps module into test/studies/matrixlib.
	It's not quite ready for prime time, so I'm putting it into
	the studies part of the test directory for now.  It contains
	an overloaded * definition for matrix multiplication.  It also
	contains routines that compute the index of the maximum element
	of an array and blockLU.
	
	For now, I'm checking in one test that tests the overloaded
	matrix multiplication.  I'll be adding more routines to this module
	and more tests.

Added files:
	chapel/test/studies/matrixlib/: MatrixOps.chpl MatrixOps.notest 
	                                test_overloading.chpl 
	                                test_overloading.compopts 
	                                test_overloading.good 

---------------------------------------------------------------------------

04/23/07 09:21:02 -- deitz

Log message:
	Removed .future for now legal test.

Removed files:
	chapel/test/functions/iterators/bradc/: 
	                                        topLevelIteratorNoParens.future 

---------------------------------------------------------------------------

04/23/07 09:33:54 -- deitz

Log message:
	Enabled forall statements and loops using the bracket syntax to not
	require an index as in
	
	  A = [Mat] 2.0;
	
	Removed a .future.
	
	Still to do, it does not make sense to require an index in loops that
	don't use the special bracket syntax.
	
	There is an ambiguity between an expression statement that is a domain
	literal expression and a forall statement using the bracket syntax
	without an index followed by an empty statement.  For example, the
	code
	
	  [i in D] ;
	
	iterates over D and executes nothing (an empty statement) but the code
	
	  [D] ;
	
	is interpreted as an expression statement that is a domain expression.
	There is no iteration over D in this case even though it "could" be
	interpreted also as a forall statement over D that executes the empty
	statement.  That is, priority is given to the domain expression.
	
	If this ambiguity is concerning, we can remove support for eliding the
	iterator from a loop.  I don't think this ambiguity is a concern.  It
	should be documented in the spec.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/arrays/bradc/: domarr2.good 
Removed files:
	chapel/test/arrays/bradc/: domarr2.future 

---------------------------------------------------------------------------

04/23/07 09:49:11 -- deitz

Log message:
	Enabled loop statements using for/forall to elide indices as in
	
	  for 1..4 do
	
	Added a test.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/trivial/deitz/: test_loop_noindex.chpl 
	                            test_loop_noindex.good 

---------------------------------------------------------------------------

04/23/07 10:34:08 -- marybeth

Log message:
	Changing blockLU test to call blockLU in the MatrixOps module in
	test/studies/matrixlib.

Modified files:
	chapel/test/studies/lu/marybeth/: blockLU.chpl 
Added files:
	chapel/test/studies/lu/marybeth/: blockLU.compopts 

---------------------------------------------------------------------------

04/23/07 10:54:23 -- marybeth

Log message:
	Made changes to blockLU to use domain slicing.  Also, changed
	equality test comparing D.dim(1) to D.dim(2).  Now, it is a
	simple equality test where it used to be an explicit comparison
	of the .low and .high values of D.dim(1) and D.dim(2).

Modified files:
	chapel/test/studies/matrixlib/: MatrixOps.chpl 

---------------------------------------------------------------------------

04/23/07 12:31:58 -- bradc

Log message:
	Did a few housecleaning steps to MG, but nothing
	serious.

Modified files:
	chapel/test/npb/mg/: mg-annotated.chpl 

---------------------------------------------------------------------------

04/23/07 12:36:20 -- bradc

Log message:
	Removed restriction in compiler that the "main"
	entry point function must have parenthesis.
	Checked specification, and the current wording
	is sufficiently vague that it didn't seem to
	need updating to reflect this change.
	
	Interesting to note that it seems that other
	functions named "main" can be defined that
	take args, which will not be taken as the
	entry point, which could be a source of
	confusion.  Might want to either make these
	illegal, or illegal if they can't be called
	in a 0-argument form (all arguments have defaults),
	or generate a warning, or...

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	chapel/test/trivial/bradc/entrypoint/: .cvsignore main2.good 

---------------------------------------------------------------------------

04/23/07 14:42:43 -- bradc

Log message:
	Adding support for assigning or initializing sparse
	domains using "things that can be iterated over" and/or
	"tuples".  This supports initializations using forall
	expressions yielding indices, iterators, and explicit
	lists of indices, ....  Added tests of initializations
	and assignments of sparse domains.
	
	Updated the CG benchmark to use an initialization like
	this and to make the domain const rather than assigning
	it in an explicit loop after the fact.

Modified files:
	chapel/modules/standard/: ChapelArray.chpl 
	chapel/test/npb/cg/bradc/: cg-sparse.chpl 
	chapel/test/trivial/bradc/entrypoint/: .cvsignore 
Added files:
	chapel/test/performance/deitz/: .cvsignore 
	chapel/test/sparse/bradc/assignDom/: .cvsignore 
	                                     sparseDomainAssignForall.chpl 
	                                     sparseDomainAssignForall.good 
	                                     sparseDomainAssignIterator.chpl 
	                                     sparseDomainAssignIterator.good 
	                                     sparseDomainAssignTuple.chpl 
	                                     sparseDomainAssignTuple.good 
	                                     sparseDomainInitForall.chpl 
	                                     sparseDomainInitForall.good 
	                                     sparseDomainInitIterator.chpl 
	                                     sparseDomainInitIterator.good 
	                                     sparseDomainInitTuple.chpl 
	                                     sparseDomainInitTuple.good 

---------------------------------------------------------------------------

04/23/07 15:13:05 -- bradc

Log message:
	Changed Sort module to use unbounded sequences, just
	for fun.

Modified files:
	chapel/modules/standard/: Sort.chpl 

---------------------------------------------------------------------------

04/23/07 16:11:22 -- bradc

Log message:
	Adding a test of how array type inference should work (or at
	least, how I believe it should work) as a future.  In some
	sense, this sort of inference is holding up writing partial
	reductions using a functional interface for NAS CG.  In
	other senses, it's not -- just trading one user writearound
	for another.

Added files:
	chapel/test/arrays/bradc/: inferArrayType.chpl 
	                           inferArrayType.future 
	                           inferArrayType.good 

---------------------------------------------------------------------------

04/23/07 16:56:07 -- marybeth

Log message:
	Added MMIterator to MatrixOps module.  This iterator defines
	how the rows and columns of the matrices should be accessed
	when multiplying two matrices.  For now, it is defined so
	that C = A*B is computed by updating C, a column at a time.
	(The indices are yielded by nesting the loops in j, k, i order.)
	
	This iterator is a good example of how rank changing array
	slices would be useful.  If the iterator returned one dimension
	as a domain slice, then it would be clear how the memory accesses
	should be done to compute the matrix multiplication.  (In this
	case, if the row dimension was returned as a range spanning all
	rows of the matrix, the computation of C(i,j) would clearly be
	by column. Each iteration would update the entire jth column of C
	by adding to it the jth column of A scaled by the appropriate
	element of B.)

Modified files:
	chapel/test/studies/matrixlib/: MatrixOps.chpl 

---------------------------------------------------------------------------

04/24/07 08:43:20 -- bradc

Log message:
	Added default write methods for sparse domains and arrays.

Modified files:
	chapel/modules/standard/: SingleLocaleSparse.chpl 
	chapel/test/sparse/deitz/: test_sparse1.good 

---------------------------------------------------------------------------

04/24/07 08:47:16 -- bradc

Log message:
	Some test additions and changes related to my last check-in.
	
	Removed future for test_sparse1.chpl which now works due to
	the support for printing.
	
	Added a test to my CG directory to print out the sparse
	domain and array computed by cg-makea.chpl
	
	Added a future to mirror the one I checked in yesterday
	afternoon, in which a variable is declared of inferred
	sparse domain/array type.

Added files:
	chapel/test/npb/cg/bradc/: cg-printa.chpl cg-printa.compopts 
	                           cg-printa.good 
	chapel/test/sparse/bradc/: inferSparseArrayType.chpl 
	                           inferSparseArrayType.future 
	                           inferSparseArrayType.good 
Removed files:
	chapel/test/sparse/deitz/: test_sparse1.future 

---------------------------------------------------------------------------

04/24/07 09:16:21 -- bradc

Log message:
	Adding final valgrind suppression against getpwuid
	which was causing one of the gdbddash tests to fail.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

04/24/07 10:09:11 -- diten

Log message:
	Check in some copying garbage collection framework. All of the following
	changes apply only if the command-line option --copy-collect is specified.
	
	At the beginning of _chpl_main, add a call to _chpl_gc_init() to initialize the
	heap to 2MB and set up a few structs with pointers into the heap.
	
	At the beginning of all functions, add calls to _addRoot() for each variable
	that can point into the heap.  Also add _deleteRoot() calls just before the
	function's return statement for each of these variables.
	
	Make class constructors call _chpl_gc_malloc() instead of _chpl_alloc(). This
	new malloc calls the garbage-collector if it runs out of available memory.
	
	Some major simplifying assumptions are made, for example:
	* All heap allocated objects are 24 bytes in size.  This was the size of the
	  struct I was using in testing this.
	* No heap allocated object points to another heap allocated object.
	* No program has more than 2MB of reachable data.
	* Only one thread does anything that involves the heap (this might be even more
	  constrained).
	
	Obviously none of these are acceptable in the long term.
	
	Add a test case that loops over allocating a simple object, calling a function
	on the object, and overwriting the pointer to it in the next iteration.

Modified files:
	chapel/compiler/AST/: expr.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: Makefile.share 
	                         buildDefaultFunctions.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile 
Added files:
	chapel/compiler/passes/: copyCollect.cpp 
	chapel/runtime/include/: chplcopygc.h 
	chapel/runtime/src/: chplcopygc.c 
	chapel/test/classes/diten/: allocateManyObjects.chpl 
	                            allocateManyObjects.good 

---------------------------------------------------------------------------

04/24/07 11:10:12 -- deitz

Log message:
	Added support for handling iterators by expanding them around the body
	of the loop that they define.  This is applied to all iterators that
	have a single yield statement.  We need to check for the case of
	recursive iterators but this is not done yet.
	
	There is an oddity in this expansion.  Because the expansion happens
	before the iterator class is defined and the formal arguments need to
	be accessed as fields of the iterator class, we use a GET_MEMBER
	primitive on the field number and change it to the field at the end of
	the pass.  This assumes that the fields of an iterator class contain
	the formal arguments in order first.
	
	Added a primitive loop "c for loop"
	
	  for __primitive("c for loop", i, low, high, stride) {
	
	that results in code similar to a C for loop as in
	
	  for (i = low; i <= high; i += stride)
	
	This assumes a positive stride and is currently only used for the
	non-stridable case.
	
	Added a noop function _cfor_inc that will always be used in the body
	of a loop defined by this primitive and signals the change to the
	induction variable i, allowing the compiler to treat this loop as any
	other.
	
	This change has no effect on serial RA performance on my desktop.
	
	This change cleans the generated code in certain cases significantly.
	The loop
	
	  for i in 1..10 do
	    writeln(i);
	
	results in the following C:
	
	  for (_i_214096 = __tmp_214101; _i_214096 <= __tmp_214108; _i_214096 += 1) {
	    i = _i_214096;
	    writeln(i);
	  }
	
	Better, the loop
	
	  iterator foo() {
	    for i in 1..4 do
	      yield i;
	  }
	
	  for i in foo() do
	    writeln(i);
	
	results in the following C:
	
	  for (_i_214407 = __tmp_214412; _i_214407 <= __tmp_214419; _i_214407 += 1) {
	    _i_214438 = _i_214407;
	    i = _i_214438;
	    writeln(i);
	  }

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp stmt.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/passes/: codegen.cpp functionResolution.cpp 
	                         lowerIterators.cpp 
	chapel/modules/standard/: ChapelBase.chpl ChapelRange.chpl 

---------------------------------------------------------------------------

04/24/07 11:12:40 -- marybeth

Log message:
	Put the overloaded matrix multiplication routine in its own
	module, MatrixMult and updated tests accordingly.

Modified files:
	chapel/test/studies/matrixlib/: MatrixOps.chpl 
	                                test_overloading.chpl 
	                                test_overloading.compopts 
Added files:
	chapel/test/studies/matrixlib/: MatrixMult.chpl 

---------------------------------------------------------------------------

04/24/07 11:54:37 -- bradc

Log message:
	At Steve's request, pruned down the number of tests
	in my CG directory that have big .good files, either
	by reducing the problem size (in the case that the
	test wasn't otherwise represented), or by removing
	the test (when it was).
	
	Updated the README.

Modified files:
	chapel/test/npb/cg/bradc/: README cg-makea2.good cg-makea3.good 
Added files:
	chapel/test/npb/cg/bradc/: cg-makea2.execopts cg-makea3.execopts 
Removed files:
	chapel/test/npb/cg/bradc/: cg-makea1-sparse.chpl 
	                           cg-makea1-sparse.compopts 
	                           cg-makea1-sparse.future 
	                           cg-makea1-sparse.good 
	                           cg-makea2-sparse.chpl 
	                           cg-makea2-sparse.compopts 
	                           cg-makea2-sparse.future 
	                           cg-makea2-sparse.good 

---------------------------------------------------------------------------

04/24/07 12:09:56 -- bradc

Log message:
	Changed the local heap1 and heap2 variables in
	_chpl_gc_init() from void* pointers to char*
	pointers to reduce the number of casts and get
	rid of some pointer math on void*'s that was
	causing portability problems on the MTA
	(  (char*)(heap2 + heapsize) does the pointer
	math on a void* before casting to a char*,
	which is troublesome since it would be done
	in terms of sizeof(void)).
	
	David, I don't think should cause any problems
	for you, but let me know if it does.

Modified files:
	chapel/runtime/src/: chplcopygc.c 

---------------------------------------------------------------------------

04/24/07 12:29:12 -- marybeth

Log message:
	Added extra check to ensure that the blocksize, blk is not less than 1.
	Cleaned up the source a bit, deleting unused variables.

Modified files:
	chapel/test/studies/lu/marybeth/: blockLU.chpl 

---------------------------------------------------------------------------

04/24/07 13:38:58 -- deitz

Log message:
	Added a "reindexed" parameter to the SingleLocaleArithmeticArray to
	specialize the case where the array has not been reindexed and so it
	is known that blk(rank) (the multiplication factor for the last
	dimension) is one.  This eliminates one of the multiplications in an
	array access.  For 1D arrays, there is only one access, so it is an
	especially big win.
	
	This change results in a pleasing improvement to RA performance:
	
	  RA (Problem size = 2**25)
	  C    21.194
	  CHPL 21.844  3.1% overhead
	
	  RA (Problem size = 2**20)
	  C     0.478
	  CHPL  0.492  2.9% overhead
	
	Inlined the _compound_cast function at the Chapel level.

Modified files:
	chapel/modules/standard/: ChapelBase.chpl 
	                          SingleLocaleArithmetic.chpl 

---------------------------------------------------------------------------

04/24/07 17:31:58 -- bradc

Log message:
	Fixing an uninitialized variable that
	breaks the build when compiling with
	OPTIMIZE=1.  Looking for a gcc flag
	setting that will show these warnings
	when not compiling -O3.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 

---------------------------------------------------------------------------

04/25/07 09:39:39 -- marybeth

Log message:
	Forgot to check in the MatrixMult.notest file.

Added files:
	chapel/test/studies/matrixlib/: MatrixMult.notest 

---------------------------------------------------------------------------

04/25/07 10:55:07 -- diten

Log message:
	Allow nested tuple destructuring in variable declarations as in:
	  var (a,(b,c)) = (1,(2,3));
	
	To support this, add two new rules to the tuple_var_decl_stmt_inner_ls
	production in chapel.y.  Also add a new function build_tuple_var_decl to
	recursively handle the nesting.
	
	The above example gets parsed as:
	{ // scopeless block
	  var _tuple_tmp = (1,(2,3));
	  var a = _tuple_tmp(1);
	  var b = _tuple_tmp(2)(1);
	  var c = _tuple_tmp(2)(2);
	}
	
	Add a test case that tries a few arrangements of tuple variable declarations.

Modified files:
	chapel/compiler/AST/: build.cpp 
	chapel/compiler/include/: build.h 
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/types/tuple/diten/: tuple_var_decl_nest.chpl 
	                                tuple_var_decl_nest.good 

---------------------------------------------------------------------------

04/25/07 11:56:58 -- diten

Log message:
	Make the tuple operators other than comparisons return a 1-tuple when operating
	on a 1-tuple instead of a scalar. Comparisons continue to return a bool.
	
	Add a test that checks for this behavior.

Modified files:
	chapel/modules/standard/: ChapelTuple.chpl 
Added files:
	chapel/test/types/tuple/diten/: onetupleops.chpl 
	                                onetupleops.good 

---------------------------------------------------------------------------

04/25/07 12:01:32 -- diten

Log message:
	Remove a test that checks for + over 1-tuples returning a scalar.  This is
	no longer the expected behavior.

Removed files:
	chapel/test/types/tuple/diten/: onetuple.chpl onetuple.good 

---------------------------------------------------------------------------

04/25/07 14:13:32 -- deitz

Log message:
	Fixed a bug in which a default expression on an argument was not
	properly removed from the AST.  The pointer was simply overwritten.
	
	This fixes the valgrind error on modules/bradc/ra-paramWidth.
	
	Also fixed a bug in which the exprType of an argument was set
	incorrectly in the code in cleanup that sets the type to that of the
	default expression.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: cleanup.cpp 

---------------------------------------------------------------------------

04/25/07 15:02:23 -- deitz

Log message:
	Replaced the explicit iterator methods in the tuple record with an
	ault iterator.  This removes the last of the Chapel-level definitions
	of these functions and cleans up the code to handle zipper iteration.
	
	Added commented out code to halt if zippering two iterators that have
	different lengths.  This code as it is currently defined did not work
	when zippering unbounded ranges since the error should not arise in
	that case.
	
	Fixed fft-zip future and updated .good.  It is still a future since
	detection of different lengths in zippered context is not enabled.
	
	Fixed a bug in which the line numbers attributed to a halt in an
	iterator that has been expanded around a body in another function
	would still point to the original iterator code location.

Modified files:
	chapel/compiler/passes/: lowerIterators.cpp 
	chapel/modules/standard/: ChapelTuple.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: fft-zip.chpl fft-zip.good 

---------------------------------------------------------------------------

04/26/07 12:05:45 -- deitz

Log message:
	Added a flag
	
	  --no-expand-iterators-inline-opt
	
	to disable the expand-inline iterator optimization.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/test/compflags/bradc/help/: userhelp.good 

---------------------------------------------------------------------------

04/26/07 16:02:28 -- deitz

Log message:
	Fixed a bug in how basic blocks are linked and improved the printing
	of basic blocks to use the new list_ast format.

Modified files:
	chapel/compiler/AST/: bb.cpp view.cpp 
	chapel/compiler/include/: view.h 

---------------------------------------------------------------------------

04/27/07 09:02:43 -- diten

Log message:
	Fix a bug I inserted when I added PRIMITIVE_IS_ENUM.  This bug caused a
	compile-time infinite loop when a where clause can't be folded.
	
	Add a test with a where clause that can't be folded.  The expected output is
	a compiler error.

Modified files:
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/functions/diten/: badwhere.chpl badwhere.good 

---------------------------------------------------------------------------

04/27/07 12:09:53 -- marybeth

Log message:
	Checking in Cholesky code and tests.  blockChol.chpl contains the block
	algorithm and chol.chpl contains the unblocked version.  The test matrix
	was generated from the matrix gallery in matlab.  It's the lehmer matrix
	of order 10.

Added files:
	chapel/test/studies/cholesky/marybeth/: chol.good chol.chpl 
	                                        blockChol.good 
	                                        blockChol.chpl 
	                                        lehmer10.dat 

---------------------------------------------------------------------------

04/27/07 12:37:56 -- marybeth

Log message:
	Checking in a few fixes to the blockLU in MatrixOps.
	Made the IterateByBlocks iterator more general so that it
	works for ranges other than 1..n.  Defined a constant for
	zero that is the same type as the elements of A.  This
	constant is used to test for a zero pivot.

Modified files:
	chapel/test/studies/matrixlib/: MatrixOps.chpl 

---------------------------------------------------------------------------

04/27/07 13:07:42 -- deitz

Log message:
	Reindexed the basic blocks to start at zero instead of one.
	
	Added the loopInfo expression to the top basic block in the loop.
	
	Implemented an initial unoptimized live variable data flow analysis.
	Necessary performance improvements to the speed of this compiler
	analysis include changing the vector of bool values to a bit vector
	and making the iteration over the basic blocks use a queue of basic
	blocks.  Nevertheless, the semantics of the analysis appear to be
	correct.
	
	Applied the live variable analysis to determine what local variables
	in an iterator need to be added as fields to the iterator class for
	that iterator.  Prior to this analysis, all local variables and formal
	arguments became fields in the iterator class.  Now, just local
	variables that are live at yield points and all formal arguments
	become fields in the iterator class.
	
	This improves the performance of the promoted version of the stream
	benchmark by a factor of 3.9.  It currently is 3.6 times slower than
	the non-promotion version (down from 14.3 times before this change).
	
	The number of fields in the iterator class for the promoted addition
	function drop from 44 to 9 with this change.
	
	Note that the live variable analysis is not well abstracted.  In
	particular, the data flow analysis should be separated from the
	particular live variable analysis to allow for other analyses to be
	easily implemented.  This is particularly important if we decide to
	implement any other analyses.

Modified files:
	chapel/compiler/AST/: bb.cpp iterator.cpp 

---------------------------------------------------------------------------

04/30/07 09:24:36 -- deitz

Log message:
	Made the single loop iterator optimization apply to C for loops as
	well as lower ed Chapel for loops and while loops.
	
	Removed break-statement from the tuple iterator if the first iterator
	is bounded.  The break-statement is only necessary if the first
	iterator is unbounded since the generated loop would have no stopping
	condition.  Removing this break-statement is necessary in order to
	enable the single loop iterator optimization which is disabled by
	break and continue statements.
	
	These changes improve stream performance:
	
	Before this change:   5.221  246.4% overhead
	After this change:    3.473  130.5% overhead
	No promotion version: 1.507

Modified files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/modules/standard/: ChapelTuple.chpl 

---------------------------------------------------------------------------

04/30/07 10:53:47 -- deitz

Log message:
	Implemented bytesPerLocale on mac os.

Modified files:
	chapel/runtime/include/darwin/: chplsys.h 
	chapel/runtime/src/: chplsys.c 

---------------------------------------------------------------------------

04/30/07 14:10:35 -- diten

Log message:
	Add Makefile.x1 based on Makefile.mta. With an X1 PrgEnv loaded and the
	environment variables
	CHPL_PLATFORM x1
	CHPL_CORSS_PLATFORM linux (etc)
	
	The runtime builds and tests I've tried build and run. I can't find any
	bytesPerLocale type of system call on X1, so I can't get the HPCC benchmarks to
	run with good problem sizes.
	
	Unfortunately, nearly nothing automatically vectorizes or multi-streams
	because almost everything (array access) is a function call, and loops with
	un-inlined function calls don't get these optimizations.

Added files:
	chapel/make/: Makefile.x1 

---------------------------------------------------------------------------

04/30/07 16:35:04 -- marybeth

Log message:
	Adding more functionality to the block Cholesky algorithm - blockCholChoice
	contains a blockChol function that computes either the lower triangular
	or upper triangular Cholesky factor.
	
	This current implementation is for discussion purposes.  How can both
	options be implemented in one routine efficiently?  For now, it's
	implemented in a way to show the similarities between the two computations.
	It's probably not the most efficient way to program both methods in one
	routine.

Added files:
	chapel/test/studies/cholesky/marybeth/: blockCholChoice.chpl 
	                                        blockCholChoice.good 

---------------------------------------------------------------------------

05/01/07 09:20:21 -- bradc

Log message:
	Updated memory tests for chap01 and chap02 to reflect
	(1) changes in memory, (2) changes in how uname -n
	reports the machine name.

Added files:
	chapel/test/modules/standard/memory/countMemory/: 
	                                                  countMemory.chap01.us.cray.com.good 
	                                                  countMemory.chap02.us.cray.com.good 
Removed files:
	chapel/test/modules/standard/memory/countMemory/: 
	                                                  countMemory.chap01.good 
	                                                  countMemory.chap02.good 

---------------------------------------------------------------------------

05/01/07 11:00:43 -- diten

Log message:
	Add a new runtime include directory for X1 that has a copy of the sunos
	chplfp.h to define isinf(x).

Added files:
	chapel/runtime/include/x1/: chplfp.h 

---------------------------------------------------------------------------

05/01/07 12:42:28 -- deitz

Log message:
	Added inline pragmas to the tuple copy function, the _build_tuple
	function, the domain and array wrapper _pass functions and the array
	wrapper assignment function to enable the following optimization.
	
	Implemented a tuple variable scalar replacement optimization that
	works like the class variable scalar replacement optimization but on
	records.  This optimization applies to variables that can be replaced
	by their components.  It is not like the general scalar replacement
	optimization which changes all instances of a type and eliminates the
	type.  Refactored this optimization along with the class variable
	scalar replacement optimization to run in an acceptable amount of
	time.  Improvements should be made.
	
	These changes improve stream performance significantly:
	
	Before this change:   3.388  129.4% overhead
	After this change:    1.654   11.9% overhead
	No promotion version: 1.477
	
	The iterator classes for nested 1D promotion are completely inlined in
	this case.  2D promotion is another story...

Modified files:
	chapel/compiler/passes/: buildDefaultFunctions.cpp 
	                         scalarReplace.cpp 
	chapel/modules/standard/: ChapelArray.chpl ChapelTuple.chpl 

---------------------------------------------------------------------------

05/01/07 14:37:25 -- diten

Log message:
	Generate a function containing a switch statement with a case for each valid
	cid. The cid2size function returns the size of the class that corresponds to
	the cid argument.  Use this function to find the correct size of objects to be
	copied during collection.
	
	Also, when creating the calls at the begining and end of functions to
	add/remove roots to/from the root set, scan records local to the function
	looking for additional class pointers that were missed previously.

Modified files:
	chapel/compiler/passes/: codegen.cpp copyCollect.cpp 
	chapel/runtime/src/: chplcopygc.c 

---------------------------------------------------------------------------

05/02/07 08:01:07 -- diten

Log message:
	Fix two nightly testing regressions.  The cid2size function was calling "halt"
	as the default case.  The definition of "halt" can change depending on the
	input.  Instead, call "_printError".

Modified files:
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

05/02/07 14:14:50 -- deitz

Log message:
	Reworked localCopyPropagation to use similar mechanisms to my live
	variable analysis work.  This greatly simplifies the code.  Also made
	localCopyPropagation apply to all variables, not just compiler
	temporaries.  It is disabled in the following cases:
	
	  variables of complex type and records:
	    standard simplification due to partial updates
	
	  references via isReference:
	    must maintain referenceness
	
	  threaded variables via on_heap, is_ref, and isConcurrent:
	    can be changed by other threads
	
	  returned variables:
	    treated specially by the compiler, these need to be variables and
	    not constants; for example, lowering of iterators
	
	Added Symbol::isConcurrent to keep track of symbols that are accessed
	inside of cobegin and/or begin statements.  I was under the impression
	that is_ref and on_heap tracked all of these, but in cobegin
	statements, it looks like they were sometimes unmarked since they can
	remain on the stack.  These are marked now to avoid copy propagation
	in a threaded context.
	
	Inserted a second call to the cullOverReferences pass after inlining
	takes place.  This is necessary because some of the over references
	could not be culled before inlining if a function is called in
	different contexts, one requiring a reference and the other not.  This
	leads to a problem now that copy propagation is more effective.
	
	Disabled culling of over references on record types to handle the
	a.b.c case, except for tuples (arrays/deitz/jacobi5) where it is
	apparently necessary.  References need to be fixed.
	
	Moved convenience routine isRecordType to type.h for easy usage.
	
	Made compressUnnecessaryScopes also remove empty block statements.
	
	This checkin decreases the number of generated lines of code for
	stream.c from 997 to 804, or about 19%.

Modified files:
	chapel/compiler/AST/: astutil.cpp iterator.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/passes/: copy_propagation.cpp 
	                         cullOverReferences.cpp 
	                         lowerIterators.cpp parallel.cpp 
	                         scalarReplace.cpp 

---------------------------------------------------------------------------

05/03/07 09:06:51 -- deitz

Log message:
	Improved copy propagation to apply to immediate values that are not
	explicitly flagged as constants.
	
	Updated a test to cope with better constant propagation.
	
	This decreases the number of lines of generated code from stream.c
	further, from 804 to 760.

Modified files:
	chapel/compiler/passes/: copy_propagation.cpp 
	chapel/test/trivial/deitz/: test_shortcircuit_land_lor.chpl 

---------------------------------------------------------------------------

05/03/07 10:46:07 -- deitz

Log message:
	Added an optimizations directory for optimizations.
	
	Refactored live variable analysis into its own file and added this to
	the new optimizations directory.
	
	Refactored the bit vector backward dataflow analysis into bb.cpp.
	
	Added a flag --no-live-variables-iterator-class-opt to disable using
	live variable analysis to build the iterator class.  With this flag,
	all local variables are included in the iterator class.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: bb.cpp iterator.cpp 
	chapel/compiler/include/: bb.h driver.h optimizations.h 
	chapel/compiler/main/: driver.cpp 
Added files:
	chapel/compiler/optimizations/: .cvsignore Makefile 
	                                Makefile.include Makefile.share 
	                                liveVariableAnalysis.cpp 

---------------------------------------------------------------------------

05/03/07 12:04:25 -- deitz

Log message:
	Moved the optimization to collapse unnecessary block statements into
	its own file.
	
	Moved the optimization to remove unnecessary goto statements into its
	own file.

Modified files:
	chapel/compiler/include/: optimizations.h 
	chapel/compiler/optimizations/: Makefile.share 
	                                liveVariableAnalysis.cpp 
	chapel/compiler/passes/: copy_propagation.cpp lowerIterators.cpp 
Added files:
	chapel/compiler/optimizations/: collapseBlocks.cpp 
	                                removeUnnecessaryGotos.cpp 

---------------------------------------------------------------------------

05/03/07 15:32:30 -- deitz

Log message:
	Inserted code to delete bool vectors used for live variable analysis.
	
	Added isEssential bool to primitives.  This bool signals that a
	primitive should never be eliminated even if it appears to be dead
	because it modifies its arguments and/or has side effects.  In
	addition, return and yield are marked as essential since they produce
	effects of functions.  In adding new primitives, make sure that the
	isEssential flag is set correctly.  This should be relatively easy.

Modified files:
	chapel/compiler/AST/: expr.cpp iterator.cpp primitive.cpp 
	chapel/compiler/include/: primitive.h 
	chapel/compiler/optimizations/: liveVariableAnalysis.cpp 

---------------------------------------------------------------------------

05/04/07 13:04:56 -- deitz

Log message:
	Implemented global copy propagation in new file.
	
	Moved local copy propagation to new file.

Modified files:
	chapel/compiler/AST/: bb.cpp 
	chapel/compiler/include/: bb.h optimizations.h 
	chapel/compiler/optimizations/: Makefile.share 
	chapel/compiler/passes/: copy_propagation.cpp 
Added files:
	chapel/compiler/optimizations/: copyPropagation.cpp 

---------------------------------------------------------------------------

05/04/07 14:35:47 -- bradc

Log message:
	Rewrote the RA RandStream iterator to take a range/domain
	argument rather than two integer values.  This is much
	nicer than our previous version in that it: (a) makes
	better use of Chapel concepts, (b) doesn't require the
	block to be decomposed when passing it into the iterator.
	It also has the benefit of conserving the number of lines
	of code.
	
	Updated the README to note this change.

Modified files:
	chapel/test/release/examples/hpcc06/: README ra-randstream.chpl 
	                                      ra.chpl 

---------------------------------------------------------------------------

05/04/07 16:51:28 -- marybeth

Log message:
	\documentclass[a4paper,landscape]{report}
	
	\usepackage[landscape,margin=.75in]{geometry}
	\usepackage{color}
	\usepackage{flowfram}
	
	\usepackage{times}
	\usepackage{listings}
	\usepackage{longtable}
	\input{chapel_listing}
	\input{syntax_listing}
	
	% Use sans-serif font as default font
	\renewcommand{\familydefault}{cmss}
	
	% adjust \textheight so that it is an integer multiple of
	% \baselineskip
	%\adjustheight{\textheight}
	
	\Ncolumn{3}
	
	% Make a border along the top of each page
	%\vtwotonetop{1cm}{0.6\paperwidth}{[cmyk]{0.65,0.13,0,0}}{topleft}%
	%{0.4\paperwidth}{[cmyk]{0.94,0.54,0,0}}{topright}
	
	% empty page style, because I am going to make my own
	\pagestyle{empty}
	
	% Each new chapter sets \thispagestyle{\chapterfirstpagestyle}, change this empty as well
	\renewcommand{\chapterfirstpagestyle}{empty}
	
	% Now make a frame in which to put my own customized footer
	\newdynamicframe[1,2]{\textwidth}{\headheight}{0pt}{-\footskip}[footer]
	
	% set the contents of the frame:
	\setdynamiccontents*{footer}{{\sf \sl {\small Chapel Quick Reference Guide \hfill page \thepage}}}
	
	%\newcommand{\env}[1]{\texttt{#1}}
	%\newcommand{\cmdname}[1]{\texttt{\symbol{92}#1}}
	%\newcommand{\meta}[1]{\textnormal{\textless\textit{#1}\textgreater}}
	\newcommand{\ie}{\emph{i.e.}}
	\newcommand{\eg}{\emph{e.g.}}
	\newcommand{\etc}{etc}
	%\newcommand{\incode}[1]{\texttt{#1}}
	
	\begin{document}
	
	\setlength{\parindent}{0in}
	\setlength{\parskip}{1mm plus2mm minus1mm}
	
	\lstset{language=chapel}
	
	{\footnotesize
	\subsubsection*{Chapel Programs}
	
	{\bf File extension} \newline
	Chapel programs end with the file extension \verb+.chpl+.
	
	{\bf Modules} \newline
	Chapel programs are constructed from one or more Chapel modules.
	To access routines in other modules, the \chpl{use} statement
	must be included indicating which module(s) to use.
	The simple case:  a Chapel program is contained within
	one file, not using other modules.  In this case, the
	\chpl{main} function definition is not required.
	
	{\bf Compiler command} \newline
	The Chapel compiler command is \verb+chpl+.
	
	{\bf Comments}
	\begin{chapel}
	// Comments on a single line
	/* Comments
	   between lines */
	\end{chapel}
	\subsubsection*{Types}
	{\bf Primitive Types} \newline
	\begin{tabular}{|l|l|}
	\hline
	Type & Default Size \\
	\hline
	\begin{chapel}
	int
	uint
	\end{chapel}
	& 32 bits \\
	\hline
	\begin{chapel}
	real
	imag
	\end{chapel}
	& 64 bits \\
	\hline
	\begin{chapel}
	complex
	\end{chapel}
	& 128 bits \\
	\hline
	\begin{chapel}
	bool
	\end{chapel}
	& 1 bit  \\
	\hline
	\begin{chapel}
	string
	\end{chapel}
	& unbounded  \\
	\hline
	\end{tabular}
	
	Other sizes for the primitive data types can
	specified.
	\begin{chapel}
	var x: real(32);  //x is 32-bit real
	var index: int(8); //index is 8-bit int
	\end{chapel}
	
	{\bf Other types} \newline
	The Chapel language supports enumerated types,
	class types, record types, tuple types, and domain and
	array types.
	
	{\bf Type alias}
	\begin{chapel}
	type elemType = real(32);
	var alpha: elemType;
	\end{chapel}
	\subsubsection*{Variables}
	{\bf Variable kinds} \newline
	There are three kinds of Chapel variables: \chpl{var},
	\chpl{const} (runtime constants), \chpl{param} (compile time constants).
	
	{\bf Variable declarations} \newline
	
	{\bf Configurable variables} \newline
	The keyword \chpl{config} may precede any variable
	declaration, indicating if that variable may be set at
	compile time or runtime.
	\subsubsection*{Statements and Expressions}
	{\bf Conditional statement}
	\begin{chapel}
	if (alpha == 0.0) then
	  x = 0.0;
	else if (alpha == 1.0) then
	  x = y;
	else
	  x = alpha*y;
	if (x > z) {
	  z = alpha*x;
	  y = alpha*x;
	}
	\end{chapel}
	{\bf Select statement}
	\begin{chapel}
	select pos {
	  when "first" do
	    x = y(1);
	  when "last" do
	    x = y(y.N);
	  when "middle" do
	    x = y((y.N/2):int + y.N%2);
	  otherwise
	    writeln("Unrecognized element position");
	}
	\end{chapel}
	{\bf While and do while loops}
	\begin{chapel}
	do {
	  t += 1;
	  writeln(t);
	} while (t <= 10);
	
	while (t <= 10) {
	  t += 1;
	  writeln(t);
	}
	\end{chapel}
	{\bf For loop}
	\begin{chapel}
	def norm1(x) {
	  var norm = 0.0;
	  for i in x.domain {
	    norm += abs(x(i));
	  }
	  return norm;
	}
	\end{chapel}
	{\bf Type select statement}
	\begin{chapel}
	type select x {
	  when int do writeln("Integer type");
	  when real do writeln("Real type");
	  otherwise writeln("Not integer or real type");
	}
	\end{chapel}
	{\bf Query Expression}
	\begin{chapel}
	def sumOfThree(x: ?t, y:t, z:t):t {
	   var sum: t;
	
	   sum = x + y + z;
	   return sum;
	}
	\end{chapel}
	{\bf Let Expression}
	\begin{chapel}
	if (b*b > 4.0*a*c) {
	  var x:  (real, real);
	  x = let temp1 = sqrt(b*b - 4.0*a*c),
	          temp2 = 2.0*a in
	          ((-b + temp1)/temp2, (-b - temp1)/temp2);
	  } else {
	  var x: (complex, complex);
	  x = let temp1 = sqrt(4.0*a*c - b*b)/(2.0*a),
	          temp2 = -b/(2.0*a) in
	          ((temp2,temp1):complex,(temp2,-temp1):complex);
	  }
	}
	\end{chapel}
	{\bf Conditional Expression}
	\begin{chapel}
	def writehalf(i: int) {
	  var half = if (i % 2) then i/2 +1 else i/2;
	  writeln("Half of ",i," is ",half);
	}
	\end{chapel}
	\subsubsection{Iterators}
	\begin{chapel}
	iterator evens(n): int {
	  for i in 1..n do yield 2*i;
	}
	\end{chapel}
	\begin{chapel}
	iterator blockByCol(m,n): seq of seq of int {
	  for i in 1..n by 2 yield [1..n, i..i+1];
	}
	\end{chapel}
	Using this iterator in a \chpl{for} loop allows a matrix to be
	accessed \chpl{m} columns at a time.
	\subsubsection{Arrays and Domains}
	\begin{chapel}
	const D = [1..n];
	var x, y: [D] real;
	
	for i in D {
	  x(i) = i;
	  y(i) = i*i;
	}
	\end{chapel}
	
	\begin{chapel}
	const D2: domain(2) = [1..n, 1..n];
	var A, B, C: [D2] real;
	const alpha: real;
	
	A = B + alpha * C;
	\end{chapel}
	
	Whole-array operations like this one are implicitly parallel, if the \chpl{D2}
	domain were distributed across a set of processors.  For example,
	a block distribution of \chpl{D2} would be specified as follows.
	\begin{chapel}
	const DistD2: domain(2) distributed(Block) = [1..n, 1..n];
	var A, B, C: [DistD2] real;
	\end{chapel}
	To compute \chpl{A = B + alpha * C}, each processor would perform the
	operations for the array elements that it owns,
	as defined by \chpl{DistD2}'s distribution since that was the domain
	used to define all three arrays.
	
	Since arrays are reference types, they are passed by reference to functions
	where they may be modified and remain modified upon return.  However, assignment
	of arrays is by value.
	
	Arithmetic domains are just one kind of domain.  Domains may
	also be sparse, indefinite, enumerated or opaque.  Subdomains may be
	defined to specify a subset of the domain's indices, as in the case of
	inner, non-boundary points of a grid.
	
	\subsubsection*{Parallel constructs}
	{\bf Data parallel} \newline
	
	{\bf Task parallel} \newline
	
	\subsubsection*{Data Locality}
	
	\subsubsection*{Synchronizing and Serializing Tasks}
	
	\subsubsection*{Data Distributions}
	}
	\end{document}

Added files:
	chapel/doc/internal/quickReference/: chapel_listing.tex 
	                                     flowfram.sty Makefile 

---------------------------------------------------------------------------

05/04/07 16:54:33 -- marybeth

Log message:
	Checking in very rough draft of Chapel quick reference guide.
	The formatting is more or less set.  Now, I have to work on the
	content.
	
	This guide uses the flowfram package, which is new.  It is not
	installed with our latex, so I am checking in flowfram.sty file.

Added files:
	chapel/doc/internal/quickReference/: reference.tex 

---------------------------------------------------------------------------

05/05/07 13:55:44 -- marybeth

Log message:
	More edits to quick reference guide.

Modified files:
	chapel/doc/internal/quickReference/: reference.tex 
	                                     chapel_listing.tex 

---------------------------------------------------------------------------

05/05/07 18:16:08 -- marybeth

Log message:
	More edits to quick reference guide.

Modified files:
	chapel/doc/internal/quickReference/: reference.tex 

---------------------------------------------------------------------------

05/05/07 21:48:49 -- marybeth

Log message:
	Done with edits for now.  Ready for review.

Modified files:
	chapel/doc/internal/quickReference/: reference.tex 

---------------------------------------------------------------------------

05/06/07 18:04:33 -- diten

Log message:
	Add test lcs.chpl.  This uses a dynamic programming approach to find a longest
	common substring of two input strings.  The example was taken from
	"Introduction to Algorithms" second edition by Cormen, Leiserson, Rivest, Stein.
	In finding a longest common substring, letters may be removed from either
	input string, but letters may not be re-arranged.
	
	This was intended as a CUG BoF example code, but unfortunately doesn't make use
	of many cool Chapel constructs.  I doubt if it should be used for that purpose
	unless somebody can find a way to clean it up first.

Added files:
	chapel/test/trivial/diten/lcs/: lcs.chpl lcs.good strings 

---------------------------------------------------------------------------

05/06/07 22:59:18 -- marybeth

Log message:
	A few more edits.

Modified files:
	chapel/doc/internal/quickReference/: reference.tex 

---------------------------------------------------------------------------

05/07/07 10:34:02 -- marybeth

Log message:
	Deleting input of syntax_listing from reference.tex.  It's not needed.

Modified files:
	chapel/doc/internal/quickReference/: reference.tex 

---------------------------------------------------------------------------

05/07/07 10:47:01 -- marybeth

Log message:
	Edits to make the quick reference guide fit on two pages.

Modified files:
	chapel/doc/internal/quickReference/: reference.tex 

---------------------------------------------------------------------------

05/07/07 11:35:11 -- marybeth

Log message:
	Changing the makefile to explicitly create reference.ps with the
	dvips command.

Modified files:
	chapel/doc/internal/quickReference/: Makefile 

---------------------------------------------------------------------------

05/07/07 12:45:37 -- diten

Log message:
	Make a few minor changes to the quick reference.  A single file can contain
	multiple modules, default read and write methods are created for types the user
	didn't create them for, and in the classes section, x should be assigned to,
	not typed.

Modified files:
	chapel/doc/internal/quickReference/: reference.tex 

---------------------------------------------------------------------------

05/07/07 13:45:50 -- marybeth

Log message:
	Hopefully, final version for today's BOF.
	
	More reviews could be done in the future.

Modified files:
	chapel/doc/internal/quickReference/: reference.tex 

---------------------------------------------------------------------------

05/07/07 14:40:32 -- deitz

Log message:
	Added four potential puzzles for CUG BOF.  The puzzles are described
	in puzzles.txt.  Added solutions to all four.  Digits is an
	interesting parallel challenge for larger numbers.

Added files:
	chapel/test/puzzles/deitz/: digits.chpl digits.good 
	                            histogram.chpl histogram.good 
	                            puzzles.txt roman.chpl roman.good 
	                            roman.stdin 

---------------------------------------------------------------------------

05/07/07 14:49:45 -- diten

Log message:
	Add a test which uses a string->enum conversion to convert roman style numbers
	to regular decimal values.  This conversion process is very lenient, allowing
	for example "IIIII" to convert to 5.  Additional checks would be possible,
	but would complicate the code.

Added files:
	chapel/test/puzzles/diten/: roman.chpl roman.execopts roman.good 

---------------------------------------------------------------------------

05/08/07 13:20:58 -- deitz

Log message:
	Added three new iterator methods for use in zipper contexts.
	
	The original iterator methods form a loop as follows, where c is the
	cursor and ic is the iterator class:
	
	  c = ic.getHeadCursor();
	  while ic.isValidCursor(c) {
	    v = ic.getValue(c);
	    // body of loop accesses v
	    c = ic.getNextCursor(c);
	  }
	
	The three new iterator methods are used when zippered with another
	iterator as follows:
	
	  c = ic.getZipCursor1();
	  while /* condition based on other iterator */ {
	    c = ic.getZipCursor2(c);
	    v = ic.getValue(c);
	    // body of loop accesses v
	    c = ic.getZipCursor3(c);
	  }
	
	These three iterator methods are specialized in the case of a single
	loop iterator assuming the single loop iterator optimization is
	enabled (as by default).  In the event that they are not specialized,
	these methods default to the original methods, that is, getZipCursor1
	calls getHeadCursor, getZipCursor2 has no effect, and getZipCursor3
	calls getNextCursor.
	
	Before this change:   1.683  13.9% overhead
	After this change:    1.476   0.0% overhead
	No promotion version: 1.477
	
	Added a --no-copy-propagation flag to turn off this particular
	optimization.  The flag --unoptimized also turns it off.

Modified files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/compiler/include/: driver.h iterator.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: copy_propagation.cpp 
	                         functionResolution.cpp 
	chapel/modules/standard/: ChapelTuple.chpl 
	chapel/test/compflags/bradc/help/: userhelp.good 

---------------------------------------------------------------------------

05/08/07 14:03:32 -- deitz

Log message:
	Added new iterator method getZipCursor4 to handle code in a single
	loop iterator after the loop.  Added a test case that would have
	caught this bug.
	
	The four new iterator methods are used when zippered with another
	iterator as follows:
	
	  c = ic.getZipCursor1();
	  while /* condition based on other iterator */ {
	    c = ic.getZipCursor2(c);
	    v = ic.getValue(c);
	    // body of loop accesses v
	    c = ic.getZipCursor3(c);
	  }
	  c = ic.getZipCursor4(c);
	
	These four methods now match exactly to the four blocks that a single
	loop iterator identifies:
	
	  iterator singleLoopIterator() {
	    BLOCK I
	    loop {
	      BLOCK II
	      yield
	      BLOCK III
	    }
	    BLOCK IV
	  }

Modified files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/compiler/include/: iterator.h 
	chapel/compiler/passes/: functionResolution.cpp 
	chapel/modules/standard/: ChapelTuple.chpl 
Added files:
	chapel/test/functions/deitz/iterators/: 
	                                        test_zip_loop_iterator.chpl 
	                                        test_zip_loop_iterator.good 

---------------------------------------------------------------------------

05/09/07 08:20:53 -- deitz

Log message:
	Added two more digits problem solutions.  These use a sorted numbers iterator where a sorted number is defined to have its digits sorted, as suggested by MB.  This cuts down on the problem space significantly.  The third solution has a .future and I think shows a bug in the hash table indefinite domain.

Added files:
	chapel/test/puzzles/deitz/: digits2.chpl digits2.good 
	                            digits3.chpl digits3.future 
	                            digits3.good 

---------------------------------------------------------------------------

05/09/07 09:04:31 -- diten

Log message:
	Add tuple destructuring for function arguments.  The definition:
	def foo(a, (b,(c,d))) where cond { ...
	
	becomes:
	def foo(a, _tuple_arg: _tuple) where
	      cond & _tuple_arg.size == 2 &
	      PRIMITIVE_IS_TUPLE(_tuple_arg(2)) & _tuple_arg(2).size == 2 {
	  var b = _tuple_arg(1);
	  var c = _tuple_arg(2)(1);
	  var d = _tuple_arg(2)(2); ...
	
	Once folding of && is implemented, the where clause should be changed to use it
	instead of bitwise &.
	
	Remove a .future.  Add a more involved test of this.  Add a future showing why
	the where clause needs to use short-circuiting && instead of bitwise.

Modified files:
	chapel/compiler/AST/: build.cpp expr.cpp primitive.cpp 
	chapel/compiler/include/: build.h primitive.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/types/tuple/diten/: overload_destructure_args.chpl 
	                                overload_destructure_args.future 
	                                overload_destructure_args.good 
Removed files:
	chapel/test/trivial/jplevyak/: destruct-arg-1.future 

---------------------------------------------------------------------------

05/09/07 09:08:51 -- diten

Log message:
	Add a more involved test of tuple destructuring for function arguments.

Added files:
	chapel/test/types/tuple/diten/: destructure_arg_tuples.chpl 
	                                destructure_arg_tuples.good 

---------------------------------------------------------------------------

05/09/07 11:07:22 -- deitz

Log message:
	Fixed a bug in which conditional expressions, or other expressions
	implemented via nested functions, resulted in a seg fault in cleanup
	when used in conjunction with the special syntactic support for array
	declarations.
	
	Removed a .future.

Modified files:
	chapel/compiler/passes/: cleanup.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_special_init_bug.future 

---------------------------------------------------------------------------

05/09/07 11:19:55 -- deitz

Log message:
	Added initial support for a new compiler flag --explain-call that
	explains the function resolution process.  It currently prints out the
	list of visible functions, followed by the list of candidate
	functions, followed by the best function.
	
	It requires a string argument.  Use
	
	  --explain-call=foo
	
	to explain the resolution of function call foo at all call sites to
	foo.  Use
	
	  --explain-call=foo:module
	
	to explain the resolution of function call foo at all call sites in
	the module named module.  Use
	
	  --explain-call=foo:module:9
	
	to explain the resolution of function call foo at all call sites in
	the module named module at line number 9.  As a convenience, just the
	line number can be specified as in
	
	  --explain-call=foo:9
	
	to explain the resolution of function call foo at all call sites in
	all modules at line number 9.
	
	Added a test case.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: functionResolution.cpp 
Added files:
	chapel/test/functions/deitz/: test_explain1.chpl 
	                              test_explain1.compopts 
	                              test_explain1.good 

---------------------------------------------------------------------------

05/09/07 11:38:11 -- deitz

Log message:
	Removed two .futures that have been working ever since the removal of
	the --cg-chpl-lineno flag but which were failing because they still
	tried to use this flag.

Modified files:
	chapel/test/parallel/begin/deitz/: test_begin_error_lineno.good 
Removed files:
	chapel/test/compflags/bradc/: linenoConditional.compopts 
	                              linenoConditional.future 
	chapel/test/parallel/begin/deitz/: 
	                                   test_begin_error_lineno.compopts 
	                                   test_begin_error_lineno.future 

---------------------------------------------------------------------------

05/09/07 12:06:10 -- diten

Log message:
	Allow multiple modules to be used in a single use statement.  Add a test that
	both uses multiple modules in one statement, and uses only one module in
	another use statement.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/modules/diten/: modules.chpl modules.notest 
	                            multiple_module_use.chpl 
	                            multiple_module_use.compopts 
	                            multiple_module_use.good 

---------------------------------------------------------------------------

05/09/07 12:13:11 -- deitz

Log message:
	Updated user help message.

Modified files:
	chapel/test/compflags/bradc/help/: userhelp.good 

---------------------------------------------------------------------------

05/09/07 15:24:12 -- deitz

Log message:
	Added runtime checks to ensure that zippered iteration fails if the
	entities being zippered are of unequal size.  This check is disabled
	with --no-bounds-checks though should probably get its own flag,
	perhaps something like --no-zipper-checks.  Then an umbrella flag
	--no-runtime-checks can set both of these.
	
	Made it so that the getZipCursor2 and getZipCursor4 methods return
	cursors that can be checked for validity.
	
	Added three tests and updated one.  Removed one future.

Modified files:
	chapel/compiler/AST/: iterator.cpp 
	chapel/modules/standard/: ChapelTuple.chpl 
	chapel/test/studies/hpcc/FFT/bradc/: fft-zip.good 
Added files:
	chapel/test/functions/deitz/iterators/: test_zip_check1.chpl 
	                                        test_zip_check1.good 
	                                        test_zip_check2.chpl 
	                                        test_zip_check2.good 
	                                        test_zip_check3.chpl 
	                                        test_zip_check3.good 
Removed files:
	chapel/test/studies/hpcc/FFT/bradc/: fft-zip.future 

---------------------------------------------------------------------------

05/10/07 09:12:29 -- bradc

Log message:
	Removed working future fixed by Steve's bug fix
	yesterday (this test may be redundant with Steve's...
	I filed it under the users directory so that we
	could keep track of what codes/bugs users submitted).

Removed files:
	chapel/test/users/shetag/: condarr.future 

---------------------------------------------------------------------------

05/10/07 15:55:10 -- diten

Log message:
	More garbage collection work.  Do a breadth-first pointer traversal starting
	with the root-set.  To do this, generate one array per class type containing
	the offsets of the pointer fields in the C struct representing the class, as
	well as a cid2offsets function which returns pointers to these arrays.
	
	Also, add pointers that are at module scope to the root-set so they can be
	collected.  I've not yet added pointers that are in module scope records to
	the root-set, nor does the pointer traversal find pointers in records in
	classes.  It shouldn't be a big change to scan records in these situations
	though.

Modified files:
	chapel/compiler/passes/: codegen.cpp copyCollect.cpp 
	chapel/runtime/src/: chplcopygc.c 

---------------------------------------------------------------------------

05/10/07 17:50:53 -- marybeth

Log message:
	Adding an outline for new subsections in the language overview
	section.
	
	When these new subsections are written, the discussions of the example
	codes can then be shortened quite a bit.

Modified files:
	chapel/spec/: Language_Overview.tex 

---------------------------------------------------------------------------

05/11/07 09:25:04 -- bradc

Log message:
	Added code that Aniruddha submitted, currently filed as a
	future, though if there's agreement, I believe that the
	current implementation is correct and the future could be
	removed and .good file updated (for now I put the .good
	file to be as Aniruddha expected).
	
	Also added a version that refers to an "i" in an enclosing
	scope to ensure that it works as expected.

Added files:
	chapel/test/users/shetag/: tensorForall.chpl tensorForall.future 
	                           tensorForall.good tensorForall2.chpl 
	                           tensorForall2.good 

---------------------------------------------------------------------------

05/11/07 09:33:23 -- bradc

Log message:
	Added token counting mechanism for the optimizations
	directory.

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

05/11/07 11:27:20 -- bradc

Log message:
	New nightly cron script that only runs the examples
	directory (currently being used on my cygwin machine
	when it's turned on and connected).

Added files:
	chapel/test/Bin/: nightly.novgr.examples.cron 

---------------------------------------------------------------------------

05/11/07 11:54:46 -- bradc

Log message:
	Changed HPCC example files to use comma-separated
	modules rather than a separate use statement per
	line.  Put all standard modules in one use statement
	and all user modules in a second.

Modified files:
	chapel/test/release/examples/hpcc06/: fft-mta.chpl fft.chpl 
	                                      probSize.chpl ra.chpl 
	                                      stream-nopromote.chpl 
	                                      stream.chpl README 

---------------------------------------------------------------------------

05/11/07 11:59:23 -- bradc

Log message:
	Added TCE (Tensor Contraction Engine) example that
	I worked up some time ago on my laptop into the
	test system.  I'd lost track of the fact that I'd
	never committed it.
	
	This test itself doesn't compute anything interesting,
	but does convert a TCE example from the attached
	powerpoint slide into Chapel, showing that Chapel
	would be a very attractive language for expressing
	TCE computations, without being as domain-specific
	as the TCE language.

Added files:
	chapel/test/studies/tce/: .cvsignore cray-tce.ppt 
	                          tce-slide8.chpl tce-slide8.execopts 
	                          tce-slide8.good 

---------------------------------------------------------------------------

05/11/07 12:11:02 -- bradc

Log message:
	Added initial support for doing performance testing
	for a Chapel test foo.chpl.  When the testing system
	is run in its normal mode, it runs tests for
	correctness as always.
	
	When run with the -performance flag, the test system
	only runs tests that have a .perfkeys file.  This
	file should contain a string per line indicating
	keys/labels from the test's output file that should
	be used to identify values that we want to track for
	performance purposes.  In particular, if a test
	generates output like:
	
	        Execution Time: 1.2345 seconds
	
	Having a line in the tests .perfkeys file:
	
	        Execution Time:
	
	would cause the value "1.2345" to be read from the
	test's output file and logged in a data file.
	
	The data file for a test is named foo.dat and is
	located in ./perfdat/<machine-name>/ by default.
	This default can (and likely should) be changed
	on a user-by-user basis by setting the
	CHPL_TEST_PERF_DIR environment variable to indicate
	a directory where you would like performance results
	to be written.
	
	The format of the data file is to list the keys from
	the test's .perfkeys file on line 1 the first time
	a .dat file is created, and to write the values
	corresponding to the keys on lines following that for
	each test.  All keys and values are tab-separated for
	easy importing into Excel or gnuplot.  The first column
	is set to be the date that the test was run.  For example,
	after running the above test a few times, we might end up
	with a data file like:
	
	        Date    Execution Time
	        05/10/07        1.2345
	        05/11/07        1.2432
	        05/12/07        1.2333
	
	In addition to the .perfkeys file, a performance test
	can (and often will need to) specify .perfcompopts and
	.perfexecopts files mirroring the .compopts and .execopts
	files used for normal testing.  For most tests, one will
	want to turn on compiler options like -O or
	--no-bounds-checks while execution options that cause
	timing and such information to be printed out.
	
	Performance tests are "successful" from the point of view
	of the testing system if all of the .perfkeys entries
	could be found.  If any cannot be found for a test, the
	test is unsuccessful.  Note that performance tests are
	not compared against their .good files due to the likely
	presence of nondeterministic output.  For this reason, it
	is often a good idea to have some sort of self-verification
	"Success/failure" message be one of the key/data values
	read by the .perfkeys file.
	
	As a first example of using the performance testing
	capability, added .perfkeys and .perfcompopts files for the
	hpcc06/stream.chpl example, in which I grab out all sorts
	of information -- problem size, memory utilization, GUPS,
	timings, success/failure, etc.  To see how this works try:
	
	start_test -startdir release/examples/hpcc06 -performance
	
	Future work:
	* make cron job execute this on an otherwise idle machine
	  to track performance
	* make cron job graph results over time to look for
	  anomalies
	* support some sort of threshholding mechanism to
	  automatically detect anomalies and alert the development
	  team to them during a nightly run (given a threshhold
	  for a given key by the user, for example).

Modified files:
	chapel/test/: start_test 
	chapel/test/Bin/: sub_test 
	chapel/test/release/examples/hpcc06/: .cvsignore 
Added files:
	chapel/test/Bin/: computePerfStats.pl 
	chapel/test/release/examples/hpcc06/: stream.perfcompopts 
	                                      stream.perfkeys 

---------------------------------------------------------------------------

05/11/07 17:08:32 -- deitz

Log message:
	Added a reaching definitions flow analysis
	
	Added a function to build def-use and use-def chains.
	
	Added a new pass deadCodeElimination that currently just builds up the
	du and ud chains.  It does not yet eliminate any code.
	
	Refactored shared code between this new analysis and the existing
	analyses.
	
	Added a number of standard printing functions to print bit vector sets
	and local variable sets, etc.  These used to be defined where used.

Modified files:
	chapel/compiler/AST/: bb.cpp 
	chapel/compiler/include/: bb.h optimizations.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/optimizations/: Makefile.share 
	                                copyPropagation.cpp 
	                                liveVariableAnalysis.cpp 
	chapel/compiler/passes/: copy_propagation.cpp 
Added files:
	chapel/compiler/optimizations/: deadCodeElimination.cpp 
	                                reachingDefinitionsAnalysis.cpp 

