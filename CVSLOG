!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                !
! NOTE: This file is automatically maintained by the CVS system. !
! Please do not update and commit by hand                        !
!                                                                !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


---------------------------------------------------------------------------

04/01/21 13:28:16 -- bradc

Log message:
	This is a test.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

04/01/21 14:13:02 -- bradc

Log message:
	Set the script up to mail both John (here at Cray) and me.

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

04/01/21 14:22:46 -- bradc

Log message:
	Still ashamed for my former sloppiness, made Makefile.base even more
	bulletproof (perhaps overly so :).  Made a rule such that if PLATFORM
	is set to unknown, it prints out a message indicating that the
	platform is not recognized and exits.
	
	In order to make this rule not be the first (and therefore default)
	rule in every Makefile that includes Makefile.base, I added a rule
	"default:" that depends on "all".  Thus, "all" should be the first
	target of every Makefile that we make (this seems to be the convention
	we both favor anyway, so hopefully this isn't too much of an
	imposition).
	
	Also added a Makefile to the make/ directory that prints out all the
	PLATFORM/OS/ARCH information.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile 

---------------------------------------------------------------------------

04/01/21 14:40:16 -- bradc

Log message:
	Got rid of remaining DOS linefeeds.

Modified files:
	chapel/compiler/: prim_data.dat 
	chapel/make/: Makefile.cygwin Makefile.sun 

---------------------------------------------------------------------------

04/01/22 09:58:44 -- bradc

Log message:
	Switched mailing list to chapel_dev@cray.com (should happen on
	next check-in, not this one).

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

04/01/22 09:59:37 -- bradc

Log message:
	Just checking that mail to the new mailing list works.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

04/01/22 12:33:17 -- n10253

Log message:
	Continued work on type checking, parameterized
	types and type constraints on other types (e.g. some_var : some_type).

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h clone.cpp fa.cpp if1.cpp 
	                  sym.h v.g 
Added files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

04/01/22 13:48:26 -- bradc

Log message:
	Improved the Makefile so that clean would remove prim_data.cpp and so
	that a clean build would work without being run twice (previously, it
	seemed to trip over prim_data.cpp being missing the first time and
	then worked the second time).
	
	Improved the .cvsignore files to ignore things created during the
	run of the sample program.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/samples/: .cvsignore 

---------------------------------------------------------------------------

04/01/22 13:56:39 -- bradc

Log message:
	Took a cue from John's mail yesterday and removed the optional
	inclusion of Makefile.$(PLATFORM) to create errors on an unknown
	platform.  Then realized that by moving the rules I'd added to
	Makefile.base to create a nice error message to Makefile.unknown, I
	could still get nice error messages on an unknown platform.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile.unknown 

---------------------------------------------------------------------------

04/01/22 13:58:47 -- bradc

Log message:
	Added dparser's created BUILD_VERSION file to the list of files to be
	ignored in the d/ directory.

Added files:
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

04/01/23 11:49:33 -- n10253

Log message:
	add the binaries and "freebsd"

Modified files:
	chapel/compiler/: .cvsignore 

---------------------------------------------------------------------------

04/01/23 13:15:20 -- n10253

Log message:
	Little bug fixes in preparation for working on structural types.

Modified files:
	chapel/compiler/: fa.cpp if1.cpp 

---------------------------------------------------------------------------

04/01/23 14:46:22 -- n10253

Log message:
	Handle more sorts of argument type constraints.

Modified files:
	chapel/compiler/: TODO ast.cpp 

---------------------------------------------------------------------------

04/01/26 11:30:18 -- n10253

Log message:
	freebsd build directory and a couple more executables into cvsignore

Modified files:
	chapel/third-party/boehmgc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.2/: .cvsignore 
	chapel/third-party/dparser/: .cvsignore 
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

04/01/28 11:55:22 -- n10253

Log message:
	Added "path" argument type to args.*
	Added logging system: see log.h for details.

Modified files:
	chapel/compiler/: Makefile arg.cpp driver.cpp fa.cpp geysa.h 
	                  if1.cpp if1.h sym.h 
Added files:
	chapel/compiler/: log.cpp log.h 

---------------------------------------------------------------------------

04/01/28 12:02:43 -- n10253

Log message:
	Fix minor grammar ambiguity.

Modified files:
	chapel/compiler/: TODO v.g 

---------------------------------------------------------------------------

04/01/28 18:41:34 -- n10253

Log message:
	Implement constant folding.
	Dead code elimination does not yet take constant folding into account.

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h driver.cpp fa.cpp if1.h 
	                  prelude.v prim.cpp prim.h prim_data.dat sym.h 
Added files:
	chapel/compiler/: ast_cf.cpp cast.cpp 

---------------------------------------------------------------------------

04/01/29 15:23:45 -- n10253

Log message:
	Constant folding complete: converts the AST node to an AST_const.
	Abstracted v.g and made a copy in chpl.g in preparations for building
	chapel grammar.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast_cf.cpp chpl.g 
	                  driver.cpp fa_extras.cpp geysa.h if1.cpp map.h 
	                  sym.h v.g 
Added files:
	chapel/compiler/: grammar.cpp grammar.h prelude.chpl 

---------------------------------------------------------------------------

04/01/30 11:36:40 -- bradc

Log message:
	Establishing an examples/ directory for use in managing
	chapel examples and tracking their evolution.  Checking
	in matrix-vector multiplication-related milestone 0 codes,
	including the official consensus code, some interesting
	variations, and some baby steps that should help get us
	there.

Added files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 
	chapel/examples/pre-milestone0/: matadd.chpl matassign.chpl 
	                                 matvectadd.chpl 

---------------------------------------------------------------------------

04/02/03 13:48:58 -- n10253

Log message:
	fix bug in error recovery

Modified files:
	chapel/third-party/dparser/d/: parse.c 

---------------------------------------------------------------------------

04/02/03 15:11:32 -- bradc

Log message:
	Just inserted scripts to update BUILDNUM and CVSLOG files
	in the root chapel/ directory automatically, and inserted
	these files manually.  Just added a header to the top of
	CVSLOG requesting that people not change it manually
	(though it is possible to do so, to commit those changes,
	and then to have the script automatically tack your log to
	the end of those changes, as will happen with this entry.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

04/02/03 15:14:25 -- bradc

Log message:
	Oops, typo in previous log.  BUILDNUM should've
	been BUILD_VERSION.

Modified files:
	./: BUILD_VERSION 
Removed files:
	./: BUILDNUM 

---------------------------------------------------------------------------

04/02/03 16:15:41 -- n10253

Log message:
        casting decision tree

Added files:
        chapel/compiler/: cast_code.cpp 
---------------------------------------------------------------------------

04/02/03 16:29:46 -- bradc

Log message:
	John's last checkin failed to update these files due to a
	permission problem I created, so I've updated them by hand
	as penance.

Modified files:
	./: BUILD_VERSION CVSLOG 

---------------------------------------------------------------------------

04/02/03 16:39:17 -- bradc

Log message:
	Updated the compiler's version machinery from
	Makefile + -D-based technology to a header file
	(version.h) that includes the automatically
	updated BUILD_VERSION file in the parent
	directory.

Modified files:
	chapel/compiler/: Makefile version.cpp 
Added files:
	chapel/compiler/: version.h 
Removed files:
	chapel/compiler/: BUILD_VERSION 

---------------------------------------------------------------------------

04/02/03 16:58:42 -- bradc

Log message:
	Just noticed that when I check in files, it appears that their
	group gets changed from chapel back to criemp.  Am trying to
	fix it, and this checkin is essentially a test (albeit one
	that updates the structure file a bit).

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

04/02/03 17:34:35 -- bradc

Log message:
	Another attempt to fix my permissions problem.  Another small
	modification to the structure file.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

04/02/04 12:41:08 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	very preliminary chapel grammar and prelude
	sample/sample.chpl added, and compiles

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h builtin_symbols.h chpl.g 
	                  fa.cpp prelude.chpl prelude.v prim_data.dat 
	                  v.g 
Added files:
	chapel/compiler/samples/: sample.chpl 

---------------------------------------------------------------------------

04/02/04 14:00:36 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	start a prioritized TODO list

Modified files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

04/02/09 16:39:53 -- bradc

Log message:
	Changed dimension of reduction to be correct.

Modified files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 

---------------------------------------------------------------------------

04/02/10 14:53:16 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Extensive changes to the way assignment occurs.
	Assignment is now mediated through methods.  All variables
	are converted to references to be assigned.  This permits
	complex left-hand sides to be type infered correctly, e.g.
	
	a.b.c.d = 5;

Modified files:
	chapel/compiler/: ast.cpp ast_cf.cpp builtin_symbols.h chpl.g 
	                  fa.cpp fa_extras.cpp prelude.chpl prelude.v 
	                  prim_data.dat v.g 
Added files:
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

04/02/12 10:48:45 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for trailing context to scanner

Modified files:
	chapel/third-party/dparser/d/: CHANGES COPYRIGHT Makefile README 
	                               arg.c arg.h d.h dparse.h 
	                               dparse_tables.h dsymtab.h gram.c 
	                               gram.h gramgram.h grammar.g.c 
	                               index.html lex.c lex.h lr.c lr.h 
	                               make_dparser.c parse.c parse.h 
	                               sample_parser.c scan.c scan.h 
	                               symtab.c util.c util.h version.c 
	                               write_ctables.c write_ctables.h 
	chapel/third-party/dparser/d/python/: dparser_wrap.c test.py 
	chapel/third-party/dparser/d/verilog/: Makefile ambig.c main.c 
	                                       vparse.c 
Added files:
	chapel/third-party/dparser/d/tests/: g46.test.g g46.test.g.1 
	                                     g46.test.g.1.check 

---------------------------------------------------------------------------

04/02/12 15:38:21 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in the trailing context code.
	Updated test cases.

Modified files:
	chapel/third-party/dparser/d/: Makefile lex.c parse.c scan.c 
	chapel/third-party/dparser/d/tests/: g36.test.g.1.check 

---------------------------------------------------------------------------

04/02/12 15:39:15 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Update grammar to use trailing context.

Modified files:
	chapel/compiler/: chpl.g v.g 

---------------------------------------------------------------------------

04/02/12 18:31:40 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	add support for basic sequences of the form
	
	1..n by m
	
	some work on fa.cpp in preparation for more extensive changes
	to support analysis of sequences and vectors.

Modified files:
	chapel/compiler/: TODO chpl.g fa.cpp fa.h prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: seq.chpl 

---------------------------------------------------------------------------

04/02/13 15:48:39 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	cleaned up instance variable handling and
	updated instance variable test case

Modified files:
	chapel/compiler/: ast.cpp clone.cpp fa.cpp prelude.chpl 
	                  prelude.v 
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

04/02/19 10:36:58 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in d_ws_before

Modified files:
	chapel/third-party/dparser/d/: dparse_tables.h parse.c 

---------------------------------------------------------------------------

04/02/19 11:22:35 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	added support for analyzing vectors and vector operations
	added samples/vec.chpl as vector test case

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h chpl.g fa.cpp grammar.cpp 
	                  if1.cpp prelude.chpl prim.cpp sym.h v.g 
	chapel/compiler/samples/: iv.chpl 
Added files:
	chapel/compiler/samples/: vec.chpl 

---------------------------------------------------------------------------

04/02/19 11:28:53 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	

Removed files:
	chapel/third-party/dparser/: d-1.8-src.tar.gz 

---------------------------------------------------------------------------

04/02/20 10:00:47 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for immediate sequences 1..n by m.
	Reorganized primitive handling in type inference to support
	more complicated transition function more easily.
	Prep for more advanced splitting (type inference of abstract code).

Modified files:
	chapel/compiler/: ast.cpp cfg.cpp chpl.g fa.cpp fa.h grammar.cpp 
	                  make_prims.g prelude.chpl prelude.v prim.h 
	                  prim_data.dat vec.cpp vec.h 

---------------------------------------------------------------------------

04/02/25 16:26:23 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	made forv_Vec (the basis for all the forv_XXX vector iterators) safe with respect to
	changes to the underlying vector.
	- added a new primitive "index_vector" used by the vector class for indexing.
	- made calls on vectors into indexing into the vector, this will be inherited
	by domains.
	- specific symbols are now subtypes of "symbol", specific functions subtypes
	of "function", and functions/methods whose pattern contains an initial symbol
	are subtypes of that symbol (this permits the function to be pattern matched
	to that symbol.
	- fixed bugs in cloning, the type_diff function, etc.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h clone.cpp 
	                  fa.cpp fa.h fa_extras.cpp if1.cpp pnode.h 
	                  prelude.chpl prelude.v prim.cpp prim_data.dat 
	                  vec.h 

---------------------------------------------------------------------------

04/02/26 11:57:51 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	checkpoint for rework of implicit references (e.g. array access, Mat(1))

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h builtin_symbols.h 
	                  driver.cpp fa.cpp fa.h fa_extras.cpp fun.cpp 
	                  prelude.chpl prelude.v sym.h vec.cpp 

---------------------------------------------------------------------------

04/02/26 16:26:33 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Completely new method for handling implicit references (lvals).
	Differentiate using the class as a function (e.g. domain(1..n)) and
	using objects of the class as a function (e.g. Mat(1)).
	Added mvm1.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h fa.cpp fa.h if1.cpp 
	                  prelude.chpl var.cpp var.h 
Added files:
	chapel/compiler/samples/: mvm1.chpl 

---------------------------------------------------------------------------

04/02/27 14:04:26 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- change verbose levels so that -v only returns types
	- new "array" class which combines a domain and a vector
	- support for generalized point-wise operations on arrays
	- combine similar type violations
	- use standard error reporting syntax to report type violations
	- convert to using selectors instead of functions for globally declared
	functions

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h cfg.cpp fa.cpp 
	                  fa.h fa_extras.cpp fun.cpp if1.cpp 
	                  prelude.chpl prelude.v ssu_extra.cpp vec.cpp 

---------------------------------------------------------------------------

04/02/27 16:43:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- add samples/mat1.chpl
	- tweeks to handle samples/mat.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp chpl.g fa.cpp if1.cpp 
	                  prelude.chpl 

---------------------------------------------------------------------------

04/03/01 10:40:57 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fix bug with handling of simple expressions in false forks of conditionals

Modified files:
	chapel/compiler/: TODO ast.cpp if1.cpp 

---------------------------------------------------------------------------

04/03/01 11:07:13 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Chapel syntax for conditionals now: "if" expression "then" expression "else" expression
	Syntax for while loops now: "while" expression "do" expression
	Added samples/mat1.chpl.

Modified files:
	chapel/compiler/: TODO chpl.g 
	chapel/compiler/samples/: mvm1.chpl 
Added files:
	chapel/compiler/samples/: mat1.chpl 

---------------------------------------------------------------------------

04/03/05 16:02:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- integers are now "integer"
	- added sample/matassign1.chpl which is closer to what we have been discussing
	- matassign1.chpl type checks
	- fixed a pattern matching bug in fa.cpp

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp fa.cpp fa.h if1.cpp 
	                  prelude.chpl 
Added files:
	chapel/compiler/samples/: matassign1.chpl 

---------------------------------------------------------------------------

04/03/08 18:13:52 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Added samples/literals.v
	Fixed some bugs with literal handling, added characters, complex and strings as
	builtin types.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h chpl.g fa.cpp 
	                  if1.cpp prelude.chpl prelude.v v.g 
	chapel/third-party/dparser/d/: gram.c grammar.g grammar.g.c 
	chapel/third-party/dparser/d/tests/: g44.test.g 
Added files:
	chapel/compiler/samples/: literal.v 

---------------------------------------------------------------------------

04/03/09 15:00-ish -- bradc (this is a hand-generated message due to
                             problems in the CVS perl scripts when
                             moving to Linux)

Log message:
	Reincorporated changes from ver 1.5 of Makefile to (1) work in
	the face of a missing BUILD_VERSION file and (2) look in the
	Chapel installation of the GC stuff for libraries and headers.

Modified files:
	chapel/third-party/dparser/d/: Makefile



---------------------------------------------------------------------------

04/03/09 15:43:54 -- bradc

Log message:
	Ran into incompatibilities with the CVS perl scripts on Linux, so
	my previous log file got lost and I entered it by hand.  It
	concerned modifications to third-party/dparser/d/Makefile.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

04/03/09 16:21:13 -- jplevyak (a.k.a. n10253)

Log message:
	Removed unnecessary (and error causing) $name "complex"

Modified files:
	chapel/compiler/: v.g 

---------------------------------------------------------------------------

04/03/12 09:55:29 -- jplevyak (a.k.a. n10253)

Log message:
	Added new -t option which dumps the program as cross-linked HTML
	into the "log" directory as "dump.html".
	Fixed a number of bugs discovered by examining the HTML.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp builtin_symbols.h 
	                  clone.cpp driver.cpp driver.h fa.cpp fa.h 
	                  fun.cpp fun.h geysa.h if1.h log.cpp pdb.h 
	                  prelude.chpl prelude.v prim_data.dat sym.h 
	                  vec.cpp 
	chapel/compiler/samples/: literal.v 
Added files:
	chapel/compiler/: bullet.gif dump.cpp dump.h minus.gif 
	                  mktree.css mktree.js plus.gif 

---------------------------------------------------------------------------

04/03/12 15:08:09 -- jplevyak (a.k.a. n10253)

Log message:
	refactor headers for cast.cpp

Modified files:
	chapel/compiler/: TODO cast.cpp if1.h 
Added files:
	chapel/compiler/: num.h 

---------------------------------------------------------------------------

04/03/12 15:51:50 -- bradc

Log message:
	This change is a revamping of the make system, in an attempt to
	make it more modular and more understandable (to myself, at least,
	and hopefully to new implementors as well).
	
	This isn't a perfect check-in:  since compiler code is created
	dynamically, it is difficult to establish dependences for those
	bits of code that are dynamic.  It was hard enough to establish
	proper dependences for those bits of code that #include dynamically-
	created files.  So the main limitation of this version is that
	dependences for dynamically created files (make_prims.cpp,
	*.g.d_parser.cpp, cast_code.cpp) are not generated.  This will be
	fixed when I revisit the topic (probably by keeping these
	dependences under compiler control -- yuck; or simply by requiring
	developers who want such dependences to run make depend after
	they've completed a successful make (also yuck).  Alternatively,
	we could put all code under CVS control, even if it is dynamically
	generated (I'm not sure how fast some of these files change, so
	don't know if this makes sense).
	
	The general organization strategy here is:
	
	- put each binary in its own directory (for understandability)
	- teach the Makefiles how to make everything (so developers don't need
	to know how)
	- no automatic updating of dependences -- developers must do it
	manually
	
	The new directory structure is:
	
	compiler/     -- code for the compiler
	make/       -- stores common Makefile variables, rules
	cast/       -- code to build cast
	make_prims/ -- code to build make_prims
	test/       -- unit tests for the compiler
	
	where each of these subdirectories has a platform-specific
	subdirectory for storing object files, dependence information,
	etc.
	
	The Makefile in compiler/ currently responds to:
	
	all: recursively builds subdirectories, then builds self
	clean: cleans all subdirectories, self
	depend: updates dependences for CVS-controlled sources in
	subdirectories, self
	cleandeps: remove all dependence information in
	subdirectories, self
	clobber: clean up "everything" not under CVS control
	test: builds and runs unit tests
	
	The subdirectories are each structured in a fairly similar way so that
	they can share a bunch of common Makefile rules and variables (stored
	in the compiler/make/ subdirectory) and so that these rules can be
	changed once and affect all the subdirectories.
	
	This took way more work than I expected, due mostly to the existence
	of dynamically generated sources, which threw more monkey wrenches at
	me than I imagined.  I documented some of the problems I was running
	into in make/Makefile.NOTES so that in future changes I don't retread
	over the same path again.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/cast/: .cvsignore Makefile cast.cpp 
	chapel/compiler/make/: Makefile.NOTES Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: .cvsignore Makefile make_prims.cpp 
	                             make_prims.g 
	chapel/compiler/test/: .cvsignore Makefile test_lib.cpp 
Removed files:
	chapel/compiler/: cast.cpp cast_code.cpp make_prims.cpp 
	                  make_prims.g test_lib.cpp 

---------------------------------------------------------------------------

04/03/12 15:53:10 -- bradc

Log message:
	Oops, wasn't quite out at the root of the Chapel tree for that
	last checkin.  The changes to Makefile.base factor some of the
	make_dparser variables out to this level and switch from -L -l
	for libgc.a to simply specifying the library directly (for
	some reason, the former wasn't working for me on Linux).

Modified files:
	chapel/make/: Makefile.base 

