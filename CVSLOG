!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                !
! NOTE: This file is automatically maintained by the CVS system. !
! Please do not update and commit by hand                        !
!                                                                !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


---------------------------------------------------------------------------

01/21/04 13:28:16 -- bradc

Log message:
	This is a test.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

01/21/04 14:13:02 -- bradc

Log message:
	Set the script up to mail both John (here at Cray) and me.

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

01/21/04 14:22:46 -- bradc

Log message:
	Still ashamed for my former sloppiness, made Makefile.base even more
	bulletproof (perhaps overly so :).  Made a rule such that if PLATFORM
	is set to unknown, it prints out a message indicating that the
	platform is not recognized and exits.
	
	In order to make this rule not be the first (and therefore default)
	rule in every Makefile that includes Makefile.base, I added a rule
	"default:" that depends on "all".  Thus, "all" should be the first
	target of every Makefile that we make (this seems to be the convention
	we both favor anyway, so hopefully this isn't too much of an
	imposition).
	
	Also added a Makefile to the make/ directory that prints out all the
	PLATFORM/OS/ARCH information.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile 

---------------------------------------------------------------------------

01/21/04 14:40:16 -- bradc

Log message:
	Got rid of remaining DOS linefeeds.

Modified files:
	chapel/compiler/: prim_data.dat 
	chapel/make/: Makefile.cygwin Makefile.sun 

---------------------------------------------------------------------------

01/22/04 09:58:44 -- bradc

Log message:
	Switched mailing list to chapel_dev@cray.com (should happen on
	next check-in, not this one).

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

01/22/04 09:59:37 -- bradc

Log message:
	Just checking that mail to the new mailing list works.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

01/22/04 12:33:17 -- n10253

Log message:
	Continued work on type checking, parameterized
	types and type constraints on other types (e.g. some_var : some_type).

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h clone.cpp fa.cpp if1.cpp 
	                  sym.h v.g 
Added files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

01/22/04 13:48:26 -- bradc

Log message:
	Improved the Makefile so that clean would remove prim_data.cpp and so
	that a clean build would work without being run twice (previously, it
	seemed to trip over prim_data.cpp being missing the first time and
	then worked the second time).
	
	Improved the .cvsignore files to ignore things created during the
	run of the sample program.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/samples/: .cvsignore 

---------------------------------------------------------------------------

01/22/04 13:56:39 -- bradc

Log message:
	Took a cue from John's mail yesterday and removed the optional
	inclusion of Makefile.$(PLATFORM) to create errors on an unknown
	platform.  Then realized that by moving the rules I'd added to
	Makefile.base to create a nice error message to Makefile.unknown, I
	could still get nice error messages on an unknown platform.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile.unknown 

---------------------------------------------------------------------------

01/22/04 13:58:47 -- bradc

Log message:
	Added dparser's created BUILD_VERSION file to the list of files to be
	ignored in the d/ directory.

Added files:
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

01/23/04 11:49:33 -- n10253

Log message:
	add the binaries and "freebsd"

Modified files:
	chapel/compiler/: .cvsignore 

---------------------------------------------------------------------------

01/23/04 13:15:20 -- n10253

Log message:
	Little bug fixes in preparation for working on structural types.

Modified files:
	chapel/compiler/: fa.cpp if1.cpp 

---------------------------------------------------------------------------

01/23/04 14:46:22 -- n10253

Log message:
	Handle more sorts of argument type constraints.

Modified files:
	chapel/compiler/: TODO ast.cpp 

---------------------------------------------------------------------------

01/26/04 11:30:18 -- n10253

Log message:
	freebsd build directory and a couple more executables into cvsignore

Modified files:
	chapel/third-party/boehmgc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.2/: .cvsignore 
	chapel/third-party/dparser/: .cvsignore 
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

01/28/04 11:55:22 -- n10253

Log message:
	Added "path" argument type to args.*
	Added logging system: see log.h for details.

Modified files:
	chapel/compiler/: Makefile arg.cpp driver.cpp fa.cpp geysa.h 
	                  if1.cpp if1.h sym.h 
Added files:
	chapel/compiler/: log.cpp log.h 

---------------------------------------------------------------------------

01/28/04 12:02:43 -- n10253

Log message:
	Fix minor grammar ambiguity.

Modified files:
	chapel/compiler/: TODO v.g 

---------------------------------------------------------------------------

01/28/04 18:41:34 -- n10253

Log message:
	Implement constant folding.
	Dead code elimination does not yet take constant folding into account.

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h driver.cpp fa.cpp if1.h 
	                  prelude.v prim.cpp prim.h prim_data.dat sym.h 
Added files:
	chapel/compiler/: ast_cf.cpp cast.cpp 

---------------------------------------------------------------------------

01/29/04 15:23:45 -- n10253

Log message:
	Constant folding complete: converts the AST node to an AST_const.
	Abstracted v.g and made a copy in chpl.g in preparations for building
	chapel grammar.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast_cf.cpp chpl.g 
	                  driver.cpp fa_extras.cpp geysa.h if1.cpp map.h 
	                  sym.h v.g 
Added files:
	chapel/compiler/: grammar.cpp grammar.h prelude.chpl 

---------------------------------------------------------------------------

01/30/04 11:36:40 -- bradc

Log message:
	Establishing an examples/ directory for use in managing
	chapel examples and tracking their evolution.  Checking
	in matrix-vector multiplication-related milestone 0 codes,
	including the official consensus code, some interesting
	variations, and some baby steps that should help get us
	there.

Added files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 
	chapel/examples/pre-milestone0/: matadd.chpl matassign.chpl 
	                                 matvectadd.chpl 

---------------------------------------------------------------------------

02/03/04 13:48:58 -- n10253

Log message:
	fix bug in error recovery

Modified files:
	chapel/third-party/dparser/d/: parse.c 

---------------------------------------------------------------------------

02/03/04 15:11:32 -- bradc

Log message:
	Just inserted scripts to update BUILDNUM and CVSLOG files
	in the root chapel/ directory automatically, and inserted
	these files manually.  Just added a header to the top of
	CVSLOG requesting that people not change it manually
	(though it is possible to do so, to commit those changes,
	and then to have the script automatically tack your log to
	the end of those changes, as will happen with this entry.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

02/03/04 15:14:25 -- bradc

Log message:
	Oops, typo in previous log.  BUILDNUM should've
	been BUILD_VERSION.

Modified files:
	./: BUILD_VERSION 
Removed files:
	./: BUILDNUM 

---------------------------------------------------------------------------

02/03/04 16:15:41 -- n10253

Log message:
        casting decision tree

Added files:
        chapel/compiler/: cast_code.cpp 
---------------------------------------------------------------------------

02/03/04 16:29:46 -- bradc

Log message:
	John's last checkin failed to update these files due to a
	permission problem I created, so I've updated them by hand
	as penance.

Modified files:
	./: BUILD_VERSION CVSLOG 

---------------------------------------------------------------------------

02/03/04 16:39:17 -- bradc

Log message:
	Updated the compiler's version machinery from
	Makefile + -D-based technology to a header file
	(version.h) that includes the automatically
	updated BUILD_VERSION file in the parent
	directory.

Modified files:
	chapel/compiler/: Makefile version.cpp 
Added files:
	chapel/compiler/: version.h 
Removed files:
	chapel/compiler/: BUILD_VERSION 

---------------------------------------------------------------------------

02/03/04 16:58:42 -- bradc

Log message:
	Just noticed that when I check in files, it appears that their
	group gets changed from chapel back to criemp.  Am trying to
	fix it, and this checkin is essentially a test (albeit one
	that updates the structure file a bit).

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

02/03/04 17:34:35 -- bradc

Log message:
	Another attempt to fix my permissions problem.  Another small
	modification to the structure file.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

02/04/04 12:41:08 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	very preliminary chapel grammar and prelude
	sample/sample.chpl added, and compiles

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h builtin_symbols.h chpl.g 
	                  fa.cpp prelude.chpl prelude.v prim_data.dat 
	                  v.g 
Added files:
	chapel/compiler/samples/: sample.chpl 

---------------------------------------------------------------------------

02/04/04 14:00:36 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	start a prioritized TODO list

Modified files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

02/09/04 16:39:53 -- bradc

Log message:
	Changed dimension of reduction to be correct.

Modified files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 

---------------------------------------------------------------------------

02/10/04 14:53:16 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Extensive changes to the way assignment occurs.
	Assignment is now mediated through methods.  All variables
	are converted to references to be assigned.  This permits
	complex left-hand sides to be type infered correctly, e.g.
	
	a.b.c.d = 5;

Modified files:
	chapel/compiler/: ast.cpp ast_cf.cpp builtin_symbols.h chpl.g 
	                  fa.cpp fa_extras.cpp prelude.chpl prelude.v 
	                  prim_data.dat v.g 
Added files:
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

02/12/04 10:48:45 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for trailing context to scanner

Modified files:
	chapel/third-party/dparser/d/: CHANGES COPYRIGHT Makefile README 
	                               arg.c arg.h d.h dparse.h 
	                               dparse_tables.h dsymtab.h gram.c 
	                               gram.h gramgram.h grammar.g.c 
	                               index.html lex.c lex.h lr.c lr.h 
	                               make_dparser.c parse.c parse.h 
	                               sample_parser.c scan.c scan.h 
	                               symtab.c util.c util.h version.c 
	                               write_ctables.c write_ctables.h 
	chapel/third-party/dparser/d/python/: dparser_wrap.c test.py 
	chapel/third-party/dparser/d/verilog/: Makefile ambig.c main.c 
	                                       vparse.c 
Added files:
	chapel/third-party/dparser/d/tests/: g46.test.g g46.test.g.1 
	                                     g46.test.g.1.check 

---------------------------------------------------------------------------

02/12/04 15:38:21 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in the trailing context code.
	Updated test cases.

Modified files:
	chapel/third-party/dparser/d/: Makefile lex.c parse.c scan.c 
	chapel/third-party/dparser/d/tests/: g36.test.g.1.check 

---------------------------------------------------------------------------

02/12/04 15:39:15 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Update grammar to use trailing context.

Modified files:
	chapel/compiler/: chpl.g v.g 

---------------------------------------------------------------------------

02/12/04 18:31:40 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	add support for basic sequences of the form
	
	1..n by m
	
	some work on fa.cpp in preparation for more extensive changes
	to support analysis of sequences and vectors.

Modified files:
	chapel/compiler/: TODO chpl.g fa.cpp fa.h prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: seq.chpl 

---------------------------------------------------------------------------

02/13/04 15:48:39 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	cleaned up instance variable handling and
	updated instance variable test case

Modified files:
	chapel/compiler/: ast.cpp clone.cpp fa.cpp prelude.chpl 
	                  prelude.v 
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

02/19/04 10:36:58 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in d_ws_before

Modified files:
	chapel/third-party/dparser/d/: dparse_tables.h parse.c 

---------------------------------------------------------------------------

02/19/04 11:22:35 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	added support for analyzing vectors and vector operations
	added samples/vec.chpl as vector test case

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h chpl.g fa.cpp grammar.cpp 
	                  if1.cpp prelude.chpl prim.cpp sym.h v.g 
	chapel/compiler/samples/: iv.chpl 
Added files:
	chapel/compiler/samples/: vec.chpl 

---------------------------------------------------------------------------

02/19/04 11:28:53 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	

Removed files:
	chapel/third-party/dparser/: d-1.8-src.tar.gz 

---------------------------------------------------------------------------

02/20/04 10:00:47 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for immediate sequences 1..n by m.
	Reorganized primitive handling in type inference to support
	more complicated transition function more easily.
	Prep for more advanced splitting (type inference of abstract code).

Modified files:
	chapel/compiler/: ast.cpp cfg.cpp chpl.g fa.cpp fa.h grammar.cpp 
	                  make_prims.g prelude.chpl prelude.v prim.h 
	                  prim_data.dat vec.cpp vec.h 

---------------------------------------------------------------------------

02/25/04 16:26:23 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	made forv_Vec (the basis for all the forv_XXX vector iterators) safe with respect to
	changes to the underlying vector.
	- added a new primitive "index_vector" used by the vector class for indexing.
	- made calls on vectors into indexing into the vector, this will be inherited
	by domains.
	- specific symbols are now subtypes of "symbol", specific functions subtypes
	of "function", and functions/methods whose pattern contains an initial symbol
	are subtypes of that symbol (this permits the function to be pattern matched
	to that symbol.
	- fixed bugs in cloning, the type_diff function, etc.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h clone.cpp 
	                  fa.cpp fa.h fa_extras.cpp if1.cpp pnode.h 
	                  prelude.chpl prelude.v prim.cpp prim_data.dat 
	                  vec.h 

---------------------------------------------------------------------------

02/26/04 11:57:51 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	checkpoint for rework of implicit references (e.g. array access, Mat(1))

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h builtin_symbols.h 
	                  driver.cpp fa.cpp fa.h fa_extras.cpp fun.cpp 
	                  prelude.chpl prelude.v sym.h vec.cpp 

---------------------------------------------------------------------------

02/26/04 16:26:33 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Completely new method for handling implicit references (lvals).
	Differentiate using the class as a function (e.g. domain(1..n)) and
	using objects of the class as a function (e.g. Mat(1)).
	Added mvm1.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h fa.cpp fa.h if1.cpp 
	                  prelude.chpl var.cpp var.h 
Added files:
	chapel/compiler/samples/: mvm1.chpl 

---------------------------------------------------------------------------

02/27/04 14:04:26 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- change verbose levels so that -v only returns types
	- new "array" class which combines a domain and a vector
	- support for generalized point-wise operations on arrays
	- combine similar type violations
	- use standard error reporting syntax to report type violations
	- convert to using selectors instead of functions for globally declared
	functions

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h cfg.cpp fa.cpp 
	                  fa.h fa_extras.cpp fun.cpp if1.cpp 
	                  prelude.chpl prelude.v ssu_extra.cpp vec.cpp 

---------------------------------------------------------------------------

02/27/04 16:43:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- add samples/mat1.chpl
	- tweeks to handle samples/mat.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp chpl.g fa.cpp if1.cpp 
	                  prelude.chpl 

---------------------------------------------------------------------------

03/01/04 10:40:57 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fix bug with handling of simple expressions in false forks of conditionals

Modified files:
	chapel/compiler/: TODO ast.cpp if1.cpp 

---------------------------------------------------------------------------

03/01/04 11:07:13 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Chapel syntax for conditionals now: "if" expression "then" expression "else" expression
	Syntax for while loops now: "while" expression "do" expression
	Added samples/mat1.chpl.

Modified files:
	chapel/compiler/: TODO chpl.g 
	chapel/compiler/samples/: mvm1.chpl 
Added files:
	chapel/compiler/samples/: mat1.chpl 

---------------------------------------------------------------------------

03/05/04 16:02:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- integers are now "integer"
	- added sample/matassign1.chpl which is closer to what we have been discussing
	- matassign1.chpl type checks
	- fixed a pattern matching bug in fa.cpp

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp fa.cpp fa.h if1.cpp 
	                  prelude.chpl 
Added files:
	chapel/compiler/samples/: matassign1.chpl 

---------------------------------------------------------------------------

03/08/04 18:13:52 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Added samples/literals.v
	Fixed some bugs with literal handling, added characters, complex and strings as
	builtin types.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h chpl.g fa.cpp 
	                  if1.cpp prelude.chpl prelude.v v.g 
	chapel/third-party/dparser/d/: gram.c grammar.g grammar.g.c 
	chapel/third-party/dparser/d/tests/: g44.test.g 
Added files:
	chapel/compiler/samples/: literal.v 

---------------------------------------------------------------------------

03/09/04 15:00-ish -- bradc (this is a hand-generated message due to
                             problems in the CVS perl scripts when
                             moving to Linux)

Log message:
	Reincorporated changes from ver 1.5 of Makefile to (1) work in
	the face of a missing BUILD_VERSION file and (2) look in the
	Chapel installation of the GC stuff for libraries and headers.

Modified files:
	chapel/third-party/dparser/d/: Makefile



---------------------------------------------------------------------------

03/09/04 15:43:54 -- bradc

Log message:
	Ran into incompatibilities with the CVS perl scripts on Linux, so
	my previous log file got lost and I entered it by hand.  It
	concerned modifications to third-party/dparser/d/Makefile.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

03/09/04 16:21:13 -- jplevyak (a.k.a. n10253)

Log message:
	Removed unnecessary (and error causing) $name "complex"

Modified files:
	chapel/compiler/: v.g 

---------------------------------------------------------------------------

03/12/04 09:55:29 -- jplevyak (a.k.a. n10253)

Log message:
	Added new -t option which dumps the program as cross-linked HTML
	into the "log" directory as "dump.html".
	Fixed a number of bugs discovered by examining the HTML.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp builtin_symbols.h 
	                  clone.cpp driver.cpp driver.h fa.cpp fa.h 
	                  fun.cpp fun.h geysa.h if1.h log.cpp pdb.h 
	                  prelude.chpl prelude.v prim_data.dat sym.h 
	                  vec.cpp 
	chapel/compiler/samples/: literal.v 
Added files:
	chapel/compiler/: bullet.gif dump.cpp dump.h minus.gif 
	                  mktree.css mktree.js plus.gif 

---------------------------------------------------------------------------

03/12/04 15:08:09 -- jplevyak (a.k.a. n10253)

Log message:
	refactor headers for cast.cpp

Modified files:
	chapel/compiler/: TODO cast.cpp if1.h 
Added files:
	chapel/compiler/: num.h 

---------------------------------------------------------------------------

03/12/04 15:51:50 -- bradc

Log message:
	This change is a revamping of the make system, in an attempt to
	make it more modular and more understandable (to myself, at least,
	and hopefully to new implementors as well).
	
	This isn't a perfect check-in:  since compiler code is created
	dynamically, it is difficult to establish dependences for those
	bits of code that are dynamic.  It was hard enough to establish
	proper dependences for those bits of code that #include dynamically-
	created files.  So the main limitation of this version is that
	dependences for dynamically created files (make_prims.cpp,
	*.g.d_parser.cpp, cast_code.cpp) are not generated.  This will be
	fixed when I revisit the topic (probably by keeping these
	dependences under compiler control -- yuck; or simply by requiring
	developers who want such dependences to run make depend after
	they've completed a successful make (also yuck).  Alternatively,
	we could put all code under CVS control, even if it is dynamically
	generated (I'm not sure how fast some of these files change, so
	don't know if this makes sense).
	
	The general organization strategy here is:
	
	- put each binary in its own directory (for understandability)
	- teach the Makefiles how to make everything (so developers don't need
	to know how)
	- no automatic updating of dependences -- developers must do it
	manually
	
	The new directory structure is:
	
	compiler/     -- code for the compiler
	make/       -- stores common Makefile variables, rules
	cast/       -- code to build cast
	make_prims/ -- code to build make_prims
	test/       -- unit tests for the compiler
	
	where each of these subdirectories has a platform-specific
	subdirectory for storing object files, dependence information,
	etc.
	
	The Makefile in compiler/ currently responds to:
	
	all: recursively builds subdirectories, then builds self
	clean: cleans all subdirectories, self
	depend: updates dependences for CVS-controlled sources in
	subdirectories, self
	cleandeps: remove all dependence information in
	subdirectories, self
	clobber: clean up "everything" not under CVS control
	test: builds and runs unit tests
	
	The subdirectories are each structured in a fairly similar way so that
	they can share a bunch of common Makefile rules and variables (stored
	in the compiler/make/ subdirectory) and so that these rules can be
	changed once and affect all the subdirectories.
	
	This took way more work than I expected, due mostly to the existence
	of dynamically generated sources, which threw more monkey wrenches at
	me than I imagined.  I documented some of the problems I was running
	into in make/Makefile.NOTES so that in future changes I don't retread
	over the same path again.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/cast/: .cvsignore Makefile cast.cpp 
	chapel/compiler/make/: Makefile.NOTES Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: .cvsignore Makefile make_prims.cpp 
	                             make_prims.g 
	chapel/compiler/test/: .cvsignore Makefile test_lib.cpp 
Removed files:
	chapel/compiler/: cast.cpp cast_code.cpp make_prims.cpp 
	                  make_prims.g test_lib.cpp 

---------------------------------------------------------------------------

03/12/04 15:53:10 -- bradc

Log message:
	Oops, wasn't quite out at the root of the Chapel tree for that
	last checkin.  The changes to Makefile.base factor some of the
	make_dparser variables out to this level and switch from -L -l
	for libgc.a to simply specifying the library directly (for
	some reason, the former wasn't working for me on Linux).

Modified files:
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

03/12/04 16:26:36 -- jplevyak (a.k.a. n10253)

Log message:
	change recursive make invocations to use $(MAKE) so as to
	use the same version of make as the original invocation
	(necessary on FreeBSD where the default make is not gmake)

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

03/16/04 12:44:42 -- jplevyak (a.k.a. n10253)

Log message:
	remove "dead" cruft from dump

Modified files:
	chapel/compiler/: TODO dump.cpp 

---------------------------------------------------------------------------

03/16/04 18:16:38 -- jplevyak (a.k.a. n10253)

Log message:
	print out folded constants in dump.html
	add test case in samples for constant folding: samples/constant_folding.v

Modified files:
	chapel/compiler/: ast.cpp ast.h ast_cf.cpp builtin_symbols.h 
	                  dump.cpp fa.cpp prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: constant_folding.v 

---------------------------------------------------------------------------

03/17/04 12:58:45 -- jplevyak (a.k.a. n10253)

Log message:
	Begin work on indexing into tuples.  To get this to work I
	need to implement constant propogation and inlining.

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp dump.cpp fa.cpp if1.cpp 
	                  misc.cpp misc.h sym.h 

---------------------------------------------------------------------------

03/17/04 13:22:30 -- bradc

Log message:
	Broke argv[0] down into the program's name and its directory
	location.  Added a field for the latter in the ArgumentState
	descriptor, and used it to initialize the system_dir option.
	Eliminated a static variable in driver.cpp that duplicated
	the former.
	
	If a directory name isn't given in argv[0], "." is assumed
	(whereas the better behavior would be to search the path).
	I may add this in the future, but for now it seems no worse
	than it was before in such cases.

Modified files:
	chapel/compiler/: arg.cpp arg.h driver.cpp 

---------------------------------------------------------------------------

03/17/04 13:41:54 -- bradc

Log message:
	Squelched the creation of the log/ subdirectory unless the user
	requests the creation of a log or an HTML dump.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

03/18/04 10:13:06 -- jplevyak (a.k.a. n10253)

Log message:
	update __index_vector to __index.

Modified files:
	chapel/compiler/: prelude.chpl 

---------------------------------------------------------------------------

03/18/04 15:34:43 -- bradc

Log message:
	First version of the regression test system.
	
	Instructions for use (from the top of the start_test script):
	
	--------------------
	
	Executive Summary: The overall flow of the testing system is that it
	will recursively descend into subdirectories looking for Chapel
	programs to compile and run (*.chpl) as well as for other tests to
	run (sub_test).  The output of these runs will typically be logged
	in a file stored in the Logs/ subdirectory, as will a summary of the
	errors reported (determined by grepping for the string "[Error", so
	don't have your program print this out.
	
	Here's the directory structure:
	
	Bin/     -- contains binary files/scripts required by the testing
	system, such as the timedexec script which kills a
	test if it takes too long
	Logs/    -- logs of testing runs go here by default
	Samples/ -- sample tests go here; these are for illustration only
	and won't be run by default.  To try running the
	test system against these samples, use:
	start_test -startdir ./Samples
	*/       -- all other directories will contain tests
	
	The start_test script kicks off all the action.  With no arguments,
	it will run all the tests using the defaults.  The '-h' option lists
	the options that the script accepts and the default values.  Current
	options are:
	
	option     argument               default value
	---------  ---------------------  -------------
	-compiler  <compiler executable>  ../compiler/chpl
	-compopts  <option list>          ""
	-execopts  <option list>          ""
	-startdir  <test subdir>          .
	-logfile   <log filename>         ./Logs/<username>.log
	
	The -compiler option allows the user to specify the compiler to test
	if it is something other than the obvious one in the current CVS
	structure.  This lets one run other people's compilers, old copies
	of compilers, etc.
	
	The -compopts option allows the user to specify a set of compiler
	options that should be used on every invocation to the compiler.
	Additional compiler options can be specified on a directory-by-
	directory basis.
	
	The -execopts option allows the user to specify a set of execution
	options that should be used on every invocation of a program.  As
	with compiler options, these can be ammended in each subdirectory.
	
	The -startdir option allows the user to specify a subdirectory of
	the testing system to start in (and limit itself to).  Assuming
	that tests are sorted into subdirectories by useful features, this
	allows you to run a subset of the tests easily.
	
	The -logfile option indicates where the log of the test run should
	be kept.  By default it's based on the user's name.  If the log
	file already exists, you will be prompted at the beginning of the
	run whether you want to delete that file or not.  At the end of
	the run, a second log file named <logfile>.summary will be
	generated containing only the Errors that were logged.
	
	By default, setting up a subdirectory for testing simply consists
	of creating the directory, putting Chapel (.chpl) source files
	into it and an expected output file (.chk) for each source file
	(using the same base name).  Upon reaching such a directory, the
	testing system will run the specified compiler on each Chapel
	source file using the specified compiler options, then (assuming
	the compile completed successfully, execute the resulting program
	using the specified execution options.  The output from both the
	compilation and the execution are concatenated and diff'd against
	the .chk file.  This allows programs that are supposed to generate
	errors, warnings, and correct programs to all be tested using the
	same mechanisms.
	
	Particular subdirectories can also be customized if necessary.
	Note that such customizations are not inherited recursively by
	further subdirectories, but apply only to the directory in
	question (we might consider changing this in future versions).
	The customizations are as follows:
	
	- if the subdirectory contains an executable sub_test script,
	that script will be used to run the tests in that directory
	rather than the default sub_test script (located in this
	directory).  A sub_test script may take whatever actions it
	wants, and is simply expected to generate any errors using
	the "[Error ...]" format so that it will show up in the
	summary.  Similarly, the script should generate any warnings
	or successful tests using "[Warning ...]" "[Success ...]"
	messages for consistency.  The sub_test script will be
	sent two arguments: (1) the compiler to use, and (2) the
	location of this main test/ directory.  The compiler and
	execution options will be stored in environment variables
	named COMPOPTS and EXECOPTS, respectively.
	
	- if the subdirectory contains a NOTEST file, that directory
	will not be considered for testing.  This can be useful for
	disabling subdirectories containing tests that don't work
	yet, or subdirectories that contain input files for other
	tests (though they will also be ignored if they fail to
	contain any .chpl files...)
	
	- if the subdirectory contains a COMPOPTS or EXECOPTS file,
	the options listed in that file will be added to the compiler
	and execution options for that subdirectory.  NOTE: be sure
	not to end the file with a linefeed -- it should simply be a
	list of options on the first line, followed <eof>.
	
	- if the subdirectory contains a CATFILES file, then the files
	listed in that file will be concatenated to the end of the
	compiler/execution output for each test.  For tests that
	generate files (either as a result of the compilation or
	as part of the executable's behavior), this can be used to
	ensure that the generated file's contents are correct without
	writing a specialized sub_test script.  Again, this file should
	be a single line with no linefeeds.
	
	- if the subdirectory contains a TIMEOUT file, then that file
	will be read to determine the number of seconds that the tests
	in the directory should be allowed to run before being killed.
	The default is currently 5 minutes.
	
	- subdirectory-specific .cvsignore files can also be very
	helpful so that files generated during testing won't clutter
	the results of a cvs -nq update command.
	
	Also worth describing here is the start_clean script which walks
	the directory structure in a similar manner and cleans up --
	removing the generated executables, core files, and *.tmp files
	which store any mismatching output.  The user can also specify
	subdirectory-specific things to clean up usinng a CLEANFILES
	file that lists other targets to remove (called with the -rf
	flag, so subdirectories will work here as well).  The idea is
	that after start_clean runs, the testing system should be left
	in a state pretty close to what's checked into the CVS tree.
	
	Again, to see a sample run of the testing system, look through
	the Samples/ directory, then run:
	
	./start_test -startdir Samples
	
	and inspect the Samples/ and Logs/ subdirectories to see what
	was generated.  Then use:
	
	./start_clean -startdir Samples
	
	to clean back up again.
	
	--------------

Added files:
	chapel/test/: start_clean start_test sub_clean sub_test 
	chapel/test/Bin/: timedexec 
	chapel/test/Logs/: .keepme 
	chapel/test/Samples/ex1-astlog/: .cvsignore CATFILES CLEANFILES 
	                                 COMPOPTS astlog1.chk 
	                                 astlog1.chpl 
	chapel/test/Samples/ex2-notest/: NOTEST illegal.chk illegal.chpl 
	chapel/test/Samples/ex3-fails/: .cvsignore intendedToFail.chk 
	                                intendedToFail.chpl 

---------------------------------------------------------------------------

03/18/04 15:36:22 -- bradc

Log message:
	Added a command to run etags on the chapel compiler sources after
	chapel is linked.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

03/22/04 16:43:30 -- bradc

Log message:
	Learned that the time to build on an NFS-mounted directory was
	painfully slow (10x slowdown for some commands), so added the
	option to set an environment variable CHPLDEVTMP which, when
	set, gives a root directory for writing .o's, .a's, and
	executables.  For example, on lotus, I set CHPLDEVTMP
	to /ptmp.  When compiling, rather than creating linux/
	subdirectories in the various directories, the Makefiles
	create a directory /ptmp/chapel-bradc/, mirror my source tree's
	structure under that point, and then sets up symbolic links
	to these directories for my linux/ subdirectories.  If CHPLDEVTMP
	is not set, things behave as they previously did.
	
	Well, almost... Two other changes made by this check-in:
	
	1) binaries are now built in the platform-specific subdirectories
	first.  Thus, your link line will look something like:
	
	g++ -o linux/chpl foo.o boo.o goo.o ...
	
	Then, a symbolic link to the binary is set up in the directory
	you're working in.  (Could switch this to a copy if anyone
	prefers).
	
	2) I defined the rule for how to build or build&link a platform-
	specific subdirectory in the make/Makefile.base file, included
	by all our other Makefiles, so added a rule prior to it:
	
	default: all
	
	so that when make is typed in any of these directories, you
	get the same behavior as before (previously, the first target
	in each of our Makefiles was "all").  One effect this has is
	that if you're hacking on a local Makefile and insert a rule
	before all, thinking that it will be the default, you'll be
	wrong (unless you also put it before the include Makefile.base).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/cast/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	chapel/compiler/make_prims/: Makefile 
	chapel/compiler/test/: Makefile 
	chapel/make/: Makefile.base 
	chapel/third-party/: Makefile 
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

03/22/04 17:26:17 -- jplevyak (a.k.a. n10253)

Log message:
	This is a big checkin.
	
	1. Added graphing of internal data structures.
	2. Added interprocedural constant propogation
	3. The HTML dump and graphing show reaching interprocedural constants.
	Currently I am not limiting these... when the overhead get's too high
	I'll get around to writing the code to convert them into "some integer"
	which is already supported.
	4. Changed the way assignment works so that SSU form is useful (I was using
	references for all assignment).
	5. Added support for "inout" parameters, currently used for the
	(overloaded) make-reference operator.  This is indicated by
	putting a 'var' before the parameter.
	6. Added some support for 'const' to the Chapel grammar.  Now the AST is
	decorated with 'constness'.
	7. Added 'let' to the Chapel grammar.  This permits simple bindings instead
	of just non-SSA 'var' style bindings.  We can remove this if everyone
	hates it, but it is useful for testing.
	
	Graphing
	
	-G turns on graphing, graphs are put in the log directory
	two formats are supported, VCG and GraphViz.
	
	VCG is interactive, and let's you collapse and limit the
	graph dynamically.  It is described and the source code
	is available at:
	
	http://rw4.cs.uni-sb.de/users/sander/html/gsvcg1.html
	
	GraphViz is static, but it produces somewhat more pleasing
	files and outputs to postscript (amoung other formats).
	
	It is described and the source code is available at:
	
	http://www.research.att.com/sw/tools/graphviz/
	
	The output defaults to VCG, GraphViz is supported
	by --graphviz.
	
	Currently you can output the AST, the CFG, the SSU graph and
	the flow variables.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast.h ast_cf.cpp chpl.g 
	                  clone.cpp code.h driver.cpp driver.h dump.cpp 
	                  fa.cpp fa.h fa_extras.cpp geysa.h if1.cpp 
	                  parse.cpp parse.h prelude.chpl prelude.v 
	                  prim.cpp prim_data.dat sym.h v.g var.h vec.cpp 
	                  vec.h 
Added files:
	chapel/compiler/: graph.cpp graph.h 
	chapel/compiler/samples/: ref.v tuples.v 

---------------------------------------------------------------------------

03/24/04 12:59:18 -- bradc

Log message:
	This checkin adds some crufty support for some trivial code
	generation (disabled by default), but lays in support for
	creating that source in a temporary directory, runtime
	libraries to support the source, compiling the source against
	the runtime libraries and moving the resulting binary back to
	the current working directory.  So consider it more infrastructure
	than any true support for code generation.
	
	Added new files to the compiler sources:
	codegen.cpp : the seat of code generation, currently
	files.cpp : utilities related to the tmp directory, int. files
	mysystem.cpp : wrapper around system() for issuing subcommands
	stringutil.cpp : some simple string utilities
	
	Notes:
	
	1) The tmp directory used for intermediates is stored in
	/tmp/chpl-deleteme.<pid>, where <pid> is the process ID
	of the compiler.  It currently isn't removed when compiles
	fail (fail, show_error, INT_ERROR, etc.) because I have
	a nasty fear of blowing away John's root directory again.
	After gaining some confidence with this, it should be
	blown away in these cases as well.  For the time being,
	if you're messing with code generation, you may want to
	monitor your /tmp directory and clean up by hand.  (Note
	that since codegen is currently disabled, you won't get
	these at all unless you take pains to enable them).
	
	2) Added some support for "internal errors" in misc.h/cpp via
	the macro INT_FATAL(ast, format, ...), which takes an
	AST* (or NULL if no obvious AST* is related), a printf-style
	format string, and the supporting args.  This prints out
	where in the compiler source the internal failure occurred,
	the argument message, and the source location that the AST
	corresponds to.  These are perhaps redundant with assert(),
	but I've never been a big fan of assert() (hard to set
	breakpoints on).  I'm open to persuasion for other approaches
	or modifications to this one.
	
	3) mysystem() (defined in mysystem.cpp) is currently simply a
	wrapper around C's system() to handle return codes, print
	out messages to the user, etc.  Eventually, it'll also
	print out the commands it's executing given an appropriate
	flag once I get around to adding some flag.
	
	4) Currently the binary is always named a.out.  Something else
	I need to add a flag for.
	
	5) stringutil.cpp contains a routine called glomstrings() that
	takes the number of strings and a varags list of char*
	pointers, mallocs the right amount of buffer space for
	them, glomst them all together, and returns the new string.
	Useful for building filenames and commands for mysystem().
	
	6) Factored the platform-decision stuff out of make/Makefile.base
	in order to use it in building the generated sources as well.
	
	7) The runtime directory structure is currently organized:
	
	chapel/
	runtime/
	etc/ -- Makefiles and such for building generated code
	include/ -- header files for generated code/runtime libs
	src/ -- source code for runtime libs

Modified files:
	chapel/compiler/: Makefile driver.cpp misc.cpp misc.h 
	chapel/make/: Makefile.base 
Added files:
	chapel/compiler/: FILES codegen.cpp codegen.h files.cpp files.h 
	                  mysystem.cpp mysystem.h stringutil.cpp 
	                  stringutil.h 
	chapel/make/: Makefile.platform 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: chplio.h chpltypes.h stdchpl.h 
	chapel/runtime/src/: .cvsignore Makefile chplio.c main.c 

---------------------------------------------------------------------------

03/25/04 10:46:20 -- bradc

Log message:
	This checkin adds some flags to help control the compilation
	process (1).  It also adds some better error messages when flags
	are used improperly (2). Inserted some tests to protect these
	error messages (3) and added a new (minor) test feature (4).
	I also hoisted some code out of the geysa.h file into more specific
	header files (5).
	
	(1) The new flags are:
	
	-o --output <exename> : specify the name of the final binary
	--savec  <dir>    : save the intermediate C in the specified dir
	--print-commands  : print the system() commands executed
	
	(2) The changes to how flags are handled are:
	
	* if a flag that requires an argument isn't followed by an argument,
	an appropriate error message is printed out.
	
	* if an unrecognized flag is encountered, an appropriate error message
	is printed out.
	
	* if the copyright flag is used, the usage() information isn't printed
	
	(3) The first tests!  I put these in a directory called compflags/ to
	test compiler options.  I also added a DIRS file to the root test
	directory to serve as a guide to the directories and what their
	intention is.
	
	(4) The new feature in the testing system is support for a
	LASTCOMPOPTS file, similar to the COMPOPTS file, but which
	follows the source filename argument.  Thus, the most
	general compile line will be:
	
	chpl <-compopts> <COMPOPTS> source.chpl <LASTCOMPOPTS>
	
	(5) The code hoisted out of geysa.h is as follows:
	
	chplalloc.h : memory allocation routines
	chpltypes.h : basic integer typedefs (uint64, etc.)
	extern.h    : EXTERN-related stuff
	version.h   : moved get_version() prototype here

Modified files:
	chapel/compiler/: arg.cpp codegen.cpp driver.cpp files.cpp 
	                  files.h geysa.h mysystem.cpp mysystem.h 
	                  version.h 
	chapel/test/: start_test sub_test 
Added files:
	chapel/compiler/: chplalloc.h chpltypes.h extern.h 
	chapel/test/: DIRS 
	chapel/test/compflags/bradc/badflagdash/: COMPOPTS declint.chk 
	                                          declint.chpl 
	chapel/test/compflags/bradc/badflagddash/: COMPOPTS declint.chk 
	                                           declint.chpl 
	chapel/test/compflags/bradc/copyright/: COMPOPTS declint.chk 
	                                        declint.chpl 
	chapel/test/compflags/bradc/missingargdash/: LASTCOMPOPTS 
	                                             declint.chk 
	                                             declint.chpl 
	chapel/test/compflags/bradc/missingargddash/: LASTCOMPOPTS 
	                                              declint.chk 
	                                              declint.chpl 

---------------------------------------------------------------------------

03/25/04 17:05:43 -- bradc

Log message:
	Incidental changes.  Did some work in starting to make header files
	stand more independently so that if one wanted to write code using
	the "AST" type, they could #include "ast.h" without having to worry
	so much about what it depended on.  This is by no means complete,
	but will be a lazy-evaluation background task.
	
	Also found that "echo -n" didn't work by default on the Suns, which
	created illegal dependence files, so reworked the Makefiles so that
	platforms could define their own ECHO target for use with echo -n
	(lazily, I only changed those echo commands in Makefiles that actually
	use -n...)

Modified files:
	chapel/compiler/: Makefile ast.h code.h codegen.cpp codegen.h 
	                  fa.h files.cpp fun.h list.h map.h misc.h 
	                  mysystem.cpp region.h stringutil.cpp sym.h 
	                  var.h 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.base Makefile.freebsd Makefile.linux 
	              Makefile.sun 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

03/26/04 11:45:53 -- bradc

Log message:
	Minor changes.  codegen is still off by default:
	
	1) fixed the generation of write() calls to use the type_info of its
	arguments in generating the routine name (previously it was
	hard-wired to integer64).
	
	2) changed the runtime library's write() implementation to take a
	format flag in expectation of this need down the road.
	
	3) added a clean_exit() routine to use in place of exit() that blows
	away the /tmp directory created by code generation (if it exists)
	and switched error routines over to using this routine.  Also
	added a catch of SIGINT that calls fail() and will similarly blow
	away the /tmp directory (should probably add more signals, but
	I'm too lazy to try and come up with a portable list of signals
	that we'd want to catch today.

Modified files:
	chapel/compiler/: codegen.cpp files.cpp files.h misc.cpp 
	chapel/runtime/include/: chplio.h chpltypes.h 
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

03/26/04 11:56:47 -- jplevyak (a.k.a. n10253)

Log message:
	Bug in comparison routine passed to qsort.

Modified files:
	chapel/third-party/dparser/d/: lr.c 

---------------------------------------------------------------------------

03/26/04 12:01:21 -- jplevyak (a.k.a. n10253)

Log message:
	Suppression file for use with the Boehm GC and valgrind vr 2.0.0

Added files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

03/26/04 14:15:38 -- bradc

Log message:
	Found some portability problems on the Sun with the Makefiles
	and regression tests, so fixed these.  Updated some other
	files.

Modified files:
	./: Makefile 
	chapel/make/: Makefile Makefile.platform 
	chapel/test/: DIRS start_test sub_test 
Added files:
	./: DIRS 
	chapel/runtime/: Makefile 
Removed files:
	./: structure.txt 
	chapel/make/: Makefile.gcc 

---------------------------------------------------------------------------

03/26/04 14:18:14 -- bradc

Log message:
	Never seem to have gotten this file checked in.

Added files:
	chapel/test/Logs/: .cvsignore 

---------------------------------------------------------------------------

03/26/04 15:02:02 -- bradc

Log message:
	Enabled the testing system to run binaries produced by the
	compiler by default when testing a directory.  Also added
	support for a new feature:  When a NOEXEC file is placed
	in a subdirectory of the testing system, the source files
	in that directory will only be compiled and the compiler's
	output will be diff'd against the expected output -- any
	generated executables will not be run.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/compflags/bradc/copyright/: NOEXEC 

---------------------------------------------------------------------------

03/26/04 15:28:01 -- bradc

Log message:
	Cleaned up the handling of literals for now.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

03/26/04 15:28:57 -- bradc

Log message:
	Added support for printing strings (string literals, at least).

Modified files:
	chapel/runtime/include/: chplio.h chpltypes.h 

---------------------------------------------------------------------------

03/26/04 15:29:31 -- bradc

Log message:
	Oops, I'm getting too fast.  This should've gone with the
	last checkin.

Modified files:
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

03/26/04 16:36:52 -- bradc

Log message:
	Fixed a bug in which running the compiler using a relative
	directory was breaking the "make" of the generated code.
	In doing so, turned up and fixed a subtle buffer overrun
	error that I'd missed previously (in the one place that
	I wasn't using the -- so far -- bulletproof "glomstrings()"
	function... :)

Modified files:
	chapel/compiler/: files.cpp 

---------------------------------------------------------------------------

03/31/04 19:01:09 -- jplevyak (a.k.a. n10253)

Log message:
	Added dominator computation a la Tarjan
	Added loop recognition a la modified Sreedhar-Gao-Lee Algorithm
	Added simple inlining
	Added interprocedural constant propogation
	Added new graph types:
	loops (procudural loops)
	rec (interprocedural loops)
	dom (dominators)
	calls (call graph)
	Added frequency estimation based on loop analysis
	Added the ability to annotate the graphs with frequency estimates.
	
	You may be wondering why I did procedural loop analysis instead
	of using the AST.  Well, in addition to being able to recognize
	loops constructed from goto and the like, I needed to do interprocedural
	loop recognition to handle recursion, and it is the same algorithm.
	
	Fixed a number of bugs in numeric coersion, constrol region nesting,
	SSU conversion, the grammars, etc.

Modified files:
	chapel/compiler/: Makefile TODO ast.h chpl.g clone.cpp clone.h 
	                  driver.cpp driver.h dump.cpp dump.h fa.cpp 
	                  fa.h fun.cpp fun.h geysa.h grammar.cpp 
	                  graph.cpp graph.h map.h num.h pdb.h pnode.cpp 
	                  pnode.h prelude.v region.h scope.h ssu.cpp v.g 
	                  valgrind.suppressions var.h vec.cpp vec.h 
Added files:
	chapel/compiler/: dom.cpp dom.h inline.cpp inline.h loop.cpp 
	                  loop.h 
	chapel/compiler/samples/: bug1.v const.v inline.v loop1.v 
	                          loop2.v loop_endless.v rec.v 

---------------------------------------------------------------------------

04/01/04 16:08:10 -- bradc

Log message:
	Updated the astlog example a bit to (1) get the log file in
	synch with, well, my latest version of the compiler (I still
	haven't merged in John's latest changes), and (2) now that
	we're looking for an executable to run, added the NOEXEC file
	to indicate that this test is only meant to be compiled, not
	run.

Modified files:
	chapel/test/Samples/ex1-astlog/: .cvsignore astlog1.chk 
Added files:
	chapel/test/Samples/ex1-astlog/: NOEXEC 

---------------------------------------------------------------------------

04/01/04 17:07:05 -- bradc

Log message:
	Broke version number stuff out into its own header file because
	the way I previously set it up, everything got recompiled
	whenever BUILD_NUMBER changed.  Now only version.cpp will be.

Modified files:
	chapel/compiler/: version.cpp version.h 
Added files:
	chapel/compiler/: version_num.h 

---------------------------------------------------------------------------

04/02/04 14:09:28 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in flow analysis which was causing the vec.chpl test to fail.

Modified files:
	chapel/compiler/: driver.cpp fa.cpp 

---------------------------------------------------------------------------

04/02/04 16:09:32 -- bradc

Log message:
	Added a new 0-argument option to the testing system: -valgrind
	When used, the compiler is run under valgrind with the -q option
	and the valgrind.suppressions file in the compiler directory.
	Errors reported by valgrind will be part of the compilation output
	and therefore mismatch the expected output by definition.
	
	Also added -h/-help options.  It seems before that help was printed
	when there were an odd number of arguments (!?).  I'd never noticed
	this before.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/02/04 16:20:00 -- bradc

Log message:
	Turned on codegen (and therefore binary generation) by default.
	Use the --no-codegen flag to suppress code generation.
	
	Also switched the building of generated code to use gmake
	rather than make.
	
	Checked in a few trivial tests in test/trivial/bradc to test
	end-to-end behavior.

Modified files:
	chapel/compiler/: driver.cpp files.cpp 
Added files:
	chapel/test/trivial/bradc/: declprintint.chk declprintint.chpl 
	                            printstring.chk printstring.chpl 

---------------------------------------------------------------------------

04/02/04 16:29:03 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed issue with assuming the suffix was ".chpl"

Modified files:
	chapel/compiler/: driver.cpp files.cpp 

---------------------------------------------------------------------------

04/05/04 10:41:27 -- bradc

Log message:
	Removed a debug printing line that I accidentally checked in.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

04/05/04 13:22:34 -- jplevyak (a.k.a. n10253)

Log message:
	Add Sym::internal field which is defined in internal.h which covers
	internal non-primitive types (currently Domain and Sequence).
	Print out the internal type in dump.html
	Handle toggle environment variables in arg.c

Modified files:
	chapel/compiler/: TODO arg.cpp ast.cpp clone.cpp driver.cpp 
	                  dump.cpp geysa.h sym.h v.g 
Added files:
	chapel/compiler/: internal.h 

---------------------------------------------------------------------------

04/05/04 13:50:38 -- jplevyak (a.k.a. n10253)

Log message:
	Add simple parsing test cases

Modified files:
	chapel/test/: sub_test 
Added files:
	chapel/test/parsing/jplevyak/: COMPOPTS NOEXEC extern.chk 
	                               extern.v for1.chk for1.v for2.chk 
	                               for2.v literal.chk literal.v 
	                               mat1.chk mat1.chpl module.chk 
	                               module.v tuples.chk tuples.v 
	                               vec.chk vec.chpl 

---------------------------------------------------------------------------

04/05/04 15:52:28 -- jplevyak (a.k.a. n10253)

Log message:
	Fix building of concrete types so that instance variables point
	to the concrete type instead of the abstract one!

Modified files:
	chapel/compiler/: clone.cpp 

---------------------------------------------------------------------------

04/09/04 15:12:01 -- bradc

Log message:
	Fixed a bug that Shannon found in which I wasn't quoting
	the -compopts and -execopts arguments, causing problems
	when they were more than a single string.  This change
	should re-enable the ability to do things like:
	
	start_test -compopts "--savec myoutputdir"

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

04/09/04 17:20:17 -- bradc

Log message:
	Fixed two simple driver problems:
	
	(1) changed the search for the input file's extension to use
	strrchr so that relative paths including .. will work properly.
	
	(2) moved code generation after the HTML dump so that if codegen
	fails requested HTML dumps won't be squelched.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

04/09/04 18:09:50 -- bradc

Log message:
	Wrote a bunch of simple programs that declare and initialize
	a 1D domain and array using a variety of notations to serve
	as initial codes.  Generated expected output by hand which
	(if I got them all right) approximates what we might expect
	from the compiler (and might need to be updated later if I
	got them wrong).
	
	Similarly, maybe some of these programs are illegal for one
	reason or another.  They reflect my current understanding
	of how one might program such things, so to the extent
	that they cause problems, we should discuss which should
	perhaps be illegal, result in compile errors, etc.

Added files:
	chapel/test/trivial/bradc/arrinit/: NOTEST README 
	                                    arrinit.notype.notype.chk 
	                                    arrinit.notype.notype.chpl 
	                                    arrinit.notypep.notype.chk 
	                                    arrinit.notypep.notype.chpl 
	                                    arrinit.notypep.notypeind.chk 
	                                    arrinit.notypep.notypeind.chpl 
	                                    arrinit.notypep.notypeind2.chk 
	                                    arrinit.notypep.notypeind2.chpl 
	                                    arrinit.notypep.typepr.chk 
	                                    arrinit.notypep.typepr.chpl 
	                                    arrinit.notypep.typeprind.chk 
	                                    arrinit.notypep.typeprind.chpl 
	                                    arrinit.notypep.typeprind2.chk 
	                                    arrinit.notypep.typeprind2.chpl 
	                                    arrinit.type.notype.chk 
	                                    arrinit.type.notype.chpl 
	                                    arrinit.typep.notype.chk 
	                                    arrinit.typep.notype.chpl 
	                                    arrinit.typep.type.chk 
	                                    arrinit.typep.type.chpl 
	                                    arrinit.typep.typeind.chk 
	                                    arrinit.typep.typeind.chpl 
	                                    arrinit.typep.typepr.chk 
	                                    arrinit.typep.typepr.chpl 

---------------------------------------------------------------------------

05/03/04 11:52:47 -- bradc

Log message:
	Took a new sweep through the simple arrinit codes to update based
	on new requirement that domains and arrays must be identified as
	such at declaration time.

Modified files:
	chapel/test/trivial/bradc/arrinit/: README 
	                                    arrinit.notype.notype.chpl 
	                                    arrinit.notypep.notype.chpl 
	                                    arrinit.notypep.notypeind.chpl 
	                                    arrinit.notypep.notypeind2.chpl 
	                                    arrinit.notypep.typepr.chpl 
	                                    arrinit.notypep.typeprind.chpl 
	                                    arrinit.notypep.typeprind2.chpl 
	                                    arrinit.type.notype.chpl 
	                                    arrinit.typep.notype.chpl 
Added files:
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.nodom.chpl 
	                                    arrinit.notype.noelem.chpl 
	                                    arrinit.notypes.notype.chpl 
	                                    arrinit.types.notype.chpl 

---------------------------------------------------------------------------

05/03/04 12:04:00 -- jplevyak (a.k.a. n10253)

Log message:
	Change the system directory option letter since it conflicts with
	the (preexisting) -D for parser debugging.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

05/03/04 12:48:58 -- bradc

Log message:
	Some small changes that have been festering in my directory
	for awhile:
	
	(1) added support for writeln() in addition to write() as
	our placeholder output routines.
	
	(2) added some support for codegen-ing parenthesized expressions.

Modified files:
	chapel/compiler/: ast.h codegen.cpp prelude.chpl
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/trivial/bradc/: declprintint2.chk declprintint2.chpl 
	                            pareninit.chk pareninit.chpl 

---------------------------------------------------------------------------

05/03/04 12:53:43 -- bradc

Log message:
	Did an abort partway through the last checkin, and so some mods
	in compiler/ weren't reflected in the log file.  The files that
	changed there were: ast.h, codegen.cpp, and prelude.chpl.
	Modified the CVSLOG file by hand to reflect this (ugh!).

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

05/03/04 13:01:43 -- bradc

Log message:
	Changed some of my flags (--nocodgen, --print-commands) from
	toggles to "set true" flags to avoid problems with double-
	toggling them via an environment variable (as that seems like
	the preferable semantics for these).

Modified files:
	chapel/compiler/: driver.cpp mysystem.cpp 

---------------------------------------------------------------------------

05/04/04 19:25:23 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug with trailing context (use to handle 1..n)

Modified files:
	chapel/third-party/dparser/d/: lex.c parse.c 

---------------------------------------------------------------------------

05/04/04 19:32:42 -- jplevyak (a.k.a. n10253)

Log message:
	updated tests for changes in the grammar and parser.

Modified files:
	chapel/test/parsing/jplevyak/: literal.chk literal.v mat1.chk 
	                               tuples.chk 

---------------------------------------------------------------------------

05/05/04 13:00:24 -- jplevyak (a.k.a. n10253)

Log message:
	Begin support for incremnetalization: cdb.{h,cpp} save cloning info
	between compiles
	Fixed code which maps AST -> flow analysis information
	Added support for relative system_dir paths in dump.cpp
	Added support for cloning of data structures dependant on
	the typing of other data structures (currently 1 level)
	Fixed several bugs in type inference discovered when implementing above

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp clone.cpp clone.h 
	                  dump.cpp fa.cpp fa.h fa_extras.cpp fun.cpp 
	                  fun.h pnode.h sym.h v.g vec.cpp 
Added files:
	chapel/compiler/: cdb.cpp cdb.h 

---------------------------------------------------------------------------

05/05/04 16:20:56 -- jplevyak (a.k.a. n10253)

Log message:
	updated TODO list
	now I just need to do all those things :)

Modified files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

05/07/04 11:18:23 -- bradc

Log message:
	Found that the path to the javascript stuff in the HTML dump
	was still not working for compiler invocations like:
	
	compiler/chpl -t foo.chpl
	
	so took a pass at fixing it.  I've tested the following four
	variations and they all seem to be working:
	
	/users/.../chpl -t foo.chpl
	compiler/chpl -t foo.chpl
	chpl -t foo.chpl (where chpl is in cwd)
	./chpl -t foo.chpl
	
	Hopefully I haven't broken any other cases.

Modified files:
	chapel/compiler/: dump.cpp 

---------------------------------------------------------------------------

05/07/04 17:05:01 -- bradc

Log message:
	Started working on a script that will perform nightly regressions.

Modified files:
	chapel/test/: start_test 
Added files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/07/04 17:20:43 -- bradc

Log message:
	Oops, accidentally introduced a typo in the start_test script.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/07/04 17:48:52 -- bradc

Log message:
	Added support for a valgrind run to the nightly script.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/10/04 09:10:50 -- jplevyak (a.k.a. n10253)

Log message:
	Add handling of value "clases" as per David's mail to TODO list
	Fix bug in setter path computation flow analysis

Modified files:
	chapel/compiler/: TODO fa.cpp vec.cpp 

---------------------------------------------------------------------------

05/10/04 10:59:22 -- jplevyak (a.k.a. n10253)

Log message:
	Added new log for flow analysis testing
	Added 3 new test cases for flow analysis using new log
	Increased support for .v files in test/sub_test

Modified files:
	chapel/compiler/: ast.cpp driver.cpp fa.h fa_extras.cpp log.h 
	chapel/test/: start_test 
Added files:
	chapel/test/flowanalysis/jplevyak/: CATFILES CLEANFILES COMPOPTS 
	                                    NOEXEC cs1.chk cs1.v cs2.chk 
	                                    cs2.v cs3.chk cs3.v 

---------------------------------------------------------------------------

05/10/04 16:16:40 -- jplevyak (a.k.a. n10253)

Log message:
	Extend flow analyis to N levels of complex data structures.

Modified files:
	chapel/compiler/: fa.cpp 

---------------------------------------------------------------------------

05/10/04 17:50:26 -- bradc

Log message:
	Updated nightly test script to compare each night's results
	against the previous night's, to mail the results of the
	run out (currently just to me, but once everything's
	debugged, to chapel_dev), and to append stats on the run
	to a file that can be gnuplotted.

Modified files:
	chapel/test/Bin/: nightly 

Log message:
	Updated nightly test script to compare each night's results
	against the previous night's, to mail the results of the
	run out (currently just to me, but once everything's
	debugged, to chapel_dev), and to append stats on the run
	to a file that can be gnuplotted.
	
	Also, added a few .cvsignore files to ignore files that
	are currently left due to broken tests.

Added files:
	chapel/test/flowanalysis/jplevyak/: .cvsignore 
	chapel/test/parsing/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

05/11/04 13:57:56 -- bradc

Log message:
	Added generation of graph showing regression status.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/11/04 14:20:14 -- bradc

Log message:
	Added a new feature to the testing scripts -- if a subdirectory
	contains an executable PREDIFF script, that script will be run
	prior to performing the diff for each test in the directory.
	The name of the test being run and the name of the log file
	being diffed will be passed to the scripts as parameters.
	
	Added a use of this to John's flowanalysis directory which
	previously printed things out in a platform-specific order.
	The PREDIFF script in that directory sorts the log file
	prior to doing the diff (and compares against new, sorted
	.chk files) to ensure that the test's result is not influenced
	by this platform-specific order.

Modified files:
	chapel/test/: start_test sub_test 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 
Added files:
	chapel/test/flowanalysis/jplevyak/: PREDIFF 

---------------------------------------------------------------------------

05/12/04 12:19:34 -- bradc

Log message:
	Introducing a purposeful bug to see if the nightly regression
	testing works in the presence of a compiler build failure.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

05/12/04 12:37:19 -- bradc

Log message:
	Removed purposeful bug in driver.cpp and checking in new
	nightly test script that handles build errors gracefully.

Modified files:
	chapel/compiler/: driver.cpp 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/13/04 10:32:15 -- bradc

Log message:
	Made the testing system exit with an error if valgrind is
	not available.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/13/04 11:22:46 -- bradc

Log message:
	Made nightly regression runs more resilient in the face of
	failures (for example, last night valgrind was missing,
	making the reported results pretty inaccurate).  Also
	added support for a debug mode so that I wouldn't have
	to mess up the running tally of statistics every time
	the testing system failed.

Modified files:
	chapel/test/Bin/: nightly 
Added files:
	chapel/test/trivial/bradc/: .cvsignore 

---------------------------------------------------------------------------

05/14/04 10:03:21 -- bradc

Log message:
	I believe the nightly regressions are now working well
	enough that it's safe to send the results to chapel_dev
	without bothering anyone, so I turned that on by
	default.  This should result in a regressions test
	status message showing up in the middle of the night
	every night.
	
	You can see the running tally of tests run, tests passing,
	and tests passing with valgrind at:
	
	http://insidecray.mw.cray.com/~bradc/chapel.html
	
	It's not all that interesting now, but should look good
	as we continue to add tests.  John, if you're reading
	this far, I haven't yet had a chance to look into the
	one valgrind run that's currently failing to see if
	it's a real problem or something else needing suppressing.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/19/04 17:31:05 -- jplevyak (a.k.a. n10253)

Log message:
	Remove builtin complex (will be implemented in standard header)
	and updated tests.

Modified files:
	chapel/compiler/: ast.cpp builtin_symbols.h chpl.g chpltypes.h 
	                  prelude.chpl prelude.v sym.h vec.cpp vec.h 
	chapel/compiler/samples/: sample.chpl 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 

---------------------------------------------------------------------------

05/25/04 16:08:56 -- bradc

Log message:
	Making sure that we blow away /tmp directories on segfaults.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

05/25/04 16:23:07 -- bradc

Log message:
	Put in code so that if we try to codegen something that we
	don't understand, an internal error is thrown and we don't
	bother trying to compile the generated C code.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

05/25/04 17:15:07 -- bradc

Log message:
	Added initial code generation support for conditionals.  Added
	a simple test to try different conditional idioms.  Also added
	short-term support for the unary negation op.
	
	Touched up support for seg faults slightly from my previous
	version which was laid in in a rush a week or two ago.
	
	In writing my conditional code, found what appears to be a bug
	with empty strings on linux -- when strlen is taken of their
	compile-time representation, it seg faults.  I assume that this
	is due to our storage of them as opposed to a bug in strlen,
	but filed this as a placeholder.  It seemed I could get around
	it by writing my own strlen that checked against NULL and the
	empty string before sending the string in to the real strlen(),
	but this seems bogus, so I'm not checking that code in.  I
	did check the bug in though (test/trivial/bradc/printempty.chpl.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/: conditional.chk conditional.chpl 
	                            printempty.chk printempty.chpl 

---------------------------------------------------------------------------

05/26/04 11:39:10 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed two bugs which were causing problems in the front end.
	First, cannonicalize string was returning NULL in some cases.
	Second, vector expansion was not clearing the new space correctly.

Modified files:
	chapel/compiler/: map.h vec.cpp 

---------------------------------------------------------------------------

05/26/04 11:47:16 -- jplevyak (a.k.a. n10253)

Log message:
	Missing semi-colon

Modified files:
	chapel/test/trivial/bradc/: printempty.chpl 

---------------------------------------------------------------------------

05/26/04 14:17:01 -- jplevyak (a.k.a. n10253)

Log message:
	new supression in boehm GC

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

05/26/04 16:09:39 -- jplevyak (a.k.a. n10253)

Log message:
	New data structure for handling data polymorophism which is simpler and
	has better termination properites.

Modified files:
	chapel/compiler/: fa.cpp fa.h vec.cpp 

---------------------------------------------------------------------------

05/27/04 14:41:54 -- bradc

Log message:
	Changed the test system to use .good files to store the expected
	output rather than .chk files to avoid the common prefix conflict
	with the .chpl files.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/Samples/ex1-astlog/: astlog1.good 
	chapel/test/Samples/ex2-notest/: illegal.good 
	chapel/test/Samples/ex3-fails/: intendedToFail.good 
	chapel/test/compflags/bradc/badflagdash/: declint.good 
	chapel/test/compflags/bradc/badflagddash/: declint.good 
	chapel/test/compflags/bradc/copyright/: declint.good 
	chapel/test/compflags/bradc/missingargdash/: declint.good 
	chapel/test/compflags/bradc/missingargddash/: declint.good 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	chapel/test/parsing/jplevyak/: extern.good for1.good for2.good 
	                               literal.good mat1.good 
	                               module.good tuples.good vec.good 
	chapel/test/trivial/bradc/: conditional.good declprintint.good 
	                            declprintint2.good pareninit.good 
	                            printempty.good printstring.good 
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.notype.good 
	                                    arrinit.notypep.notype.good 
	                                    arrinit.notypep.notypeind.good 
	                                    arrinit.notypep.notypeind2.good 
	                                    arrinit.notypep.typepr.good 
	                                    arrinit.notypep.typeprind.good 
	                                    arrinit.notypep.typeprind2.good 
	                                    arrinit.type.notype.good 
	                                    arrinit.typep.notype.good 
	                                    arrinit.typep.type.good 
	                                    arrinit.typep.typeind.good 
	                                    arrinit.typep.typepr.good 
Removed files:
	chapel/test/Samples/ex1-astlog/: astlog1.chk 
	chapel/test/Samples/ex2-notest/: illegal.chk 
	chapel/test/Samples/ex3-fails/: intendedToFail.chk 
	chapel/test/compflags/bradc/badflagdash/: declint.chk 
	chapel/test/compflags/bradc/badflagddash/: declint.chk 
	chapel/test/compflags/bradc/copyright/: declint.chk 
	chapel/test/compflags/bradc/missingargdash/: declint.chk 
	chapel/test/compflags/bradc/missingargddash/: declint.chk 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 
	chapel/test/parsing/jplevyak/: extern.chk for1.chk for2.chk 
	                               literal.chk mat1.chk module.chk 
	                               tuples.chk vec.chk 
	chapel/test/trivial/bradc/: conditional.chk declprintint.chk 
	                            declprintint2.chk pareninit.chk 
	                            printempty.chk printstring.chk 
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.notype.chk 
	                                    arrinit.notypep.notype.chk 
	                                    arrinit.notypep.notypeind.chk 
	                                    arrinit.notypep.notypeind2.chk 
	                                    arrinit.notypep.typepr.chk 
	                                    arrinit.notypep.typeprind.chk 
	                                    arrinit.notypep.typeprind2.chk 
	                                    arrinit.type.notype.chk 
	                                    arrinit.typep.notype.chk 
	                                    arrinit.typep.type.chk 
	                                    arrinit.typep.typeind.chk 
	                                    arrinit.typep.typepr.chk 

---------------------------------------------------------------------------

05/27/04 16:04:20 -- jplevyak (a.k.a. n10253)

Log message:
	fix bug with handling of references
	minor cleanups

Modified files:
	chapel/compiler/: TODO fa.cpp 

---------------------------------------------------------------------------

06/01/04 13:03:36 -- jplevyak (a.k.a. n10253)

Log message:
	most of test/trivial/bradc/arrinit now "compile"

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h chpl.g 

---------------------------------------------------------------------------

06/01/04 14:33:58 -- jplevyak (a.k.a. n10253)

Log message:
	fixup tests to match new grammar for parsing trivial/bradc

Modified files:
	chapel/compiler/: chpl.g 
	chapel/test/parsing/jplevyak/: mat1.good 

---------------------------------------------------------------------------

06/01/04 16:50:47 -- bradc

Log message:
	Fixed a bug in the testing system in which -startdir was only
	causing subdirectories of the named directory to be examined,
	not the directory itself.  This particularly caused problems
	when a leaf directory was specified, which would cause no
	tests to be run since it had no subdirectories.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/01/04 17:20:28 -- jplevyak (a.k.a. n10253)

Log message:
	All of trivial/bradc/arrinit now parse.
	There are typing issues which I am going to work on next.

Modified files:
	chapel/compiler/: chpl.g prelude.chpl 
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/02/04 11:26:41 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for value types.
	Modified format of internal errors to work with gdb's compile mode

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h builtin_symbols.h chpl.g 
	                  codegen.cpp misc.cpp prelude.chpl prelude.v 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 

---------------------------------------------------------------------------

06/02/04 13:20:01 -- bradc

Log message:
	Improved dependences for *.g.d_parser.o files.  These are
	dependent on geysa.h and all the things that it includes,
	but this dependence wasn't reflected in the Makefiles due
	to the challenges in listing the dependences of a dynamically-
	generated source file.
	
	The approach I took was to run g++ -MM on geysa.h, fudging
	the output format so that it defines a Makefile variable
	giving all the include files it includes rather than
	generating a standard dependence rule (which would have
	had no effect since geysa.h would be considered up-to-date
	since there's no rule to rebuild it).  Then, by giving
	this variable name in the rule to build *.g.d_parser.o,
	it will be recompiled whenever the any of the component
	header files change.  This should take care of most of
	the recent cases where a "make clean" was required.  If
	you come across more (and can reproduce them), please
	let me know.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 

---------------------------------------------------------------------------

06/02/04 13:24:46 -- bradc

Log message:
	Changed the sub_test script to remove the ihgfedcba from
	the generated output files.  This was originally designed
	by the ZPL implementor to avoid name conflicts, but my
	suspicion is that those name conflicts aren't a real problem
	and that the simpler filenames are less confusing.  The
	result is that the output filenames are one of:
	
	testname.comp.out.tmp
	testname.exec.out.tmp
	
	depending on whether the test was compiled only, or was
	compiled and executed.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/02/04 16:09:23 -- bradc

Log message:
	Found a bug in my previous check-in -- in trying to minimize
	redundancy I put in an assumption that the user would have
	necessarily run "make depend".  Took this out by re-adding in
	the explicit dependence that causes make_prims to be run before
	compiling the output of the v or chpl grammar files.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

06/02/04 16:25:06 -- bradc

Log message:
	Found that I never could get used to the date format
	that was used by the ZPL folks in their CVS system,
	so switched to a more standard format.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

06/03/04 09:39:35 -- bradc

Log message:
	Reordered some actions in sub_test -- previously, if we
	successfully built a binary but the .good file didn't
	exist, we wouldn't bother running the binary.  I switched
	the order around so that we'd run the binary (putting
	its output in the *.exec.out.tmp file) then complain
	about the missing .good file just before executing the
	diff.  This allows us to inspect the output that was
	generated to consider copying it into the .good file.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/03/04 12:03:29 -- bradc

Log message:
	Added support for writing multiple expressions in a
	call to write()/writeln().  For example:
	
	write("The current value of n is: ", n,
	"  the old value was: ", oldn);

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/arrinit/: .cvsignore 
	chapel/test/trivial/bradc/write/: .cvsignore writen.chpl 
	                                  writen.good writetwo.chpl 
	                                  writetwo.good 

---------------------------------------------------------------------------

06/03/04 15:07:18 -- shannon

Log message:
        Implemented code generation of binary operators
        and implemented tests.  Used a table mapping of
        AST representations of the operators to their
        corresponding representation in C.  Initial
        mechanisms for the handling of operators not
        implemented in C are present but not currently
        in use.

Modified files:
        chapel/compiler/: codegen.cpp 
Added files:
        chapel/test/trivial/shannon/: .cvsignore arithmetic_ops.chpl 
                                      arithmetic_ops.good 
                                      bitwise_ops.chpl bitwise_ops.good 
                                      equality_ops.chpl 
                                      equality_ops.good 
                                      relational_ops.chpl 
                                      relational_ops.good 
---------------------------------------------------------------------------

06/03/04 15:31:54 -- shannon

Log message:
	Didn't have RCS in path so edited CVSLOG by hand to reflect changes.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

06/04/04 12:44:43 -- jplevyak (a.k.a. n10253)

Log message:
	trivial/bradc/arrinit now produces (reasonably) correct types
	for domains and arrays.  There are some limitations, in particular
	domains initialized from sequences are not converted into domains.
	This will be corrected when the new function lookup code is implemented.
	
	Note: there are several new AST nodes.  These include
	AST_array_descriptor, AST_domain and AST_cross_product.
	
	Again, the implementation of these codes is incomplete pending the
	new function lookup code.  It is sufficient for the test cases
	but likely little else.  If you want a particular test case to work
	in the near term, tell me and I'll see if I can finess it.

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h builtin_symbols.h chpl.g 
	                  fa.cpp prelude.chpl prelude.v sym.h 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	chapel/test/parsing/jplevyak/: mat1.good 

---------------------------------------------------------------------------

06/04/04 12:47:47 -- bradc

Log message:
	Added support for easily running the chpl compiler
	within gdb via a --gdb flag.  This is designed for
	cases when you are working with a long set of compile
	line flags and suddenly want to run it within gdb:
	
	lotus% chpl --savec output --print-commands ../test/foo.chpl
	fail: seg fault
	
	Typically, to debug this, you'd have to run "gdb chpl"
	and then within gdb cut and paste your whole command-line
	into the run command:
	
	(gdb) run --savec output --print-commands ../test/foo.chpl
	
	With this change, you can now run your original
	command line again, adding --gdb to it somewhere:
	
	lotus% chpl --savec output --print-commands ../test/foo.chpl --gdb
	
	This will cause the chpl compiler to launch a gdb
	session with the arguments automatically set up to
	be those you included on the command line (except
	for any occurrences of the --gdb flag, of course).
	Thus, upon running the compiler, you'll be whisked
	into gdb, and upon getting a gdb prompt, you can
	simply type run:
	
	(gdb) run
	
	You can use the "show args" command to verify what
	the arguments being used are.  Obviously, you can
	override the arguments by hand simply by specifying
	them with the "run" command or using the "set args"
	command.
	
	The other benefit of debugging the compiler in this
	mode is that it will set up hooks for the "run" and
	"quit" commands such that any /tmp directories that
	the compiler creates during the debugging session
	will be deleted when the program is re-run or you
	quit out of gdb.
	
	All this work was developed under gdb v5.3.  If you
	have a different version and have conflicts with
	what's been done here, let me know and we can look
	into supporting your version.
	
	In making this change, some other changes occurred
	as well:
	
	* Changed all instances of exit() to clean_exit(),
	which cleans up the compiler state before exiting.
	exit() should not be used anywhere in the program
	(but I haven't yet gone so far as to #define it
	out in a header file yet).
	
	* Made our current argument parsing routines make
	copies of the arguments that they are working
	with because they are fairly destructive with
	them (and we want to pass them on to gdb in their
	original form).
	
	* Previously, catching of SEGV and INT signals
	was only done during codegen.  I switched this
	to cover the whole program because it seems
	right and because Chapel's temp directory may
	now get created earlier, due to the --gdb flag.
	
	* Added a test to see that the --gdb command
	causes gdb to be fired up.  In doing so, added
	a new capability to the testing system: a
	COMPSTDIN file can be added to a test directory
	to specify an input file to be piped in as stdin
	during the compile invocation.  As need warrants
	it, I can add a similar feature, EXECSTDIN, for
	the invocation of the executable.

Modified files:
	chapel/compiler/: arg.cpp arg.h codegen.cpp driver.cpp files.cpp 
	                  files.h misc.cpp misc.h 
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/compflags/bradc/gdbddash/: .cvsignore COMPOPTS 
	                                       COMPSTDIN NOEXEC 
	                                       declint.chpl declint.good 
	                                       gdb.in 

---------------------------------------------------------------------------

06/04/04 13:17:49 -- jplevyak (a.k.a. n10253)

Log message:
	Fixes for ~shannon/CHAPEL/chapel/test/trivial/shannon/assignment_expr.chpl

Modified files:
	chapel/compiler/: prelude.chpl 

---------------------------------------------------------------------------

06/04/04 13:29:34 -- jplevyak (a.k.a. n10253)

Log message:
	exponentiation now supported.
	note: constant folding is not yet done for exponentiation... should it be?

Modified files:
	chapel/compiler/: TODO chpl.g codegen.cpp prelude.chpl 
	                  prim_data.dat 

---------------------------------------------------------------------------

06/04/04 13:36:25 -- jplevyak (a.k.a. n10253)

Log message:
	fix mod, left and right shift

Modified files:
	chapel/compiler/: prelude.chpl prim_data.dat 

---------------------------------------------------------------------------

06/04/04 13:45:17 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed up &&.

Modified files:
	chapel/compiler/: chpl.g 

---------------------------------------------------------------------------

06/04/04 16:44:28 -- bradc

Log message:
	Got some extremely initial support for code generating
	domains in.  It's fairly crufty and is hardwired to 1D
	domains in  several places, but it makes some simple
	1D domain declarations work correctly, and seems like
	a reasonable stopping place to synch into before the
	weekend.
	
	This change also involved some minor side changes:
	
	* Turned on debugging and a bunch of warning flags for
	the compilation of the runtime and compiler-generated
	sources -- eventually, we'll want a more interesting
	mechanism for turning these on and off (like a -g
	flag in the compiler at minimum), but it's a start.
	
	* Made the gcc commands issued by the compiler via its
	generated Makefile show up on the console when the
	--show-commands flag is used.

Modified files:
	chapel/compiler/: Makefile codegen.cpp files.cpp 
	chapel/runtime/: Makefile 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: chplio.h stdchpl.h 
	chapel/runtime/src/: Makefile chplio.c 
Added files:
	chapel/compiler/: datatype.cpp datatype.h 
	chapel/runtime/etc/: Makefile.macros 
	chapel/runtime/include/: domain.h 
	chapel/runtime/src/: domain.c 
	chapel/test/trivial/bradc/: declprintdom.chpl declprintdom.good 

---------------------------------------------------------------------------

06/04/04 17:11:52 -- jplevyak (a.k.a. n10253)

Log message:
	forgot to checkin the parsing .good files corresponding to the parser
	changes... oops.

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/07/04 12:44:53 -- bradc

Log message:
	Made codegen handle dead variables cleanly.  Added a test
	to make sure this works.

Modified files:
	chapel/compiler/: codegen.cpp 
	chapel/test/trivial/bradc/: .cvsignore 
Added files:
	chapel/test/trivial/bradc/: deadvar.chpl deadvar.good 

---------------------------------------------------------------------------

06/07/04 17:55:41 -- bradc

Log message:
	Added initial support for code generation of functions and
	inserted a few tests to pin down this behavior.
	
	In order to make this work, I had to generate function
	prototypes at the top of the code because (a) we
	currently generate functions in a nondeterministic
	order such that functions won't necessarily be defined
	in the generated code before their calls, even if the
	user's code has the definition before the use, and
	(b) the current language concept allows functions to be
	called before they're used, so even if code generation
	followed the user's code directly, a prototype could
	still be required.
	
	I made code generation create two new header files to
	support these prototypes -- one that gives the external
	interface for the .c file (foo.h) and a second that
	contains internal prototypes for the .c file -- ones
	that are only meant to be included by the .c file itself,
	and not external clients (foo-internal.h).
	
	A few other minor changes that are going in with this:
	
	* I'd been using my glomstrings() in a degenerate way to
	copy strings -- glomstrings(1, stringToCopy) -- I
	wrapped this in an explicit copystring() function to
	make the code more readable.
	
	* Updated the compiler/FILES file to mention the new
	datatype.c file that I added yesterday.

Modified files:
	chapel/compiler/: FILES arg.cpp codegen.cpp driver.cpp files.cpp 
	                  files.h prelude.chpl stringutil.cpp 
	                  stringutil.h 
Added files:
	chapel/test/trivial/bradc/functions/: .cvsignore onearg.chpl 
	                                      onearg.good 
	                                      usebeforedef.chpl 
	                                      usebeforedef.good 

---------------------------------------------------------------------------

06/08/04 10:11:31 -- bradc

Log message:
	Added a new Share/ directory to the test system which will not
	be run by default when start_test is run.  The intention of
	this directory is to share tests with each other via CVS so
	that we don't have to deal with cutting and pasting example
	programs into and out of email, and so that John won't have
	to log into a Cray machine to see files in our personal
	directories.
	
	Currently, I haven't put any structure in place under the
	Share directory -- if the idea proves to be useful and
	popular and full of more tests than we can keep track of,
	then we might imagine a structure in which subdirectories
	were used to indicate the author of the test and/or the
	person that the test is being published for.
	
	I'm checking a few codes into the Share/ directory for now
	that I'll email John about in a bit.

Modified files:
	chapel/test/: start_test 
Added files:
	chapel/test/Share/: chain.chpl mutrec.chpl noargs.chpl 

---------------------------------------------------------------------------

06/08/04 11:11:56 -- jplevyak (a.k.a. n10253)

Log message:
	noarg.chpl now gets through parser and type checking... though not codegen

Modified files:
	chapel/compiler/: TODO chpl.g 

---------------------------------------------------------------------------

06/08/04 11:20:15 -- bradc

Log message:
	Implemented variables at the file scope of the chapel input
	file as global variables in the generated C code rather
	than local variables to the _init() procedure, as had been
	done previously.  These should be made static by default,
	but this checkin doesn't address that issue.  Added a test
	to lock in this behavior.
	
	Broke code related to code generating functions into a file
	called cg_funs.cpp.  As Shannon and I move forward with
	code generation, we should continue to make cg_*.cpp/h files
	to avoid making codegen too monolithic and having to wrestle
	with bad CVS merges very often.

Modified files:
	chapel/compiler/: FILES Makefile codegen.cpp codegen.h 
Added files:
	chapel/compiler/: cg_funs.cpp cg_funs.h 
	chapel/test/Share/: .cvsignore 
	chapel/test/trivial/bradc/functions/: globalref.chpl 
	                                      globalref.good 

---------------------------------------------------------------------------

06/08/04 11:30:30 -- shannon

Log message:
	Implemented further testing of binary operator
	code generation with the addition of four tests.
	These files test the assignment operators such
	as "+=", as well as the "&&", "<<", and ">>"
	operators.
	
	Also cleaned up my prior tests using the new
	functionality of write() and writeln().
	Added further testing of boundary conditions.

Modified files:
	chapel/test/trivial/shannon/: arithmetic_ops.chpl 
	                              bitwise_ops.chpl bitwise_ops.good 
	                              equality_ops.chpl 
	                              equality_ops.good 
	                              relational_ops.chpl 
	                              relational_ops.good 
Added files:
	chapel/test/trivial/shannon/: assignment_expr.chpl 
	                              assignment_expr.good 
	                              bitwise_assignment.chpl 
	                              bitwise_assignment.good 
	                              logical_and.chpl logical_and.good 
	                              shift_ops.chpl shift_ops.good 

---------------------------------------------------------------------------

06/08/04 11:45:45 -- jplevyak (a.k.a. n10253)

Log message:
	Fix test/Share/mutrec.chpl

Modified files:
	chapel/compiler/: fun.cpp 

---------------------------------------------------------------------------

06/08/04 13:17:45 -- bradc

Log message:
	Got code generation for zero-argument functions working.
	Added a test to check this behavior and removed the
	sample from the Share/ directory.  Also changed instances
	of writeln("") and write("\n") to writeln() in tests
	that used these other idioms (and weren't testing
	that they worked).

Modified files:
	chapel/compiler/: cg_funs.cpp codegen.cpp datatype.cpp 
	                  datatype.h 
	chapel/test/trivial/bradc/: conditional.chpl 
	chapel/test/trivial/bradc/functions/: globalref.chpl 
	chapel/test/trivial/shannon/: arithmetic_ops.chpl 
	                              bitwise_assignment.chpl 
	                              bitwise_ops.chpl equality_ops.chpl 
	                              relational_ops.chpl shift_ops.chpl 
Added files:
	chapel/test/trivial/bradc/functions/: noargs.good 
Removed files:
	chapel/test/Share/: noargs.chpl 

---------------------------------------------------------------------------

06/08/04 15:11:17 -- jplevyak (a.k.a. n10253)

Log message:
	update counts

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/08/04 15:12:37 -- jplevyak (a.k.a. n10253)

Log message:
	FreeBSD fix

Modified files:
	chapel/compiler/: fa.h 

---------------------------------------------------------------------------

06/08/04 15:15:16 -- jplevyak (a.k.a. n10253)

Log message:
	Changes to support GCC 3.4

Modified files:
	chapel/compiler/: list.h log.h map.h ssu.cpp ssu.h 

---------------------------------------------------------------------------

06/08/04 15:27:18 -- bradc

Log message:
	Somehow this file slipped out of my last checkin.

Added files:
	chapel/test/trivial/bradc/functions/: noargs.chpl 

---------------------------------------------------------------------------

06/08/04 15:39:36 -- jplevyak (a.k.a. n10253)

Log message:
	Turn off cloning for constants as requirested by brad.
	We can figure out an interface for specifying this later.

Modified files:
	chapel/compiler/: fa.cpp fa.h 

---------------------------------------------------------------------------

06/08/04 15:49:39 -- bradc

Log message:
	Ripped ZPL's beautify.c code out, which performs indentation
	on generated C code.  Reworked this to work within the Chapel
	framework better and applied it to our generated code to ease
	with debugging code generation.
	
	Also reworked some of the file interfaces a bit, though they
	could still use some more work.

Modified files:
	chapel/compiler/: Makefile codegen.cpp files.cpp files.h 
Added files:
	chapel/compiler/: beautify.cpp beautify.h 

---------------------------------------------------------------------------

06/08/04 16:28:27 -- bradc

Log message:
	Added tests to look at functions calling other functions
	and removed these from the Share/ directory thanks to
	John's disabling of cloning based on values.

Added files:
	chapel/test/trivial/bradc/functions/: chain.chpl chain.good 
	                                      mutrec.chpl mutrec.good 
Removed files:
	chapel/test/Share/: chain.chpl mutrec.chpl 

---------------------------------------------------------------------------

06/08/04 16:46:46 -- bradc

Log message:
	Beefed up domain support ever-so-slightly to handle cases
	with constraint nodes attached (basically by skipping
	over the constraint node and looking at the initializer
	for now).

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/: declprintdom2.chpl 
	                            declprintdom2.good 

---------------------------------------------------------------------------

06/08/04 17:34:22 -- jplevyak (a.k.a. n10253)

Log message:
	updated for non-cloning of constants

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 

---------------------------------------------------------------------------

06/09/04 11:09:14 -- jplevyak (a.k.a. n10253)

Log message:
	fix segv when handling globals

Modified files:
	chapel/compiler/: ast.cpp 

---------------------------------------------------------------------------

06/10/04 12:30:51 -- jplevyak (a.k.a. n10253)

Log message:
	Update dparser to 1.10 to sync up with public release.
	dparser ported to x86_64
	Update Makefiles/depend to work with gcc 3.4

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.gnu 
	chapel/third-party/dparser/d/: CHANGES Makefile d.h 
	                               dparse_tables.h grammar.g.c 
	                               index.html make_dparser.c parse.c 
	                               sample.g scan.c symtab.c util.c 
	                               util.h 
	chapel/third-party/dparser/d/python/: Makefile README dparser.i 
	                                      dparser.py dparser_wrap.c 
	                                      index.html 
	                                      py_dparser_manual.html 
	                                      pydparser.c pydparser.h 
	                                      setup.py 
	chapel/third-party/dparser/d/tests/: sample.test.g 
Added files:
	chapel/third-party/dparser/d/: write_tables.c write_tables.h 
	chapel/third-party/dparser/d/python/: make_tables.c 
	chapel/third-party/dparser/d/python/contrib/: 
	                                              dparserpy-syntax_error.py 
	                                              dparserpy.el 
	chapel/third-party/dparser/d/python/tests/: test.py test2.py 
	                                            test3.py test4.py 
	                                            test5.py test6.py 
	                                            test7.py test8.py 
Removed files:
	chapel/third-party/dparser/d/: write_ctables.c write_ctables.h 
	chapel/third-party/dparser/d/python/: dparser_swig.py test.py 
	                                      test2.py test3.py test4.py 
	                                      test5.py test6.py test7.py 

---------------------------------------------------------------------------

06/10/04 12:38:32 -- jplevyak (a.k.a. n10253)

Log message:
	only add the -Wno-invalid-offsetof for gcc 3.4

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

06/10/04 12:47:33 -- jplevyak (a.k.a. n10253)

Log message:
	forgot the add read_binary.{c,h}

Added files:
	chapel/third-party/dparser/d/: read_binary.c read_binary.h 

---------------------------------------------------------------------------

06/10/04 14:21:05 -- bradc

Log message:
	Fixed up depend rules to work with g++ 3.4 -- used a new trick
	to get geysa.h's dependences by adding an unused .cpp file that
	#includes geysa.h.  For future reference, this is because (a)
	g++ 3.3 (and previous) didn't allow the -M commands to be applied
	to .h files, (b) because g++ 3.4 created a warning due to the
	-Wno-invalid-offsetof flag, and (c) it uses a more similar CCDEP
	command as the rest of our source files (which will make it easier
	to refactor this when the day finally comes that I get around to it).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
Added files:
	chapel/compiler/: geysa.cpp 

---------------------------------------------------------------------------

06/10/04 16:13:55 -- jplevyak (a.k.a. n10253)

Log message:
	new supressions for gcc 3.4?

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

06/10/04 16:28:18 -- jplevyak (a.k.a. n10253)

Log message:
	one last supression to get a clean run through the tests

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

06/10/04 16:29:09 -- jplevyak (a.k.a. n10253)

Log message:
	added CHPL_VALGRIND_OPTIONS to permit valgrind-2.1.1 to work which
	requires an extra argument.  Someday will have to generalize this.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/10/04 17:19:47 -- bradc

Log message:
	Fixed undefined CHPL_VALGRIND_OPTIONS error when the env. var
	wasn't set (John, you may want to make sure this still works
	for you).

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/10/04 17:51:53 -- bradc

Log message:
	Making start_test unsetenv CHPL_SYSTEM_DIR to ensure that
	the nightly tests don't run using my development environment.
	If this works, we may want to do the same for other env. vars
	in the testing system (since they can always be set using the
	-compargs flag for testing purposes).

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/10/04 17:54:33 -- bradc

Log message:
	Added the -Werror flag when using g++ 3.4 to guard against
	future warnings.

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

06/11/04 13:56:41 -- shannon

Log message:
	Implemented further testing of binary operator
	code generation with the addition of two tests.
	These files test the mod and logical not
	operators.

Added files:
	chapel/test/trivial/shannon/: logical_not.chpl logical_not.good 
	                              mod.chpl mod.good 

---------------------------------------------------------------------------

06/11/04 17:10:37 -- shannon

Log message:
	Implemented code generation of the unary
	operators.  Added a test for bitwise negation.
	
	Added conditions to the findUnOp and findBinOp
	functions so that they can't dereference a
	null pointer.
	
	Fixed a bug in my generation of the mod function
	resulting from fprintf not printing my "%"
	symbol since it is a special character.
	
	Inserted a couple of blank lines because I
	accidentally committed a minute ago without
	including this message.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/shannon/: bitwise_negation.chpl 
	                              bitwise_negation.good 

---------------------------------------------------------------------------

06/12/04 11:41:36 -- jplevyak (a.k.a. n10253)

Log message:
	Cleaned up x86_64 issues.  Working and warning free.

Modified files:
	chapel/compiler/: fa.h fa_extras.cpp geysa.h graph.cpp list.h 
	                  map.h ssu_extra.cpp vec.cpp vec.h 
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

06/14/04 11:02:38 -- shannon

Log message:
	Add two failing tests to the Share directory.

Added files:
	chapel/test/Share/: increment.chpl unary_plusMinus.chpl 

---------------------------------------------------------------------------

06/14/04 12:47:25 -- jplevyak (a.k.a. n10253)

Log message:
	Fix up trivial/shannon/{increment.chpl,unary_plusMinus.chpl}.

Modified files:
	chapel/compiler/: ast.cpp chpl.g 

---------------------------------------------------------------------------

06/14/04 13:16:17 -- jplevyak (a.k.a. n10253)

Log message:
	update stupid counts again.

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/14/04 14:23:17 -- jplevyak (a.k.a. n10253)

Log message:
	minor FreeBSD compatibility issues

Modified files:
	chapel/compiler/: list.h 
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

06/15/04 09:54:32 -- bradc

Log message:
	This is a bunch of prototype code that I've been working on
	to look at alternate AST structures.  It isn't anywhere near
	prime-time, but I feel naked not having it checked into CVS,
	so am dropping it in for the revision control features.

Added files:
	chapel/compiler/AST/: Makefile chapel.lex chapel.y expr.cpp 
	                      expr.h lexyacc.h link.cpp link.h main.cpp 
	                      stmt.cpp stmt.h stringutil.cpp 
	                      stringutil.h symbol.cpp symbol.h type.cpp 
	                      type.h yy.c yy.h 

---------------------------------------------------------------------------

06/15/04 11:16:32 -- bradc

Log message:
	Prototype AST checkpoint.

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp expr.h 
	                      main.cpp yy.h 

---------------------------------------------------------------------------

06/15/04 12:54:59 -- bradc

Log message:
	AST Prototype checkpoint.

Modified files:
	chapel/compiler/AST/: Makefile chapel.lex chapel.y expr.cpp 
	                      expr.h lexyacc.h stmt.cpp stmt.h type.cpp 
	                      type.h 
Added files:
	chapel/compiler/AST/: .cvsignore symtab.cpp symtab.h 

---------------------------------------------------------------------------

06/15/04 13:33:52 -- shannon

Log message:
	Added a condition to the top of the AST_op case to
	check for NULL ast pointers.
	
	Added two tests of the +, -, ++, and -- unary
	operators to the test/trivial/shannon directory,
	and removed them from the test/Share directory.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/shannon/: increment.chpl increment.good 
	                              unary_plusMinus.chpl 
	                              unary_plusMinus.good 
Removed files:
	chapel/test/Share/: increment.chpl unary_plusMinus.chpl 

---------------------------------------------------------------------------

06/15/04 14:01:00 -- bradc

Log message:
	prototype AST checkpoint (mg-seq parses).

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp expr.h 
	                      symbol.cpp symbol.h type.h 

---------------------------------------------------------------------------

06/16/04 10:27:57 -- bradc

Log message:
	AST prototyping -- some minor cleanup and fixes.

Modified files:
	chapel/compiler/AST/: chapel.y expr.cpp expr.h stmt.cpp 
	                      symbol.cpp symbol.h type.cpp 

---------------------------------------------------------------------------

06/16/04 12:01:57 -- bradc

Log message:
	AST prototype checkpoint.

Modified files:
	chapel/compiler/AST/: chapel.y expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp expr.h stmt.h symbol.h type.h 

---------------------------------------------------------------------------

06/16/04 12:56:38 -- bradc

Log message:
	Lunchtime prototype AST checkpoint.

Modified files:
	chapel/compiler/AST/: Makefile chapel.lex chapel.y main.cpp 
	                      stmt.cpp stmt.h symbol.cpp symbol.h 
	                      type.cpp type.h yy.h 
Added files:
	chapel/compiler/AST/: TODO 

---------------------------------------------------------------------------

06/16/04 15:05:26 -- bradc

Log message:
	mid-afternoon AST prototype checkin.

Modified files:
	chapel/compiler/AST/: TODO chapel.y expr.cpp expr.h link.cpp 
	                      link.h main.cpp stmt.cpp stmt.h symbol.cpp 
	                      symbol.h type.cpp type.h 

---------------------------------------------------------------------------

06/16/04 15:48:36 -- bradc

Log message:
	late afternoon prototype AST checkin (mg-seq mostly codegens)

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp main.cpp 
	                      stmt.cpp stmt.h type.h 

---------------------------------------------------------------------------

06/16/04 17:22:43 -- bradc

Log message:
	Almost end-of-day prototype AST checkin.

Modified files:
	chapel/compiler/AST/: Makefile TODO chapel.lex chapel.y expr.cpp 
	                      expr.h link.h main.cpp stmt.cpp stmt.h 
	                      symbol.cpp symbol.h type.cpp type.h yy.c 
	                      yy.h 
Added files:
	chapel/compiler/AST/: loc.cpp loc.h 

---------------------------------------------------------------------------

06/16/04 17:26:24 -- bradc

Log message:
	This is a really minor checkin that I've been sitting on
	for awhile, waiting for a bigger checkin to attach it to.
	It changes the way domains are set up to use a reference
	parameter rather than returning a structure, for performance
	reasons.

Modified files:
	chapel/compiler/: codegen.cpp 
	chapel/runtime/include/: domain.h 
	chapel/runtime/src/: domain.c 
	chapel/test/trivial/bradc/: .cvsignore 
	chapel/test/trivial/bradc/arrinit/: .cvsignore 

---------------------------------------------------------------------------

06/16/04 17:55:41 -- bradc

Log message:
	Last checkin of the day -- minor stuff: fixed a valgrind-found
	problem with the prototype AST, and commented some debug
	printing out of start_test.

Modified files:
	chapel/compiler/AST/: .cvsignore expr.cpp 
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/17/04 14:25:16 -- bradc

Log message:
	Got lists of params/vars working better with prototype AST.

Modified files:
	chapel/compiler/AST/: chapel.y stmt.cpp symbol.cpp symbol.h 
	                      symtab.cpp symtab.h type.cpp type.h 

---------------------------------------------------------------------------

06/17/04 15:49:49 -- bradc

Log message:
	Beefed up symboltable for prototype AST a bit; removed some NULLs.

Modified files:
	chapel/compiler/AST/: TODO chapel.y expr.cpp expr.h main.cpp 
	                      stmt.cpp stmt.h symbol.cpp symbol.h 
	                      symtab.cpp symtab.h 

---------------------------------------------------------------------------

06/18/04 13:02:59 -- bradc

Log message:
	Lunch break.  Continued populating symboltable.

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y link.cpp 
	                      symbol.cpp symbol.h symtab.cpp symtab.h 

---------------------------------------------------------------------------

06/18/04 16:23:22 -- bradc

Log message:
	Checkpoint time.  Continuing to populate the symboltable.

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y expr.cpp expr.h 
	                      link.cpp main.cpp stmt.cpp stmt.h 
	                      symbol.cpp symbol.h symtab.cpp symtab.h 
	                      type.cpp yy.c 

---------------------------------------------------------------------------

06/18/04 18:19:20 -- bradc

Log message:
	Improved handling of def-before-use cases in AST prototype.

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y expr.cpp expr.h 
	                      main.cpp symbol.cpp symbol.h symtab.cpp 
	                      symtab.h 

---------------------------------------------------------------------------

06/18/04 18:41:15 -- bradc

Log message:
	Last check-in for the weekend.  Changed order of
	symboltable dumps to match definition order rather
	than alphabetical (with option for the latter).

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y symtab.cpp 
Added files:
	chapel/compiler/AST/: prelude.chpl 

---------------------------------------------------------------------------

06/21/04 09:56:24 -- bradc

Log message:
	Shannon pointed out that my Makefile no longer worked from
	a clean state.  This should fix it.

Modified files:
	chapel/compiler/AST/: Makefile 

---------------------------------------------------------------------------

06/21/04 11:38:14 -- bradc

Log message:
	Removed some reduce/reduce problems and added in BoehmGC.

Modified files:
	chapel/compiler/AST/: Makefile TODO chapel.y expr.h loc.h 

---------------------------------------------------------------------------

06/21/04 17:01:18 -- bradc

Log message:
	Merged my prototype AST code with the main compiler.  By default,
	it is not used.  However, it can be selected using the --newast
	flag.  Currently this causes the new parser and AST to be used
	and the AST to be printed out, but no code to be generated or
	compiled.
	
	Added a few tests that I've been using to monitor its evolution
	and ensure that I don't go down the wrong path.
	
	Changed the Makefile structure slightly so that the AST code
	could continue to live in its own subdirectory, for organizational
	purposes.

Modified files:
	chapel/compiler/: Makefile driver.cpp driver.h files.cpp files.h 
	                  misc.cpp 
Added files:
	chapel/compiler/: createAST.cpp createAST.h 

Log message:
	Merged my prototype AST code with the main compiler.  By default,
	it is not used.  However, it can be selected using the --newast
	flag.  Currently this causes the new parser and AST to be used
	and the AST to be printed out, but no code to be generated or
	compiled.
	
	Added a few tests that I've been using to monitor its evolution
	and ensure that I don't go down the wrong path.
	
	Changed the Makefile structure slightly so that the AST code
	could continue to live in its own subdirectory, for organizational
	purposes.
	
	Changed the name of my Link class to ILink (Inheritance-based
	Link) to avoid conflicts with the previous instance.

Modified files:
	chapel/compiler/AST/: Makefile expr.h link.cpp link.h stmt.h 
	                      symbol.h symtab.cpp type.h 
Added files:
	chapel/compiler/AST/: Makefile.include Makefile.share 
	chapel/test/trivial/bradc/protoast/: COMPOPTS NOEXEC 
	                                     mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl mvm-seq.good 
	                                     test.chpl test.good 

---------------------------------------------------------------------------

06/21/04 17:04:56 -- bradc

Log message:
	Dang, broke my own build right before checking in!  This
	should fix it.

Modified files:
	chapel/compiler/AST/: Makefile 

---------------------------------------------------------------------------

06/22/04 15:17:04 -- bradc

Log message:
	Cleaning up AST prototype: integrated with compiler's
	warning/error mechanisms; removed code from header
	files.

Modified files:
	chapel/compiler/AST/: Makefile TODO expr.cpp expr.h link.cpp 
	                      main.cpp stmt.cpp stmt.h stringutil.cpp 
	                      symbol.cpp symbol.h symtab.cpp type.cpp 
	                      type.h 

---------------------------------------------------------------------------

06/22/04 17:23:00 -- bradc

Log message:
	Generalized our handling of reductions by specifying
	reduction classes in the standard prelude (which are
	currently empty) and having the parser cue on these
	rather than building "sum" in by hand as I was
	previously and assuming that all other symbols used
	in the reduction context were also reductions.

Modified files:
	chapel/compiler/: createAST.cpp createAST.h driver.cpp 
	chapel/compiler/AST/: Makefile TODO chapel.lex chapel.y loc.cpp 
	                      prelude.chpl symbol.cpp symbol.h 
	                      symtab.cpp symtab.h type.cpp type.h 

---------------------------------------------------------------------------

06/23/04 10:13:01 -- jplevyak (a.k.a. n10253)

Log message:
	Added new option to permit cloning for constants.
	Fixed bug related to specializing classes.
	Added test cases related to above bug.

Modified files:
	chapel/compiler/: driver.cpp fa.cpp fa.h 
Added files:
	chapel/test/flowanalysis/jplevyak/: cs4.chpl cs4.good cs5.chpl 
	                                    cs5.good 

---------------------------------------------------------------------------

06/23/04 11:22:25 -- jplevyak (a.k.a. n10253)

Log message:
	new flow analysis test cases based on proposed review example
	fixed tuple handling to allow recursive destructuring of tuples
	fixed flow analysis test log to avoid NULL reference

Modified files:
	chapel/compiler/: ast.cpp fa.cpp 
Added files:
	chapel/test/flowanalysis/jplevyak/: review1.chpl review1.good 

---------------------------------------------------------------------------

06/23/04 14:47:49 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a couple bugs in the graphing subsystem triggered by larger programs.

Modified files:
	chapel/compiler/: fa.cpp graph.cpp 

---------------------------------------------------------------------------

06/23/04 18:03:13 -- bradc

Log message:
	Improved identification of reductions in the parser.  In doing
	so, added a new field to class Symbol that keeps track of the
	scope level in which it was introduced.  Symbols of scope level
	0 are defined in the standard prelude.

Modified files:
	chapel/compiler/AST/: TODO symbol.cpp symbol.h symtab.cpp 
	                      symtab.h 
Added files:
	chapel/test/trivial/bradc/protoast/: badred.chpl badred.good 

---------------------------------------------------------------------------

06/23/04 22:11:21 -- jplevyak (a.k.a. n10253)

Log message:
	additional flow analysis test case based on review example

Added files:
	chapel/test/flowanalysis/jplevyak/: review2.chpl review2.good 

---------------------------------------------------------------------------

06/23/04 22:30:04 -- jplevyak (a.k.a. n10253)

Log message:
	Fix for bad sort.

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs1.good cs3.good cs4.good 
	                                    cs5.good review1.good 
	                                    review2.good 

---------------------------------------------------------------------------

06/28/04 12:04:17 -- jplevyak (a.k.a. n10253)

Log message:
	Improved number of analysis clones created for polymorphic classes.

Modified files:
	chapel/compiler/: fa.cpp 

---------------------------------------------------------------------------

06/30/04 10:31:32 -- jplevyak (a.k.a. n10253)

Log message:
	update flow analysis test

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs4.good 

---------------------------------------------------------------------------

06/30/04 13:00:27 -- jplevyak (a.k.a. n10253)

Log message:
	Eliminate extra work done because of analysis of unused lvalues

Modified files:
	chapel/compiler/: fa.cpp 

---------------------------------------------------------------------------

06/30/04 15:16:19 -- jplevyak (a.k.a. n10253)

Log message:
	remove an incomplete (buggy) optimization

Modified files:
	chapel/compiler/: fa.cpp 
	chapel/test/flowanalysis/jplevyak/: cs4.good 

---------------------------------------------------------------------------

07/01/04 12:54:43 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed compilation warning in graph.cpp from %x instead of %p.
	Fixed bug in flow anlysis related to cloning of classes.

Modified files:
	chapel/compiler/: fa.cpp graph.cpp 

---------------------------------------------------------------------------

07/08/04 16:44:44 -- shannon

Log message:
	Added code generation using the new AST.  The double
	operators, like assignment expressions or shift operators,
	do not yet work.  Currently if type is not given explicitly
	for a variable it is assumed to be an integer.  Other
	types are generated using a string comparison.

Modified files:
	chapel/compiler/AST/: expr.cpp expr.h link.cpp link.h stmt.cpp 
	                      stmt.h symbol.cpp symbol.h symtab.cpp 
	                      type.cpp type.h 

---------------------------------------------------------------------------

07/09/04 11:58:37 -- jplevyak (a.k.a. n10253)

Log message:
	Big checkin.
	
	This adds the new dispatch mechanism and updates all the surrounding
	code to use it.  This is a multiple dispatch mechanism that support
	destructuring and multiple inheritance.  It reports ambiguties.
	
	Error reporting for typing has been completely overhauled.
	Errors are now reported in a manner compatible with gcc (and
	hence emacs compilation).  Errors are reported by location in
	the code and include a (configurable) call tree depth to help
	the user differentiate versions of generic calls.
	
	The testing system has been changed to do sub_clean before a
	run so as to cleanup from the last run (necessary since I am
	testing the error system and erroroneous compilations don't necessarily
	overwrite the previous tests files).

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h builtin_symbols.h 
	                  cfg.cpp cg_funs.cpp clone.cpp codegen.cpp 
	                  driver.cpp driver.h dump.cpp fa.cpp fa.h 
	                  fa_extras.cpp fun.cpp fun.h geysa.h graph.cpp 
	                  if1.cpp misc.cpp misc.h pnode.cpp pnode.h 
	                  prelude.chpl prelude.v ssu_extra.cpp sym.h 
	                  var.h vec.cpp vec.h 
	chapel/test/: start_clean start_test 
	chapel/test/flowanalysis/jplevyak/: PREDIFF cs1.good cs4.good 
	                                    cs5.good review1.good 
	                                    review2.good 
Added files:
	chapel/compiler/: pattern.cpp pattern.h 

---------------------------------------------------------------------------

07/09/04 12:01:40 -- jplevyak (a.k.a. n10253)

Log message:
	new test cases for dispatch system and error reporting

Added files:
	chapel/test/flowanalysis/jplevyak/: badcall.good badcall.v 
	                                    badprimitive.good 
	                                    badprimitive.v cs6.good 
	                                    cs6.v 

---------------------------------------------------------------------------

07/09/04 12:02:26 -- jplevyak (a.k.a. n10253)

Log message:
	new tests for dispatch system

Added files:
	chapel/test/flowanalysis/jplevyak/: dispatch1.good dispatch1.v 
	                                    dispatch2.good dispatch2.v 
	                                    dispatch3.good dispatch3.v 
	                                    dispatch4.good dispatch4.v 

---------------------------------------------------------------------------

07/09/04 14:59:19 -- bradc

Log message:
	Checking in some code to do token-counting and other static
	code statistics that I've been playing with as a background
	activity to putting review slides together.

Added files:
	chapel/util/tokencount/: .cvsignore Makefile tokencount.c 
	                         tokencount.h tokencount.l tokencount.y 

---------------------------------------------------------------------------

07/12/04 16:27:49 -- jplevyak (a.k.a. n10253)

Log message:
	Member function support (as opposed to multi-methods).
	Class initialize support (0 args currently).

Modified files:
	chapel/compiler/: ast.cpp ast.h builtin_symbols.h codegen.cpp 
	                  fa.cpp fa_extras.cpp if1.cpp pattern.cpp 
	                  prelude.chpl prelude.v prim_data.dat scope.cpp 
	                  scope.h sym.h v.g 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	                                    cs6.good cs6.v 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 

---------------------------------------------------------------------------

07/12/04 16:29:54 -- jplevyak (a.k.a. n10253)

Log message:
	new test cases for member functions

Added files:
	chapel/test/flowanalysis/jplevyak/: memberfun.v 

---------------------------------------------------------------------------

07/13/04 12:52:09 -- bradc

Log message:
	Adding three scripts to the token counting utility directory:
	
	checkdiff : runs the tokencounter over a C++ file (or group
	of files) and verifies that the output is the same
	as the input (assumes tokencounter is doing nothing
	other than passing tokens through).
	
	tokctnightly: a script that does the nightly token counting
	of the compiler and runtime.
	
	countrange: a script that will do token counting for the
	past n days (used to generate token counting graphs
	for the span of time that we didn't yet have these
	utilities).

Added files:
	chapel/util/tokencount/: checkdiff countrange tokctnightly 

---------------------------------------------------------------------------

07/13/04 14:30:53 -- jplevyak (a.k.a. n10253)

Log message:
	Cache upper limit on possible callees for each call.
	Fixed bugs dealing with object creation.

Modified files:
	chapel/compiler/: ast.cpp builtin_symbols.h fa.cpp fa.h 
	                  pattern.cpp pnode.h prelude.chpl prelude.v 
	                  sym.h 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	                                    cs4.good cs5.good cs6.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good review1.good 
	                                    review2.good 

---------------------------------------------------------------------------

07/14/04 08:43:47 -- jplevyak (a.k.a. n10253)

Log message:
	forgot good output file for test case

Added files:
	chapel/test/flowanalysis/jplevyak/: memberfun.good 

---------------------------------------------------------------------------

07/14/04 09:08:39 -- jplevyak (a.k.a. n10253)

Log message:
	eliminate instability in types log which was causing random test failures

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs6.good memberfun.good 
	                                    review2.good 

---------------------------------------------------------------------------

07/14/04 09:16:05 -- jplevyak (a.k.a. n10253)

Log message:
	Remove instability from type log reporting

Modified files:
	chapel/compiler/: TODO fa.cpp fa_extras.cpp 

---------------------------------------------------------------------------

07/14/04 10:41:38 -- jplevyak (a.k.a. n10253)

Log message:
	Deal with one more instability in the valgrind output

Modified files:
	chapel/compiler/: pattern.cpp 

---------------------------------------------------------------------------

07/15/04 10:14:54 -- jplevyak (a.k.a. n10253)

Log message:
	Add 'make clean' target

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

07/16/04 13:20:53 -- jplevyak (a.k.a. n10253)

Log message:
	named arguments work
	new test case for named arguments

Modified files:
	chapel/compiler/: ast.cpp clone.cpp fa.cpp pattern.cpp pattern.h 
	                  sym.h v.g vec.cpp 
	chapel/test/flowanalysis/jplevyak/: badcall.good 
	                                    badprimitive.good cs2.good 
	                                    cs3.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: named.good named.v 

---------------------------------------------------------------------------

07/19/04 12:49:19 -- jplevyak (a.k.a. n10253)

Log message:
	Support for destructuring of non-tuple types in function calls.
	Test case for destructring of non-tuple types.

Modified files:
	chapel/compiler/: TODO ast.cpp ast_kinds.h fa.cpp pattern.cpp 
	                  v.g 
	chapel/test/flowanalysis/jplevyak/: dispatch3.good 
	chapel/test/parsing/jplevyak/: literal.good tuples.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: structtype.good structtype.v 

---------------------------------------------------------------------------

07/19/04 13:45:08 -- bradc

Log message:
	Updated sub_test to use the --tools option by default with
	valgrind to support newer versions of valgrind such as 1.2.1
	(now selected on lotus when using Brad's .chapelcshrc-env
	file...).

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

07/19/04 14:36:24 -- bradc

Log message:
	Two small fixes to token-counting scripts:
	
	1) Made tokctnightly take the cast/ and make_prims/ subdirectories
	into account, because they were being overlooked before.
	
	2) Made tokencount.c work better in the presence of wildcards
	which the shell doesn't expand (which sh doesn't seem to do
	when there are no matches) -- previously this was causing a
	seg fault.

Modified files:
	chapel/util/tokencount/: tokctnightly tokencount.c 

---------------------------------------------------------------------------

07/20/04 13:12:44 -- bradc

Log message:
	* added more operators to the scanner, parser, and Expr classes (&=,
	|=, ^=, <<, >>).
	
	* fixed op= operators so that the op is no longer dropped on the floor
	and implemented code generation and pretty-printing for them.
	Updated the protoast/mg tests appropriately.
	
	* refactored the "Type" field of Symbol's subclasses into Symbol.
	Currently all Symbols are assumed to have a type of some sort,
	though that type may be dtUnknown;
	
	* started implementing a type_info() method on the Expr classes which
	will return the Type of that expression.  Currently this only works
	for the most basic of expressions and dtUnknown is returned when we
	don't know.
	
	* continued special casing write/writeln statements by making them a
	subclass of FnCall.  Implemented codegen for them using the same
	runtime mechanisms as the boostrap AST.
	
	* set up code generation framework for the new AST -- opened files,
	set up init procedure, etc.  Codegen is not very implemented for the
	new AST, so it would be naive to expect it to work.  The
	--no-codegen flag is currently your friend (as is the fact that you
	still only get the new AST with the --newast flag).  When using
	--newast and --no-codegen, the code will pretty-print to the screen
	as before.  It's worth noting that currently, the way that the init
	procedure is generated is very naive -- all code is assumed to be in
	init, which is just plain wrong.
	
	* put a rule into the Makefile that generates an error when "return"
	is used in chapel.y, because it's a mistake that I often make
	(rather than assigning to $$), and it sometimes takes me far too
	long to realize why the parser has suddenly broken.
	
	* changed the generation of the emacs TAGS file to include new AST
	sources.

Modified files:
	chapel/compiler/: Makefile codegen.cpp codegen.h createAST.cpp 
	                  createAST.h driver.cpp 
	chapel/compiler/AST/: Makefile TODO chapel.lex chapel.y expr.cpp 
	                      expr.h stmt.cpp symbol.cpp symbol.h 
	                      type.cpp type.h 
	chapel/test/trivial/bradc/protoast/: COMPOPTS 
	                                     mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/test/trivial/bradc/protoast/: .cvsignore 

---------------------------------------------------------------------------

07/20/04 14:04:54 -- bradc

Log message:
	Replaced all the bad casting code that I was using to traverse links
	with a macro implemented using dynamic casts.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp link.h stmt.cpp symbol.cpp 
	                      symbol.h symtab.cpp type.cpp 

---------------------------------------------------------------------------

07/20/04 16:49:07 -- bradc

Log message:
	* Fixed up implementation of init() routine by sorting
	through all statements at the file scope and making
	those that shouldn't be part of the global scope part
	of the init() routine's body.  Updated tests in
	trivial/bradc/protoast to reflect this.
	
	* Laid in a rough implementation of codegen for a FnDefStmt.

Modified files:
	chapel/compiler/: codegen.cpp createAST.cpp 
	chapel/compiler/AST/: link.cpp link.h stmt.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

07/20/04 17:05:09 -- bradc

Log message:
	Added a test to lock in some of my work today.  Fixed a small
	bug in Shannon's VarDefStmt code generation in which the
	semicolon was lost if the variable had no initializer.

Modified files:
	chapel/compiler/AST/: TODO stmt.cpp 
Added files:
	chapel/test/trivial/bradc/protoast/codegen/: .cvsignore COMPOPTS 
	                                             test.chpl test.good 

---------------------------------------------------------------------------

07/21/04 14:23:49 -- jplevyak (a.k.a. n10253)

Log message:
	Work on adding support for destructring return arguments (not done).
	Added new review3.chpl test case.
	Make sure that tuples sizes match during destructuring.

Modified files:
	chapel/compiler/: ast.cpp clone.cpp dump.cpp fa.cpp 
	                  fa_extras.cpp fun.cpp if1.cpp pattern.cpp 
	                  prim_data.dat scope.cpp sym.h v.g 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: review3.chpl review3.good 

---------------------------------------------------------------------------

07/21/04 16:47:39 -- jplevyak (a.k.a. n10253)

Log message:
	Support for destructuring of return values.
	Test case for destructuring of return values.
	Test case for multiple definitions in one statement.

Modified files:
	chapel/compiler/: ast.cpp builtin_symbols.h fa.cpp fa.h 
	                  fa_extras.cpp prelude.chpl prelude.v 
	                  prim_data.dat 
Added files:
	chapel/test/flowanalysis/jplevyak/: multipledef.good 
	                                    multipledef.v 
	                                    multiplereturn.good 
	                                    multiplereturn.v 

---------------------------------------------------------------------------

07/21/04 17:10:07 -- jplevyak (a.k.a. n10253)

Log message:
	test cases for error messages for unmatch return destructuring

Modified files:
	chapel/compiler/: fa.cpp fa_extras.cpp 
	chapel/test/flowanalysis/jplevyak/: review3.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: badreturn.good badreturn.v 

---------------------------------------------------------------------------

07/21/04 17:38:50 -- jplevyak (a.k.a. n10253)

Log message:
	Named destrcturing of classes in return arguments.
	Test case for named destructuring in return arguments.

Modified files:
	chapel/compiler/: ast.cpp ast.h fa.cpp sym.h v.g 
	chapel/test/flowanalysis/jplevyak/: badreturn.good 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: destruct.good destruct.v 
	                                    destruct2.good destruct2.v 

---------------------------------------------------------------------------

07/23/04 16:57:47 -- bradc

Log message:
	Changes made yesterday (and reflected in last night's test) to
	make the cron job depend less on CHPL* environment variables
	and my personal chapel environment (this change also involved
	changing my crontab entries).

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

07/23/04 17:06:07 -- bradc

Log message:
	Improved function code generation routines:
	
	* added notion of Symbols codegening their definition (rather than
	their use, which has been the default) via the codegenDef() method.
	
	* refactored function definition code away from FnDefStmt's codegen()
	method and into FunSymbol's codegenDef() method (but why do I use
	Fun in some places and Fn in others!?!?)
	
	* added notion of whether a symbol is exported or not (from the scope
	it's declared in) to the AST.
	
	* added #ifndef protection to compiler-generated header files.

Modified files:
	chapel/compiler/: createAST.cpp files.cpp 
	chapel/compiler/AST/: Makefile TODO stmt.cpp symbol.cpp symbol.h 
	                      symtab.cpp symtab.h 
	chapel/test/trivial/bradc/protoast/codegen/: test.good 

---------------------------------------------------------------------------

07/26/04 10:45:28 -- bradc

Log message:
	Trivial update: renamed Fun* to Fn* in my code for uniformity.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: chapel.y expr.cpp stmt.cpp stmt.h 
	                      symbol.cpp symbol.h symtab.cpp symtab.h 

---------------------------------------------------------------------------

07/26/04 11:14:42 -- bradc

Log message:
	More housecleaning: Wrapped ILink append() routine in a
	macro (appendLink()) which handles NULL and isNull()
	links more cleanly.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: TODO chapel.y link.cpp link.h symtab.cpp 

---------------------------------------------------------------------------

07/26/04 14:36:30 -- bradc

Log message:
	Small fix to string literals in scanner.

Modified files:
	chapel/compiler/AST/: chapel.lex 

---------------------------------------------------------------------------

07/26/04 17:33:46 -- jplevyak (a.k.a. n10253)

Log message:
	1. Changed -lF to log the results after cloning.
	2. Changed the Makefiles to have separate CXX and CXXFLAGS variables so
	that we can compile straight C files using the C compiler and appropriate
	flags.
	3. Revived the low level code generator.  This was a great test for cloning
	as it pointed out a couple minor issues with respect to the new features
	(member functions, constructors).
	4. Added 3 new test cases for the low level code generator, including review3.chpl

Modified files:
	chapel/compiler/: Makefile c_runtime.h cg.cpp cg.h cg_funs.cpp 
	                  clone.cpp clone.h driver.cpp dump.cpp fa.cpp 
	                  fa.h fa_extras.cpp fun.cpp fun.h geysa.h 
	                  graph.cpp map.h pattern.h pnode.cpp pnode.h 
	                  vec.cpp 
	chapel/compiler/AST/: Makefile 
	chapel/compiler/cast/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: Makefile 
	chapel/compiler/test/: Makefile 
	chapel/make/: Makefile.base Makefile.gnu 
	chapel/test/compflags/bradc/badflagdash/: COMPOPTS declint.good 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	                                    cs4.good cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good 
Added files:
	chapel/compiler/: Makefile.cg 
	chapel/test/lowlevelcg/jplevyak/: 1.good 1.v COMPOPTS 
	                                  Makefile.cg review3.chpl 
	                                  review3.good sample.good 
	                                  sample.v 

---------------------------------------------------------------------------

07/26/04 17:59:11 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed compilation warning in vec.cpp.
	Fix CXXFLAGS which did not contain -Werror which would have prevented
	the issue above from being checked in.
	Fixed issue in the low level code generator and updated the tests.

Modified files:
	chapel/compiler/: cg.cpp clone.cpp fun.cpp map.h pattern.cpp 
	chapel/test/flowanalysis/jplevyak/: review1.good review2.good 
	                                    review3.good 
	chapel/test/lowlevelcg/jplevyak/: review3.good 

---------------------------------------------------------------------------

07/27/04 12:44:50 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in IF1 creation for the <= and >= operators.
	Fixed a bug in low level code generation.

Modified files:
	chapel/compiler/: ast.cpp cg.cpp 

---------------------------------------------------------------------------

07/27/04 13:24:11 -- jplevyak (a.k.a. n10253)

Log message:
	Some cleanup.
	Removed explicit template instantiation.

Modified files:
	chapel/compiler/: cg.cpp clone.cpp dump.cpp fa.cpp fun.cpp fun.h 
	                  graph.cpp list.cpp list.h pattern.cpp 
	                  pattern.h pnode.h vec.cpp vec.h 

---------------------------------------------------------------------------

07/27/04 13:27:57 -- jplevyak (a.k.a. n10253)

Log message:
	Updated to take into account mysystem, stringutil, etc.

Modified files:
	chapel/compiler/test/: Makefile 

---------------------------------------------------------------------------

07/27/04 17:20:13 -- jplevyak (a.k.a. n10253)

Log message:
	Added test cases for support of "value" semantics.
	Fixed a couple bugs in IF1 generation of "value" variables.

Modified files:
	chapel/compiler/: ast.cpp fa.cpp prelude.chpl sym.h 
	chapel/test/flowanalysis/jplevyak/: cs4.good cs5.good 
	                                    review1.good review2.good 
	                                    review3.good 
	chapel/test/lowlevelcg/jplevyak/: review3.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: classvar.good classvar.v 
	                                    var.chpl var.good var2.chpl 
	                                    var2.good 

---------------------------------------------------------------------------

07/28/04 10:59:37 -- jplevyak (a.k.a. n10253)

Log message:
	sorted many of the internal data structures so as to limit the effects
	of hash table locations on the intermediate results of analysis.

Modified files:
	chapel/compiler/: code.h fa.cpp fa.h fun.cpp fun.h if1.cpp 
	                  pnode.cpp pnode.h var.cpp var.h 

---------------------------------------------------------------------------

07/28/04 16:21:08 -- bradc

Log message:
	Broke code generation of variables into two steps: the
	C declaration of the variable, and the initialization
	of the variable.  This is in part because C's variable
	declarations still need to be at the top of the scope,
	and in part because not all legal Chapel initializations
	are legal C initializations (as a TODO, noted in stmt.cpp,
	those variables that could be handled using C declarations
	+ initializations could be handled in this way down the
	road...).  Also moved VarDefStmts in the global scope into
	the __init() procedure, and hoisted the definition of the
	variable into the generated internal header file.  Updated
	the protoast tests to reflect this change.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: TODO stmt.cpp stmt.h 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

07/28/04 17:48:21 -- bradc

Log message:
	Some random stuff:
	
	* parenthesize all codegen'd binary expressions as a
	conservative way to get operator precedence correct
	for the time being.
	
	* implemented type_info() for UnOp
	
	* implemented some very simple and naive type inference
	for variables with initializers whose type is elided.
	This is a stop-gap until we get John's inference stuff
	hooked into the high-level AST.
	
	* these changes allow Shannon's tests to work correctly,
	so turned on the --newast flag in her directory and
	removed her preincrement/postincrement tests, as we
	don't have them in the current language spec (or
	front-end).
	
	* dropped in some .cvsignore files to ignore test-generated
	files in the lowlevelcg directory, and output/ directories
	in the trivial subdirectories (because I often test with
	--compopts "--savec output" so I can see the generated code
	that failed.

Modified files:
	chapel/compiler/AST/: expr.cpp expr.h symtab.cpp 
	chapel/test/trivial/bradc/functions/: chain.chpl mutrec.chpl 
	chapel/test/trivial/bradc/protoast/: .cvsignore 
	chapel/test/trivial/bradc/write/: .cvsignore 
	chapel/test/trivial/shannon/: .cvsignore 
Added files:
	chapel/test/lowlevelcg/jplevyak/: .cvsignore 
	chapel/test/trivial/shannon/: COMPOPTS 
Removed files:
	chapel/test/trivial/shannon/: increment.chpl increment.good 

---------------------------------------------------------------------------

07/28/04 18:02:52 -- bradc

Log message:
	Oops, didn't mean to check this one in.

Modified files:
	chapel/test/trivial/bradc/functions/: mutrec.chpl 

---------------------------------------------------------------------------

07/29/04 10:08:52 -- jplevyak (a.k.a. n10253)

Log message:
	Upgrade BoehmGC to version 6.3
	This corrects an issue I am seeing where non-free objects are being collected.
	(could be a gcc 3.4.1,Linux 2.6,or AMD64 issue)

Modified files:
	chapel/compiler/: pattern.cpp 
	chapel/make/: Makefile.base 
Added files:
	chapel/third-party/boehmgc/: gc6.3.tar.gz 
	chapel/third-party/boehmgc/gc6.3/: AmigaOS.c BCC_MAKEFILE 
	                                   EMX_MAKEFILE MacOS.c 
	                                   MacProjects.sit.hqx 
	                                   Makefile.DLLs Makefile.am 
	                                   Makefile.direct Makefile.dj 
	                                   Makefile.in NT_MAKEFILE 
	                                   NT_STATIC_THREADS_MAKEFILE 
	                                   NT_THREADS_MAKEFILE 
	                                   OS2_MAKEFILE PCR-Makefile 
	                                   README.QUICK SMakefile.amiga 
	                                   WCC_MAKEFILE acinclude.m4 
	                                   aclocal.m4 add_gc_prefix.c 
	                                   aix_irix_threads.c allchblk.c 
	                                   alloc.c alpha_mach_dep.S 
	                                   backgraph.c base_lib 
	                                   blacklst.c callprocs 
	                                   checksums.c config.guess 
	                                   config.sub configure 
	                                   configure.host configure.in 
	                                   darwin_stop_world.c dbg_mlc.c 
	                                   depcomp digimars.mak 
	                                   dyn_load.c finalize.c gc.a 
	                                   gc.mak gc_cpp.cc gc_cpp.cpp 
	                                   gc_dlopen.c gcc_support.c 
	                                   gcj_mlc.c gcname.c headers.c 
	                                   hpux_test_and_clear.s 
	                                   ia64_save_regs_in_stack.s 
	                                   if_mach if_mach.c 
	                                   if_not_there if_not_there.c 
	                                   install-sh libtool.m4 
	                                   ltmain.sh mach_dep.c malloc.c 
	                                   mallocx.c mark.c mark_rts.c 
	                                   mips_sgi_mach_dep.s 
	                                   mips_ultrix_mach_dep.s misc.c 
	                                   missing mkinstalldirs 
	                                   new_hblk.c obj_map.c os_dep.c 
	                                   pc_excludes pcr_interface.c 
	                                   powerpc_darwin_mach_dep.s 
	                                   pthread_stop_world.c 
	                                   pthread_support.c ptr_chck.c 
	                                   real_malloc.c reclaim.c 
	                                   rs6000_mach_dep.s setjmp_t.c 
	                                   solaris_pthreads.c 
	                                   solaris_threads.c 
	                                   sparc_mach_dep.S 
	                                   sparc_netbsd_mach_dep.s 
	                                   sparc_sunos4_mach_dep.s 
	                                   specific.c stubborn.c 
	                                   threadlibs threadlibs.c 
	                                   typd_mlc.c version.h 
	                                   win32_threads.c 
	chapel/third-party/boehmgc/gc6.3/Mac_files/: MacOS_Test_config.h 
	                                             MacOS_config.h 
	                                             dataend.c 
	                                             datastart.c 
	chapel/third-party/boehmgc/gc6.3/cord/: cordbscs.c cordprnt.c 
	                                        cordtest.c cordxtra.c 
	                                        de.c de_cmds.h 
	                                        de_win.ICO de_win.RC 
	                                        de_win.c de_win.h 
	chapel/third-party/boehmgc/gc6.3/doc/: Makefile.am Makefile.in 
	                                       README README.DGUX386 
	                                       README.Mac README.MacOSX 
	                                       README.OS2 README.amiga 
	                                       README.arm.cross 
	                                       README.autoconf 
	                                       README.changes 
	                                       README.contributors 
	                                       README.cords 
	                                       README.darwin README.dj 
	                                       README.environment 
	                                       README.ews4800 README.hp 
	                                       README.linux 
	                                       README.macros 
	                                       README.rs6000 README.sgi 
	                                       README.solaris2 
	                                       README.uts README.win32 
	                                       barrett_diagram 
	                                       debugging.html gc.man 
	                                       gcdescr.html 
	                                       gcinterface.html 
	                                       leak.html scale.html 
	                                       simple_example.html 
	                                       tree.html 
	chapel/third-party/boehmgc/gc6.3/include/: Makefile.am 
	                                           Makefile.in cord.h 
	                                           ec.h gc.h gc_alloc.h 
	                                           gc_allocator.h 
	                                           gc_amiga_redirects.h 
	                                           gc_backptr.h 
	                                           gc_config_macros.h 
	                                           gc_cpp.h gc_gcj.h 
	                                           gc_inl.h gc_inline.h 
	                                           gc_local_alloc.h 
	                                           gc_mark.h 
	                                           gc_pthread_redirects.h 
	                                           gc_typed.h javaxfc.h 
	                                           leak_detector.h 
	                                           new_gc_alloc.h 
	                                           weakpointer.h 
	chapel/third-party/boehmgc/gc6.3/include/private/: cord_pos.h 
	                                                   darwin_semaphore.h 
	                                                   darwin_stop_world.h 
	                                                   dbg_mlc.h 
	                                                   gc_hdrs.h 
	                                                   gc_locks.h 
	                                                   gc_pmark.h 
	                                                   gc_priv.h 
	                                                   gcconfig.h 
	                                                   pthread_stop_world.h 
	                                                   pthread_support.h 
	                                                   solaris_threads.h 
	                                                   specific.h 
	chapel/third-party/boehmgc/gc6.3/tests/: leak_test.c middle.c 
	                                         test.c test.o 
	                                         test_cpp.cc 
	                                         thread_leak_test.c 
	                                         trace_test.c 

---------------------------------------------------------------------------

07/29/04 10:32:24 -- jplevyak (a.k.a. n10253)

Log message:
	Fix bad deallocation issue.

Modified files:
	chapel/compiler/: fa.cpp pnode.h 

---------------------------------------------------------------------------

07/29/04 12:28:29 -- jplevyak (a.k.a. n10253)

Log message:
	New valgrind suppressions for v6.3

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

07/29/04 12:38:43 -- jplevyak (a.k.a. n10253)

Log message:
	one more to get a clean run

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

07/29/04 12:39:42 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for running valgrind on x86_64 on 32 bit executables.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

07/29/04 15:22:50 -- bradc

Log message:
	Added .cvsignore files for new version of boehmgc.

Added files:
	chapel/third-party/boehmgc/gc6.3/: .cvsignore 
	chapel/third-party/boehmgc/gc6.3/doc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.3/include/: .cvsignore 

---------------------------------------------------------------------------

07/29/04 16:05:04 -- bradc

Log message:
	* implemented some basic code generation for domains in the
	new AST.  This isn't guaranteed to work for much more than
	simple 1D domains for the time being...
	
	* started adding some new methods to the Expr hierarchy, though
	didn't implement them for many subclasses:
	isComputable() -- indicates whether the expression's value
	is computable at runtime
	intVal() -- returns the computable value for integer
	expressions
	
	* added better support for INT_FATAL() macro -- can still send
	in an AST* as the first argument, but can also send in a Loc*
	(root-ish class from the new AST that defines a filename and
	linenumber), or leave off any location indicator (previously,
	lots of calls sent in NULL...).
	
	* renamed type_info() to typeInfo() in new AST stuff and did
	a little more implementation of it for
	
	* changed default stride expression for SimpleSeqExpr from a
	NullExpr to stride "1" in hopes of reducing special cases.
	
	* fixed up generation of types in variable declarations
	(Shannon, this was the note that I was referring to when
	we talked on Tuesday.  I couldn't hold off any longer, but
	it would be worth doing a diff between these two files to
	see waht I did and why -- look for your name in the old
	version of the file).

Modified files:
	chapel/compiler/: beautify.cpp codegen.cpp createAST.cpp 
	                  datatype.cpp files.cpp misc.cpp misc.h 
	                  stringutil.cpp 
	chapel/compiler/AST/: TODO expr.cpp expr.h stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp type.h 

---------------------------------------------------------------------------

07/29/04 17:51:03 -- bradc

Log message:
	* The main change in this check-in is the implementation of
	code generation for enumerated types, including the ability
	to print them out.  This change involved the following three
	steps which are more general:
	
	* Moved generation of default format strings for write statements
	from WriteCall to Type hierarchy so that things like enums and
	arrays could generate appopriate formats.
	
	* Started implementing codegen for TypeDefStmt's, and put
	methods to the Type hierarchy to generate IO routines for
	that type.
	
	* Specialized the symbols stored by EnumType to be EnumSymbols
	rather than simply Symbols.
	
	* As a side issue, added codegen for cast expressions.
	
	* Added a simple test of declaring, assigning, and printing
	enumerated type variables, as well as checking their integer
	values.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp expr.h stmt.cpp type.cpp 
	                      type.h 
	chapel/runtime/include/: chpltypes.h 
	chapel/test/lowlevelcg/jplevyak/: .cvsignore 
	chapel/test/trivial/bradc/protoast/codegen/: .cvsignore 
Added files:
	chapel/test/trivial/bradc/protoast/codegen/: enum.chpl enum.good 

---------------------------------------------------------------------------

07/30/04 11:48:17 -- bradc

Log message:
	Updated lowlevelcg tests to squelch printing of gcc compile
	line to make these tests more portable to different platforms
	(in particular with different directories used for the include
	paths...)

Modified files:
	chapel/test/lowlevelcg/jplevyak/: 1.good Makefile.cg 
	                                  review3.good sample.good 

---------------------------------------------------------------------------

08/02/04 15:10:09 -- jplevyak (a.k.a. n10253)

Log message:
	handle inheritance of functions and member variables
	add test case for above
	begin work on parametric types

Modified files:
	chapel/compiler/: ast.cpp ast.h builtin_symbols.h fa.cpp if1.cpp 
	                  pattern.cpp prelude.chpl prelude.v 
	                  prim_data.dat scope.cpp sym.h v.g 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: memberfun2.good memberfun2.v 

---------------------------------------------------------------------------

08/03/04 12:30:46 -- jplevyak (a.k.a. n10253)

Log message:
	Add new option "analyzenewast" to complement "newast".
	Added field in ILink "AInfo *ainfo" initailize to NULL.
	Add placeholder "analysis.{cpp,h}" files.
	Cleanup some of the header includes to include fewer files.

Modified files:
	chapel/compiler/: Makefile arg.cpp builtin.cpp builtin.h cdb.cpp 
	                  driver.cpp if1.cpp num.h sym.h 
	chapel/compiler/AST/: link.cpp link.h 
Added files:
	chapel/compiler/: analysis.cpp analysis.h 

---------------------------------------------------------------------------

08/04/04 10:38:05 -- jplevyak (a.k.a. n10253)

Log message:
	Moved a bunch of stuff out of geysa.h.
	Compartmentalized many of the header files to eliminate cross dependencies.

Modified files:
	chapel/compiler/: TODO analysis.cpp analysis.h arg.cpp ast.cpp 
	                  ast_cf.cpp beautify.cpp cdb.cpp cfg.cpp cg.cpp 
	                  chpl.g chpltypes.h clone.cpp dom.cpp 
	                  driver.cpp dump.cpp fa.cpp files.cpp fun.h 
	                  geysa.h grammar.cpp graph.cpp if1.cpp if1.h 
	                  inline.cpp list.cpp log.h loop.cpp misc.cpp 
	                  misc.h parse.cpp parse.h parse_structs.h 
	                  pdb.cpp pdb.h pnode.h prim.cpp region.h 
	                  ssu.cpp ssu.h ssu_extra.cpp sym.h v.g 
	chapel/compiler/AST/: expr.h link.cpp link.h stmt.h symbol.h 

---------------------------------------------------------------------------

08/04/04 11:30:12 -- jplevyak (a.k.a. n10253)

Log message:
	Missing include files

Modified files:
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

08/04/04 11:45:54 -- bradc

Log message:
	Improved dependences for make_prims.o which depends on geysa.h
	and all the header files that it includes.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

08/04/04 14:17:26 -- jplevyak (a.k.a. n10253)

Log message:
	second part of massive header reorganization
	geysa.h is now a minimal environment containing
	some basic containers, GC, types etc, but nothing
	particular to any module (new AST, analysis, etc.)
	Header files are now as independant as reasonable, and
	most headers are accessed directly in the .cpp files.
	This should improve recompilation time for small changes.

Modified files:
	chapel/compiler/: ast.cpp ast.h ast_cf.cpp cdb.cpp cfg.cpp 
	                  cg.cpp clone.cpp code.h dom.cpp driver.cpp 
	                  dump.cpp fa.cpp fa.h fun.cpp fun.h geysa.h 
	                  grammar.h graph.cpp if1.cpp inline.cpp 
	                  inline.h internal.h log.cpp log.h loop.cpp 
	                  loop.h misc.cpp pattern.cpp pattern.h pdb.cpp 
	                  pdb.h pnode.cpp pnode.h prim.cpp prim.h 
	                  region.cpp region.h scope.cpp ssu.cpp sym.h 
	                  var.cpp 
	chapel/compiler/make/: Makefile.compiler.head 

---------------------------------------------------------------------------

08/04/04 15:40:25 -- bradc

Log message:
	A bunch of changes designed to get an initial 2D domain/array
	code through the compiler.  It's not quite there yet, but close
	and stable (and I'm getting distracted by other things, so time
	to check in):
	
	* added ability to query an Expr or Type's rank() (only
	partially implemented) -- the idea being that scalars are rank
	0 and arrays are whatever rank they are.  (There's some
	question about what an array of an array's rank should be, but
	we'll cross that bridge when we get there...)
	
	* Added basic implementations of typeInfo() and codegen() for
	ArrayRef expressions.
	
	* Improved typeInfo() for DomainExpr expressions
	
	* Added some basic codegen() for ForLoopStmt's
	
	* Improved the implementation of VarDefStmt's codegen() method.
	
	* Implemented codegenDefaultFormat() for arrays, since they
	want to generate strings for their element types, not the
	array as a whole.
	
	* Added some stuff to the runtime: float types, some basic array
	code, basic forall loop macros, 2D domains.  Lots of this stuff
	needs to be generalized and/or emitted on an as-needed basis,
	but it seemed easier to lay in some specific instantiations
	first and generalize later.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp expr.h stmt.cpp stmt.h 
	                      symbol.cpp type.cpp type.h 
	chapel/runtime/include/: chplio.h chpltypes.h domain.h stdchpl.h 
	chapel/runtime/src/: Makefile chplio.c domain.c 
	chapel/test/trivial/bradc/: conditional.chpl 
Added files:
	chapel/runtime/include/: array.h forall.h 
	chapel/runtime/src/: array.c 

---------------------------------------------------------------------------

08/04/04 15:49:31 -- bradc

Log message:
	Oops, this one snuck in with that last check-in accidentally.
	Reverting.

Modified files:
	chapel/test/trivial/bradc/: conditional.chpl 

---------------------------------------------------------------------------

08/04/04 15:54:09 -- jplevyak (a.k.a. n10253)

Log message:
	regularize include files for generated files

Modified files:
	chapel/compiler/: chpl.g parse.h v.g 
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

08/04/04 16:09:38 -- jplevyak (a.k.a. n10253)

Log message:
	make inclusion of ast.h explicit for all files so that this can
	be abstracted to allow for different types of AST's.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h ast.cpp ast.h 
	                  ast_cf.cpp cg_funs.cpp clone.cpp codegen.cpp 
	                  datatype.cpp datatype.h dump.cpp fa.cpp fa.h 
	                  fun.cpp graph.cpp inline.cpp parse.h prim.cpp 
	                  sym.h 

---------------------------------------------------------------------------

08/04/04 16:10:42 -- jplevyak (a.k.a. n10253)

Log message:
	oops, forgot the new file

Added files:
	chapel/compiler/: prim_data_incs.h 

---------------------------------------------------------------------------

08/05/04 12:35:40 -- bradc

Log message:
	Thanks to John's refactoring of include files for generated
	source code yesterday, this change improves our Makefiles
	so that (I believe) dependences will be correct for all
	generated source.  The one caveat is that if the third-party
	code changes, I don't think it's guaranteed that generated
	sources will correctly recompile.  This seemed like a
	reasonable step to take given that the third-party stuff
	is reasonably static, but the moral would be, if you remake
	your third-party directory, you might want to do a make
	clean in the compiler directory to be absolutely safe.
	
	The general strategy is that dummy .cpp files were introduced
	that #include only the single header file that is included
	by each generated source file, our make depend step is run
	on the .cpp file, and the output is sed-ited to define a
	Makefile variable.  Dependences are then added for the .o
	files for the generated files based on these variables to
	get the dependences correct.  This is actually what we
	were doing previously with geysa.h, but with John's recent
	refactoring of headers, this logic needed to be reproduced
	for other files rather than geysa.h.
	
	Since this doesn't use any new Makefile technology, I don't
	expect this to cause any problems for people, but if it does
	(or if you find things aren't getting remade when they should),
	give a shout.

Modified files:
	./: Makefile 
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	chapel/runtime/: Makefile 
Added files:
	chapel/compiler/: parse_incs.cpp prim_data_incs.cpp 
Removed files:
	chapel/compiler/: geysa.cpp 

---------------------------------------------------------------------------

08/05/04 16:43:51 -- jplevyak (a.k.a. n10253)

Log message:
	massive reorganization
	created new ParseAST as a subclass of the abstract superclass AST which
	will encapsulate the new AST (and the old AST) from the point of view of
	analysis, graphing, and dumping.
	Many files are converted, but a few functions still have to
	be reorganized.  In particular, codegen and inlining.  I have
	tried to callout these cases by using dynamic_cast<ParseAST*>

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h ast_cf.cpp cg_funs.cpp 
	                  chpl.g clone.cpp clone.h codegen.cpp codegen.h 
	                  driver.cpp dump.cpp dump.h fa.cpp 
	                  fa_extras.cpp fun.cpp grammar.cpp grammar.h 
	                  graph.cpp graph.h inline.cpp misc.cpp 
	                  parse.cpp parse.h parse_structs.h prim.cpp 
	                  prim.h sym.h v.g 
Added files:
	chapel/compiler/: parse_ast.cpp parse_ast.h 

---------------------------------------------------------------------------

08/05/04 19:58:01 -- shannon

Log message:
	Added the codegen method for the if-then-else statement.  Updated
	the tests to reflect the currently-supported syntax for
	conditionals.  Added the --newast compiler option to several
	more test directories.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/test/trivial/bradc/: conditional.chpl 
Added files:
	chapel/test/trivial/bradc/: COMPOPTS 
	chapel/test/trivial/bradc/arrinit/: COMPOPTS 
	chapel/test/trivial/bradc/write/: COMPOPTS 

---------------------------------------------------------------------------

08/06/04 13:07:53 -- bradc

Log message:
	Switched new parser/AST over to be the default.  The old AST
	is automatically selected when compiling .v source files, or
	when using the --oldast flag.  Switched the COMPOPTS files
	in the test hierarchy to reflect this reversal (removed
	--newast from the trivial directories and added --oldast to
	John's directories that contain .chpl files).
	
	This required two hacks to get around types that haven't been
	inferred.  In the following cases, when the type is unknown,
	it's been hardwired to integer:
	- unknown parameter types
	- write()'s of unknown types
	
	This check in also removed the interactive removal of the
	log file when running start_test.

Modified files:
	chapel/compiler/: driver.cpp 
	chapel/compiler/AST/: expr.cpp symbol.cpp symbol.h type.cpp 
	chapel/test/: start_test 
	chapel/test/flowanalysis/jplevyak/: COMPOPTS 
	chapel/test/lowlevelcg/jplevyak/: COMPOPTS 
	chapel/test/parsing/jplevyak/: COMPOPTS 
	chapel/test/trivial/bradc/functions/: mutrec.chpl 
	chapel/test/trivial/bradc/protoast/: COMPOPTS 
	chapel/test/trivial/bradc/protoast/codegen/: COMPOPTS 
Removed files:
	chapel/test/trivial/bradc/: COMPOPTS 
	chapel/test/trivial/bradc/arrinit/: COMPOPTS 
	chapel/test/trivial/bradc/write/: COMPOPTS 
	chapel/test/trivial/shannon/: COMPOPTS 

---------------------------------------------------------------------------

08/06/04 14:09:10 -- jplevyak (a.k.a. n10253)

Log message:
	Moved ParseAST implementation into parse_ast.cpp
	Encapsulated ->pathname and ->line into Sym and Code.

Modified files:
	chapel/compiler/: ast.cpp ast.h clone.cpp code.h dump.cpp 
	                  fa_extras.cpp fun.cpp fun.h graph.cpp if1.cpp 
	                  misc.cpp parse_ast.cpp parse_ast.h sym.h 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 

---------------------------------------------------------------------------

08/06/04 16:32:46 -- bradc

Log message:
	Implemented an AST traversal framework and a few tiny
	tests to convince myself that it was working at least
	a little bit.  The scheme is as follows:
	
	ILink is a superclass of all the new AST classes.  It
	would've been called "Link" except that John had already
	used that name.  The "I" stands for "inheritance-based"
	(because template-based would be the other way to do it,
	but I've been trying to avoid templates).
	
	The ILink class now supports a traverse() method which
	is meant to walk around things in a reasonably
	intelligent manner.  Call it on a statement, and it
	will traverse the components of that statement (Exprs,
	Symbols, Types), as well as the statements that follow
	it.  Call it on an Expr, Symbol, or Type, and it will
	do similarly.
	
	The traverse() method takes a single argument which is
	an instance of a subclass of the Traversal class
	(implemented in the new files traversal.h and traversal.cpp).
	The idea is that anyone who wants to write a traversal of
	the AST will subclass Traversal, implementing methods that
	implement the traversal they want to do.  The Traversal
	class is quite abstract and looks like this:
	
	class Traversal {
	public:
	bool exploreStmts;
	bool exploreExprs;
	bool exploreSymbols;
	bool exploreTypes;
	
	Traversal(void);
	
	virtual void preProcessStmt(Stmt* stmt);
	virtual void postProcessStmt(Stmt* stmt);
	virtual void preProcessExpr(Expr* expr);
	virtual void postProcessExpr(Expr* expr);
	virtual void preProcessSymbol(Symbol* sym);
	virtual void postProcessSymbol(Symbol* sym);
	virtual void preProcessType(Type* type);
	virtual void postProcessType(Type* type);
	};
	
	Note that the methods are not pure virtual, so
	that you don't have to define all of these methods.
	
	Each of the four main components of the AST
	(Stmt, Expr, Symbol, and Type) has two methods
	associated with it: one that processes the
	class before all the things it contains, and a
	second that processes it after all the things
	it contains.  Thus, one can initialize state in
	the "pre" method and analyze it in the "post"
	method, or simply use pre alone (or post alone),
	or ...
	
	The four booleans indicate whether or not to
	explore the components that make the thing up.
	By default they are all set to true.  For
	example, if you merely wanted to explore a list
	of statements without diving into all of their
	internals, you would set exploreStmts to false,
	which would cause the traversal to merely walk
	the statement list that you point it at.  If
	you wanted to dive into certain statement types
	(say "write()" statements) but not others, you
	could do that explicitly by making your pre-/post-
	ProcessStmt() calls traverse the arguments
	explicitly.  In simple traversals, these booleans
	will probably be set once in the constructor and
	never changed.  More complex ones could change
	them as they go, though the concept frightens me
	a bit.
	
	Note that the traversal may contain cycles that
	I haven't debugged yet.  I found a few, but haven't
	run traversals on all the codes that we've written
	(and obviously there are lots of codes we haven't
	written yet).  There's also a chance that it may
	iterate over things in a weird order or multiple
	times, though I think I've weeded out the most
	egregious examples of this.
	
	The files findUnknownTypes.cpp/h contain two
	sample traversals -- one simply prints statements
	as the traversal comes to them; the second is
	slightly more interesting -- it walks around
	looking for symbols of type dtUnknown and complains
	about them (eventually, this is intended to call
	down to the low-level stuff when it finds such
	symbols to ask it what their types should be and
	fix them up, but for now it just complains).  It
	also has a method that will print out expressions
	whose typeInfo() method returns dtUnknown, but
	that is currently commented out.
	
	Feel free to try out at your own peril -- I think
	you should get something interesting and useful,
	but perhaps not something perfect.  When I get
	back, I'll continue to make use of this and debug
	it in the process.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: Makefile.share expr.cpp expr.h link.h 
	                      stmt.cpp stmt.h symbol.cpp symbol.h 
	                      symtab.cpp type.cpp type.h 
	chapel/test/trivial/bradc/protoast/codegen/: .cvsignore 
Added files:
	chapel/compiler/AST/: findUnknownTypes.cpp findUnknownTypes.h 
	                      traversal.cpp traversal.h 

---------------------------------------------------------------------------

08/09/04 14:03:07 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed regression problem by using filenames instead of pathnames
	for the flow analysis log.
	Continued work on connecting analysis to new AST with Sym regorganization.

Modified files:
	chapel/compiler/: Makefile c_runtime.h cg.cpp clone.cpp code.h 
	                  driver.cpp dump.cpp fa.cpp fa_extras.cpp 
	                  fun.cpp fun.h graph.cpp if1.cpp parse_ast.cpp 
	                  prelude.v sym.h 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs2.v cs3.good 
	                                    cs3.v cs4.good cs5.good 
	                                    cs6.good destruct.good 
	                                    destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 

---------------------------------------------------------------------------

08/09/04 14:09:55 -- jplevyak (a.k.a. n10253)

Log message:
	Add file for Sym methods

Added files:
	chapel/compiler/: sym.cpp 

---------------------------------------------------------------------------

08/11/04 10:14:27 -- jplevyak (a.k.a. n10253)

Log message:
	Reorganize Sym class in preparation for port to new AST

Modified files:
	chapel/compiler/: ast_cf.cpp cg.cpp cg_funs.cpp clone.cpp 
	                  driver.cpp dump.cpp fa.cpp fa_extras.cpp 
	                  fun.cpp fun.h graph.cpp if1.cpp num.h 
	                  parse_ast.cpp parse_ast.h pattern.cpp prim.cpp 
	                  sym.cpp sym.h v.g var.h 
	chapel/compiler/cast/: cast.cpp 

---------------------------------------------------------------------------

08/12/04 13:02:17 -- jplevyak (a.k.a. n10253)

Log message:
	Fix tests for latest change to Sym

Modified files:
	chapel/test/flowanalysis/jplevyak/: dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 

---------------------------------------------------------------------------

08/16/04 16:14:46 -- bradc

Log message:
	* got first multidimensional domain/array code compiling through the
	compiler correctly.  There are currently things specialized that
	should be generalized in the runtime -- in particular, the definition
	of array descriptors and their supporting routines for initialization
	and output -- but this is a start.
	
	* fixed codegen for octal literals -- we currently don't have a notion
	of octal literals in Chapel, so care has to be taken when generating
	such literals in our C code so that the C compiler doesn't interpret
	them as such.
	
	* added tests to lock in this behavior

Modified files:
	chapel/compiler/: .cvsignore 
	chapel/compiler/AST/: TODO expr.cpp expr.h stmt.cpp 
	chapel/runtime/include/: array.h chplio.h 
	chapel/runtime/src/: array.c chplio.c 
Added files:
	chapel/test/trivial/bradc/: octalliteral.chpl octalliteral.good 
	chapel/test/trivial/bradc/domarr/: .cvsignore domarr.chpl 
	                                   domarr.good 

---------------------------------------------------------------------------

08/16/04 17:06:14 -- bradc

Log message:
	Added a Tuple subclass to the Expr class hierarchy.  Currently,
	parenthesized, comma-separated expressions are stored as Tuples.
	Eventually, we'll want to relax the requirement that parenthesis
	be used to define a tuple, but I didn't do it this time around.
	
	Added the ability to format expressions fed to a write statement
	by supporting a 2-tuple argument format in which the first
	element of the tuple is a format string and the second element
	is the argument.  Thus:
	
	write(a, b, c);
	
	will write out the a, b, and c arguments using some reasonable
	default formatting.  If the user wanted to control this
	formatting better, they could use:
	
	write(("%.2d", a), b, ("%12.6f", c));
	
	which would format a as a %.2d integer, use the default formatting
	for b, and format c as a %12.6f float.  The formats are currently
	identical to those supported by C.  Note that if the argument
	expression (a or c in this example) is an array, the formatting
	is applied to every element in the array.

Modified files:
	chapel/compiler/AST/: chapel.y expr.cpp expr.h 
	chapel/test/trivial/bradc/domarr/: .cvsignore 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/test/trivial/bradc/: formatoutput.chpl formatoutput.good 

---------------------------------------------------------------------------

08/16/04 17:25:29 -- bradc

Log message:
	Implemented typeInfo() for CastExprs.
	
	Added a test that creates a domain using an enumerated
	type.

Modified files:
	chapel/compiler/AST/: expr.cpp expr.h 
Added files:
	chapel/test/trivial/bradc/domarr/: enumarray.chpl enumarray.good 

---------------------------------------------------------------------------

08/16/04 18:11:39 -- bradc

Log message:
	Improved the testing system so that the -valgrind flag uses
	valgrind not only to test the compiler, but also the generated
	binary (when one is created by the test).  This new feature
	may be suppressed for a particular subdirectory by adding a
	NOVGRBIN file to the directory in question, which will suppress
	the use of valgrind on the generated binary.  I added one of
	these files to John's lowlevelcg directory since valgrinding
	its binaries is not as important (and, since they use GC, it
	raises difficulties even if we did want to valgrind it).
	
	With this change, found a subtle bug in some of the I/O code
	for arrays that I had just checked in, and updated output
	to reflect the fix.

Modified files:
	chapel/runtime/src/: chplio.c 
	chapel/test/: start_test sub_test 
	chapel/test/trivial/bradc/: formatoutput.good 
	chapel/test/trivial/bradc/domarr/: enumarray.good 
Added files:
	chapel/test/lowlevelcg/jplevyak/: NOVGRBIN 

---------------------------------------------------------------------------

08/16/04 18:16:03 -- bradc

Log message:
	Ooops, previous check-in had a problem that I didn't detect
	because I'd only tested it on a directory with a NOVGRBIN
	file...

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

08/18/04 17:55:39 -- shannon

Log message:
	Removed repeat...until from the scanner and parser, since
	this is no longer supported.  Now that there are only
	two types of while loops, while...do and do...while,
	we no longer need to enumerate the type.  Changed this
	to a boolean throughout.  Also changed the switch statement
	to an if-else in the codegen and print methods of
	whileLoopStmt for the same reason.  Added a test to the
	suite.

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp stmt.cpp 
	                      stmt.h 
Added files:
	chapel/test/trivial/shannon/: whileLoop.chpl whileLoop.good 

---------------------------------------------------------------------------

08/20/04 13:56:35 -- bradc

Log message:
	Removing a line from the nightly regression test script that
	was inserted as a debugging measure but had the effect of
	inadvertantly preventing the /tmp directory created for the
	tests from getting reclaimed.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

08/20/04 14:16:20 -- bradc

Log message:
	Two very minor changes:
	
	* made it so that when the compiler is built, it is copied from
	the platform-specific subdirectory to the compiler directory
	(rather than being symbolically linked).  This was causing
	shannon and me some grief since our platform-specific
	directories are stored on /ptmp which isn't exported.
	
	* added no-op statements to the compiler and a test for them.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: chapel.y stmt.cpp 
	chapel/runtime/include/: stdchpl.h 
Added files:
	chapel/runtime/include/: chplboolean.h 
	chapel/test/trivial/bradc/: noop.chpl noop.good 

---------------------------------------------------------------------------

08/20/04 15:51:05 -- bradc

Log message:
	Inserted a template function for the ILink class which
	collects siblings of the template type and returns them
	in a Vec<> argument by reference per John's request.

Modified files:
	chapel/compiler/: createAST.cpp vec.h 
	chapel/compiler/AST/: TODO link.h 

---------------------------------------------------------------------------

08/20/04 16:30:23 -- bradc

Log message:
	Updated the Makefile so that whenever the compiler is built,
	ebrowse is run on the sources to create a BROWSE file in the
	compiler directory.  If you're not familiar with EBROWSE, it's
	a surprisingly nice class browser for emacs.  Mouse over a
	class definition to get a list of things you can do (expand
	collapse parts of the tree, list methods, jump to source code,
	etc.)  It's pretty sweet.  Let me know if you have any
	questions about it.  (NOTE: I also drop an AST-specific BROWSE
	file into the AST directory to prune away John's stuff for my
	own reference).

Modified files:
	chapel/compiler/: .cvsignore Makefile 
	chapel/compiler/AST/: .cvsignore 

---------------------------------------------------------------------------

08/23/04 17:29:25 -- bradc

Log message:
	Added a new common base class for all AST (Stmt, Expr, Symbol, Type)
	classes named "BaseAST".  Currently, this only has a single member
	variable, "astType" which is an enumerated type (defined in baseAST.h)
	indicating what class the class instance is.  This is designed to
	avoid the overhead of using the typeid() feature and to support switch
	statements over AST node types.
	
	Wrote a traversal routine that verifies that all classes have their
	enumeration set as expected and ran this over the current test tree
	to make sure I had set things up as intended, but then commented
	this traversal out for the check-in.  Eventually we may want to make
	this a flag or (better) support a passlist that can be specified
	dynamically to indicate what passes should be run for a particular
	test.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: Makefile.share chapel.lex chapel.y 
	                      expr.cpp expr.h stmt.cpp stmt.h symbol.cpp 
	                      symbol.h type.cpp type.h 
Added files:
	chapel/compiler/AST/: baseAST.cpp baseAST.h verifyASTType.cpp 
	                      verifyASTType.h 

---------------------------------------------------------------------------

08/23/04 21:36:54 -- jplevyak (a.k.a. n10253)

Log message:
	Added code to the new AST to retrieve Symbols/Types/Stmts/Exprs in a generic way.
	Modified constant folding to be more generic (and potentially reusable).
	Added ASymbol and AInfo classes which are the shadow objects for
	analysis on the new AST.
	Added code to collect and shodow symbols using the retrival code.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h ast_cf.cpp driver.cpp 
	                  fa.cpp sym.h 
	chapel/compiler/AST/: baseAST.cpp baseAST.h expr.cpp expr.h 
	                      stmt.cpp stmt.h symbol.cpp symbol.h 
	                      type.cpp type.h 

---------------------------------------------------------------------------

08/24/04 11:12:15 -- jplevyak (a.k.a. n10253)

Log message:
	Implemeneted HashMap, which is a map which takes hash and comparison functions
	as a template parameter.

Modified files:
	chapel/compiler/: analysis.cpp map.cpp map.h misc.cpp 
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp type.h 

---------------------------------------------------------------------------

08/24/04 12:12:31 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug in HashMap.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h ast.cpp ast.h map.cpp 
	                  map.h 
	chapel/compiler/AST/: stmt.h 

---------------------------------------------------------------------------

08/24/04 12:51:28 -- bradc

Log message:
	Made some improvements to the symboltable and symbols.
	
	In particular, I hadn't yet linked symbols back to their scope.
	Have now done so -- each Symbol has a "scope" link of type
	SymScope* (defined in symscope.h) which links back to the scope
	in which it was defined.  The most useful bits of information
	in this scope are:
	
	(1) its "type" an enumeration of type scopeType that indicates
	whether the scope is:
	
	SCOPE_INTRINSIC == builtins at the global level
	SCOPE_FILE      == defined at the file level
	SCOPE_PARAM     == a function's parameter scope
	SCOPE_FUNCTION  == a function's top-level scope
	SCOPE_LOCAL     == a local scope to a function (compound stmt)
	SCOPE_FORLOOP   == the scope for a for loop's indices
	
	There will be more scope types as we move forward (SCOPE_CLASS is
	notably absent currently...).
	
	(2) its "level" -- an integer indicating the depth of the scope.
	
	-1 == SCOPE_INTRINSIC
	0 == SCOPE_FILE
	>0 == some scope within the file
	
	Note that this numbering has changed by 1 in this checkin
	(SCOPE_INTRINSIC used to be 0).  For convenience, the
	SCOPE_INTRINSIC and SCOPE_FILE symbols are defined to be -1
	and 0, respectively.
	
	In this check-in, I also moved away from STL maps and strings
	to avoid problems with GC that I hadn't anticipated initially,
	but which has been on my TODO list since I had the realization
	one morning that I was probably causing problems in this
	respect.  I'm now using John's HashMap class instead.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp stmt.cpp symbol.cpp symbol.h 
	                      symtab.cpp symtab.h 
Added files:
	chapel/compiler/AST/: symscope.h 

---------------------------------------------------------------------------

08/24/04 13:46:48 -- shannon

Log message:
	Modified the operator precedence per the current Chapel
	specifications.
	
	Added a test of precedence of binary operators which
	consists of many small computations in varying orders.

Modified files:
	chapel/compiler/AST/: chapel.y 
Added files:
	chapel/test/trivial/shannon/: compSampler.chpl compSampler.good 

---------------------------------------------------------------------------

08/24/04 13:54:03 -- shannon

Log message:
	Woops!  I meant to include these in the last commit.
	These test output files were changed to reflect
	the new operator precedence.

Modified files:
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

08/24/04 14:24:46 -- jplevyak (a.k.a. n10253)

Log message:
	Added new ChainHashMap which is robuts with respect to hash collisions.

Modified files:
	chapel/compiler/: fa.cpp fa.h if1.h map.cpp map.h pattern.cpp 

---------------------------------------------------------------------------

08/24/04 15:28:19 -- jplevyak (a.k.a. n10253)

Log message:
	add ChainHashMap::get_keys and ChainHashMap::get_values

Modified files:
	chapel/compiler/: analysis.cpp map.cpp map.h 

---------------------------------------------------------------------------

08/24/04 15:53:48 -- bradc

Log message:
	John pointed out that I wasn't being particularly consistent
	about storing function return types as dtVoid if they didn't
	return anything, using a new NullType() instead from time to
	time.  Unified this so that dtVoid is now the return type from
	all functions that return nothing.  NullType() is really
	meant to be a sentinel in place of a NULL Type* pointer (and
	its use is very limited as a result).

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: chapel.y stmt.cpp symbol.cpp type.cpp 

---------------------------------------------------------------------------

08/24/04 15:56:58 -- bradc

Log message:
	Per John's suggestion, changed my use of hashtable for the
	symboltable from a HashMap to a ChainHashMap.

Modified files:
	chapel/compiler/AST/: symscope.h symtab.cpp 

---------------------------------------------------------------------------

08/25/04 13:08:03 -- jplevyak (a.k.a. n10253)

Log message:
	Code to import Types and builtins from the new AST to analysis.

Modified files:
	chapel/compiler/: analysis.cpp ast.cpp ast.h clone.cpp 
	                  driver.cpp dump.cpp fa.cpp parse_ast.cpp sym.h 
	chapel/compiler/AST/: type.cpp 
Removed files:
	chapel/compiler/: internal.h 

---------------------------------------------------------------------------

08/25/04 17:04:34 -- bradc

Log message:
	Reworked the way I was handling "NullClasses", based on my continuing
	worries that I'd taken a bad approach and discussions with John
	yesterday that made me more sure of it the more I thought about it.
	The goal behind this work (both the past approach and my new one) was
	to avoid using NULL pointers as much as possible in hopes of catching
	erroneous conditions via method calls to inappropriate objects rather
	than Seg Faults.  Thus, anywhere one would normally use a "NULL"
	pointer value, the idea was that you'd use this mechanism to protect
	yourself.
	
	My approach up until today had been to have a subclass of any such
	class that I was concerned about.  So for example, the Expr class had
	a NullExpr class which would indicate a Null Expr pointer.  All
	classes had an isNull() method which would indicate whether or not
	they were a NullClass (defined to return false at one of the base
	classes, and over-ridden by all of the NullClasses).
	
	The disadvantages to this approach that were becoming increasingly
	apparent to me were: (1) there was a fair amount of effort to
	implementing one of these NullClasses -- the class definition,
	defining a bunch of standard virtual functions, etc.  This was bad
	enough that at some point I started getting very lazy about
	introducing them and using NULL instead, defeating the entire point;
	(2) the runtime overhead of storing a new class instance every time I
	wanted one of these NULL classes (I would create them dynamically on
	an as-needed basis; and (3) as John noticed yesterday, I wasn't being
	particularly careful about when I used them, and started using them in
	places other than where I'd originally intended (in particular to
	indicate void return types -- though I'm still waffling on that one --
	and to represent no-op statements).
	
	For these reasons, I revisited the uses, thought about it a lot last
	night, and have removed all NullClasses from the compiler.  What I've
	done instead is create a single, special instance of each class in
	question called "nil<Class>" (e.g., nilExpr).  The name is not meant
	to be anything deep, but is meant to be easily distinguished from
	NullClass, and partially to reflect David's concept of "nil" in
	Chapel.
	
	The isBool() methods are still supported, but are now implemented by
	comparison via the appropriate nil variable rather than via overridden
	functions that simply return true or false.  This approach seems to be
	lighter weight to implement (addressing problem 1 above), eliminates
	all but O(1) of the runtime overhead, supports quick pointer
	comparisons if desired, and caused me to revisit all uses of the
	NullClasses to see if they made sense.  In doing so, I'm now thinking
	more and more that John is probably right about the thought that
	dtVoid and nilType are really the same thing (assuming we have no
	"void" type in Chapel), but haven't made that change yet.
	
	The main disadvantage to this approach is the possibility that nil
	variables might be corrupted by compiler bugs, leading to subtle
	internal problems downstream.  I'm optimistically hoping that this
	won't be the case, but have implemented a verifyNilsUncorrupted()
	function (in nils.cpp) which can be run to assert that the nil
	variables still have the values they ought to (this is currently run
	after codegen(), but can obviously be inserted by developers in other
	places as an assertion while debugging).
	
	The main semantic change that goes into this switch is that I've now
	introduced a NoOpStmt class, since NullStmt was overloaded for this
	purpose previously.  As with dtVoid, there's some question as to
	whether this is overkill, but for now I decided to represent no-ops in
	the user code explicitly rather than using nilStmt.
	
	As a side change to this, I introduced an "id" field to the BaseAST
	class so that all objects created in the AST will be uniquely
	identified.  No current plans for this, but it seemed like a good
	thing to have in place before it is needed.

Modified files:
	chapel/compiler/: analysis.cpp codegen.cpp createAST.cpp 
	chapel/compiler/AST/: Makefile.share baseAST.cpp baseAST.h 
	                      chapel.y expr.cpp expr.h link.cpp link.h 
	                      main.cpp stmt.cpp stmt.h symbol.cpp 
	                      symbol.h symtab.cpp symtab.h type.cpp 
	                      type.h verifyASTType.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	chapel/compiler/AST/: nils.cpp nils.h 

---------------------------------------------------------------------------

08/26/04 13:17:28 -- bradc

Log message:
	Some minor Makefile changes.  Per a discussion with John, fixed up the
	way the Makefile in the compiler/test directory works by having it
	copy sources from the compiler directory into the test directory and
	remaking them there -- this fixes a dependence problem that we were
	having in that directory.  Also removed symbolic linking of targets
	from the subdirectory Makefiles, which I had missed when I did this
	for the compiler/Makefile.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/cast/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: Makefile 
	chapel/compiler/test/: .cvsignore Makefile 

---------------------------------------------------------------------------

08/26/04 15:44:30 -- bradc

Log message:
	Added a table of built-in types (builtinTypes) for
	John's benefit.  These are types which are built
	into the language, and currently includes booleans,
	integers, floats, complexes, strings, and locales.
	I also threw in the "unknown" type placeholder,
	though am not certain that this should go into the
	table (John, let me know if you have an opinion),
	as well as the "void" type (which I continue to
	think should be switched to nilType as John suggested).
	
	As part of this addition, I pulled all the type
	keywords out of the lexer and parser, introduced
	them as symbols in the implicit scope, and moved
	boolean from being an enumerated type defined in
	the prelude to being a built-in type (it was
	sortof straddling the two erroneously previously).

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y prelude.chpl 
	                      symtab.cpp symtab.h type.cpp type.h 

---------------------------------------------------------------------------

08/26/04 15:57:02 -- bradc

Log message:
	Minor check-in renaming boolean in the runtime and fixing
	"make depend" for the runtime.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: chpltypes.h stdchpl.h 
	chapel/runtime/src/: Makefile 
Removed files:
	chapel/runtime/include/: chplboolean.h 

---------------------------------------------------------------------------

08/26/04 17:34:45 -- bradc

Log message:
	Started working on implementing SymScope context pointers
	that link a SymScope back to the context in which it was
	declared.  Each SymScope now has two context variables:
	
	stmtContext -> points to the statement context
	symContext -> points to the symbol context
	
	For code like this:
	
	function foo(x, y) { /* scope 1 */
	var a;
	{ /* scope 2 */
	var b;
	
	forall i { ... }
	}
	}
	
	These are currently set up as follows:
	stmtContext           symContext
	SCOPE_INTRINSIC   nilStmt               nilSymbol
	SCOPE_FILE        nilStmt               nilSymbol
	SCOPE_PARAM       foo's FnDefStmt       foo's FnSymbol
	SCOPE_FUNCTION    scope 1's BlockStmt   foo's FnSymbol
	SCOPE_LOCAL       scope 2's BlockStmt   nilSymbol
	SCOPE_FORLOOP     forall stmt           nilSymbol
	
	Looking forward for classes:
	
	class bar { ... }
	
	we should imagine:
	
	SCOPE_CLASS       bar's TypeDefStmt     bar's ClassSymbol
	
	I'm toying with whether or not it would make sense to have
	multiple subclasses of SymScope for each context so that
	these pointers could be more specific than generic Stmt*
	and Symbol* pointers, but am not convinced that it would
	get rid of the necessity for dynamic casts (might just move
	them from the access of the context variables to the grabbing
	of the scope from the variable, which seems like it could be
	a wash).  If anyone has a stronger opinion, let me know.

Modified files:
	chapel/compiler/AST/: chapel.y symscope.h symtab.cpp symtab.h 

---------------------------------------------------------------------------

08/26/04 18:50:58 -- bradc

Log message:
	Updated the table from my last checkin so that all scopes internal
	to a function have their symContext pointing to that function.
	This involved a nice refactoring of complicated scope
	pushing/popping/context-setting code out of chapel.y and into the
	symboltable code, which seems appropriate and attractive.  Here's
	the new table:
	
	scope type        stmtContext           symContext
	------------------------------------------------------
	SCOPE_INTRINSIC   nilStmt               nilSymbol
	SCOPE_FILE        nilStmt               nilSymbol
	SCOPE_PARAM       foo's FnDefStmt       foo's FnSymbol
	SCOPE_FUNCTION    scope 1's BlockStmt   foo's FnSymbol
	SCOPE_LOCAL       scope 2's BlockStmt   foo's FnSymbol
	SCOPE_FORLOOP     forall stmt           foo's FnSymbol

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: chapel.y nils.cpp symbol.cpp symbol.h 
	                      symtab.cpp symtab.h 

---------------------------------------------------------------------------

08/27/04 10:23:51 -- bradc

Log message:
	I believe I've just changed
	  the CVS checkin scripts
	    so that leading whitespace in log messages
	      will be preserved.
		This change has no other substance.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

08/27/04 11:57:38 -- jplevyak (a.k.a. n10253)

Log message:
	Interm checkin for porting analysis to the new AST.
	Dead code elimination in CFG construction.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h cfg.cpp cg.cpp fa.cpp 
	                  if1.cpp parse_ast.cpp parse_ast.h sym.h var.h 
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/flowanalysis/jplevyak/: cs1.good 
Added files:
	chapel/test/lowlevelcg/jplevyak/: cs2.good cs2.v 

---------------------------------------------------------------------------

08/27/04 12:40:18 -- bradc

Log message:
	Two changes here:
	
	(1) modified the Traversal class so that there are now two
	    booleans per major AST class (Stmt, Expr, Symbol, Type):
	    one that controls whether or not the class' siblings
	    should be explored (e.g., exploreSiblingStmts) and a
	    second which indicates whether children that are of a
	    given class type should be explored (e.g., exploreChildStmts
	    would control whether or not member variables that are
	    statements would be explored).  The goal here is to
	    offer more control over what is explored.  This may still
	    not be quite right -- it could be that we want
	    "exploreStmtChildren" instead, which would indicate whether
	    or not to look at any of a statement's children rather than
	    whether to explore children that are statements.  My goal
	    is to write John's getXXXs() methods using traversals, which
	    was the motivation for this change, and should probably
	    make it clearer which is preferable.
	
	(2) introduced a new subclass of Type -- TupleType -- which
	    stores the component types of a tuple type.  This doesn't
	    do much yet, but improves upon the previous storage of
	    tuple types by just linking the types together.

Modified files:
	chapel/compiler/AST/: baseAST.h chapel.y expr.cpp expr.h 
	                      link.cpp link.h stmt.cpp stmt.h symbol.cpp 
	                      symbol.h symtab.cpp traversal.cpp 
	                      traversal.h type.cpp type.h 
	                      verifyASTType.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

08/27/04 12:56:15 -- bradc

Log message:
	Added a back pointer for all statements "parentFn" that
	points to the function that contains it.  This may
	render the two context pointers yesterday redundant
	(the statement pointer may now suffice), but I'm leaving
	both in for now.

Modified files:
	chapel/compiler/AST/: loc.cpp stmt.cpp stmt.h symtab.cpp 
	                      symtab.h 

---------------------------------------------------------------------------

08/27/04 15:35:43 -- jplevyak (a.k.a. n10253)

Log message:
	Primitives which are operators are now called "operator"
	Some work on loops.

Modified files:
	chapel/compiler/: analysis.cpp ast.cpp ast.h builtin_symbols.h 
	                  fa.cpp parse_ast.cpp prelude.chpl prelude.v 
	                  prim.cpp prim_data.dat 
	chapel/test/flowanalysis/jplevyak/: badprimitive.v 

---------------------------------------------------------------------------

08/27/04 16:45:59 -- jplevyak (a.k.a. n10253)

Log message:
	Got the basic Expr's converted.

Modified files:
	chapel/compiler/: TODO analysis.cpp if1.cpp parse_ast.cpp 
	                  prim_data.dat 

---------------------------------------------------------------------------

08/27/04 17:47:08 -- bradc

Log message:
	Took another pass at cleaning up the Traversal mechanism, motivated by
	the work in the next paragraph.  Rather than continuing to document
	each incremental change, let me wait until I've converged slightly
	better, and I'll document it at that point.
	
	Used the new Traversal mechanism to write a GetStuff traversal which
	will walk around the AST grabbing Stmts/Exprs/Symbols/Types as
	directed by the client.  This is intended as a replacement of John's
	GetXXXX() routines if I can get them to a state which he finds
	reasonable and useful.  Again, I'll hold off on documenting this until
	I'm more sure that we've reached that reasonable state (it's currently
	not in use, and I'm checking it in simply as a sanity check before the
	weekend).
	
	Turned GC on for a few AST classes for which it had slipped through
	the cracks.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      link.cpp link.h stmt.cpp symbol.cpp 
	                      symscope.h traversal.cpp traversal.h 
	                      type.cpp 
Added files:
	chapel/compiler/AST/: getstuff.cpp getstuff.h testGetStuff.cpp 

---------------------------------------------------------------------------

08/30/04 15:53:25 -- bradc

Log message:
	Unified some inconsistencies in naming my enumerated
	types that John pointed out.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: chapel.y expr.h 

---------------------------------------------------------------------------

08/30/04 16:09:15 -- bradc

Log message:
	Removed SubDomainType and SubIndexType and implemented them
	by adding a parent link to DomainType which can be set to
	nilExpr for domains and indices that have no parent.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: baseAST.h chapel.y type.cpp type.h 
	                      verifyASTType.cpp 

---------------------------------------------------------------------------

08/30/04 16:14:45 -- bradc

Log message:
	Minor change: unified printWithType with printDef for
	variables...

Modified files:
	chapel/compiler/AST/: TODO stmt.cpp symbol.cpp symbol.h 

---------------------------------------------------------------------------

08/30/04 16:57:55 -- bradc

Log message:
	Cleaned up parsing of conditionals and added a dangling else
	test.

Modified files:
	chapel/compiler/AST/: TODO chapel.lex chapel.y 
Added files:
	chapel/test/trivial/bradc/: danglingelse.chpl danglingelse.good 

---------------------------------------------------------------------------

08/30/04 17:06:31 -- bradc

Log message:
	Small refactoring of function definition functions to simplify
	things slightly.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: TODO symtab.cpp symtab.h 

---------------------------------------------------------------------------

08/30/04 17:34:28 -- bradc

Log message:
	Simply housecleaning.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp 
	chapel/test/trivial/bradc/domarr/: domarr.chpl 

---------------------------------------------------------------------------

08/31/04 11:27:33 -- jplevyak (a.k.a. n10253)

Log message:
	Added traversal and print code using getXXX functions.
	 -- test on chain.chpl with options chpl -vv --analyzenewast chain.chpl
	Finished code generation for Expr's (untested).

Modified files:
	chapel/compiler/: FILES analysis.cpp builtin_symbols.h fa.cpp 
	                  prelude.v prim_data.dat 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 
	chapel/test/lowlevelcg/jplevyak/: review3.good 
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

08/31/04 15:19:49 -- jplevyak (a.k.a. n10253)

Log message:
	Initialize builtin symbols in code instead of in the standard prelude.
	Use a generic "primitive" to allow transfer functions to be put
	in the translation module instead of in the analysis module.
	Test above with "print".

Modified files:
	chapel/compiler/: TODO analysis.cpp ast.cpp builtin_symbols.h 
	                  c_runtime.h driver.cpp fa.cpp fa.h 
	                  parse_ast.cpp pdb.cpp pdb.h prelude.chpl 
	                  prelude.v prim_data.dat 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good review1.good 
	                                    review2.good review3.good 
	                                    structtype.good var.good 
	                                    var2.good 
	chapel/test/lowlevelcg/jplevyak/: review3.good 
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

08/31/04 18:07:09 -- bradc

Log message:
	Before making further changes to the parser, I wanted
	to clean what we've got up a bit to reduce the number
	of shift/reduce and reduce/reduce conflicts.  This
	represents the result of struggling with it for a few
	hours, and knocking the number of shift/reduces down by
	about 25%.  The main substantive change is that I switched
	to David's proposed cast syntax:
	
		expr : type
	
	rather than
	
		type(expr)
	
	for the time being.  Otherwise things should work about
	the same.
	
	Some other minor changes go in along with this, but are
	not worth mentioning, I think.

Modified files:
	chapel/compiler/: prim_data.dat 
	chapel/compiler/AST/: chapel.y expr.cpp expr.h getstuff.cpp 
	                      getstuff.h link.cpp symbol.cpp type.cpp 
	                      type.h 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 

---------------------------------------------------------------------------

09/01/04 13:51:53 -- jplevyak (a.k.a. n10253)

Log message:
	First new AST program through analysis.
	test/flowanalysis/newast/chain.chpl

Modified files:
	chapel/compiler/: Makefile TODO analysis.cpp analysis.h ast.cpp 
	                  ast.h driver.cpp fa_extras.cpp if1.cpp if1.h 
	                  parse_ast.cpp pattern.h pdb.cpp pdb.h 
	                  prim_data.dat 
	chapel/compiler/AST/: symscope.h symtab.cpp 
Added files:
	chapel/test/flowanalysis/newast/: CATFILES CLEANFILES COMPOPTS 
	                                  NOEXEC PREDIFF chain.chpl 
	                                  chain.good 

---------------------------------------------------------------------------

09/01/04 17:12:17 -- jplevyak (a.k.a. n10253)

Log message:
	4 more test cases working for analysis over the new AST.

Modified files:
	chapel/compiler/: analysis.cpp 
Added files:
	chapel/test/flowanalysis/newast/: arithmetic_ops.chpl 
	                                  arithmetic_ops.good 
	                                  assignment_expr.chpl 
	                                  assignment_expr.good 
	                                  bitwise_assignment.chpl 
	                                  bitwise_assignment.good 
	                                  compSampler.chpl 
	                                  compSampler.good 

---------------------------------------------------------------------------

09/02/04 13:06:00 -- jplevyak (a.k.a. n10253)

Log message:
	Analysis now working for a large number of the test cases.

Modified files:
	chapel/compiler/: analysis.cpp fa.cpp fa.h 
Added files:
	chapel/test/flowanalysis/newast/: bitwise_negation.chpl 
	                                  bitwise_negation.good 
	                                  bitwise_ops.chpl 
	                                  bitwise_ops.good 
	                                  conditional.chpl 
	                                  conditional.good 
	                                  danglingelse.chpl 
	                                  danglingelse.good deadvar.chpl 
	                                  deadvar.good declprintdom.chpl 
	                                  declprintdom.good 
	                                  declprintdom2.chpl 
	                                  declprintdom2.good 
	                                  declprintint.chpl 
	                                  declprintint.good 
	                                  declprintint2.chpl 
	                                  declprintint2.good 
	                                  equality_ops.chpl 
	                                  equality_ops.good 
	                                  logical_and.chpl 
	                                  logical_and.good 
	                                  logical_not.chpl 
	                                  logical_not.good mod.chpl 
	                                  mod.good octalliteral.chpl 
	                                  octalliteral.good 
	                                  pareninit.chpl pareninit.good 
	                                  printempty.chpl 
	                                  printempty.good 
	                                  printstring.chpl 
	                                  printstring.good 
	                                  relational_ops.chpl 
	                                  relational_ops.good 
	                                  shift_ops.chpl shift_ops.good 
	                                  unary_plusMinus.chpl 
	                                  unary_plusMinus.good 
	                                  whileLoop.chpl whileLoop.good 
	                                  writen.chpl writen.good 
	                                  writetwo.chpl writetwo.good 

---------------------------------------------------------------------------

09/02/04 15:14:07 -- bradc

Log message:
	Added some initial support for non-empty classes.  Classes can
	currently have bodies that are a list of statements (no filtering is
	done to determine if the statements are legal class body elements or
	not as of yet).  Classes that have member variables but no methods
	are currently code generated in a rudimentary fashion that works for
	some simple cases.
	
	In making this change, I hoisted the "." operator out of the
	SpecialBinOp case (which is a placeholder of sorts for things I
	haven't had time to deal with yet) and into a new subclass of Expr
	called MemberAccess which takes a base Expr and a Symbol member.
	Thus, an expression like:
	
	  a.x
	
	would have a base variable expression representing "a" and a member
	symbol represenging "x".  Note that x's symbol is not currently shared
	with the original symbol from the class definition because in general
	we can't determine a's type and therefore cannot find the correct x.
	Type inference should be able to help with this moving forward, though
	there are some cases that could be determined without type analysis
	(we'll see who gets to them first... :)
	
	Killed the BINOP_DOT enumeration as a result of this change and
	stubbed out code to handle this case in analysis.cpp for John to fix
	up as appropriate.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: TODO baseAST.h chapel.lex chapel.y 
	                      expr.cpp expr.h nils.cpp stmt.cpp 
	                      symtab.cpp symtab.h type.cpp type.h 
	                      verifyASTType.cpp 
	chapel/runtime/include/: stdchpl.h 

---------------------------------------------------------------------------

09/02/04 17:00:08 -- bradc

Log message:
	Fixed a bug that John found in which ArrayRef::typeInfo() was
	hitting an assertion due to an array type that had been given
	a user-defined name in mg-seq-concrete.chpl.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

09/03/04 11:46:03 -- bradc

Log message:
	Added an internal_prelude concept which will allow us
	to add symbols that are for internal use only and not
	visible to the user's code.  Currently this is populated
	with a coarse approximation to the array method that John
	requested (the precise definition couldn't be added
	currently due to lack of syntactic support in the
	front-end for method definitions outside of a class
	definition...  Consider this a placeholder.  The file
	currently lives in compiler/AST/internal_prelude.chpl.
	
	This internal prelude is stored in the symboltable as
	follows:
	
	  SCOPE_INTERNAL --sib-> SCOPE_INTRINSIC
	    --child-> ...          --child-> ...prelude symbols...
	                           --child-> SCOPE_FILE
	                                     ...userfile symbols...
	                           --child-> SCOPE_FILE
	                                     ...userfile symbols...
	
	Added a Symboltable::dump() method that will print out
	not just the currently visible symbols (as
	Symboltable::print() does), but all scopes defined in
	the symboltable; also added indentation for symboltable
	scopes when they are printed out to help parse them
	visually.
	
	Typical Symboltable::lookup() steps will only search up
	the scopes on the right until they hit the intrinsic
	scope.  To look up a symbol from the internal scope,
	use Symboltable::lookupInternal().
	
	This check-in also introduces new scopes for class
	definitions -- SCOPE_CLASS.  Instance variables and
	methods for classes will be defined in this scope.

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: chapel.y nils.cpp symscope.h symtab.cpp 
	                      symtab.h type.cpp type.h 
Added files:
	chapel/compiler/AST/: internal_prelude.chpl 
	chapel/test/flowanalysis/newast/: .cvsignore 

---------------------------------------------------------------------------

09/03/04 14:28:08 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for EXPR_MEMBERACCESS.
	Print out functions in the AST in verbose mode.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: expr.cpp expr.h 

---------------------------------------------------------------------------

09/03/04 15:43:52 -- bradc

Log message:
	Stopped dropping prelude code on the ground and reorganized
	the symboltable to make a bit more sense.
	
	As a placeholder until a better multi-file compilation
	strategy takes place, tucked all AST code parsed out of
	the internal prelude into internalPreludeStmts, that
	parsed from the normal prelude into preludeStmts, and
	that corresponding to the (currently single) source file
	into program, as always.  Previously, code from the
	prelude files was dropped on the ground.  These variables
	are defined in createAST.h and createAST.cpp.
	
	Realized that in my last checkin, symbols defined by
	the compiler like "integer" were no longer being placed
	into a reasonable scope, so reorganized scopes as follows:
	
	SCOPE_INTRINSIC -- contains compiler defined things like integer
	  SCOPE_PRELUDE_INTERNAL -- contains internal prelude symbols
	  SCOPE_PRELUDE -- contains prelude symbols
	    SCOPE_FILE -- contains user symbols for first file
	    etc.

Modified files:
	chapel/compiler/: createAST.cpp createAST.h 
	chapel/compiler/AST/: chapel.y expr.cpp prelude.chpl symscope.h 
	                      symtab.cpp symtab.h yy.h 

---------------------------------------------------------------------------

09/03/04 16:06:36 -- jplevyak (a.k.a. n10253)

Log message:
	Updated DParser to the latest version (fixes some bugs).

Modified files:
	chapel/compiler/make_prims/: Makefile 
	chapel/third-party/dparser/d/: CHANGES Makefile d.h gram.c 
	                               gram.h grammar.g grammar.g.c 
	                               index.html make_dparser.c my.g 
	                               parse.c read_binary.c 
	                               read_binary.h util.c util.h 
	                               write_tables.c write_tables.h 
	chapel/third-party/dparser/d/python/: dparser.py dparser_wrap.c 
	                                      make_tables.c pydparser.h 
	chapel/third-party/dparser/d/python/tests/: test.py 
	chapel/third-party/dparser/d/verilog/: Makefile ambig.c main.c 
	                                       vparse.c 
Added files:
	chapel/third-party/dparser/d/: mkdparse.h test_parser.c 
Removed files:
	chapel/third-party/dparser/d/: x.c 

---------------------------------------------------------------------------

09/07/04 13:23:31 -- jplevyak (a.k.a. n10253)

Log message:
	Fix build problem with dparser which was breaking tests.
	
	Convert remaining oldast flow analysis tests to V or move
	to the newast directory (where appropriate).
	
	The codes from the first review are not simply mapped to V
	and do not compile with the new AST, these I have moved to
	test/reviews/jplevyak/*.chpl with NOTEST set.  We can
	decide what we want to do with these later.

Modified files:
	chapel/compiler/: grammar.cpp parse_ast.cpp parse_ast.h 
	                  prelude.v v.g 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good structtype.good 
	                                    var.good 
	chapel/third-party/dparser/d/: Makefile 
Added files:
	chapel/test/flowanalysis/newast/: var.chpl var.good var2.chpl 
	                                  var2.good 
	chapel/test/reviews/jplevyak/: NOTEST review1.chpl review2.chpl 
	                               review3.chpl 
	chapel/third-party/dparser/d/: mkdparse.c 
Removed files:
	chapel/test/flowanalysis/jplevyak/: cs4.chpl cs5.chpl 
	                                    review1.chpl review1.good 
	                                    review2.chpl review2.good 
	                                    review3.chpl review3.good 
	                                    var.chpl var2.chpl var2.good 

---------------------------------------------------------------------------

09/07/04 15:35:16 -- jplevyak (a.k.a. n10253)

Log message:
	Add back in code to handle empty BUILD_VERSION

Modified files:
	chapel/third-party/dparser/d/: Makefile 

---------------------------------------------------------------------------

09/07/04 17:15:24 -- jplevyak (a.k.a. n10253)

Log message:
	Add test code to print out types of Expresions in Functions for the
	new AST.
	Fix bug in type_info which prevented types form being found in new AST.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h parse_ast.h 

---------------------------------------------------------------------------

09/08/04 08:18:17 -- jplevyak (a.k.a. n10253)

Log message:
	Tests converted from old ast chpl to v

Added files:
	chapel/test/flowanalysis/jplevyak/: cs4.v cs5.v 

---------------------------------------------------------------------------

09/08/04 11:42:33 -- jplevyak (a.k.a. n10253)

Log message:
	Added new interfaces for extracting type/callgraph/constants information
	for the new AST: in analysis.h.
	Note: these haven't been tested!
	Added new callback facility for callbacks from the analysis to
	the AST representation, also in alysis.h.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h clone.cpp driver.cpp 
	                  if1.h parse_ast.cpp parse_ast.h sym.cpp sym.h 
Added files:
	chapel/compiler/: callbacks.h 

---------------------------------------------------------------------------

09/08/04 12:23:12 -- jplevyak (a.k.a. n10253)

Log message:
	OK, new AST type_info works on arithmentic_ops.chpl

Modified files:
	chapel/compiler/: analysis.cpp driver.cpp 

---------------------------------------------------------------------------

09/09/04 11:38:48 -- jplevyak (a.k.a. n10253)

Log message:
	Use callbacks for all Sym allocations to ensure that we have the
	  appropriate shadow variables for the new AST.
	Apply the analysis to the internalPrelude, prelude and program.
	Note: I changed the name of program to programStmts to be more
	  in keeping with internalPreludeStmts and preludeStmts... hope that is OK.

Modified files:
	chapel/compiler/: analysis.cpp analysis.h ast.cpp callbacks.h 
	                  createAST.cpp createAST.h driver.cpp fa.cpp 
	                  if1.cpp if1.h parse_ast.cpp parse_ast.h 
	                  sym.cpp 

---------------------------------------------------------------------------

09/09/04 17:41:19 -- bradc

Log message:
	Added rudimentary support for running compiler passes
	over the AST.  This was motivated by the fact that I've
	been writing more and more traversals, but have been
	calling them by explicitly inserting calls to the
	traversal into the code somewhere between parsing and
	code generation.  The passlist concept is designed to
	make it easy to select what passes/traversals are
	applied to the AST in what order.
	
	Currently every pass is an instance of a class Pass
	that supports a "run()" method which takes the program
	statements (Stmt*) passed in as their single argument.
	I expect this interface to get richer as the needs and
	abilities of passes are improved.
	
	Traversals have been reconceived as a subclass of Pass,
	where the default run method calls into the traversal
	machinery on the program.  Thus, every Traversal is a
	legal pass.
	
	The passes that are run by the compiler are specified
	in the passlist.h file.  This file has the general
	structure:
	
	  Pass* passlist[] = {
	    FIRST,
	    ...
	    LAST
	  };
	
	where "..." represents the list of passes that should
	be run.  For example, to run a pass called "Foo",
	followed by a pass called "Bar", one would use:
	
	  Pass* passlist[] = {
	    FIRST,
	    RUN(Foo),
	    RUN(Bar),
	    LAST
	  };
	
	where Foo and Bar are the names of Pass or Traversal
	subclasses (or subclasses of either).
	
	Passlists may also be specified dynamically without
	recompiling the compiler.  This is done with the
	--passlist flag and a specification of a file with
	the same structure as the passlist.h file.  Thus,
	imagine that the passlist shown above is the one
	that is compiled into the compiler and I wanted to
	run a new pass BradsDebugPass between Foo and Bar.
	I could do this by making a copy of passlist.h (call
	it mypasslist.h) and editing it to read:
	
	  Pass* passlist[] = {
	    FIRST,
	    RUN(Foo),
	    RUN(BradsDebugPass),
	    RUN(Bar),
	    LAST
	  };
	
	By running the compiler using "--passlist mypasslist.h",
	the passes Foo, BradsDebugPass, and Bar would be run on
	the AST.
	
	Currently, no passes are used (because all the ones that
	I've implemented are debugging traversals), but if you
	uncomment out the CheckTypeInfo pass listed in
	passlist.h, you'll run a simple pass that walks the AST
	looking for expressions that have a NULL type_info according
	to John's type inference engine.  The TestGetStuff pass was
	written to test the GetStuff pass, and will walk the AST
	printing things out as it goes.  Neither of these are meant
	to be particularly deep or meaningful, just things I've
	written along the way.
	
	To add a new pass to be supported by the dynamic passlist
	feature:
	
	(1) create your pass/traversal class by subclassing either
	    Pass or Traversal.
	
	(2) edit passlist.h to #include the header file that defines
	    the class.
	
	(3) register the pass by adding a REGISTER(PassName) line
	    to the passlist.cpp file.  This registers the pass as
	    being a legal pass to appear in a dynamically-specified
	    passlist.h file.
	
	(4) *ONLY IF YOU WANT THE PASS TO BE RUN AS PART OF THE
	    STANDARD COMPILE*, add a RUN(PassName) line to the
	    passlist.h file in the appropriate position(s) in the list.

Modified files:
	chapel/compiler/: Makefile ast.h driver.cpp 
	chapel/compiler/AST/: Makefile.share expr.cpp loc.cpp loc.h 
	                      testGetStuff.cpp traversal.cpp traversal.h 
	chapel/test/flowanalysis/jplevyak/: .cvsignore 
	chapel/third-party/dparser/d/: .cvsignore 
Added files:
	chapel/compiler/: pass.cpp pass.h passlist.cpp passlist.h 
	chapel/compiler/AST/: checkTypeInfo.cpp checkTypeInfo.h 
	                      testGetStuff.h 

---------------------------------------------------------------------------

09/09/04 17:53:33 -- bradc

Log message:
	Oops -- some fixes to last checkin (who taught me to modify
	code while writing my CVS commit log...?).  Sorry about
	that.
	
	Took out some debugging and placeholder INT_FATAL code that
	I forgot to pull before checking in.
	
	Added a dummy pass (DummyPass) and wrote a test that checks
	the ability to specify a dynamic passfile to run.

Modified files:
	chapel/compiler/: pass.cpp pass.h passlist.cpp 
	chapel/compiler/AST/: traversal.cpp 
Added files:
	chapel/test/compflags/bradc/passlist/: .cvsignore COMPOPTS 
	                                       passlist.h test.chpl 
	                                       test.good 

---------------------------------------------------------------------------

09/09/04 18:15:37 -- bradc

Log message:
	Modified the statement lists for the prelude files so that
	appropriate statements would be refactored into an init
	procedure, as in the user code.  Rather than combining
	these into a single prelude init function, I made a separate
	init function for each prelude.  The internal prelude's
	function is named __initIntPrelude, while the normal prelude
	is simply __initPrelude.  John, let me know whether or not
	this is acceptible for what you need.  Thanks.

Modified files:
	chapel/compiler/: createAST.cpp 

---------------------------------------------------------------------------

09/10/04 12:43:27 -- bradc

Log message:
	Added two debugging passes:
	
	  PrintAST : pretty-prints the AST to stdout using
	             print() methods for each statement
	  PrintSymtab : dumps the entire symboltable to stdout
	
	These passes also got my local compiler into the state
	where it would seg fault on review3.chpl.  Don't know
	how reproducible that will be for others...
	
	-Brad

Modified files:
	chapel/compiler/: passlist.cpp passlist.h 
	chapel/compiler/AST/: Makefile.share 
Added files:
	chapel/compiler/AST/: printAST.cpp printAST.h printSymtab.cpp 
	                      printSymtab.h 

---------------------------------------------------------------------------

09/10/04 14:24:29 -- bradc

Log message:
	Created a single top-level list of statements pointed to by
	the variable entryPoint (defined in createAST.h).  This
	currently contains calls to the three _init procedures --
	the internal prelude one, the prelude one, and the user
	code's entry point.  As we start to support more files
	and/or a concept of modules, this will be expanded to
	handle those entities as well.
	
	Note that this top-level statement list is not currently
	wrapped in a function (John, if you need this, let me
	know).

Modified files:
	chapel/compiler/: createAST.cpp createAST.h 

---------------------------------------------------------------------------

09/10/04 15:29:38 -- jplevyak (a.k.a. n10253)

Log message:
	Worked on class member functions.
	type_info now returns dtUnknown when it has incomplete information.
	Fixed (hopefully) the instability which was causing random failures for Brad.

Modified files:
	chapel/compiler/: analysis.cpp fa.cpp 
	chapel/compiler/AST/: type.cpp type.h 

---------------------------------------------------------------------------

09/10/04 16:28:37 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed up scoping of global variables.

Modified files:
	chapel/compiler/: analysis.cpp 

---------------------------------------------------------------------------

09/11/04 09:38:53 -- jplevyak (a.k.a. n10253)

Log message:
	Remove debugging code which was messing up the tests
	  (don't know how that happened, since I tested it before I checked
	   in... and I retested when I saw the regression errors but
	   after cvs update and build I get the same error, but it was
	   something I checked in ?!?, so it should have been in my source tree!)
	Added new test case for analysis of global variables.

Modified files:
	chapel/compiler/: analysis.cpp 
Added files:
	chapel/test/flowanalysis/newast/: globalref.chpl globalref.good 

---------------------------------------------------------------------------

09/13/04 11:07:27 -- jplevyak (a.k.a. n10253)

Log message:
	Remove old Chapel front end and all support files
	  This is to cleanup the directories in preparation for the reorg
	  The files are still in CVS if anyone wants to consult them
	  I did not remove the codegen routines for the old AST since I
	    dont' know all the files which are involved.
	Removed the last couple tests which used the old Chapel front end.
	  These will get rewritten/ported to the new front end as part of the
	    coverage suite I am going to write.

Modified files:
	chapel/compiler/: TODO ast_kinds.h codegen.cpp driver.cpp 
	                  parse_ast.cpp 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/test/flowanalysis/jplevyak/: COMPOPTS 
	chapel/test/lowlevelcg/jplevyak/: COMPOPTS 
	chapel/test/parsing/jplevyak/: COMPOPTS 
Removed files:
	chapel/compiler/: chpl.g prelude.chpl 
	chapel/test/lowlevelcg/jplevyak/: review3.chpl review3.good 
	chapel/test/parsing/jplevyak/: mat1.chpl mat1.good vec.chpl 
	                               vec.good 

---------------------------------------------------------------------------

09/13/04 12:20:03 -- bradc

Log message:
	Removed old code generation stuff made dead by removal of
	the bootstrap AST.

Modified files:
	chapel/compiler/: cg.h codegen.cpp codegen.h 
Removed files:
	chapel/compiler/: cg_funs.cpp cg_funs.h 

---------------------------------------------------------------------------

09/13/04 12:22:02 -- bradc

Log message:
	Whoops, forgot to check in the Makefile change.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

09/13/04 13:56:59 -- jplevyak (a.k.a. n10253)

Log message:
	Added new test cases for analysis.

Added files:
	chapel/test/flowanalysis/newast/: codegen_test.chpl 
	                                  codegen_test.good enum.chpl 
	                                  enum.good mutrec.chpl 
	                                  mutrec.good noargs.chpl 
	                                  noargs.good onearg.chpl 
	                                  onearg.good usebeforedef.chpl 
	                                  usebeforedef.good 

---------------------------------------------------------------------------

09/13/04 14:21:49 -- bradc

Log message:
	Improved the FindUnknownTypes pass so that it not only finds
	symbols of unknown type, but also uses John's type_info pass
	to fill in the type of such symbols, if it knows.  This pass
	is currently run by default, but of course will only add any
	information to the AST if --analyzenewast is used.  If it is
	not, John's work returns dtUnknown, so no substantive change
	is made.  Once --analyzenewast is the default, this pass
	should allow us to remove most of our type-oriented hacks
	involving dtUnknown.
	
	Also added a println() method to links which prints a newline
	after printing the AST node.

Modified files:
	chapel/compiler/: passlist.h 
	chapel/compiler/AST/: checkTypeInfo.cpp expr.cpp 
	                      findUnknownTypes.cpp findUnknownTypes.h 
	                      link.cpp link.h symbol.cpp 
	chapel/test/flowanalysis/newast/: chain.good globalref.good 
	                                  mutrec.good onearg.good 
	                                  usebeforedef.good 

---------------------------------------------------------------------------

09/13/04 15:04:42 -- bradc

Log message:
	Added four abstract types to the internal prelude scope just
	prior to parsing the prelude.  These are:
	
		Identifier	Type* variable	purpose
		----------	--------------	-----------
		Tuple		dtTuple		abstract Tuple type
		Index		dtIndex		abstract Index type
		Domain		dtDomain	abstract Domain type
		Array		dtArray		abstract Array type
	
	It is reasonable to think of these types as being parent types
	of which all actual tuples, index-es, domains, and arrays are
	subtypes, although no explicit subtype information is currently
	stored in the high-level AST.
	
	Because these symbols are declared in the internal prelude, they are
	not currently visible in user source code (i.e., the user cannot
	declare a variable of type "Tuple"), though the dtTuple pointer will
	exist and be valid for the compiler internals throughout the
	compilation process.
	
	I had to change the Array class name in the internal_prelude to
	_Array to avoid conflicts with this new variable (though I
	suspect that John will change it further to suit his needs...).

Modified files:
	chapel/compiler/: createAST.cpp 
	chapel/compiler/AST/: internal_prelude.chpl type.cpp type.h 

---------------------------------------------------------------------------

09/13/04 17:17:36 -- bradc

Log message:
	Beefed up class support a slight bit.  First, created a link
	from ClassType to the SymScope that contains its members,
	and also initialized the SymScope's context to point back to
	the class symbol and statement, which I had forgotten to do
	when introducing the SCOPE_CLASS.
	
	Improved creation of the MemberAccess expression so that if
	the base expression is a class and the member is a member
	of that class, the member symbol refers to the original
	symbol in the class and not a brand new symbol in limbo (as
	was the case before).  If these conditions are not met, the
	symbol-in-limbo approach is still taken.  Next step will be
	to handle these cases more elegantly.
	
	Added a first test of classes with member variables but no
	methods.
	
	As a side effect of this change, noticed that I'd never
	implemented write() for floats, so tucked this in.

Modified files:
	chapel/compiler/: .cvsignore 
	chapel/compiler/AST/: chapel.y expr.cpp expr.h symtab.cpp 
	                      symtab.h type.cpp type.h 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/: .cvsignore 
	chapel/test/classes/bradc/: .cvsignore trivialclass.chpl 
	                            trivialclass.good 

---------------------------------------------------------------------------

09/13/04 18:16:26 -- bradc

Log message:
	Fixed "make depend" rule to work on Suns (and, I expect, other
	non-bash platforms?).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.base 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

09/13/04 18:32:06 -- jplevyak (a.k.a. n10253)

Log message:
	Support TYPE_TUPLE astType.
	Make Expr return 'null'.
	Add preliminary support for "self" methods in classes.
	Analysis now treats forall variables as being of type Index
	New dead code elimination for IF1 (more robuts).
	Made entryPoint into a single statement which defines the function
	__entryPoint (to be similar to __init).
	Move definitions for Array, Tuple, Domain and Index into
	  internal_prelude.chpl, and added a new function
	  "findInternalTypes" which finds them instead of
	  "initInternalTypes" which creates them.
	Moved noop.chpl into list of working code.

Modified files:
	chapel/compiler/: analysis.cpp ast.cpp ast.h builtin_symbols.h 
	                  cfg.cpp cg.cpp code.h createAST.cpp driver.cpp 
	                  fa.cpp if1.cpp parse_ast.cpp prelude.v 
	                  prim_data.dat 
	chapel/compiler/AST/: internal_prelude.chpl prelude.chpl 
	                      symtab.cpp type.cpp type.h 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noargs.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/test/flowanalysis/newast/: noop.chpl noop.good 

---------------------------------------------------------------------------

09/14/04 12:13:15 -- jplevyak (a.k.a. n10253)

Log message:
	Checkpoint.
	Index, Domain, Array, Tuple classes created in internal_perlude.chpl
	These classes are hidden superclasses for all Chapel objects of the
	corresponding type and can be used to provide builtin behavior.
	Support for these classes has been moved into analysis.{cpp,h}
	Primitives now can have more than one return value, this is to
	  support domain_start_index since domain indexing can be over
	  multiple degenerate (integer) indexes.
	Added partial support for complex numbers, complex now defaults
	  to 64-bit complex numbers.
	Removed support for 80-bit floats (we can add this back, but 128 is
	  probably more useful).

Modified files:
	chapel/compiler/: analysis.cpp builtin_symbols.h chpltypes.h 
	                  fa.cpp parse.cpp parse_ast.cpp prelude.v 
	                  prim.cpp prim.h prim_data.dat sym.h v.g 
	chapel/compiler/AST/: internal_prelude.chpl 
	chapel/compiler/make_prims/: make_prims.g 
	chapel/test/flowanalysis/jplevyak/: classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good structtype.good 
	                                    var.good 

---------------------------------------------------------------------------

09/14/04 14:46:54 -- jplevyak (a.k.a. n10253)

Log message:
	Some work on enumerations (store their values as integers).
	Import declared types on parameters.

Modified files:
	chapel/compiler/: analysis.cpp 

---------------------------------------------------------------------------

09/14/04 14:49:15 -- jplevyak (a.k.a. n10253)

Log message:
	Load variables by moving into a temporary.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noop.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 

---------------------------------------------------------------------------

09/14/04 15:15:07 -- bradc

Log message:
	Made the testing system accept the double-dash (--) versions
	of the flags in addition to the normal ones.  I find more
	and more that I've been typing --compopts, having gotten used
	to the double-dash syntax with the compiler's longer flags.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

09/14/04 15:23:12 -- bradc

Log message:
	Took out call from Expr::getTypes() to Expr::typeInfo(),
	because typeInfo() may not be determinable until after
	type analysis has run.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

09/14/04 16:01:28 -- jplevyak (a.k.a. n10253)

Log message:
	All literals are moved into temporaries (symbolically) before
	functions are called.  This cleans up some difficult cases for
	analysis.

Modified files:
	chapel/compiler/: analysis.cpp fa.cpp 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

09/14/04 17:44:24 -- bradc

Log message:
	Checking in a small change to symtab.cpp in which member
	accesses which are unresolvable without help from the
	low-level analysis are made UseBeforeDef symbols rather
	than unadorned symbols as they were before (note to self:
	should really change this name to UnresolvedSymbol).
	
	Also checked a case into the test/Share directory for
	John to look at -- it's a case where I don't/can't
	do the resolution, so leave the field as a UseBeforeDef
	symbol
	
	(note that when running in the current compiler,
	a bunch of stuff is generated as integers incorrectly,
	because of all my hacks which say "if type analysis
	hasn't run, assume everything is an integer").

Modified files:
	chapel/compiler/AST/: symtab.cpp 
Added files:
	chapel/test/Share/: ambiguousclass.chpl 

---------------------------------------------------------------------------

09/15/04 12:30:02 -- jplevyak (a.k.a. n10253)

Log message:
	Some nasty hacks, but I got domarr.chpl, formatoutput.chpl and protoast_test.chpl compiling.
	- Switched primitive_transfer_function table to use strings instead of Sym's so
	  that __primitive("array_index") as we have in the internal header would work.
	- turned off lookup of the "y", in "x.y" when analyzeNewAST is on (HACK)
	- added transfer function for array_index'ing
	- made "self" variable lookup to pickup the hidden "self" argument (HACK)
	- used a global to hold the current function to work parentFn issue (HACK)
	- stored the elementType for arrays and used to initialize "element" pseudo-variable

Modified files:
	chapel/compiler/: analysis.cpp driver.cpp fa.cpp fa.h 
	                  parse_ast.cpp sym.h 
	chapel/compiler/AST/: internal_prelude.chpl symtab.cpp 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good enum.good 
	                                  equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  whileLoop.good writen.good 
	                                  writetwo.good 
Added files:
	chapel/test/flowanalysis/newast/: domarr.chpl domarr.good 
	                                  formatoutput.chpl 
	                                  formatoutput.good 
	                                  protoast_test.chpl 
	                                  protoast_test.good 

---------------------------------------------------------------------------

09/15/04 13:35:07 -- bradc

Log message:
	Added a new Pass and a new Traversal:
	
		RunAnalysis : is a pass that runs John's analysis work
			if the analyzenewast flag is set.  This is
			essentially what we had before, but I moved it
			to a pass so that we could put it between other
			passes.  Such as:
	
		SetupStmtLinks : is a traversal that walks the AST,
			ensuring that expressions' stmt pointers point
			to their parent statement.  These are difficult
			to set up while parsing since the expressions
			are created before the statements, so this
			seemed like a clean way to do it.  Can/should
			be run directly after parsing.

Modified files:
	chapel/compiler/: Makefile driver.cpp driver.h pass.cpp pass.h 
	                  passlist.cpp passlist.h 
	chapel/compiler/AST/: Makefile.share type.cpp type.h 
Added files:
	chapel/compiler/: runAnalysis.cpp runAnalysis.h 
	chapel/compiler/AST/: setupStmtLinks.cpp setupStmtLinks.h 

---------------------------------------------------------------------------

09/15/04 15:17:26 -- jplevyak (a.k.a. n10253)

Log message:
	Add shadow types for Locales and Timers.
	Use a representative meta-class for class names which appear in code (ClassSymbol).
	Little bit of bulletproofing from a smoke run on some of the protoast files.

Modified files:
	chapel/compiler/: analysis.cpp fa.cpp 

---------------------------------------------------------------------------

09/15/04 15:45:33 -- jplevyak (a.k.a. n10253)

Log message:
	Make CastExpr the identify function for now.
	enumarray.chpl is now working.
	Made array accesses accept objects of any type (for now).

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: internal_prelude.chpl 

---------------------------------------------------------------------------

09/15/04 15:45:59 -- jplevyak (a.k.a. n10253)

Log message:
	enumarray.chpl now working

Modified files:
	chapel/test/flowanalysis/newast/: domarr.good formatoutput.good 
	                                  protoast_test.good 
Added files:
	chapel/test/flowanalysis/newast/: enumarray.chpl enumarray.good 

---------------------------------------------------------------------------

09/15/04 16:41:44 -- shannon

Log message:
	Changed the enumerated binOpType BINOP_EQUALS to BINOP_EQUAL
	for naming consistency.
	
	Modified code generation of parentheses.  In the past we were
	parenthesizing all code generated binary expressions to ensure
	precedence correctness.  Now they are only generated when necessary
	or to suppress warnings from the C compiler.
	
	Wrote a test generator which generates all combinations of pairs of
	binary operators with and without parentheses.  It generates either
	C or Chapel code.  Generated and ran C and Chapel versions of the
	test in order to compare output.

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: chapel.y expr.cpp expr.h 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
	chapel/test/trivial/shannon/: compSampler.chpl compSampler.good 
Added files:
	chapel/test/trivial/shannon/gentest/: NOTEST compTest.c 
	                                      genCompTest.c 

---------------------------------------------------------------------------

09/15/04 17:20:45 -- jplevyak (a.k.a. n10253)

Log message:
	Worked on support for domain expressions.
	Fixed getExpr and getSymbol for DomainExpr (they were not getting
	 all the elements of the list).
	Updated tests results for enumarray and domarr

Modified files:
	chapel/compiler/: analysis.cpp 
	chapel/compiler/AST/: expr.cpp 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 

---------------------------------------------------------------------------

09/16/04 08:21:49 -- jplevyak (a.k.a. n10253)

Log message:
	Failure caused by print order issue.
	This addresses the symptom, I'll get to the cause tomorrow.

Modified files:
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

09/16/04 19:18:58 -- bradc

Log message:
	Big source code reorganization.  The main goal here
	was to take all the source code that was getting
	piled up in compiler/ and compiler/AST and tease it
	out into subdirectories which are a little smaller
	and more topically organized.  The directory structure
	under compiler/ now looks like this (also reflected in
	the DIRS file in that directory):
	
	----------------------------
	
	code directories:
	
	AST/            : high-level AST & symboltable classes
	adt/            : abstract data types (vector, map, etc.)
	analysis/       : low-level analysis code
	  make_prims/   : makes prim_data stuff
	backend/        : back-end stuff (codegen, dump, graph output)
	include/        : public interface header files
	main/           : main compiler control (main, passlist, etc.)
	parser/         : new parser
	passes/         : pass classes
	traversals/     : traversal classes
	util/           : utility code
	vparser/        : bootstrap parser
	  cast/         : cast stuff
	
	other directories:
	
	etc/            : miscellaneous non-code stuff (web, lowlevel cg help)
	make/           : common makefile stuff
	samples/        : sample codes  (perhaps outdated now that test is here?)
	test/           : unit tests (perhaps should be moved under a source dir?)
	
	----------------------------
	
	I did my best to sort code into these categories,
	but it could be that I got some wrong, or additional
	directories should be added to reflect other
	functions.
	
	Note that I implemented the movement of these files
	by removing them from their old location and adding
	them in their new location -- thus the history of
	the file will be difficult to trace across this
	boundary.  The alternative was to move internal CVS
	files around, but this fairly terrifies me, so I'm
	hoping we'll all be able to deal with the bother.
	
	Our stance for include files is as discussed on email:
	header files that are part of a public interface should
	go in the include/ directory.  Header files that are
	part of a private interface can/should go into the
	source directory directly.  I did a quick scan of all
	header files, looking for those that only appeared in
	a single directory's Makefile.cvs.depend file, and moved
	those files into the directory in question.  There
	weren't very many of these, as it turns out.  Could be
	that if we looked more carefully, we'd find false
	dependences that could allow more headers to be teased
	into code directories.  This would be a good background
	activity for all of us -- moving code into the most
	appropriate place for it.
	
	The current assumption is that all source directories
	for the compiler will be siblings under the compiler/
	directory.  Subdirectories under those are used to
	create dynamically-generated sources (like the make_prims
	and cast stuff).
	
	To add new directories, take a look at something like
	main (which is an exceptionally normal directory) and
	copy its Makefile, Makefile.share, and Makefile.include
	files, replacing "main" with your directory name
	(capitalized appropriately -- emacs will do amazing
	things here with a query replace).  Then go to the
	top-level compiler/Makefile and search on main,
	creating a new line for your new directory as required.
	Everything should then fall out.
	
	This reorg is not perfect yet -- it compiles and tests,
	and I need to get home so am checking in before people
	come in to do development tomorrow to reflect the
	structure.  However, some of the printing done by
	the Makefiles comes out in an unintuitive order (when
	there are sub-subdirectories), and I haven't had a
	chance to check the dependences deeply yet (though I
	believe I've got them approximately correct).  I'll
	continue to work on improving this stuff as a background
	activity or as others request it.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: .cvsignore Makefile Makefile.include 
	                      Makefile.share stmt.cpp 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/make/: Makefile.base Makefile.gnu 
	chapel/test/: sub_test 
	chapel/test/lowlevelcg/jplevyak/: Makefile.cg 
Added files:
	chapel/compiler/: DIRS 
	chapel/compiler/adt/: FILES Makefile Makefile.include 
	                      Makefile.share list.cpp map.cpp vec.cpp 
	chapel/compiler/analysis/: FILES Makefile Makefile.include 
	                           Makefile.share TODO analysis.cpp 
	                           ast.cpp cdb.cpp cdb.h cfg.cpp cg.cpp 
	                           clone.cpp dom.cpp fa.cpp 
	                           fa_extras.cpp fun.cpp if1.cpp 
	                           inline.cpp loop.cpp pattern.cpp 
	                           pdb.cpp pnode.cpp prim.cpp 
	                           prim_data.cpp prim_data.dat 
	                           prim_data.h prim_data_incs.cpp 
	                           prim_data_incs.h region.cpp region.h 
	                           ssu.cpp ssu.h ssu_extra.cpp sym.cpp 
	                           var.cpp 
	chapel/compiler/analysis/make_prims/: .cvsignore Makefile 
	                                      make_prims.cpp 
	                                      make_prims.g 
	chapel/compiler/backend/: FILES Makefile Makefile.include 
	                          Makefile.share beautify.cpp 
	                          codegen.cpp dump.cpp graph.cpp 
	chapel/compiler/etc/: c_runtime.h valgrind.suppressions 
	chapel/compiler/etc/www/: bullet.gif minus.gif mktree.css 
	                          mktree.js plus.gif 
	chapel/compiler/include/: analysis.h ast.h ast_kinds.h baseAST.h 
	                          beautify.h builtin.h builtin_symbols.h 
	                          callbacks.h cg.h checkTypeInfo.h 
	                          chplalloc.h chpltypes.h clone.h code.h 
	                          codegen.h createAST.h dom.h driver.h 
	                          dump.h expr.h extern.h fa.h files.h 
	                          findUnknownTypes.h fun.h getstuff.h 
	                          geysa.h grammar.h graph.h if1.h 
	                          inline.h link.h list.h loc.h log.h 
	                          loop.h map.h misc.h mysystem.h nils.h 
	                          num.h parse.h parse_ast.h 
	                          parse_structs.h pass.h pattern.h pdb.h 
	                          pnode.h prim.h printAST.h 
	                          printSymtab.h runAnalysis.h scope.h 
	                          setupStmtLinks.h stmt.h stringutil.h 
	                          sym.h symbol.h symscope.h symtab.h 
	                          testGetStuff.h traversal.h type.h 
	                          var.h vec.h verifyASTType.h yy.h 
	chapel/compiler/main/: FILES Makefile Makefile.include 
	                       Makefile.share arg.cpp arg.h 
	                       createAST.cpp driver.cpp pass.cpp 
	                       passlist.cpp passlist.h version.cpp 
	                       version.h version_num.h 
	chapel/compiler/parser/: .cvsignore Makefile Makefile.include 
	                         Makefile.share chapel.lex chapel.y 
	                         internal_prelude.chpl lexyacc.cpp 
	                         lexyacc.h prelude.chpl yy.c 
	chapel/compiler/passes/: Makefile Makefile.include 
	                         Makefile.share printAST.cpp 
	                         printSymtab.cpp runAnalysis.cpp 
	chapel/compiler/test/: beautify.cpp files.cpp list.cpp map.cpp 
	                       misc.cpp mysystem.cpp stringutil.cpp 
	                       vec.cpp 
	chapel/compiler/traversals/: Makefile Makefile.include 
	                             Makefile.share checkTypeInfo.cpp 
	                             findUnknownTypes.cpp getstuff.cpp 
	                             setupStmtLinks.cpp testGetStuff.cpp 
	                             traversal.cpp verifyASTType.cpp 
	chapel/compiler/util/: FILES Makefile Makefile.include 
	                       Makefile.share files.cpp log.cpp misc.cpp 
	                       mysystem.cpp stringutil.cpp 
	chapel/compiler/vparser/: FILES Makefile Makefile.include 
	                          Makefile.share ast_cf.cpp builtin.cpp 
	                          c.g cast_code.cpp grammar.cpp 
	                          parse.cpp parse_ast.cpp parse_incs.cpp 
	                          prelude.v scope.cpp v.g 
	                          v.g.d_parser.cpp 
	chapel/compiler/vparser/cast/: .cvsignore Makefile cast.cpp 
Removed files:
	chapel/compiler/: CHANGES FILES Makefile.cg TODO analysis.cpp 
	                  analysis.h arg.cpp arg.h ast.cpp ast.h 
	                  ast_cf.cpp ast_kinds.h beautify.cpp beautify.h 
	                  builtin.cpp builtin.h builtin_symbols.h 
	                  bullet.gif c.g c_runtime.h callbacks.h cdb.cpp 
	                  cdb.h cfg.cpp cg.cpp cg.h chplalloc.h 
	                  chpltypes.h clone.cpp clone.h code.h 
	                  codegen.cpp codegen.h createAST.cpp 
	                  createAST.h datatype.cpp datatype.h dom.cpp 
	                  dom.h driver.cpp driver.h dump.cpp dump.h 
	                  extern.h fa.cpp fa.h fa_extras.cpp files.cpp 
	                  files.h fun.cpp fun.h geysa.h grammar.cpp 
	                  grammar.h graph.cpp graph.h if1.cpp if1.h 
	                  inline.cpp inline.h list.cpp list.h log.cpp 
	                  log.h loop.cpp loop.h map.cpp map.h minus.gif 
	                  misc.cpp misc.h mktree.css mktree.js 
	                  mysystem.cpp mysystem.h num.h parse.cpp 
	                  parse.h parse_ast.cpp parse_ast.h 
	                  parse_incs.cpp parse_structs.h pass.cpp pass.h 
	                  passlist.cpp passlist.h pattern.cpp pattern.h 
	                  pdb.cpp pdb.h plus.gif pnode.cpp pnode.h 
	                  prelude.v prim.cpp prim.h prim_data.dat 
	                  prim_data_incs.cpp prim_data_incs.h region.cpp 
	                  region.h runAnalysis.cpp runAnalysis.h 
	                  scope.cpp scope.h ssu.cpp ssu.h ssu_extra.cpp 
	                  stringutil.cpp stringutil.h sym.cpp sym.h v.g 
	                  valgrind.suppressions var.cpp var.h vec.cpp 
	                  vec.h version.cpp version.h version_num.h 
	chapel/compiler/AST/: baseAST.h chapel.lex chapel.y 
	                      checkTypeInfo.cpp checkTypeInfo.h expr.h 
	                      findUnknownTypes.cpp findUnknownTypes.h 
	                      getstuff.cpp getstuff.h 
	                      internal_prelude.chpl lexyacc.h link.h 
	                      loc.h main.cpp nils.h prelude.chpl 
	                      printAST.cpp printAST.h printSymtab.cpp 
	                      printSymtab.h setupStmtLinks.cpp 
	                      setupStmtLinks.h stmt.h stringutil.cpp 
	                      stringutil.h symbol.h symscope.h symtab.h 
	                      testGetStuff.cpp testGetStuff.h 
	                      traversal.cpp traversal.h type.h 
	                      verifyASTType.cpp verifyASTType.h yy.c 
	                      yy.h 
	chapel/third-party/boehmgc/: gc6.2.tar.gz 
	chapel/third-party/boehmgc/gc6.2/: AmigaOS.c BCC_MAKEFILE 
	                                   EMX_MAKEFILE MacOS.c 
	                                   MacProjects.sit.hqx 
	                                   Makefile.DLLs Makefile.am 
	                                   Makefile.direct Makefile.dj 
	                                   Makefile.in NT_MAKEFILE 
	                                   NT_THREADS_MAKEFILE 
	                                   OS2_MAKEFILE PCR-Makefile 
	                                   README.QUICK SMakefile.amiga 
	                                   WCC_MAKEFILE acinclude.m4 
	                                   aclocal.m4 add_gc_prefix.c 
	                                   aix_irix_threads.c allchblk.c 
	                                   alloc.c alpha_mach_dep.S 
	                                   backgraph.c base_lib 
	                                   blacklst.c callprocs 
	                                   checksums.c config.guess 
	                                   config.sub configure 
	                                   configure.host configure.in 
	                                   darwin_stop_world.c dbg_mlc.c 
	                                   depcomp digimars.mak 
	                                   dyn_load.c finalize.c gc.mak 
	                                   gc_cpp.cc gc_cpp.cpp 
	                                   gc_dlopen.c gcc_support.c 
	                                   gcj_mlc.c gcname.c headers.c 
	                                   hpux_test_and_clear.s 
	                                   ia64_save_regs_in_stack.s 
	                                   if_mach.c if_not_there.c 
	                                   install-sh libtool.m4 
	                                   ltconfig ltmain.sh mach_dep.c 
	                                   malloc.c mallocx.c mark.c 
	                                   mark_rts.c 
	                                   mips_sgi_mach_dep.s 
	                                   mips_ultrix_mach_dep.s misc.c 
	                                   missing mkinstalldirs 
	                                   new_hblk.c obj_map.c os_dep.c 
	                                   pc_excludes pcr_interface.c 
	                                   powerpc_darwin_mach_dep.s 
	                                   pthread_stop_world.c 
	                                   pthread_support.c ptr_chck.c 
	                                   real_malloc.c reclaim.c 
	                                   rs6000_mach_dep.s setjmp_t.c 
	                                   solaris_pthreads.c 
	                                   solaris_threads.c 
	                                   sparc_mach_dep.S 
	                                   sparc_netbsd_mach_dep.s 
	                                   sparc_sunos4_mach_dep.s 
	                                   specific.c stubborn.c 
	                                   threadlibs.c typd_mlc.c 
	                                   version.h win32_threads.c 
	chapel/third-party/boehmgc/gc6.2/Mac_files/: MacOS_Test_config.h 
	                                             MacOS_config.h 
	                                             dataend.c 
	                                             datastart.c 
	chapel/third-party/boehmgc/gc6.2/cord/: cordbscs.c cordprnt.c 
	                                        cordtest.c cordxtra.c 
	                                        de.c de_cmds.h 
	                                        de_win.ICO de_win.RC 
	                                        de_win.c de_win.h 
	chapel/third-party/boehmgc/gc6.2/doc/: Makefile.am Makefile.in 
	                                       README README.DGUX386 
	                                       README.Mac README.MacOSX 
	                                       README.OS2 README.amiga 
	                                       README.arm.cross 
	                                       README.autoconf 
	                                       README.changes 
	                                       README.contributors 
	                                       README.cords 
	                                       README.darwin README.dj 
	                                       README.environment 
	                                       README.ews4800 README.hp 
	                                       README.linux 
	                                       README.macros 
	                                       README.rs6000 README.sgi 
	                                       README.solaris2 
	                                       README.uts README.win32 
	                                       barrett_diagram 
	                                       debugging.html gc.man 
	                                       gcdescr.html 
	                                       gcinterface.html 
	                                       leak.html scale.html 
	                                       tree.html 
	chapel/third-party/boehmgc/gc6.2/include/: Makefile.am 
	                                           Makefile.in cord.h 
	                                           ec.h gc.h gc_alloc.h 
	                                           gc_allocator.h 
	                                           gc_amiga_redirects.h 
	                                           gc_backptr.h 
	                                           gc_config_macros.h 
	                                           gc_cpp.h gc_gcj.h 
	                                           gc_inl.h gc_inline.h 
	                                           gc_local_alloc.h 
	                                           gc_mark.h 
	                                           gc_pthread_redirects.h 
	                                           gc_typed.h javaxfc.h 
	                                           leak_detector.h 
	                                           new_gc_alloc.h 
	                                           weakpointer.h 
	chapel/third-party/boehmgc/gc6.2/include/private/: cord_pos.h 
	                                                   darwin_semaphore.h 
	                                                   darwin_stop_world.h 
	                                                   dbg_mlc.h 
	                                                   gc_hdrs.h 
	                                                   gc_locks.h 
	                                                   gc_pmark.h 
	                                                   gc_priv.h 
	                                                   gcconfig.h 
	                                                   pthread_stop_world.h 
	                                                   pthread_support.h 
	                                                   solaris_threads.h 
	                                                   specific.h 
	chapel/third-party/boehmgc/gc6.2/tests/: leak_test.c test.c 
	                                         test_cpp.cc 
	                                         thread_leak_test.c 
	                                         trace_test.c 

---------------------------------------------------------------------------

09/16/04 19:26:34 -- bradc

Log message:
	Fixed a problem in which the arch-specific directory
	was not being made from a clean build.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

09/17/04 11:14:52 -- jplevyak (a.k.a. n10253)

Log message:
	1. Sort classes before writing flow analysis log so as to prevent
	   random "diff" mismatches in the regressions.
	2. Checked in new test files with the sorted lists.
	3. Use inttypes.h instead of stdint.h which is only a C99 standard and
	   not available on all platforms.
	4. worked around compilation errors in compiler/parser by commenting
	   out a check and adding -Wno-error to the parser table compilation line.

Modified files:
	chapel/compiler/analysis/: fa_extras.cpp 
	chapel/compiler/include/: vec.h 
	chapel/compiler/make_prims/: make_prims.g 
	chapel/compiler/parser/: Makefile 
	chapel/test/flowanalysis/jplevyak/: classvar.good 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

09/17/04 11:43:17 -- bradc

Log message:
	Took another pass over the Makefiles to clean up some stuff
	from last night's check-in.  Printing of subdirectories now
	makes more sense; recursive Makefile structure is now more
	common across Makefiles.  Fixed dependences in analysis/Makefile
	so that certain files are not rebuilt if two makes are done
	back-to-back.  Moved John's recent changes to
	make_prims/make_prims.g to analysis/make_prims.g and removed
	the contents of cast/ and make_prims/ as I believe they are
	no longer used.  Once I verify this, I'll pull the empty
	directories from the CVSROOT.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
	chapel/compiler/AST/: Makefile expr.cpp type.cpp 
	chapel/compiler/adt/: Makefile 
	chapel/compiler/analysis/: Makefile Makefile.share 
	chapel/compiler/analysis/make_prims/: Makefile make_prims.g 
	chapel/compiler/backend/: Makefile 
	chapel/compiler/main/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: Makefile 
	chapel/compiler/passes/: Makefile 
	chapel/compiler/traversals/: Makefile 
	chapel/compiler/util/: Makefile 
	chapel/compiler/vparser/: Makefile Makefile.share 
	chapel/compiler/vparser/cast/: Makefile 
Removed files:
	chapel/compiler/cast/: Makefile cast.cpp 
	chapel/compiler/make_prims/: Makefile make_prims.cpp 
	                             make_prims.g 

---------------------------------------------------------------------------

09/20/04 11:41:52 -- jplevyak (a.k.a. n10253)

Log message:
	Move the remaining useful bits of compiler/samples into chapel/test.

Modified files:
	chapel/compiler/vparser/: parse_ast.cpp 
Added files:
	chapel/test/flowanalysis/jplevyak/: bug1.good bug1.v 
	                                    literal.good literal.v 
	                                    ref.good ref.v sample.good 
	                                    sample.v tuples.good 
	                                    tuples.v var.v vector.good 
	                                    vector.v 
	chapel/test/flowanalysis/jplevyak/constants/: CATFILES 
	                                              CLEANFILES 
	                                              COMPOPTS NOEXEC 
	                                              PREDIFF const.good 
	                                              const.v 
	                                              constant_folding.good 
	                                              constant_folding.v 
	chapel/test/flowanalysis/jplevyak/loop/: CATFILES CLEANFILES 
	                                         COMPOPTS NOEXEC PREDIFF 
	                                         loop1.good loop1.v 
	                                         loop2.good loop2.v 
	                                         loop_endless.good 
	                                         loop_endless.v rec.good 
	                                         rec.v 

---------------------------------------------------------------------------

09/20/04 13:02:37 -- bradc

Log message:
	Prior to this checkin, using the --no-codegen flag would cause
	the AST to be pretty-printed to the console in lieu of code
	generation.  This was a handy debugging tool early on, but has
	become increasingly bothersome.  Now, --no-codegen simply means
	don't do code generation.
	
	Added a pass PrintProgram which will print the program in the
	same way that --no-codegen used to.  Set up the
	test/trivial/protoast subdirectory to run this pass and only
	this pass, since that's what this directory has been testing
	up to this point ("can we parse and pretty-print out some
	substantial programs").
	
	Modified John's flowanalysis test output, which also used
	--no-codegen, so that the pretty-printed output is no
	longer intermixed with his analysis pass' output.
	
	Moved the printAST.cpp file from passes to traversals, since
	it actually is a traversal (I mistakenly put it in the wrong
	place last week).

Modified files:
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: COMPOPTS 
Added files:
	chapel/compiler/include/: printProgram.h 
	chapel/compiler/passes/: printProgram.cpp 
	chapel/compiler/traversals/: printAST.cpp 
	chapel/test/trivial/bradc/protoast/: mypasslist.h 
Removed files:
	chapel/compiler/passes/: printAST.cpp 

---------------------------------------------------------------------------

09/20/04 15:12:40 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for multiple returns of lvalues in the same function.
	Currently only in the test parser.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: parse_ast.h scope.h 
	chapel/compiler/vparser/: parse_ast.cpp scope.cpp v.g 
	chapel/test/flowanalysis/jplevyak/: badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good classvar.good 
	                                    cs4.good cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    literal.good memberfun.good 
	                                    memberfun2.good 
	                                    structtype.good 
Added files:
	chapel/test/flowanalysis/jplevyak/: assign1.good assign1.v 
	                                    assign2.good assign2.v 
Removed files:
	chapel/compiler/vparser/: v.g.d_parser.cpp 

---------------------------------------------------------------------------

09/20/04 16:21:11 -- bradc

Log message:
	Got John's analysis stuff working with the GetStuff pass
	rather than the getXXXX() calls.  This involved some
	tweaking of the way traversals are done (for the better)
	since this is the most aggressive use of traversals so
	far.  There are still some questions in my mind about
	how far one wants to walk into types (should one walk
	into their names?) and symbols (should one walk into
	their types?) in order to get completeness without
	ending up in loops or doing too much redundant work,
	but this seems OK for now and we can improve it as
	time goes on.
	
	The one thing I had to do that was a little funny was to
	explicitly add nilClassType into John's list of symbols
	because the traversal won't do anything at nil nodes.
	This raises a question about whether the unspecified
	parent class should be a non-nil sentinel rather than
	a nil sentinel, and/or whether we should just add all
	the nils into John's list in close_symbols.
	
	I didn't actually go so far as to pull out the getXXX()
	calls yet, though I believe we now could.  I just wanted
	to get this change out of my directory as it's been in
	the way of other work for awhile now.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h type.h 
	chapel/compiler/main/: createAST.cpp 
Added files:
	chapel/compiler/vparser/: .cvsignore 

---------------------------------------------------------------------------

09/20/04 18:47:41 -- bradc

Log message:
	Added some initial support for default constructors for
	classes.  These currently do nothing apart from allocating
	memory for the class.  Eventually, they should also
	initialize the member variables as appropriate, call
	constructors recursively, etc.
	
	In order to do this:
	
	* the constructor (currently only one, the default one,
	  is supported) is stored as a FnDefStmt* in ClassType.
	
	* once again, ran into traversal issues because
	  traversing a type traverses its constructor which
	  returns the same type, leading to an infinite loop.
	  For now, I fail to traverse the constructor.  It
	  seems like the fix for this will be to split
	  traversal of types into two cases: a deep traversal
	  that looks at its composition, and a shallow
	  traversal that merely notes its Type*.
	
	* added a function malloc() to the standard prelude.
	  I could see wanting to change this to be some sort
	  of wrapper function for our internal purposes (I
	  like a malloc wrapper that takes an element type
	  and a number of elements, for reasons of logging),
	  but this will do for now.
	
	* added a new Expr type -- SizeofExpr -- to represent
	  sizeof() expressions in the generated C.  I didn't
	  implement this using the internal_prelude because I
	  wasn't confident that we could handle a function
	  that takes a type as its parameter yet (if we ever
	  need to be able to).  This seemed like an easy
	  workaround for now (NOTE FOR JOHN: I added a case
	  for SizeofExpr in analysis.cpp that flags an
	  internal error for now)
	
	* added support for "function calls" to constructors
	  by having the ParenOpExpr's classify routine convert
	  such calls into function calls to the constructor
	  in question.
	
	* fixed some bugs in codegen() routines that were
	  calling into print() routines rather than other
	  codegen() routines.
	
	* improved allocation of array types to use a new
	  type initialization interface that I introduced
	  awhile back, but failed to use very widely (until
	  now).
	
	* implemented code generation for return statements,
	  which I'd apparently never gotten to previously.
	  Added a trivial test to lock this in.
	
	* fixed old trivialclass.chpl code to call a
	  constructor (previously, it was incorrect as
	  the class would have been nil).

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h type.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/classes/bradc/: trivialclass.chpl 
Added files:
	chapel/test/trivial/bradc/functions/: retstmt.chpl retstmt.good 

---------------------------------------------------------------------------

09/21/04 12:30:47 -- bradc

Log message:
	Adding a new traversal -- checkIDs -- that does a traversal of
	the AST and then prints out which baseASTs it did and did not
	hit.  This is of limited worth, but is interesting to me today.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/main/: passlist.h passlist.cpp 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/include/: checkIDs.h 
	chapel/compiler/traversals/: checkIDs.cpp 

---------------------------------------------------------------------------

09/21/04 14:22:49 -- shannon

Log message:
	Implemented code generation of the exponentiation
	binary operator, and added a test.
	
	Added a variable to the binOp codegen method to
	hold the return of a call to the precedence method,
	instead of needlessly calling the method repeatedly.
	
	Added the math libraries to the list of included
	headers in stdchpl.h and to the link line in the
	runtime/etc Makefile.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: stdchpl.h 
Added files:
	chapel/test/trivial/shannon/: exp.chpl exp.good 

---------------------------------------------------------------------------

09/21/04 14:23:11 -- jplevyak (a.k.a. n10253)

Log message:
	Updated analysis/TODO to remove things that have gotten done
	Got low level code generation working for some new AST chapel files
	  (with the same .good test files used with the standard code generator).
	Fixed bugs in mapping of types from the AST to the low level representation.
	Added support for "bool" as a 1 bit unsigned numeric type including
	  support for constant folding in the old parser.
	Fixed bug in assignment to variables of primitive type.
	
	**** NOTE ****
	
	When we want to overload assignment for other value objects, we
	are going to need an assignment function.  If we do it like C++
	we can reuse a "copy constructor" which takes a single argument of
	the same type.
	
	Currently assignment is always interpreted as assigment to a
	primitive numeric type.  To overcome this limitation and permit
	assignment to be analyzed, assignment needs to be mapped to an
	overloaded function, and that overloaded function needs to be
	defined for primitive numeric types to correspond to the builtin
	version like (from the old prelude.chpl):
	
	function operator(a:anynum, #"=", b:anynum) { return __operator(a, #"=", b:anynum); }
	
	The __operator represents primitive assignment while other objects can
	overload the "operator" function.
	
	This is just a sample syntax, and we don't even have to have make this
	public, but it would be easiest for analysis if something like this
	existed in the internal prelude.

Modified files:
	chapel/compiler/analysis/: TODO analysis.cpp cg.cpp clone.cpp 
	                           fa.cpp if1.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/include/: if1.h num.h parse.h sym.h 
	chapel/compiler/vparser/: ast_cf.cpp cast_code.cpp parse.cpp 
	                          parse_ast.cpp 
	chapel/test/flowanalysis/jplevyak/: literal.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  danglingelse.good 
	                                  equality_ops.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good var.good 
	                                  var2.good whileLoop.good 
	chapel/test/lowlevelcg/jplevyak/: COMPOPTS 
Added files:
	chapel/test/lowlevelcg/jplevyak/: arithmetic_ops.chpl 
	                                  arithmetic_ops.good 
	                                  assignment_expr.chpl 
	                                  assignment_expr.good 
	                                  bitwise_assignment.chpl 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.chpl 
	                                  bitwise_negation.good 
	                                  bitwise_ops.chpl 
	                                  bitwise_ops.good 

---------------------------------------------------------------------------

09/21/04 16:48:04 -- jplevyak (a.k.a. n10253)

Log message:
	Unify my handling of forall loops and EXPR_DOMAIN.
	Handle multiple domains (naively).
	Move GetStuff to the stack.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

09/21/04 17:00:15 -- jplevyak (a.k.a. n10253)

Log message:
	Add support and test case for multiple return sites.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Added files:
	chapel/test/flowanalysis/newast/: multiple_return.chpl 
	                                  multiple_return.good 

---------------------------------------------------------------------------

09/21/04 17:28:03 -- bradc

Log message:
	Improved the traversal mechanism so that (a) it now
	traverses a class' default constructor, and (b) it
	does not go into any infinite loops.  Details follow
	for my own sake and nobody else need read them unless
	they're terminally bored.
	
	I made it so that when types are traversed, their
	definitions are typically not traversed (thus, whenever
	one comes across a reference to a class name in the
	code, the traversal will not, by default, walk down
	the entire class definition).  I did this by splitting
	the traverse() method for classes into traverse() and
	traverseDef(), much like codegen() and codegenDef().
	Thus, a statement like a TypeDefStmt would call
	traverseDef, because that's a reasonable place to look
	at the class definition, whereas a variable definition
	of that class type would not traverse the class
	definition.
	
	There are some exceptions to this, however.  If a type
	has no name (and therefore, I'm assuming, no TypeDefStmt),
	then the type's definition will be traversed when the
	traverse() method is called.  This should be useful for
	anonymous type specifiers in casts, sizeof statements,
	etc.
	
	The second is that if a client explicitly requests to
	traverse() a type (as analysis.cpp does), the type's
	definition will be traversed.  This may be the wrong
	choice, but it's the current one (the other approach
	would be to have analysis.cpp call traverseDef -- I'm
	not sure which is more appropriate, so am punting
	until we get more cases to weigh).  The rationale for
	the current decision is that a client need never know
	about traverseDef... they just call traverse().

Modified files:
	chapel/compiler/: DIRS 
	chapel/compiler/AST/: expr.cpp nils.cpp stmt.cpp symtab.cpp 
	                      type.cpp 
	chapel/compiler/include/: stmt.h symtab.h type.h 

---------------------------------------------------------------------------

09/21/04 18:43:48 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for SizeofExpr.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

09/22/04 09:38:03 -- bradc

Log message:
	Shannon pointed out that I broke the ebrowse BROWSE file
	when I reorganized the source trees.  This should fix it
	(I forgot to include the headers).  I did the same for
	the etags TAGS file, and this should fix that too.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

09/22/04 13:59:00 -- bradc

Log message:
	A bunch of work related to back pointers:
	
	* recoded the implementation of default constructors so that
	  their parentFn pointers would be set up properly as pointed
	  out by John.
	
	* implemented more parent pointers for Expr subclasses
	
	* added two new methods to the Stmt subclasses:
	
	  - canLiveAtFileScope -- whether or not the statement is a legal
	    top-level statement, or would need to be moved into an __init
	    procedure of sorts (this was hardcoded using dynamic casts
	    previously)
	
	  - topLevelExpr -- takes an expression as an argument and tells
	    whether or not it's one of the "top" expressions in the
	    statement -- which is to say, an expression with no parent
	    expression.
	
	* added an INT_WARNING macro which works like INT_FATAL, except
	  that it only prints out warnings and doesn't halt execution
	  of the compiler.
	
	* added parentFn pointers for all statements appearing in the
	  __init functions.
	
	* added a new traversal -- checkBackLinks -- that walks over the AST
	  and checks back pointers to make sure that they are not nil when
	  they are not supposed to be nil.  This is not yet implemented
	  correctly for parentFn pointers, unfortunately, because we don't
	  have sufficient information to squelch the warning for class member
	  statements.  Turned this on to run by default before calling into
	  John's analysis pass.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp stmt.cpp symtab.cpp type.cpp 
	chapel/compiler/include/: misc.h stmt.h symtab.h 
	chapel/compiler/main/: createAST.cpp passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/compiler/util/: misc.cpp 
Added files:
	chapel/compiler/include/: checkBackLinks.h 
	chapel/compiler/traversals/: checkBackLinks.cpp 

---------------------------------------------------------------------------

09/22/04 14:35:11 -- bradc

Log message:
	Moved header files for all passes and traversals to the passes/
	and traversals/ directories, respectively, as I expect this number
	to grow, and typically these passes and traversals are only
	used in passlist.h and passlist.cpp.  Since their interface is
	typically so narrow, it makes sense to not pollute the main include/
	directory with them.
	
	Also fixed a dependence problem in the parser/ Makefile that John
	pointed out.  I can never remember which aspects of Makefiles
	have def-before-use requirements and which don't.  Variable
	definitions do and I used the variable before defining it, causing
	it to be interpreted as an empty value.

Modified files:
	chapel/compiler/AST/: TODO 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: Makefile 
Added files:
	chapel/compiler/passes/: printProgram.h printSymtab.h 
	                         runAnalysis.h 
	chapel/compiler/traversals/: checkBackLinks.h checkIDs.h 
	                             checkTypeInfo.h findUnknownTypes.h 
	                             getstuff.h printAST.h 
	                             setupStmtLinks.h testGetStuff.h 
	                             verifyASTType.h 
Removed files:
	chapel/compiler/include/: checkBackLinks.h checkIDs.h 
	                          checkTypeInfo.h findUnknownTypes.h 
	                          getstuff.h printAST.h printProgram.h 
	                          printSymtab.h runAnalysis.h 
	                          setupStmtLinks.h testGetStuff.h 
	                          verifyASTType.h 

---------------------------------------------------------------------------

09/22/04 15:46:01 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in cloning which was causing flow analysis of literal.v to
	fail periodically.  Basically, I was not cloning correctly for basic
	types.  Cloning will build a new clone to eliminate dynamic dispatch
	or to ensure that a variable only drawn from a descrete set of types
	(float(8), integer(8), integer(4), string, bool, any by reference thing
	including classes and tuples).  This ensures that we can build an
	efficient implementation by being able to specialize the storage
	and access requirements for this objects.  In the future we can
	change these groupings for the convenience of code generation.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good cs3.good 
	                                    cs4.good cs5.good cs6.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good tuples.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop2.good 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

09/22/04 16:22:01 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in AST/expr.cpp which was using type_info to get the
	type of the WriteCall expression itself instead of the type
	of the arguments (funny, it was always coming back integer(8)).
	
	!!!!!!!! Switch over to --analyzeNewAST !!!!!!!!!

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/test/flowanalysis/newast/: COMPOPTS 
	chapel/test/lowlevelcg/jplevyak/: COMPOPTS 

---------------------------------------------------------------------------

09/22/04 19:04:57 -- jplevyak (a.k.a. n10253)

Log message:
	Add more suppressions to cover the collector when GC actually occurs.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

09/23/04 12:31:42 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug in cloning which prevented clones from being created
	for functions containing calls to (other) different clones from
	the same call site.
	This should fix the cs4.v issue.

Modified files:
	chapel/compiler/analysis/: clone.cpp fa.cpp 
	chapel/test/flowanalysis/jplevyak/: COMPOPTS cs4.good cs5.good 
	                                    cs6.good 

---------------------------------------------------------------------------

09/27/04 13:19:13 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in cloning where the out_edge_map was not getting
	cleared of values cached between analysis passes before cloning,
	resulting in unstable results.
	Added a new option -m# for preallocating memory so as to change
	memory hash values to help find such unstable bugs.

Modified files:
	chapel/compiler/analysis/: clone.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/test/flowanalysis/jplevyak/: cs3.good cs4.good 

---------------------------------------------------------------------------

10/01/04 15:18:03 -- shannon

Log message:
	Added functionality to the regression test harness so
	that now the tester can supply a test.stdin file that
	is piped into stdin when running the executable created
	from the test.chpl file.  (Brad added this, I typed.)
	
	Generated read statement for ints and floats, and added
	a test that uses the new test.stdin functionality.
	Added the read() function to the prelude.chpl file.
	
	Changed the WriteCall class bool data member to an
	enumeration to accommodate the added possibility of the
	instance being a read.  Changed the name of the class
	to IOCall.
	
	Changed several if-else statements to switch statements
	to accommodate the added read.
	
	Added read versions of the default formats in
	chpltypes.h, and changed the variable names to reflect
	whether a read or write format.  Added a bool argument
	to the Type::codegenDefaultFormat methods.  Changed the
	default format of domains to a write default format for
	now, since we cannot read domains.
	
	In IOCall::codegen changed the way that the argument list
	is traversed so that the list pointer is advanced only
	within the method.
	
	Removed extra semicolons generated at the end of certain
	IO statements.
	
	Recklessly modified some of John's code using the
	cut-and-paste method.  The read_transfer_function was
	especially scary looking.  John, you might want to take
	a peek at analysis.cpp.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h type.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/runtime/include/: chplio.h chpltypes.h domain.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/: start_test sub_test 
	chapel/test/flowanalysis/newast/: noop.good 
Added files:
	chapel/test/flowanalysis/jplevyak/constants/: .cvsignore 
	chapel/test/flowanalysis/jplevyak/loop/: .cvsignore 
	chapel/test/trivial/shannon/: readWriteFloatInt.chpl 
	                              readWriteFloatInt.good 
	                              readWriteFloatInt.stdin 

---------------------------------------------------------------------------

10/01/04 17:48:24 -- bradc

Log message:
	Updated the nightly token-counting script and removed
	some generated files that I'd accidentally checked into
	CVS when reorganizing the source tree.

Modified files:
	chapel/compiler/vparser/: .cvsignore 
	chapel/util/tokencount/: tokctnightly 
Added files:
	chapel/compiler/analysis/: .cvsignore 
Removed files:
	chapel/compiler/analysis/: prim_data.cpp prim_data.h 
	chapel/compiler/vparser/: cast_code.cpp 

---------------------------------------------------------------------------

10/05/04 15:39:23 -- bradc

Log message:
	* added a notion of a Type having a default initializer because I've
	  been concerned about stuff being uninitialized, and the language
	  spec now has a reasonably accepted proposal for this.  Currently the
	  implementation isn't as rich as in David's proposal, but built-in
	  types now have default initializers and user types have support for
	  simple initializers (ones that are independent of where they are
	  evaluated).
	
	* In doing this, I made several incidental changes:
	
	  - added a notion of a BoolLiteral (which is fairly useless) and a
	    ComplexLiteral to the AST.
	
	  - added support for parsing complex (imaginary) literals, and for
	    folding trivial additions and subtractions of float literals into
	    a single complex literal with real and imaginary parts.
	
	  - added a codegenComplex() method to expressions which will print
	    out the real or imaginary portion of an expression, based on the
	    toggle passed in.  This is implemented only for the simplest of
	    cases, and will rely on some good hoisting of tricky complex
	    expressions to work in general.
	
	  - added better support for UserType's -- codegen now supported
	
	  - changed exponentiation to be right- rather than left-associative

Modified files:
	chapel/compiler/AST/: expr.cpp nils.cpp stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symtab.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/runtime/include/: chplio.h chpltypes.h domain.h 
	chapel/runtime/src/: Makefile chplio.c 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
Added files:
	chapel/runtime/src/: chpltypes.c 
	chapel/test/trivial/bradc/: defaultinit.chpl defaultinit.good 
	                            defaultinit2.chpl defaultinit2.good 

---------------------------------------------------------------------------

10/05/04 15:51:51 -- bradc

Log message:
	Oops, forgot to check in the test of operator associativity
	that I'd written.

Added files:
	chapel/test/trivial/bradc/: opAssociativity.chpl 
	                            opAssociativity.good 

---------------------------------------------------------------------------

10/06/04 15:04:24 -- shannon

Log message:
	Generated read statement for strings.  I chose an arbitrary
	maximum string size of 256 for this implementation.  I
	added two tests - one fails when given a string greater
	than the maximum string size.

Modified files:
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/trivial/shannon/: readStringOverflow.chpl 
	                              readStringOverflow.good 
	                              readStringOverflow.stdin 
	                              readWriteString.chpl 
	                              readWriteString.good 
	                              readWriteString.stdin 

---------------------------------------------------------------------------

10/06/04 17:34:27 -- bradc

Log message:
	A couple of housekeeping things while killing time for my ride
	to come:
	
	- moved timers out of the compiler's internals and into the
	  prelude as a library class (a poorly defined one, currently,
	  but nonetheless... :)
	
	- added a lookupInternalType() method to the symboltable to
	  avoid some dynamic casting.

Modified files:
	chapel/compiler/AST/: symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

10/12/04 17:39:38 -- bradc

Log message:
	Checking in some initial AST cloning code -- no guarantees that it
	works in any realistic way yet, but got enough making sense and
	working stably that it made sense to take a snapshot.  All AST nodes
	now support a copy() method (though it may not always be implemented)
	which is designed to make a reasonable, deep copy of that node.  Those
	AST nodes which will support cloning (like FnDefStmts and
	TypeDefStmts), will also support a clone() function that does
	lower-level stuff like inserting new symboltable scopes into the
	correct place and linking the new statement into the statement list.
	Currently, only FnDefStmt supports this clone() function -- the
	interface may also become richer as we determine how this will
	interact with John's code.
	
	Cloning of fairly flat functions seems to work fine, but I haven't
	done careful testing for functions that contain deeply nested scopes.
	Cloning of classes is unimplemented, and copying of classes is
	unlikely to be correct, currently.
	
	I added a new debugging traversal -- cloneAllFns -- that simply walks
	the AST looking for functions that don't being with an underscore and
	clones them.  This works when applied to all tests in the test system.
	
	Renamed UseBeforeDefSymbol to be UnresolvedSymbol, and its astType to
	SYMBOL_UNRESOLVED.
	
	Killed the old getXXXX() code, which we seem to be living without, and
	because I'd prefer to put future effort into improving the GetStuff
	pass rather than maintaining getXXXX().

Modified files:
	chapel/compiler/AST/: TODO baseAST.cpp expr.cpp link.cpp 
	                      nils.cpp stmt.cpp symbol.cpp symtab.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	                          symbol.h symscope.h symtab.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: Makefile.share verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: cloneAllFns.cpp cloneAllFns.h 

---------------------------------------------------------------------------

10/13/04 09:56:53 -- bradc

Log message:
	Reordered classes in expr.cpp and expr.h to prepare for
	some refactoring. I'm checking this in separately in
	order to make the cvs diff for the refactoring changes
	readable.
	
	Also changed nightly regression test script to use a
	different log filename when it is run in debug mode.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

10/13/04 10:37:14 -- bradc

Log message:
	Moved CastExpr out from under ParenOpExpr in the
	AST class hierarchy, as it was becoming
	increasingly clear that it was out of place
	there.  Also, removed assumptions that it
	would have a list of arguments rather than
	a single argument -- this came from a guess
	that casts might look like constructors in the
	language.  As this became less true, it seemed
	less reasonable to anticipate this.  Changed
	analysis.cpp by pattern-matching in this
	regard -- John, you may want to take a quick
	look to make sure I got things correct.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

10/13/04 12:12:33 -- bradc

Log message:
	Made the code that parses files into the AST into a pass,
	moving towards the goal of supporting multi-file
	compilation.

Modified files:
	chapel/compiler/AST/: TODO 
	chapel/compiler/include/: createAST.h pass.h 
	chapel/compiler/main/: createAST.cpp driver.cpp pass.cpp 
	                       passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share 
	chapel/test/compflags/bradc/passlist/: COMPOPTS test.good 
	chapel/test/trivial/bradc/protoast/: mypasslist.h 
Added files:
	chapel/compiler/passes/: filesToAST.cpp filesToAST.h 
	chapel/test/compflags/bradc/passlist/: NOEXEC 

---------------------------------------------------------------------------

10/13/04 13:54:53 -- bradc

Log message:
	* added a new AST node -- the Module.  This is meant to
	  correspond to the language's module concept, though
	  for the short-term, it's likely to correspond more
	  closely with an input file.  Currently these are
	  unused except at code generation time.  Eventually,
	  this is what code will be parsed into, and modules
	  will be passed to subsequent compiler passes.  Those
	  of us working on codegen, note that the previously
	  global variables intheadfile, extheadfile have been
	  moved into the Module class, and can typically be
	  accessed in codegen() methods via:
	    currentModule->[int/ext]headfile
	
	* made codegen into a pass and moved the related code
	  out of backend/codegen.cpp and into passes/codegen.cpp
	  and the Module class respectively.
	
	* moved the pass.h and traversal.h files into passes/
	  and traversals/ respectively, as that's where they
	  really belong.
	
	* renamed main/pass.cpp into main/runpasses.cpp because
	  the old filename impled to me that it implemented the
	  (abstract) Pass class, and I could never find the
	  runPass-related code.
	
	* corrected PrintSymtab from a Traversal to a Pass

Modified files:
	chapel/compiler/AST/: Makefile.share stmt.cpp type.cpp 
	chapel/compiler/backend/: Makefile.share 
	chapel/compiler/include/: link.h symbol.h 
	chapel/compiler/main/: Makefile.share driver.cpp passlist.cpp 
	                       passlist.h 
	chapel/compiler/passes/: Makefile.share printSymtab.h 
Added files:
	chapel/compiler/AST/: module.cpp 
	chapel/compiler/include/: module.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: codegen.cpp codegen.h pass.h 
	chapel/compiler/traversals/: traversal.h 
Removed files:
	chapel/compiler/backend/: codegen.cpp 
	chapel/compiler/include/: codegen.h pass.h traversal.h 
	chapel/compiler/main/: pass.cpp 

---------------------------------------------------------------------------

10/13/04 17:37:36 -- jplevyak (a.k.a. n10253)

Log message:
	Removed some dead code and move a few lines around... no real change.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

10/14/04 14:21:14 -- shannon

Log message:
	Generated read statement for enumerations.  I continued
	with the arbitrary maximum string size of 256 for the
	enums that I used when reading strings.  Added a test.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: chplio.h stdchpl.h 
	chapel/test/: .cvsignore 
Added files:
	./: .cvsignore 
	chapel/test/trivial/shannon/: readWriteEnum.chpl 
	                              readWriteEnum.good 
	                              readWriteEnum.stdin 

---------------------------------------------------------------------------

10/14/04 15:37:12 -- bradc

Log message:
	Removed Shannon's .cvsignore which I think she
	checked in by accident (Shannon, if this isn't
	true, let me know).
	
	TIP: I find a .cvsignore in the root level of
	a project can be very helpful, but also very
	user-specific, so I suggest making your own
	.cvsignore file which contains .cvsignore,
	and then you can add stuff to it, and it'll
	never try to check itself in.  Hope that's
	true now that a .cvsignore file exists in
	this directory.  If not I'll yank it from the
	CVS tree manually.

Removed files:
	./: .cvsignore 

---------------------------------------------------------------------------

10/15/04 17:24:37 -- bradc

Log message:
	Increased the use of modules in the compiler by creating
	a module per file at the outset of compilation (if all
	of the files use the .chpl extension), and then passing
	the resulting list of modules to all subsequent passes.
	Haven't actually tested this for multiple files yet (and
	it wouldn't necessarily do anything useful even if it
	did all work), but I believe the structure is what we
	want going forward (with the caveat that a file may
	contain multiple modules, so the one module per file
	assumption is currently a limited one).
	
	Some changes that are folded in with this:
	
	* all files are opened before any are processed and an
	  error message is generated if there are any problems.
	  Inserted a test to guard this behavior.
	
	* moved all the createAST.cpp code either into parser.cpp,
	  a new file that parses a .chpl file, or into the
	  filesToAST pass.
	
	* made all passes and traversals take a Module* list
	  rather than a Stmt* list.  The only one of these
	  that I think has an open question is that the
	  RunAnalysis pass that calls John's analysis code
	  passes a filename to that routine, so it wasn't
	  clear what to do in the presence of multiple files.
	  For now, I just pass in the first filename
	  arbitrarily.  To the extent that I looked at this,
	  it seems to be used mostly to create new filenames
	  (for dumps and graphs), so maybe this is acceptable?

Modified files:
	chapel/compiler/AST/: TODO module.cpp 
	chapel/compiler/include/: driver.h module.h 
	chapel/compiler/main/: Makefile.share driver.cpp runpasses.cpp 
	chapel/compiler/parser/: Makefile.share 
	chapel/compiler/passes/: Makefile.share codegen.cpp codegen.h 
	                         filesToAST.cpp filesToAST.h pass.h 
	                         printProgram.cpp printProgram.h 
	                         printSymtab.cpp printSymtab.h 
	                         runAnalysis.cpp runAnalysis.h 
	chapel/compiler/traversals/: checkBackLinks.cpp checkBackLinks.h 
	                             checkIDs.cpp checkIDs.h 
	                             traversal.cpp traversal.h 
	chapel/test/flowanalysis/newast/: .cvsignore arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/compiler/include/: parser.h 
	chapel/compiler/main/: runpasses.h 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: pass.cpp 
	chapel/test/compflags/bradc/missinginfile/: COMPOPTS test.chpl 
	                                            test.good 
Removed files:
	chapel/compiler/include/: createAST.h 
	chapel/compiler/main/: createAST.cpp 

---------------------------------------------------------------------------

10/15/04 17:30:10 -- bradc

Log message:
	Replaced some extern declarations in .cpp files
	with inclusions of #include files.
	
	Also, forgot to mention on the last check-in
	that I fixed the creation of AST nodes so that
	if they are created by the compiler, they are
	given the filename "<internal>" and the line
	number 0 by default.  (Certain things like
	cloning will want to override these defaults,
	but this was an improvement over what used to
	happen which is that they'd be listed as being
	on the last line of the last file that was
	parsed.  This resuled in cosmetic changes to all
	of the flowanalysis/newast tests.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/passes/: codegen.cpp 

---------------------------------------------------------------------------

10/15/04 17:45:22 -- bradc

Log message:
	Fixed a seg fault that was occurring when trying
	to compile multiple files due to things not being
	initialized in the right order.  Now multiple
	files make it through the chapel compiler but
	don't make it through the C compiler because
	we generate an _init function per file.

Modified files:
	chapel/compiler/AST/: TODO module.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/passes/: filesToAST.cpp 

---------------------------------------------------------------------------

10/18/04 14:44:22 -- shannon

Log message:
	Generated read statement for booleans and complex
	numbers.  Added four tests; one for the boolean
	and three for the complex numbers.  Tested both
	the standard 'a + bi' and tuple (a, b) versions
	of complex number reads.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/trivial/shannon/: readStringOverflow.good 
Added files:
	chapel/test/trivial/shannon/: readWriteBool.chpl 
	                              readWriteBool.good 
	                              readWriteBool.stdin 
	                              readWriteComplex.chpl 
	                              readWriteComplex.good 
	                              readWriteComplex.stdin 
	                              readWriteComplexFail1.chpl 
	                              readWriteComplexFail1.good 
	                              readWriteComplexFail1.stdin 
	                              readWriteComplexTuple.chpl 
	                              readWriteComplexTuple.good 
	                              readWriteComplexTuple.stdin 

---------------------------------------------------------------------------

10/20/04 14:22:46 -- shannon

Log message:
	Wrote a traversal routine that identifies all
	symbols of type UnresolvedSymbol.  When an
	unresolved symbol is found an error message
	identifying the symbol is printed.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: findUnresolvedSymbols.cpp 
	                             findUnresolvedSymbols.h 

---------------------------------------------------------------------------

10/21/04 09:51:36 -- shannon

Log message:
	Added a test of read of a user-defined type.

Added files:
	chapel/test/trivial/shannon/: readWriteUserType.chpl 
	                              readWriteUserType.good 
	                              readWriteUserType.stdin 

---------------------------------------------------------------------------

10/22/04 16:29:19 -- jplevyak (a.k.a. n10253)

Log message:
	Test files for the first part of SSCA #2, up to the kernels.
	For your consideration.

Added files:
	chapel/test/Share/: arrayfun-1.chpl assert-1.chpl 
	                    assert-2-assert.chpl builtins-1.chpl 
	                    class-1.chpl class-2.chpl class-3.chpl 
	                    config-1.chpl constant-folding-1.chpl 
	                    constructor-1.chpl count-1.chpl 
	                    destruct-1.chpl destruct-2.chpl 
	                    domain-1.chpl domain-2-rangeerror.chpl 
	                    domain-2.chpl domain-3.chpl domain-4.chpl 
	                    domain-5.chpl domain-6.chpl domain-7.chpl 
	                    error-1.chpl funcall-1.chpl funcall-2.chpl 
	                    funcall-3.chpl intent-1.chpl intent-2.chpl 
	                    intent-3.chpl intent-4.chpl 
	                    intent-5-error.chpl intent-6-error.chpl 
	                    intent-7-error.chpl intent-8-error.chpl 
	                    let-1.chpl main-1.chpl module-1.chpl 
	                    module-2-error.chpl namedargs-1.chpl 
	                    noinitdecl-1.chpl noinitdecl-2.chpl 
	                    noinitdecl-3-error.chpl 
	                    noinitdecl-4-error.chpl print-1.chpl 
	                    record-1.chpl record-2.chpl record-3.chpl 
	                    scan-1.chpl seq-1.chpl seq-2.chpl seq-3.chpl 
	                    strdomain-1.chpl string-1.chpl 
	                    typeselect-1.chpl typevar-1.chpl 
	                    typevar-2.chpl union-1.chpl union-2.chpl 
	                    union-3.chpl with-1.chpl with-2.chpl 

---------------------------------------------------------------------------

10/25/04 16:41:41 -- bradc

Log message:
	Checking in some code I penciled in Friday, but didn't get
	to check in due to networks going down.
	
	Revamped some symboltable stuff to make the type/level
	components of a SymScope to be more appropriate and rely
	less on the integer values of the scope types.  Added a
	scope after all user code is parsed so that if new
	symbols are added after parsing they will be put into this
	scope by default.  We may want to put in an assertion that
	this scope is empty at codegen time, but I haven't done
	so yet.

Modified files:
	chapel/compiler/AST/: TODO expr.cpp stmt.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/passes/: filesToAST.cpp 

---------------------------------------------------------------------------

10/27/04 15:38:17 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for complex numbers in vparser and low level CG.
	Fixed bug in "return" handling in vparser.
	Added test cases for dispatch covering basic overloading.
	  I am going to get them working with the test front-end then
	  translate them to Chapel when we are ready for that.

Modified files:
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/vparser/: parse_ast.cpp v.g 
Added files:
	chapel/test/dispatch/jplevyak/: COMPOPTS Makefile.cg NOVGRBIN 
	                                dispatch-1.good dispatch-1.v 
	                                dispatch-2.good dispatch-2.v 
	                                dispatch-3.good dispatch-3.v 
	                                dispatch-4.good dispatch-4.v 
	                                dispatch-5.good dispatch-5.v 
	                                dispatch-6.good dispatch-6.v 

---------------------------------------------------------------------------

10/29/04 15:47:40 -- jplevyak (a.k.a. n10253)

Log message:
	Added basic support for intents and default arguments to the vparser.
	Removed symbol table from the parser -- do all symbol table resolution
	 at the AST level.
	Added support for "let" and multiple "var" declarations at the same time.

Modified files:
	chapel/compiler/analysis/: TODO pattern.cpp 
	chapel/compiler/include/: ast_kinds.h parse_ast.h sym.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/vparser/: grammar.cpp parse_ast.cpp v.g 
	chapel/test/flowanalysis/jplevyak/: assign1.v assign2.v cs4.v 
	                                    cs5.v cs6.v 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 

---------------------------------------------------------------------------

11/01/04 15:44:21 -- shannon

Log message:
	Added functionality to the regression test harness so
	that now the tester can supply a test.execopts or
	test.compopts file to add executable or compile time
	options on a per-test basis.
	
	Implemented code generation of configuration variables
	of integer type.  Added a bunch of tests that use the
	new test.execopts functionality.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: main.c 
	chapel/test/: sub_test 
Added files:
	chapel/test/execflags/shannon/configs/: EXECOPTS configVar.chpl 
	                                        configVar.execopts 
	                                        configVar.good 
	                                        configVarDash.chpl 
	                                        configVarDash.execopts 
	                                        configVarDash.good 
	                                        configVarDashS.chpl 
	                                        configVarDashS.execopts 
	                                        configVarDashS.good 
	                                        configVarDashSVarEquals.chpl 
	                                        configVarDashSVarEquals.execopts 
	                                        configVarDashSVarEquals.good 
	                                        configVarWithSpaces.chpl 
	                                        configVarWithSpaces.execopts 
	                                        configVarWithSpaces.good 
	                                        configVarY.chpl 
	                                        configVarY.execopts 
	                                        configVarY.good 

---------------------------------------------------------------------------

11/04/04 17:07:08 -- jplevyak (a.k.a. n10253)

Log message:
	Reorganize files to better compartmentalize the test parser since
	no parts of the system should depend on it other than a call in the
	driver.

Modified files:
	chapel/compiler/analysis/: Makefile.share inline.cpp prim.cpp 
	chapel/compiler/include/: builtin.h driver.h if1.h parse.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/compiler/vparser/: Makefile.share grammar.cpp parse.cpp 
	                          parse_ast.cpp v.g 
Added files:
	chapel/compiler/analysis/: builtin.cpp 
	chapel/compiler/vparser/: ast_kinds.h parse_ast.h 
	                          parse_structs.h scope.h 
Removed files:
	chapel/compiler/include/: ast_kinds.h parse_ast.h 
	                          parse_structs.h scope.h 
	chapel/compiler/vparser/: builtin.cpp 

---------------------------------------------------------------------------

11/05/04 15:09:00 -- jplevyak (a.k.a. n10253)

Log message:
	More work on adding to the test parser bits of Chapel.
	In this case "subtype" and reworked how 'var' was handled.
	Also made = a statement instead of an expression.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: sym.h 
	chapel/compiler/vparser/: ast_kinds.h parse_ast.cpp parse_ast.h 
	                          prelude.v v.g 
	chapel/test/flowanalysis/jplevyak/: sample.good sample.v var.v 
	chapel/test/lowlevelcg/jplevyak/: sample.v 
	chapel/test/parsing/jplevyak/: literal.good tuples.good 

---------------------------------------------------------------------------

11/05/04 19:14:07 -- bradc

Log message:
	Checking in some entry point work that I started on this
	week, in part motivated by the "implement main()" item in
	our SSCA2 task list, and in part because it seems wise to
	get entry points working properly sooner rather than later.
	We may still change our strategy on this, but since I'll
	be at SC next week, I wanted to get this off my plate and
	mind for now.
	
	The current implementation looks for a module-level function
	called main() and uses that as the entry point for the
	program if it exists (renaming it to _chpl_main() when
	generating C code, and inserting a call to the module's
	initialization routine at the top.  If there is no
	module-level main(), it currently runs the module's
	initialization routine which contains all module-level code
	(thus, our current tests with no main() will still work).
	If it finds two module-level main() functions, or two
	modules but no main function, then it complains.  Added
	tests to guard this behavior for now.  All of this may be
	revisited depending on what we decide to do going forward.
	
	This change involved a number of changes:
	
	* changed the "Module" AST node that I checked in the other
	  week into a "ModuleSymbol" subclass of Symbol since
	  modules need to be treated as symbols in naming constructs
	  (the original implementation was using Modules as a loose
	  concept corresponding to files -- the new implementation
	  is meant to be more related to modules in the true Chapel
	  sense).  All passes now take a ModuleSymbol list as the
	  argument to their run() routine...
	
	* moved the codegen output files (codefile, intheadfile,
	  extheadfile) from instance variables of a module to global
	  variables, since they only have a limited useful lifespan
	  (only one module is codegen-ed at a time), and didn't seem
	  to truly be part of a module (might make sense to make
	  them part of some other structure/class, though...)
	
	* added a static class member to FnSymbol that keeps track
	  of the "main" function.
	
	* changed SCOPE_FILE to SCOPE_MODULE since files are no
	  longer a semantically meaningful concept in Chapel -- all
	  files are treated as modules by default.
	
	* added a USR_FATAL call to match INT_FATAL because I couldn't
	  find an appropriate error message generator.  We need to
	  unify these moving forward (fail, str_error, USR_FATAL, etc.)
	
	* refactored the parsing code to return modules rather than
	  statement lists.
	
	* added a pass RenameCSymbols that is intended to rename
	  symbols that have special meaning in C (like main).  This
	  should also be used eventually to rename Chapel's built-in
	  types (like integer) to their Chapel runtime representation
	  (like _integer64).
	
	* renamed a module's init function from __init to
	  __init_<modulename> in anticipation of supporting multiple
	  modules.  This required updating the output of all
	  flowanalysis/ and protoast/ tests.
	
	* added a "halt" command to the gdb environment set up by the
	  --gdb flag -- I was finding that in certain cases of
	  infinite recursion the "quit" command wouldn't work.  The
	  "halt" command is more heavy-handed -- will get you out
	  no matter what, but won't clean up after itself (i.e.,
	  you might have a /tmp directory to clean up by hand).

Modified files:
	chapel/compiler/AST/: Makefile.share loc.cpp stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h files.h loc.h misc.h 
	                          parser.h symbol.h symscope.h symtab.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	                       runpasses.cpp runpasses.h 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: Makefile.share codegen.cpp codegen.h 
	                         filesToAST.cpp filesToAST.h pass.cpp 
	                         pass.h printProgram.cpp printProgram.h 
	                         printSymtab.cpp printSymtab.h 
	                         runAnalysis.cpp runAnalysis.h 
	chapel/compiler/traversals/: checkBackLinks.cpp checkBackLinks.h 
	                             checkIDs.cpp checkIDs.h 
	                             traversal.cpp traversal.h 
	                             verifyASTType.cpp 
	chapel/compiler/util/: files.cpp misc.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: main.c 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	chapel/compiler/passes/: renameCSymbols.cpp renameCSymbols.h 
	chapel/test/compflags/bradc/onebadfile/: LASTCOMPOPTS 
	                                         badfile.chpl 
	                                         badfile.good 
	chapel/test/compflags/bradc/twomodulesnomain/: COMPOPTS 
	                                               module1.chpl 
	                                               module1.good 
	chapel/test/compflags/bradc/twomodulesnomain/module2/: NOTEST 
	                                                       module2.chpl 
	chapel/test/trivial/bradc/entrypoint/: main.chpl main.good 
	                                       nomain.chpl nomain.good 
	                                       twomains.chpl 
	                                       twomains.good 
Removed files:
	chapel/compiler/AST/: module.cpp 
	chapel/compiler/include/: module.h 

---------------------------------------------------------------------------

11/09/04 14:51:43 -- jplevyak (a.k.a. n10253)

Log message:
	Front-end specific transfer functions are now a Struct so that
	they can have additional annotations (e.g. "has sideeffects" vs not).
	Low level CG a bit more robust when dealing with sum-types.
	Fixed a bug in cloning which was causing some excess data structure
	  cloning.
	'void' is now not a subtype of 'any'; added a new type 'all' which
	  includes 'void'.  'all' is not accessible to the user.
	Added template iterator to iterate through all low level variables
	  in a program.
	Sum types which include "void" after analysis are set to "void"
	  This makes sense because things which contain 'void' cannot be
	  used for any purpose and are essentially dead.
	Low Level intermediate for build function for 'if' now has option
	  for if expression vs if statement.
	Added basic level of dead code tagging based on the interprocedural
	  dataflow graph.  This could be reflected to the higher level.
	Reoganized the V grammar a bit to make it more like Chapel.

Modified files:
	chapel/compiler/analysis/: Makefile.share analysis.cpp cg.cpp 
	                           clone.cpp fa.cpp if1.cpp 
	                           prim_data.dat 
	chapel/compiler/include/: fa.h if1.h pnode.h prim.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/vparser/: ast_kinds.h parse_ast.cpp v.g 
	chapel/test/flowanalysis/jplevyak/: assign2.v cs3.good cs4.good 
	                                    sample.good sample.v 
	chapel/test/flowanalysis/jplevyak/constants/: const.v 
	chapel/test/flowanalysis/jplevyak/loop/: rec.v 
	chapel/test/lowlevelcg/jplevyak/: sample.v 
	chapel/test/parsing/jplevyak/: for1.good for2.good module.good 
Added files:
	chapel/compiler/analysis/: dead.cpp 
	chapel/compiler/include/: dead.h 

---------------------------------------------------------------------------

11/09/04 15:50:36 -- jplevyak (a.k.a. n10253)

Log message:
	Low level code generator now outputs code in SSU form instead of
	  dropping the PHI and PHY functions.  This is a better test of the
	  intermediate form.

Modified files:
	chapel/compiler/analysis/: cg.cpp 
	chapel/compiler/include/: pnode.h 
Added files:
	chapel/test/lowlevelcg/jplevyak/: ssu.good ssu.v 

---------------------------------------------------------------------------

11/15/04 10:27:19 -- bradc

Log message:
	Small change to --gdb flag test to make it work with gdb 6.x
	which seems to be becoming the default on Cray systems.
	Basically, had to grep out a line that it printed indicating
	what thread_db  library it was using...

Modified files:
	chapel/test/compflags/bradc/gdbddash/: declint.good 
Added files:
	chapel/test/compflags/bradc/gdbddash/: PREDIFF 

---------------------------------------------------------------------------

11/15/04 11:40:02 -- deitz

Log message:
	Fixed the precedence of tokens in the parser so as to be the same as
	in the Chapel specification and updated several test outputs.  Made
	unary plus and minus higher in precedence than times and divide and
	made the bitwise operators higher in precedence than the comparison
	operators.  Added ':' and bitwise shift left and right.
	
	Changed use of ':' in domains to 'in' in keeping with the language and
	updated a couple of test programs.  So [i: D] is now written [i in D].
	
	Improved the parser in general.  Lowered the shift/reduce errors from
	358 to 185.  Lowered the reduce/reduce errors from 4 to 2.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl 
	chapel/test/trivial/shannon/: compSampler.good 

---------------------------------------------------------------------------

11/15/04 17:11:57 -- deitz

Log message:
	Renamed all tokens in the parser so that they begin with a "T" which
	stands for either token, terminal, or terminal token.  This change
	will let us avoid name space collisions later and makes it easier to
	read and work with the parser.
	
	Added all single-character tokens to the lexer.  We should eventually
	remove the catch-all "." case but I left this in so that a bug will
	regress (see below).
	
	Added the keyword "call" to the language.  This is optional and may
	precede a function call at the statement level.
	
	Refactored how "by" is handled in the parser.  It is now not
	associated with a range.  A range is an expression and it is already
	associated with an expression.
	
	With this checkin, the number of shift-reduce errors has fallen to 123
	from 185.
	
	This checkin seems to uncover a strange bug in the test case
	classes/bradc/trivialclass and hopefully this will regress.  When I
	run this bug with the command /users/deitz/chapel/compiler/chpl (as is
	done by the test system when I call it), there is the fatal error
	"program does not type."  When I run this test just using the command
	chpl (shorter argv[0]), it works.  When I removed the "." case from
	the file chapel.lex (see file), I got the error in the latter case,
	but not the former.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 

---------------------------------------------------------------------------

11/15/04 18:22:15 -- bradc

Log message:
	A bunch of changes related to copyright messages and
	notices, in anticipation of (a) sending a tarball to
	Roxana as soon as I get clearance and (b) moving the
	CVS tree to UW.
	
	* Added a top-level COPYRIGHT and LICENSE file, replacing
	  the file that was previously in the compiler/ directory,
	  and making Cray the copyright owner.
	
	* Made the build conver the LICENSE file into #include-able
	  C++ code rather than storing it in that format in CVS
	
	* Removed copyright messages from all code apart from
	  vec/list/arg, which retain John's copyright message (minus
	  the all rights reserved part) and the beautify code which
	  retains the ZPL copyright message.
	
	* In .cpp files, also removed the Mode comment, since emacs
	  can be set up to automatically go into this mode.  Let me
	  know if anyone needs this .emacs text, or if I've made too
	  strong of an assumption in pulling this out.  I resisted
	  pulling them out in .h files that contain them, since one
	  might want to make emacs load .h files in C mode (I use
	  C++ for all .h files as well...).
	
	* Added some top level make targets: tarball, which builds
	  a tarball of the CVS tree, pulling out the CVS directories,
	  and adding the COPYRIGHT line to the tops of all .cpp, .c,
	  .h, .y, .l, .lex, .g, and Make* files as a comment.  Also
	  release, which builds a similar tarball, but blows away
	  certain directories and files (and should probably do more...
	  this is a placeholder to be revisited when we actually
	  start doing releases).  Added a prepend script to the util/
	  directory to help with this.
	
	* Switched order of actions in sub_test so that a PREDIFF
	  script could construct a test's .good file.
	
	* Changed the test of --copyright to create the .good output
	  from the LICENSE file to make sure the two messages match.
	
	* Added some new .cvsignore entries to the test directory to
	  keep cvs -nq update clean

Modified files:
	./: Makefile 
	chapel/compiler/adt/: list.cpp map.cpp vec.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp builtin.cpp 
	                           cdb.cpp cdb.h cfg.cpp cg.cpp 
	                           clone.cpp dead.cpp dom.cpp fa.cpp 
	                           fa_extras.cpp fun.cpp if1.cpp 
	                           inline.cpp loop.cpp pattern.cpp 
	                           pdb.cpp pnode.cpp prim.cpp 
	                           prim_data.dat prim_data_incs.h 
	                           region.cpp region.h ssu.cpp ssu.h 
	                           ssu_extra.cpp sym.cpp var.cpp 
	chapel/compiler/analysis/make_prims/: make_prims.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: analysis.h ast.h builtin.h 
	                          builtin_symbols.h callbacks.h cg.h 
	                          clone.h code.h dead.h dom.h driver.h 
	                          dump.h fa.h fun.h geysa.h grammar.h 
	                          graph.h if1.h inline.h list.h log.h 
	                          loop.h map.h misc.h num.h parse.h 
	                          pattern.h pdb.h pnode.h prim.h sym.h 
	                          var.h vec.h 
	chapel/compiler/main/: Makefile arg.cpp arg.h driver.cpp 
	                       version.cpp 
	chapel/compiler/test/: list.cpp map.cpp misc.cpp vec.cpp 
	chapel/compiler/util/: log.cpp misc.cpp 
	chapel/compiler/vparser/: ast_cf.cpp ast_kinds.h grammar.cpp 
	                          parse.cpp parse_ast.cpp parse_ast.h 
	                          parse_structs.h scope.cpp scope.h v.g 
	chapel/test/: .cvsignore sub_test 
Added files:
	./: COPYRIGHT LICENSE 
	chapel/compiler/main/: .cvsignore 
	chapel/make/: Makefile.release 
	chapel/test/compflags/bradc/copyright/: .cvsignore PREDIFF 
	chapel/test/dispatch/jplevyak/: .cvsignore 
	chapel/util/: prepend 
Removed files:
	chapel/compiler/: COPYRIGHT 
	chapel/test/compflags/bradc/copyright/: declint.good 

---------------------------------------------------------------------------

11/16/04 13:36:07 -- jplevyak (a.k.a. n10253)

Log message:
	null is now a primitive type instead of a gobal value.
	null is now nolonger of type void since things of type
	"void" cannot be used as arguments to functions.
	Fixed a bug which was causing instability that Steve saw:
	  I was accidentially updating lists while I was traversing them.

Modified files:
	chapel/compiler/analysis/: TODO analysis.cpp ast.cpp fa.cpp 
	chapel/compiler/vparser/: prelude.v 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  shift_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

11/16/04 16:12:01 -- deitz

Log message:
	Removed operators &&, ||, !, and % from the compiler, replacing them
	with "and", "or", "not", and "mod" as per the language spec.  Note mod
	is not in the language spec.  Updated some test cases to reflect this
	change.
	
	Eliminated the last two reduce-reduce errors in the parser.  These had
	to do with problems parsing index variables in domains.  They are now
	parsed as expressions and it is made sure that they are just tuples or
	variables.  For example, [i,j in D] and [(i,j) in D] are legal, but
	[i+j in D] is not.

Modified files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/Samples/ex1-astlog/: astlog1.good 
	chapel/test/Samples/ex2-notest/: illegal.chpl 
	chapel/test/flowanalysis/newast/: bitwise_ops.chpl 
	                                  bitwise_ops.good 
	                                  compSampler.chpl 
	                                  conditional.chpl 
	                                  conditional.good 
	                                  logical_and.chpl 
	                                  logical_and.good 
	                                  logical_not.chpl 
	                                  logical_not.good mod.chpl 
	                                  mod.good 
	chapel/test/lowlevelcg/jplevyak/: bitwise_ops.chpl 
	                                  bitwise_ops.good 
	chapel/test/trivial/bradc/: conditional.chpl conditional.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
	chapel/test/trivial/shannon/: bitwise_ops.chpl bitwise_ops.good 
	                              compSampler.chpl compSampler.good 
	                              logical_and.chpl logical_and.good 
	                              logical_not.chpl logical_not.good 
	                              mod.chpl mod.good 
	                              readWriteBool.chpl 

---------------------------------------------------------------------------

11/16/04 16:48:52 -- deitz

Log message:
	Removed support for the bitwise shift operators << and >> from the
	compiler and updated or removed several test cases.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl mvm-seq.good 
Removed files:
	chapel/test/flowanalysis/newast/: shift_ops.chpl shift_ops.good 
	chapel/test/trivial/shannon/: shift_ops.chpl shift_ops.good 

---------------------------------------------------------------------------

11/17/04 12:29:11 -- deitz

Log message:
	Changed the parser support for reductions so it more closely resembles
	the syntax in the specification.  It remains slightly different but
	can easily be changed since there is no implementation of reductions
	yet.
	
	Continued to improve parsing.  Specifically, ranges that have
	expressions in them are now parsed correctly.  The number of
	shift-reduce errors is currently 30, down from 92.
	
	Added a small test case to see if identifiers only one character in
	length work.  They do.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/trivial/bradc/protoast/: badred.chpl badred.good 
	                                     mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
Added files:
	chapel/test/trivial/deitz/: test_short_identifiers.chpl 
	                            test_short_identifiers.good 

---------------------------------------------------------------------------

11/17/04 14:43:15 -- jplevyak (a.k.a. n10253)

Log message:
	Work to separate the type, includes and specialization hierarchies.
	Dispatch now uses the specialization hierarchy.  There are now
	separate specialization and type constraints for arguments a la Cecil.
	Initial work on building true LUB and GLB types.  Fixed a bug in low
	level code gen which was trying to build names for types which where not
	directly used (and currently unsupported) like float128.

Modified files:
	chapel/compiler/analysis/: TODO analysis.cpp ast.cpp cg.cpp 
	                           clone.cpp fa.cpp if1.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: analysis.h callbacks.h sym.h 
	chapel/compiler/vparser/: ast_kinds.h parse_ast.cpp parse_ast.h 
	                          v.g 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               tuples.good 

---------------------------------------------------------------------------

11/17/04 15:03:33 -- shannon

Log message:
	Refactored much of the code implemented previously for
	integer configuration variable code generation.
	
	All of the code but one line was moved out of main into
	separate files.  Main calls the parseArgs function (in arg.c)
	which parses the command-line argument and stores it in
	a hash table.  The hash table is made up of configVar structs
	with the variable name and value stored as strings.
	
	The setInCommandLine function (in config.c) now simply checks
	the table to determine if the variable has been set.

Modified files:
	chapel/runtime/include/: chplio.h stdchpl.h 
	chapel/runtime/src/: Makefile main.c 
Added files:
	chapel/runtime/include/: arg.h config.h 
	chapel/runtime/src/: arg.c config.c 

---------------------------------------------------------------------------

11/18/04 11:06:26 -- deitz

Log message:
	Removed the shift-reduce error associated with the else-statement of
	an if-statement.  Added the optional keyword "then" which can be used
	between the expression and the then-statement in an "if" statement.
	The AST is unchanged.  Added two test cases for using if, then, and
	else.
	
	Removed parsing support for functions with no known type as given by
	the syntax "function foo(): { }" in which a type did not follow the
	colon.  This removes two problematic shift-reduce errors.
	
	Added two scripts to the test directory, cat_tests and cat_goods,
	which print to standard out all of the test programs and their good
	outputs.  On each line, the file name and line number are displayed.
	These scripts allow for easy grepping of features in the test
	directory.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	                         internal_prelude.chpl 
Added files:
	chapel/test/: cat_goods cat_tests 
	chapel/test/trivial/deitz/: test_if_else.chpl test_if_else.good 
	                            test_if_then_else.chpl 
	                            test_if_then_else.good 

---------------------------------------------------------------------------

11/19/04 10:34:06 -- bradc

Log message:
	Updated LICENSE as requested by Cray legal.  The license is
	currently worded quite strictly.  The assumption is that when
	we're ready to drop an open source release, the license will
	change accordingly (so this license is merely to prevent
	copies of the code that escape from being used improperly --
	not that we expect copies to escape).

Modified files:
	./: LICENSE 

---------------------------------------------------------------------------

11/19/04 10:43:08 -- jplevyak (a.k.a. n10253)

Log message:
	Annother GC suppression

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

11/19/04 10:52:23 -- deitz

Log message:
	Updated parsing of domains so that they can be initialized by
	sequences but not by constructs enclosed in square brackets.  So
	
	  var D : domain(1) = (1..n);
	
	is legal but
	
	  var D : domain(1) = [1..n];
	
	is not.  This is more inline with the current thinking of Chapel.
	
	Added a stopgap measure to the parser function that creates variables
	and constants.  If the variable or constant has a domain type, the
	initializer expression is converted into a domain.  This is not the
	place to handle this, but this meshes with how domains and sequences
	are currently handled.
	
	This checking brings the total number of shift/reduce errors in the
	parser down to zero.

Modified files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/test/flowanalysis/newast/: declprintdom.chpl 
	                                  declprintdom.good 
	                                  declprintdom2.chpl 
	                                  declprintdom2.good domarr.chpl 
	                                  enumarray.good 
	                                  formatoutput.good noop.chpl 
	                                  protoast_test.good 
	chapel/test/trivial/bradc/: declprintdom.chpl declprintdom2.chpl 
	                            noop.chpl 
	chapel/test/trivial/bradc/domarr/: domarr.chpl 
	chapel/test/trivial/bradc/protoast/: badred.chpl 
	                                     mg-seq-concrete.chpl 
	                                     mg-seq-concrete.good 
	                                     mg-seq.chpl mg-seq.good 
	                                     mvm-seq.chpl test.good 

---------------------------------------------------------------------------

11/19/04 13:05:37 -- shannon

Log message:
	A few minor changes related to my recently-committed
	config var code.
	
	* Changed how I handle the case where extra characters
	  are tacked to the value given to a config var on
	  the command line, e.g. "-sx=123garbage".  This is
	  now an error.
	
	* Added a test case where I force a hash collision of
	  the config var's names.  I wrote a test to determine
	  what names would collide, and then used these variable
	  names in the chapel test.
	
	* Made the error messages printed for incorrectly formatted
	  config vars more specialized.

Modified files:
	chapel/runtime/src/: config.c 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarDashSVarEquals.good 
Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarHashCollision.chpl 
	                                        configVarHashCollision.execopts 
	                                        configVarHashCollision.good 

---------------------------------------------------------------------------

11/19/04 15:22:26 -- deitz

Log message:
	Removed the ReduceSymbol class.  Reductions are now no longer special
	cased in the parser or the AST.  This simplifies the construction of
	classes since they are no longer special-cased for reductions.
	
	Moved the test trivial/bradc/protoast/badred to a future directory so
	that it is not checked.  This test used to report a syntax error when
	the parser encountered a reduction by a class that was not a
	reduction.  This should eventually be taken care of in type checking.

Modified files:
	chapel/compiler/AST/: symbol.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symbol.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/flowanalysis/newast/: domarr.good noop.good 
Added files:
	chapel/test/trivial/bradc/protoast/future/: NOTEST badred.chpl 
	                                            badred.good 
Removed files:
	chapel/test/trivial/bradc/protoast/: badred.chpl badred.good 

---------------------------------------------------------------------------

11/19/04 15:47:57 -- bradc

Log message:
	Fixed C/C++ compilation flags so that gcc versions prior to
	3.4 don't use the -Werror flag.  Also turned -Werror back on
	for the runtime src directory.

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/make/: Makefile.gnu 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

11/20/04 13:14:14 -- jplevyak (a.k.a. n10253)

Log message:
	Functions and symbols are now true types in their own right, further unifying
	  flow analysis and type inference.
	Further separated out "must_implement" (type checking) and "must_specialize"
	  dispatch constraints.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp if1.cpp 
	chapel/compiler/backend/: dump.cpp 
	chapel/compiler/include/: sym.h 
	chapel/compiler/vparser/: parse_ast.cpp v.g 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               tuples.good 

---------------------------------------------------------------------------

11/22/04 07:30:54 -- jplevyak (a.k.a. n10253)

Log message:
	Seperated out "must_implement" (type checking), "must_specialize" (dispatch)
	and true type (concrete type) in the low level code translators and in dispatch.
	Updated logging and type warning code to differentiate them, and updated
	test cases.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp cg.cpp clone.cpp 
	                           fa.cpp fa_extras.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good classvar.good 
	                                    cs1.good cs2.good cs3.good 
	                                    cs4.good cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch3.good 
	                                    memberfun.good 
	                                    memberfun2.good sample.good 
	                                    structtype.good 

---------------------------------------------------------------------------

11/22/04 11:46:57 -- bradc

Log message:
	Removed three hacks that assumed variables of unknown types were
	integers which stemmed from the days before the analysis pass was
	running.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 

---------------------------------------------------------------------------

11/22/04 12:18:04 -- deitz

Log message:
	Removed ClassSymbol.  Classes are now TypeSymbols.  This simplifies
	the information associated with the symbol table.  Most of the
	information associated with class types is now in the ClassType.
	
	Note that classes are TypeSymbols and objects are VarSymbols; the type
	of each is a ClassType.
	
	Removed special parsing of classes from the compiler.

Modified files:
	chapel/compiler/AST/: expr.cpp nils.cpp symbol.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symbol.h symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 

---------------------------------------------------------------------------

11/22/04 12:38:32 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed test cases (Steve, did you forget to checkin the test changes?)
	Fixed "config" so that it doesn't propagate constants, and assumes
	that the variable can take on any legal value, and added test
	case to that effect.
	Removed unnecessary variables in Sym.

Modified files:
	chapel/compiler/analysis/: analysis.cpp dead.cpp fa.cpp 
	                           pattern.cpp 
	chapel/compiler/backend/: graph.cpp 
	chapel/compiler/include/: sym.h 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/newast/: domarr.good noop.good 
Added files:
	chapel/test/flowanalysis/jplevyak/config/: CATFILES CLEANFILES 
	                                           COMPOPTS NOEXEC 
	                                           PREDIFF 
	                                           configVar.chpl 
	                                           configVar.good 

---------------------------------------------------------------------------

11/22/04 16:39:02 -- jplevyak (a.k.a. n10253)

Log message:
	Move the code which creates the type hierarchy into analysis/ast.cpp (the
	AST support code).  Move common function symbol initialization into
	if1_closure (closure creation).

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp fun.cpp 
	                           if1.cpp 
	chapel/compiler/include/: ast.h 
	chapel/compiler/vparser/: ast_cf.cpp parse_ast.cpp 

---------------------------------------------------------------------------

11/22/04 16:49:45 -- deitz

Log message:
	Added a couple of test cases that create basic classes.  One of these
	test cases tries to put executable code in the class definition.
	Added parser support to identify this as a syntax error.

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/classes/deitz/: test_badclass1.chpl 
	                            test_badclass1.good test_class1.chpl 
	                            test_class1.good 

---------------------------------------------------------------------------

11/22/04 17:54:32 -- bradc

Log message:
	Added -l and -L flags to the compiler which are fed to the
	back-end C compiler, allowing additional libraries to be
	linked into the generated C code.  For example, to run the
	generated executable using efence, one could do:
	
		chpl myfile.chpl -lefence
	
	(though on the Cray systems, you would also have to use
	the -L flag and LD_LIBRARY_PATH envvar to get efence to
	work properly...  Hopefully this module will be touched
	up to fix this).
	
	This replaces the previous use of -l which was to specify
	logs.  Switched this flag to -d (think of them as "debugging
	logs"), and removed the old -d flag (which nobody was using
	anyway... and wouldn't you really prefer a log to debug
	anyway?  :).  And of course the longer form --log still
	works (and I changed the flowanalysis tests to use this
	form in case someone reclaims -d later...).
	
	Touched up the arg.cpp file so that if no long-form of a
	flag is supplied (-l and -L currently have no long form),
	the printout is cleaner.

Modified files:
	chapel/compiler/include/: files.h geysa.h 
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/compiler/util/: files.cpp misc.cpp 
	chapel/runtime/etc/: Makefile.include 
	chapel/test/Samples/ex1-astlog/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/constants/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/loop/: COMPOPTS 
	chapel/test/flowanalysis/newast/: COMPOPTS 

---------------------------------------------------------------------------

11/22/04 17:59:23 -- bradc

Log message:
	Oops, missed this one because I hadn't updated -d in awhile.

Modified files:
	chapel/test/flowanalysis/jplevyak/config/: COMPOPTS 

---------------------------------------------------------------------------

11/23/04 12:44:09 -- jplevyak (a.k.a. n10253)

Log message:
	Print out "must_specialize" and "must_implement" in the "i" log.
	Fix the collapseable nested structures in the HTML dump (-t) by
	fixing up the paths to point to compiler/etc/www.

Modified files:
	chapel/compiler/analysis/: if1.cpp pattern.cpp 
	chapel/compiler/backend/: dump.cpp 

---------------------------------------------------------------------------

11/23/04 16:51:07 -- bradc

Log message:
	Checking in code before the holidays: found with Shannon
	that complex literals don't pretty-print properly, so
	checked in a fix for that.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

11/23/04 20:25:25 -- jplevyak (a.k.a. n10253)

Log message:
	Some cleanup of naming and the test parser.

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/compiler/vparser/: parse_ast.cpp v.g 

---------------------------------------------------------------------------

11/24/04 08:37:40 -- shannon

Log message:
	Woops.  This didn't make it into yesterday's preholiday
	commit.  This is a fix for pretty-printing complex
	literals.

Modified files:
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

11/24/04 10:27:10 -- deitz

Log message:
	Added initial support for methods.  These don't work yet but are stored.
	
	The main addition in this checkin is a new pass MethodsToFunctions
	that should eventually change method calls to function calls, or
	something like that.
	
	Added a couple of tests in test/classes/deitz/future that will not yet
	be run but show the initial code that I am trying to get to work.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 
Added files:
	chapel/compiler/traversals/: methodsToFunctions.cpp 
	                             methodsToFunctions.h 
	chapel/test/classes/deitz/future/: NOTEST test_method1.chpl 
	                                   test_method2.chpl 

---------------------------------------------------------------------------

11/24/04 10:43:04 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed issue whereby "float" declared funcions were abstract instead
	of defined to be "float64" float(8).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Added files:
	chapel/test/dispatch/jplevyak/: dispatch-8.good dispatch-8.v 

---------------------------------------------------------------------------

11/24/04 13:32:11 -- deitz

Log message:
	Changed parsing of enum types so that they are constructed with commas
	rather than bars.  Added a couple of new tests to test enums.  The one
	in the future directory currently doesn't typecheck.
	
	Made a superficial change to how integer literals are parsed just so
	they are handled in the same way as the other literals.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/flowanalysis/newast/: enum.chpl enumarray.chpl 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
	chapel/test/trivial/bradc/protoast/codegen/: enum.chpl 
	chapel/test/trivial/shannon/: readWriteEnum.chpl 
Added files:
	chapel/test/types/enum/deitz/: test_enum1.chpl test_enum1.good 
	chapel/test/types/enum/deitz/future/: NOTEST test_enum2.chpl 

---------------------------------------------------------------------------

11/25/04 09:07:38 -- jplevyak (a.k.a. n10253)

Log message:
	Enum now inherit from "eum_element" which is an alias for int64.
	"size" is now an alias to int64 for Chapel (I don't know if we are
	going to have a "sizeof" for structures, but if we do we should have
	a "size" type).
	unaliasing of types now correctly unaliases 'specializes' and 'includes'.
	For variable assignment, the LHS is not unnecessarily copied.
	Sym::constant is now a documentation string and can be NULL
	  (instead of having "<folded>" or some other indicator of where the
	   constant came from)
	Updated tests for the above changes.
	
	Fix analysis of Steve's test_enum2.chpl.
	
	I did this by extending the builtin = primitive.  In the future
	we should implement operator overloading which would make it possible
	to solve these problems in a perlude.
	
	We need to implement operator overloading anyway, and doing it
	now rather than increasing the number of special cases would save
	time overall.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	                           fa_extras.cpp if1.cpp 
	chapel/compiler/vparser/: ast_cf.cpp parse_ast.cpp parse_ast.h 
	chapel/test/flowanalysis/jplevyak/constants/: 
	                                              constant_folding.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  equality_ops.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good var.good 
	                                  var2.good whileLoop.good 

---------------------------------------------------------------------------

11/29/04 10:33:29 -- deitz

Log message:
	Added the ability to assign values to enumerated type symbols.  The
	values by default start at zero:
	
		enum adjectives = good, bad, soso;
	
	The values are good is 0, bad is 1, and soso is 2.  These values can
	now be overridden as in:
	
		enum adjectives = good, bad = 2, soso;
	
	In this case, good is 0, bad is 2, and soso is 3.
	
	Added a test case to make sure this works.  Also, moved
	test_enum2.chpl out of the no-testing future directory.
	
	Note that the syntax is slightly different than in the spec in which
	the initial equal does not belong but the symbols should be wrapped in
	curly brackets.  This should be changed.

Modified files:
	chapel/compiler/AST/: symbol.cpp symtab.cpp type.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/types/enum/deitz/: .cvsignore test_enum2.chpl 
	                               test_enum2.good test_enum3.chpl 
	                               test_enum3.good 
Removed files:
	chapel/test/types/enum/deitz/future/: test_enum2.chpl 

---------------------------------------------------------------------------

11/29/04 12:56:53 -- deitz

Log message:
	Update the syntax of enumerated types in the Chapel compiler to match
	the Chapel specification.  Also added another test case.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/flowanalysis/newast/: enum.chpl enumarray.chpl 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
	chapel/test/trivial/bradc/protoast/codegen/: enum.chpl 
	chapel/test/trivial/shannon/: readWriteEnum.chpl 
	chapel/test/types/enum/deitz/: test_enum1.chpl test_enum2.chpl 
	                               test_enum3.chpl 
Added files:
	chapel/test/classes/deitz/future/: .cvsignore 
	chapel/test/types/enum/deitz/: test_enum4.chpl test_enum4.good 

---------------------------------------------------------------------------

11/29/04 13:32:10 -- jplevyak (a.k.a. n10253)

Log message:
	new resolve_symbol function which works on MemberAccess ASTs.
	tested with test_class1.chpl

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

11/29/04 13:39:21 -- deitz

Log message:
	Extended the intVal and isComputable functions to work on unary
	expressions so expressions like -1 are now computable.  Made the
	decision that the unary operators -, +, and ! on computable integers
	return computable integers but that the unary operator ~ does not.  Is
	this a good choice?  My reasoning is for cross-compilation and
	portability.
	
	Added a couple more tests on enumerated types in which the enumerator
	value is negative or not computable.  In the latter case, the compiler
	generates a descriptive error message.
	
	Changed the USR_FATAL function so it now prints out a newline at the
	end of the error message.  Removed newline symbols from the calls to
	this function.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp symtab.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/util/: misc.cpp 
Added files:
	chapel/test/types/enum/deitz/: test_enum5.chpl test_enum5.good 
	                               test_enum6.chpl test_enum6.good 

---------------------------------------------------------------------------

11/29/04 13:45:37 -- jplevyak (a.k.a. n10253)

Log message:
	Record creation sets which correspond to cloned types.
	Bug fix in resolve_symbol.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 

---------------------------------------------------------------------------

11/29/04 13:57:29 -- deitz

Log message:
	Made a few changes to MemberAccess::codegen to use John's
	resolve_symbol function.  This makes no substantive changes (yet).

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

11/29/04 14:47:51 -- jplevyak (a.k.a. n10253)

Log message:
	Handle simple member function resolution in resolve_symbol.
	Handles test_method1.chpl

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

11/30/04 08:04:29 -- shannon

Log message:
	Added support for configuration variables of type float64,
	boolean, complex128, and string.  Specifically:
	
	* in stmt.cpp changed the code generation for the
	  setInCommandLine function to append the name of the variable
	  type to the function.
	
	* in chplio.c added a function, _string_to_boolean, which converts
	  a string to boolean type.
	
	* in sub_test fixed a bug with handling a quoted string as an
	  execution option.
	
	* in start_test added a comment to explain the prior addition of
	  test-specific compilation and execution options.
	
	* added a bunch of tests.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/runtime/include/: chplio.h config.h 
	chapel/runtime/src/: chplio.c config.c 
	chapel/test/: start_test sub_test 
	chapel/test/execflags/shannon/configs/: configVar.execopts 
	                                        configVarDashS.execopts 
	                                        configVarDashSVarEquals.execopts 
	                                        configVarDashSVarEquals.good 
	                                        configVarHashCollision.chpl 
	                                        configVarHashCollision.execopts 
	                                        configVarHashCollision.good 
	                                        configVarWithSpaces.execopts 
Added files:
	chapel/test/Share/: configVarComplex.chpl 
	chapel/test/execflags/shannon/configs/: configVarBoolean.chpl 
	                                        configVarBoolean.execopts 
	                                        configVarBoolean.good 
	                                        configVarComplex.chpl 
	                                        configVarComplex.execopts 
	                                        configVarComplex.good 
	                                        configVarFloat.chpl 
	                                        configVarFloat.execopts 
	                                        configVarFloat.good 
	                                        configVarInvalidBoolean.chpl 
	                                        configVarInvalidBoolean.execopts 
	                                        configVarInvalidBoolean.good 
	                                        configVarInvalidComplex.chpl 
	                                        configVarInvalidComplex.execopts 
	                                        configVarInvalidComplex.good 
	                                        configVarInvalidFloat.chpl 
	                                        configVarInvalidFloat.execopts 
	                                        configVarInvalidFloat.good 
	                                        configVarInvalidInteger.chpl 
	                                        configVarInvalidInteger.execopts 
	                                        configVarInvalidInteger.good 
	                                        configVarInvalidName.chpl 
	                                        configVarInvalidName.execopts 
	                                        configVarInvalidName.good 
	                                        configVarString.chpl 
	                                        configVarString.execopts 
	                                        configVarString.good 
Removed files:
	chapel/test/execflags/shannon/configs/: EXECOPTS configVarY.chpl 
	                                        configVarY.execopts 
	                                        configVarY.good 

---------------------------------------------------------------------------

11/30/04 09:08:59 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug in LL code generation of COMPLEX and BOOLEAN literals.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

11/30/04 09:20:00 -- shannon

Log message:
	Moved a test from the Share directory, after John fixed the analysis
	bug, to nightly testing.

Modified files:
	chapel/test/execflags/shannon/configs/: configVarComplex.chpl 
Removed files:
	chapel/test/Share/: configVarComplex.chpl 

---------------------------------------------------------------------------

11/30/04 09:26:49 -- jplevyak (a.k.a. n10253)

Log message:
	SEGV in debug output of some constants

Modified files:
	chapel/compiler/analysis/: fa_extras.cpp 

---------------------------------------------------------------------------

11/30/04 09:45:38 -- jplevyak (a.k.a. n10253)

Log message:
	destructured return values must either be by position (for tuples) or
	by name (for records and classes).

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/test/flowanalysis/jplevyak/: destruct.good destruct.v 
	                                    destruct2.good destruct2.v 

---------------------------------------------------------------------------

11/30/04 10:01:30 -- jplevyak (a.k.a. n10253)

Log message:
	Shift to using Sym::alt_name for named parameters to match
	named destructured return values.

Modified files:
	chapel/compiler/vparser/: v.g 
	chapel/test/flowanalysis/jplevyak/: destruct2.v 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 

---------------------------------------------------------------------------

11/30/04 15:39:55 -- deitz

Log message:
	Added a new pass that runs after analysis and resolves symbols that
	were not resolved before analysis.  These include methods and fields
	in MemberAccess variables.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: resolveSymbols2.cpp 
	                             resolveSymbols2.h 

---------------------------------------------------------------------------

11/30/04 16:35:32 -- jplevyak (a.k.a. n10253)

Log message:
	Fix bug in cloning which could cause an bogus error during low level CG
	  by removing duplicates from the Fun::calls array
	Add :TYPE_KIND to the debugging output of IF1
	Use => for named arguments in the V parser.

Modified files:
	chapel/compiler/analysis/: clone.cpp if1.cpp pattern.cpp 
	chapel/compiler/vparser/: parse_ast.cpp v.g 
	chapel/test/flowanalysis/jplevyak/: cs4.good destruct2.v 
	                                    named.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop2.good 
	chapel/test/parsing/jplevyak/: for1.good for2.good literal.good 
	                               module.good tuples.good 

---------------------------------------------------------------------------

12/01/04 06:41:48 -- shannon

Log message:
	Forgot to change the expected output when I modified this test
	yesterday.

Modified files:
	chapel/test/execflags/shannon/configs/: configVarComplex.good 

---------------------------------------------------------------------------

12/01/04 10:22:33 -- deitz

Log message:
	Added immature support for methods within classes along with an
	illustrative test case.  In addition to other limitations, the methods
	cannot currently access the fields within the class.
	
	Added a new field in the base Symbol class called cname.  This is
	different than name which is the Chapel name.  The cname is the
	mangled name, the name that is code generated.  By default, it is set
	to the same thing as name.  For the main symbol, cname is set to
	_chpl_main whereas name is left as main.  For the class methods, cname
	becomes an underscore followed by the name of the class followed by an
	underscore followed by the name of the method.  A more sophisticated
	name mangling scheme is desirable (eventually).
	
	The bulk of this checkin concerns the transformation from methods to
	functions.  The method definitions are moved outside the class
	definition, immediately after it, the name is mangled as above, and a
	parameter called _this is put in the first position of the formals
	parameter list.  Additionally, all method calls are changed into
	function calls.  The base of the MemberAccess becomes the first
	argument to the actuals parameter list and the member becomes simply
	the function.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/passes/: renameCSymbols.cpp 
	chapel/compiler/traversals/: methodsToFunctions.cpp 
Added files:
	chapel/test/classes/deitz/: test_method1.chpl test_method1.good 
Removed files:
	chapel/test/classes/deitz/future/: test_method1.chpl 

---------------------------------------------------------------------------

12/01/04 14:26:41 -- deitz

Log message:
	Improved support for methods so that they can now refer to fields
	within the class.
	
	With this checkin, method support now only works when analysis is not
	run.  The method test from before has been pushed back into the future
	directory.  This needs to be resolved--we need to determine what
	should be done before analysis and what should be done after analysis.
	This will probably be resolved on the 6th when John is back and in
	Seattle.
	
	Added an virtual procedure for expressions called replace that is used
	to replace children expressions of an expression.  The function takes
	an old expression and a new expression and checks to see if the old
	expression matches any of its children; if so, the child is replaced
	with the new expression.  This is crufty.  A better procedure would
	probably compare deeply using an "equals" function and replace on
	these matches.  This is more versatile.  In addition, how this
	procedure can be used recursively (such as in a traversal) is not
	well-understood.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             methodsToFunctions.cpp 
	                             methodsToFunctions.h 
Added files:
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 
	chapel/test/classes/deitz/future/: test_method1.chpl 
	                                   test_method1.good 
	                                   test_method2.good 
Removed files:
	chapel/test/classes/deitz/: test_method1.chpl test_method1.good 

---------------------------------------------------------------------------

12/02/04 00:12:45 -- bradc

Log message:
	Added support for keyword-based modules.  Before this
	checkin, modules were only associated with files.  Now
	they can also be created using the module keyword.  This
	checkin does not allow modules to be nested.  This means
	that module declarations may not themselves contain
	modules, and that files which contain keyword-based modules
	may not also contain top-level code.  As before, each module
	is codegened to its own set of C files.
	
	Changes include:
	
	* added a ModuleDefStmt to mark the place where the module
	  was defined.  This has little or no purpose, though it
	  may once nested modules are supported (or perhaps not)
	
	* moved the creation of a module's init function from
	  the parser/filesToAST code that it was in before and
	  into a method on ModuleSymbol, called during module
	  creation.
	
	* changed the line number that's used when creating a
	  file's module from 0 to 1 to distinguish it from a
	  keyword-based module defined on line 1.
	
	* added start and finishModuleDef routines into the
	  symboltable to match all the other creation routines.
	  This will need to be cleaned up (and should be much
	  cleaner) when we add support for nested modules.
	  The grodiness is largely due to the need to check
	  for whether there is top-level code in a file before
	  or after a keyword-based module.
	
	* changed modules' init routines so they are all called
	  __init_moduleName.  Previously, the init routines for
	  the prelude modules were special and different.  No
	  longer!  This resulted in lots of cosmetic changes to
	  the output of most flowanalysis tests, so their output
	  was updated.
	
	* added a handful of new tests in a new (modules)
	  test directory to lock in some of this behavior.
	  As we support nested modules and the use of one
	  module by another, these tests and their output
	  should evolve (in particular, since one module
	  cannot use another, there is currently no way
	  other than inspection to determine that the
	  modules are being codegened properly.
	
	And this checkin also includes these somewhat
	vaguely-related changes:
	
	* made codegenList() of empty lists work properly
	
	* added a static method to the ExprStmt class that creates
	  a statement that's a standalone function call because
	  this was a common case in the compiler (in particular
	  for creating calls to module initialization code and
	  the user's entry point)
	
	* took advantage of Steve's new cname field on Symbols
	  to create main() to have a c name of _chpl_main()
	  rather than locating it and converting it in the
	  renameCSymbols pass as we did before.  This made the
	  renameCSymbols pass currently pointless, so it was
	  removed from passlist.h.  However, I expect it might
	  become useful again later if/when we strive to
	  avoid identifiers that match C keywords, so I didn't
	  completely remove the file.
	
	* also took advantage of Steve's new field by having
	  builtin types declare their c name.  This removed
	  a bunch of special-casing that existed in the codegen
	  routine for types.
	
	* put a check in to complain about duplicate symbols,
	  but then took it out because it caused the protoast
	  tests to fail since the indices declared by [i in D]
	  expressions aren't put into a new scope yet.  Started
	  to make this change, but decided this checkin was
	  big enough as-is.  Put a test in that checks for an
	  error when two variables of the same name are declared
	  in a scope to serve as a personal placeholder.
	
	* added the ability to define a symbol in a certain
	  scope (rather than in the current scope), and the
	  ability to look up a symbol in the current scope
	  without recursing to parent scopes.
	
	* added a new pass -- createEntryPoint -- that is
	  responsible for creating the appropriate entry point
	  for the program.  Previously this was done right
	  after parsing, and in a somewhat more haphazard way.
	  I believe it was also incorrect when the user actually
	  defined a main function.  The new approach more
	  correctly models the dynamic behavior of the program.
	
	* as alluded to in other bullets, cleaned up the
	  filesToAST pass by moving lots of the code that
	  was cluttering it up into the ModuleSymbol creation
	  code and/or the entryPoint creation pass.
	
	* made the entry point from a global variable to a static
	  member of the createentrypoint class.
	
	* fixed some error messages that were missing their
	  description in verifyASTType.cpp.
	
	* changed flags used by runtime Makefile so that library
	  code is compiled with very strict warnings, but the
	  compiler-generated C code is not (since users are
	  free to declare unused functions and variables, etc.)
	
	* added linefeeds to the ends of COMPOPTS files that
	  didn't have them so it would be easier to grep for
	  particular compilation options in the test system.

Modified files:
	chapel/compiler/AST/: TODO link.cpp stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h files.h stmt.h symbol.h 
	                          symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y parser.cpp 
	chapel/compiler/passes/: Makefile.share codegen.cpp 
	                         filesToAST.cpp filesToAST.h 
	                         renameCSymbols.cpp runAnalysis.cpp 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/etc/: Makefile.macros 
	chapel/runtime/src/: Makefile 
	chapel/test/: .cvsignore 
	chapel/test/Samples/ex1-astlog/: COMPOPTS 
	chapel/test/compflags/bradc/badflagddash/: COMPOPTS 
	chapel/test/compflags/bradc/copyright/: COMPOPTS 
	chapel/test/compflags/bradc/missinginfile/: COMPOPTS 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: COMPOPTS 
	chapel/test/trivial/bradc/protoast/codegen/: COMPOPTS 
Added files:
	chapel/compiler/passes/: createEntryPoint.cpp createEntryPoint.h 
	chapel/test/flowanalysis/jplevyak/config/: .cvsignore 
	chapel/test/modules/bradc/: .cvsignore nestedmodule.chpl 
	                            nestedmodule.good 
	                            twomodulesonefile.chpl 
	                            twomodulesonefile.good 
	chapel/test/modules/bradc/manymodules/: flatmodules.chpl 
	                                        flatmodules.compopts 
	                                        flatmodules.good 
	                                        manymodules.chpl 
	                                        manymodules.compopts 
	                                        manymodules.good 
	                                        twomodulestwofiles.chpl 
	                                        twomodulestwofiles.compopts 
	                                        twomodulestwofiles.good 
	chapel/test/modules/bradc/manymodules/modules/: .cvsignore 
	                                                NOTEST a.chpl 
	                                                b.chpl c.chpl 
	                                                d.chpl e.chpl 
	                                                g.chpl main.chpl 
	                                                z.chpl 
	chapel/test/trivial/bradc/: redefinevar.chpl redefinevar.good 

---------------------------------------------------------------------------

12/02/04 13:47:50 -- bradc

Log message:
	Fixed a bug that Shannon found in which imaginary
	numbers expressed with an integer value were not
	being parsed correctly (e.g., 4i rather than 4.0i).
	Added a test to lock this in.
	
	Also, renamed the --analyzeNewAST flag and variable
	to --noanalysis and analyzeAST respectively, since
	the sense of the flag has been reversed for awhile
	now, and the emphasis on "new" ast seems less
	important now.

Modified files:
	chapel/compiler/AST/: expr.cpp symtab.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: runAnalysis.cpp 
Added files:
	chapel/test/types/complex/bradc/: intfloatelement.chpl 
	                                  intfloatelement.good 

---------------------------------------------------------------------------

12/02/04 14:50:10 -- deitz

Log message:
	Added immature support for records.  In particular, assignment over
	records is not supported and the compiler needs to be run with the
	-noanalysis flag when using records.  Methods are not yet supported in
	records.
	
	Accessing fields from records is supported and is handled using "."
	rather than "->" in the generated C code.
	
	Eliminated support for inheritance in classes.  It was only really
	implemented in the parser.  It no longer is since the scheme has
	changed.  A parent pointer remains in the AST (although this will
	probably change eventually too).
	
	Got rid of a print line I accidentally left in the
	fieldsToMemberAccesses pass.

Modified files:
	chapel/compiler/AST/: expr.cpp symtab.cpp type.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y prelude.chpl 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
Added files:
	chapel/test/classes/deitz/: .cvsignore 
	chapel/test/classes/deitz/future/: test_record1.chpl 
	                                   test_record1.good 

---------------------------------------------------------------------------

12/02/04 15:47:31 -- deitz

Log message:
	Fixed a bug in which methods with no arguments were handled
	incorrectly.  Added a couple test cases to test methods with no
	arguments for both classes and records.  Note that methods with
	records work except for the case where they access their fields.

Modified files:
	chapel/compiler/AST/: link.cpp 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             methodsToFunctions.cpp 
Added files:
	chapel/test/classes/deitz/future/: test_method1a.chpl 
	                                   test_method1a.good 
	                                   test_record_method1.chpl 
	                                   test_record_method1.good 

---------------------------------------------------------------------------

12/02/04 16:01:51 -- deitz

Log message:
	Added a test for records with methods that access their fields.  On second glance, I've decided that these do work.  What is broken is inout parameters in general and specifically as it pertains to records.

Added files:
	chapel/test/classes/deitz/future/: test_record_method2.chpl 
	                                   test_record_method2.good 

---------------------------------------------------------------------------

12/03/04 09:43:21 -- deitz

Log message:
	Moved some of the record tests around.  In the future directory, the tests are run with the --noanalysis flag.  In the future/future directory, the tests are not run.

Added files:
	chapel/test/classes/deitz/future/: COMPOPTS 
	chapel/test/classes/deitz/future/future/: NOTEST 
	                                          test_record_method2.chpl 
	                                          test_record_method2.good 
Removed files:
	chapel/test/classes/deitz/future/: NOTEST 
	                                   test_record_method2.chpl 
	                                   test_record_method2.good 

---------------------------------------------------------------------------

12/03/04 11:31:06 -- bradc

Log message:
	Turned on an error message if two symbols with the
	same name are defined in the same scope and the
	symbols are not function names.
	
	Made forall expressions (e.g., [i in D] A(i) ) push
	their own symboltable scope (of type SCOPE_FORALLEXPR)
	so that symbols defined in the forall expression wouldn't
	conflict with symbols in the parent scope.  These scopes
	store a context pointer to the forall expression that
	they are associated with.
	
	Previously, the forall expression concept was being
	stored in an Expr named DomainExpr.  This change
	renamed this to be ForallExpr, which more closely matches
	the way we think of the concept.
	
	Also, refactored the way some statements are created
	and their contexts stored so that line numbers more
	closely relate to the beginning of the statement and
	not the end.  Improved the printing of the symboltable
	so that each scope not only prints out its type, but
	also some indication of what it's associated with --
	for things with symbol contexts (modules, classes),
	this is the name of that symbol and its location in
	the source file.  For things with expression or
	statement contexts, this is just the location in the
	source file.  In making this change, found that some
	of the scopes were storing a symcontext that was the
	function name, which seemed like a bad idea to me
	(since the context is more specific than that, and
	there ought to be another way to climb to the function
	if necessary), so I removed these contexts and it
	didn't seem to break anything...  If this represents
	a problem, let's discuss a different approach.
	
	Refactored the way foralls and assignments are
	handled in the parser to be a bit cleaner and
	have fewer repeated cases.
	
	Renamed the U class in one of the protoast/mg codes
	because it conflicted with the U array declared later
	in the same program.
	
	A few things not done in this checkin:
	
	- the scope for a forall expression used to define an
	  array type does not currently cover its initializer.
	  Thus, if the language supports:
	
	     var A: [i in D] float = i;
	
	  the "i" scope that i is defined in would not currently
	  be open when we parse the initializer.
	
	- I find myself wondering whether it's sufficient to have
	  every SymScope have a single BaseAST context pointer
	  rather than a Symbol, Stmt, Expr context pointer.  Do
	  some scopes actually want to store multiple context
	  pointers?  Or do we store all of them and the SymScope
	  type indicates which one is dominant (in which case a
	  function context could be stored even though it's
	  overly general for a ForallExpr).

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symscope.h 
	                          symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq.chpl mg-seq.good 

---------------------------------------------------------------------------

12/03/04 13:17:07 -- deitz

Log message:
	Added parsing support for simple with-statements.  Added a new
	subclass of Stmt called a WithStmt used for with-statements.  Added a
	new pass ProcessWithStatements which eliminates the with-statements by
	including the symbols wherever they should go.  Note that this pass is
	not implemented and is currently a space-holder.
	
	Fixed a bug in the creation of MemberAccesses where the member is not
	in the class scope.  In this case, the member was left as NULL and is
	now made an unresolved symbol.

Modified files:
	chapel/compiler/AST/: stmt.cpp symtab.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: Makefile.share verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: processWithStatements.cpp 
	                             processWithStatements.h 

---------------------------------------------------------------------------

12/06/04 09:51:27 -- deitz

Log message:
	Added a new pass called Fixup that sets back-pointers from expressions
	to the statements they are in (previously done in SetupStmtLinks) and
	that sets back-pointers from statements to the symbols they are in
	(previously done in a limited way within the parser).
	
	Removed two passes SetupStmtLinks and CheckBackLinks which are no
	longer necessary.  Though not with this checkin, the Fixup pass will
	eventually take a parameter which can be optionally set in order that
	the Fixup pass merely check that everything is in order, not put
	everything in order.  This support will be added when passes can take
	parameters (see one of Brad's future commits).
	
	Changed the function symbol pointer of statements to point to, more
	generally, a symbol.  This symbol can be either a function or a class
	(since a class has a statement body as well).

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             fieldsToMemberAccesses.cpp 
Added files:
	chapel/compiler/traversals/: fixup.cpp fixup.h 
Removed files:
	chapel/compiler/traversals/: checkBackLinks.cpp checkBackLinks.h 
	                             setupStmtLinks.cpp setupStmtLinks.h 

---------------------------------------------------------------------------

12/06/04 16:27:28 -- shannon

Log message:
	Added support for files of config vars.  The filename is passed via the
	new -f option, e.g. "-ffilename".  The file should contain config var
	initializations of the form "variableName=value" separated by whitespace.
	
	At this time the code for quoted strings doesn't work and is commented out.
	
	*  arg.c:  Added a function to handle the parsing of the argument string.
	   This function breaks the string down into variable name and value, and
	   installs these values into the config var hash table.  Added a switch
	   statement to handle the now two known command-line flags, -s and -f.
	
	*  chplio.h:  Added a #define value for default string length which is
	   now used by both chplio.c and arg.c.
	
	*  config.c:  Changed the malloc to sizeof(configVarType) instead of
	   sizeof(*configVar).

Modified files:
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: arg.c chplio.c config.c 
	chapel/test/trivial/shannon/: readStringOverflow.good 
Added files:
	chapel/test/execflags/shannon/configs/: configVarFile.chpl 
	                                        configVarFile.execopts 
	                                        configVarFile.good 
	                                        configVarFile.input 

---------------------------------------------------------------------------

12/07/04 12:09:28 -- deitz

Log message:
	Added compiler support for simple usage of "with" inside of a class.
	Variable fields are now copied from a class into another class.  The
	variables are put in the scope of the new class.  This support should
	also work with records, though the tests are faltering.
	
	Added a new traversal called DefineSymbols which takes a scope and
	adds symbols to it that are defined in the statements being traversed.
	This currently only handles VarDefStmts and the variables they define.
	
	Added two new functions to the ILink, preinsert and postinsert.  Only
	preinsert is completed and tested.  This inserts a statement LIST into
	another statement LIST before a specified statement.  The function
	postinsert should do the same thing after the specified statement.
	
	Added a new test case test_class_with1 that successfully tests a
	simple usage of the with construct in classes.  Added two new
	unsuccessful tests in a future directory that act on records.

Modified files:
	chapel/compiler/AST/: link.cpp 
	chapel/compiler/include/: link.h 
	chapel/compiler/traversals/: Makefile.share 
	                             processWithStatements.cpp 
Added files:
	chapel/compiler/traversals/: defineSymbols.cpp defineSymbols.h 
	chapel/test/classes/deitz/: test_class_with1.chpl 
	                            test_class_with1.good 
	chapel/test/classes/deitz/future/future/: test_record2.chpl 
	                                          test_record_with1.chpl 

---------------------------------------------------------------------------

12/09/04 09:55:57 -- deitz

Log message:
	This checkin makes a few small improvements and prepares to support
	"with" on records and classes with functions.
	
	The "_this" is now "this" and it is added to the scopes of the
	functions in which it is inserted.
	
	The DefineSymbols traversal now inserts function symbols into the new
	scope (though this doesn't seem to be found by all subsequent passes).
	
	The fixup pass now assigns non-null parentSymbols to every statement
	that points to either a class/record, function, or module depending on
	where the statement is located.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/traversals/: defineSymbols.cpp 
	                             fieldsToMemberAccesses.cpp 
	                             fixup.cpp fixup.h 
	                             methodsToFunctions.cpp 

---------------------------------------------------------------------------

12/09/04 10:26:35 -- deitz

Log message:
	Fixed up the Fixup pass so that it just sets new Stmt parent symbols
	for function, class, and module definitions,

Modified files:
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

12/09/04 14:08:08 -- bradc

Log message:
	Beefed up the passlist stuff a bit.
	
	All Passes now have a char* args field which can be
	used to specify arguments for that pass.  When
	invoking a Pass through the default passlist.h that
	is compiled into the compiler or specified with the
	--passlist option, the argument string is currently
	specified as follows:
	
	  ...
	  RUN(MyPass, "arguments"),
	  ...
	
	which will cause "arguments" to be stored in the
	Pass' args field before the Pass' run() method
	is invoked.
	
	Reorganized the way the passlist.h and passlist.cpp
	files work a bit so that the #inclusion of the
	header file and the REGISTER-ation of the new pass
	are both done in passlist.cpp, making the passlist.h
	file shorter and sweeter (which seemed important
	since this is a file that developers will be modifying
	by hand if they use the --passlist flag.
	
	Added a new flag, --print-passes, which causes the
	Pass names to be print out as they are run along
	with timing information for how long they took.  In
	the ZPL compiler we found this a nice, quick way to
	find out which pass was Seg Faulting and/or causing
	a huge performance bottleneck.

Modified files:
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	                       runpasses.cpp runpasses.h 
	chapel/compiler/passes/: pass.cpp pass.h 
	chapel/test/compflags/bradc/passlist/: passlist.h test.good 
	chapel/test/trivial/bradc/protoast/: mypasslist.h 

---------------------------------------------------------------------------

12/09/04 14:24:48 -- jplevyak (a.k.a. n10253)

Log message:
	Add a _this variable to FnSymbol to point to the added "this" field.
	This also serves as an indicator that the function is a bound function.
	
	For non-primitive value classes declared as variables generate a "new"
	primitive to allocate the object.
	
	Complex numbers of various sizes are now registered in IF1 so that
	they can be declared as variables.
	
	Removed --noanalysis flag from classes/deitz/future.... this
	results in 2 errors, both of which are caused by the way
	x.grow() is handled.  I have already sent mail to Steve on this,
	and the fix is simple depending on what the language spec says.
	I think it is OK to checkin with broken tests if the problems are
	known and we can expect to solve them relatively quickly.
	
	This checkin also fails for everything which uses array indexing.
	The problem is that the "fixup" pass is not being run on the internal
	prelude.  Again, Steve knows about this, but I want to checkpoint
	my work, hence the checkin.
	
	Changed the way MemberAcceses are handled.  I now convert
	 x.foo(...)
	
	to be foo(x, ...)
	
	We need to rename all member accesses "foo" to be something like "_member_foo"
	as agreed in the last meeting to put them in different namespaces.
	
	Fixed a bug in IF1 printing which was mislabelling symbols.
	
	Fixed test cases classes/deitz/future/tesT_method_chpl, test_record1.chpl
	  test_method2.chpl by handling instance variables and the new
	  "this" parameter.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp if1.cpp 
	                           sym.cpp 
	chapel/compiler/include/: if1.h sym.h symbol.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/classes/deitz/future/: COMPOPTS 

---------------------------------------------------------------------------

12/09/04 14:24:50 -- bradc

Log message:
	Added a new valgrind suppression for a new BoehmGC
	warning that's generated by the latest checkin.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

12/09/04 14:53:41 -- bradc

Log message:
	Oops -- I had a typo on the suppression on the last
	checkin, but didn't notice because when I was testing
	it, I forgot to use the -valgrind flag, so thought
	everything was OK.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 

---------------------------------------------------------------------------

12/09/04 16:10:00 -- bradc

Log message:
	Changed passes so that they are passed the complete
	list of modules including the two internal modules
	corresponding to the internal prelude and standard
	prelude by default.  A pass may then choose to
	ignore the internal modules in its run() method by
	checking the "internal" flag that's set on a module
	symbol if it's internal.
	
	Added a mechanism for traversals so that if they
	want to use the default run() method, but want to
	skip the internal modules, then they can set their
	Traversal::processInternalModules flag to false
	at constructor time.
	
	Used this flag for fieldsToMemberAccesses, which
	currently doesn't work when called on internal
	modules (but Steve will hopefully have it in working
	order soon enough).
	
	Also, moved the compilation of the generated C code
	into its own pass -- buildBinary -- previously this
	was part of the Codegen pass, which seems inappropriate.

Modified files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: Makefile.share codegen.cpp 
	                         createEntryPoint.cpp printProgram.cpp 
	                         runAnalysis.cpp 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 
	                             traversal.cpp traversal.h 
Added files:
	chapel/compiler/passes/: buildBinary.cpp buildBinary.h 

---------------------------------------------------------------------------

12/09/04 16:35:33 -- deitz

Log message:
	Fixed a bug in methodsToFunctions in which everything after the method
	was removed from a class type, not just the function.  Added a new
	method to ILink called extract which removes a statement from a
	statement list.
	
	Improved the implementation of copy and copyList for statements.
	These procedures can now take an optional scope.  If set, this is used
	as the scope for the copied statements, expressions, symbols, and
	types.
	
	Implemented a test against codegening with statements.
	
	Renamed ResolveSymbols2 to ResolveSymbols.  Originally this pass was
	just going to run after analysis and a pass called ResolveSymbols1 was
	going to run before analysis.  Now this single pass can be run
	anywhere and it will behave differently if run before or after (in
	that it will only use information gleaned from analysis after analysis
	has run).  This pass currently only does anything after analysis; it
	resolves members in MemberAccesses then.
	
	Added a static field to the RunAnalysis pass that records whether it
	has been run or not.

Modified files:
	chapel/compiler/AST/: link.cpp stmt.cpp 
	chapel/compiler/include/: link.h stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: runAnalysis.cpp runAnalysis.h 
	chapel/compiler/traversals/: Makefile.share cloneAllFns.cpp 
	                             defineSymbols.cpp defineSymbols.h 
	                             methodsToFunctions.cpp 
	                             processWithStatements.cpp 
Added files:
	chapel/compiler/traversals/: resolveSymbols.cpp resolveSymbols.h 
Removed files:
	chapel/compiler/traversals/: resolveSymbols2.cpp 
	                             resolveSymbols2.h 

---------------------------------------------------------------------------

12/10/04 10:38:52 -- deitz

Log message:
	Fixed a bug that showed up when classes were declared with more than
	one method.  Added a test case that declares more methods; I'm working
	on others.  Added a pointer to the scope of parameters in the FnSymbol
	which also has a pointer, like all symbols, to its scope.  This
	parameter scope may be better off in a function type rather than the
	function symbol, but there is no function type yet.
	
	Unfortunately, this fix does not fix the 7 regressions in flowanalysis
	and trivial that I though it might.

Modified files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
Added files:
	chapel/test/classes/deitz/future/: test_method3.chpl 
	                                   test_method3.good 

---------------------------------------------------------------------------

12/10/04 11:28:50 -- deitz

Log message:
	Removed the disable flag on fieldsToMemberAccesses so it now runs on
	the internal_prelude.  This pass, among other things, puts "this"
	around members in bound functions.
	
	Fixed a bug in which this was put around this (to transform it into
	this.this).  This now does not happend, though I think bad things may
	still happen to this.a (becoming maybe this.this.a).
	
	Unfortunately, the 7 tests in trivial and flowanalysis are still not
	working.  However they seem to be closer in the diff.

Modified files:
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 

---------------------------------------------------------------------------

12/10/04 14:20:30 -- shannon

Log message:
	Added support for reading files of config vars of type string,
	where the string is quoted.  Strings may use either the
	single or double quote, but will throw an error if the quotes
	are mismatched.  A string may include embedded quotes if
	they differ from the enclosing quote.  Strings may not
	include a newline.
	
	*  arg.c:  Refactored much of the parseArgs function,
	   pulling all the code that handled strings into a
	   separate function.
	
	* config.c:  Fixed a bug where a newly-malloced string sent
	  to the _copy_string function was not first set to NULL.
	
	* Added a bunch of tests.

Modified files:
	chapel/runtime/src/: arg.c config.c 
	chapel/test/execflags/shannon/configs/: configVarFile.good 
	                                        configVarFile.input 
Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarFileStrings.chpl 
	                                        configVarFileStrings.execopts 
	                                        configVarFileStrings.good 
	                                        configVarFileStrings.input 
	                                        configVarFileStringsMismatch.chpl 
	                                        configVarFileStringsMismatch.execopts 
	                                        configVarFileStringsMismatch.good 
	                                        configVarFileStringsMismatch.input 
	                                        configVarFileStringsNoEquals.chpl 
	                                        configVarFileStringsNoEquals.execopts 
	                                        configVarFileStringsNoEquals.good 
	                                        configVarFileStringsNoEquals.input 

---------------------------------------------------------------------------

12/13/04 12:29:54 -- jplevyak (a.k.a. n10253)

Log message:
	New interface for copying AST's.  Here is my problem: I need to pass
	some context down for the copy, so I have two functions:
	
	  AST *copy_tree(ASTCopyContext* context);
	  AST *copy_node(ASTCopyContext* context);
	
	Where the former is called on the root of the AST and the
	latter is called for each node.  I am going to implement
	copy_node, but I was thinking you guys would want to
	implement the traversal which copies your AST and then
	just callback my stuff (or give me a place to put a callout
	to copy my stuff).
	
	Basically, I need to pass down some context (ASTCopyContext) which is
	then passed to a callback on each AInfo along with the old node.
	
	The root call is at fun.cpp:192, and the AST node which I am storing
	with each function is the FnDefStmt (at analysis.cpp:1169).

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: analysis.h ast.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 

---------------------------------------------------------------------------

12/13/04 17:12:09 -- jplevyak (a.k.a. n10253)

Log message:
	Fix compilation issue... don't know how it got past the dependencies.

Modified files:
	chapel/compiler/vparser/: v.g 

---------------------------------------------------------------------------

12/13/04 17:34:49 -- bradc

Log message:
	In debugging a dependence problem, noticed that
	v.g.d_parser.cpp is not getting blown away on a
	make clean, as it probably should.

Modified files:
	chapel/compiler/vparser/: Makefile.share 

---------------------------------------------------------------------------

12/14/04 10:35:35 -- deitz

Log message:
	Beefed up the traversal mechanism so that changes can easily be made
	during a traversal.  The preProcess* and postProcess* routines now
	take their arguments by reference so that they can be changed.  For
	example, this is used in the fieldsToMemberAccesses traversal in which
	fields of a class accessed within a bound function are changed to
	member accesses where the base is "this."
	
	This change was complicated by the fact that these routines were
	always called with "this" as a parameter and "this" cannot be changed
	(or passed as a reference).  Thus traversals now take this as a
	reference parameter alongside their call.  The proper usage is
	redundantly specified as
	
	  expr->traverse(expr, traversal, atTop);
	
	where _expr_ is the expression that will be traversed by _traversal_
	and _atTop_ is the boolean saying whether this is the first node in
	the traversal or not.
	
	To make this easier to call, especially since the parameters now have
	to match more exactly (because of the first parameter), I added two
	routines in a new file AST/ast_util.cpp (header: include/ast_util.h)
	{I don't like these locations, suggestions?}.  These routines called
	TRAVERSE and TRAVERSE_LS let you specify a call to a traversal without
	the redundancy.  They also resolve more dynamically using dynamic
	casts to Expr*, Stmt*, Symbol*, or Type*.  The above example would be
	called as
	
	  TRAVERSE(expr, traversal, atTop);
	
	Removed the old replace methods for Expr and its subtypes that needed
	it.  This mechanism only worked when the expression being replaced had
	a parent that was also an expression.  This failed when, for example,
	the expression was attached to a return statement.  The new mechanism
	replaces the reference passed into a traversal using a static replace
	function associated with Expr.
	
	Added a static replace function to Expr that replaces one expression
	(passed as a reference) with another.  This function updates the prev,
	next, and parent pointers if necessary.
	
	Added three new tests to classes/deitz/future/future/ that try to
	print the return values of bound functions, but don't currently work.
	Added a test case trivial/deitz/test_write_return that prints the
	return values of a function.  This does work.

Modified files:
	chapel/compiler/AST/: Makefile.share expr.cpp link.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h type.h 
	chapel/compiler/traversals/: checkIDs.cpp checkIDs.h 
	                             checkTypeInfo.cpp checkTypeInfo.h 
	                             cloneAllFns.cpp cloneAllFns.h 
	                             defineSymbols.cpp defineSymbols.h 
	                             fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 
	                             findUnknownTypes.cpp 
	                             findUnknownTypes.h 
	                             findUnresolvedSymbols.cpp 
	                             findUnresolvedSymbols.h fixup.cpp 
	                             fixup.h getstuff.cpp getstuff.h 
	                             methodsToFunctions.cpp 
	                             methodsToFunctions.h printAST.cpp 
	                             printAST.h 
	                             processWithStatements.cpp 
	                             processWithStatements.h 
	                             resolveSymbols.cpp resolveSymbols.h 
	                             testGetStuff.cpp testGetStuff.h 
	                             traversal.cpp traversal.h 
	                             verifyASTType.cpp verifyASTType.h 
Added files:
	chapel/compiler/AST/: ast_util.cpp 
	chapel/compiler/include/: ast_util.h 
	chapel/test/classes/deitz/future/future/: test_method4.chpl 
	                                          test_method5.chpl 
	                                          test_method6.chpl 
	chapel/test/trivial/deitz/: test_write_return.chpl 
	                            test_write_return.good 

---------------------------------------------------------------------------

12/14/04 10:43:12 -- deitz

Log message:
	Removed a reference to file that does not exist in fieldsToMemberAccesses.cpp

Modified files:
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 

---------------------------------------------------------------------------

12/14/04 11:23:25 -- deitz

Log message:
	Updated two tests which took an argument but shouldn't

Modified files:
	chapel/test/classes/deitz/future/future/: test_method4.chpl 
	                                          test_method6.chpl 

---------------------------------------------------------------------------

12/14/04 11:30:39 -- jplevyak (a.k.a. n10253)

Log message:
	Convert an assert caused by the (x.foo)() construction into
	a typing error.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

12/14/04 11:43:59 -- jplevyak (a.k.a. n10253)

Log message:
	Remove hack used to obtain surrounding function.  Now use parentSymbol.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

12/15/04 12:10:35 -- deitz

Log message:
	Removed symbol resolution from the parser.  When the parser encounters
	an identifier, it creates an unresolved symbol.  These will be
	resolved in a new pass called Cleanup.  In addition, the parser does
	not try to resolve member symbols in dot-expressions and does not try
	to "classify" parentheses-expressions.  These are handled in CleanUp
	as well.  This is a large, essential change to the compiler.
	
	Added a new pass called Cleanup (Name change? PostParse, CleanParsing)
	that should be run after the parser.  This pass calls a bunch of small
	traversals enumerated in order here:
	
	1. ApplyWith: This traversal expands with-statements that appear in
	   class definitions; it replaces them with the definitions in the
	   included class.  This traversal replaces ProcessWithStatements.
	
	2. InsertThis: This traversal inserts "this" as the first parameter in
	   bound functions.  This traversal replaces half of
	   FieldsToMemberAccesses.
	
	3. ResolveEasy: This traversal resolves unresolved symbols that are
	   easy to resolve, i.e., functions and members where the base has
	   unknown type are left to analysis.
	
	4. SpecializeParens: This traversal changes all ParenOpExpr that are
	   arrays to ArrayRef and changes all ParenOpExpr that are write,
	   writeln, and read to IOCall.  Also, this traversal corrects
	   constructors.
	
	5. ApplyThis: This traversal changes all references to variables and
	   functions defined in a class within the definitions of bound
	   functions.  They are changed to MemberAccess objects where the base
	   is "this" and the member is the variable or function.  This
	   traversal replaces the other half of FieldsToMemberAccesses.
	
	Removed the following two traversals: ProcessWithStatements and
	FieldsToMemberAccesses.
	
	Added replace functionality for symbols that is similar to the replace
	functionality for expressions.  Namely, the current symbol being
	traversed can now be replaced using static routine
	Symbol::replace(old, new) which replaces old with new where old can be
	the symbol being traversed.  This replacement does not change the
	prev, next, and parent links like expression's replacement does since
	the links mean something altogether different for symbols.
	
	Added a new procedure Symboltable::lookupFromScope which looks up a
	symbol starting from a given scope.  It is similar to
	Symboltable::lookup which uses the current scope as a starting place.
	It is different from Symboltable::lookupInScope which looks up a
	symbol by only looking in a given scope.  A name change is desirable.
	
	Removed strange procedure ParenOpExpr::classify which used to attempt
	to determine what a parentheses-expression was doing, be it an I/O, a
	constructor, an array reference.  This is now done in CleanUp's
	SpecializeParens traversal.
	
	Removed strange procedure Symboltable::defineMemberAccess which used
	to attempt to resolve member symbols in dot-expressions.  This is now
	done in CleanUp's ResolveEasy traversal.
	
	Removed long-gone Symboltable::defineEnumList.
	
	Improved fixup which now can be called with the argument "verify"
	which asks fixup to ensure that the AST does not need to be fixed up
	rather than actually fixing it up.  Errors are reported fatally.
	There are currently two calls to fixup in the compiler, one before
	cleanup and one after cleanup.  The second one should be changed to a
	verify-fixup but insertion needs to be modestly improved: The problem
	is that when a copied list of statements is inserted into a new place
	in the AST, its parents are not set.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp symtab.cpp 
	chapel/compiler/include/: expr.h symbol.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: Makefile.share fixup.cpp fixup.h 
	                             resolveSymbols.cpp 
Added files:
	chapel/compiler/traversals/: cleanup.cpp cleanup.h 
Removed files:
	chapel/compiler/traversals/: fieldsToMemberAccesses.cpp 
	                             fieldsToMemberAccesses.h 
	                             processWithStatements.cpp 
	                             processWithStatements.h 

---------------------------------------------------------------------------

12/15/04 14:25:36 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in low level code generation which was setting up
	a parameter after the call (whoops).

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 

---------------------------------------------------------------------------

12/15/04 14:42:52 -- bradc

Log message:
	Started working on implementing a new AST transformation
	traversal -- processParameters -- that makes the different
	parameter intents (in, out, inout), work as they should.
	This isn't yet working, but I got temporarily stuck at a
	reasonable stopping point, so this is just a synch point
	(the new traversal isn't run by default).  Some changes
	that go in with this:
	
	* fixed a bug in which parameter intents were being
	  parsed and passed to the parameter creation routines,
	  but then dropped on the floor
	
	* removed ref and val intents from the parser since they
	  never made it into the language.
	
	* added a PARAM_BLANK intent to the internal enumeration
	  since BLANK != CONST in the language spec, as
	  anticipated
	
	* with Steve's help, fixed a subtle problem in his new
	  traversal stuff in which the next field of this rather
	  than _this was used for traversing lists of Stmt and Type
	  nodes.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp symtab.cpp 
	                      type.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/compiler/traversals/: processParameters.cpp 
	                             processParameters.h 

---------------------------------------------------------------------------

12/15/04 16:03:42 -- deitz

Log message:
	Added new (broken?) replace functionality for statements.  I'm
	checking in for synching purposes.  It works fine for the checked in
	tests.  Next step: Unify replace across the different AST subtypes
	(statements, expressions, symbols, types, etc.) and make sure they are
	right.
	
	Changed with resolution to use new statement replace.  This gets rid
	of the with-statement (which was previously left).  It works as well
	as the other way of doing it.
	
	Fixed a bug in which the scope of "this" added to bound function
	parameter lists was incorrectly set.  It is now set to the parameter
	scope (where it is defined).  Hopefully this won't be decoupled for
	too much longer--See Brad's next checkin.
	
	This checkin resolves seven of the nine failures we've been having.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: cleanup.cpp 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 
	                                  formatoutput.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

12/16/04 07:37:10 -- shannon

Log message:
	Added support for configuration variables of type enum,
	set either on the command line or in a file.  Specifically:
	
	* type.cpp:  Added the codegenConfigVarRoutines and codegenStringToType
	  methods to the necessary AST classes.
	
	* Added a bunch of tests.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/runtime/include/: config.h 
	chapel/runtime/src/: config.c 
Added files:
	chapel/test/execflags/shannon/configs/: configVarBadEnum.chpl 
	                                        configVarBadEnum.execopts 
	                                        configVarBadEnum.good 
	                                        configVarFileBadEnum.chpl 
	                                        configVarFileBadEnum.execopts 
	                                        configVarFileBadEnum.good 
	                                        configVarFileBadEnum.input 
	                                        configVarFileGoodEnum.chpl 
	                                        configVarFileGoodEnum.execopts 
	                                        configVarFileGoodEnum.good 
	                                        configVarFileGoodEnum.input 
	                                        configVarGoodEnum.chpl 
	                                        configVarGoodEnum.execopts 
	                                        configVarGoodEnum.good 

---------------------------------------------------------------------------

12/17/04 09:38:26 -- deitz

Log message:
	Beefed up the traversal mechanism so that the functions TRAVERSE and
	TRAVERSE_LS can be used with impunity.  Unfortunately, the old
	TRAVERSE and TRAVERSE_LS procedures did not work well.  Because the
	traverse and traverseList member functions take a first argument
	(_this) that changes in each class (It must be a reference to a
	pointer to an object of the same type as this.), the dispatch could
	not correctly handle the variations.  These same functions are now
	replicated throughout the hierarchy.  The macro at the beginning of
	classes derived from Stmt, Expr, Symbol, and Type create these
	traversal functions.
	
	Fixed a major-league subtle bug in the new replace mechanism.  The
	problem had to do with changing a pointer inside the function that
	could be aliased to the parameter by the pass-pointer-by-reference
	semantics.  The fix is to use an internal function that does not use
	pass-pointer-by-reference semantics.  This keeps the same
	functionality on replace.  So replacing one statement with another
	results in the pointer being changed as well.  This is good when the
	function is used inside a traversal on the statement being processed.
	The same holds for expressions.
	
	The replace mechanism now works seemingly very well for statements and
	expressions using Stmt::replace(old_stmt, new_stmt) and
	Expr::replace(old_expr, new_expr).  ILink::replace should never be
	called (except within the implementations of these other replace
	routines).
	
	Removed Symbol::replace (which had other semantics and was not
	necessary).  It can be rebuilt later and could be used, for example,
	to replace formal parameters in a function.
	
	Removed the ast_util files which used to contain the traverse
	functions TRAVERSE and TRAVERSE_LS.  These are now macros in link.h
	that should be used simply because they are a less redundant way to
	call these methods that require _this, i.e., write TRAVERSE(a, b, c)
	rather than a->traverse(a, b, c).  Changed most, if not all, calls to
	the methods traverse and traverseList to these macros.  Eliminated
	some static casts.
	
	Added a new test case that uses a with-statement in a class definition
	where it is the first statement in the class.
	
	Added a few .cvsignore files to certain test directories where my
	"tmp" directories kept showing up.

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      link.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	                          symbol.h type.h 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             testGetStuff.cpp traversal.cpp 
	chapel/test/classes/deitz/: .cvsignore 
	chapel/test/classes/deitz/future/: .cvsignore 
	chapel/test/trivial/bradc/: .cvsignore 
Added files:
	chapel/test/classes/deitz/: test_class_with3.chpl 
	                            test_class_with3.good 
	chapel/test/classes/deitz/future/future/: .cvsignore 
	chapel/test/trivial/deitz/: .cvsignore 
Removed files:
	chapel/compiler/AST/: ast_util.cpp 
	chapel/compiler/include/: ast_util.h 

---------------------------------------------------------------------------

12/17/04 09:54:35 -- deitz

Log message:
	Moved tests out of classes/deitz/future and into classes/deitz/ since
	they now work with analysis.

Added files:
	chapel/test/classes/deitz/: test_method1.chpl test_method1.good 
	                            test_method1a.chpl 
	                            test_method1a.good test_method2.chpl 
	                            test_method2.good test_method3.chpl 
	                            test_method3.good test_record1.chpl 
	                            test_record1.good 
	                            test_record_method1.chpl 
	                            test_record_method1.good 
Removed files:
	chapel/test/classes/deitz/future/: test_method1.chpl 
	                                   test_method1.good 
	                                   test_method1a.chpl 
	                                   test_method1a.good 
	                                   test_method2.chpl 
	                                   test_method2.good 
	                                   test_method3.chpl 
	                                   test_method3.good 
	                                   test_record1.chpl 
	                                   test_record1.good 
	                                   test_record_method1.chpl 
	                                   test_record_method1.good 

---------------------------------------------------------------------------

12/17/04 10:32:22 -- deitz

Log message:
	Fixed a small bug in which "this" in a record's constructor was
	defined in the wrong scope.  Moved the test
	classes/deitz/test_record_with1.chpl out of a future directory.  Move
	a bunch of tests in future/future to future.

Modified files:
	chapel/compiler/AST/: type.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_with1.chpl 
	                            test_record_with1.good 
	chapel/test/classes/deitz/future/: NOTEST test_class_with2.chpl 
	                                   test_method4.chpl 
	                                   test_method5.chpl 
	                                   test_method6.chpl 
	                                   test_record2.chpl 
	                                   test_record_method2.chpl 
	                                   test_record_method2.good 
Removed files:
	chapel/test/classes/deitz/future/: COMPOPTS 
	chapel/test/classes/deitz/future/future/: test_method4.chpl 
	                                          test_method5.chpl 
	                                          test_method6.chpl 
	                                          test_record2.chpl 
	                                          test_record_method2.chpl 
	                                          test_record_method2.good 
	                                          test_record_with1.chpl 

---------------------------------------------------------------------------

12/17/04 10:43:55 -- deitz

Log message:
	Added an output file for test_class_with2.good which only fails in
	analysis.

Added files:
	chapel/test/classes/deitz/future/: test_class_with2.good 

---------------------------------------------------------------------------

12/17/04 15:10:16 -- bradc

Log message:
	Fixed a small problem I introduced in which the filename
	passed to runAnalysis.cpp had changed from the user's
	first filename to the first standard prelude due to the
	inclusion of internal modules in the list passed to a
	pass.  This is the reason that you've probably seen an
	internal_prelude.chpl.c file in your parser/ directory
	lately.  If you delete it now, it should not reappear.

Modified files:
	chapel/compiler/passes/: runAnalysis.cpp 

---------------------------------------------------------------------------

12/17/04 16:29:57 -- bradc

Log message:
	Re-fixed dependences for v.g and v.g.d_parser.cpp -- all
	#includes for v.g should now be specified in v.g.h (was
	parse.h at some point, but that changed).  v.g_incs.cpp
	is a C++ file that exists only for the sake of generating
	dependences for v.g and should not be needed.

Modified files:
	chapel/compiler/vparser/: Makefile v.g 
Added files:
	chapel/compiler/vparser/: v.g.h v.g_incs.cpp 
Removed files:
	chapel/compiler/vparser/: parse_incs.cpp 

---------------------------------------------------------------------------

12/20/04 12:14:39 -- bradc

Log message:
	Added a rerun command to our set of gdb commands available
	when using the --gdb flag.  "rerun" runs the compiler without
	cleaning up after itself (i.e., the /tmp directory it created
	may need to be cleaned up by hand).

Modified files:
	chapel/compiler/util/: files.cpp 

---------------------------------------------------------------------------

12/20/04 15:52:23 -- jplevyak (a.k.a. n10253)

Log message:
	1. Complete rewrite of the dispatch code to support generic
	   instantiation, default arguments, destructring (better)
	   and point-wise evaluation.  This just restores the original
	   functionality with hooks for the new features.
	
	2. Error messages are now produced for intermediate expressions
	   which fail to type correctly so that better error messages
	   are produced for things like the currently failing 0-arity
	   functions.
	
	3. reogainized the util directory to get it to compile test_lib
	   which had gone stagnent.
	
	4. Added a form_Map which allows iteration over maps more
	   easily.

Modified files:
	chapel/compiler/adt/: map.cpp 
	chapel/compiler/analysis/: fa.cpp fa_extras.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/include/: ast.h fa.h fun.h map.h pattern.h vec.h 
	chapel/compiler/test/: Makefile files.cpp map.cpp misc.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

12/20/04 15:54:57 -- jplevyak (a.k.a. n10253)

Log message:
	removed verified question comment

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

12/20/04 17:08:08 -- jplevyak (a.k.a. n10253)

Log message:
	Error messages have changed for the new dispatch system.

Modified files:
	chapel/test/flowanalysis/jplevyak/: badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good 
	                                    dispatch3.good 
	chapel/test/parsing/jplevyak/: module.good 

---------------------------------------------------------------------------

12/21/04 12:31:17 -- jplevyak (a.k.a. n10253)

Log message:
	enhance "no type" error message when -v is given to include expression number
	which can be looked up in log.i

Modified files:
	chapel/compiler/analysis/: fa_extras.cpp 

---------------------------------------------------------------------------

12/21/04 12:56:15 -- jplevyak (a.k.a. n10253)

Log message:
	Added the ability to determine how application and partial appplication are
	allowed on a SEND by SEND bases: Partial_OK, Partial_NEVER, Partial_ALWAYS.
	Currently x.foo is turned into a Partial_ALWAYS which means that
	x.foo() is the only way to call a member function (since the () is required
	to evaluate the resulting partially applied closure).   For other
	function calls in Chapel, Partial_NEVER is set.  When we get support
	for =>, this will set Partial_ALWAYS.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	                           prim_data.dat 
	chapel/compiler/include/: code.h pattern.h 

---------------------------------------------------------------------------

12/21/04 13:31:29 -- bradc

Log message:
	Big symboltable changes...
	
	Made the symboltable more tightly integrated with
	traversals and beefed up/cleaned up several other
	things related to the symboltable and its scope.
	
	First off, let me start by documenting the different
	contexts in which a SymScope can be introduced:
	
	CONTEXT                      ABBREVIATION  SCOPE_...
	-------------------------------------------------------
	module                       mod           SCOPE_MODULE
	class                        class         SCOPE_CLASS
	function formal parameters   function      SCOPE_PARAM
	for/forall stmt index scope  for stmt      SCOPE_FORLOOP
	block statement              block stmt    SCOPE_LOCAL*
	forall expr index scope      forall expr   SCOPE_FORALLEXPR
	let expr                     let expr
	
	* = could also be SCOPE_FUNCTION if it's the block
	    statement defining a function's body
	
	All of these are currently implemented other than the let
	expression which the parser doesn't yet recognize.  The
	following table is to help us remember some things about
	where scopes are referred to:
	
	SCOPE         SymScope* name    field location
	----------------------------------------------
	mod           modScope          ModuleSymbol
	class         classScope        ClassType
	function      paramScope        FnSymbol
	for stmt      indexScope        ForLoopStmt
	block stmt    blkScope          BlockStmt
	forall expr   indexScope        ForallExpr
	let expr      <unimplemented>   <unimplemented>
	
	The first change of this pass was to rename all variables
	named "scope" to something else, since it was often very
	easy to say "I need a scope that tells me...." and then
	say "aha!  a field named `scope'!" only to find out later
	that it wasn't the scope you'd intended.  So the table
	above tells the name of each scope variable.  The one
	other place we store a scope is that every Symbol has a
	pointer to the scope that it's defined in.  This is now
	called parentScope (not the most descriptive name, but
	declarationScope was a bit long -- suggestions?).
	
	The second change was to make sure that all of the places
	where a scope was defined store their scope (in many
	places we didn't do so, so the scope would point to its
	context, but the context would not point to its scope).
	
	The third change was to make it so that when a traversal
	is running, it automatically keeps the Symboltable's
	sense of what the "currentScope" is up-to-date, with the
	intent that traversals which do things like define new
	symbols or functions or clone things will more-or-less
	automatically put them in the right place and be able
	to reuse more of the same code that the parser uses to
	create things.  I didn't actually change any existing
	traversals to use this, however, with the one
	exception that I made one of Steve's lookupFromScope()
	calls in Cleanup into a lookup() call.
	
	The fourth change was that previously when Symbols were
	constructed, they automatically went to the Symboltable
	to grab the currentScope as their own.  This caused
	subtle bugs when people created Symbols in traversals
	(prior to the traversals tracking the Symboltable), and
	then inserted them manually into a different scope
	because the parent was never patched up.  So the new
	scheme is that Symbols are created with a NULL
	parentScope, and only upon being inserted into the
	Symboltable is their parentScope set.  This is much
	more sane and I apologize to Steve for not doing this
	straight off.  I've also added a check to the Fixup
	("verify") traversal so that it will ensure that every
	symbol is declared in the scope that it thinks it is.
	
	Added a test to try and test all scopes (at least
	all that work -- as others start to work better,
	the test should be updated).
	
	Some (somewhat) tangential changes that were made
	along the way:
	
	* added the ability to parse and store overloaded
	  functions.  This hasn't been tested very heavily,
	  but previously, the redefinition of a function
	  was causing the original to be replaced in the
	  Symboltable, as far as lookup goes (the linked
	  list representation still had both entries).  Now,
	  each FnSymbol has an "overload" field that
	  points to overloads of it that may exist in that
	  scope.  Thus, when a second function "foo" is
	  defined within a given scope, the first "foo"'s
	  overload pointer is set up to point to the
	  second function "foo".  This is currently a
	  singly-linked list.  It may be that more robust
	  support will be needed as we spend more effort
	  on this.  This change had to be inserted now
	  in order to handle the overloading of "this" in
	  the Array class of the internal prelude.
	
	* added a "startTraversal" method to the ModuleSymbol
	  class, which does the TRAVERSE_LS call that was
	  previously found at the top level of all traversals.
	  This was done (a) to hide the TRAVERSE_LS call a
	  bit (since it was nontrivial), and to (b) update
	  the Symboltable with the Module's scope as the
	  current Scope to avoid replicating this in every
	  traversal that had to write its own run() method.
	
	* moved each module's init function out of the
	  global scope (where it was declared before) and
	  into the module's scope.  This is more correct,
	  and now more necessary so that Steve's symbol
	  resolution code can call a normal "lookup()"
	  rather than looking up into a specific scope.
	  In making this change, also had to move the code
	  which inserts the main module's init call into
	  main out of createInitFn() and into
	  createEntryPoint.cpp (which is a more appropriate
	  place for it anyway, and the place where one
	  would go looking for it).
	
	* SymScopes used to keep track of symbols that were
	  used before they were defined (back when I
	  conceived of the parser resolving all top-level
	  symbols).  This no longer makes sense, and is
	  unnecessary, so I killed the code related to it.
	  Steve's resolution of unresolveds now trumps this.
	
	* added a global variable, printEmpty, to the
	  Symboltable which indicates whether or not
	  empty scopes should be printed out.  Previously
	  they never were, however for debugging purposes,
	  I found that printing them out was sometimes
	  very helpful.  Currently, it's set to false and
	  the only way to set it to true is to change it
	  by hand and recompile.
	
	* Cleaned up Symboltable's lookup calls somewhat --
	  implemented lookup() in terms of lookupFromScope()
	  since they were virtually identical; added the
	  ability to have lookupInScope() throw an internal
	  error if it fails; killed a dead symbol; had the
	  lookup...Scope() calls throw an internal fatal
	  if the scope they are passed is NULL (previously
	  they would fail quietly...)
	
	Some (very) tangential changes that were made along
	the way:
	
	* made UnresolvedSymbols throw an internal error when
	  someone tries to codegen them -- previously we
	  simply codegen'd their name because we weren't
	  resolving all symbols.  Now that we are, we should
	  prevent against letting them fall through the
	  compiler to codegen.
	
	* added an isInternal() method to SymScope that
	  tells whether or not it's part of an internal
	  module (the prelude or internal prelude) --
	  this is not just the top-level scopes, but also
	  all scopes that they contain.  This is currently
	  unused, but was useful for debugging and a few
	  lines to implement, so I left it in.
	
	* claned up the passlist.h file a bit by adding
	  categorizations of what groups of passes are
	  aiming to accomplish in the form of comments.
	  Also, added a call to Fixup ("verify") before
	  analysis in hopes of giving John a sane AST.
	  Added a second call to Fixup ("verify") in
	  hopes of ensuring the same for code generation,
	  but it currently fails (hmmm...), so commented
	  it out for now.
	
	* fixed a bug in the lexer in which line numbers
	  were not being maintained properly for multi-
	  line comments that actually spanned multiple
	  lines.  I think I must've copied this out of
	  a C lexer that didn't maintain a linecount...

Modified files:
	chapel/compiler/AST/: TODO expr.cpp stmt.cpp symbol.cpp 
	                      symtab.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h symbol.h symscope.h 
	                          symtab.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp fixup.h 
	                             traversal.cpp 

---------------------------------------------------------------------------

12/21/04 13:44:55 -- jplevyak (a.k.a. n10253)

Log message:
	Reorganized the code which detects functions which subsume other
	functions.  The code is now smaller and (I think) easier to understand.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

12/21/04 15:14:47 -- bradc

Log message:
	Forgot to check in my test with my last checkin related
	to Symboltable stuff.
	
	As long as I'm at it, here is a guide to the different
	SymScope types and the contexts which they currently
	store, to indicate what they are associated with:
	
	Scope Type        Stmt           Expr       Symbol
	-------------------------------------------------------
	SCOPE_MODULE      ModuleDefStmt  ---        ModuleSymbol
	SCOPE_CLASS       ClassDefStmt   ---        TypeSymbol
	SCOPE_PARAM       FnDefStmt      ---        FnSymbol
	SCOPE_FORLOOP     ForLoopStmt    ---        ---
	SCOPE_LOCAL*      BlockStmt      ---        ---
	SCOPE_FORALLEXPR  ---            ForallExpr ---

Added files:
	chapel/test/trivial/bradc/: testAllScopes.chpl 
	                            testAllScopes.good 

---------------------------------------------------------------------------

12/21/04 15:21:49 -- bradc

Log message:
	Added support for C++-style single-line comments to a
	passlist file specified with the --passlist option.

Modified files:
	chapel/compiler/main/: runpasses.cpp 

---------------------------------------------------------------------------

12/21/04 16:30:25 -- deitz

Log message:
	Removed TYPE_IDENT from the parser.  Type identifiers are now good old
	identifiers.
	
	Added UnresolvedType as a new kind of type that is somewhat symmetric
	to UnresolvedSymbol.  The name field, a Symbol, for an UnresolvedType
	always points to an UnresolvedSymbol.  When that symbol is resolved,
	the UnresolvedType is resolved.  The new UnresolvedType is created
	during parsing and resolved during Cleanup's ResolveEasiest traversal.
	
	Broke up the ResolveEasy traversal in the Cleanup Pass into two
	traversals: ResolveEasiest and ResolveEasy.  ResolveEasiest tries to
	resolve top-level symbols.  ResolveEasy tries to resolve members in
	dot-expressions by looking at the type of the base.  Extended
	ResolveEasiest to also try to resolve UnresolvedTypes.
	
	The following errors regress (whenn analysis is run):
	[Error matching compiler output for flowanalysis/newast/domarr]
	[Error matching compiler output for flowanalysis/newast/enumarray]
	[Error matching compiler output for flowanalysis/newast/formatoutput]
	[Error matching compiler output for flowanalysis/newast/noop]
	[Error matching compiler output for flowanalysis/newast/protoast_test]
	[Error matching compiler output for trivial/bradc/formatoutput]
	[Error matching compiler output for trivial/bradc/domarr/domarr]
	[Error matching compiler output for trivial/bradc/domarr/enumarray]

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: cleanup.cpp verifyASTType.cpp 

---------------------------------------------------------------------------

12/21/04 16:41:49 -- deitz

Log message:
	Added pre-preliminary support for unions.  Basically a union is
	treated as a record so correct code works correctly but inefficiently.
	I'm checking this in only so that I have only one working version.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/classes/deitz/: test_union1.chpl test_union1.good 

---------------------------------------------------------------------------

12/21/04 17:09:10 -- deitz

Log message:
	Fixed a small bug in which symbols were resolved before "this" was
	inserted into bound functions.  Updated the line numbers in a couple
	of flowanalysis tests which probably changed in the checkin before my
	last one.

Modified files:
	chapel/compiler/traversals/: cleanup.cpp 
	chapel/test/flowanalysis/newast/: domarr.good noop.good 

---------------------------------------------------------------------------

12/22/04 10:44:44 -- deitz

Log message:
	Added a few type variable in function tests and a NOTEST since they don't work

Added files:
	chapel/test/types/type_variables/deitz/: NOTEST 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function4.chpl 

---------------------------------------------------------------------------

12/22/04 11:59:00 -- deitz

Log message:
	Moved a few of the method tests that used to fail with analysis but now don't out of the future directory.

Added files:
	chapel/test/classes/deitz/: test_method4.chpl test_method4.good 
	                            test_method5.chpl test_method5.good 
	                            test_method6.chpl test_method6.good 
Removed files:
	chapel/test/classes/deitz/future/: test_method4.chpl 
	                                   test_method5.chpl 
	                                   test_method6.chpl 

---------------------------------------------------------------------------

12/22/04 12:58:14 -- deitz

Log message:
	Fixed a bug in copy in which the type of a parameter symbol was copied
	when a parameter symbol was copied and the return type of a function
	was copied when the function definition statement was copied.  These
	types are now shared, copying them led to an infinite recursion.
	
	Quick-fixed with-statement application so that it can be applied
	before resolving symbols by having it resolve the class that is
	applied via the with-expression.
	
	Moved the with-statement application traversal first in the suite of
	Cleanup traversals.
	
	Moved test_class_with2.chpl out of the future directory.  This test
	tests with on classes when the classes have methods.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/traversals/: cleanup.cpp 
Added files:
	chapel/test/classes/deitz/: test_class_with2.chpl 
	                            test_class_with2.good 
Removed files:
	chapel/test/classes/deitz/future/: test_class_with2.chpl 
	                                   test_class_with2.good 

---------------------------------------------------------------------------

12/22/04 14:50:35 -- jplevyak (a.k.a. n10253)

Log message:
	form_XXX marco for looping over Map's now skips empty MapElem's correctly.
	Added additional functions to MPosition class: last(), prefix_to_last().
	More work on support for default arguments.

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/compiler/include/: fa.h fun.h map.h pattern.h 

---------------------------------------------------------------------------

12/22/04 16:23:42 -- bradc

Log message:
	Made two minor but substantial changes to the
	AST traversal machinery:
	
	1) fixed a bug in which a traversal that removed
	   the last node in a list resulted in a core
	   dump due to failure to check for end-of-list
	   prior to exploring the next node
	
	2) improved the clarity and perhaps performance
	   of the traverseList calls by not having them
	   drop down to ILink, then BaseAST, then Stmt,
	   Expr, Symbol, Type via dynamic casts.  Now,
	   a traverseList of type Stmt should call the
	   traverseList of type Stmt.  The result is
	   that the callstack isn't littered with calls
	   to ILink's traversal calls when you're
	   traversing a list of statements, for example.
	
	Also made the code management change:
	
	3) factored a lot of the code that was common
	   to the various traversal macros into macros
	   so that fixes like the above only have to be
	   made in one place
	
	And the organizational change:
	
	4) moved all traversal macros into the traversal.h
	   file (both because they're more similar than
	   different, so it's nice to have them all in one
	   place, and because it's the obvious place to look
	   for them).
	
	Food for thought question for Steve: are the
	traverseList methods used for any classes apart
	from Stmt, Expr, Type, Symbol, and possibly ILink,
	and BaseAST?  (in particular, would BlockStmt's
	traverseList call ever be used?  My guess is not,
	and that we could remove those calls.

Modified files:
	chapel/compiler/traversals/: traversal.h 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h type.h 

---------------------------------------------------------------------------

12/23/04 11:19:41 -- deitz

Log message:
	A few test cases for function cloning, two of these work because only one clone is made, the third needs two clones.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function1.chpl 
	                                         test_clone_function2.chpl 
	                                         test_clone_function3.chpl 

---------------------------------------------------------------------------

12/23/04 13:09:54 -- deitz

Log message:
	Added pre-analysis and post-analysis support for overloaded functions.
	That said, the new test case works incorrectly because both calls to
	the overloaded function resolve to the same one.  Cleanup's
	ResolveEasiest traversal modifies the "cname" fields of every function
	that is overloaded with a unique string _user_overload_# where # is a
	unique integer increasing from 1.  Note that this simple name mangling
	scheme is not foolproof.
	
	Added a new string utility routine char* intstring(int i) that returns
	a string whose contents are the digits in an integer i.
	
	Removed the parentFn pointer from FnSymbol because it does not
	currently do anything.  It may later be generalized to something that
	points to a parent function for nested functions.  Nested functions
	are not currently supported.
	
	Added a new test case test_overload_function1.chpl that tests a simple
	overloaded function on integers and floats.

Modified files:
	chapel/compiler/AST/: nils.cpp symbol.cpp symtab.cpp 
	chapel/compiler/include/: stringutil.h symbol.h 
	chapel/compiler/traversals/: cleanup.cpp 
	chapel/compiler/util/: stringutil.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_function1.chpl 

---------------------------------------------------------------------------

12/23/04 14:03:17 -- jplevyak (a.k.a. n10253)

Log message:
	The filename and line number associated with a Sym is now
	resolved against any associated Symbol first, then any associated
	defining BaseAST.  This eliminates many "unknown"s reported in
	the analysis and debugging output.  Also, do not print the
	filename and line number for things (like constants) which may not
	have a unique definition point.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa_extras.cpp 
	chapel/compiler/include/: analysis.h sym.h 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/parsing/jplevyak/: module.good 

---------------------------------------------------------------------------

12/23/04 15:04:19 -- deitz

Log message:
	Moved resolution of ParenOpExpr function symbols after analysis.
	Previously only resolution of MemberAccess symbols was done after
	analysis.  In this post-analysis resolution, analysis's call_info
	function is called to determine which function to resolve to.  This
	supports overloading of functions.  For example, the test
	test_overload_function1.chpl now works.
	
	Moved around a few test cases motivating type variables,
	instantiation, and cloning.  These are now in a future directory,
	though the overloading test is set to run.
	
	Made a slight change to call_info, directed by John, so that the
	interface now only requires a ParenOpExpr, not a ParenOpExpr and the
	containing function.  This is because the containing function can be
	determined from the ParenOpExpr (it's statement's parentSymbol (which
	is hopefullly a function and not a class--no function calls in class
	definitions)).
	
	This checkin breaks one test:
	[Error matching compiler output for trivial/deitz/test_write_return]
	Here the problem is that we're not resolving this function until after
	analysis.  Still, analysis should be able to give us the type?  I'm
	going to look for this bug, but I'm checking in for help.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/traversals/: cleanup.cpp resolveSymbols.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function1.good 
	                                         test_clone_function2.good 
	                                         test_overload_function1.good 
	chapel/test/types/type_variables/deitz/future/: NOTEST 
	                                                test_clone_function3.chpl 
	                                                test_typevar_function1.chpl 
	                                                test_typevar_function2.chpl 
	                                                test_typevar_function3.chpl 
	                                                test_typevar_function4.chpl 
Removed files:
	chapel/test/types/type_variables/deitz/: NOTEST 
	                                         test_clone_function3.chpl 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function4.chpl 

---------------------------------------------------------------------------

12/23/04 17:38:11 -- bradc

Log message:
	Continued work on parameter intents, and got them
	working for an interesting integer case, but don't
	have it working cleanly enough to not cause other
	regressions, and don't have it working for non-scalar
	types.  To that extent, this is a placeholder to
	wipe my slate clean for the holdays.  Changes include:
	
	- improved AST rewrite to insert temps for the
	  parameters, though still not perfect (in
	  particular, Stmt::replace() wasn't working as
	  I'd anticipated it to, so I use a hackier
	  approach).
	
	- added a codegen method for the FnCall class that
	  starts to understand what intents are and the
	  different code that needs to be generated for
	  them.
	
	- added a (commented out) INT_FATAL for attempts to
	  codegen a ParenOpExpr.  ParenOpExprs should be
	  converted to FnCalls or ArrayRefs prior to codegen.
	  One big hole in our current code is that the
	  methodsToFunctions conversion converts methods to
	  parenOpExprs rather than FnCalls (which I believe
	  would require an Expr::replace rather than the
	  dynamic cast that is there now).  We should get
	  this INT_FATAL uncommented sooner rather than later.
	
	- started adding methods to ParamSymbol and the
	  Type hierarchy to interpret what different intents
	  on different types mean in terms of codegen.
	  These are currently only implemented for scalars
	  which is a big part of why intents for non-scalar
	  types don't work right yet.
	
	- changed the "this" parameter inserted for methods
	  from a PARAM_INOUT (which means copy-in/copy-out)
	  to a PARAM_BLANK (which, for classes at least,
	  means pass-by-reference).  Perhaps I should've
	  distinguished based on whether it was a class or
	  a record?  I'm not sure -- do records' bound
	  functions get a "this" inserted?  Perhaps I've
	  fixed one case only to have broken another...
	
	- made cleanup convert obvious function calls from
	  ParenOpExpr to FnCall.
	
	- fixed the copy methods for SizeofExpr and CastExpr,
	  which were copying the types (which we don't want
	  to do).  We should do a complete sweep of type
	  copies at some point...
	
	- made an INT_FATAL message in ILink::replace() more
	  succinct and arguably more understandable

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp link.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: expr.h symbol.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: cleanup.cpp processParameters.cpp 
Added files:
	chapel/test/functions/bradc/: intents.chpl intents.good 

---------------------------------------------------------------------------

12/27/04 12:58:14 -- deitz

Log message:
	Fixed the MethodsToFunctions traversal to replace a ParenOpExpr of a
	bound function with a FnCall of the bound function rather than just
	modifying the ParenOpExpr and keeping it.
	
	Made codegen of ParenOpExpr flag an INT_FATAL error.  This basically
	gets rid of Brad's "THE_FOLLOWING_IS_A_HACK" code that implemented
	codegen on ParenOpExpr.  All ParenOpExpr are now resolved, before
	codegen (before and after analysis), to IOCall, FNCall, or ArrayRef.
	
	Fixed codegen of IOCall so that if the type of the expression being
	read or written is unknown, the compiler flags an INT_FATAL error
	rather than calling into Analysis's type_info routine.  These calls
	are made earlier if necessary.
	
	This checkin resolves trivial/deitz/test_write_return.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: methodsToFunctions.cpp 

---------------------------------------------------------------------------

12/27/04 14:33:22 -- deitz

Log message:
	Added a clone function
	
	  FnDefStmt* FnDefStmt::clone(void)
	
	that clones a function definition.  This function can be called during
	analysis to create a cloned function where necessary.  As a first test
	that I'd like to get working, we can look at
	
	  test/types/type_variables/deitz/future/test_clone_function4.chpl

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: cleanup.cpp 
Added files:
	chapel/test/types/type_variables/deitz/future/: 
	                                                test_clone_function4.chpl 

---------------------------------------------------------------------------

12/27/04 17:02:36 -- deitz

Log message:
	Added rudimentary support for unions (without runtime typechecking)
	from parsing to code generation.  The single test case currently fails
	in analysis, but I'm not sure why.  Expect a regression:
	classes/deitz/test_union1.chpl.
	
	Unions are now generated as structs with an id tag (for runtime
	typechecking) and a union for efficient storage of the union fields.
	In the AST, the union is a class just like a record.  In the case of
	the record, a bool flag value is set to true.  Similarly, for unions,
	a bool flag union_value is set set to true.
	
	Fixed a bug in the setup of nilClassType in which uninitialized
	nilClassType was passed to its own constructor.  This was coerced to
	false, but now that there are two parameters required by this
	constructor, it no longer worked.

Modified files:
	chapel/compiler/AST/: expr.cpp nils.cpp symtab.cpp type.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

12/28/04 16:00:13 -- deitz

Log message:
	Added support for runtime type checking of union types.  A union is
	declared as a struct which contains a C union of the variables in the
	union and a tag that is of an enumerated type based on the names of
	the variables in the union.  This tag is set on writes to the union
	variable and checked on reads of the union variable.  A write is taken
	to be the LHS of an assignment statement or an OUT or INOUT parameter
	to a function.  A read is taken to be an INOUT parameter to a function
	and anything else that is not a write.
	
	The current implementation of determining whether an expression is
	being read, written, or both, is lacking.  A known bug--the indexing
	expression of a LHS array access.  The current mechanism simply checks
	for assignment and INOUT/OUT actuals during the traversal.  The
	improved mechanism may be a separate traversal but I have to think
	about this a little more.  I'd like to write it without having to
	write too much difficult-to-maintain code.
	
	Added two macros to new runtime file union.h _SET_UNION and
	_CHECK_UNION which implement the runtime type check.  The traversal
	that adds the runtime checks is called InsertUnionChecks.  This uses
	the replace function (see discussion below) to insert calls to
	_SET_UNION and _CHECK_UNION.
	
	Added a bit of code to ResolveSymbols that is only used if analysis
	has not been run.  This code tries to resolve functions, and does a
	decent job if the functions are not overloaded.  This improves
	stability of codes being compiled with --noanalysis.
	
	Fixed a bug in MemberAccess copy in which it attempted to copy the
	member symbol.
	
	Added a Fixup pass after MethodsToFunctions because this uses the
	replace mechanism and that does not currently fixup the new inserted
	AST.
	
	Implemented a bad version of postinsert.  It is similar to preinsert.
	These either need to be robustified like replace was or, given that
	replace still needs some work, they should be implemented with
	replace.  For example, rather than using preinsert and postinsert in
	InsertUnionChecks, the following substitutions are done:
	     expr->stmt->postinsert(set_stmt);
	  IS
	     Stmt* copy_stmt = expr->stmt->copy();
	     copy_stmt->append(set_stmt);
	     Stmt::replace(expr->stmt, copy_stmt);
	  AND
	     expr->stmt->preinsert(check_stmt);
	  IS
	     check_stmt->append(expr->stmt->copy());
	     Stmt::replace(expr->stmt, check_stmt);
	The advantage to this approach is that it uses a single mechanism that
	we can make really stable.  The disadvantage is that it's a bit of
	rigmarole.
	
	Implemented a support procedure for VarDefStmt classes called
	codegenVarNames.  This procedure prints out the variable names that
	are declared in a statement list as a list of names separated by
	commas.  Additional parameters premod and postmod allow for strings to
	be prepended and appended to the names.  This procedure is currently
	used to create the enumerated type for unions containing the names of
	the variables in a union.  The runtime type checking tag is then based
	on these names.
	
	Updated flowanalysis test cases because line numbers have changed in
	the prelude.
	
	Added 3 tests, one for records that is exactly like a union but works
	with analysis, and two that test the runtime type checking of unions.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp stmt.cpp type.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: Makefile.share resolveSymbols.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/compiler/traversals/: insertUnionChecks.cpp 
	                             insertUnionChecks.h 
	chapel/runtime/include/: union.h 
	chapel/test/classes/deitz/: test_record2.chpl test_record2.good 
	                            test_union2.chpl test_union2.good 
	                            test_union3.chpl test_union3.good 

---------------------------------------------------------------------------

12/28/04 20:20:08 -- jplevyak (a.k.a. n10253)

Log message:
	Initial set of changes to support intents.
	- separate out arg_name (for named arguments) from
	  destruct_name (for destructuring assignment)
	- remove extra moves for parameters which were used
	  to allow each parameter to be tagged to a particular
	  call site.  The tagging is now done internal to analysis
	- added a notion of "internal" analysis variables which are
	  not reported as having no type.
	- added intents to Sym, and copy the intents from Symbol's
	- unified the way named arguments are handled in pattern
	  matching and analysis
	- fixed a bug in low level code generation with the handling
	  of closures
	- the true type of INOUT and OUT parameter arguments are not
	  considered for dispatch purposes since it is quite possible for
	  such variables to be uninitialized.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp fa.cpp 
	                           fa_extras.cpp pattern.cpp var.cpp 
	chapel/compiler/include/: builtin_symbols.h fa.h pattern.h sym.h 
	                          var.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h prelude.v 
	                          v.g 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

12/29/04 14:15:04 -- jplevyak (a.k.a. n10253)

Log message:
	Phase 2 of support for intents.
	Added an extra layer of analysis variables to permit filtering
	at the call boundary to not effect what can be assigned into
	variables in the function.

Modified files:
	chapel/compiler/analysis/: cg.cpp clone.cpp fa.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: fa.h fun.h pattern.h 

---------------------------------------------------------------------------

12/29/04 15:06:19 -- jplevyak (a.k.a. n10253)

Log message:
	Finished intents as per our discussions.
	Checked in a bunch of intent test cases.
	These go through analysis, but fail in codegen.
	Some of them are supposed to generate errors, but don't.

Modified files:
	chapel/compiler/analysis/: ast.cpp fa.cpp pattern.cpp 
	chapel/compiler/include/: sym.h 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 
	                                    var.good 
Added files:
	chapel/test/functions/jplevyak/: intent-1.chpl intent-1.good 
	                                 intent-2.chpl intent-2.good 
	                                 intent-3.chpl intent-3.good 
	                                 intent-4.chpl intent-4.good 
	                                 intent-5-error.chpl 
	                                 intent-5-error.good 
	                                 intent-6-error.chpl 
	                                 intent-6-error.good 
	                                 intent-7-error.chpl 
	                                 intent-7-error.good 
	                                 intent-8-error.chpl 
	                                 intent-8-error.good 
	                                 intent-9.chpl intent-9.good 

---------------------------------------------------------------------------

12/30/04 11:49:29 -- deitz

Log message:
	Added "back" to all AST pieces (though it is only used for expressions
	and statements so far (and maybe that's the way it should be)).  This
	field, in an expression or statement, contains a pointer to the
	forward pointer to the expression or statement.  It is useful for
	making modifications to the AST because it lets us keep all the
	forward pointers correct and call fixup to reconnect the back
	pointers.  The "back" field is maintained in Fixup.
	
	Changed preinsert to insertBefore and postinsert to insertAfter.
	Robustified replace, insertBefore and insertAfter so that the forward
	pointers are maintained and fixup is called.  Removed extra calls to
	Fixup from the passlist though the last Fixup-verify is not called
	because of a problem in MethodsToFunctions.
	
	There is a major problem with the interaction between the traversal
	and insertBefore.  Advise using insertAfter for the time being.  This
	problem has to do with what statement is traversed after the new
	statements are inserted.  It turns out that the statement to which the
	statement was inserted before is traversed again.  This can lead to
	infinite loops if a traversal inserts something before a statement.
	For example, it is a problem in the InsertUnionChecks traversal
	because the checks should be inserted before any statement with a
	union access.
	
	Fixed handling of unions in analysis by special-casing them similar to
	how records are already special-cased.  The problem is with their
	constructor.  Expect the handling of their constructors to be unified
	with the handling of class constructors in the near term.
	
	Added a new test case for unions, test_union4.chpl.  This checkin
	fixes two regressions:
	  [Error matching compiler output for classes/deitz/test_union1]
	  [Error matching compiler output for classes/deitz/test_union3]
	
	The new test and test_union2.chpl fail because insertBefore is not
	working and the union checks use insertAfter instead.
	
	Added several .cvsignore files to the test directores.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: link.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: fixup.cpp insertUnionChecks.cpp 
	                             processParameters.cpp 
	chapel/test/trivial/deitz/: .cvsignore 
Added files:
	chapel/test/classes/deitz/: test_union4.chpl test_union4.good 
	chapel/test/functions/bradc/: .cvsignore 
	chapel/test/types/type_variables/deitz/: .cvsignore 
	chapel/test/types/type_variables/deitz/future/: .cvsignore 

---------------------------------------------------------------------------

12/30/04 16:18:09 -- deitz

Log message:
	Fixed two bugs and got the call to fixup-verify to work before code
	generation.
	
	Fixed a bug in the call to fixup that is applied during calls to
	insertAfter, insertBefore, and replace.  This call was only fixing up
	the first statement in a module or function in which a statement or
	expression was modified.  It now fixes up the list of statements.
	
	Changed the call to 'append' in MethodsToFunctions to be 'insertAfter'
	instead since append is not really necessary and has not yet been
	robustified.
	
	Fixed a bug in extract and generally robustified extract so that it is
	just as versatile as insertAfter, insertBefore, and replace.
	
	Caution: brain dump.  The remaining difficulty with these four
	functions (insertAfter, insertBefore, extract, and replace) shows up
	in traversals.  Specifically, it is difficult to determine what will
	be traversed when a change is made to the AST during a traversal.  It
	would be nice if this could be better defined and I have some ideas to
	talk over with Brad next week.  The two major problems show up in
	replace (if it is used to replace a piece of the AST containing a
	piece that is being traversed though the current piece that is being
	traversed can be replaced) and insertBefore (since if that is used
	immediately before the statement being traversed, there is a good
	likelihood for an infinite loop).  Though not as common, insertAfter
	could cause an infinite loop if it is applied to the statement before
	the one being traversed.  This has to do with the reference parameter
	which is changed in fixup and makes the same statement be traversed
	again.

Modified files:
	chapel/compiler/AST/: link.cpp 
	chapel/compiler/include/: link.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: methodsToFunctions.cpp 
Added files:
	chapel/test/functions/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

01/03/05 10:48:04 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug in building of the type hiearchy with respect to uninitialized values.

Modified files:
	chapel/compiler/analysis/: ast.cpp 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 
	                                    var.good 

---------------------------------------------------------------------------

01/03/05 14:33:04 -- bradc

Log message:
	Checking in a small change that Steve and I did today
	during a side discussion -- made passes initialize
	their argument lists to "" in their constructor so
	that traversals called manually wouldn't have to call
	the setArgs() method.

Modified files:
	chapel/compiler/AST/: link.cpp 
	chapel/compiler/passes/: pass.cpp pass.h 

---------------------------------------------------------------------------

01/04/05 09:04:00 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed occasionally uninitialized variable which was causing
	regression failure for structype test case.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

01/04/05 16:33:51 -- shannon

Log message:
	Shannon's test of UW server.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

01/04/05 16:48:52 -- bradc

Log message:
	Took out Shannon's UW test line.  This will also serve
	as a test of our ability to mail chapel_dev from UW (it
	may be restricted to not accept external mails...?)

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

01/04/05 16:52:43 -- deitz

Log message:
	Left my mark on the top-level Makefile to test committing at UW and
	mailing at the list.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

01/04/05 18:30:54 -- bradc

Log message:
	Updated the nightly regression suite script to run
	using UW's CVSROOT rather than Cray's.  Also
	put in code to snag a copy of the sources every
	night (deleting ones that are a month old), and
	renamed the /tmp directory used slightly.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

01/05/05 11:15:06 -- bradc

Log message:
	Updated nightly token-counting script to use new UW
	location.

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

01/05/05 13:29:43 -- deitz

Log message:
	Motivation: Remove references to pointers from the traversal since the
	back pointer pointer makes them unncessary and they are error prone.
	Expect a later checkin to do just this.
	
	Removed the setting of the back pointer pointer (back) from the Fixup
	traversal.  It is now done manually in constructors and AST
	manipulation routines including insertBefore, insertAfter, replace,
	append, and extract.  Fixup merely checks that it is probably correct.
	The back field of an AST makes it easy to update the AST structure
	because it points to the pointer that is linking its node into the
	AST.  (Note- because the AST is a Tree there is only one parent of any
	given node.)
	
	Created a macro for setting back for an Expr or Stmt field of an AST
	class since it duplicates the name of the ast.  For example, to set
	back for the left expression in a Binop, write "SET_BACK(left)" rather
	than "left->back = &left."
	
	Moved back out of the ILink class and into statements and expressions.
	Its type is now either Stmt** or Expr** rather than ILink**.  This is
	motivated by the following error:
	
		class C { };
		class A : C { void foo1(); };
		class B : C { void foo2(); };
	
		A* a = new A();
		C** c = &a;                   -- ERROR: requires static cast
		*c = new B();                 -- UH OH: a points to a B
	
	When back was in ILink, it was a pointer to a pointer to ILink and
	could result in statement pointers pointing to expressions or vice
	versa.  With this change, this can't happen, though there are still a
	few places where static casts are used unsafely.  Namely, when dealing
	with the next pointer which points to an ILink.  Also, since the
	constructor field is a FnDefStmt and not just a Stmt, the same kind of
	static cast is necessary.
	
	Moved replace, insertBefore, insertAfter, append, and extract out of
	ILink and into Expr and Stmt since these update back.  Append is
	virtual and a copy exists in ILink that does not touch back; this
	version works on Symbols and Types.  A later checkin should rewrite
	all of these when generic AST lists are added.  The replace function
	is no longer a static method and can now be called as the others.  So
	to replace a Stmt old with a Stmt new, write old->replace(new).
	
	Removed ILink::add since it's never used.  Added utilities ILink::head
	and ILink::tail to find the start and finish of a list.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             methodsToFunctions.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

01/05/05 14:15:40 -- deitz

Log message:
	Fixed an oversight in Expr::insertBefore and Stmt::insertBefore in
	which the back pointer for this was not set.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 

---------------------------------------------------------------------------

01/05/05 16:35:17 -- jplevyak

Log message:
	More work on handling generics and point-wise application.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: fun.h pattern.h 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

01/06/05 07:59:01 -- shannon

Log message:
	Wrote a traversal that creates and populates a config var
	hash table.  This traversal generates the rtconfig.c file
	containing the CreateConfigVarTable function which in turn
	calls initConfigVarTable() and installConfigVar().
	
	Specifically:
	
	* arg.c:  Minor cleanup.  Changed some function names to
	  make their use more apparent and moved variable declarations
	  closer to their usage.
	
	* codegen.cpp:  Created and called a new createConfigVarTable
	  traversal.
	
	* config.c:  Added another data member to the configVarType
	  structure, setValue, and changed the name of value to
	  defaultValue.  Also added another pointer so I could make
	  a list of config vars in the order they were installed in
	  the hash table.  Added the printConfigVarTable function which
	  prints out the config vars with both set and default values
	  in the order they were declared.
	
	* config.h:  Minor changes.  Changed some function names and
	  removed a flag that was no longer necessary.
	
	* createConfigVarTable.cpp,h:  Added the CreateConfigVarTable
	  traversal.
	
	* expr.cpp,h:  Added the printCfgInitString method to the Expr
	  and StringLiteral classes.  This was necessary so that I
	  could generate strings as arguments to installConfigVar
	  in the rtconfig.c file without double quotes.
	
	* type.cpp:  Made some minor changes in code generation of the
	  setInCommandLine function for type enum.  Changed some
	  function names and removed an unnecessary flag.
	
	* Added a bunch of tests.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/runtime/include/: config.h 
	chapel/runtime/src/: arg.c config.c main.c 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarInvalidComplex.chpl 
Added files:
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	chapel/test/execflags/shannon/configs/: configVarHelp.chpl 
	                                        configVarHelp.execopts 
	                                        configVarHelp.good 
	                                        configVarNonLiteralConfigs.chpl 
	                                        configVarNonLiteralConfigs.execopts 
	                                        configVarNonLiteralConfigs.good 
	                                        configVarNonLiteralInit.chpl 
	                                        configVarNonLiteralInit.good 
	                                        configVarSetNotDeclared.chpl 
	                                        configVarSetNotDeclared.execopts 
	                                        configVarSetNotDeclared.good 
	                                        configVarTwoModules.chpl 
	                                        configVarTwoModules.execopts 
	                                        configVarTwoModules.good 

---------------------------------------------------------------------------

01/06/05 13:22:55 -- deitz

Log message:
	Removed referenceness from the parameters to preProcess* and
	postProcess* in the traversal apparatus.  Removed _this pointer
	reference from traverse and traverseList.  Removed the macro mess
	surrounding the traversal apparatus.  This greatly simplifies how the
	traversal mechanism works.
	
	Fixed the InsertUnionChecks traversal to use insertBefore instead of
	insertAfter since that now works.  Made union checks return a
	zero-status at runtime so that the test system (which checks for this
	status) works.  This fix and change fixes the following two regressions:
	
	[Error executing program classes/deitz/test_union2]
	[Error executing program classes/deitz/test_union4]

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp link.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	                          symbol.h type.h 
	chapel/compiler/traversals/: checkIDs.cpp checkIDs.h 
	                             checkTypeInfo.cpp checkTypeInfo.h 
	                             cleanup.cpp cloneAllFns.cpp 
	                             cloneAllFns.h 
	                             createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	                             defineSymbols.cpp defineSymbols.h 
	                             findUnknownTypes.cpp 
	                             findUnknownTypes.h 
	                             findUnresolvedSymbols.cpp 
	                             findUnresolvedSymbols.h fixup.cpp 
	                             fixup.h getstuff.cpp getstuff.h 
	                             insertUnionChecks.cpp 
	                             insertUnionChecks.h 
	                             methodsToFunctions.cpp 
	                             methodsToFunctions.h printAST.cpp 
	                             printAST.h processParameters.cpp 
	                             processParameters.h 
	                             resolveSymbols.cpp resolveSymbols.h 
	                             testGetStuff.cpp testGetStuff.h 
	                             traversal.cpp traversal.h 
	                             verifyASTType.cpp verifyASTType.h 

---------------------------------------------------------------------------

01/06/05 13:23:33 -- deitz

Log message:
	Checking in change to runtime related to last checkin

Modified files:
	chapel/runtime/include/: union.h 

---------------------------------------------------------------------------

01/06/05 15:48:01 -- jplevyak

Log message:
	More support for generics and point-wise uses.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: pattern.h 

---------------------------------------------------------------------------

01/06/05 15:54:28 -- deitz

Log message:
	Factored copy in Stmt, Expr, Symbol, Type, and their subclasses into
	two pieces like traverse.  There is now an external copy that should
	be used, along with copyList, and internal copyStmt, etc., that does
	the actual copying.
	
	Added a callback to analysis for cloning functions so that the ainfo
	part of the BaseAST can be maintained in clone functions.  This uses a
	new class called CloneCallback.  It is passed into copy with a default
	value of NULL.  In the NULL case, nothing happens.  If it's not NULL,
	then the external factor of copy calls back into analysis to update
	the ainfo.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h expr.h stmt.h symbol.h 
	                          type.h 
	chapel/compiler/traversals/: cleanup.cpp 

---------------------------------------------------------------------------

01/06/05 16:21:40 -- bradc

Log message:
	Checking in "future" files for tests that have never
	worked.  This is in preparation for checking in test
	system code that has a notion of future tests.

Added files:
	chapel/test/functions/bradc/: intents.future 
	chapel/test/functions/jplevyak/: intent-1.future intent-2.future 
	                                 intent-3.future intent-4.future 
	                                 intent-5-error.future 
	                                 intent-6-error.future 
	                                 intent-8-error.future 
	                                 intent-9.future 

---------------------------------------------------------------------------

01/06/05 16:25:20 -- deitz

Log message:
	Made new class CloneCallback in my last checkin a subclass of gc so
	that it is garbage collected.

Modified files:
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

01/06/05 16:33:51 -- bradc

Log message:
	(Realized I couldn't finish my testing of "future tests"
	without checking this in too...)
	
	Modified the test system so that for a test named foo.chpl,
	if its directory also contains a file foo.future, then the
	test will be run, and the result will show up in the test
	summary, but its success or failure will not be counted in
	the test summary.  This information is used in the nightly
	regression mailing to list future tests that are passing,
	new, and continuing to fail at the bottom of the mail.
	
	The .future file should contain the userid of the developer
	who's currently supposed to be working on the test on its
	first line.  Subsequent lines are intended to store notes
	(as tests are passed from developer to developer, e.g.),
	and are ignored by the testing system.
	
	The intent is that .future files will be used to mark files
	that we're working on in the near-term.  Once a test is
	working and stable, its .future tag should be removed,
	adding it to the test system.  Further failures of the
	test should be considered regressions and the future tag
	should not be re-instated.
	
	In order to keep nightly and personal test summaries readable
	and not too overwhelming, I'd suggest we avoid using this as
	a mechanism to check in every test we can think of that should
	work someday, and use it only for tests that we're actively
	working on (or should be).

Modified files:
	chapel/test/: sub_test start_test 

---------------------------------------------------------------------------

01/06/05 16:49:53 -- jplevyak

Log message:
	Bad declaration inside conditional shadows return variable.

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

01/06/05 16:51:13 -- bradc

Log message:
	Fixed the nightly regression test script so that it
	understands the concept of future tests.  This wraps
	up my first stab at supporting future tests.  Feel
	free to send feedback, etc. as you start using it.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

01/06/05 16:53:57 -- jplevyak

Log message:
	Interface to new clone() function... still not working.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: analysis.h ast.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 

---------------------------------------------------------------------------

01/06/05 17:04:34 -- deitz

Log message:
	Added two methods to Expr, isRead and isWritten, that say whether an
	expression is read or written, respectively.  An expression passed to
	an inout parameter would return true to both of these methods.  Though
	not implemented, this should return a different value for blank
	parameters depending on the type of the expression.
	
	These functions are now used in InsertUnionChecks, replacing the
	facilities that were in that traversal.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: insertUnionChecks.cpp 
	                             insertUnionChecks.h 

---------------------------------------------------------------------------

01/06/05 17:18:30 -- bradc

Log message:
	Checking in a new directory map for the test/ directory
	to see if my last change worked.

Modified files:
	chapel/test/: DIRS 

---------------------------------------------------------------------------

01/06/05 17:24:26 -- bradc

Log message:
	Removing Steve's comment from the top-level
	Makefile as a second check.

Modified files:
	./: Makefile 

---------------------------------------------------------------------------

01/07/05 08:09:47 -- shannon

Log message:
	Fixed a bug in my config var hash table generation code where
	I forgot to initialize the data members of the configVar
	class.

Modified files:
	chapel/runtime/src/: config.c 

---------------------------------------------------------------------------

01/07/05 09:40:37 -- deitz

Log message:
	Moved _UNION_CHECK and _UNION_SET (the union runtime typechecking
	macros) out of the prelude and into the internal_prelude.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 

---------------------------------------------------------------------------

01/07/05 10:09:12 -- deitz

Log message:
	Updated .good files in flowanalysis/newast tests based on my last changes

Modified files:
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

01/07/05 10:29:06 -- deitz

Log message:
	Proving that no change is too small to make it worth testing...
	
	Updated the InsertUnionChecks traversal to lookup the symbols
	internally (since they moved to the internal prelude).  Fixed one last
	.good file in a flowanalysis test.

Modified files:
	chapel/compiler/traversals/: insertUnionChecks.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 

---------------------------------------------------------------------------

01/07/05 10:41:34 -- deitz

Log message:
	Moved two tests out of classes/deitz/future and into classes/deitz
	with .future files.

Added files:
	chapel/test/classes/deitz/: test_nested_record1.chpl 
	                            test_nested_record1.future 
	                            test_record_method2.chpl 
	                            test_record_method2.future 
	                            test_record_method2.good 
Removed files:
	chapel/test/classes/deitz/future/: test_record2.chpl 
	                                   test_record_method2.chpl 
	                                   test_record_method2.good 

---------------------------------------------------------------------------

01/07/05 10:47:13 -- deitz

Log message:
	Moved some tests out of types/type_variables/deitz/future and into
	types/type_variables/deitz with .future files.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function3.chpl 
	                                         test_clone_function3.future 
	                                         test_clone_function4.chpl 
	                                         test_clone_function4.future 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function1.future 
	                                         test_typevar_function2.chpl 
	                                         test_typevar_function2.future 
	                                         test_typevar_function3.chpl 
	                                         test_typevar_function3.future 
	                                         test_typevar_function4.chpl 
	                                         test_typevar_function4.future 
Removed files:
	chapel/test/types/type_variables/deitz/future/: 
	                                                test_clone_function3.chpl 
	                                                test_clone_function4.chpl 
	                                                test_typevar_function1.chpl 
	                                                test_typevar_function2.chpl 
	                                                test_typevar_function3.chpl 
	                                                test_typevar_function4.chpl 

---------------------------------------------------------------------------

01/07/05 11:18:59 -- deitz

Log message:
	Removed Symboltable::copyParams and handle the copying of parameters
	in the copying of a FnDefStmt.  The parameters are now copied with the
	CloneCallback for the case of a function being called.  This uses
	copyList rather than copyParams which basically did the same thing.
	
	Added a guard against copying the NilSymbol so that it is just
	returned.
	
	Changed the error message in codegen having to do with unresolved
	types.  If the type of an expression is unknown at codegen time, we
	now say "unknown type encountered in codegen" rather than " shouldn't
	be calling into analysis now".

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp symtab.cpp 
	chapel/compiler/include/: symtab.h 

---------------------------------------------------------------------------

01/07/05 11:38:04 -- bradc

Log message:
	NOTE: This commit requires an update -d in the compiler
	directory
	
	Added a new type of Pass -- the SymtabTraversal -- which
	traverses the symboltable's SymScopes in a preorder,
	depth-first manner, traversing the Symbols in the order
	that they were declared.  Users may specify routines to
	pre- and post-process the SymScopes, and to process the
	Symbols as they are encountered.  Note that the pre-
	and post-processing of a scope is done before and after
	its Symbols are traversed -- not before and after its
	contained scopes are traversed.
	
	During traversal, the scopes encountered are pushed and
	popped as the "current" scope from the Symboltable's
	point of view (thus, insertions performed during a
	traversal will be performed in the scope currently being
	traversed).
	
	Like other traversals, SymtabTraversals must be registered
	in the passlist.cpp file and may be included in the
	passlist.h file.
	
	As part of this change, reorganized the Symboltable code
	so that the component classes have been moved from
	AST/symtab.cpp into a number of files (one per class)
	in a new compiler directory symtab/.  This directory
	also contains the SymtabTraversal code, and new
	SymtabTraversals should be stored here, organizationally.
	
	Rewrote the PrintSymtab pass to be a SymtabTraversal as
	proof-of-concept, though we may want more features as
	time goes on (such as the ability to skip over internal
	scopes, or have the pre- and post-processing steps take
	place relative to the enclosed scopes, or to traverse
	the Symboltable in different orders).
	
	One side change:
	
	- made the tmp directory created by the compiler embed
	  the userid of the user so that users' tmp directories
	  can never collide (if one is left around, stale, e.g.)

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/AST/: Makefile.share 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/util/: files.cpp 
Added files:
	chapel/compiler/symtab/: Makefile Makefile.include 
	                         Makefile.share printSymtab.cpp 
	                         printSymtab.h symlink.cpp symlink.h 
	                         symscope.cpp symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
	chapel/test/execflags/shannon/configs/: .cvsignore 
Removed files:
	chapel/compiler/AST/: symtab.cpp 
	chapel/compiler/passes/: printSymtab.cpp printSymtab.h 

---------------------------------------------------------------------------

01/07/05 11:54:58 -- deitz

Log message:
	Added .good files for new future tests

Added files:
	chapel/test/classes/deitz/: test_nested_record1.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function3.good 
	                                         test_clone_function4.good 
	                                         test_typevar_function1.good 
	                                         test_typevar_function2.good 
	                                         test_typevar_function3.good 
	                                         test_typevar_function4.good 

---------------------------------------------------------------------------

01/07/05 13:59:08 -- deitz

Log message:
	Added three tests for unions with bound functions.  These all work
	though the runtime typechecking error message printed out for the
	third test doesn't have a line number or filename.  The problem has to
	do with copying.  When AST structures such as statements are copied,
	the line number and filename is lost.

Added files:
	chapel/test/classes/deitz/: test_union_method1.chpl 
	                            test_union_method1.good 
	                            test_union_method2.chpl 
	                            test_union_method2.good 
	                            test_union_method3.chpl 
	                            test_union_method3.future 
	                            test_union_method3.good 

---------------------------------------------------------------------------

01/07/05 14:20:39 -- deitz

Log message:
	Removed .future for test_typevar_function3 which uses ?t for a type in
	the parameter to a function.  Since the function is not cloned (only
	called once), it works.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function3.future 

---------------------------------------------------------------------------

01/07/05 15:01:43 -- jplevyak

Log message:
	Interm checkin of cloning code which clones Sym(s).

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: ast.h baseAST.h 

---------------------------------------------------------------------------

01/07/05 16:01:18 -- deitz

Log message:
	Added code to preserve the line number and filename of copied
	statements, expressions, symbols, and types.  Also added code to
	preserve the line number and filename for fields within methods for
	which a this is place before, the new MemberAccess gets the old
	expression's line number and filename.
	
	Removed the .future for test_union_method3 since it now works,
	printing out the right line number and filename.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/traversals/: cleanup.cpp 
Removed files:
	chapel/test/classes/deitz/: test_union_method3.future 

---------------------------------------------------------------------------

01/10/05 10:29:49 -- deitz

Log message:
	Added more support for copied symbols.  In particular, function
	symbols are now explicitly copied when function definition statements
	are copied and the clone callback is used.  Note that this checkin
	does not fix the problem with resolving symbols in copied statements
	and expressions.  That's next.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

01/10/05 11:43:16 -- bradc

Log message:
	Made a small change (fixed a thinko?) in the dparser
	Makefile to make it work on cygwin, in preparation
	for this week's travel.

Modified files:
	chapel/third-party/dparser/d/: Makefile 

---------------------------------------------------------------------------

01/10/05 12:01:14 -- bradc

Log message:
	Added a doc/ directory with an internal/ subdirectory, and
	added the high-level (meaning parsing/AST/codegen-oriented)
	SSCA2 task breakdown that Steve and I put together in
	November.  This is both to provide a controlled version to
	store it, and to support discussion on what our next
	implementation tasks should be.

Added files:
	chapel/doc/internal/: SSCA2.HLtasks.txt 

---------------------------------------------------------------------------

01/10/05 13:27:53 -- deitz

Log message:
	Improved support for copying the AST.  Copied statements and
	expressions are now cleaned.  This means that variables that are
	copied are re-resolved.  So, for example, if a function is cloned,
	expressions in the new clone are resolved against the new parameter
	list.
	
	Is it possible that inside a symbol constructor, the symbol should be
	defined?  Definining symbols in the symboltable currently seems ad
	hoc.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/traversals/: cleanup.cpp cleanup.h 
	                             methodsToFunctions.cpp 

---------------------------------------------------------------------------

01/10/05 14:01:22 -- jplevyak

Log message:
	Fixed types/type_variables/deitz/test_clone_function3/4
	Fixed bug in cloning which used the old method Sym::in == Fun::sym to
	determine that a variable was function local.  Switch to Sym::function_scope.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fun.cpp 

---------------------------------------------------------------------------

01/10/05 16:29:28 -- jplevyak

Log message:
	Added is_scalar() and element_type() to ASymbol interface.  Currently
	taking a switch on astType, and only handling TYPE_ARRAY for element_type().
	Fixed regressions from last checkin.   Still have one
	in enumarray which I am looking into.  It may be simply a difference
	in functionality, or a real issue.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp fun.cpp 
	                           pattern.cpp sym.cpp 
	chapel/compiler/include/: analysis.h sym.h 
	chapel/compiler/vparser/: parse_ast.cpp 

---------------------------------------------------------------------------

01/10/05 19:02:35 -- jplevyak

Log message:
	Fixed a bug with whereby analysis of enumerations was splitting
	for each enumeration element instead of folding them together.
	This fixes the regression on enumarray.chpl

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/test/flowanalysis/newast/: enum.good enumarray.good 

---------------------------------------------------------------------------

01/11/05 11:01:22 -- jplevyak

Log message:
	Work on function visibility, stalled on issues with getting the scope
	for arbitrary EXPR_FNCALL.

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h ast.h symscope.h 

---------------------------------------------------------------------------

01/12/05 15:46:31 -- jplevyak

Log message:
	move to new interface for combining wrappers and instantiation

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/compiler/include/: fun.h 

---------------------------------------------------------------------------

01/12/05 17:04:00 -- jplevyak

Log message:
	Added initial structural subtyping test (only on names at this time)
	for records and unions.   Added some test cases... these fail, but
	there are similar tests which are listed as "future" so I made these
	future as well.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp pattern.cpp 
	chapel/compiler/include/: sym.h 
Added files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-1.chpl 
	                               record_type_hierarchy-1.future 
	                               record_type_hierarchy-1.good 
	                               record_type_hierarchy-2.chpl 
	                               record_type_hierarchy-2.future 
	                               record_type_hierarchy-2.good 
	                               union_type_hierarchy-1.chpl 
	                               union_type_hierarchy-1.future 
	                               union_type_hierarchy-1.good 
	                               union_type_hierarchy-2.chpl 
	                               union_type_hierarchy-2.future 
	                               union_type_hierarchy-2.good 

---------------------------------------------------------------------------

01/13/05 10:04:03 -- jplevyak

Log message:
	Cleanup IF1 generation by eliminating some unnecessary moves.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

01/13/05 10:40:17 -- deitz

Log message:
	Removed .future files for three cloning tests that are now working.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function3.future 
	                                         test_clone_function4.future 
	                                         test_typevar_function4.future 

---------------------------------------------------------------------------

01/13/05 12:10:30 -- deitz

Log message:
	Added a new cloning test that attempts to clone three functions, over
	an integer, a float, and a string.  It succeeds, but the function
	calls do not resolve to the cloned ones.  This is happening in all of
	our cloning tests, but it only shows up as an error here.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function5.chpl 
	                                         test_clone_function5.future 
	                                         test_clone_function5.good 

---------------------------------------------------------------------------

01/13/05 14:52:34 -- deitz

Log message:
	Added a few tests, three new futures.
	
	The test test_method7 calls an overloaded function from within a
	method.  It currently works.
	
	The overload_integerfloat tests test overloading foo(i, i), foo(i, f),
	and foo(f, f) where f is a float and i is an integer.  One problem
	with these is that when a float is initialized with an integer value,
	it is taken to be an integer by analysis even though it should be
	taken to be a float.  The declared type should override the inferred
	type from initialization.  Right?
	
	The second problem is that when foo is called as in foo(f, i), it
	fails to resolve even though it should resolve to foo(f, f).  Right?

Added files:
	chapel/test/classes/deitz/: test_method7.chpl test_method7.good 
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat1.chpl 
	                                         test_overload_integerfloat1.good 
	                                         test_overload_integerfloat2.chpl 
	                                         test_overload_integerfloat2.future 
	                                         test_overload_integerfloat2.good 
	                                         test_overload_integerfloat3.chpl 
	                                         test_overload_integerfloat3.future 
	                                         test_overload_integerfloat3.good 
	                                         test_overload_integerfloat4.chpl 
	                                         test_overload_integerfloat4.future 
	                                         test_overload_integerfloat4.good 

---------------------------------------------------------------------------

01/14/05 11:07:46 -- jplevyak

Log message:
	Fixed up another backpointer to get call_info to report the correct
	clones.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: ast.h 

---------------------------------------------------------------------------

01/14/05 11:11:59 -- jplevyak

Log message:
	Fixed stupid SEGV.
	Removed .future for test_clone_function5 which is now working.

Modified files:
	chapel/compiler/analysis/: fun.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function5.future 

---------------------------------------------------------------------------

01/14/05 12:49:34 -- jplevyak

Log message:
	Fix 'var x : float = 1;'  Coersion in initialization.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/14/05 12:50:24 -- jplevyak

Log message:
	Works no.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat2.future 

---------------------------------------------------------------------------

01/14/05 12:52:08 -- deitz

Log message:
	January task list and January future tests.
	
	This is a draft version of what we should get done in January.  There
	is alot here, including the holdover stuff from Nov/Dec.  Comments,
	changes?
	
	I moved SSCA2.HLtasks.txt to SSCA2.tasks and removed the tasks we've
	completed (into 2004.NovDec.tasks).  I figure this can be a shrinking
	list of what's left.  I left the HLtasks file there for reference.

Added files:
	chapel/doc/internal/: 2004.NovDec.tasks 2005.Feb.tasks 
	                      2005.Jan.tasks SSCA2.tasks 
	chapel/test/arrays/deitz/: test_basic1d1.chpl test_basic1d1.good 
	                           test_basic1d2.chpl 
	                           test_basic1d2.future 
	                           test_basic1d2.good test_basic1d3.chpl 
	                           test_basic1d3.future 
	                           test_basic1d3.good test_basic1d4.chpl 
	                           test_basic1d4.future 
	                           test_basic1d4.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1.chpl 
	                                         test_clone_class1.future 
	                                         test_clone_class1.good 
	                                         test_clone_class2.chpl 
	                                         test_clone_class2.future 
	                                         test_clone_class2.good 
	                                         test_typevar_class1.chpl 
	                                         test_typevar_class1.future 
	                                         test_typevar_class1.good 

---------------------------------------------------------------------------

01/14/05 14:17:44 -- jplevyak

Log message:
	Fix regression

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/14/05 15:16:28 -- jplevyak

Log message:
	Implement numeric coercions on initialization to a typed 'var'.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	                           prim_data.dat 
	chapel/compiler/include/: builtin_symbols.h sym.h 
	chapel/compiler/vparser/: ast_cf.cpp 
	chapel/test/flowanalysis/newast/: enum.good noop.good 
	                                  pareninit.good 
	                                  unary_plusMinus.good 
Added files:
	chapel/test/types/type_variables/jplevyak/: test_coerse1.chpl 
	                                            test_coerse1.good 

---------------------------------------------------------------------------

01/14/05 15:54:43 -- jplevyak

Log message:
	Coercion of numerics during assignment supported along with test cases.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  danglingelse.good 
	                                  equality_ops.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  relational_ops.good var.good 
	                                  var2.good whileLoop.good 

---------------------------------------------------------------------------

01/14/05 17:20:01 -- bradc

Log message:
	For now, making all module global variables static in
	the generated C code, to avoid conflicts between
	multiple variables with the same name in different
	modules.  Eventually, we'll need to take a more
	sophisticated approach to this problem (either
	munging the names, or being very careful about what
	variables we allow to escape what scopes).

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

01/14/05 18:02:26 -- bradc

Log message:
	Forgot to add symtab to the directories looked at in our
	nightly token counts last week.

Modified files:
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

01/14/05 18:06:25 -- bradc

Log message:
	

Added files:
	chapel/test/arrays/deitz/: .cvsignore 
	chapel/test/classes/jplevyak/: .cvsignore 
	chapel/test/modules/bradc/: twomodulessamevar.chpl 
	                            twomodulessamevar.good 

---------------------------------------------------------------------------

01/17/05 14:24:27 -- deitz

Log message:
	Expected regression! This checkin breaks the following test(s):
	  trivial/bradc/protoast/mg-seq-concrete
	See note(s) below.
	
	Changed the mechanism through which symbols are defined in the
	symboltable.  Previously, the creation of symbols was decoupled from
	defining them in the symboltable.  They are now defined in the
	symboltable when they are constructed.  This greatly simplifies many
	aspects of the compiler.
	
	Made a new scope called nilsScope for declaring nilSymbol,
	nilFnSymbol, and nilVarSymbol.
	
	Implemented copy for VarSymbol and TypeSymbol.  The others are already
	implemented.
	
	Added a new procedure "TypeDefStmt* TypeDefStmt::clone(CloneCallback*
	clone_callback)" for cloning types such as classes.  This is ready
	(pending bugs) to be called by analysis in order to clone classes with
	underspecified types, e.g., a class with a variable field with no
	type.  Handed the futures of
	test/types/type_variables/deitz/test_clone_class[1|2] to John.
	
	Fixed a small bug in which the back pointer was not set for
	ForallExprs that were modified by setForallExpr.
	
	Partially cleaned up how unions are handled.  The enums for unions
	should eventually be made statements of their own rather than be
	handled in code generation.  Now at least the symbols are added to the
	symboltables.  The InsertUnionChecks looks up these symbols rather
	than creating but not defining its own.
	
	Changed how parameters to procedures are parsed.  Commas, rather than
	semicolons, are now used between intent-variable-type formals.
	Multiple variables will eventually be allowed with blank space.  This
	change breaks mg-seq-concrete.
	
	Removed long-dead traversal DefineSymbols.

Modified files:
	chapel/compiler/AST/: expr.cpp nils.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: stmt.h symtab.h 
	chapel/compiler/parser/: Makefile chapel.y internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share cleanup.cpp 
	                             insertUnionChecks.cpp 
	chapel/doc/internal/: 2005.Feb.tasks 
	chapel/test/classes/deitz/: test_union3.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1.future 
	                                         test_clone_class2.future 
	                                         test_overload_integerfloat1.chpl 
	                                         test_overload_integerfloat2.chpl 
	                                         test_overload_integerfloat3.chpl 
	                                         test_overload_integerfloat4.chpl 
	                                         test_typevar_function1.chpl 
	                                         test_typevar_function2.chpl 
	chapel/test/types/type_variables/jplevyak/: test_coerse1.chpl 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function6.chpl 
	                                         test_clone_function6.good 
Removed files:
	chapel/compiler/traversals/: defineSymbols.cpp defineSymbols.h 

---------------------------------------------------------------------------

01/17/05 14:39:42 -- shannon

Log message:
	Added support for config vars with the same name in
	different modules.  Changed the output of the -h
	flag to include the module name followed by a list
	of its config vars, in order of declaration.
	
	Specifically:
	
	* arg.c:  Wrote a function to parse out the module
	  name from the var name string.  Broke the
	  installConfigVar function into two, adding
	  initSetValue to initialize the value of a config
	  var set on the command line.
	
	* config.c:  Added the module name to a bunch of
	  functions, and removed the isDefaultValue flag.
	
	  Added the print of the module name to the -h flag.
	  Chose to not print out the module name if there is
	  but one module in the program.
	
	  Made error messages more specific in the case of
	  the variable name not being found on lookup, instead
	  of telling the user, "well, it could be this or that."
	
	* createConfigVarTable.cpp:  Replaced the
	  isDefaultValue flag from the codegen of a call to
	  installConfigVar with the module name.
	
	* stmt.cpp:  Added the moduleName variable to the
	  codegen for the call to setInCommandLine.
	
	* type.cpp:  Added the moduleName variable to the
	  codegen for the call to lookupSetValue.
	
	* Added a bunch of tests.  Updated expected output
	  for several tests after changing error messages.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	chapel/runtime/include/: config.h 
	chapel/runtime/src/: arg.c config.c 
	chapel/test/execflags/shannon/configs/: configVarHelp.good 
	                                        configVarInvalidName.good 
	                                        configVarSetNotDeclared.good 
	                                        configVarTwoModules.chpl 
	                                        configVarTwoModules.execopts 
	                                        configVarTwoModules.good 
Added files:
	chapel/test/execflags/shannon/configs/: 
	                                        configVarModStrings1.chpl 
	                                        configVarModStrings1.execopts 
	                                        configVarModStrings1.good 
	                                        configVarModStrings2.chpl 
	                                        configVarModStrings2.execopts 
	                                        configVarModStrings2.good 
	                                        configVarSetOver.chpl 
	                                        configVarSetOver.execopts 
	                                        configVarSetOver.good 
	                                        configVarSetTwoTypes.chpl 
	                                        configVarSetTwoTypes.execopts 
	                                        configVarSetTwoTypes.good 
	                                        configVarTwoModsNoneSpecified.chpl 
	                                        configVarTwoModsNoneSpecified.execopts 
	                                        configVarTwoModsNoneSpecified.good 

---------------------------------------------------------------------------

01/17/05 15:07:43 -- jplevyak

Log message:
	Put my notes under CVS.

Added files:
	chapel/doc/internal/: notes.callbacks notes.functioncalls 
	                      notes.generics_pointwise notes.todo 

---------------------------------------------------------------------------

01/17/05 15:19:44 -- jplevyak

Log message:
	Update notes.callbacks to include wrapper interfaces covering
	promotions.

Modified files:
	chapel/doc/internal/: notes.callbacks 

---------------------------------------------------------------------------

01/17/05 17:20:31 -- bradc

Log message:
	Continued working on parameter intents.  Got integers
	and records passed with various intents working except
	for the fact that FnCall::copy() causes a function to
	be unresolved (Steve and I are working on this issue).
	Thus, processParameters is still not enabled in
	passlist.h and intent-based tests still do not work,
	though we're closer.
	
	Some changes made to help this happen:
	
	* Fixed the parameter intent of the "this parameter" for
	ClassTypes (fixing the break I made in the broken code
	previously).  For records and unions, "this" is passed
	as an inout parameter; for classes, it is passed as a
	blank intent parameter (which we take to mean by reference).
	
	* Made Expr::copyListInternal() bail if it gets a nilExpr --
	previously it would try to copy the nilExpr.
	
	* Made Stmt:: and Expr::replace() no longer nil-out the
	next and prev pointers in the node.  This used to be done
	for cleanliness, but it tends to trim traversals and loops
	over the nodes unless they take pains to cache the values
	prior to calling replace().  We posit that the common case
	will be to continue the traversal/loop after the replace()
	has been performed, so leave them as-is.  (A sanity check
	that a node is still part of a list would therefore be to
	see if next->prev == this and prev->next == this).

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: cleanup.cpp processParameters.cpp 

---------------------------------------------------------------------------

01/17/05 22:04:19 -- jplevyak

Log message:
	Added:
	  Type *return_type_info(FnSymbol *fn)
	to analysis.h.  Should return the type of the return type
	of the function.  If you want a different interface, tell me.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

01/18/05 10:40:22 -- jplevyak

Log message:
	Interm checkin for default promotion feature.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/include/: pattern.h sym.h 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

01/18/05 11:31:22 -- deitz

Log message:
	Added new field 'Stmt* defPoint' to Symbols.  This field contains a
	pointer to the statement in which the symbol was defined.
	Fixup-verify makes sure that it is correct for every symbol.
	
	Changed how the index symbols are stored in ForallExpr.  Rather than
	being simply Symbols, they are now Stmts that must be VarDefStmts.
	Note that in the ForLoopStmts, this is not the case, they are symbols,
	but they should probably be Stmts there as well.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 

---------------------------------------------------------------------------

01/18/05 11:48:37 -- jplevyak

Log message:
	Tests for default promotion.

Added files:
	chapel/test/types/type_variables/jplevyak/: test_coerse2.chpl 
	                                            test_coerse2.good 

---------------------------------------------------------------------------

01/18/05 16:50:50 -- jplevyak

Log message:
	Fix SEGV in return_type_info

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/19/05 11:10:16 -- jplevyak

Log message:
	update as per recent discussions

Modified files:
	chapel/doc/internal/: notes.todo 

---------------------------------------------------------------------------

01/19/05 14:39:32 -- deitz

Log message:
	This is an up-for-air checkin.  It greatly increases the stability of
	copying things in the AST though more work is still needed.
	
	Added a new fixup verification called using fixup "hyper verify".
	This does the regular fixup "verify" but also copies and replaces
	every statement and expression in the AST.  The point of "hyper
	verify" is to catch bugs in copy, replace, and elsewhere.  I am
	finding it hugely useful.  Though I have a number of things left to
	fix (that are caught when "hyper verify" is used), this checkin fixes
	many things and is stable without the "hyper verify" pass.
	
	The copy interface is undergoing major changes.  These will be
	documented when they are finished.  The basic idea is to get copying
	working well either before or after analysis and when the symbols and
	types should or should not be copied.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: expr.h stmt.h symbol.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	chapel/test/functions/jplevyak/: intent-7-error.good 

---------------------------------------------------------------------------

01/19/05 16:15:05 -- bradc

Log message:
	Got parameter passing intents for integers working (finally!).
	Modified Steve's new copy() protocol so that when his clone
	flag is false, Variable Expr's Symbols are not changed into
	UnresolvedSymbols, but merely re-used as-is.  In my case, I
	just want to make a trivial copy of a Stmt without adding any
	new symbols or re-resolving anything, so this seems to be
	sufficient.
	
	Added a new helper function to the Symboltable --
	defineSingleVarDefStmtwhich -- which defines a single variable
	(for instance a compiler-introduced temporary) using a char*
	name rather than a Symbol, to remove a few steps in this
	common case.  The new variable is returned through a final
	parameter.
	
	Turned on the processParameters pass by default.
	
	Fixed the output for Steve's test_record_method2 test.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: processParameters.cpp 
	chapel/test/classes/deitz/: test_record_method2.good 

---------------------------------------------------------------------------

01/19/05 16:57:23 -- jplevyak

Log message:
	Interm checkin.
	
	1. Fixed a bug in ExprStmt::createFnCallStmt where the ->stmt
	   of the expression was not being set to the surrounding statement.
	   Since it was still nilStmt, this prevented the code which
	   determined which functions were in scope from working.
	
	2. Implemented function scoping during dispatch.  Prior to this
	   all functions were global.
	
	3. Added a great deal of support for cloning of types.
	   This code is not being called yet because the underlying AST
	   call is cloning the functions with the type and this is
	   causing problems.
	
	4. Added code in findUnknownTypes which is based on what Brad
	   was doing to show that the return_type_info call works.
	
	   Brad: you should remove this when you get the conflict :)

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp sym.cpp 
	chapel/compiler/include/: analysis.h baseAST.h sym.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	chapel/test/flowanalysis/newast/: domarr.good enum.good 
	                                  enumarray.good 
	                                  formatoutput.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

01/19/05 17:21:09 -- bradc

Log message:
	With John's help, made functions whose return
	types are undeclared work properly (to the
	extent that they've been tested).  All FnSymbols
	now have a retType field which indicates their
	return type, or dtUnknown if the user didn't
	specify one.  After analysis is run, it is
	queried for all functions whose retType is
	dtUnknown to fill in their return types.  This
	complements our ability to elide parameter
	types nicely and is an important step to
	getting the remaining intent tests working.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: cleanup.cpp findUnknownTypes.cpp 
	                             findUnknownTypes.h 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/test/functions/bradc/: inferReturn.chpl 
	                              inferReturn.future 
	                              inferReturn.good 

---------------------------------------------------------------------------

01/19/05 17:45:15 -- bradc

Log message:
	My earlier checkin today caused a regression that I'd
	forgotten about due to the way we codegen VarDeclStmts
	in two passes currently.  We've talked about splitting
	VarDeclStmts into two statements before C codegen --
	one to declare the variable and a second to initialize
	it.  For cases where a variable's initializer is a
	function call, this becomes more necessary, as the
	processParameters pass inserts a new statement block
	around the function call statement, and thereby
	pushes the original variable into an inappropriate scope.
	Doing this correctly will fix this problem (exercised
	in testAllScopes.chpl).
	
	Since this wasn't the original intent of
	testAllScopes.chpl, I rewrote it to not cause this
	bug, and commited a copy of the original test as
	a future test to serve as a placeholder for me
	to get this working.

Modified files:
	chapel/test/trivial/bradc/: testAllScopes.chpl 
Added files:
	chapel/test/trivial/bradc/: testAllScopes2.chpl 
	                            testAllScopes2.future 
	                            testAllScopes2.good 

---------------------------------------------------------------------------

01/20/05 12:02:38 -- bradc

Log message:
	Changed "this" to be passed as a new parameter intent
	(unavailable to the user) PARAM_REF, regardless of
	whether it is a class, a record, or a union.  Updated
	processParameters traversal to handle intents of type
	PARAM_REF, and removed futures for currently-working
	tests of parameter intents.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/traversals/: cleanup.cpp processParameters.cpp 
Removed files:
	chapel/test/classes/deitz/: test_record_method2.future 
	chapel/test/functions/bradc/: inferReturn.future intents.future 

---------------------------------------------------------------------------

01/20/05 13:14:38 -- deitz

Log message:
	Added a new compiler flag --devel that is to be used by Chapel
	developers.  When used, it gives the filename and line number in the
	compiler where the error happened and, for internal errors, gives the
	description.  The environment variable CHPL_DEVELOPER can be set to
	always use this flag.
	
	Updated start_test so that it doesn't look at CHPL_DEVELOPER.  Fixed a
	bug in sub_test in which concatenating compopts and execopts was done
	without an intermediary space.
	
	This should make debugging easier since we now print out the compiler
	line number on user errors, e.g., undefined symbols.
	
	For example, the error on arrays/deitz/test_basic1d2.chpl looks like
	
	  Internal error: LIN0056 chpl Version 0.2.640
	
	without the developer flag, but
	
	  [../include/link.h:56] Internal error: Unexpected type in getElements (test_basic1d2.chpl:7)
	
	with the developer flag.
	
	This checkin updates the errors printed out for tests that use
	USR_FATAL since I seem to have moved the filename after the error and
	printed out "Error".

Modified files:
	chapel/compiler/include/: driver.h misc.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: cleanup.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/: start_test sub_test 
	chapel/test/functions/jplevyak/: intent-7-error.good 
	chapel/test/modules/bradc/: nestedmodule.good 
	chapel/test/modules/bradc/manymodules/: manymodules.good 
	chapel/test/trivial/bradc/: redefinevar.good 
	chapel/test/trivial/bradc/entrypoint/: twomains.good 
	chapel/test/types/enum/deitz/: test_enum6.good 

---------------------------------------------------------------------------

01/20/05 16:29:19 -- deitz

Log message:
	Added a new Type subtype called VariableType.  These signal
	type-variables.  Thus a TypeSymbol t declared as "type t" has type
	VariableType.
	
	Added support for parsing type variables as formal parameters and
	elsewhere.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: fixup.cpp verifyASTType.cpp 

---------------------------------------------------------------------------

01/20/05 17:11:28 -- deitz

Log message:
	Added a test case that clones the four possibilities of calling a
	function with two parameters with strings and integers.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_function_multiargs1.chpl 
	                                         test_clone_function_multiargs1.good 

---------------------------------------------------------------------------

01/21/05 10:55:27 -- deitz

Log message:
	Added a test that shows an error with declaring a string.  This simple
	test declares a string, initializes it in a different statement, and
	prints it out.
	
	John, this seems to fail in analysis.

Added files:
	chapel/test/trivial/deitz/: test_var_decl4.chpl 
	                            test_var_decl4.good 
	                            test_var_decl4.future 

---------------------------------------------------------------------------

01/21/05 11:01:30 -- deitz

Log message:
	Added support for declaring multiple parameters of the same type as in
	
	  function foo(x y : integer);
	
	If a comma were between x and y, y would have type integer and x would
	have no specified type.
	
	Updated variable definitions so that commas between variables
	following a var have their own types.  So
	
	  var x y : integer;
	
	declares two integer variables x and y.  If a comma were between x and
	y, y would have type integer and x would have no specified type.
	
	Fixed variable and function definitions in mg-seq and mg-seq-concrete.
	Added few test cases to look at space separated variables and
	parameters.
	
	This checkin fixes the mg-seq-concrete regression.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.chpl 
	                                     mg-seq.chpl 
Added files:
	chapel/test/trivial/deitz/: test_var_decl1.chpl 
	                            test_var_decl1.good 
	                            test_var_decl2.chpl 
	                            test_var_decl2.good 
	                            test_var_decl3.chpl 
	                            test_var_decl3.good 

---------------------------------------------------------------------------

01/21/05 11:08:38 -- deitz

Log message:
	Removed futures for test_overload_integerfloat3 and 4.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat3.future 
	                                         test_overload_integerfloat4.future 

---------------------------------------------------------------------------

01/21/05 15:29:53 -- shannon

Log message:
	Added a traversal that converts Chapel variable names that include a '?'
	to valid C Names.  (A variable name may not start with a question mark.)
	Filenames containing a '-' were also converted so they now generate
	legal C.  Added a few tests.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/symtab/: Makefile.share 
Added files:
	chapel/compiler/symtab/: legalizeCNames.cpp legalizeCNames.h 
	chapel/test/execflags/shannon/configs/: configVar-Dash.chpl 
	                                        configVar-Dash.execopts 
	                                        configVar-Dash.good 
	                                        varNameEnumQM.chpl 
	                                        varNameEnumQM.execopts 
	                                        varNameEnumQM.good 
	                                        varNameQMark.chpl 
	                                        varNameQMark.execopts 
	                                        varNameQMark.good 

---------------------------------------------------------------------------

01/21/05 15:52:36 -- jplevyak

Log message:
	This checkin adds a good deal of support for the
	combined wrapper/generics interface that I proposed.
	I know we have been going back and forth on it, but
	I did promise to checkin an example and here it is.
	It is being called for :
	
	test/types/type_variables/deitz/test_overload_integerfloat3
	test/types/type_variables/deitz/test_overload_integerfloat4
	
	where a wrapper is required to coerce an integer argument into a float.
	Currently this causes an assertion because the AST bit is stubbed out.
	
	Check out the notes in the .future.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h fun.h pattern.h 
	                          stmt.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat3.future 
	                                         test_overload_integerfloat4.future 

---------------------------------------------------------------------------

01/21/05 16:22:53 -- deitz

Log message:
	Removed the init expression for a variable from the VarDefStmt and put
	it in the VarSymbol.  It seems to make more sense here because it has
	little or nothing to do with the statement and everything to do with
	VarSymbol.  This is motivated by changing the ClassType which now
	stores a Stmt definition containing its variables, functions, and
	types, but which will eventually contain individual vectors of
	pointers to these symbols.
	
	Removed Stmt:: functions canLiveAtFileScope and topLevelExpr since
	these are not necessary.
	
	Added a new future test for bradc on intents since Shannon removed
	most of his other outstanding ones.  This test is called
	trivial/deitz/test_var_decl_init1.chpl that makes two function calls
	in the same statement.  (Their results are added together and
	returned.)  The bug seems to be coming from ProcessParameters.
	
	Added a couple of other tests for initialization on variables.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h symbol.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp 
	                             createConfigVarTable.cpp 
Added files:
	chapel/test/trivial/deitz/: test_var_decl_init1.chpl 
	                            test_var_decl_init1.future 
	                            test_var_decl_init1.good 
	                            test_var_decl_init2.chpl 
	                            test_var_decl_init2.good 
	                            test_var_decl_init3.chpl 
	                            test_var_decl_init3.good 

---------------------------------------------------------------------------

01/24/05 09:52:10 -- deitz

Log message:
	Changed FnDefStmt::build to use INT_FATAL instead of assert.
	
	Added one test of out parameters.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
Added files:
	chapel/test/functions/deitz/: .cvsignore 
	                              test_out_parameter1.chpl 
	                              test_out_parameter1.good 

---------------------------------------------------------------------------

01/24/05 10:14:02 -- bradc

Log message:
	Removed future indicators for intent tests that are
	now working.

Removed files:
	chapel/test/functions/jplevyak/: intent-1.future intent-2.future 
	                                 intent-3.future intent-4.future 
	                                 intent-9.future 

---------------------------------------------------------------------------

01/24/05 11:17:38 -- jplevyak

Log message:
	bug in cast of FnDefStmt

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/24/05 11:50:15 -- jplevyak

Log message:
	fixed trivial/deitz/test_var_decl4.chpl
	had to treat strings more like immediates and less like objects

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: ast.h 
Removed files:
	chapel/test/trivial/deitz/: test_var_decl4.future 

---------------------------------------------------------------------------

01/24/05 11:57:19 -- jplevyak

Log message:
	These two are now deitz/jplevyak since they require that cloning
	of types not clone all the member functions of the type, just
	the type proper.  If you uncomment #define CLONE 1 in clone.cpp
	it will make the call and then crash if the member functions are
	cloned.  If we need to change the interface or make a new call
	we need to decided what it is and implement it.  That is why
	I have assigned it to deitz/jplevyak.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1.future 
	                                         test_clone_class2.future 

---------------------------------------------------------------------------

01/24/05 12:08:55 -- jplevyak

Log message:
	Fix bug in HTML output which has suffered bit rot.

Modified files:
	chapel/compiler/backend/: dump.cpp 

---------------------------------------------------------------------------

01/24/05 14:04:31 -- jplevyak

Log message:
	Fix casting bug in coercion_substitutions calculationstitutions calculation

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/24/05 14:54:39 -- jplevyak

Log message:
	return_type_info() now correctly return dtVoid for those
	functions which do not return a value.
	
	In making this change, 2 regressions have occured, both
	of which I have make .future and assigned to Brad.
	
	   test/classes/deitz/test_class_with2.future
	   test/modules/bradc/manymodules/flatmodules.future
	
	The issue here is that we are trying to generate code for functions
	which are never used.  Analysis will tell you the types
	for functions which are called, but dtUnknown for things in functions which
	are never called.  I can tell you if a function is never called
	so that you can avoid generating code.
	
	I have added a new function to analysis.h:
	
	int function_is_used(FnSymbol *fn);
	
	for this purpose.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/test/classes/deitz/: test_class_with2.future 
	chapel/test/modules/bradc/manymodules/: flatmodules.future 

---------------------------------------------------------------------------

01/24/05 15:09:32 -- deitz

Log message:
	Initial interface support for wrappers for type coercions in function
	calls.  This creates the wrapper function through John's build call
	from analysis, but the body of the wrapper function is not correctly
	created yet.  Just its formals.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 

---------------------------------------------------------------------------

01/24/05 15:28:03 -- bradc

Log message:
	Squelched codegen of functions that are not used, as
	determined by John's new function_is_used() interface.
	
	Also, modified comments in passlist.h slightly for
	inclusion in the TAR whitepaper.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

01/24/05 15:32:42 -- bradc

Log message:
	Removed future tags for these tests, now fixed.
	
	Note that I'd prefer to restrict the .future tag
	for use on new files that have never worked, not
	as a way of making new regressions seem less bad.
	If we need a way of assigning regressions to
	specific people, I can implement one.  I didn't
	add it at the same time as futures out of laziness,
	and because to this point we've had few enough
	regressions and developers that it hasn't been
	difficult to keep track of which are in whose
	court.

Removed files:
	chapel/test/classes/deitz/: test_class_with2.future 
	chapel/test/modules/bradc/manymodules/: flatmodules.future 

---------------------------------------------------------------------------

01/24/05 16:09:02 -- deitz

Log message:
	Initial implementation of wrapper function for implicit type
	coercions in function calls.

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

01/24/05 16:29:56 -- jplevyak

Log message:
	Fixup the symbols after a ->build call (this was causing
	crashes for Steve during the test_overload_integerfloat3 test.
	Those tests now fail because of an unresolved call in the
	wrapper (which I think is to be expected at this point?).

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: pattern.h 

---------------------------------------------------------------------------

01/24/05 17:05:17 -- jplevyak

Log message:
	Temporary assert to prevent memory thrashing for this test case.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/25/05 11:18:38 -- jplevyak

Log message:
	Changed over from ::build to ::coercion_wrapper (the new seperate wrapper construction API)
	Added caching for coercion wrappers so they are only built once.
	The test cases now fail in a new place, I am going to continue
	working on this but perhaps Steve could take a look as well.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h stmt.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 

---------------------------------------------------------------------------

01/25/05 11:38:17 -- deitz

Log message:
	Fixed a bug in the coercion_wrapper function in which the temporary
	variable used to do the coercion assignment was not declared in a
	VarDefStmt.
	
	Need to go back with a broom through this procedure as I know it won't
	work if multiple variables need to be declared.  Also, some of the
	code can be modularized to make it even easier for us to build up new
	AST later.

Modified files:
	chapel/compiler/AST/: stmt.cpp 

---------------------------------------------------------------------------

01/25/05 12:44:58 -- deitz

Log message:
	Added a new top-level module called commonModule and an associated
	scope.  The new scoping scheme now looks like
	
	                     Intrinsic
	                     /       \
	                    /         \
	      Internal Prelude        Prelude
	                                 |
	                                 |
	                               Common
	                                / | \
	                               /  |  \
	                            User Modules
	
	The Intrinsic is defined within the compiler.  Internal Prelude and
	Prelude are defined in prelude files.  The things defined in Prelude
	are visible to the user, the things in Internal Prelude are not.
	
	Common is for things that we'll define on a program specific basis.
	These things will be codegened which is basically why it is
	distinguished from the prelude.
	
	Common is currently not used.  The output file _chpl_common.h is thus
	always empty.
	
	In the near term, Common will be used for creating array types where
	the base type of the array is something defined in the preludes or the
	intrinsic scope such as integers and also domain types.
	
	In general, the plan for declaring array types is to do so after the
	primitive type is declared.  We'll use name mangling and will
	determine if the array type was already declared by looking for the
	mangled name.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

01/25/05 15:03:50 -- deitz

Log message:
	Removed usage of clone_callback from the coercion wrapper creation
	routine.  Also cleaned it up a little; removed the assignment to the
	temp, folding that in to the initializer, and made the temp names a
	little more descriptive.  This cleans up the intermediate C code a
	bit.
	
	Made a superficial change to the ClassType constructor.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 

---------------------------------------------------------------------------

01/25/05 16:16:37 -- jplevyak

Log message:
	Implemented caching for the 3 wrappers and instantiation.
	Stubbed out the calls in stmt.h.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp if1.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h if1.h pattern.h 
	                          stmt.h 
	chapel/compiler/vparser/: parse_ast.h 

---------------------------------------------------------------------------

01/25/05 16:24:06 -- deitz

Log message:
	Removed futures for test_overload_integerfloat3,4

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_overload_integerfloat3.future 
	                                         test_overload_integerfloat4.future 

---------------------------------------------------------------------------

01/26/05 16:21:02 -- jplevyak

Log message:
	Add future test for function visibility

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
Added files:
	chapel/test/functions/jplevyak/scoping/: COMPOPTS scoping-1.chpl 
	                                         scoping-1.future 
	                                         scoping-1.good 

---------------------------------------------------------------------------

01/26/05 16:50:24 -- jplevyak

Log message:
	Store pre-wrap function in Fun.
	Export type diff/intersection/union/cannonicalize from fa.cpp
	Rebuild Match after wrappers/cloning.
	Cleanup unused variables in Fun.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/include/: fa.h fun.h 

---------------------------------------------------------------------------

01/27/05 10:35:13 -- deitz

Log message:
	Passed futures for these tests to John.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function1.future 
	                                         test_typevar_function2.future 

---------------------------------------------------------------------------

01/27/05 11:03:14 -- jplevyak

Log message:
	Terminate gracefully before IF1 translation if dead code elimination is
	turned off as the translation will fail.

Modified files:
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

01/27/05 11:40:08 -- jplevyak

Log message:
	Visible function calculation now treats all functions which
	are specialized with respect to a reference type (class) as
	being globally available (as per the spec).
	
	Currently 'Array' is considered to be a reference variable because it
	passes the test:
	
	  t->astType == TYPE_CLASS &&
	  !dynamic_cast<ClassType*>(t)->union_value &&
	  !dynamic_cast<ClassType*>(t)->value
	
	That is of the code in internal_prelude.  At some point when
	we model Array's better, this will have to be fixed.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h ast.h callbacks.h 

---------------------------------------------------------------------------

01/27/05 15:25:35 -- jplevyak

Log message:
	Map type symbols in IF1 conversion.  This causes the two test cases
	  test_typevar_function1.chpl
	  test_typevar_function2.chpl
	to make it through analysis up to codegen.  This is not a
	real implementation of type variables but rather an artifact
	of the simple test cases.  If someone working on codegen
	has nothing better to do, they could take a look a them, but
	otherwise hold off till instantiation is fully implemented.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

01/28/05 14:29:25 -- deitz

Log message:
	Major restructuring of the AST.
	
	Decoupled declarations from FnDefStmts, VarDefStmts, and TypeDefStmts.
	These are now declared when the scope is entered.  VarDefStmts are
	still used by codegen to initialize variables.  The other statements
	are NOOPS by the time we get to codegen.
	
	Added support for traversing the definitions of symbols to go
	alongside traversing the definitions of types.  This is necessary
	because we want to traverse the definition of VarSymbols and FnSymbols
	without necessarily traversing a VarDefStmt or a FnDefStmt.
	
	Unfortunately this checkin breaks support for methods and some support
	for arrays.  Hopefully John and I will get this working again soon.
	The problem is that the way analysis has to figure out what methods
	are where has changed.
	
	[Error matching compiler output for arrays/deitz/test_basic1d1]
	[Error matching compiler output for classes/deitz/test_class_with2]
	[Error matching compiler output for classes/deitz/test_method1]
	[Error matching compiler output for classes/deitz/test_method1a]
	[Error matching compiler output for classes/deitz/test_method2]
	[Error matching compiler output for classes/deitz/test_method3]
	[Error matching compiler output for classes/deitz/test_method4]
	[Error matching compiler output for classes/deitz/test_method5]
	[Error matching compiler output for classes/deitz/test_method6]
	[Error matching compiler output for classes/deitz/test_method7]
	[Error matching compiler output for classes/deitz/test_record_method1]
	[Error matching compiler output for classes/deitz/test_record_method2]
	[Error matching compiler output for classes/deitz/test_union_method1]
	[Error matching compiler output for classes/deitz/test_union_method2]
	[Error matching compiler output for classes/deitz/test_union_method3]
	[Error matching compiler output for flowanalysis/newast/domarr]
	[Error matching compiler output for flowanalysis/newast/enumarray]
	[Error matching compiler output for flowanalysis/newast/formatoutput]
	[Error matching compiler output for flowanalysis/newast/protoast_test]
	[Error matching compiler output for trivial/bradc/formatoutput]
	[Error matching compiler output for trivial/bradc/testAllScopes]
	[Error matching compiler output for trivial/bradc/domarr/domarr]
	[Error matching compiler output for trivial/bradc/domarr/enumarray]

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp nils.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h 
	                          symscope.h type.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             methodsToFunctions.cpp traversal.h 

---------------------------------------------------------------------------

01/28/05 16:02:00 -- deitz

Log message:
	Reverting from last checkin.  This puts the code back to the way I had
	it and eliminates the regressions.
	
	The reason to revert is that the fix was not trivial (like I thought
	it would be) and John didn't agree that I should checkin broken code.
	In retrospect, I'm not sure how I got it in my head that he did think
	it would be easy or that I should checkin broken.  Sorry about that.
	
	Hopefully we can work past this change in some way.  I'm concerned
	about the brittleness of the compiler as this change was mostly
	superficial but paved the way for better support.  Cloning and
	otherwise manipulating symbols directly.  And supporting bound and
	embedded functions without the unnecessary statements.
	
	SJD: To revert back, checkout at 15:45 on Friday Jan 28, 2005.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp nils.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h 
	                          symscope.h type.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             methodsToFunctions.cpp traversal.h 

---------------------------------------------------------------------------

01/31/05 13:40:44 -- jplevyak

Log message:
	Moved wrappers and instantiation to FnSymbol, moved from
	using FnDefStmt to FnSymbol as the basis for talking about
	a function in the AST within analysis.  Used FnSymbol::defPoint
	when a statement was needed to represent the entire function definition.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h sym.h symbol.h 

---------------------------------------------------------------------------

01/31/05 14:51:57 -- deitz

Log message:
	Basically a re-checkin of my big backed-out checkin.  Modest changes
	to keep methods working.
	
	Downgrades the idea of *DefStmt AST structures to be worked out
	eventually.
	
	Note that with this checkin, cloning of classes no longer copies the
	functions.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp nils.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h link.h stmt.h symbol.h 
	                          symscope.h type.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             methodsToFunctions.cpp traversal.h 

---------------------------------------------------------------------------

01/31/05 15:13:20 -- jplevyak

Log message:
	Added support for simple type_variables in a form sufficien to handle
	test_typevar_function{1,2}.chpl to analysis.
	
	I have put a simple implementation of Type::instantiate_generic
	in place which is sufficient for this test case.
	I have also made a stub for FnSymbol::instantiate_generic
	which currently returns NULL.  This causes these
	two test cases to SEGV.  The implementation (which
	I am leaving to Steve) could be a modification
	of FnSymbol::clone() (or perhaps a call to a shared
	produced).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h symbol.h type.h 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function1.future 
	                                         test_typevar_function2.future 

---------------------------------------------------------------------------

01/31/05 16:18:46 -- deitz

Log message:
	Removed commented out versions of FnDefStmt::clone,etc.
	
	Removed unused currentFn in Symboltable since this was out-of-date and
	not used.
	
	Added commented out version FnSymbol::clone which doesn't work because
	analysis stores the type information of a cloned FnSymbol in its
	FnDefStmt.  Thus the cloned version must create a FnDefStmt even if it
	is ignored.  This has to do with the recent changes.
	
	I now see analysis's representation as being more tightly coupled to
	the high-level representation than I thought.  This explains much.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

01/31/05 18:08:44 -- jplevyak

Log message:
	Removed unused functions related to point-wise function application.
	Made is_function_used and return_type_info work with the
	"no analysis" flag.

Modified files:
	chapel/compiler/analysis/: TODO analysis.cpp fun.cpp inline.cpp 
	                           sym.cpp 
	chapel/compiler/include/: analysis.h fun.h sym.h 

---------------------------------------------------------------------------

01/31/05 18:49:03 -- jplevyak

Log message:
	IN intent parameters can be assigned in the function, but
	the assigned value does not propagate out of the function.

Added files:
	chapel/test/functions/jplevyak/: intent-6.chpl intent-6.good 
Removed files:
	chapel/test/functions/jplevyak/: intent-6-error.chpl 
	                                 intent-6-error.future 
	                                 intent-6-error.good 

---------------------------------------------------------------------------

02/01/05 10:34:49 -- deitz

Log message:
	Changed traversing of class component variables to traverse the
	definition of the VarSymbol rather than traverse the VarDefStmt and,
	via this, the definition of the VarSymbol.
	
	This coincidentally fixes one of the class-with-statement regressions.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

02/01/05 11:31:37 -- deitz

Log message:
	Added two support functions:
	
	void collect_symbols(Vec<Symbol*>* syms);
	void collect_functions(Vec<FnSymbol*>* functions);
	
	The first one collects all the symbols in the program.  The second one
	collects all the functions in the program.  The results are returned
	in a vector of symbol or function symbol pointers.
	
	Usage:
	
	 #include "../symtab/collectSymbols.h"
	 Vec<Symbol*> all_syms;
	 collect_symbols(&all_syms);
	
	 #include "../symtab/collectFunctions.h"
	 Vec<FnSymbol*> all_functions;
	 collect_functions(&all_functions);

Modified files:
	chapel/compiler/symtab/: Makefile.share 
Added files:
	chapel/compiler/symtab/: collectFunctions.cpp collectFunctions.h 
	                         collectSymbols.cpp collectSymbols.h 

---------------------------------------------------------------------------

02/01/05 13:01:45 -- jplevyak

Log message:
	Reorganized ASymbol so that it is now an interface object which points
	to a Sym instead of being a Sym.  This decreases the coupling between
	the AST and analysis and should simplify the interface.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp if1.cpp 
	                           sym.cpp 
	chapel/compiler/include/: analysis.h ast.h sym.h 
	chapel/compiler/vparser/: ast_cf.cpp parse_ast.cpp 

---------------------------------------------------------------------------

02/01/05 13:53:28 -- deitz

Log message:
	Added the following support function:
	
	void collect_symbols(Vec<Symbol*>* syms, FnSymbol* function);
	
	This function collects a vector of all the symbols defined inside the
	specified function.  Note the function symbol itself is not collected.
	
	Usage:
	
	 #include "../symtab/collectSymbols.h"
	 Vec<Symbol*> all_syms;
	 FnSymbol* function = ...;
	 collect_symbols(&all_syms, function);
	
	Added functionality to the relatively new symboltable traversal
	mechanism.  A traversal can now be run on a function.
	
	Added one small test case of functions with and without local
	variables and parameters.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/symtab/: collectSymbols.cpp collectSymbols.h 
	                         symtab.cpp symtabTraversal.cpp 
	                         symtabTraversal.h 
Added files:
	chapel/test/trivial/deitz/: test_a_few_functions.chpl 
	                            test_a_few_functions.good 

---------------------------------------------------------------------------

02/01/05 14:42:11 -- jplevyak

Log message:
	Cleanup mapping of types in analysis.cpp

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 
	                                  formatoutput.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

02/01/05 15:05:40 -- deitz

Log message:
	Added the following interface parameter to clone:
	
	  Map<BaseAST*,BaseAST*>* map
	
	This results in the following cloning interfaces:
	
	  TypeDefStmt* clone(CloneCallback* clone_callback, Map<BaseAST*,BaseAST*>* map);
	  FnSymbol* clone(CloneCallback* clone_callback, Map<BaseAST*,BaseAST*>* map);
	
	Currently, clone_callback is used by analysis but, with this checkin,
	map is ready to be used instead.  It contains a mapping of everything
	that was copied in the clone call.
	
	Souped up the copying mechanism to create a mapping between everything
	that is duplicated if the map parameter is not NULL.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h symbol.h type.h 

---------------------------------------------------------------------------

02/01/05 15:19:05 -- deitz

Log message:
	Forgot to clear the maps when clone is called.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 

---------------------------------------------------------------------------

02/01/05 16:19:12 -- bradc

Log message:
	Steve's recent checkins have fixed this future,
	saving me some work.

Removed files:
	chapel/test/trivial/bradc/: testAllScopes2.future 

---------------------------------------------------------------------------

02/01/05 16:58:24 -- deitz

Log message:
	Added the following support function (which may or may not be used):
	
	void collect_asts(Vec<BaseAST*>* asts, FnSymbol* function);
	
	USAGE:
	 Vec<BaseAST*> all_asts;
	 FnSymbol* function = ...;
	 collect_asts(&all_asts, function);
	
	This function returns the expressions and statements in the body of a
	function.
	
	Moved all collect_* functions to baseAST.h so that they are together
	and don't require funny includes.

Modified files:
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/symtab/: collectFunctions.cpp collectFunctions.h 
	                         collectSymbols.cpp collectSymbols.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: collectASTS.cpp collectASTS.h 

---------------------------------------------------------------------------

02/01/05 17:05:51 -- bradc

Log message:
	Added initial support for default values for parameters.
	There is still no support for named parameters, so this
	gives a C++-style default parameter mechanism at best.
	Since analysis doesn't yet know where to look for these
	default values, functions that rely on them will fail.
	
	Checked in two simple variations of my intents tests:
	One tries to elide parameters that have default values,
	which fails in analysis.  This is currently marked as a
	future test for John, though there may be more work for
	me down the road.  The second passes in arguments even
	though the default parameter values are there, which
	demonstrates that they are used to initialize an out
	parameter in this case.
	
	The processParameters pass has been updated to deal with
	default parameter values, but has not been tested
	extensively.
	
	* fixed John's safety nets for return_type_info and
	  function_is_used, which seem to have broken during
	  today's code shuffle.  Someone may want to check
	  that what I've done is reasonable.
	
	* added an Expr* init to ParamSymbol which stores its
	  default value if it has one
	
	* factored the setting of a ParenOpExpr's argument list
	  into a separate routine -- ParenOpExpr::setArgs -- so
	  that it can be re-set earlier
	
	* made a small change to legalizeCNames so that names
	  in the intrinsic scope (in particular dtUnknown) are
	  not renamed.
	
	* also checked in a test that exercises declaring
	  multiple parameters of the same type now that Steve's
	  implemented that in the parser.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: legalizeCNames.cpp symtab.cpp 
	chapel/compiler/traversals/: processParameters.cpp 
Added files:
	chapel/test/functions/bradc/: defaultParam.chpl 
	                              defaultParam.future 
	                              defaultParam.good 
	                              defaultParam2.chpl 
	                              defaultParam2.good 
	                              multipleParamsSameType.chpl 
	                              multipleParamsSameType.good 

---------------------------------------------------------------------------

02/02/05 08:50:18 -- jplevyak

Log message:
	Fix Vec::set_count() (variable name aliasing bug)

Modified files:
	chapel/compiler/include/: vec.h 

---------------------------------------------------------------------------

02/02/05 10:23:46 -- bradc

Log message:
	A small checkin to clean up my directory
	
	* added an automatic set of curly brackets in codegen-ing
	  functions' bodies to (a) handle the case when the function
	  body is not a compound statement, and (b) support local
	  variables with the same name as a formal parameter (in C
	  these conflict).
	
	* added a future test which tests some different variable
	  scoping rules.  This currently doesn't work due to the
	  fact that we don't initialize variables with their type's
	  default initializer at their declaration point.  This is
	  currently assigned to me and/or Steve.
	
	* removed the future mark from one of John's tests that
	  started working and seems like it ought to work.  I'm
	  not quite sure what fixed it.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
Added files:
	chapel/test/trivial/bradc/: vardecls.chpl vardecls.future 
	                            vardecls.good 
	chapel/test/types/complex/bradc/: .cvsignore 
Removed files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-1.future 

---------------------------------------------------------------------------

02/02/05 13:41:49 -- jplevyak

Log message:
	Fixed BlockHash's which were not using GC.

Modified files:
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

02/02/05 14:44:34 -- jplevyak

Log message:
	dded option to decrease memory usage by Sym(s) objects
	(currently disabled).
	
	Turns out that valgrind does not detect accesses outside the object
	in the heap when we use the Boehm GC.  This is a bit of a problem,
	and it makes detecting errors in this optimization difficult (hence
	the disabled status).  I am looking into that problem.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp cg.cpp clone.cpp 
	                           fa.cpp if1.cpp 
	chapel/compiler/include/: sym.h 

---------------------------------------------------------------------------

02/02/05 16:04:10 -- deitz

Log message:
	Added initial support for secondary methods, bound functions that are
	not embedded in a class.
	
	Beefed up the noanalysis flag so that class member accesses can now be
	resolved most of the time without analysis and so that functions that
	don't return anything don't require analysis to determine this.
	
	Added several test cases of secondary methods.  These are not
	supported in analysis yet.  And one of the tests still has problems
	without analysis.  Futures are set.
	
	Fixed collect_asts to call collect_symbols.  John: This is the code I
	sent you.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h symscope.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: cleanup.cpp collectASTS.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             methodsToFunctions.cpp 
	                             resolveSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_primary_method1.chpl 
	                            test_primary_method1.good 
	                            test_secondary_method1.chpl 
	                            test_secondary_method1.future 
	                            test_secondary_method1.good 
	                            test_secondary_method2.chpl 
	                            test_secondary_method2.future 
	                            test_secondary_method2.good 

---------------------------------------------------------------------------

02/03/05 08:11:59 -- jplevyak

Log message:
	"fixed" scoping-1.chpl so that it fails in the expected manner:
	<internal>:0: unresolved call 'main'
	<internal>:0: unresolved call '__init_internal_prelude'
	<internal>:0: unresolved call '__init_prelude'

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/03/05 10:22:32 -- jplevyak

Log message:
	Default parameters now implemented up to FnSymbol::default_wrapper.
	Shifted the future on the test to Steve.
	Added TRAVERSE(init, traversal, fails) to ParamSymbol::traverseDefSymbol
	Cleanup of ASymbol::xsymbol -> ASymbol::symbol.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: analysis.h callbacks.h symbol.h 
	chapel/test/functions/bradc/: defaultParam.future 

---------------------------------------------------------------------------

02/03/05 10:31:23 -- jplevyak

Log message:
	update the .future file to reflect what (I think) is the issue.

Modified files:
	chapel/test/classes/deitz/: test_secondary_method1.future 

---------------------------------------------------------------------------

02/03/05 16:57:03 -- deitz

Log message:
	Added the statement of declarations back to ClassType.  Renamed it
	declarationList instead of definition.
	
	Changed the storage of class variables, methods, and types to use
	vectors rather than the symbol links.  This was essential if we are
	going to keep the DefStmts.  I changed the names while doing this.
	The ClassType fields are now called fields (previously
	classVarSymbols), types (classTypeSymbols), primaryMethods
	(embeddedFnSymbols), and secondaryMethods (boundFnSymbols).
	
	Cleaned up how class types are handled in the compiler.  The
	addDeclarations procedure, previously addDefinition, now can be called
	multiple times to continue adding to a class.  This is used for
	with-statement resolution in classes.
	
	This checkin fixes the test_class_with2 regression and improves the
	stability of with in classes.  It is likely that withing a class that
	withs will now work even though I think it didn't before.  There are
	no tests of this.
	
	Removed future for test_secondary_method1.  Secondary methods now have
	stronger support though are still not complete.
	
	Backing down from removing the FnDefStmt, I think it is worth keeping
	around for the short-term and maybe even the long-term.  I do believe
	all of the DefStmts should become a single class (though will hold off
	on this change as it doesn't seem terribly important).
	
	I also believe we should now maintain the defPoint, maybe calling it
	defStmt, as a pointer from a symbol back to the statement where it was
	defined.  Note that this was only added by me a couple weeks ago, so
	this is still small.
	
	How the traversal will work is still in play though so it is essential
	to continue working on the interface between analysis and the
	compiler.

Modified files:
	chapel/compiler/AST/: nils.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp methodsToFunctions.cpp 
Added files:
	chapel/test/classes/deitz/: test_secondary_method3.chpl 
	                            test_secondary_method3.good 
Removed files:
	chapel/test/classes/deitz/: test_secondary_method1.future 

---------------------------------------------------------------------------

02/03/05 17:01:46 -- deitz

Log message:
	Made a minor change to future test_secondary_method2 so it now works.
	I was trying to initialize a variable in the class which is not yet
	supported:
	
	class foo {
	  var i : integer = 4;
	  ...
	}
	...

Modified files:
	chapel/test/classes/deitz/: test_secondary_method2.chpl 
Removed files:
	chapel/test/classes/deitz/: test_secondary_method2.future 

---------------------------------------------------------------------------

02/03/05 17:07:02 -- jplevyak

Log message:
	Checked in code which uses collect_asts (currently if-def'ed out
	till we decided how to handle Type(s)).
	Changed the order of precidence of type information in type_info.
	Tweak of collectAST to use Vec::append

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: collectASTS.cpp 

---------------------------------------------------------------------------

02/03/05 17:29:04 -- jplevyak

Log message:
	Cleanup of type cloning code.
	Still not enabled because TypeDefStmt::clone() is still cloning
	methods.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp sym.cpp 
	chapel/compiler/include/: analysis.h sym.h 

---------------------------------------------------------------------------

02/03/05 18:13:10 -- bradc

Log message:
	Blowing off steam after an afternoon of TAR work,
	and continuing in the ongoing struggle to remove
	my name from the future list... :)
	
	Added a new traversal to check the semantics of
	the program after analysis has run and we've
	incorporated its results into the AST.  Currently,
	the only thing that this pass checks for is
	assignment to constant expressions.  Added an
	isConst() method to the Expr and Symbol class
	hierarchies to help with this effort (and renamed
	the old isConst field to be isConstant to avoid
	conflicts).
	
	Known problems: blank parameter intents that
	should be interpreted as const are not classified
	correctly by the current isConst() implementation
	(a note to that effect was placed in
	ParamSymbol::isConst().

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/functions/jplevyak/: intent-5-error.good 
Added files:
	chapel/compiler/traversals/: checkSemantics.cpp checkSemantics.h 
	chapel/test/functions/jplevyak/scoping/: .cvsignore 

---------------------------------------------------------------------------

02/04/05 09:55:50 -- deitz

Log message:
	Added two more class cloning tests.  In one, a member of the same
	instance is assigned a float and an integer.  It becomes a float
	correctly.  In the other one, a class needs to be cloned because one
	instance treats a field as a string and the other as a float.

Added files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.chpl 
	                                         test_clone_class1a.good 
	                                         test_clone_class2a.chpl 
	                                         test_clone_class2a.future 
	                                         test_clone_class2a.good 

---------------------------------------------------------------------------

02/04/05 10:23:38 -- deitz

Log message:
	Cloning of classes no longer copies the methods, just the fields.  For
	methods, it creates a new FnDefStmt, but leaves the single FnSymbol.
	
	I expect problems down the road, after cloning is enabled, since I
	think we will try to code-generate the same function twice.  Need to
	think about this a little more.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

02/04/05 11:08:30 -- bradc

Log message:
	Removing future test marker.

Removed files:
	chapel/test/functions/jplevyak/: intent-5-error.future 

---------------------------------------------------------------------------

02/04/05 11:43:50 -- deitz

Log message:
	Unified primaryMethods and secondarMethods in ClassType to methods.
	Added a method_type field to FnSymbol that is either NON_METHOD,
	PRIMARY_METHOD, or SECONDARY_METHOD.  This change was suggested by
	John and makes sense since we'll treat these the same most, if not
	all, of the time.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/traversals/: cleanup.cpp methodsToFunctions.cpp 

---------------------------------------------------------------------------

02/04/05 12:11:42 -- bradc

Log message:
	Changed our write() implementation for floats so that
	floats with 0 fractional bits (e.g., 3.0) would be
	printed out as 3.0 rather than 3.  Updated test output
	to reflect this change.
	
	Some notes: in order to do this, I used a pointer
	comparison on the formatting string so that we
	could tell whether it was the default format (which
	we control so it makes sense to do this), or the user's
	format (in which case we should do what they request).
	Most of our formatting strings are stored as #defines,
	which makes the pointer compare impossible, though we
	wouldn't want a strcmp, because we'd want the user's
	"%g" to behave as a true C "%g".  Thus, I made the format
	for writing floats a char* variable rather than a #define.
	
	I didn't do this for all of the format strings because
	in other cases (particularly reading), we rely on the
	default format value to be a string literal so that we
	can glom two of them together when looking for errors.
	
	In retrospect, the correct way to go might be to pass
	in NULL as the format string if the user hasn't specified
	one, and store all the format strings as #defines, plugging
	the appropriate one in if a NULL is passed in.  This would
	make detection of the default trivial, and would allow us
	to keep using #defines for all format strings.  I didn't
	make this change at this time, though.

Modified files:
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
	chapel/test/classes/deitz/: test_class_with1.good 
	                            test_class_with2.good 
	                            test_class_with3.good 
	                            test_method2.good test_record1.good 
	                            test_record_method1.good 
	                            test_record_method2.good 
	                            test_record_with1.good 
	chapel/test/trivial/bradc/: defaultinit.good 
	chapel/test/trivial/shannon/: exp.good readWriteUserType.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_overload_integerfloat1.good 
	                                         test_overload_integerfloat2.good 
	                                         test_overload_integerfloat3.good 
	                                         test_overload_integerfloat4.good 
	chapel/test/types/type_variables/jplevyak/: test_coerse1.good 
	                                            test_coerse2.good 
Added files:
	chapel/test/trivial/bradc/: declprintfloat.chpl 
	                            declprintfloat.good 
	                            defaultinit1a.chpl 
	                            defaultinit1a.future 
	                            defaultinit1a.good 

---------------------------------------------------------------------------

02/04/05 12:49:44 -- deitz

Log message:
	Changed test_clone_class1a to assign the float first and then the
	integer second.  If I'm right, this class has member of type float.
	The second assignment is an implicit coercion.

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.chpl 
	                                         test_clone_class1a.good 

---------------------------------------------------------------------------

02/04/05 13:14:06 -- deitz

Log message:
	Added former version of test test_clone_class1a as future test test_clone_class1b which is waiting for a compiler error.

Added files:
	chapel/test/types/type_variables/deitz/: test_clone_class1b.chpl 
	                                         test_clone_class1b.future 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

02/04/05 13:46:13 -- deitz

Log message:
	Added future to test_clone_class1a and an error message

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1a.future 

---------------------------------------------------------------------------

02/04/05 16:02:57 -- deitz

Log message:
	Cloning of classes no longer clones functions.  It mangles the name of
	the class.  It builds a new constructor.
	
	Issues for when analysis calls clone:
	
	-When analysis clones methods, we're going to have to be able to
	insert these methods into the class.
	
	-We need to handle the "this" pointer.  We need to make it possible to
	call methods that were not cloned with "this" from the cloned class.
	We need to make sure the common variables are at the top of the class.
	
	-It may be best to handle this via inheritance.
	
	Question. Can you override fields using implements or are they hidden
	as in Java?
	
	If we need to clone a class should we do it twice so that we can use
	inheritance without overriding?

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: methodsToFunctions.cpp 

---------------------------------------------------------------------------

02/07/05 08:29:46 -- jplevyak

Log message:
	Fix bug in Class cloning.  It now seems to work up to codegen.
	
	To turn it ON, uncomment #define CLONE at the top of analysis/clone.cpp
	
	This causes:
	
	[Error matching compiler output for classes/deitz/test_union1]
	[Error matching compiler output for classes/deitz/test_union2]
	[Error matching compiler output for classes/deitz/test_union3]
	[Error matching compiler output for classes/deitz/test_union4]
	[Error matching compiler output for classes/deitz/test_union_method1]
	[Error matching compiler output for classes/deitz/test_union_method2]
	[Error matching compiler output for classes/deitz/test_union_method3]
	[Error matching compiler output for classes/jplevyak/record_type_hierarchy-1]
	
	I have not investigated yet why (I am working on it), so
	I have left #define CLONE commented out, but if anyone else is
	interested feel free to take a look.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/07/05 10:10:43 -- jplevyak

Log message:
	Fix SEGV in test_typevar_function1.chpl, expected all formals to
	be ParamSymbols.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/07/05 10:23:13 -- jplevyak

Log message:
	Sum Type support checkin.
	
	1. Added basic SumType class in type.h and type.cpp patterned after
	   TupleType.
	
	2. modified enumarray.chpl to cast before indexing:
	   writeln("probSize(", i:classVals, ") = ", ("%3d", probSize(i:classVals)));
	                                                              ^^^^^^^^^^^
	since the domain of probSize is integer... is this correct/necessary?
	
	3. Added Vec::first() to vec.h
	
	4. added comapr_baseasts to permit qsort to be used over all BaseASTs::id
	
	5. added find_or_make_sum_type to type.h  look in type.cpp for
	   a block of comments describing the issue of making sure that
	   sum types are treated structurally (the same type when summed over
	   the same types).
	
	6. Fixed some issues handling enums in flow analysis and cloning

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: analysis.h baseAST.h callbacks.h 
	                          clone.h fa.h type.h vec.h 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/newast/: enumarray.chpl enumarray.good 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 

---------------------------------------------------------------------------

02/07/05 10:44:11 -- jplevyak

Log message:
	Type cloning now enabled by default.  All the old test cases work,
	new ones fail in new and interesting ways :)

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

02/07/05 15:30:23 -- deitz

Log message:
	Initial implementation of FnSymbol::instantiate_generic.  The
	functions appear to be instantiated but they are not code generated.
	Not sure why unless it is later marked as never used.
	
	Added two traversals to remove type variables after analysis has run
	and presumably called FnSymbol::instantiate_generic.  These traversals
	remove the type variables as formals and actuals in expressions.
	
	This initial implementation piggybacks on clone.  The function is
	first cloned.  Then the type variable types in the cloned function are
	changed to real types based on the instantiation.
	
	Note.  Since the cloned function potentially clones the types (for
	parameters for example), the map that clone returns of all copied
	AST's is traversed in order to find all the types that need to change.
	How robust is this? will have to be answered.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	                             findUnknownTypes.h 

---------------------------------------------------------------------------

02/07/05 15:38:49 -- deitz

Log message:
	Fixed a small bug in which functions having the same name (overloaded,
	cloned or instantiated functions) may not be code generated if any of
	the functions were marked as unused.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

02/07/05 15:46:10 -- jplevyak

Log message:
	1) #ifdef'd out the code in ResolveEasy::preProcessExprs
	  at Steve's suggestion, I don't think this is necessary any more
	2) changed MemberAccess::codegen to just use member->name as the
	   struct field since MemberAccess::member is not being updated
	   and doesn't have an analogous bit of data in the low level intermediate form,
	   so it isn't clear how it might be updated (at least to me).
	3) in resolve_symbols() handle the special case where the
	   Stmt::parentSymbol points to a module instead of a function
	   ... this is kind of lame, perhaps we should have a member
	   parentFunction() which returns the parent function even for
	   modules.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: cleanup.cpp 

---------------------------------------------------------------------------

02/07/05 17:28:54 -- jplevyak

Log message:
	Bug fix handling of code in module init functions.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/08/05 10:32:14 -- deitz

Log message:
	Removed ResolveEasy traversal from Cleanup.  This used to resolve
	MemberAccess expressions where the type of the base expression was
	known.  It is not necessary as this is resolved after analysis.
	
	Fixed a small bug in the ResolveSymbols traversal.  It used a
	preprocess function rather than a postprocess function.  The
	postprocess functions are preferred for traversals that modify the
	AST.  What was happening in this case was that the expression being
	traversed was replaced in the preprocess.  Then the old expression was
	traversed deeply.  By putting it in the postprocess, the expression is
	traversed deeply and then replaced.  This was a problem because some
	other modification was done in the deeper traversal but was done on
	the old AST and thus lost.
	
	Removed John's quick-fix change to codegening MemberAccess expressions
	(just print out member->name) back to calling codegen on it
	(member->codegen()).

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: cleanup.cpp resolveSymbols.cpp 
	                             resolveSymbols.h 

---------------------------------------------------------------------------

02/08/05 14:30:08 -- jplevyak

Log message:
	Added a pass to determine when a variable is inferred to be of
	mixed primitive types (e.g. float + integer).
	Fixed the test cases to show the correct error messages.
	Remove 2 .future files for the test cases.
	Integrated fa_extras.cpp and ssu_extras.cpp.
	  Turns out that GDB 6.3 doesn't have problems with #includes of code....
	  but for those stuck with 6.1, this should fix the problem.

Modified files:
	chapel/compiler/analysis/: fa.cpp ssu.cpp 
	chapel/compiler/include/: fa.h 
	chapel/compiler/vparser/: parse_ast.cpp parse_ast.h 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Removed files:
	chapel/compiler/analysis/: fa_extras.cpp ssu_extra.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1a.future 
	                                         test_clone_class1b.future 

---------------------------------------------------------------------------

02/09/05 11:40:06 -- jplevyak

Log message:
	Fixed the way argument types are filtered as the actuals are passed to the
	formals.  The old technique used a single filter at the head of the function.
	This could result in some values being permitted which should not have been
	be permitted:
	
	function f(x, y) ... // f1
	function f(x:A, y:A) .. // f2
	
	var a = A();
	var b = B();
	var c = ... ? then A() : B();
	
	f(a,c); // c1
	f(b,c); // c2
	
	Here in the old technique, c2 would have cause the single
	filter on f1.y to permit both A's and B's so that the call
	c1 would pass both values to f1.  In the new technique all
	the filters are independent, so that c1 correctly passes
	only the x : { A }, y : { B } types to f1 instead of
	x : { A }, y : { A, B } which includes the combination
	x : { A }, y : { A } which is handled by f2.

Modified files:
	chapel/compiler/analysis/: fa.cpp fun.cpp pattern.cpp 
	chapel/compiler/backend/: dump.cpp graph.cpp 
	chapel/compiler/include/: fa.h fun.h var.h 
	chapel/test/flowanalysis/jplevyak/: cs1.good 

---------------------------------------------------------------------------

02/09/05 12:04:15 -- deitz

Log message:
	Added initial support for generalized arrays and domains.  Arrays and
	domains are supported currently up to rank three but can easily be
	extended to any rank with few changes---additional access macros in
	the array macros runtime header and additional "this" functions in the
	internal prelude.
	
	Added a pass to InsertAnonymousTypes.  This handles array and domain
	types put on variables.  Given
	  var D : domain(1) = 1..n;
	  var A : [D] integer;
	It puts the following in commonModule for use by any modules.
	  type _domain_1d = domain(1);
	  type _array_integer_1d = [D] integer;
	It does this when the array's type is a primitive.  If the array type
	is defined by the programmer, the array type declaration follows that
	declaration.
	
	Note that the type of D is part of the type of _array_integer_1d even
	though D is not.
	
	Removed functionality of 2D arrays of floats and 1D arrays of integers
	and 1D and 2D domains from the runtime files.  These are now generated
	in the compiler.
	
	Added a test case for 3D array of integers.  Currently, arrays do not
	seem to work if the elements are assigned values other than zero.
	
	The flowanalysis tests changed because of the change to the internal
	prelude and because array and domain types are now in the compiler.
	They have associated type symbols with real names.
	
	There is a fair amount of cleanup and generalization work left to do
	but this checkin constitutes a significant portion of array/domain
	support.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: files.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/traversals/: Makefile.share 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/include/: array.h chplio.h domain.h forall.h 
	chapel/runtime/src/: chplio.c domain.c 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertAnonymousTypes.h 
	chapel/test/arrays/deitz/: test_array_integer_3d.chpl 
	                           test_array_integer_3d.good 

---------------------------------------------------------------------------

02/09/05 12:20:53 -- jplevyak

Log message:
	Fix handling of constants: constants were requiring coersion wrappers.
	Changed .v test cases so that they would not result in boxing (to be like Chapel).

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/test/flowanalysis/jplevyak/: classvar.good classvar.v 
	                                    tuples.good tuples.v 
	chapel/test/parsing/jplevyak/: tuples.good tuples.v 

---------------------------------------------------------------------------

02/09/05 12:45:00 -- deitz

Log message:
	Fixed a bug in arrays of higher dimensions having trouble storing
	their values that I introduced in the last checkin.
	
	Added a test case that stores values other than zero in an array.
	Unfortunately this test case fails in analysis (future for John)
	because the index variables used in the forall expression are added
	and assigned to the array of integers.  Can the index type be treated
	symmetrically to integers?

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: array.h 
Added files:
	chapel/test/arrays/deitz/: test_array_integer_2d.chpl 
	                           test_array_integer_2d.future 
	                           test_array_integer_2d.good 

---------------------------------------------------------------------------

02/09/05 15:13:50 -- bradc

Log message:
	This is a minor cleanup from my last checkin, to make sure
	that I haven't broken the logging/mailing hooks in CVSROOT.

Modified files:
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

02/09/05 16:49:51 -- jplevyak

Log message:
	Fix test case test/arrays/deitz/test_array_integer_2d.chpl
	Need to generalize handling of forall loops over tuples of indices.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: sym.h 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_integer_2d.future 

---------------------------------------------------------------------------

02/10/05 10:57:49 -- deitz

Log message:
	Added Jacobi computation to test suite.
	
	Removed futures for function type variable tests.

Added files:
	chapel/test/arrays/deitz/: jacobi.chpl jacobi.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_function1.future 
	                                         test_typevar_function2.future 

---------------------------------------------------------------------------

02/10/05 11:11:53 -- jplevyak

Log message:
	Use the FnSymbol as the function to be called by an  EXPR_FNCALL/EXPR_PARENOP
	if it is available.  Update the test cases accordingly.  Fix issue with
	hard coded functions in low level code generation.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

02/10/05 17:17:37 -- deitz

Log message:
	Added a field parentType to the Type class.  This field will store a
	subtype relationship for a Type; The Type is a subtype of its
	parentType.  This field is currently the nilType in all cases.
	
	Added two tuple future tests.  Failing in analysis and beyond
	analysis.
	
	Improved parser support for tuples.  They can now be used on the left
	hand side of assignment statements.  This resulted in the following
	two changes to the Spec.
	
	1. The statement in a function definition must be one of the following:
	  A compound statement ({ ... })
	  An empty statement (;)
	  A conditional statement (if ...)
	  A for, forall, or while loop (for ..., forall ..., while ..., do ...)
	  A call statement (call ...)
	  A return statement (return ...)
	
	Rationale. I originally made it just a block statement to get around
	the parser ambiguities.  David suggested it could also be a return
	statement.  I added the rest (at least in the implementation for now).
	
	The ambiguity stems from starting assignment statements with tuples
	clashing with the return type (domains and indexes) of the function:
	  function foo() : domain(expr);
	  function foo() : domain(i,j) = (k,l);
	Types that can be qualified by expressions clash with the tuples
	starting the next statement in one-lookahead parsers.
	
	2. The while-, for-, forall-, and if-statements now require a "do" or
	"then" to avoid using curly brackets around the bodies of the loops or
	the conditional "then" clause.
	
	The ambiguity can be seen in the example
	  while foo(a,b) = (j,k);
	Is foo a function call with actuals a and b or a boolean with a tuple
	assignment as the body.  Of course, again, we know the answer, but
	we're using a one-lookahead parser.
	
	Changed test cases to reflect language changes.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/test/arrays/deitz/: .cvsignore 
	chapel/test/classes/jplevyak/: .cvsignore 
	chapel/test/execflags/shannon/configs/: .cvsignore 
	chapel/test/flowanalysis/newast/: compSampler.chpl 
	                                  conditional.chpl 
	                                  danglingelse.chpl domarr.chpl 
	                                  domarr.good 
	                                  multiple_return.chpl noop.chpl 
	                                  noop.good whileLoop.chpl 
	chapel/test/functions/jplevyak/scoping/: .cvsignore 
	chapel/test/trivial/bradc/: conditional.chpl danglingelse.chpl 
	                            noop.chpl 
	chapel/test/trivial/bradc/domarr/: domarr.chpl 
	chapel/test/trivial/deitz/: test_if_else.chpl 
	                            test_if_then_else.chpl 
	chapel/test/trivial/shannon/: whileLoop.chpl 
Added files:
	chapel/test/types/tuple/deitz/: .cvsignore 
	                                test_tuple_simple1.chpl 
	                                test_tuple_simple1.future 
	                                test_tuple_simple1.good 
	                                test_tuple_simple2.chpl 
	                                test_tuple_simple2.future 
	                                test_tuple_simple2.good 

---------------------------------------------------------------------------

02/11/05 09:59:45 -- deitz

Log message:
	Added a flag --ignore_errors which lets the compiler attempt to
	continue past all errors, including internal errors.  This is useful
	for development.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

02/11/05 11:07:05 -- shannon

Log message:
	Refactored the code that legalizes C names.

Modified files:
	chapel/compiler/symtab/: legalizeCNames.cpp 

---------------------------------------------------------------------------

02/11/05 16:29:49 -- deitz

Log message:
	Improved the ignore_errors flag.  It now only applies to INT_FATAL and
	USR_FATAL.  It no longer causes infinitely many seg faults.

Modified files:
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

02/11/05 16:44:09 -- deitz

Log message:
	Implemented limited and initial but moderately robust support for
	tuples from parsing to code generation with the --noanalysis flag.
	Passed the futures for three of the five tuple tests to John.  The
	remaining two do not work because variable initialization is not
	turned into assignment statements before tuple assignment statements
	are turned into multiple assignment statements of tuple indexing
	expressions.
	
	Added a new Expr called TupleSelect.  This corresponds to indexing
	into Tuples.  Currently, the indexing must be done with IntLiterals.
	Like the ArrayRef and the FnCall, the TupleSelect derives from
	ParenOpExpr.  Unlike other ParenOpExprs however, the argList on the
	TupleSelect should only contain a single index expression.
	
	Added two general utilities to ILink.  The method length() returns the
	number of ILinks in a list of ILinks starting from it inclusive.  The
	method get(int i) returns the ith ILink where the first one is
	numbered as one.
	
	Made the InsertAnonymousTypes traversal handle anonymous tuple types.
	Added support for generating code for tuple type definitions.
	
	Added a new traversal pass DestructureTupleAssignments to turn single
	assignments of Tuple expressions to multiple assignments of
	TupleSelect expressions.
	
	Unrelated, moved the mangling of method names out of
	MethodsToFunctions (post-analysis) and into InsertThis (pre-analysis).
	This has little impact since the name mangling only changes the cname
	(the name to be generated).  It is a step in the right direction for
	class cloning which I did at some point.
	
	Added three more tuple tests, two of which work.

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share cleanup.cpp 
	                             insertAnonymousTypes.cpp 
	                             methodsToFunctions.cpp 
	                             methodsToFunctions.h 
	                             verifyASTType.cpp 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.chpl 
	                                test_tuple_simple1.good 
	                                test_tuple_simple2.chpl 
	                                test_tuple_simple2.future 
Added files:
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 
	                             destructureTupleAssignments.h 
	chapel/test/types/tuple/deitz/: COMPOPTS test_tuple_simple3.chpl 
	                                test_tuple_simple3.future 
	                                test_tuple_simple3.good 
	                                test_tuple_simple4.chpl 
	                                test_tuple_simple4.future 
	                                test_tuple_simple4.good 
	                                test_tuple_simple5.chpl 
	                                test_tuple_simple5.future 
	                                test_tuple_simple5.good 

---------------------------------------------------------------------------

02/11/05 16:50:23 -- deitz

Log message:
	Added --noanalysis flag temporarily to test/types/tuple/deitz/ making
	three future tests pass (but not for real).
	
	Fixed good for test_tuple_simple2.

Modified files:
	chapel/test/types/tuple/deitz/: COMPOPTS test_tuple_simple2.good 

---------------------------------------------------------------------------

02/14/05 10:12:40 -- deitz

Log message:
	Started implementing "Type* find_or_make_sum_type(Vec<Type*>* types)"
	which works but currently always makes a new sum type, never looking
	to see if it already created it.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

02/14/05 15:38:55 -- deitz

Log message:
	Added a new traversal pass InsertVariableInitializations which inserts
	up to two assignment statements for every variable declaration
	statement.  It inserts a statement at the top of the variable's scope
	that initializes it to the default value of its type.  It inserts a
	statement at the place it is declared to initialize it to whatever the
	user may initialize it too.  Eventually, dead assignment elimination
	could help with excess computation.
	
	Added default values to tuple types.
	
	Added a couple of more error checks to DestructureTupleAssignments.
	
	Removed Stmt::codegenVarDefs, Stmt::codegenVarDef, and
	VarDefStmt::codegenVarDef since it is not used.  It wasn't used before
	this checkin.
	
	Removed code for handling initialization of variables within codegen
	except for variables that are domains, arrays, or config.
	
	Fixed a couple bugs in which the stmtContexts for scopes were not
	created when block statements were copied and new coercion wrapper
	functions were created.
	
	Fixed good for defaultinit1a.  Removed futures for defaultinit1a and
	vardecls.  Passed futures for test_tuple_simple1 and
	test_tuple_simple4 to John.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: stmt.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share cleanup.cpp 
	                             destructureTupleAssignments.cpp 
	chapel/test/trivial/bradc/: defaultinit1a.good 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple4.future 
Added files:
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	                             insertVariableInitializations.h 
Removed files:
	chapel/test/trivial/bradc/: defaultinit1a.future vardecls.future 

---------------------------------------------------------------------------

02/14/05 15:55:13 -- deitz

Log message:
	Added a few strange declaration test cases (all working):
	
	  var x : integer = y;
	  var y : integer = x;
	---
	  var x = y;
	  var y = 3.0;
	---
	  x = 12.0;
	  var x = y;
	  var y = x;

Added files:
	chapel/test/trivial/deitz/: test_var_decl_strange1.chpl 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.chpl 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.chpl 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.chpl 
	                            test_var_decl_strange4.good 

---------------------------------------------------------------------------

02/15/05 13:04:28 -- deitz

Log message:
	Removed special-case code for initializing config variables and
	variables of array or domain types.  Instead of assignments, it uses
	function calls (runtime macros) and conditional assignments to
	initialize these variables.
	
	VarDefStmt::codegen() does nothing now.  The pre-codegen pass
	InsertVariableInitializations now removes VarDefStmts.
	
	Added a new test case to test using a config var before it is declared.
	
	Removed Type:: and ArrayType:: needsInit and generateInit.
	
	Made the CreateConfigVarTable traversal traverse the symboltable
	instead of the AST since it is just collecting variables.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/passes/: codegen.cpp 
	chapel/compiler/symtab/: symtabTraversal.cpp 
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	                             createConfigVarTable.h 
	                             insertVariableInitializations.cpp 
	                             traversal.cpp 
	chapel/runtime/include/: config.h 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/test/trivial/deitz/: test_config_use_before_decl.chpl 
	                            test_config_use_before_decl.good 

---------------------------------------------------------------------------

02/15/05 13:14:10 -- deitz

Log message:
	Eliminated dead runtime code based on my changes to generalize arrays
	and domains.

Modified files:
	chapel/runtime/include/: array.h chplio.h domain.h 
	chapel/runtime/src/: array.c domain.c 

---------------------------------------------------------------------------

02/15/05 14:56:00 -- deitz

Log message:
	Made ForallExpr store indices as Symbol* rather than Stmt* of
	VarDefStmts.  This gets rid of the Stmts in Exprs.  Made defPoint in
	Symbol point to BaseAST rather than Stmt since it may point to either
	an Expr or a Stmt now.
	
	Made Fixup-verify once again check to make sure that all defPoints are
	correct.
	
	In coping with this change, modified analysis to see whether the
	defPoint is an Expr or a Stmt before grabbing the ainfo.  This is a
	tad verbose but seems necessary.  The other option is to put ainfo and
	asymbol in BaseAST and have them only active for Expr/Stmt and
	Symbol/Type respectively.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: cleanup.cpp fixup.cpp 
	                             insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

02/16/05 11:15:37 -- shannon

Log message:
	Added wrappers to the memory functions malloc, calloc,
	realloc, and free.  At present the only benefit is error
	checking with hopefully descriptive error messages,
	but we have great plans for these functions in the future.
	
	The arguments to _chpl_malloc, _chpl_calloc, and _chpl_realloc
	differ from the originals.  Instead of being passed the size
	of the entire chunk of memory being requested they take the
	number of elements and then the size of the element.
	_chpl_malloc and _chpl_calloc also take a string which
	is a description of the type of memory requested.
	
	Example:
	--------
	  arr.base = (elemtype*)_chpl_malloc(arr.size, sizeof(elemtype), "array")
	
	Corresponding error message:
	----------------------------
	  ***Error:  Out of memory allocating array***

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/runtime/include/: array.h stdchpl.h 
	chapel/runtime/src/: Makefile arg.c chplio.c chpltypes.c 
	                     config.c main.c 
Added files:
	chapel/runtime/include/: chplmem.h chplrt.h 
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

02/16/05 14:48:40 -- deitz

Log message:
	Added robust support for let expressions from parsing to code
	generation.
	
	Added a new traversal TransformLetExprs that hoists let expressions
	into compound statements.  This traversal is called before analysis,
	thus analysis need not even know let expressions exist.  I think we
	may want to call this traversal again later if we can use let
	expressions to make optimizations easier.
	
	Though multiple let expressions in the same statement and nested let
	expressions work correctly, there is one case that is not handled
	correctly (depending on the language definition):
	   function foo(i : integer) : integer) {
	     i += 1;
	     return i;
	   }
	   writeln(foo(a) - let b = foo(a) in b)
	If we are evaluating expressions left to right, this should output -1,
	but it outputs 1.  The reason for this is that we move the let
	expression into a compound statement outside the whole statement.
	Thus the second foo is evaluated before the first foo, reading left to
	right.
	
	Added a future test, test_let8, to capture this problem.
	
	Added 7 new test cases pertaining to let expressions that work:
	... 128.0 * let x:float = a*b, y = x*x in 1.0/y ...
	... let x = a*a in x*x ...
	... let x = a*a in x*x ... let y = a+a in y*y ...
	... let x = a*a in x*x ... let x = a+a in x*x ...
	... let x : integer = a*a in x*x ... let x : integer = a+a in x*x ...
	... let x : integer = a*a in x*x ...
	... let x = a * b * c in let y = a * b in x * y ...
	
	Patched a bug encountered in analysis in which the parentSymbol was
	incorrectly set to the module rather than the initFn.  Added a test
	case, test_block_call, to guard for this.
	
	Updated setDefPoint to take a BaseAST rather than a Stmt since
	sometimes it will be called with an Expr.  For example, ForallExpr and
	LetExpr.
	
	To Do:
	
	1. Improve copy resolution.  When copying statements or expressions
	that enter scopes, the symbols are copied.  For example, when copying
	the compound statement given by
	
		{
		  var x = 12;
		  writeln(x);
		}
	
	the symbol x is copied.  If copy did not re-resolve the symbols, the
	copied compound statement's argument to writeln would refer to the
	symbol in the old block statement, a potential problem in all but the
	simplest of cases.
	
	The old copy resolution worked by calling cleanup's resolveSymbols
	traversal.  This is overly complicated and easily broken.  For
	example, if the name of the symbol that is copied is changed it can't
	be re-resolved.
	
	The new copy resolution (future work) will use copy's Map argument to
	replace uses of a symbol in the copied compound statement with the
	copied symbols.  The advantages are numerous when we start doing more
	complicated things.  Even now, it is advantageous because we do not
	have to special-case the resolution depending on whether we are before
	or after analysis.
	
	2. Add a new argument to copy (default NULL) that is a Vec of BaseAST
	pointers.  These will be updated by the copy if they are copied.  So,
	for example, the Vec may contain a bunch of LetExprs that were found
	and will be transformed.  Then whenever anything is copied, the
	LetExprs should be updated accordingly.  This is currently done by
	hand at the call-site to copy but is general enough that it should be
	moved inside.
	
	3. Add a preProcess and postProcess method to the Traversal class that
	is called when atTop is true.  This will be very useful for traversals
	that first collect information and then do transformations.  They can
	do the transformations on the postProcess method.  The advantage to
	not overloading run() (how it is done currently) is that the traversal
	can be called on a subsection of the AST and it will still work.
	
	4. Fix parentSymbol fixup.  The parentSymbols are not always being set
	up correctly.  In particular, functions that are nested in a scope
	inside the module and not in a function, have the wrong parentSymbol.
	This should be set to the initFn when this is put in.  I made a cheapo
	fix in analysis.cpp until this is working.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symbol.h symscope.h 
	                          symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share fixup.cpp 
	                             traversal.cpp verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: transformLetExprs.cpp 
	                             transformLetExprs.h 
	chapel/test/trivial/deitz/: test_block_call.chpl 
	                            test_block_call.good test_let1.chpl 
	                            test_let1.good test_let2.chpl 
	                            test_let2.good test_let3.chpl 
	                            test_let3.good test_let4.chpl 
	                            test_let4.good test_let5.chpl 
	                            test_let5.good test_let6.chpl 
	                            test_let6.good test_let7.chpl 
	                            test_let7.good test_let8.chpl 
	                            test_let8.future test_let8.good 

---------------------------------------------------------------------------

02/17/05 11:42:02 -- deitz

Log message:
	Added support for forall statements using the forall expression syntax
	as in "[i in D] A(i) = B(i)."  This fixes three future array tests
	(with some modifications requiring indices).

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/arrays/deitz/: test_basic1d2.chpl test_basic1d3.chpl 
	                           test_basic1d4.chpl 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Removed files:
	chapel/test/arrays/deitz/: test_basic1d2.future 
	                           test_basic1d3.future 
	                           test_basic1d4.future 

---------------------------------------------------------------------------

02/17/05 13:45:50 -- deitz

Log message:
	Improved copy resolution.  (2/16 TO DO #1) This checkin changes the
	way in which copied symbols are re-resolved after copy is called.
	
	At the end of copy, when called on an Expr or Stmt, a new traversal
	called UpdateSymbols runs through the new Expr or Stmt, replacing
	Variable references to old symbols with variable references to the new
	symbols (if the symbol was copied).
	
	In support of this, copying of Variable expressions no longer make its
	symbol unresolved.  They keep the symbol the same.
	
	This new way of handling copying things like block statements (things
	that need their scopes copied) is much more sane.
	
	Removed functions call_cleanup and call_cleanup_ls which used to be
	called by copy.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/traversals/: Makefile.share cleanup.cpp 
	                             cleanup.h 
Added files:
	chapel/compiler/traversals/: updateSymbols.cpp updateSymbols.h 

---------------------------------------------------------------------------

02/17/05 14:37:24 -- deitz

Log message:
	[#2 on 2/16/05 TO DO]
	
	Extended the copy interface to take another optional parameter,
	update_list.  This Vec<BaseAST*>* contains a list of BaseAST pointers.
	They are updated by copy so that if any point to a BaseAST that is
	copied, it will point to the copied BaseAST.
	
	This parameter is used by the TransformLetExprs traversal.  This
	traversal finds all the let expressions in the AST.  Then it changes
	these LetExprs into BlockStmts.  Because there could be nested
	LetExprs it is useful to update the list of LetExprs when any are
	copied.
	
	This should be a fairly general implementation strategy.  Hi ho.
	
	Just musing here, but it's too bad C++ makes you put the default
	parameters at the end and only not specify starting from the back.
	For copy, there are three sets of parameters that it would be nice to
	specify any of these sets in different situations.  Chapel's named
	default parameters will be perfect when we're ready to bootstrap.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/traversals/: transformLetExprs.cpp 
	                             transformLetExprs.h 

---------------------------------------------------------------------------

02/18/05 10:24:10 -- jplevyak

Log message:
	Squelch line numbers for all files containing "prelude" in the
	flow analysis regression logs (on request from Brad).

Modified files:
	chapel/compiler/analysis/: clone.cpp fa.cpp fun.cpp if1.cpp 
	                           sym.cpp 
	chapel/compiler/include/: code.h fun.h sym.h 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.chpl 
	                                  enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

02/18/05 16:48:26 -- deitz

Log message:
	Added modest support for anonymous domains.  They can be used in
	forall and for statements and a domain is not created.  They can be
	used in array types and a domain variable is created.  Currently only
	1D domains are supported in this latter case.
	
	Made the common module more like other modules.  It is now codegened
	like other modules and passes act on it like other modules.
	
	Added a new traversal InsertAnonymousDomains that runs before
	InsertAnonymousTypes.  The domains are inserted right before the
	arrays that are declared over them.
	
	Improved InsertAnonymousTypes though it is still not very recursive.
	Anonymous types of anonymous types are not yet fully supported.
	Almost there.
	
	Added new future cases using anonymous domains and assigning arrays.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/passes/: codegen.cpp createEntryPoint.cpp 
	                         runAnalysis.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             insertAnonymousTypes.cpp 
	                             insertAnonymousTypes.h 
	chapel/runtime/include/: forall.h 
	chapel/test/compflags/bradc/twomodulesnomain/: module1.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertAnonymousDomains.h 
	chapel/test/arrays/deitz/: test_anon_domain1.chpl 
	                           test_anon_domain1.good 
	                           test_anon_domain2.chpl 
	                           test_anon_domain2.future 
	                           test_anon_domain2.good 
	                           test_array_assign1.chpl 
	                           test_array_assign1.future 
	                           test_array_assign1.good 
	                           test_array_assign2.chpl 
	                           test_array_assign2.future 
	                           test_array_assign2.good 

---------------------------------------------------------------------------

02/19/05 11:55:49 -- jplevyak

Log message:
	Fix off-by-one error found by valgrind + GC.

Modified files:
	chapel/compiler/vparser/: grammar.cpp 

---------------------------------------------------------------------------

02/19/05 11:56:46 -- jplevyak

Log message:
	add chplalloc.h to catch stray malloc's if they are added.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

02/19/05 11:57:19 -- jplevyak

Log message:
	Fix SEGV in log routine.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

02/19/05 17:37:40 -- jplevyak

Log message:
	Iterate over the ->var->next field of a VarDefStmt.
	In general how should I know which fields are lists?  Could
	we rename the ones that are lists XXX_list.  In this
	instance if we had VarDefStmt::var_list then I would
	know to iterate over it.  Or should I iterate over every field?

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_array_assign1.future 

---------------------------------------------------------------------------

02/21/05 17:56:00 -- jplevyak

Log message:
	Fixed a couple issues with class cloning and resolve symbols.
	test/types/type_variables/deitz/test_clone_class1 is now working correctly.
	Updated .future files for test/types/type_variables/deitz/test_clone_class2(a)
	since I fixed a couple issues.  Here is the new .future:
	
	"The problem here is that classes have already been cloned, but
	the original class (from which the clones were derived) still
	exists in the AST via the TypeDefStmt.  Like unused functions
	there will be unused types which should not be resolved.
	
	If you need an interface to query which types are actually
	used in the program, ask me."

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class2.future 
	                                         test_clone_class2a.future 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1.future 

---------------------------------------------------------------------------

02/22/05 12:08:07 -- jplevyak

Log message:
	Fix cloning so that the uncloned type is always the abstract one in cases
	  where multiple clones are required.
	Fix a bug where Sym(s) were registered twice during cloning.
	Modified type_is_used and function_is_used to use a flag
	  to check whether or not analysis was run (for safety).
	
	**************
	Hacked type cloning to manually callback the callback for the TypeSymbol which
	  was not being done.  Should this be removed????
	**************
	
	Add type_is_used() to analysis.h/cpp
	Add some #ifdef'd out test code into runAnalysis.cpp to call type_is_used();

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/passes/: runAnalysis.cpp 

---------------------------------------------------------------------------

02/22/05 15:45:54 -- jplevyak

Log message:
	Some work on tuples.
	TypeType maps to the PRODUCT type of analysis.
	Set the AST::sym for EXPR_TUPLE.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/22/05 16:55:01 -- deitz

Log message:
	Replaced the Cleanup traversal with the following traversals:
	
	  ExpandClassWiths
	  InsertThisParameters
	  ScopeResolveSymbols
	  RenameOverloadedFunctions
	  SpecializeParenOpExprs
	  ApplyThisParameters
	
	These traversals used to be embedded in Cleanup, but now show up in
	the Passlist.  This makes the design slightly more modular and
	uniform.
	
	Removed four lines that fix the back pointer after Cleanup was called
	on copied expressions and statements.  Since Cleanup is no longer
	called there, these are no longer necessary.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             expandClassWiths.cpp 
	                             expandClassWiths.h 
	                             insertThisParameters.cpp 
	                             insertThisParameters.h 
	                             renameOverloadedFunctions.cpp 
	                             renameOverloadedFunctions.h 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
Removed files:
	chapel/compiler/traversals/: cleanup.cpp cleanup.h 

---------------------------------------------------------------------------

02/22/05 17:04:05 -- jplevyak

Log message:
	More prep work for tuples and overloaded =.
	Added support for calling builtin primitives using the __primitive
	  extension in the preludes.
	Changed the way global variables are analyzed so that their
	  types are tracked more precisely.
	Changed the way return values work so that multiple returns of
	  lvalue expressions will work.
	Changed the way assignment works so that the RHS is moved to a temporarly
	  to clear its ability to pass lvalues.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

02/23/05 10:30:46 -- jplevyak

Log message:
	Change the "index_object" primitive to index into anything derived
	from "Tuple" (i.e. Tuple subtypes).

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

02/25/05 16:49:46 -- deitz

Log message:
	Added intrinsic "numeric" which will be used by analysis to constrain
	types.  It is an integer or float or boole?
	
	Type* dtNumeric points to this type.
	
	At this point, I think I exposed it to the user.  Perhaps we shouldn't
	do this and it should be put in the InternalPrelude.  How should it be
	specified there if that is the case?

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

02/28/05 10:00:53 -- deitz

Log message:
	Moved TransformLetExprs after analysis.
	
	This breaks test_let[1-7].  I added futures for each of these tests
	for John.
	
	Note to whom-will-be-concerned: I'm not letting them regress (adding
	futures instead), because this will require new functionality.  It was
	premature to remove the futures before.  Therefore, these are not
	regressions, but rather not yet fully implemented.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/test/trivial/deitz/: test_let8.future 
Added files:
	chapel/test/trivial/deitz/: test_let1.future test_let2.future 
	                            test_let3.future test_let4.future 
	                            test_let5.future test_let6.future 
	                            test_let7.future 

---------------------------------------------------------------------------

02/28/05 10:45:34 -- deitz

Log message:
	Renamed field Type::name to Type::symbol to better differentiate it
	from Symbol::name.  I've messed up because of these similarities so
	I'm just taking the time to fix it.

Modified files:
	chapel/compiler/AST/: nils.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertThisParameters.cpp 
	                             insertUnionChecks.cpp 
	                             insertVariableInitializations.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

02/28/05 11:42:08 -- jplevyak

Log message:
	Grab bag checkin.
	
	1. added new interfaces for resolving members:
	
	void resolve_member_access(MemberAccess *ma, int *offset, Type **type);
	void resolve_member(ClassType *t, VarSymbol *v, int *offset, Type **type);
	
	we should switch over from
	
	int resolve_symbol(UnresolvedSymbol *us, MemberAccess *ma, Symbol *&sym);
	
	at some point.
	
	2. Added Stmt::parentFunction() to handle the special case where the
	   stmt->parentSymbol is a module.
	
	3. Added a "type" field to VariableType to handle type constraints of the form:
	
	function foo(type t : A, i : t) ....
	
	4. Added code which computes the layouts for ClassType objects which includes
	   the offset of each field.  Those offsets are returned by the above new
	   APIs.
	
	   Currently I use the provided order to build the layouts, but that could
	   change as/when we decided to optimize layouts.
	
	   Layout compatiibility is now used to build function clones.
	
	   Pointer size is take from the build environment as sizeof(void *)...
	   we may have to make this configurable at some point for cross compilation.
	
	5. Add a flag to report an error when an instance variable is
	   unused (and hence has no type).
	
	6. Added TQUESTION to chapel.lex in preparation for supporting
	   the alternate type variable syntax.
	
	7. Added support in the parser for the "type" field of VariableType's defined as:
	
	function foo(type t : A, i : t) ....

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp clone.cpp fa.cpp 
	                           if1.cpp pattern.cpp sym.cpp 
	chapel/compiler/include/: analysis.h clone.h fa.h if1.h stmt.h 
	                          sym.h type.h 
	chapel/compiler/parser/: chapel.lex chapel.y 

---------------------------------------------------------------------------

02/28/05 11:46:48 -- jplevyak

Log message:
	Fixed the union type hierarchy tests and added a new error test
	for bad structural typing.
	Added a new test for sum types which is currently failing
	(invisibly) because of the way "with" variables are inserted.
	Added a new (future) test for type variable constraints which
	failes because inheritance is not yet implemented.

Modified files:
	chapel/test/classes/jplevyak/: union_type_hierarchy-1.chpl 
	                               union_type_hierarchy-2.chpl 
Added files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.chpl 
	                               record_type_hierarchy-3-error.good 
	                               sum_type-1.chpl sum_type-1.good 
	                               union_type_hierarchy-3-error.chpl 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/type_variables/jplevyak/: 
	                                            typevar_constraint-1.chpl 
	                                            typevar_constraint-1.future 
	                                            typevar_constraint-1.good 

---------------------------------------------------------------------------

02/28/05 12:09:29 -- deitz

Log message:
	Fixed a bug in how fixup is called after modifications to the AST are
	made.
	
	Updated enumarray.good.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

02/28/05 12:09:31 -- jplevyak

Log message:
	Add 2 new tests for object layout conformance testing.
	The first fails because of the order of 'with' variables.

Added files:
	chapel/test/flowanalysis/newast/: sum_type-1.chpl 
	                                  sum_type-1.future 
	                                  sum_type-1.good 
	                                  sum_type-2.chpl 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

02/28/05 12:12:07 -- jplevyak

Log message:
	sum_type-2 should fail as well (as it is the dual of the previous test).

Modified files:
	chapel/test/flowanalysis/newast/: sum_type-2.good 
Added files:
	chapel/test/flowanalysis/newast/: sum_type-2.future 

---------------------------------------------------------------------------

02/28/05 13:36:57 -- shannon

Log message:
	Changed the last outstanding malloc to _chpl_malloc.
	
	Added a script to the runtime Makefile to print an error
	if there exists a runtime source file that does not
	include the chplrt.h header file.
	
	In symtab.cpp added some error checking to lookupInternal,
	per Brad's instructions.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/runtime/include/: chplrt.h 
	chapel/runtime/src/: Makefile array.c domain.c 

---------------------------------------------------------------------------

02/28/05 16:10:09 -- jplevyak

Log message:
	Add support for let expressions.   This required hacking
	my traversal code to traverse through the symbols and
	expressions for the LET_EXPR.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/28/05 16:39:53 -- deitz

Log message:
	Made ExpandClassWiths put the fields inserted by a with statement in
	the place that the with statement was.  They may be rearranged later
	by analysis, but this is a good default.
	
	Added insert for Vec templates.  It inserts a new element of the Vec
	before an existing one.
	
	Removed double traversal of symbols (def and regular).
	
	Replaced old resolve_symbol with resolve_member_access.

Modified files:
	chapel/compiler/AST/: nils.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: type.h vec.h 
	chapel/compiler/traversals/: expandClassWiths.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

02/28/05 16:49:34 -- jplevyak

Log message:
	Add option to
	
	   HAND_TRAVERSE_EXPR_LET

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/28/05 17:06:22 -- jplevyak

Log message:
	Stupid bug, forgot to update backpointer.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/28/05 17:09:23 -- deitz

Log message:
	Moved TransformLetExprs after ResolveSymbols etc.

Modified files:
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

02/28/05 17:12:04 -- deitz

Log message:
	Commented out HAND_TRAVERSE_EXPR_LET.
	
	Fixed two small but major bugs in traversals of symbols and types.  A
	little surprised it was working.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

02/28/05 17:21:36 -- jplevyak

Log message:
	Remove me from .future, I think I am done with this one... if I am
	wrong tell me.

Modified files:
	chapel/test/trivial/deitz/: test_let8.future 

---------------------------------------------------------------------------

03/01/05 08:45:05 -- deitz

Log message:
	Removed futures for test_let[1-7].

Removed files:
	chapel/test/trivial/deitz/: test_let1.future test_let2.future 
	                            test_let3.future test_let4.future 
	                            test_let5.future test_let6.future 
	                            test_let7.future 

---------------------------------------------------------------------------

03/01/05 08:49:10 -- jplevyak

Log message:
	Remove HAND_TRAVERSE_EXPR_LET define since traverse is now fixed.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/01/05 09:46:23 -- jplevyak

Log message:
	Make sum_type-1 a .future test case since it requires moving
	to a new interface.

Added files:
	chapel/test/classes/jplevyak/: sum_type-1.future 

---------------------------------------------------------------------------

03/01/05 11:50:20 -- deitz

Log message:
	Initial implementation of default_wrapper for functions that are
	called without parameters that have default values.  This function is
	called from analysis.  There is now a problem later on in the
	defaultParam test case.
	
	Fixed a bug in copying ParamSymbols.  The init expression was lost
	prior to this fix.
	
	Simplified resolution of MemberAccesses while we work in the new
	interface.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

03/01/05 11:51:24 -- deitz

Log message:
	Passed defaultParam test case future to John.

Modified files:
	chapel/test/functions/bradc/: defaultParam.future 

---------------------------------------------------------------------------

03/01/05 12:26:16 -- deitz

Log message:
	Made a change so that types that are not used are not code-generated.
	This uses analysis's type_is_used function.
	
	Patched type_is_used so that it works.  John, please take a look at my
	changes.  I'll send you what breaks without them in a separate mail.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/01/05 13:14:31 -- deitz

Log message:
	Changed the interface for cloning types from
	  TypeDefStmt::clone(...)
	to
	  TypeSymbol::clone(...)
	
	Removed some old commented out code.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h symbol.h 

---------------------------------------------------------------------------

03/01/05 15:55:15 -- deitz

Log message:
	Changed the contents of TypeDefStmt from a Type to a TypeSymbol.  This
	brings it more inline with FnDefStmt, VarDefStmt, and ModuleDefStmt.
	All of these contain the symbols they define.
	
	Reworked TypeSymbol::clone so that it creates a new name for the type
	symbol.  Previously this was hacky and done in the copy mechanism.
	
	There is a deep difference between TypeSymbol::clone used to clone
	classes and FnSymbol::clone used to clone functions.  When a class is
	cloned, the name is changed.  When a function is cloned, the name is
	not changed, the clone is treated like any other overloaded function,
	and the cname is changed.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

03/01/05 16:47:20 -- bradc

Log message:
	Adding document sources for compiler architecture
	paper written for the TAR, as well as for the
	unabridged section on analysis that John prepared
	for it.

Added files:
	chapel/doc/internal/analysisOverview/: .cvsignore analysis.tex 
	                                       group.bib 
	chapel/doc/internal/chapelCompArch/: .cvsignore bib.bib 
	                                     chapel2c.eps chapel2c.fig 
	                                     chapelCompArch.tex 
	                                     nightly.eps overview.eps 
	                                     overview.fig symtab.eps 
	                                     symtab.fig tokctnightly.eps 

---------------------------------------------------------------------------

03/01/05 17:25:39 -- jplevyak

Log message:
	Improve notion of "scalar" to include things derived from scalars.
	This handles cases like:
	  type myinteger : integer = 5;
	as well as enumerations.

Modified files:
	chapel/compiler/analysis/: sym.cpp 
	chapel/compiler/include/: sym.h 

---------------------------------------------------------------------------

03/01/05 18:48:11 -- jplevyak

Log message:
	GC patches to support valgrind.

Modified files:
	chapel/compiler/etc/: valgrind.suppressions 
	chapel/third-party/boehmgc/gc6.3/: configure malloc.c mallocx.c 
	                                   mark.c os_dep.c reclaim.c 
	chapel/third-party/boehmgc/gc6.3/include/private/: gc_priv.h 

---------------------------------------------------------------------------

03/01/05 18:50:36 -- jplevyak

Log message:
	Patch to support valgrind.

Added files:
	chapel/third-party/boehmgc/: gc-valgrind.patch 

---------------------------------------------------------------------------

03/02/05 09:37:47 -- bradc

Log message:
	Changed check for chplrt.h in the runtime srcs to check
	the sources used to build the runtime (CVS_SRCS) rather
	than all .c files in the directory so that people may
	have stray .c files in the directory that haven't been
	worked into the runtime yet.

Modified files:
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

03/02/05 09:40:06 -- bradc

Log message:
	Restoring enumarray.chpl back to its preferred form.

Modified files:
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 

---------------------------------------------------------------------------

03/02/05 10:27:34 -- bradc

Log message:
	Fixed last night's valgrind regression, which related to complex
	literals that were expressed using integer sub-values.  The problem
	was related to an idiom in my coding that I started out using, but
	have since shied away from (though haven't completely eradicated
	yet).  In particular, I used to do:
	
		if (typeid(foo) == typeid(DesiredType)) {
		  DesiredType foo2 = (DesiredType)(foo);
		  ...
		}
	
	using a static rather than a dynamic cast, having proved it was
	safe to do so.  I started to worry that this was a fragile
	construct since someone might modify the conditional without
	modifying the code.  It turns out that in this case, I did just
	that.  So now I use dynamic casts inside of these conditionals
	as an extra safety check (and performance be damned! :)

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

03/02/05 13:40:31 -- jplevyak

Log message:
	Add support for label/goto/break/continue.
	This support works through analysis and partially through
	code generation.  There is a question as to how best to
	store the resolved target of jumps.  I compute them
	(I resolve them to build the IF1 representation), but I
	don't know how you would like to store them.
	
	I have left the following .future files:
	
	deitz/bradc
	
	Support for basic control flow.  Need to resolve
	the targets.  I can do this for you if you decide what
	sort of data structure you want (e.g. do you
	want a "Stmt *target" in GotoStmt, BreakStmt, ContinueStmt).
	These things would have to be fixed up during copy and
	inlining, so I have left it to you to decided how you
	want to handle it.  The other alternative is to
	uniquify the labels in some manner and to have different
	labels for break and continue for each loop....

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/compiler/include/: pragma.h 
	chapel/test/trivial/jplevyak/: break-1.chpl break-1.good 
	                               break-2.chpl break-2.good 
	                               break-3.chpl break-3.good 
	                               break-4.chpl break-4.good 
	                               break-5.chpl break-5.good 
	                               continue-1.chpl continue-1.good 
	                               continue-2.chpl continue-2.good 
	                               continue-3.chpl continue-3.good 
	                               continue-4.chpl continue-4.good 
	                               continue-5.chpl continue-5.good 
	                               goto-1.chpl goto-1.good 
	                               goto-2.chpl goto-2.good 
	                               label-1.chpl label-1.good 
	                               label-2.chpl label-2.good 

---------------------------------------------------------------------------

03/02/05 16:22:35 -- jplevyak

Log message:
	.future files for the control flow tests

Added files:
	chapel/test/trivial/jplevyak/: break-1.future break-2.future 
	                               break-3.future break-4.future 
	                               break-5.future continue-2.future 
	                               continue-4.future 

---------------------------------------------------------------------------

03/02/05 16:23:40 -- jplevyak

Log message:
	test for parsing of string constants with embedded "

Added files:
	chapel/test/trivial/jplevyak/: string-1.chpl string-1.future 
	                               string-1.good 

---------------------------------------------------------------------------

03/02/05 17:30:54 -- jplevyak

Log message:
	Add pragmas.  These are stored off of Stmt(s) and Symbol(s) and use the
	syntax
	  pragma "inline" function foo(pragma "register" x) { ... }
	which is to say they are currently strings.  Most Symbol definition
	situations allow pragmas, in particular variable and and parameter
	definitions.  If there is interest we can attach them to Expr(s) as well.

Modified files:
	chapel/compiler/AST/: Makefile.share 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: misc.h pragma.h symbol.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/util/: misc.cpp 
Added files:
	chapel/test/trivial/jplevyak/: pragma-1.chpl pragma-1.good 
	                               pragma-2.chpl pragma-2.good 
	                               pragma-3.chpl pragma-3.good 
	                               pragma-4.chpl pragma-4.future 
	                               pragma-4.good pragma-5.chpl 
	                               pragma-5.good pragma-6.chpl 
	                               pragma-6.good 

---------------------------------------------------------------------------

03/03/05 09:04:13 -- jplevyak

Log message:
	Forgotten file

Added files:
	chapel/compiler/AST/: pragma.cpp 

---------------------------------------------------------------------------

03/03/05 10:51:25 -- deitz

Log message:
	Reworked ClassType::copy to not  build a TypeDefStmt and symbol.  This
	is done elsewhere now and caused some duplicate copying.
	
	Cleaned VarDefStmt traversal.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 

---------------------------------------------------------------------------

03/03/05 12:06:22 -- jplevyak

Log message:
	Cleaned up all the conflicts in the grammar.
	Made the compile fail if there are conflicts in the grammar.
	Added pragmas to Expressions.
	
	All pragmas are prefixes:
	
	  pragma "foo" pragma "bar" writeln(1);  // on statements
	  var pragma "biz" pragma "baz" x = 4;   // on symbols (the symbol "x")
	  x = (pragma "tiz" 45 + 76 ); // on expressions "45 + 76"
	
	Note: for expressions pragmas must appear after an opening paran or a ',' comman
	      and then they refer to the following expression.  To make sure you
	      are getting the right one, just add some parans.

Modified files:
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: Makefile chapel.y 

---------------------------------------------------------------------------

03/03/05 13:23:07 -- deitz

Log message:
	Added new Stmt called DefStmt.  This will replace TypeDefStmt,
	ModuleDefStmt, VarDefStmt, and FnDefStmt bringing us more inline with
	Brad's compiler architecture paper.  The real motivation behind this
	change is to move over to DefExprs so that symbols defined in
	ForallExprs and LetExprs will be defined via DefExprs along with all
	other symbols.
	
	Moved print functionality into VarSymbol's and FnSymbol's printDef
	routine and out of VarDefStmt's and FnDefStmt's printDef routine.
	
	Added a few .cvsignores.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symbol.h 
	chapel/compiler/traversals/: verifyASTType.cpp 
	chapel/test/flowanalysis/newast/: .cvsignore 
Added files:
	chapel/test/trivial/jplevyak/: .cvsignore 
	chapel/test/types/type_variables/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

03/03/05 15:46:12 -- jplevyak

Log message:
	Support pragmas on decls.
	Add support for cloning for manifest constants.
	Added "clone_for_manifest_constants" pragma to functions
	  in the internal_prelude.
	Fixed a bug : needed to dupstr the pragma string.

Modified files:
	chapel/compiler/AST/: pragma.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp fun.cpp 
	chapel/compiler/include/: fa.h fun.h 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 

---------------------------------------------------------------------------

03/03/05 16:56:04 -- jplevyak

Log message:
	Added a new function to "finalize" the if1 representation by doing
	dead code removal.   Lack of this was causing some instantiated functions to
	fail (in particular pragm-4.chpl).
	Remove the .future on pragma-4.

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp 
	chapel/compiler/include/: if1.h 
Removed files:
	chapel/test/trivial/jplevyak/: pragma-4.future 

---------------------------------------------------------------------------

03/04/05 10:19:31 -- jplevyak

Log message:
	Fixed another issue with generic instantiation having to do with constants.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/04/05 11:35:18 -- jplevyak

Log message:
	Moved the wrapper caches into the Fun class to make them function specific.
	Fixed default parameters, removed the .future file.

Modified files:
	chapel/compiler/analysis/: fun.cpp pattern.cpp 
	chapel/compiler/include/: fun.h 
Removed files:
	chapel/test/functions/bradc/: defaultParam.future 

---------------------------------------------------------------------------

03/04/05 12:50:13 -- deitz

Log message:
	Removed nils from the compiler, including nilType, nilStmt, nilILink,
	nilExpr, nilSymbol, nilFnSymbol, ..., replacing references to them
	with NULL.  Removed isNull() method.
	
	This checkin simplifies the implementation removing the need for
	double checks like '(indices && !indices->isNull()).'

Modified files:
	chapel/compiler/AST/: Makefile.share expr.cpp link.cpp stmt.cpp 
	                      symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h link.h stmt.h 
	                          symbol.h symscope.h symtab.h type.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: codegen.cpp createEntryPoint.cpp 
	chapel/compiler/symtab/: symlink.h symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             expandClassWiths.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp traversal.h 
Removed files:
	chapel/compiler/AST/: nils.cpp 
	chapel/compiler/include/: nils.h 

---------------------------------------------------------------------------

03/04/05 14:41:36 -- jplevyak

Log message:
	Add support for functions with operator (symbol) names.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

03/04/05 15:03:27 -- deitz

Log message:
	Added functionality to print the AST.  This can be used in debugging
	with the print_view function by passing it a Stmt or an Expr.
	
	For example, I can print out the TypeDefStmt for the class Array in
	the internal_prelude just after parsing and I get something like:
	
	(gdb) p print_view(stmt)
	
	(TypeDefStmt 'Array' 'Array'
	  (FnDefStmt 'this' 'this' 'i'
	    (BlockStmt
	      (ReturnStmt
	        (ParenOp
	          (Variable '__primitive')
	          (StringLiteral)
	          (Variable 'this')
	          (Variable 'i')))))
	  (FnDefStmt 'this' 'this' 'i' 'j'
	    (BlockStmt
	      (ReturnStmt
	        (ParenOp
	          (Variable '__primitive')
	          (StringLiteral)
	          (Variable 'this')
	          (Variable 'i')
	          (Variable 'j')))))
	  (FnDefStmt 'this' 'this' 'i' 'j' 'k'
	    (BlockStmt
	      (ReturnStmt
	        (ParenOp
	          (Variable '__primitive')
	          (StringLiteral)
	          (Variable 'this')
	          (Variable 'i')
	          (Variable 'j')
	          (Variable 'k'))))))

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

03/04/05 15:39:41 -- jplevyak

Log message:
	Switch over to using overloaded operators for all binary
	operations.  These are dispatched through system defined
	functions using the new "numeric" type (dtNumeric) in
	the internal_prelude.
	This will permit us to define operators over strings/arrays/domsin
	etc. in the future.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_ops.good 
	                                  compSampler.good 
	                                  danglingelse.good 
	                                  equality_ops.good 
	                                  logical_and.good mod.good 
	                                  mutrec.good pareninit.good 
	                                  relational_ops.good var.good 
	                                  var2.good whileLoop.good 

---------------------------------------------------------------------------

03/07/05 13:25:40 -- deitz

Log message:
	Added initial infrastructure support for looking at compiler code
	coverage of the test suite.  Read Coverage.readme for how to do this.

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/make/: Makefile.gnu 
Added files:
	chapel/compiler/: Coverage.pl Coverage.readme 

---------------------------------------------------------------------------

03/07/05 16:40:43 -- deitz

Log message:
	Unified BreakStmt, ContinueStmt, and GotoStmt to be GotoStmt with an
	enumeration as to whether it is a break, continue, or normal goto.
	This cleans up the code since these will be handled identically for
	the most part.
	
	Implemented codegen for break statements so that they act differently
	than a continue and jump to the point after the loop.  Labels now
	generate twice.  Before their statement, they generate the normal
	label.  After their statement, they append _post to it.  This after
	label is the target of a break statement.
	
	Changed the label name (char*) to be a Symbol that should resolve to a
	new LabelSymbol (new AST symbol).  Like all symbols, these are
	originally UnresolvedSymbols.
	
	Added functionality to the ScopeResolveSymbols traversal so that it
	also resolves labels, matching the labels of GotoStmts to LabelSymbols
	defined in LabelStmts.  Also, this traversal creates LabelStmts around
	ForLoops and WhileLoops that have break or continue statements
	(without labels) within them.  These are then made the target of the
	break and continue statements without labels.
	
	Changed .good files for break-2 and break-3 tests since they seemed
	wrong to me.
	
	Removed futures for break-1, break-2, break-3, break-4, break-5,
	continue-2, and continue-4.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	                             verifyASTType.cpp 
	chapel/test/trivial/jplevyak/: break-2.good break-3.good 
Removed files:
	chapel/test/trivial/jplevyak/: break-1.future break-2.future 
	                               break-3.future break-4.future 
	                               break-5.future continue-2.future 
	                               continue-4.future 

---------------------------------------------------------------------------

03/07/05 17:23:26 -- deitz

Log message:
	Simplified ClassType so that the order of the fields is defined by the
	order of the statements in the DeclarationList.  The fields vector no
	longer needs to be in order.
	
	Removed less-than-robust Vec template insert method.
	
	Simplified ExpandClassWiths.
	
	Short-circuited InsertVariableInitializations for variables declared
	within class types.  These will have to be put treated specially and
	put in the constructor.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h vec.h 
	chapel/compiler/traversals/: expandClassWiths.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

03/09/05 09:27:48 -- deitz

Log message:
	Added a new pass InsertFunctionTemps that inserts temporaries for
	cases where multiple functions are called from the same statement.
	This makes sure we use the right order of evaluation and makes it
	easier to manipulate function calls.  This maybe should be changed
	eventually to deal only with side-affecting functions.
	
	Added scope functions findEnclosingSymContext,
	findEnclosingStmtContext, and findEnclosingExprContext to search up
	from a scope looking for contexts.  Cleaned up code that did the same
	thing by hand.
	
	Updated typeName array so that print_view works again.  I should add
	something to make sure this stays up-to-date when new AST classes are
	added or removed.
	
	Fixed, with a stopgap, the check in fixup for the parentSymbol
	pointer.  This is now lenient allowing either the module or initFn to
	be the parent for top-level code.  The __init function should be
	inserted and then fixed up like other things.
	
	Added two new tests to look at deeply nesting function calls as in
	
	  foo(foo(foo(foo(foo(2)))))
	  foo(foo(foo(foo(foo(2) + foo(2)) + foo(2)) + foo(2)) + foo(2)) + foo(2)
	
	Updated test_var_decl_init1 to obey new parsing rules for
	if-statements.  Namely, if-statements must use a 'then' keyword or use
	curly brackets.
	
	Removed futures for trivial/deitz/test_var_decl_init1 and
	trivial/deitz/test_let8.  Note that the first test only works because
	of the fntemps pass breaking up two function calls in a statement.
	They are not side-affecting so don't have to be broken up.  The
	ProcessParameters pass fails in that case though.  This is still a
	problem.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share fixup.cpp 
	                             processParameters.cpp 
	chapel/test/trivial/deitz/: test_var_decl_init1.chpl 
Added files:
	chapel/compiler/traversals/: insertFunctionTemps.cpp 
	                             insertFunctionTemps.h 
	chapel/test/trivial/deitz/: test_nested_function_call.chpl 
	                            test_nested_function_call.good 
	                            test_nested_function_call2.chpl 
	                            test_nested_function_call2.good 
Removed files:
	chapel/test/trivial/deitz/: test_let8.future 
	                            test_var_decl_init1.future 

---------------------------------------------------------------------------

03/09/05 10:20:10 -- deitz

Log message:
	Added three tests for default parameters.  The first two work (though
	an extra function is cloned).  The third prints out a good error
	message but the line numbers don't exist for one of the functions.
	Line numbers need to be cleaned up as regards this future.

Added files:
	chapel/test/functions/deitz/: test_default_param1.chpl 
	                              test_default_param1.good 
	                              test_default_param2.chpl 
	                              test_default_param2.good 
	                              test_default_param3.chpl 
	                              test_default_param3.future 
	                              test_default_param3.good 

---------------------------------------------------------------------------

03/09/05 11:01:50 -- bradc

Log message:
	Trying to ease back into implementation, I worked on
	getting parameter intents working correctly for class
	arguments.  This was mostly fairly straightforward --
	I ammended the logic that determines how formal arguments
	should be codegened and how blank parameters are
	interpreted to handle the class cases correctly (in
	particular, blank intents imply pass-by-reference for
	classes).
	
	This fix also revealed some subtle problems in call_fixup
	within stmt.cpp which Steve helped me correct.
	
	I'm checked in four tests: 2 work correctly; 1 fails
	in analysis because it uses equality (==) on class
	instances, which seems to trip analysis up.  This is
	a future I've assigned to John;  a second test fails
	because it tries to refer to "nil" which we haven't
	implemented yet.  I've put that one in my name.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: internal_prelude.chpl 
Added files:
	chapel/test/functions/bradc/: intents-classes.chpl 
	                              intents-classes.good 
	                              intents-classes2.chpl 
	                              intents-classes2.good 
	                              intents-classes3.chpl 
	                              intents-classes3.future 
	                              intents-classes3.good 
	                              intents-classes4.chpl 
	                              intents-classes4.future 
	                              intents-classes4.good 

---------------------------------------------------------------------------

03/09/05 11:18:26 -- deitz

Log message:
	Removed stmtParent vector in fixup because the parentSymbol of Stmts
	is now set by looking up the symboltable scopes.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

03/09/05 11:59:08 -- deitz

Log message:
	Moved the setup of Expr's parent pointer (which points to its parent
	expr) to Fixup with a corresponding checkin in Fixup-Verify.  This was
	previously done in some constructors and was not always correct.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

03/09/05 14:50:55 -- bradc

Log message:
	I'm working on checking in some future tests that
	have been festering in my local directory, and found
	that this one was a trivial fix -- it seems as though
	we haven't supported constants in Chapel for quite
	some time -- at least since initializers were hoisted
	away from declarations.  In particular, we were
	codegening them using the "const" keyword in C, but
	not initializing them (and of course, Chapel consts
	can be less static than parameters, so that wouldn't
	work anyway.  This fix is therefore to simply not
	codegen the "const" tag for constants right now.  A
	later optimization would be to determine cases where
	a C const could be used and codegen the tag in that
	case.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/trivial/bradc/: declprintconst.chpl 
	                            declprintconst.good 

---------------------------------------------------------------------------

03/09/05 14:53:01 -- deitz

Log message:
	Added initial front-end support for named parameters.  These build up
	NamedExprs, a new class of Exprs.
	
	Added two tests which currently fail in analysis.  Assigned the
	futures to John.  When the function to create the wrappers is called,
	I'll take it back.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/functions/deitz/: test_named_param1.chpl 
	                              test_named_param1.future 
	                              test_named_param1.good 
	                              test_named_param2.chpl 
	                              test_named_param2.future 
	                              test_named_param2.good 

---------------------------------------------------------------------------

03/09/05 14:55:24 -- bradc

Log message:
	Checking in two future class tests that don't seem to be
	working in weird ways:
	
	- noinit declares a class variable but doesn't initialize
	  it, which causes analysis to complain.  Seems like this
	  shouldn't be a problem, so I assigned this one to John
	  for the time being.  John, let me know if I'm missing
	  something here, please.
	
	- weirdinit declares a class variable and initializes it
	  by calling it as though it was a constructor name. This
	  was a typo on my part in another test that I didn't
	  notice because -- amazingly! -- it worked.  Somehow
	  the call to the class name became a call to the class
	  constructor.  I assume that this is accidental, but
	  don't know where the fault lies.  John, Steve, could you
	  each look at this and let me know if you have any
	  insights as to why it isn't causing an actual problem?

Added files:
	chapel/test/classes/bradc/: noinit.chpl noinit.future 
	                            noinit.good weirdinit.chpl 
	                            weirdinit.future weirdinit.good 

---------------------------------------------------------------------------

03/11/05 08:37:00 -- jplevyak

Log message:
	Remove bogus error message and the .future for the test which
	illicited it.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/classes/bradc/: noinit.chpl 

---------------------------------------------------------------------------

03/11/05 12:05:55 -- deitz

Log message:
	Improved parsing of strings starting with ' and ".  Also, " can now be
	inserted as \" between "s and ' can now be inserted as \' between 's.
	Between 's, the " can be inserted without a \, but one is put in by
	the lexer.
	
	Removed trivial/jplevyak/string-1.future as it now works.

Modified files:
	chapel/compiler/parser/: chapel.lex 
Added files:
	chapel/test/trivial/deitz/: test_write_quotes.chpl 
	                            test_write_quotes.good 
	                            test_write_slash_n.chpl 
	                            test_write_slash_n.good 
Removed files:
	chapel/test/trivial/jplevyak/: string-1.future 

---------------------------------------------------------------------------

03/11/05 16:57:17 -- deitz

Log message:
	Fixed a small bug in which a class instance could be used as the
	constructor for a class.  This is now checked for more thoroughly.
	
	Removed .future for classes/bradc/weirdinit.

Modified files:
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 
	chapel/test/classes/bradc/: weirdinit.good 
Removed files:
	chapel/test/classes/bradc/: weirdinit.future 

---------------------------------------------------------------------------

03/13/05 13:26:48 -- jplevyak

Log message:
	Re-add noinit.chpl and remove noinit.future.

Added files:
	chapel/test/classes/bradc/: noinit.chpl 
Removed files:
	chapel/test/classes/bradc/: noinit.future 

---------------------------------------------------------------------------

03/14/05 11:30:08 -- jplevyak

Log message:
	Complete function visibility code.
	All PRIMARY_MEMBER functions are universally available
	(this works for classes where all members are universally available
	 and for records and unions because the primary method signature is
	 part of the type and hence any primary method will selected during dispatch).
	
	NOTE: I believe this exposes a bug in the symbol table as
	  trivial/deitz/test_block_call is failing.  Steve: you can
	  set a breakpoint in AInfo::visibile_functions in analysis.cpp
	  and wait for arg0->name to be "foo" and then watch the call
	  to Symboltable::lookupFromScope.  It is returning NULL.
	  Take a look and tell me what you see and if you think it is
	  a bug or not.  Thanx.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fun.cpp 
	chapel/compiler/include/: fun.h symtab.h 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

03/14/05 13:57:47 -- deitz

Log message:
	Fixed a bug in which a new TypeSymbol was not created for a new
	SumType when one was created.
	
	Fixed a bug in which the context for the scope for a cloned class was
	not set.
	
	Put in an error for generating constructors when none exist.
	
	Added a new pass (unfinished) to remove dead functions and types after
	analysis has run.
	
	Added a commented out #define of ANALYSIS_MATCH that when uncommented
	makes sure the types that analysis returns via type_info match the
	types in the AST and are not unknown.  John, try uncommenting this.
	It breaks every test because __init and _main are said to have unknown
	return type.  It also catches some errors in the class cloning tests,
	test_class_clone2.chpl, in which there are numerous errors on both
	sides of analysis.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share findUnknownTypes.cpp 
	                             resolveSymbols.cpp 
Added files:
	chapel/compiler/traversals/: removeDeadSymbols.cpp 
	                             removeDeadSymbols.h 

---------------------------------------------------------------------------

03/14/05 14:07:29 -- deitz

Log message:
	Fixed the scope that is used to lookup visible functions in
	analysis.cpp.  It is the modScope of a module and the paramScope of a
	function, not the parentScope.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/14/05 14:30:37 -- bradc

Log message:
	Steve points out that I failed to fix the
	initializers for my classes in these tests
	after filing the weirdinit.chpl test the
	other day.

Modified files:
	chapel/test/functions/bradc/: intents-classes2.chpl 
	                              intents-classes3.chpl 
	                              intents-classes4.chpl 

---------------------------------------------------------------------------

03/14/05 14:46:45 -- bradc

Log message:
	A few small Makefile changes:
	
	1) added support for "make depend" in the top-level runtime
	   directory, as I always want this without cd-ing into the
	   src/ subdirectory.
	
	2) added top-level targets for those of us who work on both
	   the compiler and runtime directories: comprt will cd into
	   both directories and build them.  depend will cd into both
	   directories and build dependences for them.

Modified files:
	./: Makefile 
	chapel/runtime/: Makefile 

---------------------------------------------------------------------------

03/14/05 15:07:26 -- bradc

Log message:
	Added a bunch of platforms to the compiler's .cvsignore
	files.  At Cray, we tend to write our platform-specific
	files out to a local directory partition using the
	CHAPELDEVTMP environment variable, and the symbolic links
	that are set up are ignored by cvs by default.  These
	.cvsignore files should prevent such directories from
	being paid attention to when this env var isn't used.

Modified files:
	chapel/compiler/AST/: .cvsignore 
	chapel/compiler/analysis/: .cvsignore 
	chapel/compiler/analysis/make_prims/: .cvsignore 
	chapel/compiler/main/: .cvsignore 
	chapel/compiler/parser/: .cvsignore 
	chapel/compiler/vparser/: .cvsignore 
	chapel/compiler/vparser/cast/: .cvsignore 
Added files:
	chapel/compiler/adt/: .cvsignore 
	chapel/compiler/backend/: .cvsignore 
	chapel/compiler/passes/: .cvsignore 
	chapel/compiler/symtab/: .cvsignore 
	chapel/compiler/traversals/: .cvsignore 
	chapel/compiler/util/: .cvsignore 

---------------------------------------------------------------------------

03/14/05 16:57:23 -- jplevyak

Log message:
	Some algorithmic improvements to the code which detects incompletely
	covered argument types.  This is what was causing the problem with
	compSample running out of time.  The new algorithm is still not linear
	in the size of the program, but I will continue to work on it.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: fa.h 

---------------------------------------------------------------------------

03/14/05 17:06:00 -- jplevyak

Log message:
	Fix error messages from last checkin

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

03/14/05 17:33:04 -- bradc

Log message:
	Changed configuration of third-party/boehmgc build
	so that valgrind support is enabled only if
	valgrind is available (determined by checking the
	user's path for valgrind and assuming that the
	include directory is ../include from there).  The
	hope is that this will allow the compiler to be
	built once again on platforms that don't support
	valgrind (like cygwin and sun).
	
	John, if this doesn't work on your setup, please
	let me know how it fails (and maybe send the full
	result of a "make clean all" from the third-party
	directory?).  I suspect that the old version
	didn't work either due to the hard-coding of the
	Cray valgrind path into the include path?

Modified files:
	chapel/third-party/boehmgc/gc6.3/: configure 
	chapel/third-party/boehmgc/gc6.3/include/private/: gc_priv.h 

---------------------------------------------------------------------------

03/14/05 17:44:12 -- jplevyak

Log message:
	Add new tests for record ==.
	Future assigned to Steve for want of a better disposition.

Added files:
	chapel/test/classes/jplevyak/: record_equal-1.chpl 
	                               record_equal-1.future 
	                               record_equal-1.good 
	                               record_equal-2.chpl 
	                               record_equal-2.future 
	                               record_equal-2.good 

---------------------------------------------------------------------------

03/14/05 18:41:50 -- bradc

Log message:
	A slight improvement to my last checkin
	that doesn't rely on the status code of
	"which" being correct (as it seems that
	the which command on our Sun boxes does
	not set the status code).  Ammended the
	scheme by also seeing if valgrind --help
	works.

Modified files:
	chapel/third-party/boehmgc/gc6.3/: configure 

---------------------------------------------------------------------------

03/15/05 10:18:32 -- jplevyak

Log message:
	Regorganized the loops used to determine which formals arguments types
	are not covered by the potential target functions.  The algorithm is
	now linear in the number of edges in the call tree and the number of
	function arguments.
	
	PROFILE says that it is now inconsequential.  compSampler still
	takes a fair amount of time, but it is now dominated by GC with
	the highest non-GC function ILink::tail().

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 

---------------------------------------------------------------------------

03/15/05 10:29:03 -- deitz

Log message:
	Unified VarDefStmt, TypeDefStmt, FnDefStmt, and ModuleDefStmt into
	DefStmt.  The next step is to add DefExpr which will give a definition
	expression for all symbols.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h symtab.h type.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             applyThisParameters.cpp fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeDeadSymbols.cpp 
	                             renameOverloadedFunctions.cpp 
	                             specializeParenOpExprs.cpp 
	                             transformLetExprs.cpp 
	                             verifyASTType.cpp 
Removed files:
	chapel/compiler/traversals/: cloneAllFns.cpp cloneAllFns.h 

---------------------------------------------------------------------------

03/15/05 11:20:47 -- jplevyak

Log message:
	Add "object" type which is the builtin parent of all "class" objects.
	Use the "object" type to implement == and != as pointer == and !=.
	Remove test/functions/bradc/intents-classes3.future which now passes.
	Added support for named arguments.
	Named arguments now fail in codegen.
	Moved the .future files for named arguments over to Steve.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/test/functions/deitz/: test_named_param1.future 
	                              test_named_param2.future 
Removed files:
	chapel/test/functions/bradc/: intents-classes3.future 

---------------------------------------------------------------------------

03/15/05 12:19:58 -- bradc

Log message:
	A few changes to make the compiler work on the Sun boxes
	again.  Added an explicit cast to files.cpp, made some of
	the commands executed by the test scripts more portable.
	
	The one change that might affect users is that the
	test environment variable CHPL_VALGRIND_OPTIONS was
	shortened to CHPL_VALGRIND_OPTS because the former name
	was too long for the Sun boxes.  John, I think you might
	have used this at one point when we had a version skew?
	I'm not sure whether you still do or not.

Modified files:
	chapel/compiler/util/: files.cpp 
	chapel/test/: start_test sub_clean sub_test 

---------------------------------------------------------------------------

03/15/05 12:24:41 -- deitz

Log message:
	Added new test for operator overloading.  This is a basic test to see
	if we can code generate a call to the overloaded function.

Added files:
	chapel/test/functions/deitz/: test_operator_overloading1.chpl 
	                              test_operator_overloading1.future 
	                              test_operator_overloading1.good 

---------------------------------------------------------------------------

03/15/05 14:55:29 -- bradc

Log message:
	Fixed tests that weren't working on the Sun to
	improve portability.  These are minor changes:
	Sun's grep didn't tack a newline onto the end
	of files while Linux's does, so had to modify
	a PREDIFF file to make things worked.  Suns
	byte ordering also pointed out that in some
	tests I was printing out 64-bit integers using
	%d formatting strings rather than %lld.  This
	implies that for the long-term, we should
	probably invent our own formatting strings for
	Chapel to avoid relying on the fact that C's
	betray too much about the underlying types
	used to represent Chapel's types.  For now,
	C's seem fine, though.

Modified files:
	chapel/test/compflags/bradc/gdbddash/: PREDIFF 
	chapel/test/trivial/bradc/: formatoutput.chpl 
	chapel/test/trivial/bradc/domarr/: enumarray.chpl 

---------------------------------------------------------------------------

03/15/05 14:55:39 -- jplevyak

Log message:
	Make handling of coerce more robust, fixes functions/deitz/test_operator_overloading1
	Change .future since it now fails in codegen.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/test/functions/deitz/: test_operator_overloading1.future 

---------------------------------------------------------------------------

03/16/05 11:22:47 -- deitz

Log message:
	Added DefExpr.  All symbols that were previously defined through
	DefStmts are now defined through DefExprs within DefStmts.  Symbols
	defined in Forall expressions and statements, let expression, and
	formal parameters are still defined without DefExprs.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symtab.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeDeadSymbols.cpp 
	                             renameOverloadedFunctions.cpp 
	                             renameOverloadedFunctions.h 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
	                             transformLetExprs.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

03/16/05 11:58:08 -- jplevyak

Log message:
	call_info now takes any Expr so that it can be used with BinOpExpr
	among others.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

03/16/05 12:00:43 -- deitz

Log message:
	Added skeleton for a new pass ResolveOverloadedOperators that will
	change uses of overloaded operators into function calls and mangle the
	name of those functions so they can be generated in C.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             insertFunctionTemps.h 
Added files:
	chapel/compiler/traversals/: resolveOverloadedOperators.cpp 
	                             resolveOverloadedOperators.h 

---------------------------------------------------------------------------

03/16/05 13:59:15 -- deitz

Log message:
	Implemented post-analysis support for operator overloading.  There are
	some issues, discussed below.
	
	The ResolveOverloadedOperator pass now mangles the C names of
	functions that are overloading operators.  In addition, it replaces a
	use of an overloaded operator with a function call using analysis's
	recently-enhanced call_info function.
	
	Improved copy so that ainfo is copied (shallowly) when expressions or
	statements are copied.  This didn't work always when analysis makes a
	callback to do the copy.  So it is currently guarded against doing
	this shallow copy when analysis is running, i.e., when we are in the
	analysis pass.  I need it post-analysis to avoid a pass-ordering
	problem between the passes that normalize the AST after analysis.  We
	do copies in many of these passes and they all rely on the ainfo field
	being maintained.  John, do you think this guard is necessary?  If
	not, feel free to remove it, but then analysis fails on some cases.  I
	don't have any objections to it.
	
	This checkin is currently special-casing the functions in the internal
	prelude as if they all have the pragma that I added there.  I can't
	seem to find the pragmas.  I tried maintaining pragmas when
	expressions and statements are copied, but ran into some problems.
	I'll look into this further.
	
	This fixes test_operator_overloading1 so I removed the future.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: runAnalysis.cpp runAnalysis.h 
	chapel/compiler/traversals/: resolveOverloadedOperators.cpp 
	chapel/test/functions/deitz/: test_operator_overloading1.chpl 
Removed files:
	chapel/test/functions/deitz/: test_operator_overloading1.future 

---------------------------------------------------------------------------

03/16/05 14:46:24 -- deitz

Log message:
	Added the pragma "builtin" to mean that this overloaded operator
	function should not replace the operator.  It is used on all the
	overloaded operator functions in the internal prelude.  The
	ResolveOverloaedOperators ignores operators that are overloaded with
	"builtin" functions.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: resolveOverloadedOperators.cpp 

---------------------------------------------------------------------------

03/16/05 15:18:46 -- deitz

Log message:
	Added a new pass to remove NamedExpr (named parameters) from the AST.
	These need to be removed after analysis.  If the order has changed, a
	wrapper function has already been created.
	
	This fixes test_named_param1 and I passed the future pf
	test_named_param2 over to John.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/functions/deitz/: test_named_param2.future 
Added files:
	chapel/compiler/traversals/: removeNamedParameters.cpp 
	                             removeNamedParameters.h 
Removed files:
	chapel/test/functions/deitz/: test_named_param1.future 

---------------------------------------------------------------------------

03/16/05 17:21:47 -- roxana

Log message:
	Added Support for parameters. They are treated as variable declaration
	with different degrees of "constness": var, const, parameter. In
	particular parameter should only be compile time constant. This does
	not work perfectly now. In particular, parameter should have a
	mandatory initializer, unlike variables which have an optional one. I
	put this in a future test so that I can work on it without having CVS
	insert in >>>> and === in my files.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             insertFunctionTemps.cpp 
	                             processParameters.cpp 
	                             insertUnionChecks.h 
	chapel/compiler/include/: code.h sym.h vec.h expr.h pnode.h 
	                          baseAST.h symbol.h symtab.h symscope.h 
	chapel/compiler/passes/: filesToAST.cpp runAnalysis.cpp 
	chapel/third-party/dparser/d/: make_dparser.cat 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/trivial/roxana/: test_param_decl.good 
	                             test_param_decl1.chpl 
	                             test_param_decl3.future 
	                             test_param_init.chpl 
	                             test_param_decl1.good 
	                             test_dead_var_decl.future 
	                             test_param_decl.chpl 
	                             test_param_decl2.good 
	                             test_param_decl2.chpl 

---------------------------------------------------------------------------

03/16/05 18:00:06 -- roxana

Log message:
	Commented out a debugging statement.

Modified files:
	chapel/compiler/traversals/: checkSemantics.cpp 

---------------------------------------------------------------------------

03/16/05 18:44:21 -- roxana

Log message:
	Added NL to the good files. I still did not get how to check
	in files that check for errors. For now, these are test_param_decl2.chpl
	and good. It looks like this is not the right way...

Modified files:
	chapel/test/trivial/roxana/: test_param_init.chpl 
	                             test_param_decl.good 
	                             test_param_decl2.good 
	                             test_param_decl1.good 
Added files:
	chapel/test/trivial/roxana/: test_param_init.good 

---------------------------------------------------------------------------

03/16/05 20:07:06 -- jplevyak

Log message:
	Fix printDecl to only print "var" when not "const" or "param".

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

03/17/05 09:22:20 -- roxana

Log message:
	Added blank line to test_param_decl2.good -- UST_FATAL
	seems to do that.

Modified files:
	chapel/test/trivial/roxana/: test_param_decl2.good 

---------------------------------------------------------------------------

03/17/05 10:32:34 -- roxana

Log message:
	Improved support for parameters to require an initializer upon
	declaration.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
Added files:
	chapel/test/trivial/roxana/: test_param_decl3.chpl 
	                             test_param_decl3.good 
Removed files:
	chapel/test/trivial/roxana/: test_param_decl3.future 

---------------------------------------------------------------------------

03/17/05 11:51:13 -- deitz

Log message:
	Added a new pass BuildClassConstructorsEtc which is currently only
	used to build an == function for records.  This function overloads ==
	for records.
	
	This pass is currently commented out because of an error that I'm
	getting in analysis and can't figure out.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	chapel/test/classes/deitz/: test_record3.chpl test_record3.good 

---------------------------------------------------------------------------

03/17/05 12:34:16 -- deitz

Log message:
	Enabled BuildClassConstructorsEtc which currently just builds an ==
	function for records.
	
	Made it so that RemoveDeadSymbols now removes dead functions as well
	as dead types right after analysis.
	
	Added a guard against codegening an empty list of statements for a
	module.  Added a guard against codegening constructors if there are
	none.  (For records, the constructor might be dead and thus removed.)
	
	Made a couple of superficial changes to BuildClassConstructorsEtc.
	
	Added a new test test_record_equal1 to test if we can use == on records.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             removeDeadSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_equal1.chpl 
	                            test_record_equal1.good 

---------------------------------------------------------------------------

03/17/05 15:47:50 -- jplevyak

Log message:
	test_named_param2 now calls the function to create a reorder wrapper
	(which is currently not implemented)
	Passed .future over to Steve.
	Instituted naming conventions to differentiate various types of MPositions:
	// Key to names of position variables
	//  ABCD
	//   A = a | f, actual or formal (MANDITORY)
	//   B = c, cannonical (OPTIONAL)
	//   C = p, positional (OPTIONAL)
	//   D = p, position (MANDITORY)
	// Examples:
	//  acpp - actual, cannonical, positional position
	//  acnp - actual, cannonical, named position
	//  ap - actual non-cannonical, positional or named position
	Did a full review of pattern.cpp to ensure that all positions were being
	used correctly.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: cg.cpp clone.cpp fa.cpp fun.cpp 
	                           pattern.cpp 
	chapel/compiler/backend/: dump.cpp 
	chapel/compiler/include/: fun.h pattern.h 
	chapel/test/functions/deitz/: test_named_param2.future 

---------------------------------------------------------------------------

03/17/05 16:31:58 -- deitz

Log message:
	Extended BuildClassConstructorsEtc to build the class constructors.
	These are no longer built from a call when the ClassType was created.
	
	The constructors now also initialize the members of a class.  For
	classes that will be cloned and don't have all the type info for their
	fields, we punt on initializing that field.  I think what we need to
	do is actually not create the constructor for cloned classes until
	they are cloned.  John, do you agree with this?
	
	I left commented a #define at the top of BuildClassConstructorsEtc
	
	   //#define CONSTRUCTOR_WITH_PARAMETERS 1
	
	When this is uncommented, the constructor is created with parameters
	so that it can be called with parameters.  The parameters are given
	default values.  However, I don't think a default wrapper is built for
	constructors that are called without the parameters.
	
	I left a future classes/deitz/test_class3.future for John.  This
	future uses the named parameters to call the class constructor.  If
	you uncomment the above line, this test will succeed but all the tests
	that call class constructors without arguments will fail.
	
	Reenabled checking in Fixup to make sure that the defPoint is
	correctly set.  This was accidentally turned off in my removal of the
	nils.
	
	I also extended BuildClassConstructorsEtc to create the enum of tag
	ids for our typesafe unions.  These were previously hardcoded in code
	generation.  One thing I had to do because of this was to force
	codegen to codegen all enums before everything else.  I think we
	should spend some time thinking about how we're going to codegen
	things in an order so as to work with C.
	
	Moved BuildClassConstructorsEtc down a little in the passlist so that
	the symbols are scope resolved first and so we know the types of
	fields within classes.
	
	Passed .futures for record_equal-1,2 over to John as per my last
	checkin of creating == for records.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp 
	chapel/test/classes/jplevyak/: record_equal-1.future 
	                               record_equal-2.future 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/classes/deitz/: test_class2.chpl test_class2.good 
	                            test_class3.chpl test_class3.future 
	                            test_class3.good test_class4.chpl 
	                            test_class4.good test_record4.chpl 
	                            test_record4.good test_record5.chpl 
	                            test_record5.good 

---------------------------------------------------------------------------

03/18/05 09:31:39 -- deitz

Log message:
	Fixed a bug in the creation of tuple types in which the default values
	were not replaced correctly, i.e., with replace.
	
	Fixed a bug in inserting anonymous types in which the type definition
	statements were not inserted correctly, i.e., with insertBefore.
	
	Fixed a bug in Fixup caused by secondary methods not always having a
	parentScope.
	
	Removed the --noanalysis flag from my tuple tests directory.  Added a
	new tuple test subdirectory called noanalysis which replicates these
	tests.  This will make it so incomplete changes on my part will cause
	regressions to the tuple tests even before analysis handles them.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: fixup.cpp insertAnonymousTypes.cpp 
Added files:
	chapel/test/types/tuple/deitz/noanalysis/: COMPOPTS 
	                                           test_tuple_simple1.chpl 
	                                           test_tuple_simple1.good 
	                                           test_tuple_simple2.chpl 
	                                           test_tuple_simple2.good 
	                                           test_tuple_simple3.chpl 
	                                           test_tuple_simple3.good 
	                                           test_tuple_simple4.chpl 
	                                           test_tuple_simple4.good 
	                                           test_tuple_simple5.chpl 
	                                           test_tuple_simple5.good 
Removed files:
	chapel/test/types/tuple/deitz/: COMPOPTS 

---------------------------------------------------------------------------

03/18/05 10:35:43 -- deitz

Log message:
	Fixed a bug in which we tried but failed to put extra parentheses
	around the following operators: or, and, |, ^, and &.
	
	Fixed a bug in codegening of MemberAccess in which the type of the
	base expression was not found using the typeInfo facility but rather
	done in limited way.
	
	Simplified the == function for records from something like
	
	  if (record1.field1 != record2.field1) return false;
	  if (record1.field2 != record2.field2) return false;
	  ...
	  return true;
	
	to something like
	
	  return (record1.field1 == record2.field1) &&
	         (record1.field2 == record2.field2) && ...;
	
	Fixed the --noanalysis symbol resolution to resolve MemberAccess
	member symbols in a more robust way.
	
	Passed future for test_nested_record1 over to John.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/test/classes/deitz/: test_nested_record1.future 

---------------------------------------------------------------------------

03/18/05 11:29:59 -- jplevyak

Log message:
	Remove "clone_for_manifest_constant" and use "clone_for_constants" intead.
	Attach "clone_for_constants" pragma to tuple indexing function argument.
	Move Symbol pragmas from temporary Symbol to ParamSymbol in defineFun...
	  I don't understand this code, so I hope I didn't overlook something.
	Cleanup analysis.cpp a bit.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp fun.cpp 
	                           var.cpp 
	chapel/compiler/include/: fa.h fun.h sym.h var.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

03/18/05 11:34:51 -- deitz

Log message:
	Adding a test for John to look at.

Added files:
	chapel/test/functions/deitz/: test_named_param3.chpl 
	                              test_named_param3.future 
	                              test_named_param3.good 

---------------------------------------------------------------------------

03/18/05 12:21:02 -- jplevyak

Log message:
	remove some cluttern from named argument handling

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

03/18/05 13:21:08 -- jplevyak

Log message:
	Fixed a bug in handling named arguments which are constants.
	Fixed a bug in the way destructured arguments are handled.

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 

---------------------------------------------------------------------------

03/18/05 13:27:08 -- jplevyak

Log message:
	Changed to:
	
	deitz
	
	This test will work if CONSTRUCTOR_WITH_PARAMETERS is undefined.
	However, lots of other tests will fail because the wrapper which
	is created doesn't return the result of the call to the
	wrapped function.
	
	The result is that "void" is coming back from the "construct" wrapper:
	
	b:compiler [649] % chpl ../test/classes/bradc/noinit.chpl
	noinit.chpl:9: unresolved member 'x'  class 'void'
	noinit.chpl:10: unresolved member 'y'  class 'void'
	noinit.chpl:11: unresolved member 'x'  class 'void'
	noinit.chpl:11: expression has no type
	noinit.chpl:11: unresolved member 'y'  class 'void'
	noinit.chpl:11: expression has no type
	fail: fatal error, program does not type
	
	The IF1 code is:
	
	(SYMBOL (var "_construct_pair" 592) :TYPE_KIND FUN :TYPE (var "_construct_pair" 592) :HAS ((var "_construct_pair" 599)) :RET (temp 596) :CONT (temp 595) :GLOBAL true :CODE
	 (CONC
	  (MOVE (const "0.0" 597) (var "_default_param_temp_y" 593))
	  (MOVE (const "0" 526) (var "_default_param_temp_x" 594))
	  (SEND (FUTURE (temp 598)) (var "_construct_pair" 196) (var "_default_param_temp_x" 594) (var "_default_param_temp_y" 593))
	  (MOVE (var "void" 138) (temp 596))
	  (SEND (var "reply" 1) (temp 595) (temp 596))))
	
	which is returning "void"
	
	I am assuming this is Steve's problem... if it isn't assign it back to me :)

Modified files:
	chapel/test/classes/deitz/: test_class3.future 

---------------------------------------------------------------------------

03/18/05 13:40:19 -- jplevyak

Log message:
	Changed to:
	
	deitz
	
	record of record is not working
	
	The problem here is that buildClassConstructorsEtc is
	not calling the constructor for the embedded record.
	Analysis is using the constructor call to setup the
	type information, so even if we don't want to make
	a full "__new" call we could make an "__init" call
	with the embedded type to tell analysis what it is.
	Basically I would like a hook so that I can initialize
	the type of "coordinates".
	
	I am passing this back to Steve to make the call
	to the sub-constructor.  If we want to handle this
	some other way, let's talk about it.

Modified files:
	chapel/test/classes/deitz/: test_nested_record1.future 

---------------------------------------------------------------------------

03/18/05 13:57:10 -- jplevyak

Log message:
	in analysis.h there is a new function:
	void structural_subtypes(Type *t, Vec<Type *> subtypes);
	which tells which things are structural subtypes of others.
	If two things are mutually structural subtypes of each other
	then they are equivalent.
	Updated .future files for Steve to use the above function.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/test/classes/jplevyak/: record_equal-1.future 
	                               record_equal-2.future 

---------------------------------------------------------------------------

03/18/05 13:58:44 -- shannon

Log message:
	Added functionality to the memory wrapper functions with
	the addition of a table that stores the address, number,
	size, and description of allocated memory.  This
	information will eventually be made available to the chpl
	programmer per runtime flags.
	
	Specifically:
	
	* chplmem.c:  Added the data structure, memTableEntry, to
	  hold memory information which is then stored in a table
	  (hashed per memory address).  Added the usual hash table
	  functions.  Modified _chpl_free to delete the memory
	  information from the table.  Modified _chpl_realloc
	  so that if a new pointer is returned the prior entry is
	  removed from the table.  Also modified _chpl_realloc so
	  that if memory of size 0 is requested the address is
	  freed.
	
	* Added some tests.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/runtime/include/: chplmem.h config.h stdchpl.h 
	chapel/runtime/src/: Makefile chplmem.c chpltypes.c config.c 
	                     main.c 
Added files:
	chapel/runtime/include/: chplmem_tests.h 
	chapel/runtime/src/: chplmem_tests.c 
	chapel/test/memory/shannon/: freedMalloc.chpl freedMalloc.good 
	                             freedWithoutMalloc.chpl 
	                             freedWithoutMalloc.good 
	                             mallocOutOfMemory.chpl 
	                             mallocOutOfMemory.good 
	                             reallocWithoutMalloc.chpl 
	                             reallocWithoutMalloc.good 
	                             reallocZeroSize.chpl 
	                             reallocZeroSize.good 

---------------------------------------------------------------------------

03/18/05 14:15:38 -- jplevyak

Log message:
	OK, now I only include in the map those positions which are different.
	So now both tests have 2 mappings.  This also eliminates the mapping for
	the function name (which never changes).  However, argument numbering
	still starts at 2.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/test/functions/deitz/: test_named_param3.future 

---------------------------------------------------------------------------

03/18/05 15:13:58 -- jplevyak

Log message:
	The reorder map now contains all arguments instead of just the
	ones that changed.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

03/18/05 15:28:10 -- deitz

Log message:
	Implemented FnSymbol::order_wrapper to create wrapper functions for
	named parameters.
	
	Removed futures for test_named_param2 and test_named_param3.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/functions/deitz/: test_named_param3.good 
Removed files:
	chapel/test/functions/deitz/: test_named_param2.future 
	                              test_named_param3.future 

---------------------------------------------------------------------------

03/18/05 15:59:36 -- deitz

Log message:
	Improved support for nested records so that within the constructor to
	the outer instance, the constructor to the inner instance is called.
	
	Removed future for test_nested_record1.
	
	Added a new test test_nested_record2 that creates the same nested
	record but then uses == on it.  It passes.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/classes/deitz/: test_nested_record1.good 
Added files:
	chapel/test/classes/deitz/: test_nested_record2.chpl 
	                            test_nested_record2.good 
Removed files:
	chapel/test/classes/deitz/: test_nested_record1.future 

---------------------------------------------------------------------------

03/18/05 16:57:00 -- deitz

Log message:
	Regarding test_class3.future:
	
	The default_wrapper now returns whatever the function returns.  This
	helps with constructors.
	
	John, can you take a look at this by uncommenting
	CONSTRUCTOR_WITH_PARAMETERS again.  Now we are really close on the
	other tests, ex. test_class1.chpl, but the actual call to the
	constructor is still made to the constructor not the wrapper.  I think
	this may have something to do with resolving the symbol before
	analysis rather than using an UnresolvedSymbol.  I can do that, but
	then the problem is that analysis can't resolve it.  This is in
	specializeParenOpExprs.cpp:24.  If you change the reference from "fn"
	to new UnresolvedSymbol(fn->name).
	
	I was thinking of making it a MemberAccess too where the base is the
	typesymbol for the class.  This is inline with how constructors should
	work Classname.constructor, but that doesn't work either.  How do you
	think we should handle this.  Feel free to take a look at it if you
	want.  Otherwise we can go through it Monday.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

03/21/05 09:18:19 -- deitz

Log message:
	Added a commented out #define in specializeParenOpExprs.cpp:7. If this
	is uncommented, the constructor call is an unresolved symbol.  John,
	is this the right approach?  Analysis balks at this unresolved symbol
	and I'm not sure why.

Modified files:
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

03/21/05 10:53:30 -- deitz

Log message:
	In the commented-out section of this code, constructors are now
	MemberAccesses where the base is the TypeSymbol of the class.

Modified files:
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

03/21/05 11:01:46 -- deitz

Log message:
	Added high-level support for eliding the parentheses of methods that
	take no arguments.  Added error-checking to make sure parentheses are
	not elided in functions that are not methods.
	
	Added a test case for ? at the end of functions.
	
	This doesn't completely work yet because analysis seems to mark the
	method as being dead.  I left the future for test_method_noparens for
	John.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: methodsToFunctions.cpp 
	                             removeDeadSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_bad_function_noparens.chpl 
	                            test_bad_function_noparens.good 
	                            test_method_noparens.chpl 
	                            test_method_noparens.future 
	                            test_method_noparens.good 
	chapel/test/trivial/deitz/: test_function_question_mark.chpl 
	                            test_function_question_mark.good 

---------------------------------------------------------------------------

03/21/05 11:16:55 -- deitz

Log message:
	Added support for != over records using an automatically-generated !=
	function that wraps around the == function.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_equal2.chpl 
	                            test_record_equal2.good 

---------------------------------------------------------------------------

03/21/05 11:22:58 -- jplevyak

Log message:
	Fixed SEGV when NO_RESOLVE_CONSTRUCTOR and CONSTRUCTOR_WITH_PARAMETERS is set.
	The function _constructor_foo still isn't found.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/21/05 14:16:30 -- deitz

Log message:
	Added a new pass InsertElidedLoops that inserts forall loops around
	statements like array assignment.  This should eventually do something
	for sequence assignment too, I imagine.
	
	This fixes test_array_assign2.  I added a new test test_array_assign3
	that tries to assign arrays by writing A = B + C.  This fails in
	analysis so I handed the future to John.  I'm pretty sure I know what
	he is going to say but not completely.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	chapel/test/arrays/deitz/: test_array_assign3.chpl 
	                           test_array_assign3.future 
	                           test_array_assign3.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_assign2.future 

---------------------------------------------------------------------------

03/21/05 14:18:51 -- deitz

Log message:
	Passing these futures onto John.
	
	If you uncomment ANALYSIS_MATCH and ignore what it says about the main
	and __init functions, there seem to be problems related to the cloned
	classes.  Their members don't seem to get a type, for one.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class2.future 
	                                         test_clone_class2a.future 

---------------------------------------------------------------------------

03/21/05 15:46:40 -- deitz

Log message:
	Improved support for multi-dimensional anonymous domains and removed
	test_anon_domain2.future.  The rank of the anonymous arithmetic domain
	is now computed based on the number of SimpleSeqExprs in the Expr list.

Modified files:
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_anon_domain2.future 

---------------------------------------------------------------------------

03/21/05 16:23:57 -- jplevyak

Log message:
	Removed unnecessary code (old BREAK and CONTINUE code).
	Hacked IF1 translation to treat VARIABLE->var == SYMBOL_TYPE
	differently when it is part of a MEMBER_ACCESS.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/21/05 17:00:18 -- jplevyak

Log message:
	Add support for pointwise array operations (except == and != which I am not
	clear on).
	Removed the .future for the basic array addition test.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
Removed files:
	chapel/test/arrays/deitz/: test_array_assign3.future 

---------------------------------------------------------------------------

03/21/05 17:55:19 -- jplevyak

Log message:
	Fixup 0-arity member function calls.  Really need to have this clarified
	by David, but I am doing a checkin to get the CVS record.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
Removed files:
	chapel/test/classes/deitz/: test_method_noparens.future 

---------------------------------------------------------------------------

03/21/05 18:38:28 -- bradc

Log message:
	Added the ability to specify a test-specific timeout
	value (e.g., foo.timeout for a test foo.chpl), in
	addition to the current directory-specific timeout
	(using a TIMEOUT file), and added such a timeout
	value for the compSampler test.  Didn't do anything to
	make the timeout valgrind-specific vs. not (could
	either have timeout files list two timeout values,
	or we could have different files for the different
	types).

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/trivial/shannon/: compSampler.timeout 

---------------------------------------------------------------------------

03/22/05 09:48:53 -- deitz

Log message:
	Added codegenPrototype routines for arrays, classes, records, and
	unions.  This allows these to be declared after they are used.  This
	currently shows up because of the way arrays are created but could
	show up if the user declares them after they are used.
	
	Improved support for arrays of records/classes/unions.  The test for
	array of records test is currently failing in analysis, but the test
	of an array of classes passes.
	
	Fixed a bug in the _INIT_ARRAY macro which would fail if the domain or
	array were named "d" because it used a local variable named d as well.
	This local variable is now called "__dim".

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             resolveSymbols.cpp 
	chapel/runtime/include/: array.h 
Added files:
	chapel/test/arrays/deitz/: test_array_of_class1.chpl 
	                           test_array_of_class1.good 
	                           test_array_of_record1.chpl 
	                           test_array_of_record1.future 
	                           test_array_of_record1.good 

---------------------------------------------------------------------------

03/22/05 09:59:19 -- deitz

Log message:
	With this checkin change, if CONSTRUCTOR_WITH_PARAMETERS is
	uncommented, the constructors will be built in the scope of the class
	(visible wherever the class is).

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/22/05 10:27:18 -- deitz

Log message:
	Decoupled the creation of the != record function from the == record
	function.  It no longer negates the results of a call to == but rather
	creates a different function from scratch.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/22/05 11:02:44 -- jplevyak

Log message:
	Fix arrays of records and remove the .future file.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_array_of_record1.future 

---------------------------------------------------------------------------

03/22/05 11:55:08 -- jplevyak

Log message:
	Added support for destructuring tuples in assignment.
	Added simple test cases for this for 1 and 2 levels.
	2 levels failed, put in .future for Steve.
	Removed .futures for 2 of the test_tuple_simpleX cases.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	                           pattern.cpp 
	chapel/compiler/include/: fa.h geysa.h map.h 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
Added files:
	chapel/test/types/tuple/jplevyak/: destruct-1.chpl 
	                                   destruct-1.good 
	                                   destruct-2.chpl 
	                                   destruct-2.good 
Removed files:
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple2.future 

---------------------------------------------------------------------------

03/22/05 11:55:13 -- bradc

Log message:
	Improved BoehmGC configure script to no longer
	assume that presence of valgrind implied the
	presence of a valgrind include directory.  This
	should fix Roxana's build since her valgrind
	installation didn't seem to include the include
	paths.
	
	John, as a sanity check, is your valgrind include
	a sibling of your binary?  Which is to say:
	
		.../bin/valgrind
		.../include/valgrind/*.h

Modified files:
	chapel/third-party/boehmgc/gc6.3/: configure 

---------------------------------------------------------------------------

03/22/05 13:34:08 -- deitz

Log message:
	Reordered pre-analysis normalizing passes in passlist so that
	anonymous types are inserted before class constructors etc. are
	created.
	
	Added creation of overloaded assignment operator for tuple types in
	BuildClassConstructorsEtc.
	
	Removed parsing of ForLoops without indices: "[D] ....;"
	
	Started work on getting arrays to initialize their values, post-analysis.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertVariableInitializations.cpp 
	                             resolveOverloadedOperators.cpp 

---------------------------------------------------------------------------

03/22/05 15:33:53 -- deitz

Log message:
	Added initial support for initializing arrays.
	
	Added three test cases.  The second test case fails because in
	something like
	  var a : [i, j in 1..n, 1..n] integer = (i - 1) * n + j;
	we have trouble resolving i and j to be part of the scope from the
	type.

Modified files:
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	                             insertVariableInitializations.cpp 
Added files:
	chapel/test/arrays/deitz/: test_array_init1.chpl 
	                           test_array_init1.good 
	                           test_array_init2.chpl 
	                           test_array_init2.future 
	                           test_array_init2.good 
	                           test_array_init3.chpl 
	                           test_array_init3.good 

---------------------------------------------------------------------------

03/22/05 16:28:34 -- deitz

Log message:
	Added two more variations of Jacobi.  One fails in analysis.

Added files:
	chapel/test/arrays/deitz/: jacobi2.chpl jacobi2.good 
	                           jacobi3.chpl jacobi3.future 
	                           jacobi3.good 

---------------------------------------------------------------------------

03/22/05 17:10:07 -- deitz

Log message:
	Fixed parsing of ForallExpr to create VarSymbol indexes (currently of
	type integer).
	
	Changed the traversal over VarSymbols if the type is an array so that
	we can traverse the domain (for the index symbols).
	
	This fixes arrays_deitz_init2 which now fails in analysis.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

03/22/05 17:10:49 -- deitz

Log message:
	Passed future to John.

Modified files:
	chapel/test/arrays/deitz/: test_array_init2.future 

---------------------------------------------------------------------------

03/22/05 17:15:12 -- jplevyak

Log message:
	Add future test, codegen fails so I sent it to Steve.

Added files:
	chapel/test/types/tuple/jplevyak/: destruct-2.future 

---------------------------------------------------------------------------

03/22/05 17:31:53 -- bradc

Log message:
	Modified Roxana's future test a bit -- moved test from
	.future file to .chpl file and added some output so we
	could be more confident it worked properly.  Wrote a
	.future file (Roxana, the .future file is a way of
	tagging a .chpl test to indicate that it isn't expected
	to work yet but that we hope it will someday.  Take a
	look at what I've done and let me know if it's unclear.
	I noticed this only because I was about to check in my
	copy of your test and noticed that you had already done
	so.

Modified files:
	chapel/test/trivial/roxana/: test_dead_var_decl.future 
Added files:
	chapel/test/trivial/roxana/: test_dead_var_decl.chpl 
	                             test_dead_var_decl.good 

---------------------------------------------------------------------------

03/22/05 17:42:14 -- bradc

Log message:
	Checking in some future tests that have been hanging
	around in my directory, and which represent work I
	want to do in the next week or so.

Added files:
	chapel/test/classes/bradc/: writeclass.chpl writeclass.future 
	                            writeclass.good writeclass2.chpl 
	                            writeclass2.future writeclass2.good 
	                            writeclass3.chpl writeclass3.future 
	                            writeclass3.good 

---------------------------------------------------------------------------

03/22/05 17:59:51 -- bradc

Log message:
	Added a bunch of entry point tests that I had
	laying around before we had the future mechanism.
	These are all in my name and low priority.

Added files:
	chapel/test/trivial/bradc/entrypoint/: main2.chpl main2.future 
	                                       main2.good twomains2.chpl 
	                                       twomains2.future 
	                                       twomains2.good 
	                                       twomains2a.chpl 
	                                       twomains2a.future 
	                                       twomains2a.good 
	                                       wrongmain.chpl 
	                                       wrongmain.future 
	                                       wrongmain.good 

---------------------------------------------------------------------------

03/22/05 18:13:21 -- bradc

Log message:
	Checking in some initial work on implementing the
	"nil" keyword, as well as some minor text cleanups
	and stuff like that.  For the most part this is a
	placeholder check-in.  Updated my test that I was
	working on, but it still isn't ready to be a non-
	future.
	
	The one substantive change is that I changed the
	interface to Symboltable::lookupInternal() to
	take one of SCOPE_INTRINSIC, SCOPE_INTERNAL_PRELUDE,
	or SCOPE_PRELUDE rather than the boolean (which
	selected between the latter two) as before.  The
	default is SCOPE_INTERNAL_PRELUDE (as before).

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: chapel.lex chapel.y prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/functions/bradc/: intents-classes4.chpl 
	                              intents-classes4.good 

---------------------------------------------------------------------------

03/23/05 10:22:57 -- bradc

Log message:
	Added a new Type class NilType and a single
	instance of it (stored in dtNil) to represent
	the type of the "nil" symbol.  Put some
	empty cases in analysis so that it wouldn't
	choke on existing code.  This new type largely
	serves as a sentinel type until we come up
	with something better to do (unless this is
	sufficient for all time, of course :)
	
	Currently, I'm following  this path in order
	to support default initializers of classes
	(which are nil and seem to be working), as
	well as the ability to compare against nil,
	as in functions/bradc/intents-classes4.chpl,
	a future that is almost working.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/trivial/bradc/entrypoint/: .cvsignore 
	chapel/test/trivial/roxana/: .cvsignore 

---------------------------------------------------------------------------

03/23/05 11:15:37 -- deitz

Log message:
	Fixed a bug in which VarSymbols were not copied with callbacks to
	analysis.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 

---------------------------------------------------------------------------

03/23/05 11:37:34 -- deitz

Log message:
	Added a couple of tuple tests that declare tuples without explicit
	types.  These fail in analysis.

Added files:
	chapel/test/types/tuple/deitz/: test_tuple_simple6.chpl 
	                                test_tuple_simple6.future 
	                                test_tuple_simple6.good 
	                                test_tuple_simple7.chpl 
	                                test_tuple_simple7.future 
	                                test_tuple_simple7.good 

---------------------------------------------------------------------------

03/23/05 11:37:55 -- bradc

Log message:
	Made some small changes to the renameOverloadedFunctions
	traversal -- changed it from a Traversal to a SymtabTraversal
	in order to make it more efficient  (SymtabTraversals didn't
	exist when it was first written).  Also made sure that it
	doesn't rename the entry point main().

Modified files:
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/symtab/: renameOverloadedFunctions.cpp 
	                         renameOverloadedFunctions.h 
Removed files:
	chapel/compiler/traversals/: renameOverloadedFunctions.cpp 
	                             renameOverloadedFunctions.h 

---------------------------------------------------------------------------

03/23/05 12:17:10 -- deitz

Log message:
	Added support for arrays of arrays.  Added one test case that fails in
	analysis.

Modified files:
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
Added files:
	chapel/test/arrays/deitz/: test_array_of_array1.chpl 
	                           test_array_of_array1.future 
	                           test_array_of_array1.good 

---------------------------------------------------------------------------

03/23/05 13:17:08 -- deitz

Log message:
	Added future tests for sequences and complex variables.  Following
	suit of Brad, these are my personal futures.

Modified files:
	chapel/test/types/complex/bradc/: .cvsignore 
Added files:
	chapel/test/types/complex/deitz/: .cvsignore test_complex1.chpl 
	                                  test_complex1.good 
	                                  test_complex2.chpl 
	                                  test_complex2.future 
	                                  test_complex2.good 
	chapel/test/types/seq/deitz/: .cvsignore test_seq1.chpl 
	                              test_seq1.future test_seq1.good 
	                              test_seq2.chpl test_seq2.future 
	                              test_seq2.good test_seq3.chpl 
	                              test_seq3.future test_seq3.good 
	                              test_seq4.chpl test_seq4.future 
	                              test_seq4.good test_seq5.chpl 
	                              test_seq5.future test_seq5.good 
	                              test_seq6.chpl test_seq6.future 
	                              test_seq6.good test_seq7.chpl 
	                              test_seq7.future test_seq7.good 
	chapel/test/types/tuple/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

03/23/05 13:24:17 -- deitz

Log message:
	Added another array of record test for John to look at:
	test_array_basic1.
	
	Added the last two of my local future tests.

Added files:
	chapel/test/arrays/deitz/: test_array_basic1.chpl 
	                           test_array_basic1.future 
	                           test_array_basic1.good 
	chapel/test/functions/deitz/: test_operator_overloading2.chpl 
	                              test_operator_overloading2.future 
	                              test_operator_overloading2.good 
	chapel/test/types/tuple/deitz/: test_tuple_of_tuples.chpl 
	                                test_tuple_of_tuples.future 
	                                test_tuple_of_tuples.good 

---------------------------------------------------------------------------

03/23/05 14:18:26 -- bradc

Log message:
	Updating a future that isn't working due
	to lack of support for array parameters
	that specify an anonymous domain.  This
	isn't at all a priority to fix, but I
	wanted to keep track of why its failing.
	
	Wrote a new version of the test that
	tests what this test was really meant
	to test -- which is: what happens when
	one main function is provided but it
	takes arguments (answer: it is not
	treated as the entry point).

Modified files:
	chapel/test/trivial/bradc/entrypoint/: wrongmain.chpl 
	                                       wrongmain.future 
Added files:
	chapel/test/trivial/bradc/entrypoint/: wrongmain2.chpl 
	                                       wrongmain2.good 

---------------------------------------------------------------------------

03/23/05 14:22:09 -- deitz

Log message:
	Added a test of a class with no fields.  Analysis seems to clone this
	class.  Left the future for John.

Added files:
	chapel/test/classes/deitz/: test_nomembers1.chpl 
	                            test_nomembers1.future 
	                            test_nomembers1.good 

---------------------------------------------------------------------------

03/23/05 14:40:46 -- jplevyak

Log message:
	There is now a new AST_is_used all which has the syntax of type_info but
	returns whether or not the Expr value or SymbolVar was actually used in
	the program.  A context sensitive interface allows queries of the form "is this
	symbol dead here?"

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

03/23/05 15:35:07 -- jplevyak

Log message:
	Fix test_nomembers1.  Preventing cloning in this case.
	Don't know why it should have caused a problem however.

Modified files:
	chapel/compiler/analysis/: clone.cpp 
Removed files:
	chapel/test/classes/deitz/: test_nomembers1.future 

---------------------------------------------------------------------------

03/23/05 15:36:34 -- jplevyak

Log message:
	Update future

Modified files:
	chapel/test/trivial/roxana/: test_dead_var_decl.future 

---------------------------------------------------------------------------

03/23/05 16:46:52 -- bradc

Log message:
	Added some initial support for I/O on classes (and
	types in general) via bound functions.  This isn't
	at all ready for prime-time yet, but I got enough
	done today (and it's stable enough) that I want
	to check in.  The changes were:
	
	1) Added a new SymtabTraversal insertWriteFns that
	traverses the Symboltable looking for classes that
	don't have write functions declared.  When it
	finds one, it creates a write function for it
	(albeit one that does nothing useful other than
	prove to me that it's been created -- since these
	are created after analysis, they are considered
	dead by default for now and don't get codegenerated).
	
	2) Refactored the I/O code so that it's more type-
	oriented -- rather than handling I/O for all types
	in IOExpr, pushed this code into the Type hierarchy
	for simplicity.  Eventually, it'll probably be
	removed from here as well, but for the time being,
	this made it easier to deal with.
	
	3) Added a boolean to the SymtabTraversal pass
	that allows you to skip over "internal" scopes,
	which include the intrinsic scope, the prelude
	scopes, and the common scope.  This is similar
	to the controls we already have in the normal
	Traversals to avoid certain parts of the program.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
Added files:
	chapel/compiler/symtab/: insertWriteFns.cpp insertWriteFns.h 

---------------------------------------------------------------------------

03/23/05 17:17:04 -- jplevyak

Log message:
	Updated .future file... I believe that the test is in error.

Modified files:
	chapel/test/arrays/deitz/: test_array_basic1.future 

---------------------------------------------------------------------------

03/23/05 17:50:30 -- bradc

Log message:
	Removing this future, which I believe is now resolved and
	for the right reasons.

Removed files:
	chapel/test/functions/jplevyak/scoping/: scoping-1.future 

---------------------------------------------------------------------------

03/23/05 17:59:31 -- bradc

Log message:
	Implemented a simple change that is intended to
	pass records and unions by value rather than
	parameter when they are passed with blank intent.
	It seems to work, though I haven't spent much
	time testing or looking at generated code (just
	the one future that is relying on it, so far).

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

03/24/05 09:05:04 -- bradc

Log message:
	Removing .future files for tests that are now working,
	and seemingly for the right reasons.

Removed files:
	chapel/test/classes/jplevyak/: union_type_hierarchy-1.future 
	chapel/test/trivial/bradc/entrypoint/: twomains2.future 
	                                       twomains2a.future 

---------------------------------------------------------------------------

03/24/05 14:04:48 -- deitz

Log message:
	Added test to build a linked list out of classes.  This fails because
	nil is not yet recognized by analysis.

Added files:
	chapel/test/classes/deitz/: test_class_list1.chpl 
	                            test_class_list1.future 
	                            test_class_list1.good 

---------------------------------------------------------------------------

03/24/05 14:12:20 -- deitz

Log message:
	Added initial support for sequences (literal sequence expressions and
	cruftily printing sequences).  Added new Expr subclass SeqExpr and new
	Type subclass SeqType which are sequence literals and sequence types
	respectively.
	
	SeqType is a subclass of ClassType.  This allows us to implement it as
	a class.  The strategy for sequences is to create it as a class and to
	create a node class.  This is implemented using linked lists at the
	AST level.  Note that once class cloning and class type variables are
	working we may be able to leverage that for our sequence
	implementation too.
	
	Added a new traversal expandSeqExprAssignments that expands
	assignments of literal sequences into multiple append lines.  Append
	is currently a runtime function but will eventually be a method in the
	AST of SeqType.
	
	Initialization of SeqTypes works the same as any ClassType by using
	the constructor.  The defaultVal for SeqTypes is a call to the
	constructor not nil.  However, the defaultVal for the node's class is
	still nil.
	
	Added new future to test parsing 'seq(integer)' in addition to 'seq of
	integer'.
	
	Added new sub-directory to my seq tests called noanalysis which uses
	the --noanalysis flag.  These tests now work without analysis so I'm
	putting this there so I can maintain them until they work with
	analysis.
	
	Plugged CommonModule with a stopgap measure to not print out static in
	front of its functions during codegen because these can be used in
	other modules.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h symscope.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	                         internal_prelude.chpl 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassConstructorsEtc.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertVariableInitializations.cpp 
	                             scopeResolveSymbols.cpp 
	                             verifyASTType.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/types/seq/deitz/: test_seq3.chpl test_seq4.chpl 
	                              test_seq5.chpl test_seq6.chpl 
	                              test_seq7.chpl 
Added files:
	chapel/compiler/traversals/: expandSeqExprAssignments.cpp 
	                             expandSeqExprAssignments.h 
	chapel/runtime/include/: seq.h 
	chapel/test/types/seq/deitz/: test_seq1a.chpl test_seq1a.future 
	                              test_seq1a.good 
	chapel/test/types/seq/deitz/noanalysis/: COMPOPTS test_seq1.chpl 
	                                         test_seq1.good 
	                                         test_seq1a.chpl 
	                                         test_seq1a.good 
	                                         test_seq2.chpl 
	                                         test_seq2.good 

---------------------------------------------------------------------------

03/24/05 15:14:02 -- roxana

Log message:
	Added/modified IndexType. This is the type of an index of a domain. It
	could be a k-tuple integer, or a user-defined class reference (and
	everything that the specification allows for indefinite and opaque
	domains). Modified the DomainType to contain its index type. Added one
	and a half pass to add implicit index types for domains and explicit
	index types. The first is done by insertIndexType pass. The second is
	crammed into insertAnonymousTypes pass.
	
	This is not complete (especially the code generation part), since type
	support is needed.
	
	Anonymous domains are not handled -- I need to talk to Steve about how
	to handle them.

Modified files:
	chapel/compiler/traversals/: insertAnonymousTypes.h 
	                             insertAnonymousDomains.cpp 
	                             Makefile.share 
	                             insertAnonymousTypes.cpp fixup.cpp 
	chapel/compiler/main/: passlist.h passlist.cpp 
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: type.h 
Added files:
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertIndexType.h 
	chapel/test/domains/roxana/: test_index_expr.good 
	                             test_index_expr.chpl 

---------------------------------------------------------------------------

03/24/05 16:26:03 -- jplevyak

Log message:
	Added new test cases for tuple indexing.
	Added new futures for those which do not work yet.
	Made findUnknownTypes not try to find types for functions or unresolved
	  things (like writeln)
	Made ANALYSIS_MATCH check for dtUnknown and issue a INT_FATAL for return types.
	Added operator= into Vec<> in vec.h.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: vec.h 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
Added files:
	chapel/test/types/tuple/jplevyak/: tuple_index-1.chpl 
	                                   tuple_index-1.future 
	                                   tuple_index-1.good 
	                                   tuple_index-2.chpl 
	                                   tuple_index-2.future 
	                                   tuple_index-2.good 

---------------------------------------------------------------------------

03/24/05 16:33:29 -- deitz

Log message:
	Should this result in an ambiguity?  One is a method and one is a
	function.  I believe they both should work at the same time, but we
	should make sure we all agree.
	
	class foo {
	  var x : integer;
	  function bar() {
	    writeln("method bar ", x);
	  }
	}
	
	function bar(f : foo) {
	  writeln("function bar ", f.x);
	}
	
	var f : foo = foo();
	
	f.bar();
	bar(f);

Added files:
	chapel/test/classes/deitz/: test_mf_class.chpl 
	                            test_mf_class.future 
	                            test_mf_class.good 
	                            test_mf_record.chpl 
	                            test_mf_record.future 
	                            test_mf_record.good 

---------------------------------------------------------------------------

03/24/05 17:11:09 -- deitz

Log message:
	Added the ability to resolve overloaded functions even when
	--noanalysis is used.  Note that resolution in all but the simplest
	cases may be wrong.  It is a stopgap measure, like the --noanalysis
	flag itself, to allow me to continue supporting sequences before
	analysis.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/types/seq/deitz/noanalysis/: 
	                                         test_overload_noanalysis1.chpl 
	                                         test_overload_noanalysis1.good 

---------------------------------------------------------------------------

03/24/05 17:54:50 -- deitz

Log message:
	Fixed a couple of valgrind bugs on sequences.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/runtime/include/: seq.h 

---------------------------------------------------------------------------

03/24/05 18:18:46 -- roxana

Log message:
	Cleaned up some of the things from the previous commit. Added a
	traverse method to the Index type. Added initialization to the test
	file (I assumed that was done by default).

Modified files:
	chapel/test/domains/roxana/: test_index_expr.chpl 
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertAnonymousTypes.h 
	                             insertAnonymousTypes.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

03/24/05 18:41:01 -- bradc

Log message:
	This is strange, I could've sworn I just committed this.
	
	Was debugging some memory allocation stuff in the generated
	code tonight and realized that we're not taking very good
	advantage of Shannon's capabilities to attach descriptions
	to things, so improved the descriptions.  Classes get
	descriptions like "instance of myclass", arrays are like
	"array A", etc.  It's very lovely (and will be moreso once
	we expose hooks into it... :) for now you have to know
	what routines to insert by hand...)
	
	Added a glomstrings() routine to the runtime, similar to
	the one at compiletime, except that it uses Shannon's
	memory allocation routines, and *is*not*garbage*collected*
	(so clean up after yourself).
	
	Added a space after each argument in our generated function
	calls to improve readability of the generated code.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/runtime/include/: array.h chpltypes.h 
	chapel/runtime/src/: chpltypes.c config.c 

---------------------------------------------------------------------------

03/25/05 09:30:46 -- roxana

Log message:
	More clean up on InsertIndexType pass. Removed currentScope and
	currentStmt -- they were not used.

Modified files:
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertIndexType.h 

---------------------------------------------------------------------------

03/25/05 09:45:14 -- deitz

Log message:
	Added support for type definitions inside class types as in
	
	class foo {
	  class bar {
	    var x : integer;
	    var y : integer;
	  }
	  var b : bar = bar();
	  var z : integer;
	}
	
	This just fell out with minimal changes.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 
Added files:
	chapel/test/classes/deitz/: test_type_in_class1.chpl 
	                            test_type_in_class1.good 
	chapel/test/types/seq/deitz/noanalysis/: .cvsignore 

---------------------------------------------------------------------------

03/25/05 10:29:28 -- jplevyak

Log message:
	Add test cases for separating member functions and regular functions.

Added files:
	chapel/test/functions/jplevyak/: member-1.chpl member-1.good 
	                                 member-2.chpl member-2.future 
	                                 member-2.good 

---------------------------------------------------------------------------

03/25/05 10:40:01 -- deitz

Log message:
	Added support for like keyword as in
	
	var foo : integer;
	var bar like foo;
	
	This creates a new Type LikeType.  It is removed after analysis when
	the type of the expression is known.  Passed the future to John as it
	works without analysis.

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/compiler/symtab/: removeLikeTypes.cpp removeLikeTypes.h 
	chapel/test/types/like/deitz/: .cvsignore test_like1.chpl 
	                               test_like1.future test_like1.good 

---------------------------------------------------------------------------

03/25/05 11:24:37 -- deitz

Log message:
	Implemented for over sequences as in 'for e in s do'.  Currently, as
	with other for loop statements and forall expressions, e is assumed to
	an index.  This is going to have to be set to dtUnknown and resolve
	after and in analysis eventually.  Probably shortly as this fits in
	well with Roxana's creation of IndexType.
	
	Fixed a bug in the parser in which forall and for were basically
	parsed as forall.  Updated mg protoast tests accordingly.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/runtime/include/: seq.h 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
Added files:
	chapel/test/types/seq/deitz/: test_seq8.chpl test_seq8.future 
	                              test_seq8.good test_seq8b.chpl 
	                              test_seq8b.future test_seq8b.good 
	chapel/test/types/seq/deitz/noanalysis/: test_seq8.chpl 
	                                         test_seq8.good 

---------------------------------------------------------------------------

03/25/05 14:11:36 -- jplevyak

Log message:
	Implement separation between methods and non-methods.
	Fix future test for separation.
	
	Added
	
	  FORCE_RECORD_METHODS_GLOBAL
	
	to analysis.cpp.  When record methods are scoped this can be unset.
	Steve, if you want to test your change for record methods, try
	unsetting this in analysis.cpp.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: fa.h 
	chapel/test/functions/jplevyak/: member-2.chpl 
Removed files:
	chapel/test/functions/jplevyak/: member-2.future 

---------------------------------------------------------------------------

03/25/05 14:33:00 -- jplevyak

Log message:
	Fixed bug from last checking, forgot to clear method_token between
	analysis passes.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 

---------------------------------------------------------------------------

03/25/05 14:34:49 -- jplevyak

Log message:
	More tests for method/function separation

Removed files:
	chapel/test/classes/deitz/: test_mf_class.future 
	                            test_mf_record.future 

---------------------------------------------------------------------------

03/25/05 14:59:30 -- deitz

Log message:
	Fixed a #ifdef in buildClassConstructorsEtc.  By uncommenting the
	#define in buildClassConstructorsEtc.cpp and specializeParenOps.cpp,
	the constructors should be scoped outside of the class and have named
	parameters with default values.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/25/05 15:03:04 -- deitz

Log message:
	Oops. I had it right.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/25/05 15:29:45 -- jplevyak

Log message:
	Implement "nil" (the global constant) and "null" the corresponding class.
	remove the .future for the test case testing nil.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	chapel/compiler/include/: builtin_symbols.h 
	chapel/compiler/vparser/: prelude.v 
Removed files:
	chapel/test/classes/deitz/: test_class_list1.future 

---------------------------------------------------------------------------

03/25/05 17:48:02 -- bradc

Log message:
	In the spirit of "capture information gleaned by analysis
	in the AST" right after RunAnalysis is complete, I put an
	"isDead" bit in the Symbol AST hierarchy and used this to
	capture the result of the *_is_used() calls in the
	removeDeadSymbols pass, rather than calling these calls
	again at codegen.  (Doing the latter causes problems for
	new functions that have been inserted because analysis
	doesn't know about them and therefore calls them dead).
	Every Symbols isDead bit is set to false by default
	until explicitly set otherwise.
	
	In making this change, switched from a Stmt-based
	traversal to an Expr-based traversal.  The Stmt-based
	traversal revealed some problems in that the traversal
	did not reach all DefExprs, and therefore did not mark
	all dead things as dead.  It also had the problem of
	removing a DefExpr's entire Stmt, which would cause
	problem if the DefStmt included other DefExprs or
	the DefExpr included other symbols.
	
	The Expr-based traversal fixes the first problem, but
	not the second -- entire statements are still ripped
	out.
	
	An alternate and simpler version is checked in with
	this that uses the new AST_is_used() call.  However,
	this over-aggressively prunes out things in the
	common module, and we don't seem to have an easy way
	to tell a traversal to skip over the common module,
	so it doesn't work yet and is #ifdefed out.
	
	In doing all this, realized that what we really want
	this to be is a Symtab traversal, so I wrote this
	version, which also uses the AST_is_used call.  Here,
	the common module is skipped over as appropriate.
	However, the call says that several live variables
	are dead, so this version doesn't work either.
	Ultimately, this is the version that probably ought
	to live on.  For that reason, I called the file
	removeDeadSymbols (since CVS is bad at file renaming),
	but the traversal itself is called removeDeadSymbols2
	to avoid conflicts for now.
	
	As a minor change, I also hoisted the exportMe bit
	out of the FnSymbol and into the Symbol hierarchy,
	though I didn't change its use at all.  This is
	something we've talked about doing for awhile.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: removeDeadSymbols.cpp 
	                             removeDeadSymbols.h 
	chapel/test/Bin/: nightly 
Added files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	                         removeDeadSymbols.h 

---------------------------------------------------------------------------

03/25/05 18:54:38 -- roxana

Log message:
	Added a test for index assignment. Modified the traversals so
	that it passes.

Modified files:
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertAnonymousTypes.cpp 
Added files:
	chapel/test/domains/roxana/: test_index_assign.good 
	                             test_index_assign.chpl 

---------------------------------------------------------------------------

03/28/05 10:32:43 -- deitz

Log message:
	Added a new pass ComputeVisibleFunctions that stores in every SymScope
	a set called visibleFunctions that stores the functions that are
	visible in that scope.  This includes every function defined in that
	scope, every method defined in a record and union that is defined in
	that scope, every visible function in a parent scope, and all class
	methods.
	
	John, let me know if you can use this.  To get all visible functions
	where a symbol is defined, use symbol->parentScope->visibleFunctions.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share symscope.cpp 
Added files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         computeVisibleFunctions.h 

---------------------------------------------------------------------------

03/28/05 11:24:52 -- jplevyak

Log message:
	Interm checkin for computeVisibleFunctions.... changes Vec to Map.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: symscope.cpp 
Added files:
	chapel/test/functions/jplevyak/scoping/: visibility-1.chpl 
	                                         visibility-1.future 
	                                         visibility-1.good 

---------------------------------------------------------------------------

03/28/05 12:00:53 -- deitz

Log message:
	Added support for finding visible functions in the internal prelude.

Modified files:
	chapel/compiler/symtab/: symscope.cpp 

---------------------------------------------------------------------------

03/28/05 12:21:22 -- deitz

Log message:
	Added a working test case that declares a type alias inside a class.

Added files:
	chapel/test/classes/deitz/: test_type_in_class2.chpl 
	                            test_type_in_class2.good 

---------------------------------------------------------------------------

03/28/05 12:26:03 -- deitz

Log message:
	Added a class called _seq to the internal prelude.  I copy this to
	implement sequences now rather than build my own.  I also added a
	bunch of commented out functions which I'll eventually copy but don't
	yet.
	
	Simplified the code to finish creating sequence types.  It now copies
	_seq from the internal prelude.
	
	Removed some old code and cleaned up class codegen.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

03/28/05 14:21:29 -- jplevyak

Log message:
	Turn on interprocedural constant propagation.  Removed constants from
	the "types" before cloning and from the results reported in type_info().
	The constant information is now available from constant_info() and symbol_info().
	Currently, analysis only records when something has exactly 1 possible constant
	value.  This can be changed on the command line.  However, this makes it possible
	to clone for constants on a formal parameter by formal parameter basis, and this
	capability is used to permit tuple indexing to work with manifest constants
	since tuple indexing is implemented as a member function of tuples.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: fa.h 
	chapel/test/flowanalysis/jplevyak/constants/: 
	                                              constant_folding.good 
	chapel/test/types/tuple/jplevyak/: tuple_index-2.future 

---------------------------------------------------------------------------

03/28/05 15:04:29 -- bradc

Log message:
	Implemented default I/O for classes, records, and unions.
	These currently print out as follows:
	
	record myrecord {
	  var c: integer;     =>     (c=1, d=1.2)
	  var d: float;
	}
	
	union myunion {
	  var e: integer;     =>     (uninitialized)
	  var f: float;       OR:    (e=1)
	}                     OR:    (f=1.2)
	
	class myclass {
	  var a: integer;     =>     nil
	  var b: float;       OR:    {a=1, b=1.2}
	}
	
	Feedback on these print formats would be appreciated; they
	can easily be changed.  The record format was chosen because
	it seemed it was so close to the record literal format; since
	unions are also value types but can only have one active field
	at a time, a similar format was used there, with the somewhat
	ugly "(uninitialized)" standing in for a union that has never
	been assigned.  The class format was meant to be distinguishable
	from the record format but similar.  Another approach would be
	to generate them as myclass(a=1, b=1.2) so it looked more like
	a constructor...
	
	The intention is to support the user's ability to over-ride
	these defaults by defining their own bound write() function,
	but this doesn't work yet.  Once it does, the default format
	matters somewhat less as long as its clear and succinct enough
	that people might use it when they're being lazy.
	
	These functions are currently added after analysis has run
	so that we can be sure about the types of everything.  Eventually,
	we will probably want to move this before analysis and convert
	IOCalls into dispatches to write() methods in order to have
	analysis include the write() methods as part of its dead
	code analysis.
	
	Added a bunch of tests, many of which are futures, but I'll
	mail people about those separately.
	
	This check-in includes a few incidental changes:
	
	- added a new runtime union macro -- _UNION_CHECK_QUIET()
	  that performs the union safe read check without generating
	  an error if it's mismatched.  This can be used to create
	  if-then-else's that check for all the union's cases
	  without generating errors.  Also rewrote _UNION_CHECK()
	  to use _UNION_CHECK_QUIET() in its definition and to
	  write its error to stderr rather than stdout.
	
	- added a new state to unions which indicates that they
	  are uninitialized so that we can distinguish this case
	  from a union whose memory just happens to be initialized
	  to zero.  Interestingly, I was guessing that this would
	  result in a valgrind error, as I don't think we currently
	  set a union's enum to 0, yet it didn't...  ?
	
	- refactored Steve's codegenIOCall() for sequences to be a
	  method of sequence rather than a dynamic cast within
	  ClassType
	
	- added a method that supports the ability to tack on an
	  "else" clause to a CondStmt after it has been constructed
	  in order to build cascading if-then-else's easily.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: stmt.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: insertWriteFns.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/runtime/include/: union.h 
	chapel/test/classes/bradc/: writeclass.chpl writeclass.good 
	                            writeclass2.future writeclass3.chpl 
	                            writeclass3.good 
Added files:
	chapel/test/classes/bradc/: myrecord1a.good myrecord1b.good 
	                            writeclass1a.chpl 
	                            writeclass1a.future 
	                            writeclass1a.good writeclass1b.chpl 
	                            writeclass1b.future 
	                            writeclass1b.good writeclass2a.chpl 
	                            writeclass2a.future 
	                            writeclass2a.good writerecord.chpl 
	                            writerecord.good writerecord1a.chpl 
	                            writerecord1a.future 
	                            writerecord1a.good 
	                            writerecord1b.chpl 
	                            writerecord1b.future 
	                            writerecord1b.good writerecord2.chpl 
	                            writerecord2.future 
	                            writerecord2.good 
	                            writeunion-workaround.chpl 
	                            writeunion-workaround.good 
	                            writeunion.chpl writeunion.future 
	                            writeunion.good 

---------------------------------------------------------------------------

03/28/05 15:37:11 -- jplevyak

Log message:
	Use new visibility calculations.... however the new
	calculation doesn't take into account shadowing of functions with
	identical signatures.   Currently I have this assigned to Steve, but
	if he wants to punt it to me we are going to have to give all functions
	in the program a "priority" which indicates how close they are.  That
	is assuming that functions with identical signatures in the same scope
	is not an error.  In that case perhaps it would be best done during
	visibileFunctions() calculation since that has access to the actual
	scoping.   Alternatively we could tag functions with their scoping
	depth as well as their priority and I could issue an error when
	I do the visibility lookup, however this would only occur if the function
	was used, so it would permit erroneous programs where bogus functions
	defintions could persist assuming that they were never called.
	This is the case with other sorts of ambiguous calls though so it
	might now be so bad.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/28/05 15:37:43 -- jplevyak

Log message:
	Shadowing not taken into account.

Modified files:
	chapel/test/functions/jplevyak/scoping/: visibility-1.future 

---------------------------------------------------------------------------

03/28/05 16:41:39 -- jplevyak

Log message:
	Fix .future for foralls in initialization

Modified files:
	chapel/test/arrays/deitz/: test_array_init2.future 

---------------------------------------------------------------------------

03/28/05 16:50:17 -- deitz

Log message:
	This checkin changes the indices in ForallExprs, the indices in
	ForallLoops, and the variables in LetExprs to be defined within
	DefExprs rather than to have symbols right there.  It paves the way
	for defPoint to be a DefExpr* rather than a BaseAST*.
	
	Fixed a bug in the traversal of sequences.
	
	Added ability to print out integer literal in print_view function.
	
	Updated mg-seq etc protoast tests because the indices in a for loop
	are now printed out as variable definitions.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertElidedLoops.cpp 
	                             insertVariableInitializations.cpp 
	                             transformLetExprs.cpp view.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good test.good 

---------------------------------------------------------------------------

03/28/05 17:20:19 -- deitz

Log message:
	Made Symbol::defPoint DefExpr* rather than BaseAST* and removed
	numerous unnecessary dynamic casts.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertThisParameters.cpp 
	                             resolveOverloadedOperators.cpp 

---------------------------------------------------------------------------

03/28/05 17:45:59 -- bradc

Log message:
	Fixed up the processParameters pass so that we
	would be a bit more conservative about where
	parameter temps are inserted.  In particular,
	we previously weren't taking advantage of the
	fact that C's pass-by-value semantics would
	create a copy for us for scalar values passed
	by in and const, so were creating additional
	unnecessary copies.  This tries to cut down
	on such copies.
	
	There is still some low-hanging fruit that
	could be caught here.  In particular, when
	passing strings around, we have to
	conservatively create copies of them in
	case there are aliases to them in other
	parameters or via globals.  In many cases
	(such as the description strings to our
	memory allocation functions), we know that
	this won't be the case, and could avoid
	the temps, but currently don't.  Maybe this
	will be the point where I resort to using
	a pragma?  Shudder...

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: processParameters.cpp 

---------------------------------------------------------------------------

03/28/05 18:00:21 -- bradc

Log message:
	Continuing to improve parameter passing, marked parameters
	that we implement using pointers (inout for scalars, e.g.)
	as being const in hopes of providing more information to
	the back-end C compiler.  Being able to mark them restrict
	would be even better, but would of course require more
	aliasing analysis than we currently have (or at least,
	than I currently know about).

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

03/28/05 18:35:38 -- jplevyak

Log message:
	new test case

Added files:
	chapel/test/arrays/jplevyak/: ranks-1.chpl ranks-1.future 
	                              ranks-1.good 

---------------------------------------------------------------------------

03/29/05 09:49:21 -- jplevyak

Log message:
	Fix writeclass2
	Redo the .futures of writeclass2 and writeclass2a with extended notes.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/test/classes/bradc/: writeclass2.future 
	                            writeclass2a.future 

---------------------------------------------------------------------------

03/29/05 09:54:14 -- bradc

Log message:
	Removing futures for some tests that are now working.

Removed files:
	chapel/test/classes/bradc/: writeclass.future writeclass3.future 

---------------------------------------------------------------------------

03/29/05 11:47:11 -- roxana

Log message:
	Resolved types for IndexType->idxType. Improved code
	generation for index types accordingly. However, assignments
	between index types and tuple types do not work -- because
	they are different types. Should they work? I inserted a future
	test that expresses the question. For now, the test correctly
	fails -- cannot assign tuple type to index type.

Modified files:
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertAnonymousTypes.cpp 
	chapel/test/domains/roxana/: test_index_assign.good 
	                             test_index_expr.good 
	chapel/compiler/AST/: type.cpp 
Added files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
	                             test_index_expr1.good 
	                             test_intex_expr1.future 

---------------------------------------------------------------------------

03/29/05 11:49:34 -- jplevyak

Log message:
	Move more information into the IF1 representation regarding instance
	variables and primitive types.
	Add a cloning option MERGE_UNIONS (current ON) which merges unions
	  which use different subsets of the union.
	Update .future for writeunion... now the executed code is wrong.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: sym.h 
	chapel/test/classes/bradc/: writeunion.future 

---------------------------------------------------------------------------

03/29/05 12:02:10 -- bradc

Log message:
	I made this .good file by hand and accidentally put a typo
	into it.  This test works now, thanks to John.

Modified files:
	chapel/test/classes/bradc/: writeunion.good 
Removed files:
	chapel/test/classes/bradc/: writeunion.future 

---------------------------------------------------------------------------

03/29/05 12:13:06 -- jplevyak

Log message:
	Reassigned and annotated .future files:
	
	OK, I took a look at the results with ANALYSIS_MATCH turned on, and
	they look correct to me.  We get one "warning" at line 78, but that
	is for "f" being set to a cloned type (which it should be), and
	we get one warning at line 112 which is the return type of the cloned
	construct_foo function which is now returning the new cloned type
	(which it should be).
	
	*** note: the problem is that the AST's types are not specific, sure
	    the variable is a "foo", but it is really a clone of "foo".
	    Perhaps ANALYSIS_MATCH needs to be enhanced.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class2.future 
	                                         test_clone_class2a.future 

---------------------------------------------------------------------------

03/29/05 12:53:47 -- bradc

Log message:
	Continuing to try and whip nightly regression script into
	better shape.  These changes attempt to make it not so
	hard-coded to my username:
	
	- cleaned up existing options a bit as well as help message
	  that describes them
	
	- set the CHPLHOME variable (if you don't already) to indicate where
	  your Chapel installation is
	
	- set CHPL_UW_CVS_USERNAME to indicate your pseudo-username on
	  gemelli (if you don't already)

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

03/29/05 13:29:23 -- roxana

Log message:
	Wrong name for the future test -- corrected that. Thanks to
	Steve for pointing that out.

Added files:
	chapel/test/domains/roxana/: test_index_expr1.future 
Removed files:
	chapel/test/domains/roxana/: test_intex_expr1.future 

---------------------------------------------------------------------------

03/29/05 13:51:47 -- jplevyak

Log message:
	Fix the simple case of "like" where the expression is a variable of declared type.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/types/like/deitz/: test_like1.future 

---------------------------------------------------------------------------

03/29/05 14:15:37 -- jplevyak

Log message:
	Fix initialization of arrays with scalars.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/arrays/deitz/: jacobi3.future 

---------------------------------------------------------------------------

03/29/05 14:29:41 -- deitz

Log message:
	Fixed a bug in Expr's call_fixup used when expressions are replaced.
	
	The defaultVal of record types and union types is now a call to the
	default constructor.  This causes the constructor to be called on all
	records as they are created.  However, analysis doesn't see this and
	marks the constructor as dead.  This has resulted in a few tests that
	were seemingly working now not working.  Since they were never
	working, I refuturized them.  John, let me know if you have any
	questions.  Basically, the constructor call is in the defaultVal
	expression of a type which is used by default to initialize variables.
	It is therefore not dead.
	
	Arrays now insert default and user initializations when they are
	created.  So arrays no longer have to be initialized if the default
	initialization will do.
	
	I special-cased a test for inserting the default initialization
	statement for classes within their constructor.  Since we declare a
	"this" that will be return in the constructor, it is important not to
	initialize it.  Surprisingly, doing so crashed my system multiple
	times.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertVariableInitializations.cpp 
	chapel/test/arrays/deitz/: test_array_basic1.future 
	chapel/test/classes/deitz/: test_record_equal1.chpl 
	                            test_record_equal2.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_of_record1.future 
	chapel/test/classes/bradc/: writerecord.future 
	                            writeunion-workaround.future 
	                            writeunion.future 
	chapel/test/classes/deitz/: test_record6.chpl 
	                            test_record6.future 
	                            test_record6.good 

---------------------------------------------------------------------------

03/29/05 14:39:50 -- jplevyak

Log message:
	Fixed up analysis of arrays of arrays and the .future which now crashes elsewhere.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/arrays/deitz/: test_array_of_array1.future 

---------------------------------------------------------------------------

03/29/05 14:50:01 -- bradc

Log message:
	Added a handful of .cvsignore files to the testing system
	so that *.tmp files that are left by failing tests don't
	show up in cvs -nq update listings.

Added files:
	chapel/test/arrays/jplevyak/: .cvsignore 
	chapel/test/domains/roxana/: .cvsignore 
	chapel/test/modules/bradc/manymodules/: .cvsignore 

---------------------------------------------------------------------------

03/29/05 14:56:02 -- bradc

Log message:
	Changed RemoveDeadSymbols from a Traversal
	to a SymtabTraversal in anticipation of some
	upcoming changes.  This was pretty simple
	with Steve's defpoint change from the other
	day, and the main problem was that my previous
	fix to allow SymtabTraversals to only iterate
	over user symbols was only iterating over the
	first user module (and it didn't show up until
	now since so few tests use more than one module).
	
	Some changes vaguely related to this:
	
	- made Symboltable::getModuleList() take a boolean
	  to indicate whether the person wants the user
	  module list or the complete module list.
	
	- fixed a bug with print()-ing empty BlockStmts.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/main/: passlist.cpp runpasses.cpp 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	                         removeDeadSymbols.h symtab.cpp 
	                         symtabTraversal.cpp 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: removeDeadSymbols.cpp 
	                             removeDeadSymbols.h 

---------------------------------------------------------------------------

03/29/05 15:03:07 -- jplevyak

Log message:
	Add "defaultConstructor" field to ClassType.
	Use defaultConstructor field to call constructor for record
	  types during array initialization.
	Removed .futures for two effected tests.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Removed files:
	chapel/test/arrays/deitz/: test_array_basic1.future 
	                           test_array_of_record1.future 

---------------------------------------------------------------------------

03/29/05 15:26:02 -- jplevyak

Log message:
	Fix initialization of records using the default constructor.
	Put in a nasty kludge to prevent recursive constructor calls... need to fix
	at some point.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/classes/bradc/: writerecord.future 
	chapel/test/classes/deitz/: test_record6.future 

---------------------------------------------------------------------------

03/29/05 15:36:32 -- deitz

Log message:
	Added the constructor to the list of visible functions.  Modified
	slightly what happens with building a constructor with arguments.

Modified files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

03/29/05 15:41:30 -- jplevyak

Log message:
	update some .future files
	clean up syntax in test_index_expr1.future (name only on first line)

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.future 
	chapel/test/types/seq/deitz/: test_seq8.future test_seq8b.future 

---------------------------------------------------------------------------

03/29/05 15:51:12 -- deitz

Log message:
	Uncommented and removed ANALYSIS_MATCH from resolveSymbols.  We now
	check to make sure that analysis and the AST agree on the function
	call even if it is already resolved.
	
	There is still an ANALYSIS_MATCH in findUnknownTypes which I will look
	at.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

03/29/05 16:39:12 -- deitz

Log message:
	Added constructors for records to list of visible functions.  Added
	overloaded constructors for classes to list of visible functions.

Modified files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         symscope.cpp 

---------------------------------------------------------------------------

03/29/05 16:42:48 -- jplevyak

Log message:
	Integrated Steve's code to set the _this field in FnSymbol of constructors.
	Use the _this field to not call the constructor recursively.
	We should probably use something other than DevVar for "this", but
	  the hack presented here should suffice for now.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

03/29/05 17:50:22 -- deitz

Log message:
	Made a few changes to the code that builds the visible function list.
	This isn't working because the constructor is being called in the
	wrong place.

Modified files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         symscope.cpp 

---------------------------------------------------------------------------

03/30/05 10:29:49 -- deitz

Log message:
	Moved the initialization of ComputeVisibleFunctions out of its
	constructor and into a run procedure.  This is because the constructor
	is called at the beginning of compilation if the --passlist compiler
	option is not used.  Brad may change this soon and then I'll move it
	back into its constructor.  Another reason I think it is better to do
	the initialization in the constructor rather than the run is that if
	you want to use the traversal just on some section of the AST, the run
	function won't be called but the constructor will be.  In addition,
	for Symtab traversals, there are a few run functions and we don't want
	to need to replicate the initialization.  An alternative is to have an
	initialize function.
	
	Cleaned up the SymScope::setVisibleFunctions code so that the visible
	functions aren't replicated in the prelude, being copied in from both
	the intrinsic and the intrinsic via the internal prelude.
	
	Fixed a minor bug in specializeParenOpExprs in which the commented out
	constructor was created in a FnCall (and then not resolved) rather
	than in a ParenOp (and then resolved).
	
	Improved FnCall::findFnSymbol to print out error messages if it cannot
	find them all the time.
	
	Though the #defines in specializeParenOpExprs and
	buildClassConstructorsEtc remain commented out, this checkin goes a
	long way in getting named parameters to work with class constructors.
	We were really close.  There are other tests that fail, but both
	test_class1 and test_class3 in classes/deitz now work if these lines
	are uncommented.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         computeVisibleFunctions.h symscope.cpp 
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

03/30/05 11:24:22 -- jplevyak

Log message:
	Switch over to using collect_asts() instead of my hack.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

03/30/05 11:35:37 -- bradc

Log message:
	Tidied up my last change a bit by hoisting the flag
	about whether or not a Traversal/SymtabTraversal
	should process the internal modules/scopes into
	the Pass class to unify this behavior across the
	two class types.  This variable is now called:
	
	    whichModules
	
	and can be set to one of the values:
	                           Traversal         SymtabTraversal
	                           ----------------  ---------------
	  MODULES_USER             do user modules   do user scopes
	  MODULES_COMMON_AND_USER  do common also    do common also
	  MODULES_ALL              do internal also  do all scopes
	
	This also helped unify the way that traversals are
	invoked from the runpasses.cpp file.  One result of
	this is that the Traversal::run() routine no longer
	filters modules as it used to, because only the
	correct ones will be passed in.
	
	In doing this, I introduced a new header file chplenum.h.
	This is meant to store enumerations that straddle the
	uses of multiple header files.  Otherwise, I typically
	find myself #including code that doesn't really pertain
	(like #include-ing type.h in order to get the parameter
	intent choices).  Not all enums are intended to go here,
	just those that are used in enough contexts that they
	don't fit neatly into an existing header file.
	
	Some smaller changes:
	
	- changed a Traversal's overloaded run call to call
	  Traversal::run() rather than copying the code into
	  its body to make it more resilient down the road.
	
	- Fixed a bug in which we were keeping a pointer to
	  the wrong module as being the first user module if
	  an actual module was declared in the code rather
	  than using the file-oriented modules.
	
	- fixed some of the lingering over-tabbed code

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/passes/: pass.cpp pass.h 
	chapel/compiler/symtab/: insertWriteFns.cpp 
	                         removeDeadSymbols.cpp symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             transformLetExprs.cpp traversal.cpp 
	                             traversal.h 
Added files:
	chapel/compiler/include/: chplenum.h 

---------------------------------------------------------------------------

03/30/05 11:54:46 -- bradc

Log message:
	Improved the passlist concept so that passes are
	created (i.e., their constructors are called)
	right when they are about to be executed rather
	than at program startup time, as they had been
	previously.  There wasn't any particularly good
	reason to do it the old way except that it was
	simpler to implement at the time.  Since then,
	things have evolved such that the new way is
	just as easy, not to mention far more natural
	and logical.

Modified files:
	chapel/compiler/main/: runpasses.cpp 

---------------------------------------------------------------------------

03/30/05 11:56:56 -- jplevyak

Log message:
	"fix" writeunion/writeunion-workaround.
	I think the remaining problem is in codegen or the test itself... assigned
	  to Brad for further processing.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/classes/bradc/: writeunion-workaround.future 
	                            writeunion.future 

---------------------------------------------------------------------------

03/30/05 13:40:13 -- bradc

Log message:
	Another simple future nil test that came out
	of a discussion with John yesterday.  This
	is nothing new, just another instance of an
	existing problem and a test that seems worth
	having in the long-run.

Added files:
	chapel/test/classes/bradc/: noinit2.chpl noinit2.future 
	                            noinit2.good 

---------------------------------------------------------------------------

03/30/05 14:40:58 -- bradc

Log message:
	Fixed a simple codegen naming conflict that occurred when
	one program contained two union types, and checked in a
	test to lock in this behavior.

Modified files:
	chapel/compiler/AST/: type.cpp 
Added files:
	chapel/test/classes/bradc/unions/: twounions.chpl twounions.good 

---------------------------------------------------------------------------

03/30/05 14:42:34 -- deitz

Log message:
	Added a new runtime function _init_string that sets a string to NULL
	and then calls _copy_string.  This is used when initializing a string
	to the default value.  This will eventually fix a bug that was showing
	up with strings being initialized within classes.  (The current
	valgrind regression).  At this time, however, this initialization
	function is not being called in the constructor.
	
	I'm going to unify the building of the constructor and the
	insertVariableInitializations pass to use the same code so that the
	constructor calls the same initialization code.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

03/30/05 15:00:33 -- deitz

Log message:
	Fixed the same bug Brad just fixed except instead of adding more gunk
	to the name that caused the naming conflict, I got rid of the name
	altogether.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

03/30/05 17:47:00 -- bradc

Log message:
	This is a slightly revised implementation of
	removeDeadSymbols that "resurrects" type
	symbols that are considered dead by analysis,
	but which are necessary to code generation.
	A simple example of this would be:
	
		class myclass { ... }
	
		var c: myclass;
	
		if (c == nil) {
		  writeln("c is nil!");
		}
	
	Here, analysis considers myclass dead because
	no instantiations of it are ever made.  However,
	c is not dead, so it will be codegened to be
	a C variable of type myclass.  Yet myclass would
	not have been code generated.  So in this case,
	c's liveness causes myclass to be resurrected.
	
	Unfortunately, having written this, I think
	that my approach was too simple, as in general
	we may need to iterate until we reach a fixed
	point.  So this is a bit of a stopgap.

Modified files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	                         removeDeadSymbols.h 

---------------------------------------------------------------------------

03/30/05 18:12:52 -- bradc

Log message:
	This essentially backs out my last change and uses
	a technique that Steve suggested in which we assume
	that variables that are not dead of class types that
	are dead can only take on the value "nil" and
	therefore generate them to be void* types instead.
	I also had to squelch the generation of their I/O
	routines a bit, but overall this seems more
	satisfactory than the previous approach.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	                         removeDeadSymbols.h 

---------------------------------------------------------------------------

03/30/05 18:13:25 -- bradc

Log message:
	Changed some C++ comments in the runtime to C-style,
	to keep us strict for non-gcc backend compilers.

Modified files:
	chapel/runtime/include/: array.h chplio.h 

---------------------------------------------------------------------------

03/30/05 19:14:13 -- bradc

Log message:
	This change removes all tabs from code, replacing them
	with 8 spaces (the same as emacs windows will tend to
	show by default).
	
	We've decided to disallow the use of tabs in code for
	all Chapel source in order to make the code appear
	identical in all editors.  New code should not introduce
	new tabs.  Code should be indented using spaces, and the
	default indentation amount is two spaces per line.
	
	By default, emacs compresses groups of 8 spaces into a
	tab when you hit tab in certain editing modes, so most
	of us have been inserting tabs all along without knowing
	it.
	
	If you are an emacs user, drop the following line into
	your .emacs file *now*:
	
	     (setq-default indent-tabs-mode nil)
	
	(John, note that this is slightly different than what
	I think we mailed the other day, which only sets it
	for the current buffer).
	
	If you have modifications in progress currently, you
	will want to remove the tabs from it.  In order to
	see whether the code has tabs, do:
	
	    grep -P '\t' <filename>
	
	In order to remove the tabs from the code, you can either:
	
	   load into emacs, select the whole file (Ctrl-space then
	   Ctrl->), then do M-x untabify
	
	Or:
	
	   run expand from the unix command line on the file, piping
	   the result to a temporary file, then copying the temporary
	   file back into place (the following script does this:
	-----------------------------------------------
	#!/bin/csh
	
	if ($# == 0) then
	  echo "Usage: $0 <filename>"
	  exit 0
	endif
	
	expand $1 > /tmp/tmp.tmp && cp /tmp/tmp.tmp $1
	-----------------------------------------------
	
	If you need to do a bunch of files, put the script above
	into an exeutable location, name it tabs2spaces, and run
	a command like the following from your root chapel directory:
	
	          find compiler -name "*.cpp" -exec tabs2spaces {} \;
	
	Repeat this, replacing "*.cpp" with "*.h" and "*.c", and
	"compiler" with "runtime"
	
	I haven't yet set up a cron job to make sure new tabs aren't
	introduced into the code, but will hope to do so tomorrow.
	
	The command:
	
	    cvs diff -t <filename>
	
	may also be of use as it tends to show the diffing lines
	in a clearer manner (but does not remove the fact that
	there's a difference).

Modified files:
	chapel/compiler/AST/: expr.cpp link.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/adt/: vec.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp cdb.h cfg.cpp 
	                           cg.cpp clone.cpp dead.cpp dom.cpp 
	                           fa.cpp fun.cpp if1.cpp inline.cpp 
	                           loop.cpp pattern.cpp prim.cpp ssu.cpp 
	                           sym.cpp 
	chapel/compiler/analysis/make_prims/: make_prims.cpp 
	chapel/compiler/backend/: beautify.cpp dump.cpp graph.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/include/: analysis.h code.h driver.h expr.h fa.h 
	                          files.h fun.h grammar.h if1.h inline.h 
	                          list.h log.h loop.h map.h pattern.h 
	                          pnode.h prim.h stmt.h sym.h symbol.h 
	                          symscope.h symtab.h type.h var.h vec.h 
	chapel/compiler/main/: arg.cpp driver.cpp runpasses.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp filesToAST.cpp 
	                         runAnalysis.cpp 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         insertWriteFns.cpp legalizeCNames.cpp 
	                         renameOverloadedFunctions.cpp 
	                         symscope.cpp symtab.cpp 
	chapel/compiler/test/: beautify.cpp files.cpp map.cpp misc.cpp 
	                       vec.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             checkSemantics.cpp 
	                             expandClassWiths.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertElidedLoops.cpp 
	                             insertFunctionTemps.cpp 
	                             insertIndexType.cpp 
	                             insertThisParameters.cpp 
	                             insertUnionChecks.cpp 
	                             insertVariableInitializations.cpp 
	                             methodsToFunctions.cpp 
	                             processParameters.cpp 
	                             resolveOverloadedOperators.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             transformLetExprs.cpp 
	                             updateSymbols.cpp 
	chapel/compiler/util/: files.cpp misc.cpp 
	chapel/compiler/vparser/: ast_cf.cpp grammar.cpp parse.cpp 
	                          parse_ast.cpp parse_ast.h scope.cpp 
	                          scope.h 
	chapel/compiler/vparser/cast/: cast.cpp 
	chapel/runtime/include/: array.h chplmem.h config.h 
	chapel/runtime/src/: arg.c chplio.c chplmem.c chplmem_tests.c 
	                     chpltypes.c config.c 

---------------------------------------------------------------------------

03/31/05 11:01:31 -- jplevyak

Log message:
	.future test for "like"

Added files:
	chapel/test/types/like/jplevyak/: like-1.chpl like-1.future 
	                                  like-1.good like-2.chpl 
	                                  like-2.future like-2.good 

---------------------------------------------------------------------------

03/31/05 11:05:50 -- roxana

Log message:
	Added the ability for a type to return something else than
	its own instance. This masks situations like with index type
	when we want to see a tuple instead of the index type.
	
	However, this does not entirely solve the problem of assigning a
	tuple to an index variable. I left the future to Steve since he is
	the one who implemented all tuple machinery.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 
	                             insertAnonymousTypes.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/domains/roxana/: test_index_expr1.future 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

03/31/05 13:14:15 -- bradc

Log message:
	Added a small script to the util/ directory that looks for
	tabs in the source code.  This must either be run from the
	chapel/ directory, or a CHPLHOME environment variable must
	be set that points to that directory.  This is going to be
	part of a nightly script that is run, but may also be good
	for people to sanity check that their code is tab-free as
	we make the transition away from tabs.

Added files:
	chapel/util/: lookForTabs 

---------------------------------------------------------------------------

03/31/05 14:48:42 -- bradc

Log message:
	Removing futures for tests that are now working (and
	seemingly for the right reasons).

Modified files:
	chapel/test/classes/bradc/: .cvsignore 
Removed files:
	chapel/test/classes/bradc/: writeclass2.future 
	                            writeclass2a.future 
	                            writerecord2.future 

---------------------------------------------------------------------------

03/31/05 14:50:52 -- bradc

Log message:
	Removing some tabs that presumably got mis-merged
	in last night's switch-over.

Modified files:
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

03/31/05 14:56:11 -- bradc

Log message:
	This is a script that will be run as a cron job
	to make sure tabs don't creep into our code.
	If it finds tabs, it'll mail chapel_dev with
	a listing of files in which they were found
	(similar to the one you just received while I
	was debugging :).  If there are no tabs, it'll
	just mail me so we have a heartbeat and know
	that it's still running properly.

Added files:
	chapel/util/: lookForTabs.cron 

---------------------------------------------------------------------------

03/31/05 15:51:40 -- jplevyak

Log message:
	Some cleanup of the way "null" is handled.
	Fixed noinit2.future test by naming "null" a subtype of "object"
	  (the superclass of all classes)

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
Removed files:
	chapel/test/classes/bradc/: noinit2.future 

---------------------------------------------------------------------------

03/31/05 16:38:37 -- roxana

Log message:
	Removed the future for the tuple to index assignment that I
	had left for Steve.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
	                             test_index_expr1.good 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/AST/: expr.cpp type.cpp 
Removed files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

03/31/05 17:12:53 -- deitz

Log message:
	This is a checkin of code that is not used by default.  There is a new
	commented out #define in passlist.h called USE_EXPR_VARINIT which if
	uncommented will use VarInitExprs as discussed below.
	
	Added a new pass called ProcessDefs that takes VarDefStmts and inserts
	default and user initialization statements into the code.  This is
	done before analysis.  Since the type of the variable may not be
	known, the expr VarInitExpr of the VarSymbol is used to mark that
	var->type->defaultVal should be used here when the defaultVal is
	known.
	
	After analysis, this replacement is done.  It is currently done in
	RemoveNamedParameters.
	
	I'm checking in so that John can get analysis going when he gets a
	chance.  I think this is going to require a little work on my end so
	I'm using the #define method.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share fixup.cpp 
	                             insertVariableInitializations.cpp 
	                             insertVariableInitializations.h 
	                             removeNamedParameters.cpp 
	                             verifyASTType.cpp 
Added files:
	chapel/compiler/traversals/: processDefs.cpp processDefs.h 

---------------------------------------------------------------------------

04/01/05 09:39:48 -- deitz

Log message:
	Added an isConstructor field to FnSymbol that is true if the function
	is a constructor and false otherwise.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/01/05 12:34:21 -- jplevyak

Log message:
	New test cases for overloaded assignment.

Added files:
	chapel/test/functions/jplevyak/: equal-1.chpl equal-1.good 
	                                 equal-2.chpl equal-2.good 
	                                 equal-3.chpl equal-3.good 
	                                 equal-4.chpl equal-4.good 
	                                 equal-5.chpl equal-5.good 
	                                 equal-6.chpl equal-6.good 
	                                 equal-7.chpl equal-7.good 
	                                 equal-8.chpl equal-8.future 
	                                 equal-8.good equal-9.chpl 
	                                 equal-9.future equal-9.good 

---------------------------------------------------------------------------

04/01/05 12:45:57 -- bradc

Log message:
	These are some type initialization tests that came up as
	being interesting tests when Steve and I were playing
	with different type initialization schemes yesterday.
	They are meant to be incredibly low priority, but seemed
	like interesting enough tests to be worth capturing.

Added files:
	chapel/test/types/typedefs/bradc/: .cvsignore localType.chpl 
	                                   localType.future 
	                                   localType.good 
	                                   localType2.chpl 
	                                   localType2.future 
	                                   localType2.good 
	                                   localType2.stdin 

---------------------------------------------------------------------------

04/01/05 14:46:07 -- bradc

Log message:
	Implemented union constructors so that they set the
	union selection field to uninitialized and don't
	try to set any of the component fields.  This fixes
	two futures and I removed their .future files.
	
	Tucked the union's enumerated type tucked into
	the ClassType class rather than dropping it on
	the floor so that it can be referred to after
	it's built.  Another reason to break UnionType
	into its own class, which I might attempt next.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Removed files:
	chapel/test/classes/bradc/: writeunion-workaround.future 
	                            writeunion.future 

---------------------------------------------------------------------------

04/01/05 15:25:29 -- deitz

Log message:
	Fixed a bug in sequence types in which the type had astType TYPE_CLASS
	rather than TYPE_SEQ.
	
	Fixed and added pass VerifyASTType to the passlist just before
	analysis is run.  This is another nice sanity check.
	
	Reworked sequence code in the internal prelude.  Most of it remains
	commented out.
	
	Made BuildClassConstructorsEtc work on all modules, not just the
	common and user modules.
	
	Fixed a bug in specializeParenOpExprs in which a variable was not set
	to NULL.  This didn't matter until there was an error in which case
	the INT_FATAL was incorrectly not firing.
	
	Added a simple test for arrays of strings.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	                             specializeParenOpExprs.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

04/01/05 15:57:58 -- deitz

Log message:
	Added specialized codegen for assigning integers to strings.  Note
	that I would rather overload assignment for this just as I would like
	to overload + for string concatenation.
	
	Added _int_string to the runtime which is like intstring in the
	compiler.  Changed the name of glomstrings in the runtime to
	_glom_strings.
	
	Added a number of test cases:
	
	test/arrays/deitz/test_array_basic2.chpl attempts to assign floats to
	an array of integers.  Analysis complains about mixed primitive types
	but this should be a coercion.
	
	test/arrays/deitz/test_array_float1.chpl attempts to print out an
	array of floats but the .0s are left off.
	
	test/arrays/deitz/test_array_of_string1.chpl is a simple array of
	strings test that I mentioned in my last log message but accidentally
	didn't checkin.
	
	test/arrays/deitz/test_array_of_string2.chpl attempts to assign
	integers to an array of strings.  Analysis complains about mixed
	primitive types but this should be a coercion too.
	
	test/trivial/deitz/test_coerce_integer_to_string1.chpl assigns an
	integer to a string.
	
	test/trivial/deitz/test_coerce_integer_to_string2.chpl passes an
	integer to a function expecting a string.  This should build a
	coercion wrapper.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c config.c 
Added files:
	chapel/test/arrays/deitz/: test_array_basic2.chpl 
	                           test_array_basic2.future 
	                           test_array_basic2.good 
	                           test_array_float1.chpl 
	                           test_array_float1.future 
	                           test_array_float1.good 
	                           test_array_of_string1.chpl 
	                           test_array_of_string1.good 
	                           test_array_of_string2.chpl 
	                           test_array_of_string2.future 
	                           test_array_of_string2.good 
	chapel/test/trivial/deitz/: test_coerce_integer_to_string1.chpl 
	                            test_coerce_integer_to_string1.good 
	                            test_coerce_integer_to_string2.chpl 
	                            test_coerce_integer_to_string2.future 
	                            test_coerce_integer_to_string2.good 

---------------------------------------------------------------------------

04/01/05 16:04:24 -- jplevyak

Log message:
	Indexes don't actually get assigned to tuples correctly.
	Here, dead expressions were eliminated, masking the problem.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
Added files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

04/01/05 16:48:28 -- roxana

Log message:
	I am not sure I understand the dead expression argument of John.
	Maybe you should create a new future for yourself and check out the
	I/O for index types. I do not have time to look into this. The
	intent of the test was to do the assignments that it does correctly.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
Removed files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

04/01/05 16:50:19 -- deitz

Log message:
	Added overloaded = for records.
	
	As a stopgap until VarInitExpr is working well, I fixed how
	constructors are made so that an assignment to a string is done with
	the _init_string function rather than assignment.  As a stopgap to
	this, I added a bail-out in ProcessParameters if the function is
	called _init_string.  This let me move on with the test I was writing
	and should fix the regression we've been seeing.
	
	Added a test case for record assignment that is working even though
	the overloaded = is not firing.  This is because C does it for us.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             processParameters.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_assign1.chpl 
	                            test_record_assign1.good 

---------------------------------------------------------------------------

04/01/05 17:19:21 -- deitz

Log message:
	Added call to setDefPoint in constructor of DefExpr.  Now that every
	defPoint is a DefExpr, this is a fine place to do it.  Removed a bunch
	of unnecessary setDefPoint calls with this change.
	
	The only setDefPoint calls other than from the constructor are related
	to formals in functions and enum symbols in an enum type.  They share
	defPoints with the function and the enum type symbol.  Should they
	have their own DefExprs?  That will have to wait for more thought.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertThisParameters.cpp 

---------------------------------------------------------------------------

04/01/05 17:56:09 -- bradc

Log message:
	Refactored the storage of union types in the AST from
	being a ClassType with its union_value boolean set to
	true to being a subclass of ClassType called UnionType
	(astType_t = TYPE_UNION).  In doing so, eliminated the
	union_value field, but ensured that the value field in
	ClassType is true for unions so that code that merely
	wants to know whether a ClassType instance has value
	semantics can check that flag (and there are lots of
	instances).  If a piece of code wants to specifically
	know that a ClassType instance is a union, it should use
	a dynamic cast or check the astType field as usual.
	
	This refactoring cleaned up a lot of code, typically by
	replacing conditionals outside of the ClassType methods
	with calls to virtual functions now defined for the
	ClassType hierarchy.
	
	- C code generation of field access operators
	
	- moved the building of constructor bodies out of
	  buildClassConstructorsEtc.cpp (though the call to
	  build them is still there, obviously)
	
	  NOTE to Steve/John: developers who want to flip the
	        CONSTRUCTOR_WITH_PARAMETERS flag will now need
	        to do so in type.cpp as well as buildClass...
	        Steve assures me that this is OK and that it
	        will go away soon anyway... :)
	
	- moved the building of the union type's enumeration
	  used at runtime for type safety into the UnionType
	  class.
	
	- built a function to compute the name of a union
	  enumeration to the UnionType class to avoid so many
	  separate calls to glomstrings() that have to match
	  in order for everything to work properly.
	
	Other changes:
	
	- cleaned up the ClassType constructor, which had many
	  arguments that were no longer being used (or never were)
	
	TODO: refactor classdecl, recorddecl, uniondecl in parser
	      so that they are all one rule rather than three
	      almost-identcal ones
	
	ALSO: move construction of _UNION_SET/CHECK/etc. into
	      UnionType since it's virtually identical and done
	      in a few places.

Added files:
	chapel/test/types/like/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

04/01/05 17:57:34 -- bradc

Log message:
	Whoopsee, I was in the wrong directory for that last checkin,
	and my attempt to abort once I realized it didn't work out for
	some reason...

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         insertWriteFns.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertUnionChecks.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

04/01/05 18:18:55 -- bradc

Log message:
	Oh yeah, I forgot about this one -- here's that other
	nil test that John fixed yesterday.

Removed files:
	chapel/test/functions/bradc/: intents-classes4.future 

---------------------------------------------------------------------------

04/01/05 18:22:15 -- bradc

Log message:
	It seems that these Makefiles' clean and clobber
	commands weren't really written very well,
	which explains why Roxana's clobbers never
	cleaned up as much as expected.

Modified files:
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/04/05 09:33:59 -- deitz

Log message:
	Rechecked in my code corresponding to the following checkin:
	
	  As a stopgap until VarInitExpr is working well, I fixed how
	  constructors are made so that an assignment to a string is done with
	  the _init_string function rather than assignment.  As a stopgap to
	  this, I added a bail-out in ProcessParameters if the function is
	  called _init_string.  This let me move on with the test I was writing
	  and should fix the regression we've been seeing.
	
	This must have been accidentally lost in Brad's refactoring.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/04/05 10:15:48 -- roxana

Log message:
	Changed the tuple assignment test to be more compelling. This
	is in response to John's observation that checking in dead code
	is not such a good idea.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.chpl 
	                             test_index_expr1.good 
Added files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

04/04/05 10:35:33 -- deitz

Log message:
	My sequence class implementation is going to rely heavily on analysis
	requiring that I put a bunch of code in the internal prelude that will
	require analysis to be used thus effectively removing support for the
	--noanalysis flag.  To continue to support this flag, I added a pragma
	"omit for noanalysis" that says this function or class or variable
	should be omitted from the AST and destroyed in the Symboltable if
	this pragma is specified and the --noanalysis flag is used.
	
	Added a pass OmitForNoAnalysis that runs very early in compilation and
	removes things labeled with the "omit for noanalysis" pragma from the
	AST and Symboltable.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: omitForNoAnalysis.cpp 
	                             omitForNoAnalysis.h 

---------------------------------------------------------------------------

04/04/05 10:37:01 -- bradc

Log message:
	This is an old SSCA2 feature list that we made but
	never committed to CVS.

Added files:
	chapel/doc/internal/: SSCA2.features 

---------------------------------------------------------------------------

04/04/05 10:49:57 -- bradc

Log message:
	Added some preliminary support for writing out tuples
	and index types in order to help Roxana write tests
	more easily.  Checked in some simple tests that
	do some simple writes of homogeneous and heterogeneous
	tuple types, as well as a 2D index.
	
	Also checked in a future test of declaring and assigning
	a 1D index.  This doesn't seem to work, apparently
	because it's stored as a tuple rather than a flat
	integer.

Modified files:
	chapel/test/dispatch/jplevyak/: .cvsignore 
	chapel/test/flowanalysis/jplevyak/: .cvsignore 
	chapel/test/flowanalysis/newast/: .cvsignore 
Added files:
	chapel/test/domains/bradc/: .cvsignore writeIndex.chpl 
	                            writeIndex.future writeIndex.good 
	                            writeIndex2.chpl writeIndex2.good 
	chapel/test/types/tuple/bradc/: .cvsignore writeTuple.chpl 
	                                writeTuple.good 

---------------------------------------------------------------------------

04/04/05 10:51:04 -- deitz

Log message:
	Added a script list_futures to the test/ directory that lists all the
	future tests next to the assigned person's name.

Added files:
	chapel/test/: list_futures 

---------------------------------------------------------------------------

04/04/05 11:24:12 -- bradc

Log message:
	

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

04/04/05 11:26:05 -- bradc

Log message:
	I seem to have completely lost my ability to check in code.
	
	That last checkin should've included include/type.h and
	AST/type.cpp, but I must've been in the wrong directory.
	
	Then, when checking those files in, I forgot that I had
	mods to chapel.y until the commit log entry buffer came
	up, and while I requested to abort the check-in, it
	still got checked in.  Bummer.
	
	This checkin backs out my premature changes to chapel.y.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

04/04/05 11:43:21 -- deitz

Log message:
	Moved the RemoveLikeTypes traversal before analysis.  Added an error
	message if we cannot resolve the type of a like expression before
	analysis.
	
	Improved typeInfo() on MemberAccess expressions so that if it is run
	before analysis it checks to see if it can resolve the type anyway.
	Alternative: This can be moved to ScopeResolve symbols in this case.
	
	Removed futures for like-1 and like-2.  Fixed good output file of
	like-1.  Hopefully this doesn't break our test-case policy.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: removeLikeTypes.cpp 
	chapel/test/types/like/jplevyak/: like-1.good 
Removed files:
	chapel/test/types/like/jplevyak/: like-1.future like-2.future 

---------------------------------------------------------------------------

04/04/05 12:24:52 -- bradc

Log message:
	Wrapping up one of my TODO's from Friday afternoon's
	checkin, refactored parsing of unions, classes, and
	records to use the same rule rather than three nearly-
	identical rules.

Modified files:
	chapel/compiler/include/: symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

04/04/05 13:45:28 -- bradc

Log message:
	Refactored code that makes runtime union
	check calls into a method on UnionType
	called buildSafeUnionAccessCall.  This
	combines the three different places we
	build these calls, removing a lot of
	redundant code and localizing all
	references to the union's enumerated
	type to the type.cpp file.  All future
	calls to these routines should be made
	through this interface.
	
	In making this change, I propagated
	filename/lineno information in
	applyWithParameters.cpp so that I could
	rely on looking at the base expression
	in a MemberAccess to find out where
	the MemberAccess lives.  Steve has
	ideas about propagating this information
	semi-automatically when creating new
	AST nodes, and if that change is done,
	my code could potentially be pulled out.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: insertWriteFns.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             insertUnionChecks.cpp 

---------------------------------------------------------------------------

04/04/05 14:10:58 -- bradc

Log message:
	Improved the list_futures script to take an optional
	username as its argument.  If a username is given,
	it only lists the futures that are assigned to that
	username.  If no username is given, it works the same
	as before (note that grepping for usernames out of
	the original output gave mixed results since the
	username could appear in the test path, and isn't
	necessarily the first word on the line).
	
	Also, switched to a more generic perl installation
	location for portability.

Modified files:
	chapel/test/: list_futures 

---------------------------------------------------------------------------

04/04/05 14:38:24 -- deitz

Log message:
	Fixed a problem in the traversal in which the formal arguments to a
	function were traversed regularly not as if they were definitions
	which they are.  Fixed a bug in which the back pointer was not set for
	the initializing expression to formal arguments (default values).
	Fixed a bug in which the default values were not copied if they were
	used multiple times.
	
	Improved OmitForNoAnalysis to actually remove the symbols from the
	linked lists in the SymScope and mangle the name in the hash table so
	it is not found via lookup.  This works on children scopes if the
	symbol's type is a class.  It does not work on children symbols or
	scopes in functions, modules, and whatever else.  This is because
	there is no good way to start a SymtabTraversal on a symbol or to grab
	the child scope of a symbol.
	
	Uncommented the rest of my sequence code in the internal prelude.
	This is not used yet.
	
	Made RemoveDeadSymbols work on all modules not just user modules.  For
	symbols in the intrinsic scope, we bail.  What we really want is to do
	this on all scopes but the intrinsic scope.  Or what I have is fine.
	
	Removed noanalysis test_seq tests since the sequence implementation is
	starting to rely on analysis.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: removeDeadSymbols.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: omitForNoAnalysis.cpp 
Removed files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq1.chpl 
	                                         test_seq1.good 
	                                         test_seq1a.chpl 
	                                         test_seq1a.good 
	                                         test_seq2.chpl 
	                                         test_seq2.good 
	                                         test_seq8.chpl 
	                                         test_seq8.good 

---------------------------------------------------------------------------

04/04/05 15:59:19 -- deitz

Log message:
	Cleaned up sequence code but didn't get anything working yet.  I'm
	having a phase-ordering problem wanting to treat the base sequence
	class as a with-inclusion even though I want to do it later than
	with-inclusion is done.
	
	Moved ExpandSeqExprAssignments up before analysis so analysis should
	never see sequence literals, I think.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/04/05 17:29:39 -- bradc

Log message:
	Refactored the ClassType subclass tree with the
	intention of making classes and records more
	distinct.  This is a continuation of my union-related
	refactoring from last week.  The old class hierarchy
	was:
	
	  ClassType
	  > SeqType
	  > UnionType
	
	The new hierarchy is:
	
	  StructuralType (a reasonably abstract superclass)
	  > ClassType
	  > > SeqType
	  > RecordType
	  > UnionType
	
	So when we create classes, records, and unions, we
	now create an instance of ClassType, RecordType,
	or UnionType.  The details of the classes are
	currently almost all contained within ClassType,
	and the vast majority of them will stay there, but
	my goal is to remove the "value" field (still set
	and used as before) and rely on the class hierarchy
	more directly.
	
	Related to this change, many things that had a
	class bias to them (like classScope) have now been
	renamed to have a new, more neutral name (like
	structScope).  "struct" isn't meant to imply C
	structs, it's merely a shorthand for the fact that
	it relates to the StructuralType class.  If someone
	has a proposal for a better naming scheme, I'm all
	ears, but let's make the change quick before anyone
	gets too wedded to these.
	
	Some side changes:
	
	- noticed that the astTypeName array of debugging
	  class names was out-of-date w.r.t. the enumeration,
	  so put in an assertion in verifyASTType.cpp to
	  ensure that the last field is set correctly (as
	  a means of forcing people to add new strings,
	  though they could still add them out-of-order...).

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h baseAST.h stmt.h type.h 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         insertWriteFns.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             buildClassConstructorsEtc.cpp 
	                             expandClassWiths.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             processDefs.cpp resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             verifyASTType.cpp verifyASTType.h 

---------------------------------------------------------------------------

04/04/05 17:48:31 -- shannon

Log message:
	Implemented the --memtrace and --memthreshold runtime options.
	"--memtrace=<filename>" prints a memory trace to the given
	filename.  For instance:
	
	        "malloc" called for "49" items of size "8" for \
	                 "array A":  0x804f300
	
	The memory threshold option is always called with memory trace,
	"--memtrace=<filename> --memthreshold=<n>", and squelches prints
	to the log for memory sizes less than 'n'.
	
	Also updated the help message, sorting the flags by type and
	printing them under headings.  The config var table is printed
	at the bottom of the help message.
	
	Changed the print of the memory table to include both the number
	and size (in bytes) of the memory requested, along with the
	memory description.
	
	Added functionality to the test harness so that a test can
	specify its own CATFILES, e.g. foo.catfiles.

Modified files:
	chapel/runtime/include/: arg.h chplmem.h config.h 
	chapel/runtime/src/: arg.c chplmem.c config.c main.c 
	chapel/test/: start_test sub_test 
	chapel/test/execflags/shannon/configs/: configVar-Dash.good 
	                                        configVarHelp.good 
	                                        configVarModStrings1.good 
	                                        configVarModStrings2.good 
	                                        configVarSetOver.good 
	                                        configVarSetTwoTypes.good 
	                                        configVarTwoModules.good 
	                                        varNameEnumQM.good 
	                                        varNameQMark.good 
	chapel/test/memory/shannon/: freedMalloc.good 
	                             reallocZeroSize.good 
Added files:
	chapel/test/memory/shannon/: CLEANFILES configVarFile.catfiles 
	                             configVarFile.chpl 
	                             configVarFile.execopts 
	                             configVarFile.good 
	                             configVarFile.input jacobi.catfiles 
	                             jacobi.chpl jacobi.execopts 
	                             jacobi.good 

---------------------------------------------------------------------------

04/04/05 17:57:00 -- shannon

Log message:
	Woops, forgot to add this to the last commit.

Added files:
	chapel/test/memory/shannon/: PREDIFF 

---------------------------------------------------------------------------

04/05/05 09:48:22 -- bradc

Log message:
	Continued yesterday's refactoring of the StructuralType
	hierarchy by removing the "value" field from the
	StructuralType class and inserting more specific checks
	into the code that relied on this field.  This resulted
	in some nice refactorizations, especially in the realm
	of insertWriteFns, where the code was moved into the
	Type hierarchy and made better use of inheritance.
	
	In other cases, there are still more dynamic casts than
	I would like.  A good next step would be to try and
	determine what aspects of a type's behavior the code is
	relying on and embedding these into methods rather than
	relying on dynamic casts.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         insertWriteFns.cpp symscope.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/05/05 10:05:37 -- jplevyak

Log message:
	Improve handling of meta types (actual type arguments e.g. integer as
	an argument to generics).
	
	NOTE: in order to get intents-classes4.chpl to work I had to
	  insert a conditional in removeDeadSymbols.cpp.  This looks like
	  the right change, but if, Steve/Brad, you look at it and decide that
	  this is indicative of an error someplace else I'll back out these changes.
	  I believe I have tightened up the notion of dead types which is causing
	  a builtin type to be declared dead which wasn't taken account of by
	  the code in removeDeadSymbols.cpp

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/test/flowanalysis/newast/: enumarray.good 

---------------------------------------------------------------------------

04/05/05 10:17:14 -- bradc

Log message:
	Another default parameter test, but one with
	a return value.

Added files:
	chapel/test/functions/bradc/: defaultParamWithReturn.chpl 
	                              defaultParamWithReturn.good 

---------------------------------------------------------------------------

04/05/05 10:39:40 -- jplevyak

Log message:
	Fix bug which was causing intermittent failures of test_named_param3.chpl

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

04/05/05 11:00:09 -- bradc

Log message:
	Made codegen avoid generating empty structs by inserting
	a fake field into any classes without fields in order to
	conform to standard C better.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/05/05 11:08:00 -- jplevyak

Log message:
	Fix potential issue with using information left over from previous analysis pass.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

04/05/05 12:00:40 -- deitz

Log message:
	Added a new pass called, for now, ProcessDefs.  It puts in a default
	initialization statement before analysis is run using VarInitExpr.  So
	for something like:
	
	  {
	    ...
	    var x = foo();
	
	We would produce:
	
	  {
	    VarInit x
	    ...
	    var x = foo();
	
	This alerts analysis that the defaultVal of the type of x is going to
	be assigned to x at this point.
	
	Factored out SET_BACK for idxExpr in the constructor of IndexType.
	
	In ScopeResolveSymbols, added setting of defaultVal for UserTypes to
	be whatever it is for its definition.
	
	In InsertAnonymousTypes creation of IndexTypes, added setting of the
	defaultVal for the IndexType to be whatever it is for its idxType.
	
	Removed insertion of default initializations statements in
	InsertVariableInitializations.  This now just changes VarDefStmts to
	assignment statements.  The default assignment statements were put in
	in ProcessDefs.
	
	Added default initialization to user initialization for temporary
	inserted in ProcessParameters for case where out parameter is not
	initialized.  All temporary variables need to have initializations
	after ProcessDefs pass is run.
	
	Moved squelching of default initialization for arrays and domains to
	removeNamedParameters, where VarInitExprs are resolved post-analysis.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertVariableInitializations.cpp 
	                             processDefs.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

04/05/05 12:21:03 -- bradc

Log message:
	Fixed some problems with start_clean when an explicit
	start directory was given.  Added support for double-
	dash option names.

Modified files:
	chapel/test/: start_clean 

---------------------------------------------------------------------------

04/05/05 12:51:13 -- bradc

Log message:
	Updated copyright to include 2005.

Modified files:
	./: COPYRIGHT LICENSE 

---------------------------------------------------------------------------

04/05/05 12:52:20 -- bradc

Log message:
	Added options to the test system to provide a script
	to be run before executing the generated executable
	called PREEXEC.  Added the ability to generate this
	script, or the PREDIFF script on a test-by-test
	basis by specifying a foo.prediff or foo.preexec
	file for a test foo.chpl.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/05/05 13:02:27 -- bradc

Log message:
	Fixed the Makefile strategy for compiler-generated code
	so that the Makefile is responsible for putting the
	generated binary in the correct place rather than the
	Chapel compiler (previously, the Makefile would leave
	the generated binary in the /tmp or --savec directory,
	and the compiler would copy it out).
	
	This allows developers who using the --savec flag to
	inspect and edit generated code to recompile it by
	typing:
	
	        make -f <savec-dir>/Makefile
	
	which avoids the need to remember to run
	<savec-dir>/a.out rather than simply ./a.out
	
	An interesting note that I'll forget about the next
	time I look at this code if I don't mention it is
	that it's tempting to simply put the final filename
	(say, a.out) into the back-end C compiler's link
	line, but this causes a manyfold slowdown in compile
	time for the test system (apparently because the C
	compiler won't write the binary out to tmp space and
	then copy it over to the -o location?).  So instead,
	we have it link the binary to the /tmp --savec
	location and then copy it out as a separate step.

Modified files:
	chapel/compiler/include/: files.h 
	chapel/compiler/passes/: buildBinary.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/runtime/etc/: Makefile.include 
Added files:
	chapel/test/compflags/bradc/nameoutput/: .cvsignore CLEANFILES 
	                                         localname.chpl 
	                                         localname.compopts 
	                                         localname.good 
	                                         localname.preexec 
	                                         localnamesavec.chpl 
	                                         localnamesavec.compopts 
	                                         localnamesavec.good 
	                                         localnamesavec.preexec 

---------------------------------------------------------------------------

04/05/05 13:36:18 -- bradc

Log message:
	Added two new future tests for default/named parameters.
	I was writing these tests to expose a concern I had about
	the wrapper functions returning the call to the nested
	function (which would preclude the execution of any copy
	out statements that followed the function call), but
	ended up finding other problems instead.  Assigned to
	Steve/me.

Added files:
	chapel/test/functions/bradc/: defaultParamInOut.chpl 
	                              defaultParamInOut.future 
	                              defaultParamInOut.good 
	                              nameDefaultParamInOut.chpl 
	                              nameDefaultParamInOut.future 
	                              nameDefaultParamInOut.good 

---------------------------------------------------------------------------

04/05/05 13:43:19 -- deitz

Log message:
	Changed VarInitExpr to contain an Expr rather than a Symbol so that it
	can contain MemberAccesses when used in class constructors.
	
	Reworked BuildClassConstructors to use VarInitExpr iff
	
	      #define USE_VAR_INIT_EXPR
	
	is uncommented.  Otherwise it uses the type->defaultVal if it is known
	and nothing otherwise.
	
	Improved support for sequences.  I believe I'm close to getting these
	things working.  Create a new function createSeqType that grabs the
	_seq class in the internal prelude and turns it into a new sequence
	type when requested to do so by InsertAnonymousTypes.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             processDefs.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 

---------------------------------------------------------------------------

04/05/05 15:35:32 -- bradc

Log message:
	Added a test that shows that function call intents
	break in code generation when we return a
	function call immediately.

Added files:
	chapel/test/functions/bradc/: returnFnCallIntents.chpl 
	                              returnFnCallIntents.future 
	                              returnFnCallIntents.good 

---------------------------------------------------------------------------

04/05/05 16:10:11 -- bradc

Log message:
	Cleaning up old email, moved a bunch of tests
	out of the trivial/ directory (where I used
	to stack them up for fear of creating new
	directories) into more appropriate subdirectories.

Added files:
	chapel/test/arrays/bradc/: .cvsignore domarr.chpl domarr.good 
	                           domarr1a.chpl domarr1a.future 
	                           domarr1a.good domarr2.chpl 
	                           domarr2.future domarr2.good 
	                           enumarray.chpl enumarray.good 
	chapel/test/classes/bradc/: badred.chpl badred.future 
	                            badred.good 
	chapel/test/functions/bradc/: chain.chpl chain.good 
	                              globalref.chpl globalref.good 
	                              mutrec.chpl mutrec.good 
	                              noargs.chpl noargs.good 
	                              onearg.chpl onearg.good 
	                              retstmt.chpl retstmt.good 
	                              usebeforedef.chpl 
	                              usebeforedef.good 
Removed files:
	chapel/test/trivial/bradc/domarr/: .cvsignore domarr.chpl 
	                                   domarr.good enumarray.chpl 
	                                   enumarray.good 
	chapel/test/trivial/bradc/functions/: .cvsignore chain.chpl 
	                                      chain.good globalref.chpl 
	                                      globalref.good mutrec.chpl 
	                                      mutrec.good noargs.chpl 
	                                      noargs.good onearg.chpl 
	                                      onearg.good retstmt.chpl 
	                                      retstmt.good 
	                                      usebeforedef.chpl 
	                                      usebeforedef.good 
	chapel/test/trivial/bradc/protoast/future/: NOTEST badred.chpl 
	                                            badred.good 

---------------------------------------------------------------------------

04/06/05 12:31:04 -- jplevyak

Log message:
	This is the first in a series of checkins to get operator= working.
	I am going to try to do it this way as integrating this and
	VarInitExpr was becoming too much.
	
	The main change here is that all unknown variables are initialized to nil.
	
	NOTE: when we get VarInitExpr in this is going to change, so if it seems
	a bit messy now don't worry about it, this is transition code.
	
	Updated 2 tests which were effected.  Added unistd.h to stdchpl.h
	so as to get intptr_t.  Changed codeGen of assignment to handle
	assigning numbers from nil.  Again, this is transitional code, please
	bear with me.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/06/05 12:35:37 -- jplevyak

Log message:
	Added Symbol::isThis().  To be used in analysis.cpp.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

04/06/05 12:45:57 -- jplevyak

Log message:
	Add an "any" type for internal use.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

04/06/05 13:21:24 -- deitz

Log message:
	Made major improvements to sequences.  Rather than withing in the base
	_seq class to create the anonymous sequence type, the class is cloned
	(methods and all).
	
	Fixed a number of bugs in update in copy.  This will help us with
	class cloning eventually.
	
	Modified the code for _seq.  This checkin gets test_seq1b and
	test_seq1c working with --noanalysis.
	
	Updated the hard-coded write function for sequences to use nil instead
	of NULL because nil != NULL.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             expandSeqExprAssignments.cpp 
	                             insertAnonymousTypes.cpp 
	                             updateSymbols.cpp updateSymbols.h 
Added files:
	chapel/test/types/seq/deitz/: test_seq1b.chpl test_seq1b.future 
	                              test_seq1b.good test_seq1c.chpl 
	                              test_seq1c.future test_seq1c.good 
	chapel/test/types/seq/deitz/noanalysis/: test_seq1b.chpl 
	                                         test_seq1b.good 
	                                         test_seq1c.chpl 
	                                         test_seq1c.good 

---------------------------------------------------------------------------

04/06/05 13:52:37 -- bradc

Log message:
	Removed "NULL" from internal prelude since we now
	have "nil" instead.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

04/06/05 13:53:49 -- bradc

Log message:
	Noticed another place where I hadn't updated the
	copyrights, so unified how copyrights were handled
	slightly to minimize the number of places where a
	change is needed.
	
	Also, in debugging an internal error, tried to check
	the compiler version number only to find that we
	didn't have a --version flag, so added one.

Modified files:
	chapel/compiler/main/: Makefile driver.cpp 
Added files:
	chapel/test/compflags/bradc/noexec/: .cvsignore CLEANFILES 
	                                     NOEXEC version.chpl 
	                                     version.compopts 
	                                     version.goodstart 
	                                     version.prediff 

---------------------------------------------------------------------------

04/06/05 13:56:42 -- deitz

Log message:
	Implemented setter and getter functions for all fields within a
	structure (classes, records, unions) as methods within the structure.
	If the field is named "field," then the setter is "set_field" and the
	getter is "get_field."
	
	For example, for a class like
	
	class foo {
	  var i : integer;
	  var f : float;
	}
	
	we would generate the following functions:
	
	foo.set_i(arg : integer) {
	  i = arg;
	}
	
	foo.set_f(arg : float) {
	  f = arg;
	}
	
	foo.get_i() : integer {
	  return i;
	}
	
	foo.get_f() : float {
	  return f;
	}
	
	Note that if the type is unknown for the field, it is not used in the
	setter or getter function.  Of course.
	
	Added _getter and _setter pointers within FnSymbols that point to the
	VarSymbols in a class that they apply to.  In non-setter/getter
	functions, this pointer is NULL.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/06/05 14:22:28 -- deitz

Log message:
	Moved ExpandSeqExprAssignments which transforms something like
	
	  s = (/ 1, 3, 4 /);
	
	into something like
	
	  s = s # 1;
	  s = s # 3;
	  s = s # 4;
	
	though "#" is not yet supported all the way down in the passlist (now
	after analysis).  This means analysis will need to deal with SeqExpr
	(sequence literals of the form (/ ... /)) though this was to be
	expected.
	
	Added test_seq1 and test_seq1a to my noanalysis sequence testing
	directory as these are now working with --noanalysis.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: expandSeqExprAssignments.cpp 
Added files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq1.chpl 
	                                         test_seq1.good 
	                                         test_seq1a.chpl 
	                                         test_seq1a.good 

---------------------------------------------------------------------------

04/06/05 14:23:38 -- shannon

Log message:
	Woops, forgot to include this with my last commit.  Two
	tests generate log files.

Added files:
	chapel/test/memory/shannon/: .cvsignore 

---------------------------------------------------------------------------

04/06/05 14:49:38 -- bradc

Log message:
	Once again, a file escapes my commit process...  I think
	I'm losing it.

Modified files:
	./: COPYRIGHT 

---------------------------------------------------------------------------

04/06/05 17:01:57 -- deitz

Log message:
	Added a new pass RemoveSeqOperations that converts "#" into a method
	call into the sequence class.  This is necessarily done after analysis
	since before analysis we do not necessarily know whether the left or
	right hand expression is a sequence (as opposed to an element) or if
	they are both sequences.
	
	Added non-analysis support for "#" used to append an element to a
	sequence.  This uses the BINOP_SEQCAT that already existed but was
	never used.
	
	Fixed a bug in ApplyThisParameters in which constructors were getting
	a "this" wrapped around them.  That seems strange since we don't want
	to move the "this" into the constructor.  I'm a little surprised it
	was working.  Must not have been happening in general.
	
	Removed some dead code from the function that creates sequence types
	from class types.
	
	Removed old runtime support macro _SEQ_APPEND.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	                         internal_prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
	                             applyThisParameters.cpp 
	chapel/runtime/include/: seq.h 
Added files:
	chapel/compiler/traversals/: removeSeqOperations.cpp 
	                             removeSeqOperations.h 
	chapel/test/types/seq/deitz/noanalysis/: test_seq3.chpl 
	                                         test_seq3.good 
	                                         test_seq5.chpl 
	                                         test_seq5.good 
	                                         test_seq8.chpl 
	                                         test_seq8.good 

---------------------------------------------------------------------------

04/07/05 11:28:26 -- deitz

Log message:
	Fixed a bug in which the setters and getters were being defined in the
	same scope that the structure was defined in, not the structScope.
	
	Fixed a bug in which the symbol context of the scope of a structural
	type within another type was not set if the outer type was copied.
	This showed up in the sequence code as a result of the above fix.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/07/05 12:36:10 -- bradc

Log message:
	Added LICENSE to main's .cvsignore file after
	yesterday's change to how copyright information
	was generated by the compiler.

Modified files:
	chapel/compiler/main/: .cvsignore 

---------------------------------------------------------------------------

04/07/05 12:38:21 -- bradc

Log message:
	Fixed nightly regression script to work better
	on the Suns in gearing up for a nightly Sun
	regression.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/07/05 14:41:18 -- jplevyak

Log message:
	Cleanup error messages so that types are displayed uniformlly within
	parens to indicate that they are sets of concrete types.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/test/flowanalysis/jplevyak/: badreturn.good 
	                                    dispatch3.good 
	chapel/test/parsing/jplevyak/: module.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/07/05 14:50:19 -- jplevyak

Log message:
	Add interface function in analysis.h
	
	int function_returns_void(FnSymbol *fn);
	
	This works by just checking if there is a STMT_RETURN with s->expr != 0
	somewhere in the function.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h sym.h 

---------------------------------------------------------------------------

04/07/05 14:52:55 -- bradc

Log message:
	Improved portability of sed scripts in main/Makefile.

Modified files:
	chapel/compiler/main/: Makefile 

---------------------------------------------------------------------------

04/07/05 15:28:12 -- jplevyak

Log message:
	Setters and getters for member accesses and for array element assignment
	(I was already doing it for array element reads).  Accessors are
	named "set_XXX" for the setter for member XXX and "XXX" for the getter
	for member "XXX" so that "function A.x { ... }" will work for "a.x" in the
	code.
	
	This also involved updating various tests since the flow analysis
	results are superficially different.
	
	I also disabled the error messages for duplicate symbols in the
	same scope which would have prevented building the getters.
	
	This results in failure of the test for the duplicate symbols error
	message.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: domarr.good enumarray.good 
	                                  formatoutput.good 
	                                  protoast_test.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/07/05 15:43:28 -- jplevyak

Log message:
	Fix instability in the order of error messages which was effecting
	regressions results in some cases.  Some preliminary work on operator= overloading.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

04/07/05 15:49:51 -- jplevyak

Log message:
	Reorder error messages on 2 tests.
	Tighten up criteria for doing coercions on primitive types.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

04/07/05 15:58:31 -- bradc

Log message:
	Made default parameter function wrappers
	do a better job of avoiding the insertion
	of return statements on functions that
	return dtVoid using John's new interface.
	
	Fixed up some tabbing, 80-column format
	issues for type.cpp.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 

---------------------------------------------------------------------------

04/07/05 16:06:13 -- bradc

Log message:
	Turned on stricter checks for the C compilation of the
	compiler-generated code to keep ourselves honest.

Modified files:
	chapel/runtime/etc/: Makefile.macros 

---------------------------------------------------------------------------

04/07/05 16:08:36 -- deitz

Log message:
	Made significant progress on support for sequences.  Added more
	support for the # operator on two sequences or an element and a
	sequence, not just a sequence and an element.
	
	Implemented a new pass to insert temps for all sequence literals that
	are not in the top-level of a DefStmt (and thus the temp would be
	pointless).  This pass is called InsertTemps as it will eventually be
	used to insert temps for tuple literals as well.
	
	Made two more ugly hacks to deal with the __init_function being
	different from all other functions.  I'll deal with this soon.
	
	Made a hack to retype indices in for loops after analysis if the for
	loop is going over a sequence.  Change the dtInteger to whatever the
	sequences elementType is.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: Makefile.share findUnknownTypes.cpp 
	                             insertVariableInitializations.cpp 
	                             removeSeqOperations.cpp 
Added files:
	chapel/compiler/traversals/: insertTemps.cpp insertTemps.h 

---------------------------------------------------------------------------

04/07/05 16:13:43 -- deitz

Log message:
	Added some --noanalysis-working future sequence tests to make sure
	they keep working.

Added files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq2.chpl 
	                                         test_seq2.good 
	                                         test_seq6.chpl 
	                                         test_seq6.good 
	                                         test_seq7.chpl 
	                                         test_seq7.good 
	                                         test_seq8b.chpl 
	                                         test_seq8b.good 

---------------------------------------------------------------------------

04/07/05 17:13:44 -- bradc

Log message:
	Made nightly script so that multiple nightly
	regressions could be run on multiple platforms
	without their output files colliding.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/07/05 17:32:14 -- bradc

Log message:
	Stupid workaround to get around fact that sun doesn't
	seem to have snprintf when -std=c99 is used.

Modified files:
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

04/08/05 10:03:31 -- deitz

Log message:
	Reinserted redefinition checking in the symboltable.
	
	Reworked handling of getter functions with the same name as the field.
	We first name the getter "_chplget_$field" where $field is the name of
	the field.  Then, later, we rename it "$field."  This means that it
	can no longer be looked up in the Symboltable.  However, we don't
	care.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/08/05 10:45:59 -- bradc

Log message:
	Updating some .cvsignores to keep cvs -nq update
	clean.

Modified files:
	chapel/test/compflags/bradc/noexec/: .cvsignore 
Added files:
	chapel/test/classes/bradc/unions/: .cvsignore 

---------------------------------------------------------------------------

04/08/05 11:00:57 -- deitz

Log message:
	Made some minor change to CreateEntryPoint in a first attempt to move
	this after fixup.  Noticing that it contains a call to createInitFn(),
	I'll have to move these after first though.  This checkin is just an
	effort to keep my code inline.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/passes/: createEntryPoint.cpp createEntryPoint.h 
	                         runAnalysis.cpp runAnalysis.h 

---------------------------------------------------------------------------

04/08/05 11:12:58 -- deitz

Log message:
	Reordered some passes to get InsertFunctionTemps down in the passlist.
	This lets us insert many functions before that.  These later passes
	are delicately ordered.
	
	Improved support for sequences so that sequences are liberally copied
	to ensure correct semantics.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: removeSeqOperations.cpp 

---------------------------------------------------------------------------

04/08/05 11:14:18 -- deitz

Log message:
	Added last two of my initial sequence tests to seq/noanalysis
	directory.

Added files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq4.chpl 
	                                         test_seq4.good 

---------------------------------------------------------------------------

04/08/05 11:19:40 -- bradc

Log message:
	More improvements to the nightly regression testing
	scripts for portability.  In order to run it, one
	should now set two environment variables:
	
	        CHPL_NIGHTLY_LOGDIR -- directory for logs to go in
	        CHPL_NIGHTLY_STATDIR -- directory for stats to go in
	
	Otherwise, everything should be reasonably platform
	and user dependent (am about to do some testing to
	be sure).
	
	John, I'm going to see if I can get regressions running on
	the Suns over the weekend.  If so, then we'll add your
	two platforms to the mix next week.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/08/05 11:20:10 -- deitz

Log message:
	John, I'm passing these futures over to you.  Analysis doesn't know
	about (/ ... /) which is a SeqExpr and # which is BINOP_SEQCAT.  Other
	than that, sequences are implemented as classes and use class cloning
	so these should be on track with other things we're working on.

Modified files:
	chapel/test/types/seq/deitz/: test_seq1.future test_seq1a.future 
	                              test_seq1b.future 
	                              test_seq1c.future test_seq2.future 
	                              test_seq3.future test_seq4.future 
	                              test_seq5.future test_seq6.future 
	                              test_seq7.future test_seq8.future 
	                              test_seq8b.future 

---------------------------------------------------------------------------

04/08/05 11:22:58 -- jplevyak

Log message:
	Operator= is now working.  There is a catch all in internal_prelude:
	
	   pragma "builtin" function =(a : any, b : any) { return b; }
	
	which will work for any types which do not implement there own
	operator=.
	
	Implemented a new .= primitive which is the primitive setter.

Modified files:
	chapel/compiler/analysis/: analysis.cpp cg.cpp fa.cpp 
	                           prim_data.dat 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/08/05 11:30:43 -- jplevyak

Log message:
	Remove .future for passing test.

Removed files:
	chapel/test/arrays/deitz/: test_array_of_string2.future 

---------------------------------------------------------------------------

04/08/05 13:57:00 -- deitz

Log message:
	Moved call to createInitFn into createEntryPoint pass as opposed to
	the defining of the module.  The init function is now created in a
	pass.
	
	This made small line number changes to the __init functions in the
	protoast and newast tests.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

04/08/05 14:19:00 -- deitz

Log message:
	Fixed compilation for uncommenting of #define of
	CONSTRUCTOR_WITH_PARAMETERS.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/08/05 14:54:02 -- deitz

Log message:
	Reenabled ComputeVisibleFunctions on class methods.

Modified files:
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         computeVisibleFunctions.h 

---------------------------------------------------------------------------

04/08/05 15:00:08 -- deitz

Log message:
	Forgot to update the output to this test with the change to the init
	functions.

Modified files:
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 

---------------------------------------------------------------------------

04/08/05 15:14:51 -- jplevyak

Log message:
	Remove some unused #ifdefs.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/08/05 15:25:58 -- jplevyak

Log message:
	Remove more unnecessary #ifdefs

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/08/05 16:42:06 -- jplevyak

Log message:
	Here is a weird one.   I am restructuring the variable definition code
	and I noticed that
	
	functions/deitz/test_named_param3.chpl
	
	is failing because it doesn't know the return type of a function.
	
	Turns out, it isn't calling return_type_info() on that function!
	
	So I have added a #define CALL_RETURN_TYPE_INFO in codegenHeader
	which if the retType is dtUnknown, calls return_type_info to get the
	real value.
	
	Steve, could you please try undef'ing to see what the deal is?  This
	function is live, but I think it is a wrapper which makes me think
	that the code in findUnknownTypes.cpp may not always be finding all
	the wrappers.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/08/05 16:44:20 -- bradc

Log message:
	Making nightly work better for users other than the
	nightly cron job based on Steve's feedback.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/08/05 17:42:58 -- deitz

Log message:
	Added a new pass InsertDefaultInitVariables that inserts variables for
	every user-defined type that contain their default initialization.
	These variables are then used to initialize the variables.
	
	Futurized my test for record assignment which does require the
	overloaded = function to be used.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: fixup.cpp processParameters.cpp 
	                             resolveSymbols.cpp 
Added files:
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertDefaultInitVariables.h 
	chapel/test/classes/deitz/: test_record_assign1.future 

---------------------------------------------------------------------------

04/09/05 12:37:25 -- jplevyak

Log message:
	Untabify

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 

---------------------------------------------------------------------------

04/11/05 09:36:47 -- deitz

Log message:
	Fixed a bunch of compiler warnings that show up with
	
	  -O1 -Wuninitialized -Winit-self
	
	all of which I believe turned out to be false positives.
	
	Removed John's
	
	  #define CALL_RETURN_TYPE_INFO
	
	replacing it with an internal warning if the return type is ever not
	known at codegen time.  I saw this in program
	
	  functions/deitz/test_default_param1.chpl
	
	not
	
	  functions/deitz/test_named_param3.chpl.
	
	Moreover, when I ran it in gdb or with valgrind, the error
	disappeared.  I'm no longer seeing the error with the above innocuous
	changes leading me to believe that there is some strange
	initialization error.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp insertAnonymousTypes.cpp 
	                             removeSeqOperations.cpp 

---------------------------------------------------------------------------

04/11/05 11:46:22 -- bradc

Log message:
	Some helper scripts for running nightly cron jobs.
	Made it easier to set up cron jobs on the Sun where
	cron syntax is far more limited than Linux.

Added files:
	chapel/test/Bin/: nightly.cron nightly.debug.cron 
	                  nightly.novgr.cron 

---------------------------------------------------------------------------

04/11/05 11:53:36 -- deitz

Log message:
	Improved --noanalysis resolution of function calls in an effort to
	decrease the number of failing tests when the following are
	uncommented:
	
	  //#define CONSTRUCTOR_WITH_PARAMETERS
	  //#define NO_RESOLVE_CONSTRUCTOR
	
	This involved changing the resolution completely so that it uses the
	visibleFunctions vectors.
	
	When --noanalysis is used, even if CONSTRUCTOR_WITH_PARAMETERS is set,
	the constructor is created without parameters since the wrappers will
	not be created.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

04/11/05 14:47:48 -- shannon

Log message:
	Implemented the --memtable runtime option.  This flag creates
	a table to keep track of the memory allocated, and checks for
	common errors.  The chapel developer may call the printMemTable()
	function to print the contents of this table.
	
	Refactored the printHelpTable function, arg.c and config.c.
	
	Specifically:
	
	* createConfigVarTable.cpp:  This traversal writes to the
	  rtconfig.c file calls to parse the config args as well as
	  calls to print the help table and the config var table
	  since these things can't be done until the config var table
	  has been created (which is done after the call to parseArgs
	  in main.c).
	
	* arg.c:  Moved a bunch of parsing functions out of arg.c and
	  into config.c since parsing of config args is now done from
	  rtconfig.c with a call into config.c.  Also refactored the
	  printing of the help table, creating an array of flag structs
	  for ease of adding more flags.
	
	* config.c:  When parseArgs is called, all config args are now
	  passed from arg.c to config.c and added to a list to be parsed
	  later, when the config var table has been created.
	
	* Changed the expected output for several tests, and added the
	  --memtable execopt to some others.

Modified files:
	chapel/compiler/traversals/: createConfigVarTable.cpp 
	chapel/runtime/include/: arg.h chplmem.h config.h 
	chapel/runtime/src/: arg.c chplmem.c chplmem_tests.c config.c 
	                     main.c 
	chapel/test/memory/shannon/: configVarFile.execopts 
	                             configVarFile.good freedMalloc.good 
	                             jacobi.execopts jacobi.good 
	                             reallocZeroSize.good 
Added files:
	chapel/test/memory/shannon/: freedMalloc.execopts 
	                             freedWithoutMalloc.execopts 
	                             reallocWithoutMalloc.execopts 
	                             reallocZeroSize.execopts 

---------------------------------------------------------------------------

04/11/05 15:26:17 -- bradc

Log message:
	Started work on supporting the ability to build
	the compiler without the garbage collection, but
	didn't quite get it working yet.  This is a move
	in that direction and also cleans up some aspects
	of our make process:
	
	* Made all files that were #including gc_cpp.h #include chplalloc.h
	  instead.
	
	* Fixed Chapel lexer macros to work when gc is not turned on.
	
	* Made list.h use of offsetof work when gc is not turned on.
	
	* Removed the -DDEBUG compiler flag which we never seem to use (and
	  was probably too high up in the build tree anyway...).
	
	* Made the -Wno-invalid-offsetof flag only get used for directories
	  that need it This can be selected by setting the DIR_USES_OFFSETOF
	  macro in a subdirectory's Makefile (see analysis/Makefile for an
	  example).
	
	* Made the -DLANG_V macro get set only in the vparser directory (the
	  only place it was needed)

Modified files:
	chapel/compiler/analysis/: Makefile 
	chapel/compiler/include/: analysis.h ast.h chplalloc.h list.h 
	                          loc.h symscope.h 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/compiler/parser/: chapel.lex 
	chapel/compiler/passes/: pass.h 
	chapel/compiler/vparser/: Makefile Makefile.share 
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

04/11/05 15:40:27 -- jplevyak

Log message:
	Something is amiss with string assignment, the assignment is overwriting
	both a1.s and a2.s even though the code is only referring to a2.s.

Modified files:
	chapel/test/classes/deitz/: test_record_assign1.future 

---------------------------------------------------------------------------

04/11/05 16:45:48 -- deitz

Log message:
	Added an init function to the common module that is called at the
	beginning of the program.  This extends the functionality of the
	common module.
	
	This checkin contains a patch of SymtabTraversal over the Common and
	USER modules so that symbols are not traversed twice, care of Brad.
	
	Set the defaultVal of arrays to zero mostly as a stopgap although this
	is also where we're headed.
	
	Removed "static" from variables that are declared in the common
	module since these are "exported."
	
	Refuturized test_seq6 and test_seq7 until sequence initialization is
	figured out.
	
	Updated flowanalysis ast output to take into account changes to init
	in the common module.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         symtabTraversal.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertVariableInitializations.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/test/classes/deitz/: test_record7.chpl test_record7.good 
	                            test_record8.chpl test_record8.good 
	chapel/test/types/seq/deitz/noanalysis/: test_seq6.future 
	                                         test_seq7.future 

---------------------------------------------------------------------------

04/12/05 09:17:51 -- jplevyak

Log message:
	Added ChainHashMap::del() and ChainHash::del().  These both take the key,
	delete the first matching entry (there should only be one) and then
	return 1 if something was deleted or 0 if nothing matching was found.
	
	Added tests for the above, updated the compiler/test directory to compile
	and to contain the latest source code.

Modified files:
	chapel/compiler/adt/: list.cpp map.cpp 
	chapel/compiler/include/: map.h 
	chapel/compiler/test/: Makefile list.cpp map.cpp misc.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

04/12/05 09:42:38 -- jplevyak

Log message:
	Integrate the compiler/test directory into the build scheme.
	It is now run every time, but only when the component files
	have changed.
	
	It is a good place to put unit tests.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/test/: Makefile 
Removed files:
	chapel/compiler/test/: beautify.cpp files.cpp list.cpp map.cpp 
	                       misc.cpp mysystem.cpp stringutil.cpp 
	                       vec.cpp 

---------------------------------------------------------------------------

04/12/05 09:56:50 -- jplevyak

Log message:
	Fix 2 issues discovered by a non-GC valgrind run.

Modified files:
	chapel/compiler/analysis/: ssu.cpp 
	chapel/compiler/include/: prim.h 

---------------------------------------------------------------------------

04/12/05 11:09:16 -- deitz

Log message:
	Some minor type code cleanup.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: symbol.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: removeDeadSymbols.cpp symtab.cpp 

---------------------------------------------------------------------------

04/12/05 11:12:23 -- bradc

Log message:
	Another bug fix to make nightly Sun regressions go
	quietly.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/12/05 11:23:25 -- bradc

Log message:
	Pulling test back out of top-level Makefile
	for the time being so that make depend will
	work again for those that are stuck on it.
	Will work on putting this back in once I
	catch my breath.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

04/12/05 11:36:37 -- jplevyak

Log message:
	Progress on support for sequences.  Sequences and their operators
	are now understood by analysis.  Got as far as I could (easily) and
	then transfered the .futures to Steve to take a look.  Feel free
	to send them back if you find the problem is mine.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp prim_data.dat 
	chapel/compiler/include/: fa.h type.h 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 
	chapel/test/flowanalysis/newast/: declprintdom.good 
	chapel/test/types/seq/deitz/: test_seq1.future test_seq1a.future 
	                              test_seq1b.future 
	                              test_seq1c.future test_seq2.future 
	                              test_seq3.future test_seq4.future 
	                              test_seq5.future test_seq6.future 
	                              test_seq7.future test_seq8.future 
	                              test_seq8b.future 

---------------------------------------------------------------------------

04/12/05 11:40:03 -- deitz

Log message:
	Added new pass ScopeResolveGotos to decouple label resolution from
	symbol resolution in ScopeResolveSymbols.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
Added files:
	chapel/compiler/traversals/: scopeResolveGotos.cpp 
	                             scopeResolveGotos.h 

---------------------------------------------------------------------------

04/12/05 13:55:39 -- bradc

Log message:
	Updating .cvsignores to ignore .tmp files left
	by the testing system.

Modified files:
	chapel/test/flowanalysis/jplevyak/constants/: .cvsignore 
	chapel/test/flowanalysis/jplevyak/loop/: .cvsignore 

---------------------------------------------------------------------------

04/12/05 14:01:30 -- shannon

Log message:
	Added an error message to the printMemTable function
	reminding the caller that this function must be
	used in conjunction with the --memtable flag.

Modified files:
	chapel/runtime/src/: chplmem.c 
Added files:
	chapel/test/memory/shannon/: printMemTable.chpl 
	                             printMemTable.good 

---------------------------------------------------------------------------

04/12/05 14:13:23 -- shannon

Log message:
	Added error checking for a call to malloc that
	doesn't use the _chpl_malloc wrapper.

Modified files:
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/12/05 14:14:03 -- deitz

Log message:
	Added new method varDefSet() which returns a Vec<VarSymbol*>* to
	DefStmt and DefExpr of all the VarSymbols defined in that statement or
	expression.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 

---------------------------------------------------------------------------

04/12/05 14:17:21 -- deitz

Log message:
	Implemented new scope resolution of symbols to enforce that variables
	are defined before they are used.  Functions, types, and modules do
	not need to be defined before they are used.
	
	For cases like
	
	  var x : integer = 12;
	  ...
	  {
	    ...
	    writeln(x);
	    ...
	    var x : integer = 6;
	
	an error is still flagged.  We can change this later, but this error
	is nice because this code is a little strange.

Modified files:
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 

---------------------------------------------------------------------------

04/12/05 14:21:42 -- deitz

Log message:
	Added two new tests and updated other outputs based on recent semantic
	changes of the def-before-use enforcement rules.
	
	This fixes the regression on
	
	   trivial/deitz/test_var_decl_strange3.good

Modified files:
	chapel/test/functions/jplevyak/: intent-7-error.good 
	chapel/test/trivial/bradc/: defaultinit1a.good vardecls.good 
	chapel/test/trivial/deitz/: test_config_use_before_decl.good 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.good 
Added files:
	chapel/test/trivial/deitz/: test_scope1.chpl test_scope1.good 
	                            test_scope2.chpl test_scope2.good 

---------------------------------------------------------------------------

04/12/05 15:20:51 -- bradc

Log message:
	Adding a simple test of the -h flag that Shannon
	and I worked on together, as well as fodder for
	manageably maintaining other tests that generate
	-h output (work that she will pick up now).

Added files:
	chapel/test/execflags/shannon/: .cvsignore help.chpl 
	                                help.execopts help.good 
	chapel/test/execflags/shannon/configs/: 
	                                        configVarModStrings2.cfghelp 

---------------------------------------------------------------------------

04/12/05 15:20:54 -- deitz

Log message:
	Moved defaultConstructor out of StructuralType and into Type so all
	types now have a defaultVal and a defaultConstructor.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 

---------------------------------------------------------------------------

04/12/05 16:52:19 -- shannon

Log message:
	Added the --memtable flag to the help message, and changed
	the expected output in the help.good file.  I created a
	new test directory, help, which is a subdirectory of
	execflags/shannon/configs, and moved the nine tests that
	use the -h exec option to this directory.  Brad's PREDIFF
	file now autogenerates the .good files for these nine tests
	from a cat of the help.good file and the $testname.cfghelp file
	that contains the individual config var table output for each
	test.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/execflags/shannon/: help.good 
Added files:
	chapel/test/execflags/shannon/configs/help/: .cvsignore PREDIFF 
	                                             configVar-Dash.cfghelp 
	                                             configVar-Dash.chpl 
	                                             configVar-Dash.execopts 
	                                             configVarHelp.cfghelp 
	                                             configVarHelp.chpl 
	                                             configVarHelp.execopts 
	                                             configVarModStrings1.cfghelp 
	                                             configVarModStrings1.chpl 
	                                             configVarModStrings1.execopts 
	                                             configVarModStrings2.cfghelp 
	                                             configVarModStrings2.chpl 
	                                             configVarModStrings2.execopts 
	                                             configVarSetOver.cfghelp 
	                                             configVarSetOver.chpl 
	                                             configVarSetOver.execopts 
	                                             configVarSetTwoTypes.cfghelp 
	                                             configVarSetTwoTypes.chpl 
	                                             configVarSetTwoTypes.execopts 
	                                             configVarTwoModules.cfghelp 
	                                             configVarTwoModules.chpl 
	                                             configVarTwoModules.execopts 
	                                             varNameEnumQM.cfghelp 
	                                             varNameEnumQM.chpl 
	                                             varNameEnumQM.execopts 
	                                             varNameQMark.cfghelp 
	                                             varNameQMark.chpl 
	                                             varNameQMark.execopts 
Removed files:
	chapel/test/execflags/shannon/configs/: configVar-Dash.chpl 
	                                        configVar-Dash.execopts 
	                                        configVar-Dash.good 
	                                        configVarHelp.chpl 
	                                        configVarHelp.execopts 
	                                        configVarHelp.good 
	                                        configVarModStrings1.chpl 
	                                        configVarModStrings1.execopts 
	                                        configVarModStrings1.good 
	                                        configVarModStrings2.cfghelp 
	                                        configVarModStrings2.chpl 
	                                        configVarModStrings2.execopts 
	                                        configVarModStrings2.good 
	                                        configVarSetOver.chpl 
	                                        configVarSetOver.execopts 
	                                        configVarSetOver.good 
	                                        configVarSetTwoTypes.chpl 
	                                        configVarSetTwoTypes.execopts 
	                                        configVarSetTwoTypes.good 
	                                        configVarTwoModules.chpl 
	                                        configVarTwoModules.execopts 
	                                        configVarTwoModules.good 
	                                        varNameEnumQM.chpl 
	                                        varNameEnumQM.execopts 
	                                        varNameEnumQM.good 
	                                        varNameQMark.chpl 
	                                        varNameQMark.execopts 
	                                        varNameQMark.good 

---------------------------------------------------------------------------

04/12/05 17:37:06 -- deitz

Log message:
	Added trivial variable declaration test.

Added files:
	chapel/test/trivial/deitz/: test_var_decl_init4.chpl 
	                            test_var_decl_init4.good 

---------------------------------------------------------------------------

04/12/05 17:42:55 -- deitz

Log message:
	NOTE: This causes two regressions:
	
	  [Error matching compiler output for classes/deitz/test_nested_record1]
	  [Error matching compiler output for classes/deitz/test_nested_record2]
	
	Rewrote variable initialization code.  We now initialize a variable
	only at its declaration point (since there are no more uses before
	defs).
	
	Fixed bugs in the insertion of default value temps for types having to
	do with classes within classes and such.
	
	The ProcessDefs pass is no longer called and is dead.  This pass used
	to insert default variable initializations before analysis using
	VarInitExpr.
	
	Fixed a bug in call_fixup on statements.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertVariableInitializations.cpp 
	                             insertVariableInitializations.h 
	                             processDefs.cpp 

---------------------------------------------------------------------------

04/12/05 17:48:50 -- deitz

Log message:
	Removed ProcessDefs pass as it is no longer necessary.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: processDefs.cpp processDefs.h 

---------------------------------------------------------------------------

04/12/05 18:01:52 -- bradc

Log message:
	Yesterday I built the compiler without GC and ran valgrind,
	which revealed lots of problems.  This checkin fixes those
	problems that previous peoples' checkins haven't already
	addressed.
	
	The vast majority of the problems were use-before-def
	problems that weren't an issue when using GC because it
	zeroes out memory on the user's behalf.  I believe we
	would like to avoid leaning on this feature so that we
	can build without GC and so that we're more able to
	remove our use of GC or switch do a different GC system
	(which may not zero memory) down the road.  This would
	be a good topic for discussion, especially if there's
	disagreement.  Anyway, I'm proposing that people be
	more careful about initializing their class' fields in
	the constructors (if anyone knows of a g++ flag that
	statically checks that class members are initialized,
	I think it'd be reasonable to throw it as a way of
	keeping ourselves honest).
	
	This experiment did catch some actual problems that
	GC must have been masking somehow, and I believe
	that these tests were behind the nondeterministic
	failure of tests this past week or so (which is to
	say, they seemed related to the problems, and I
	haven't seen them failing sincce then, so I'm
	optimistic).
	
	Apparent problem #1: wrapper construction for functions
	       seemed to be accessing vectors out of the range
	       that they were actually storing.  Steve helped
	       me fix these.
	
	Apparent problem #2: an array out-of-bounds problem that
	       John fixed last night or this morning.
	
	Apparent problem #3: the freeing of a pointer that
	       couldn't legally be freed that John fixed with
	       that same checkin.
	
	Apparent problem #4: a structure seems to be used after it
	       was freed in parse.cpp (John, could you check this?
	       I sent mail and marked it with a comment).
	
	The following are things that I added zero/NULL initializers
	for in class constructors.  In some cases I was conservative
	because it was taking too much time to determine whether
	each individual field was or was not defined before it was
	used.  The author of the code may wish to look in these cases
	and decide if they think my zeroing was overly zealous.
	In other cases, I only zeroed those fields that actually
	seemed to trigger problems, though there may be other issues
	lurking just under the surface:
	
	   AVar::is_lvalue
	       ::is_dead
	   BasicSym::*
	   CountQueue::size
	   CreateEntryPoint::entryPoint
	   CreationSet::added_element_var
	   DomainType::idxType
	   Expr::pragmas
	   Fixup::verify
	   ForallExpr::indexScope
	   Fun::sym;
	   LoopNode::parent
	   ParseAST::*
	   PNode::next_callees
	   Scope::in
	   Stmt::parentSymbol
	       ::pragmas
	   Sym::*
	   Symbol::pragmas
	   SymScope::lookupCache
	   Var::is_internal
	      ::is_filtered
	      ::is_formal
	
	Also changed the low-level codegen tests' Makefile.cg
	so that they didn't rely on the compiler being built
	with garbage collection on.
	
	This check-in causes one regression for
	jplevyak/test_coerse2.chpl which is that
	the change to j's initialization in coercion_wrapper
	causes two coercion temps to be created with the
	same name.  Yet Steve says that the test in question
	shouldn't be creating coercion wrappers (and if it
	did, it should presumably create them with
	different names?).  So leaving this regressing as a
	placeholder.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: cfg.cpp fa.cpp fun.cpp loop.cpp 
	                           pnode.cpp sym.cpp 
	chapel/compiler/include/: list.h sym.h var.h 
	chapel/compiler/passes/: createEntryPoint.cpp createEntryPoint.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/test/: .cvsignore 
	chapel/compiler/traversals/: fixup.cpp 
	chapel/compiler/vparser/: parse.cpp parse_ast.cpp scope.h 
	chapel/test/dispatch/jplevyak/: Makefile.cg 
	chapel/test/lowlevelcg/jplevyak/: Makefile.cg 

---------------------------------------------------------------------------

04/12/05 18:07:32 -- bradc

Log message:
	Added some new variations of a test whose intent changed
	when the use-before-def semantics changed today.

Added files:
	chapel/test/trivial/bradc/: vardecls1a.chpl vardecls1a.good 
	                            vardecls1b.chpl vardecls1b.good 

---------------------------------------------------------------------------

04/12/05 18:48:35 -- jplevyak

Log message:
	Fix free to be after the last potential use of the variable.

Modified files:
	chapel/compiler/vparser/: parse.cpp 

---------------------------------------------------------------------------

04/13/05 06:30:01 -- shannon

Log message:
	Added an error message in the event --memthreshold is
	used without also using the --memtrace option.  Also
	modified a prior error message and its corresponding
	test output.

Modified files:
	chapel/runtime/src/: chplmem.c 
	chapel/test/memory/shannon/: printMemTable.good 
Added files:
	chapel/test/memory/shannon/: thresholdWithoutTrace.chpl 
	                             thresholdWithoutTrace.execopts 
	                             thresholdWithoutTrace.good 

---------------------------------------------------------------------------

04/13/05 09:02:49 -- deitz

Log message:
	Fixed the building of constructors to use the defaultConstructor if
	the defaultVal doesn't exist.  This fixes the test_nested_record
	regressions.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/13/05 10:33:37 -- bradc

Log message:
	Fixed a minor script incompatability
	which was responsible for the Sun
	nightlies seeming to have a dozen
	or so fewer tests than Linux.
	Tomorrow's run should be more accurate
	as a result.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

04/13/05 11:03:37 -- deitz

Log message:
	Removed futures for noanalysis test_seq6 and test_seq7.

Removed files:
	chapel/test/types/seq/deitz/noanalysis/: test_seq6.future 
	                                         test_seq7.future 

---------------------------------------------------------------------------

04/13/05 11:32:35 -- jplevyak

Log message:
	Cleanup of VarDefExpr handling.
	Fixed bugs with tuples and mixed primitive handling.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/test/flowanalysis/newast/: declprintdom.good 
	                                  declprintdom2.good domarr.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

04/13/05 11:42:31 -- bradc

Log message:
	Improved logic to decide whether or not the
	makeplot step should be run in the nightly
	run.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/13/05 14:12:06 -- deitz

Log message:
	Made Expr::typeInfo calls work before analysis, though very
	conservatively.
	
	As a result of this change, I updated the output to
	  test/flowanalysis/newast/pareninit.good
	John, can you make sure this is okay.  It almost looks like integer is
	known now.
	
	Started building replaceExpr functions to replace children pointers of
	expressions.  These are currently not used but should eventually help
	replace the "Expr** back" pointer to a pointer.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/test/flowanalysis/newast/: pareninit.good 

---------------------------------------------------------------------------

04/13/05 14:45:17 -- jplevyak

Log message:
	Use Expr::typeInfo() to remove unnecessary coercions from the IF1 code.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/13/05 14:46:49 -- jplevyak

Log message:
	Remove unnecessary coersions (and the resulting type information)

Modified files:
	chapel/test/flowanalysis/newast/: assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  codegen_test.good 
	                                  danglingelse.good 
	                                  logical_not.good 
	                                  unary_plusMinus.good 
	                                  whileLoop.good 

---------------------------------------------------------------------------

04/13/05 15:32:56 -- deitz

Log message:
	Added Stmt* parent to Stmt so statements like expressions now have a
	pointer to their parent statement.  This is set in Fixup and verified
	in Fixup-verify.
	
	Reenabled verification of Symbol::parentScope in Fixup::verify.  This
	was turned off in getting the getters in, but is now special cased for
	getters (since getters are not in a scope and can thus not be looked
	up).
	
	Fixed call_fixup on expressions to deal with the statement's parent.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: fixup.cpp fixup.h 

---------------------------------------------------------------------------

04/13/05 15:59:04 -- deitz

Log message:
	Renamed Stmt::parent to Stmt::parentStmt.  This seems more descriptive
	and is in keeping with Stmt::parentSymbol which is the pointer to the
	symbol that the statement came from.
	
	I'm thinking of renaming Expr::parent to Expr::parentExpr and
	Expr::stmt to Expr::parentStmt as these seem more descriptive and more
	in keepign with the statement naming scheme.  Any objections?

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: fixup.cpp 

---------------------------------------------------------------------------

04/13/05 16:05:06 -- jplevyak

Log message:
	tuple and record assignment now work with anything that responds to
	the indexing/getter methods.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/13/05 16:36:17 -- jplevyak

Log message:
	Update several .future files and remove a duplicate \n from the end of
	warnings/errors.
	
	In particular, change a .future to note:
	
	The problem is that Tuple is a class,
	not a TupleType.  In order to make the change
	we need to be able to create methods on TupleType's
	so that the tuple indexing function can be built
	in internal_prelude.chpl.   Alternatively, tuple
	indexing could be auto-built along with the other
	setters, getters.

Modified files:
	chapel/compiler/util/: misc.cpp 
	chapel/test/arrays/deitz/: test_array_basic2.future 
	chapel/test/classes/bradc/: weirdinit.good 
	chapel/test/classes/deitz/: test_bad_function_noparens.good 
	chapel/test/compflags/bradc/twomodulesnomain/: module1.good 
	chapel/test/functions/jplevyak/: equal-8.future equal-9.chpl 
	                                 equal-9.future 
	                                 intent-5-error.good 
	                                 intent-7-error.good 
	chapel/test/modules/bradc/: nestedmodule.good 
	chapel/test/modules/bradc/manymodules/: manymodules.good 
	chapel/test/trivial/bradc/: defaultinit1a.good redefinevar.good 
	                            vardecls.good vardecls1a.good 
	chapel/test/trivial/bradc/entrypoint/: twomains.good 
	chapel/test/trivial/deitz/: test_config_use_before_decl.good 
	                            test_scope2.good 
	                            test_var_decl_strange1.good 
	                            test_var_decl_strange2.good 
	                            test_var_decl_strange3.good 
	                            test_var_decl_strange4.good 
	chapel/test/trivial/roxana/: test_param_decl2.good 
	                             test_param_decl3.good 
	chapel/test/types/enum/deitz/: test_enum6.good 

---------------------------------------------------------------------------

04/13/05 16:47:57 -- bradc

Log message:
	Added some hooks to make nightly work on
	cygwin and to work the first time it's
	run without complaints.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/13/05 18:55:51 -- bradc

Log message:
	Added *.tmp to another .cvsignore file in the
	testing directory.
	
	Reminder (because we all do it, including me):
	whenever you create a new directory in the
	testing system, add a .cvsignore file with *.tmp
	in it so that cvs -nq update stays quiet for
	those of us who depend on it like a security
	blanket).

Modified files:
	chapel/test/memory/shannon/: .cvsignore 

---------------------------------------------------------------------------

04/14/05 11:34:52 -- deitz

Log message:
	Renamed Expr::parent to Expr::parentExpr to better say that this is
	the parent of this expression and it is an Expr.  Renamed Expr::stmt
	to Expr::parentStmt to better say that this is the parent of this
	expression and it is a Stmt.
	
	Improved Fixup and added a new test (currently commented out) to make
	sure that the parentStmt of a parentExpr of an Expr is the same as the
	parentStmt of that Expr.  Also added a new test (currently commented
	out) to make sure that the parentSymbol of the parentStmt of a Stmt is
	the same as the parentSymbol of that Stmt.  These fail but motivate me
	to fixup the __init function once and for all.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         removeDeadSymbols.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertTemps.cpp 
	                             insertUnionChecks.cpp 
	                             methodsToFunctions.cpp 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             resolveOverloadedOperators.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

04/14/05 14:07:20 -- bradc

Log message:
	Touched up the Makefile in the unit test directory
	(compiler/test) to more closely follow our current
	Makefile organization and work better overall
	(improved making from a clean build -- in particular
	one with no $PLATFORM subdirectory -- make depend,
	etc.)
	
	The one ugliness here is that I had to pull out the
	VPATH variable because it was finding the $PLATFORM
	subdirectory elsewhere and not creating a new one
	for this directory.  The result is that the origin
	of the .test.cpp files has to be given more
	explicitly.
	
	Re-enabled the building of the unit test directory
	from the top-level compiler directory with every
	compile.
	
	Am tempted to rename this directory unittest or
	something like that because I always cd into it
	accidentally when I want to go to the regression
	test directory.  Thoughts?

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	chapel/compiler/test/: Makefile 

---------------------------------------------------------------------------

04/14/05 14:37:43 -- jplevyak

Log message:
	Disable GC_VALGRIND_SUPPORT when doing x86_64 compiles.

Modified files:
	chapel/third-party/boehmgc/gc6.3/: configure 

---------------------------------------------------------------------------

04/14/05 15:42:44 -- deitz

Log message:
	The major change of interest to anyone in this checkin is as follows:
	
	Previously Expr::parentStmt (Expr::stmt a little longer ago) was set
	for every expression.  This is no longer the case and doesn't really
	make sense.  For example, the domain expression in the ArrayType and
	the init expression in the Symbol had its parentStmt set even though
	its parent is a symbol/type.  HOWEVER, because some code relied on
	getting its parentStmt (which happened to be the DefStmt of the symbol
	or type), I've added a new function Expr::getStmt() that gets this
	statement.
	
	Now Expr::parentSymbol ***new*** and Stmt::parentSymbol are guaranteed
	to be set.  These are a TypeSymbol for a StructuralType, a FnSymbol,
	or a ModuleSymbol.
	
	---------
	
	Added Expr::parentSymbol because some expressions are in symbols or
	types.  This is set and maintained by Fixup.
	
	Dramatically cleaned call_fixup.  You've got to see this code to
	appreciate this change, though the old code was embarassing to me so
	there is no need to go and appreciate it.  The new call_fixup calls
	fixup on the parentExpr, parentStmt, or parentSymbol of an Expr or
	parentStmt or parentSymbol of a Stmt whichever is set first.  This is
	useful for replace, insertBefore, and insertAfter which can use this
	function to Fixup what was just replaced or inserted next to.  Added
	functions fixup_expr, fixup_stmt, and fixup_symbol to be used on
	Exprs, Stmts, and Symbols already in the AST whose subASTS have been
	modified.
	
	Enabled Fixup testing of all parents as well as parents of parents.
	
	Fixed a shocking bug in MethodsToFunctions that Fixup is now catching
	in which the MemberAccess was replaced with a FnCall rather than the
	ParenOpExpr.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp fixup.h insertTemps.cpp 
	                             methodsToFunctions.cpp 
	                             processParameters.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

04/14/05 15:45:56 -- jplevyak

Log message:
	Patch for the coerce2 test.
	
	Note: this is not a fix for the underlying problem but an efficiency
	at a higher level.
	
	There was an issue that the coersion wrappers were being calculated before
	it was determined if the function was actually subsumed by another (more
	precise) function.
	
	In this test, in the first analysis pass, there will still be a wrapper
	built for foo(float, int) even though this doesn't occur in the program.
	The reason for this is that operator = is now overloaded, and the
	i and f variables are neither declared to have a type nor are they
	initialized in the definition, so they are of unknown type.  The
	overloaded = operator is first shared by the two calls which causes
	the types of i and f to be confused.  Their actual types are determined
	in the next pass, but not before the coercion wrapper for the impossible
	case is created.
	
	(probably more information than you wanted to know)
	
	However, there is still likely a problem in the code which creates
	the wrappers since I didn't change anything other than to avoid
	additional, correct but unnecessary, wrapper creations.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 

---------------------------------------------------------------------------

04/14/05 15:49:23 -- jplevyak

Log message:
	Fix misspelling

Added files:
	chapel/test/types/type_variables/jplevyak/: test_coerce1.chpl 
	                                            test_coerce1.good 
	                                            test_coerce2.chpl 
	                                            test_coerce2.good 
Removed files:
	chapel/test/types/type_variables/jplevyak/: test_coerse1.chpl 
	                                            test_coerse1.good 
	                                            test_coerse2.chpl 
	                                            test_coerse2.good 

---------------------------------------------------------------------------

04/14/05 15:51:02 -- jplevyak

Log message:
	Fixes for compilation on x86_64.
	
	Note, if you want to cast a pointer to an integer it is best to use
	
	#include <stdint.h>
	int x = (int)(intptr_t)p;  // where p is your pointer
	
	to avoid all the warnings.
	
	If you are printing out a pointer %p works.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/vparser/: parse_ast.cpp 
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/14/05 15:55:57 -- jplevyak

Log message:
	More x86_64 fixes... should be a clean build now.

Modified files:
	chapel/compiler/adt/: vec.cpp 

---------------------------------------------------------------------------

04/14/05 17:25:44 -- deitz

Log message:
	NOTE: [Error matching compiler output for classes/deitz/test_type_in_class1]
	
	Cleaned up FnSymbol::copy and DefExpr::copy.
	
	Fixed a bug related to
	
	  #define NO_RESOLVE_CONSTRUCTOR
	
	in which not all constructors (cloned) were generated.
	
	I've now removed this #define.  There is one regression:
	
	  [Error matching compiler output for classes/deitz/test_type_in_class1]
	
	John, could you take a look at this.
	
	By removing this #define, constructors are no longer resolved before
	analysis allowing wrappers and cloning of functions to occur.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertWriteFns.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

04/14/05 17:26:39 -- jplevyak

Log message:
	Change the analysis log so that it doesn't include
	such redunant information as that functions
	are functions and types are types.  This
	should prevent some of the more random
	differences which result from small changes to
	the AST and/or IF1 translation.

Modified files:
	chapel/compiler/analysis/: clone.cpp 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

04/14/05 17:36:51 -- bradc

Log message:
	Made the runtime build an etags TAGS file for
	the runtime directory whenever the runtime
	library is rebuilt.  This gets placed in the
	runtime/ directory.

Modified files:
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

04/14/05 17:38:01 -- bradc

Log message:
	Improved typeInfo() for BinOp Exprs in order
	to fix the like-1.chpl test.  Also cleaned up
	the logic of insertElidedLoops so that it
	didn't try to store state across subexpressions
	but rather looks only at the local expression.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/14/05 17:45:53 -- bradc

Log message:
	My last checkin contained a change to nightly that
	wasn't quite ready for primetime yet.  This one is
	better, thanks to John's suggestion.
	
	Added the ability to set a new environment variable:
	
	        CHPL_NIGHTLY_DEBUG_EMAIL
	
	which specifies an email address to which the results
	of a -debug run of the nightly script should be sent.
	If the variable is unset, it will be sent to
	$username@cray.com where $username is the login id of
	the person running the script.  Thus, Cray users
	should not need to set this environment variable, but
	remote users will need to.
	
	When run in -cron mode (which should typically only be
	done by cron scripts), the mail will be sent to chpl_dev.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/14/05 18:30:16 -- bradc

Log message:
	Cleaned up the building of the coercion function
	wrappers to use the Map<> that's passed in more
	appropriately, to avoid an extra loop of iteration,
	and to eliminate a handful of unnecessary variables.
	The other wrapper creation functions could probably
	benefit from similar rewrites.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/14/05 18:33:00 -- bradc

Log message:
	Was trying to create a test that showed how
	our use of C record assignment was problematic,
	but wasn't successful.  Thought these were
	interesting tests nonetheless.  One uses
	sequences, and is therefore a future.

Added files:
	chapel/test/classes/bradc/records/: .cvsignore assignRecord.chpl 
	                                    assignRecord.good 
	                                    assignRecord2.chpl 
	                                    assignRecord2.future 
	                                    assignRecord2.good 

---------------------------------------------------------------------------

04/15/05 09:37:53 -- jplevyak

Log message:
	Add test to see if call_info() is called with code not
	in a function (unexecutable code) and return.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/15/05 10:36:31 -- deitz

Log message:
	Changed VarInitExpr to contain a Symbol rather than an Expr.  This
	makes more sense since this expression is a placeholder for either the
	Symbol's Type's defaultVal expression or a FnCall of the Symbol's
	Type's defaultConstructor if there was no defaultVal.
	
	Reworked the creation of the constructor body to be more inline with
	our new take on how it should be done.  The following #defines should
	be used:
	
	type.cpp:
	//#define CONSTRUCTOR_WITH_PARAMETERS
	//#define USE_VAR_INIT_EXPR
	
	buildClassConstructors.cpp:
	//#define CONSTRUCTOR_WITH_PARAMETERS

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             removeNamedParameters.cpp 

---------------------------------------------------------------------------

04/15/05 11:12:26 -- jplevyak

Log message:
	USE_VAR_INIT_EXPR is now defined with no regressions.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

04/15/05 12:19:08 -- bradc

Log message:
	Changing nightly script to set $platform to
	linux64 if running on a 64-bit linux machine
	so that we can more easily distinguish
	between John's nightly linux runs and ours.
	
	Also, disabled the caching of UW source
	trees unless it's my linux cron job.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/15/05 12:20:04 -- deitz

Log message:
	Reworked the TupleType constructor to get it more inline with the
	RecordType constructor so that I can make TupleType subclass
	RecordType.  The change basically makes it no longer accept one type.
	All the types are added in the addType method now.
	
	This required some changes to IndexType.  I added code to set up its
	and its tuple's defaultVal because this wasn't being done.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

04/15/05 14:10:02 -- bradc

Log message:
	Swapped John's #inclusion of stdint.h for
	inttypes.h, as our Suns don't yet support
	stdint.h.  This should fix the broken Sun
	build from last night's regressions.

Modified files:
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/15/05 15:18:54 -- deitz

Log message:
	Added replaceChild routines to Exprs and Stmts eventually to replace
	use of Back.
	
	These should remain unused for the time being as I still need to add
	them to Symbols and Types.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 

---------------------------------------------------------------------------

04/15/05 15:30:20 -- jplevyak

Log message:
	Add a primitive to permit setting of individual tuple elements.
	Use the primitive to implement a setter for tuples analogous
	to the way array elements are set.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp if1.cpp 
	                           prim_data.dat 
	chapel/compiler/include/: builtin_symbols.h code.h fa.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/vparser/: prelude.v 
	chapel/test/flowanalysis/newast/: declprintdom.good 
	                                  declprintdom2.good domarr.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/15/05 16:01:37 -- bradc

Log message:
	Starting the process to make a GC-less build of
	Chapel using the Makefiles.  Added logic so that
	if "make nogc" is executed in the top-level,
	third-party, or third-party/dparser directories,
	dparser will be built without GC.  Put in some
	clever logic so that the dparser/d directory will
	only be cleaned out when the builder switches from
	gc- to no-gc and back again.

Modified files:
	./: Makefile 
	chapel/third-party/: Makefile 
	chapel/third-party/dparser/: .cvsignore Makefile 

---------------------------------------------------------------------------

04/15/05 16:07:36 -- bradc

Log message:
	Oops, forgot some very basic ignoring of error codes
	for the first time the third-party Makefiles are run.

Modified files:
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/15/05 16:29:16 -- jplevyak

Log message:
	My bits of the fix for Steve's code to use a constructor for
	strings.  Basically slightly more generalization of the
	VarDefExpr code.   Still has kludges in for Tuples and Arrays.

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp 

---------------------------------------------------------------------------

04/15/05 16:31:54 -- jplevyak

Log message:
	Steve's bit of the string constructor code changes.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: processParameters.cpp 

---------------------------------------------------------------------------

04/15/05 16:37:07 -- bradc

Log message:
	Some changes to the nightly script to get it
	working cleanly on cygwin.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/15/05 16:43:05 -- deitz

Log message:
	Runtime change with string constructor change.

Modified files:
	chapel/runtime/include/: chpltypes.h 

---------------------------------------------------------------------------

04/18/05 10:38:22 -- jplevyak

Log message:
	Fixed an issue in low level code generation with tuple indexing.
	Updated some .future files related to tuples.

Modified files:
	chapel/compiler/analysis/: cg.cpp 
	chapel/test/types/tuple/deitz/: test_tuple_simple3.future 
	                                test_tuple_simple4.future 
	                                test_tuple_simple5.future 
	                                test_tuple_simple6.future 
	                                test_tuple_simple7.future 

---------------------------------------------------------------------------

04/18/05 11:19:53 -- deitz

Log message:
	Added runtime flag checkAnalysisTypeinfo to set compiler variable of
	the same name.  This replaces the ANALYSIS_MATCH #define and checks to
	make sure that return_type_info and type_info are working.
	
	Rewrote FindUnknownTypes traversal as a symtab traversal called
	ResolveTypes.  This now runs before ResolveSymbols replacing duplicate
	code.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: findUnknownTypes.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

04/18/05 11:23:50 -- deitz

Log message:
	Forgot to add these with last commit.

Added files:
	chapel/compiler/symtab/: resolveTypes.cpp resolveTypes.h 

---------------------------------------------------------------------------

04/18/05 11:26:36 -- jplevyak

Log message:
	regressions file listing why things are regressing.

Added files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/18/05 13:22:33 -- bradc

Log message:
	Updated the REGRESSIONS file to list regressions currently
	found on non-linux platforms.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/18/05 13:31:04 -- bradc

Log message:
	Oops -- Steve points out that I had accidentally
	repeated some of the tests that John had already
	covered.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/18/05 13:36:44 -- bradc

Log message:
	Updated compiler's Makefiles so that a version of
	the compiler could be made without using the BoehmGC
	package.  This is done using the "make nogc" option
	from any of the chapel/ compiler/ or compiler/*
	subdirectories.
	
	Building in this mode creates object files of the form
	$(PLATFORM)/expr.nogc.o, so it should be possible to
	switch between gc and no-gc builds without doing any
	cleaning steps in-between.  The compiler that's
	produced in this compilation mode is currently called
	chpl-nogc.
	
	Next step in this effort is to make the testing system
	when run with valgrind use the chpl-nogc compiler by
	default.

Modified files:
	./: Makefile 
	chapel/compiler/: .cvsignore Makefile 
	chapel/compiler/AST/: Makefile.share 
	chapel/compiler/adt/: Makefile.share 
	chapel/compiler/analysis/: Makefile.share 
	chapel/compiler/backend/: Makefile.share 
	chapel/compiler/main/: Makefile.share 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: Makefile Makefile.share 
	chapel/compiler/passes/: Makefile.share 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
	chapel/compiler/util/: Makefile.share 
	chapel/compiler/vparser/: Makefile.share 

---------------------------------------------------------------------------

04/18/05 13:39:45 -- deitz

Log message:
	Cleaned ResolveSymbols traversal.  Greatly improved its logic.
	
	Removed running of MethodsToFunctions since this is now done in
	ResolveSymbols.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: resolveSymbols.cpp resolveSymbols.h 

---------------------------------------------------------------------------

04/18/05 13:50:22 -- deitz

Log message:
	Removed MethodsToFunctions traversal since it is no longer necessary.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Removed files:
	chapel/compiler/traversals/: methodsToFunctions.cpp 
	                             methodsToFunctions.h 

---------------------------------------------------------------------------

04/18/05 14:10:00 -- bradc

Log message:
	To improve portability of the nightly script for BSD,
	added the ability to specify the base "tmp" directory
	that the nightly script should run in via the variables
	CHPL_NIGHTLY_TMPDIR or TMPDIR (the former overrides the
	second, and /tmp is used if neither is specified, as it
	is currently), and to specify the "make" utility to run
	via CHPL_NIGHTLY_MAKE or MAKE ("make" is used if neither
	is specified, as it is currently).
	
	John, let me know if this works, or if you find other
	problems.
	
	Also, removed a hack that I'd inserted due to an
	environment problem I was having on cygwin with cron
	jobs.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/18/05 14:22:21 -- deitz

Log message:
	Added replaceChild routines to Symbols and Types.  I also rewrote
	Expr::replace to use the replaceChild routines instead of the back
	pointer.  It still maintains the back pointer but this indicates that
	it can be removed.
	
	Added a stopgap EMPTY_TUPLE_STOPGAP to DestructureTupleAssignments.
	It seems that IndexTypes don't have defaultVal set correctly so that
	the InsertVariableInitializations is putting in a non-sensical
	assignment statement.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 

---------------------------------------------------------------------------

04/18/05 15:08:02 -- deitz

Log message:
	Fixed regression for test_class_list1 by specialcasing the copying of
	getters so that they are not added to the Symboltable and so that they
	pass on their getter information.  Unfortunately for cloning classes,
	the getter points to the old field, not the new one.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/18/05 15:10:01 -- deitz

Log message:
	Updated regressions info.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/18/05 15:37:32 -- shannon

Log message:
	Refactored the printing of the output of the
	memory table, as well as modified the output itself.
	
	Added a test and updated the output of a couple others.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: chplmem_tests.h 
	chapel/runtime/src/: chplmem.c chplmem_tests.c 
	chapel/test/: sub_test 
	chapel/test/memory/shannon/: freedMalloc.good printMemTable.chpl 
	                             printMemTable.good 
	                             reallocZeroSize.good 
Added files:
	chapel/test/memory/shannon/: memtableFlag.chpl memtableFlag.good 
	                             printMemTable.execopts 

---------------------------------------------------------------------------

04/18/05 15:45:48 -- bradc

Log message:
	Predicated execution of ebrowse on its existence to
	protect BSD and other platforms that don't have it
	available.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

04/18/05 15:56:00 -- bradc

Log message:
	Modified the test system so that when it is run with
	the -valgrind option, it will use the chpl-nogc
	executable (built by the make nogc command) rather
	than the normal compiler, since this seems to be the
	more useful execution of valgrind and is what we'll
	start doing in the nightly tests soon.  The
	suppressions are no longer applied to the valgrind
	runs on the compiler either.
	
	This can be overridden using the -compiler option.
	However, note that if using valgrind with the normal
	chapel compiler, you'll now have to specify the
	suppressions using the CHPL_VALGRIND_OPTS environment
	variable.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/18/05 15:56:47 -- bradc

Log message:
	Added another missing initialization that valgrind caught.

Modified files:
	chapel/compiler/include/: var.h 

---------------------------------------------------------------------------

04/18/05 15:57:58 -- bradc

Log message:
	Oops, just noticed that I forgot to use the
	$make variable that I inserted into the nightly
	test to make BSD work better.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/18/05 17:07:51 -- deitz

Log message:
	Rewrote Expr:: and Stmt:: replace, insertBefore, insertAfter, append,
	and extract to use the new replaceChild function rather than the back
	pointer to the pointer.
	
	Fixed a bug in RemoveDeadSymbols in which an entire function would be
	removed if any formal parameter was flagged as dead.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 

---------------------------------------------------------------------------

04/18/05 17:08:40 -- bradc

Log message:
	Updated the nightly script so that if it's run in valgrind
	mode, it will build the no-GC version of the compiler in
	order to run valgrind on it.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/18/05 17:24:48 -- bradc

Log message:
	Added a new flag -valgrindexe that causes the test system
	to run valgrind on the generated executable but not on the
	compiler itself.  This is designed to help people who are
	developing the runtime valgrind their code without building
	a -nogc version of the compiler.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/18/05 19:01:35 -- jplevyak

Log message:
	Fix Linux64 compilation with another format warning->error.

Modified files:
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/19/05 09:39:44 -- deitz

Log message:
	Ding, Dong!  Expr** Expr::back and Stmt** Stmt::back are dead!
	
	Removed the SET_BACK macro and all references to back.
	
	Summary. There were major disadvantages to using "back" for replacing
	child expressions and statements in the AST. This pointer to a pointer
	was in every Expr and Stmt and pointed to the Expr* or Stmt* pointer
	that pointed to the Expr or Stmt that it was in.  This allowed us to
	easily update this pointer.
	
	Major disadvantages to "back" scheme:
	
	1. It didn't allow us to define pointers to subclasses of Expr or Stmt
	   in the code.  For example, defExprList in DefStmt had to be an
	   Expr* even though it was always a DefExpr*.  This was the major
	   disadvantage.
	
	2. It led to gratuitously obfuscated code like "if (*expr->back =="
	   that should have been written "if (expr ==."
	
	3. It led to clever code for implementing replace, insertBefore, and
	   extract which are now much simpler.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

04/19/05 10:07:55 -- deitz

Log message:
	Renamed defExprList in DefStmt to defExprls and made it a DefExpr*.
	It was previously an Expr*.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

04/19/05 10:20:30 -- deitz

Log message:
	Changed the type of symDefs in LetExpr to DefExpr* from Expr*.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/traversals/: transformLetExprs.cpp 

---------------------------------------------------------------------------

04/19/05 10:33:11 -- bradc

Log message:
	Cleaned up the cvs checkout of sources in the nightly
	script to make it assume less about who expands which
	variables (perl or the shell).  This should make it
	work on BSD without problems.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/19/05 12:48:51 -- deitz

Log message:
	Futurized tuple regressions since they are not working for the same
	reason that the other tuple tests are not working.  They had been
	sneaking by for a little.

Added files:
	chapel/test/types/tuple/bradc/: writeTuple.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 

---------------------------------------------------------------------------

04/19/05 12:59:22 -- bradc

Log message:
	Changed a use of $cwd to pwd in order to
	support logfile specifications that use
	Windows-style // directory names to
	refer to cross-mounted directories.
	This allows cygwin's testing to write
	its logs to our unix disks.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

04/19/05 13:10:11 -- jplevyak

Log message:
	Improve support for index types by building special purpose
	operator= functions for assigning from and assigning to IndexTypes
	things of the index type.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/test/flowanalysis/newast/: declprintdom2.good domarr.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/19/05 13:40:06 -- jplevyak

Log message:
	Fix SEGV in cloning.

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

04/19/05 13:43:06 -- jplevyak

Log message:
	Fixed SEGV, now fails in copyType()

Modified files:
	chapel/test/classes/bradc/records/: assignRecord2.future 

---------------------------------------------------------------------------

04/19/05 13:50:20 -- deitz

Log message:
	Reworked TupleType to be a subclass of Structural Type.  It is now
	treated very similarly to records.  When a type is added to TupleType
	using the addType procedure, a field named _field# is added to the
	structural type.
	
	TupleTypes have accessors and constructors now.  There is no longer a
	->defaultVal associated with TupleTypes as initialization is now done
	with a defaultConstructor much like with RecordType.
	
	I put in code to print out the old TupleType IO for IndexTypes as a
	stopgap until IndexTypes use fully-defined tuples, TupleTypes with
	symbols so they can be codegened and have constructors, etc.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: insertWriteFns.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             destructureTupleAssignments.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertVariableInitializations.cpp 
	                             specializeParenOpExprs.cpp 
	chapel/test/flowanalysis/newast/: declprintdom2.good domarr.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/19/05 14:26:44 -- jplevyak

Log message:
	"class Tuple" is now "record Tuple" sincce Tuples have value semantics.
	The overloaded = on Index now assigns to and from integers only.
	
	We are going to have to build special versions of overloaded =
	for Index types which have an idxType which is a Tuple (as we
	have for tuples).  We are also going have to add either accessors
	for the "fieldN" accessors to Index types which are of Tuples or
	switch the Tuple = function to use numeric indexing functions.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

04/19/05 15:27:49 -- deitz

Log message:
	Added a new static function to TypeSymbol
	
	  TypeSymbol*
	  TypeSymbol::lookupOrDefineTupleTypeSymbol(Vec<Type*>* components)
	
	that either finds an existing tuple with the components passed or
	creates one.  This will currently only work on tuples of primitive
	types because the new tuple is created in _CommonModule.
	
	This function is used in InsertAnonymousTypes when inserting anonymous
	tuple types and is intended to be used by analysis to create new tuple
	types on the fly.
	
	This function builds all the standard tuple methods, like the
	constructor, when it is called.
	
	Modified BuildClassConstructorsEtc not to build the default structural
	type methods if they have already been built, since they have for
	tuples now.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildClassConstructorsEtc.h 
	                             insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

04/20/05 10:37:39 -- jplevyak

Log message:
	Add interm "field1" "set_field1" to class Tuple in internal_prelude
	which map to tuple indexing.
	function = on structural types now returns the RHS when analysis is
	enabled.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/20/05 10:45:28 -- deitz

Log message:
	Change seq output, e.g., from "1 2 3" to "(/1, 2, 3/)" for (/1,2,3/).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/test/types/seq/deitz/: test_seq1.good test_seq1a.good 
	                              test_seq1b.good test_seq1c.good 
	                              test_seq2.good test_seq3.good 
	                              test_seq4.good test_seq5.good 
	                              test_seq6.good test_seq7.good 
	                              test_seq8.good test_seq8b.good 
	chapel/test/types/seq/deitz/noanalysis/: test_seq1.good 
	                                         test_seq1a.good 
	                                         test_seq1b.good 
	                                         test_seq1c.good 
	                                         test_seq2.good 
	                                         test_seq3.good 
	                                         test_seq4.good 
	                                         test_seq5.good 
	                                         test_seq6.good 
	                                         test_seq7.good 
	                                         test_seq8.good 
	                                         test_seq8b.good 

---------------------------------------------------------------------------

04/20/05 10:49:56 -- shannon

Log message:
	Added the --help option and updated the
	--help output.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/execflags/shannon/: help.good 

---------------------------------------------------------------------------

04/20/05 10:50:07 -- deitz

Log message:
	Added a --noanalysis-working array of sequences test.

Added files:
	chapel/test/types/seq/deitz/noanalysis/: test_array_of_seq1.chpl 
	                                         test_array_of_seq1.good 

---------------------------------------------------------------------------

04/20/05 10:53:21 -- bradc

Log message:
	Fixed an uninitialized member problem that resulted
	in last night's three linux-valgrind regressions --
	IndexType::domainType was not initialized in one of
	the two constructors.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/20/05 11:21:01 -- shannon

Log message:
	Hopefully fixed the test that was failing on the
	linux64 platform by increasing the memthreshold
	value to filter out the config var table entry
	that was causing the discrepancy in the output.
	
	Added the global match for the substitution
	of the memory address.

Modified files:
	chapel/test/memory/shannon/: PREDIFF configVarFile.chpl 
	                             configVarFile.execopts 
	                             configVarFile.good 
	                             configVarFile.input 

---------------------------------------------------------------------------

04/20/05 11:31:48 -- deitz

Log message:
	Added new Stmt like a WithStmt called a UseStmt that deals with use
	statements of modules.
	
	Reworked WithStmt to be a subclass of ExprStmt and share code.
	UseStmt is also a subclass of ExprStmt.
	
	Added parsing support for UseStmts.  They fail at codegen time.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 

---------------------------------------------------------------------------

04/20/05 12:16:17 -- deitz

Log message:
	Fixed a bug in the new replaceChild facility in which a function
	argument's default initialization expression could not be replaced.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/20/05 12:34:17 -- deitz

Log message:
	Replaced
	
	  #define CONSTRUCTOR_WITH_PARAMETERS
	
	with compiler flag --useNewConstructor to set global variable
	useNewConstructor.
	
	Added a copy of test_class3 that uses the named parameters to the
	constructor and is tested with this flag to make sure that keeps
	working.
	
	Made a superficial change to the parser that will eventually help
	allow declarations of the form
	
	  var (i, j) = tuple;
	
	though the implementation still needs to be done.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/classes/deitz/: test_class3.good 
Added files:
	chapel/test/classes/deitz/: 
	                            test_class3_useNewConstructor_stopgap.chpl 
	                            test_class3_useNewConstructor_stopgap.compopts 
	                            test_class3_useNewConstructor_stopgap.good 

---------------------------------------------------------------------------

04/20/05 12:43:43 -- bradc

Log message:
	Updated REGRESSIONS file a bit to reflect last
	night's changes.  Fixed version test for use
	with -valgrind/chpl-nogc.  The testing system
	now passes the commpiler as a third argument
	to any PREDIFF/PREEXEC scripts, for those rare
	cases that need it.

Modified files:
	chapel/test/: REGRESSIONS start_test sub_test 
	chapel/test/compflags/bradc/noexec/: version.goodstart 
	                                     version.prediff 

---------------------------------------------------------------------------

04/20/05 12:45:48 -- bradc

Log message:
	Fixed a problem with using the CHPLDEVTMP environment
	variable to store the dparser output that crept in
	the other day.

Modified files:
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/20/05 16:10:30 -- jplevyak

Log message:
	Generate the IF1 into the DefExpr instead of the DefStmt
	so that constructors can be looked up on the DefExpr.
	
	One problem with this is that
	
	var x : foo = y;
	
	involves both a constructor and an overloaded = which is
	going to have call_info as well.
	
	We might neecd a new call.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/20/05 16:33:08 -- deitz

Log message:
	Corrected bugs in the coercion and default parameter wrapper code.
	
	Added a new test_coerce test that would have caught the bug and added
	a copy of test_class1 that uses the --useNewConstructor flag to keep
	it from regressing again with this flag on.
	
	Updated regressions.  John can you take a look at a couple of these.
	The default wrapper function looks like it is being called on the set
	accessor.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/test/: REGRESSIONS 
Added files:
	chapel/test/classes/deitz/: 
	                            test_class1_useNewConstructor_stopgap.chpl 
	                            test_class1_useNewConstructor_stopgap.compopts 
	                            test_class1_useNewConstructor_stopgap.good 
	chapel/test/types/type_variables/deitz/: test_coerce1.chpl 
	                                         test_coerce1.good 

---------------------------------------------------------------------------

04/20/05 16:34:42 -- bradc

Log message:
	Adding a new test and several futures that I ran into
	in getting the test working.  Most of these are high-level
	futures, and ones that I've assigned to myself (with Steve
	sometimes listed as a second in case he gets there before
	I do).  The tests exercise:
	
	- domains defined via an integer parameter expression
	  rather than an integer literal
	
	- functions that return a type variable that is also
	  a parameter don't resolve properly
	
	- variables initialized using variables of the same
	  name from an external scope currently don't resolve
	  properly
	
	- another test of "var A: [i in D] type = i"

Added files:
	chapel/test/distributions/bradc/foundations/: .cvsignore 
	                                              blockdist1.chpl 
	                                              blockdist1.future 
	                                              blockdist1.good 
	                                              blockdist2.chpl 
	                                              blockdist2.future 
	                                              blockdist2.good 
	                                              blockdist3.chpl 
	                                              blockdist3.good 
	chapel/test/domains/bradc/: paramRank.chpl paramRank.future 
	                            paramRank.good 
	chapel/test/functions/bradc/: typefn.chpl typefn.future 
	                              typefn.good typefn2.chpl 
	                              typefn2.future typefn2.good 
	chapel/test/trivial/bradc/: initvarsamename.chpl 
	                            initvarsamename.future 
	                            initvarsamename.good 
	                            initvarsamename2.chpl 
	                            initvarsamename2.future 
	                            initvarsamename2.good 

---------------------------------------------------------------------------

04/20/05 16:55:31 -- bradc

Log message:
	Changed the implementation of parameter intents for
	classes so that the class' variables are passed by
	reference, but the pointer to the variables is
	passed by "in" intent.  Thus, the class variable
	can currently be assigned to, but such assignments
	are not reflected back at the callsite.  Thanks
	Steve for catching this.
	
	Updated expected test output to reflect this change.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/test/functions/bradc/: defaultParamInOut.future 
	                              intents-classes2.good 
	                              intents-classes3.good 
	                              intents-classes4.good 

---------------------------------------------------------------------------

04/20/05 16:59:07 -- deitz

Log message:
	Added flag ->noDefaultInit on VarSymbols to say that these VarSymbols
	should not get default initializations.  Used for "this" in
	constructors and the init variables for type's default values.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/20/05 17:26:15 -- bradc

Log message:
	Realized that I mis-created the expected output for
	these two tests because I forgot that we decided
	that any definition of a variable within a scope
	shadowed all uses of the variable, even those that
	preceded the variable definition statement (which
	would then be marked as being illegal).

Modified files:
	chapel/test/trivial/bradc/: initvarsamename.good 
	                            initvarsamename2.good 

---------------------------------------------------------------------------

04/20/05 17:48:39 -- jplevyak

Log message:
	New big switch statement to factor out the things which still do not
	have defaultVal/defaultConstructor as well as the special cases related
	to "this" and init variables.
	
	The special cases are:
	
	TYPE_DOMAIN
	TYPE_INDEX
	
	"this" is treated specially for TYPE_RECORD and TYPE_UNION
	"init" is treated specially by not using the defaultVal.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/20/05 17:49:04 -- bradc

Log message:
	Made an improvement to Steve's scopeResolveSymbols pass
	so that a symbol's initialization expression is traversed
	prior to the symbol's addition into the list of defined
	symbols so that lines such as:
	
	        var x = x + 1;
	
	will result in "use before def" errors.  This resulted in
	a nicer error message for weirdinit.chpl, so I updated its
	output.

Modified files:
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	chapel/test/classes/bradc/: weirdinit.good 

---------------------------------------------------------------------------

04/21/05 09:01:14 -- roxana

Log message:
	A small modification of this pass led to failure of
	test_index_expr1.chpl. Corrected that.

Modified files:
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 

---------------------------------------------------------------------------

04/21/05 09:08:12 -- bradc

Log message:
	Forgot to remove these two futures last night.

Removed files:
	chapel/test/trivial/bradc/: initvarsamename.future 
	                            initvarsamename2.future 

---------------------------------------------------------------------------

04/21/05 10:18:53 -- bradc

Log message:
	Updated regressions list w.r.t. last night's regressions
	reports.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/21/05 13:45:03 -- deitz

Log message:
	Net Result: All DefExprs now contain a single Symbol.
	
	Previously, multiple VarSymbols were occasionally stored in the ->sym
	field of a single DefExpr.
	
	This checkin required some changes to the indices of ForallExpr and
	ForLoopStmt since they now have to be a list of DefExprs rather than a
	single DefExpr with a list of symbols.
	
	Updated printing outputs of Forall expressions which now show type
	information of the index variables.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symtab.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: fixup.cpp insertAnonymousTypes.cpp 
	                             insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	                             insertVariableInitializations.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 

---------------------------------------------------------------------------

04/21/05 14:55:52 -- jplevyak

Log message:
	emove some dead code.
	Rename is_meta_class -> is_meta_type (since there are meta types for all
	types not just classes)

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp cg.cpp fa.cpp 
	                           if1.cpp sym.cpp 
	chapel/compiler/include/: analysis.h sym.h 

---------------------------------------------------------------------------

04/21/05 15:07:23 -- jplevyak

Log message:
	Added NEW_COERCIONS_WRAPPER #define to symbol.h, and the appropriate
	code to support it in analysis.cpp.
	Uncomment the #define at the top of the file to get the new interface.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

04/21/05 16:22:59 -- deitz

Log message:
	Rewrote TupleType::copyType to be more faithful to the copy
	infrastructure so that analysis's callbacks are used.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/21/05 16:48:14 -- jplevyak

Log message:
	Accelerate moving from one MPosition to another by caching
	the cannonical representation of an MPositino and providing
	up, down, and next pointers for moving through numeric positions
	(and up from a by-name position to its parent).

Modified files:
	chapel/compiler/analysis/: fa.cpp pattern.cpp 
	chapel/compiler/include/: pattern.h 

---------------------------------------------------------------------------

04/22/05 11:32:49 -- shannon

Log message:
	Changed the format of the print of the memory address
	in the printMemTable output to hopefully fix a few
	test regressions when run with valgrind or on a Sun.
	
	Changed the substitution for the memory address output
	to be 8-characters wide.  Updated test output to
	reflect these changes.

Modified files:
	chapel/runtime/src/: chplmem.c 
	chapel/test/memory/shannon/: PREDIFF configVarFile.good 
	                             freedMalloc.good jacobi.good 
	                             printMemTable.good 
	                             reallocZeroSize.good 

---------------------------------------------------------------------------

04/22/05 11:37:10 -- roxana

Log message:
	Added support for index(1) to be correctly handled. Since tuple(1)
	 does not work, special cased index type to become an integer instead
	of a tuple(1). Also special cased the code generation for index
	type and assignment operator to take this case into consideration.
	This special casing is a bit ugly and it clutters the code. Hopefully
	this can be polished later on.
	
	Removed the future associated with this problem.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: type.h 
Removed files:
	chapel/test/domains/bradc/: writeIndex.future 

---------------------------------------------------------------------------

04/22/05 12:24:10 -- jplevyak

Log message:
	Remove some unncessary casts.

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

04/22/05 13:10:49 -- bradc

Log message:
	Put in an internal error if a generic sequence type is
	codegen'd to make such problems clearer than they
	currently are.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

04/22/05 14:20:09 -- jplevyak

Log message:
	Optimize sets_by_f to sets_by_f_transitive for those cases where
	the equivilance relation is transitive.

Modified files:
	chapel/compiler/analysis/: clone.cpp 

---------------------------------------------------------------------------

04/22/05 15:17:39 -- roxana

Log message:
	Brad suggested I add the -f flag to the first line of prediff files.
	I had some tests failing because my .cshrc has some conflicting
	settings.

Modified files:
	chapel/test/memory/shannon/: PREDIFF 

---------------------------------------------------------------------------

04/22/05 15:41:21 -- roxana

Log message:
	There was another file.
	
	Brad suggested I add the -f flag to the first line of prediff files.
	I had some tests failing because my .cshrc has some conflicting
	settings.

Modified files:
	chapel/test/compflags/bradc/noexec/: version.prediff 

---------------------------------------------------------------------------

04/22/05 16:20:18 -- bradc

Log message:
	Checking in a utility script that returns the name that
	we'll call a given platform.  I'm working on having other
	things that determine the platform all refer to this
	script so that we name platforms consistently across the
	compiler.

Added files:
	chapel/util/: platform 

---------------------------------------------------------------------------

04/22/05 16:55:40 -- jplevyak

Log message:
	Compute element_types more robustly through cloning and add
	element_type_info() function to retrieve those types.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: analysis.h fa.h 

---------------------------------------------------------------------------

04/22/05 17:25:23 -- bradc

Log message:
	Broke the nogc build of the third-party directory into
	its own build target.  To build a GC-less version of
	dparser, you now need to type "make third-party-nogc"
	from the top-level directory, or "make nogc" from the
	third-party directory.

Modified files:
	./: Makefile 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/22/05 17:32:20 -- bradc

Log message:
	New platform-specific Makefile settings, using the
	new platform naming scheme.  Will remove old ones in
	a subsequent update.

Modified files:
	chapel/make/: Makefile.linux 
Added files:
	chapel/make/: Makefile.linux64 Makefile.sunos 

---------------------------------------------------------------------------

04/22/05 18:02:38 -- bradc

Log message:
	Lots of Makefile-related changes.  Please let me know if these break
	anything on your platform.  The main goal in this work is to allow a
	single filesystem to support multiple builds simultaneously without
	rebuilding a lot of things unnecessarily.  We had the groundwork for
	this before, but this makes a lot of it a bit firmer.
	
	Users who want to put "chpl" in their search path for multiple
	platforms should replace lines of this form:
	
	set path = ($path $CHPL_SYSTEM_DIR/)
	
	with lines of this form:
	
	setenv CHPL_PLATFORM `$CHPLHOME/util/platform`
	set path = ($path $CHPL_SYSTEM_DIR/$CHPL_PLATFORM)
	
	You will also find that start_test runs chpl from a platform-specific
	subdirectory as well now.
	
	The other main way in which this check-in will affect people is that
	those who are building on Suns will find that their platform-specific
	subdirectories are renamed from "sun" to "sunos" and those building on
	Linux64s will find their platform-specific subdirectories renamed from
	"linux" to "linux64".
	
	The other main improvement of this check-in is that dependences are
	now calculated for the nogc build when a "make depend" is done in the
	compiler directory.
	
	Here are the changes in more detail:
	
	* switched platform names used by Makefiles to a more consistent
	  scheme using the util/platform script
	    linux -> split into linux and linux64 so that both builds could
	      be done from one filesystem
	    sun -> changed to sunos
	    freebsd - stays the same
	    cygwin: stays the same
	
	* made start_test use the platform-specific subdirectory version of
	  the compiler by default (e.g., compiler/linux/chpl) so that multiple
	  platforms could be tested simultaneously
	
	* .cvsignores : added linux64, sunos; removed sun
	
	* made compiler more robust when run from a platform-specific
	  subdirectory of compiler (e.g., compiler/linux/chpl)
	
	* added the creation of dependences for nogc build of compiler when
	  make depend is done -- previously, no dependences were made for the
	  nogc build.
	
	* made the compiler/test/ directory more resilient to being built with
	  the nogc option.  However, the unit tests fail when built without gc
	  for some reason, so had to ignore the return code, which is
	  unfortunate.
	
	* made the compiler-generated Makefile point to CHAPEL_ROOT rather
	  than CHPLRTDIR, which allows us to get to other places easier
	
	* made the boehmgc directory not rebuild itself if the last build
	  was done for the given platform.  This means if you build the
	  third-party directory twice in a row on linux, the second build
	  should not result in anything happening.  However, if you build
	  for linux and then for sun, building for linux again will cause
	  it to get rebuilt.  In principle, the third-party directory
	  should only need to be built once per platform ever (unless its
	  sources change, which is rare)
	
	* made the dparser directory take platform into account in a
	  similar way.

Modified files:
	chapel/compiler/: .cvsignore 
	chapel/compiler/AST/: .cvsignore 
	chapel/compiler/adt/: .cvsignore 
	chapel/compiler/analysis/: .cvsignore 
	chapel/compiler/analysis/make_prims/: .cvsignore 
	chapel/compiler/backend/: .cvsignore 
	chapel/compiler/include/: files.h 
	chapel/compiler/main/: .cvsignore 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/parser/: .cvsignore 
	chapel/compiler/passes/: .cvsignore filesToAST.cpp 
	chapel/compiler/symtab/: .cvsignore 
	chapel/compiler/test/: .cvsignore Makefile 
	chapel/compiler/traversals/: .cvsignore 
	chapel/compiler/util/: .cvsignore files.cpp 
	chapel/compiler/vparser/: .cvsignore 
	chapel/compiler/vparser/cast/: .cvsignore 
	chapel/make/: Makefile.platform 
	chapel/runtime/etc/: Makefile.include 
	chapel/test/: start_test 
	chapel/third-party/boehmgc/: .cvsignore Makefile 
	chapel/third-party/dparser/: .cvsignore Makefile 
	chapel/util/: platform 
Removed files:
	chapel/make/: Makefile.sun 

---------------------------------------------------------------------------

04/22/05 18:20:32 -- bradc

Log message:
	One change that didn't quite make it into the last
	checkin -- updated vparser front-end to be able to
	run from a compiler/<platform> subdirectory as well.

Modified files:
	chapel/compiler/vparser/: parse.cpp 

---------------------------------------------------------------------------

04/25/05 09:30:51 -- shannon

Log message:
	Changed the execution of the mallocOutOfMemory
	test to limit the virtual memory use in order
	to avoid crashing or bogging down the hardware.
	'limit vmemoryuse' was set in a local copy of
	sub_test, per Brad's instructions.

Added files:
	chapel/test/memory/shannon/outofmemory/: mallocOutOfMemory.chpl 
	                                         mallocOutOfMemory.good 
	                                         sub_test 
Removed files:
	chapel/test/memory/shannon/: mallocOutOfMemory.chpl 
	                             mallocOutOfMemory.good 

---------------------------------------------------------------------------

04/25/05 10:20:07 -- bradc

Log message:
	Reworked platform script to improve the decision
	between linux and linux64 (I had not realized
	previously that one could do 32-bit builds on a
	64-bit linux machine).  linux64 is now selected
	iff BUILD_X86_64 is set to 1.  Otherwise, linux
	is used.  This should be consistent with the
	conventions used on John's machine (note that
	the chapel account is currently set up to set
	this variable to 1 by default, which is good
	as it means those of us logging in to debug
	linux64 issues will be able to do so trivially).

Modified files:
	chapel/util/: platform 

---------------------------------------------------------------------------

04/25/05 10:57:05 -- bradc

Log message:
	Made the third-party Makefiles even smarter with
	respect to avoiding duplicate rebuilds.  Got rid
	of the ignored "missing .lastbuild" error.  Also,
	made it so that if a build is interrupted, it
	will not be considered the lastbuild -- only
	successful builds will update the .lastbuild file.
	
	Added new targets:
	
	      all-force
	      nogc-force (for dparser only)
	
	so that if one wants to force a build even though
	the Makefile claims it is not necessary, it will
	be done.

Modified files:
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/25/05 11:03:37 -- bradc

Log message:
	Caught a couple of instances of "make" rather
	than "$(MAKE)" in our Makefiles.

Modified files:
	chapel/third-party/boehmgc/: Makefile 

---------------------------------------------------------------------------

04/25/05 11:18:02 -- bradc

Log message:
	Shannon had to take off abruptly for family
	stuff, so I checked in a better printMemTable.good
	file, which 5/6 platforms seem to prefer.  It's
	still a mystery why the valgrind run results in
	the other...  Is it calling the malloc routines
	in a different order?

Modified files:
	chapel/test/memory/shannon/: printMemTable.good 

---------------------------------------------------------------------------

04/25/05 11:55:23 -- jplevyak

Log message:
	Only include instance variables from parents for RECORD/class types.

Modified files:
	chapel/compiler/analysis/: ast.cpp 

---------------------------------------------------------------------------

04/25/05 11:56:21 -- jplevyak

Log message:
	Expose "make_prim" function for use in analysis.cpp

Modified files:
	chapel/compiler/include/: fa.h 
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

04/25/05 13:36:51 -- jplevyak

Log message:
	Correctly handle coercion during array update.
	Fixup types of member variables during cloning even if the type isn't cloned.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp 

---------------------------------------------------------------------------

04/25/05 13:40:43 -- bradc

Log message:
	Rassin-frassin Makefiles.  It seems I wrote a Makefile
	that would only work after the configure script had been
	run.  This should help, I believe.

Modified files:
	chapel/third-party/boehmgc/: Makefile 

---------------------------------------------------------------------------

04/25/05 14:50:49 -- roxana

Log message:
	Added support for indices to be created for anonymous
	domains as well. To that effect, modified Domain type to keep
	track of its initialization expression, so that indices can be created
	based on this expression.

Modified files:
	chapel/compiler/traversals/: insertIndexType.cpp 

---------------------------------------------------------------------------

04/25/05 14:53:56 -- jplevyak

Log message:
	Added a new pass ResolveTupleTypes to fixup the components bit of
	tuples after analysis (by using the type_info() of the fields.
	I believe that in lookupOrDefineTupleTypeSymbol we should be
	setting the scope before we do the lookup since we want the
	one in commonModule.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: resolveTypes.cpp resolveTypes.h 

---------------------------------------------------------------------------

04/25/05 18:57:44 -- jplevyak

Log message:
	Update the test results to reflect the new operator= for Index types.

Modified files:
	chapel/test/flowanalysis/newast/: declprintdom.good 
	                                  declprintdom2.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/25/05 20:55:34 -- bradc

Log message:
	Fixed a bug Roxana found with my third-party
	make clobber rule in that it wouldn't blow
	away the .lastbuild files that were created
	and would therefore squelch future builds.
	Clobber now blows them away.
	
	Clean does not because it does not blow away
	the targets that were created (and tucked into
	a platform-specific directory), so rebuilding
	is not typically needed.  Cleaning in these
	directories is designed more to clean out
	the source directories themselves, as provided
	by the third-parties.

Modified files:
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

04/26/05 09:54:56 -- roxana

Log message:
	Started integrating my index type insertion with Steve's dtInteger
	assumption. The idea is to make the transition smoother and wait for changes to forall
	loops to handle at least tuples of integers, rather that integer symbols.
	
	My version will work when the _dtInteger_IndexType_switch is
	turned on. It will break most of the tests that are working under
	Steve's assumption, but it will pass some tests that are not. For any
	purpose other than local playing around with it, this flag should
	be off.
	
	For now there is not much to play with -- checking in just to
	avoid Steve's changes (typically to the same lines of code
	I work on) mangling my code.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/include/: symtab.h 

---------------------------------------------------------------------------

04/26/05 11:16:07 -- shannon

Log message:
	Hopefully fixed a bug which was causing the printMemTable
	test to fail.  On a realloc I was deleting the original
	memory address from the table, then installing the
	new address.  This caused a change in ordering of the
	entries in the table.

Modified files:
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

04/26/05 12:20:10 -- bradc

Log message:
	Breaking for lunch.

Modified files:
	bradcdoc/distNotes/: distNotes.tex 
Added files:
	bradcdoc/distNotes/: .cvsignore 

---------------------------------------------------------------------------

04/26/05 13:13:52 -- deitz

Log message:
	Added a new field
	
	  AssignOp* DefExpr::init
	
	that will eventually replace Expr* VarSymbol::init in assignment form
	where the rhs is VarSymbol::init and the lhs is Variable of the
	VarSymbol being defined in the DefExpr.
	
	I'm having trouble getting analysis to traverse this expression so,
	John, could you take a look at it.  I added a runtime flag
	--useNewInit for switching over to this.  This flag fills in this
	expression, but VarSymbol::init remains as well.
	
	The major challenge to making this work was in Fixup to get it to
	maintain the parentExpr and parentStmt of DefExpr::init, even though
	it will be lost for the definitions of the symbols.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: driver.h expr.h symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp fixup.cpp 
	                             fixup.h insertAnonymousDomains.cpp 
	                             resolveOverloadedOperators.cpp 

---------------------------------------------------------------------------

04/26/05 17:10:19 -- jplevyak

Log message:
	Move ->init from VarSymbol to DefExpr.
	Also changed DefExpr::init from an AssignOp to an Expr.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             checkSemantics.cpp 
	                             createConfigVarTable.cpp fixup.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/27/05 10:08:44 -- bradc

Log message:
	Changed the way nightly does its cvs checkout to avoid
	sending me cvs tracking mail.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

04/27/05 10:20:09 -- deitz

Log message:
	Decoupled user-written methods from the class.  Their scope is now
	reset when "this" is inserted into their formal parameter list.  For
	user methods, this should allow the method to stay alive even if the
	class dies.
	
	Added a new boolean to symbols called keepLive which we use not to
	remove functions even if analysis thinks they are dead.  I'm not sure
	this is necessary yet, but I think it is a worthwhile addition.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/symtab/: removeDeadSymbols.cpp symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: expandSeqExprAssignments.cpp 
	                             insertThisParameters.cpp 
	                             omitForNoAnalysis.cpp 
	                             removeSeqOperations.cpp 
	                             updateSymbols.cpp 

---------------------------------------------------------------------------

04/27/05 11:23:30 -- jplevyak

Log message:
	Added new UserInitExpr ast Type.
	This is the type of DefExpr::init, and it is used to resolve
	any overloaded = as a result of user initialization.  For example:
	
	  var x : C = b;
	
	Here the default constructor for C is classed and then an overloaded
	operator = is called with arguments x and b.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             createConfigVarTable.cpp 
	                             insertAnonymousDomains.cpp 
	                             insertVariableInitializations.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

04/27/05 15:09:13 -- deitz

Log message:
	Improved support for the noDefaultInit bool on VarSymbols.  If it is
	set, we don't output defaultVal or defaultConstructor initialization.
	We may want a bool for each.  Also, have we decided we'll output both
	initializers if both exist or just one?  Also with this checkin, this
	bool is copied when the VarSymbol is.
	
	Added commented-out code in Fixup to verify that
	TypeSymbol::type::symbol == TypeSymbol.  I'll check this in.  We can
	turn it on when we start instantiating type variables correctly.  I
	think John is working on this.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: fixup.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/27/05 17:09:41 -- deitz

Log message:
	Fixed a bug in RemoveDeadSymbols in which if multiple function's
	DefExprs shared the same DefStmt, they would all be extracted if one
	was dead.  Now just the DefExpr is extracted if there are multiple
	DefExprs.  If there is a single DefExpr, the DefStmt is extracted.
	
	If --useNewConstructor is on, I now run call_info on the DefExpr to
	find out about the defaultConstructor.  This causes one test to fail
	so I only do it if the flag is on.
	
	This checkin gets the named parameter constructor working with most
	record tests.  There are still a few failures with this flag so it is
	not the default.

Modified files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

04/28/05 10:33:35 -- jplevyak

Log message:
	Generic substitutions are now done by introducing a UserType
	  which indirects to the substituted type.  This restores
	  the Type->symbol->type and TypeSymbol->type->symbol identities.
	
	For instantiated types parameters, move them into the body of the function
	  after analysis.
	
	collectASTs now collects Type s as well.
	
	Made type_is_used() to more conservative.  The big exception
	  is IndexTypes which are special cased (everywhere).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/traversals/: collectASTS.cpp 
	                             findUnknownTypes.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/28/05 10:44:06 -- jplevyak

Log message:
	Add a .future... this test was working "by accident", and I have
	  work around the issue

Added files:
	chapel/test/classes/deitz/: test_class_list1.future 

---------------------------------------------------------------------------

04/28/05 11:04:27 -- deitz

Log message:
	Enabled verification that for TypeSymbol sym the following is true:
	
	  sym->type->symbol == sym

Modified files:
	chapel/compiler/traversals/: fixup.cpp 

---------------------------------------------------------------------------

04/28/05 11:15:58 -- jplevyak

Log message:
	Use new lookupOrDefineTupleTypeSymbol interface to create tuple types.
	
	Remove stopgap accessors and setters in internal_prelude which
	  mapped _field1 to the "index_object" primitive.
	
	Added new stopgap _seq to chplstd.h and special case "write" function
	  for _seq, comment out error for codegen of dtSequence
	
	Factor map_symbols to permit a single symbol to be mapped (the new tuple symbol).
	Factor build_type to permit a single type to be built.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/runtime/include/: stdchpl.h 

---------------------------------------------------------------------------

04/28/05 11:33:36 -- bradc

Log message:
	Updated regressions list w.r.t. non-linux platforms.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/28/05 12:55:15 -- deitz

Log message:
	Completed decoupling methods from classes.  Methods, including
	getters, setters, and constructors, can now stay alive even if the
	class dies.  This applies to records, unions, etc.
	
	Scopes of functions are now really only used for code generation and
	for computing the visible functions list.
	
	Secondary methods are now in the scopes where they are defined.
	
	Cleaned up code for building constructor bodies.
	
	Code generation of a structural type no longer results in code
	generation of its methods or constructors.
	
	Write functions are only inserted if the type is used.  If the type is
	dead, a write function is not created.
	
	Fixes to gross sequence code.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: insertWriteFns.cpp symscope.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             fixup.cpp insertThisParameters.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

04/28/05 14:19:50 -- deitz

Log message:
	Fixed a small bug in the default != function created for records.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

04/28/05 15:33:02 -- deitz

Log message:
	Implemented new coercion wrapper function.  This is untested and
	currently off with the same #define in symbol.h that it was off with
	before I implemented it.  There is a compilation problem in analysis.
	John, I assume it won't work very well after you get it up and running
	on your side, so let me know when you do this.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/28/05 15:35:57 -- jplevyak

Log message:
	Fixup NEW_COERCION_WRAPPER code. (compiles now)

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/28/05 16:08:48 -- deitz

Log message:
	Got classes/bradc/records/assignRecord2.chpl working with --noanalysis
	(it uses sequences).
	
	The common modules init function was not called if the user specified
	a main program.  It now is.

Modified files:
	chapel/compiler/passes/: createEntryPoint.cpp 

---------------------------------------------------------------------------

04/28/05 16:14:25 -- jplevyak

Log message:
	Fix bug in NEW_COERCION_WRAPPER... looks like the call is right, but
	the tests are still failing ?!?!

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/28/05 16:19:45 -- roxana

Log message:
	Added support for code generation of array references if
	indexed by indices of Index Type. Specialized for tuple
	and integer.
	
	Added support for code generation of for loop  statements to
	allow indices of IndexType to be used.
	Bypass initialization of index variables of IndexType. The
	problem seems to be that tuples have no type symbol in
	indices which happen to have tuple type. I'll wait on that
	until after tuples are more stable.
	
	Added support for index variables of Index Type in array
	initialization.
	
	Added two new tests to test the functionality of index type
	insertion. These are made futures since they fail with the
	'dtInteger' version. To get these working one must change the
	flag in symtab.h (_dtinteger_indexType_switch), as well as
	uncomment preProcessStmt in insertIndexType.h and
	insertIndexType.cpp.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	                         insertDefaultInitVariables.cpp 
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	                             insertIndexType.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertIndexType.h 
Added files:
	chapel/test/domains/roxana/: test_index_expr2.future 
	                             test_index_expr0.chpl 
	                             test_index_expr0.good 
	                             test_index_expr2.chpl 
	                             test_index_expr0.future 
	                             test_index_expr2.good 

---------------------------------------------------------------------------

04/28/05 16:35:58 -- deitz

Log message:
	Fixed small bug in coercion_wrapper, but the tests still fail with
	NEW_COERCION_WRAPPER.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/28/05 16:46:54 -- deitz

Log message:
	Cleaned and improved RemoveDeadSymbols.  It now only removes the
	symbol that is dead.  Previously it removed the whole DefStmt even if
	it contained other DefExprs than the one for the dead symbol.  Except
	for functions which I fixed earlier.

Modified files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp 

---------------------------------------------------------------------------

04/28/05 17:17:40 -- jplevyak

Log message:
	Indexes seem to have been changed back into integers, which
	means that they nolonger use the overloaded = operators and
	the analysis results are therefor different.

Modified files:
	chapel/test/flowanalysis/newast/: declprintdom.good 
	                                  declprintdom2.good 
	                                  enumarray.good 
	                                  formatoutput.good noop.good 
	                                  protoast_test.good 

---------------------------------------------------------------------------

04/28/05 18:54:13 -- jplevyak

Log message:
	Changes in support of USE_NEW_CONSTRUCTOR
	
	1. Made a defaultVal for dtNil, the "nil" global variable of type dtNull.
	
	2. Implemented a NullType::codegen which is "void *"
	
	3. defaultConstrutors are now accessed as the name of th
	   function rather than the FnSymbol so that they can
	   be overridden.
	
	4. useNewConstructor option now has an environment variable
	   associated with it CHPL_USE_NEW_CONSTRUCTOR
	
	5. added inttypes.h to stdchpl.h so that intptr_t will be available
	   to the generated code.
	
	The remaining problem is with visible_functions()

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: driver.cpp 
	chapel/runtime/include/: stdchpl.h 

---------------------------------------------------------------------------

04/29/05 08:39:53 -- jplevyak

Log message:
	Tighten up one of yesterdays checkins.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

04/29/05 09:22:55 -- deitz

Log message:
	Detabified some compiler source.

Modified files:
	chapel/compiler/traversals/: fixup.cpp resolveSymbols.cpp 

---------------------------------------------------------------------------

04/29/05 09:51:33 -- deitz

Log message:
	Fixed the creation of new scopes so that if the visibleFunctions have
	already been computed, they are computed for the new scopes as they
	are popped.
	
	New functions created after the visibleFunctions have been computed
	are not added to the list, however.
	
	This improves support for --useNewConstructor.

Modified files:
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 

---------------------------------------------------------------------------

04/29/05 09:57:00 -- shannon

Log message:
	Added the --memstat runtime option.  If called on
	a chapel executable the final memory statistics are
	printed, e.g.:
	
	  > a.out --memstat
	  Final Memory Statistics:  totalMem=310, maxMem=345
	
	totalMem is the amount of memory allocated at the
	time the call is made, and maxMem is the maximum
	amount of memory ever allocated during the run.
	
	A chapel developer can make user of the printMemStat()
	and resetMemStat() functions.  resetMemStat() zeroes
	the totalMem and maxMem variables.
	
	Added some tests.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: chplmem.h chplmem_tests.h 
	chapel/runtime/src/: arg.c chplmem.c chplmem_tests.c main.c 
Added files:
	chapel/test/memory/shannon/: memstatFlag.chpl memstatFlag.good 
	                             memstatPrint.chpl 
	                             memstatPrint.execopts 
	                             memstatPrint.good 
	                             printFinalMemStat.chpl 
	                             printFinalMemStat.execopts 
	                             printFinalMemStat.good 

---------------------------------------------------------------------------

04/29/05 10:00:43 -- bradc

Log message:
	Added a hack to getIntArg for freebsd which seems to have
	problems scanf-ing variables of type "long long".

Modified files:
	chapel/runtime/src/: arg.c 

---------------------------------------------------------------------------

04/29/05 10:30:18 -- deitz

Log message:
	Time to eat --useNewConstructor.
	
	Made --useNewConstructor the default and replaced it with
	--useOldConstructor in case we need to look at the old behavior while
	getting the remaining test cases working.
	
	Updated the REGRESSIONS file.
	
	Removed two useNewConstructor tests which duplicated what is now
	tested by default.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/test/: REGRESSIONS 
Removed files:
	chapel/test/classes/deitz/: 
	                            test_class1_useNewConstructor_stopgap.chpl 
	                            test_class1_useNewConstructor_stopgap.good 
	                            test_class3_useNewConstructor_stopgap.chpl 
	                            test_class3_useNewConstructor_stopgap.good 

---------------------------------------------------------------------------

04/29/05 11:01:03 -- deitz

Log message:
	Removed some double traversals of FnSymbols, ParamSymbols, and
	EnumSymbols when being traversed as a definition.
	
	I was seeing this in the print_view mechanism which when used to print
	out a function duplicated these symbols.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

04/29/05 11:26:21 -- deitz

Log message:
	Improved print_view to print out extra information for some tail
	expressions like StringLiteral and SizeofExpr along with IntLiteral
	(already done).  When symbols are printed, FnSymbol, ParamSymbol, and
	TypeSymbol are marked as such.
	
	Added new function nprint_view that prints out the id numbers next to
	symbols and is useful if symbols share names.

Modified files:
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

04/29/05 14:07:23 -- deitz

Log message:
	Checking in some of John's patch, modified.  John, I got rid of the
	goto, which was dead code.  I also commented out some code in
	
	 static Stmt* basic_default_init_stmt(Stmt*, VarSymbol*, Type*)
	
	that uses call_info way after analysis. I'd rather only use this in
	the pass resolveSymbols and I'd like to figure out how we can make it
	work there.
	
	Thus this checkin does not fix any regressions, nor does it break
	anything.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/29/05 14:30:55 -- deitz

Log message:
	Removed code I commented out in John's patch.
	
	Turned on the ->noDefaultInit bool for all variables that have no
	declared types (type == dtUnknown before analysis) so that they do not
	get a default initialization.
	
	This fixes classes/jplevyak/record_type_hierarchy-1.chpl and
	classes/jplevyak/union_type_hierarchy-1.

Modified files:
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 

---------------------------------------------------------------------------

04/29/05 14:38:44 -- deitz

Log message:
	New test for function cloning with future.

Added files:
	chapel/test/types/type_variables/deitz/: test_swap.chpl 
	                                         test_swap.future 
	                                         test_swap.good 

---------------------------------------------------------------------------

04/29/05 14:42:37 -- deitz

Log message:
	Updated regressions log with my new understandings, or lack thereof.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/29/05 15:01:08 -- deitz

Log message:
	Updated regressions file with more understanding on
	
	  classes/deitz/test_type_in_class1

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/29/05 15:03:21 -- jplevyak

Log message:
	Fixed a bug in FnSymbol::coercion_wrapper where the formal
	was being used intead of the wrapperFormal in a couple places
	(in particular, in the call to the wrapped function).
	
	I am kind of surprised that non of the Verify code found this
	as the Symbol was appearing in a function in which it wasn't even
	scoped.
	
	Removed the NEW_CONSTRUCTOR #define.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

04/29/05 15:34:19 -- deitz

Log message:
	Partially fixed regression test_type_in_class1.  It now no longer
	fails because it is trying to resolve a ParenOpExpr in a type
	declaration list but because it is trying to resolve a ParenOpExpr in
	a default value to an argument, a ParamSymbol::init.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

04/29/05 16:44:42 -- jplevyak

Log message:
	Added a not about ParamSymbol::init which is copied, so that the
	original is never executed and so analysis knows nothing about it.
	It should not be resolved/traversed.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/02/05 10:06:13 -- deitz

Log message:
	Put in removeDeadSymbols a line to remove ParamSymbol::init.  This was
	the default value, but now that the default wrappers have been made,
	this is no longer executed code.
	
	Added a new pass InsertOutParameterInitializations that puts the
	initialization line for out parameters in the top of a function.
	
	Fixed up default_wrapper function to remove formals not only from
	formal list but also from paramScope of function.  These formals that
	I put in and then take out were still being traversed in symtab
	traversals because they weren't being fully removed.
	
	Added to fixup verification that every expression has a parentSymbol.
	
	This fixes regression test_type_in_class1.  Updated the regressions
	file.
	
	Put a hack in ProcessParameters (with Brad) to not put in a temporary
	for a default_param_temp.  This is somewhat off putting because of its
	delicacy.  A general mechanism that flags temps that don't require
	extra processing ProcessParameters may be better and more general.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share removeDeadSymbols.cpp 
	chapel/compiler/traversals/: fixup.cpp processParameters.cpp 
	chapel/test/: REGRESSIONS 
Added files:
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	                         insertOutParameterInitializations.h 

---------------------------------------------------------------------------

05/02/05 10:17:03 -- deitz

Log message:
	Out parameter is no longer initialized in default_wrapper function
	because it is initialized in the function.
	
	Removed hack from ProcessParameters in which no temp was put in for
	default_wrapper temps.  There is no reason to keep doing this and it
	cleans up the code to remove it until a more general optimization is
	put in to eliminate duplicate temps.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: processParameters.cpp 

---------------------------------------------------------------------------

05/02/05 10:43:24 -- deitz

Log message:
	Fixed a bug that led to valgrind errors on the noanalysis sequence
	test in which primitive scalar fields like integers were not
	initialized in class constructors.

Modified files:
	chapel/compiler/AST/: type.cpp 

---------------------------------------------------------------------------

05/02/05 11:24:17 -- deitz

Log message:
	Added type variables in classes to the default constructor that is
	built.  The types can now be passed to the constructor.  In the
	constructor, nothing is done with the types.  The class should be
	instantiated/cloned.
	
	Passed the test
	  test/types/type_variables/deitz/test_typevar_class1.future
	over to John to take a look at.  We'll have to pass this one back and
	forth and come up with an interface for class instantiation I think.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class1.future 

---------------------------------------------------------------------------

05/02/05 11:52:48 -- deitz

Log message:
	Removed unused compiler flag --useNewInit.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

05/02/05 13:03:40 -- deitz

Log message:
	Fixed up resolution of types and made better error messages on
	--checkAnalysisTypeinfo.  Made Analysis's return of NilType for
	classes that are never constructed the type of these classes.  Added
	NilType::codegenIOCall so that we can print out classes that are
	always nil.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/02/05 15:18:16 -- jplevyak

Log message:
	Fixed several issues related to instantiation of generics
	and wrappers of wrappers.
	
	test/types/type_variables/deitz/test_typevar_class1.chpl
	
	is now failing after the UserInitExpr created on symbol.cpp:803
	is replaced with a call to the constructor (?) which is coming back
	NULL.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 

---------------------------------------------------------------------------

05/02/05 16:20:08 -- jplevyak

Log message:
	Clarify why /test/types/type_variables/deitz/test_typevar_class1.chpl
	is failing:
	
	/test/types/type_variables/deitz/test_typevar_class1.chpl
	
	  Fails because FnSymbol::default_wrapper is copying
	  formal_change->init which includes a VarInit which
	  references the original (pre-copy) formal.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/02/05 16:26:12 -- jplevyak

Log message:
	Insert an assert to catch a bad VarInit variable type.

Modified files:
	chapel/compiler/traversals/: removeNamedParameters.cpp 

---------------------------------------------------------------------------

05/03/05 11:07:02 -- jplevyak

Log message:
	The IF1 log now includes all wrappers and generic instantiations.

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp 
	chapel/compiler/include/: if1.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

05/03/05 11:38:17 -- jplevyak

Log message:
	Kludge to fix classes/deitz/test_type_in_class2
	
	The problem is a bit of a disconnect about UserTypes
	and type variables.  Here is the test:
	
	*******************************************************
	class node {
	  type element_type : integer;
	  var element : element_type;
	}
	
	var n : node = node();
	
	n.element = 12;
	
	writeln(n.element);
	*******************************************************
	
	Is 'element_type'is a type variable is being constrained to be some
	subtype of integer, and it "node" a generic type ?
	
	I would say "yes". And:
	
	*******************************************************
	class C { ... }
	class B : C { ... }
	
	class node {
	  type element_type : C;
	  var element : element_type;
	}
	
	var n : node = node(element_type = B);
	
	n.element = B();
	
	writeln(n.element);
	*******************************************************
	
	is reasonable code which instantiates 'node' with B,
	some subtype of C.
	
	Now it so happens that 'integer' can't have subtypes
	(at least that is my current understanding),
	so it is possible to recognize this case and remove
	or at least default the type variable parameter variable
	'element_type'.
	
	However the compiler treats 'element_type' in both cases
	as UserType which it probably shouldn't.
	
	At least that is my take on it.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/04/05 10:12:18 -- bradc

Log message:
	Updated platform-specific regressions and restored a linux64
	regression that had been incorrectly removed in a previous
	check-in.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/04/05 10:16:54 -- bradc

Log message:
	Some minor script changes that have been languishing in my
	directory.

Modified files:
	chapel/util/: lookForTabs.cron 
	chapel/util/tokencount/: tokctnightly 

---------------------------------------------------------------------------

05/04/05 10:23:40 -- deitz

Log message:
	Added a new traversal (not a pass) call ClearTypes that sets all the
	types of defined symbols to dtUnknown.
	
	Made function cloning call the ClearTypes traversal since we will
	require analysis to get the types for functions it clones.
	
	Added VarInitExpr to the UpdateSymbols traversal so that copying it
	will update its symbol if that changed.  This doesn't yet seem to help
	test_typevar_class1.chpl, but I'll look at it further.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: Makefile.share updateSymbols.cpp 
	                             updateSymbols.h 
Added files:
	chapel/compiler/traversals/: clearTypes.cpp clearTypes.h 

---------------------------------------------------------------------------

05/04/05 12:07:47 -- bradc

Log message:
	Switched FnSymbol body fields from Stmt to BlockStmt.
	Even though a function body can be a single statement,
	it is nice to always have a BlockStmt stored so that
	new statements can be inserted before/after, symbols
	can be added, etc. without doing the conversion after
	the fact.
	
	This code also checks in a new traversal,
	eliminateReturns that is designed to convert return
	statements into jumps just before code generation,
	which I'll document better once it's working.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/main/: passlist.cpp 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertWriteFns.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassConstructorsEtc.cpp 
	chapel/test/functions/bradc/: returnFnCallIntents.good 
Added files:
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             eliminateReturns.h 

---------------------------------------------------------------------------

05/04/05 12:40:01 -- deitz

Log message:
	Fixed Symboltable::dump() and the PrintSymtab traversal so that the
	indentation does not require the "level" field of SymScope to be
	correct.  It always just counts its distance to the top.
	
	Fixed a major bug in the insertion of the CommonModule in which
	numerous scopes were unlinked from the Symboltable.
	
	Improved RemoveDeadSymbols to remove the scopes of classes that are
	dead from the Symboltable.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: symscope.h symtab.h 
	chapel/compiler/symtab/: printSymtab.cpp removeDeadSymbols.cpp 
	                         removeDeadSymbols.h symscope.cpp 
	                         symtab.cpp 
	chapel/compiler/traversals/: removeNamedParameters.cpp 

---------------------------------------------------------------------------

05/04/05 17:08:11 -- bradc

Log message:
	* improved my last checkin in which all functions have a BlockStmt for
	  their body by setting up the BlockStmts to point to their scope (as
	  they should have in the last check-in).  In order to support this,
	  the creation of function calls through the Symboltable is now done
	  using three calls rather than two:
	
	        Symboltable::startFnDef()
	        Symboltable::continueFnDef()
	        Symboltable::finishFnDef()
	
	  These are useful because startFnDef pushes the parameter scope
	  (after which the parameters should be created and inserted into the
	  right scope), continueFnDef pushes the top-level block statement's
	  scope (which any variables defined within the body of the function
	  will be stored in), and finishFnDef pops the scopes and stores them
	  into the right places.  Added calls to continueFnDef() in all places
	  that currently use this interface.
	
	* turned on my eliminateReturns pass which should actually now be
	  called insertReturnTemps or something like that -- this pass inserts
	  a temporary variable to capture the expression being returned so
	  that in the event of complex return expressions, statements may be
	  inserted by other compiler passes (such as ProcessParameters) before
	  and after the evaluation of the return expression, yet still come
	  before the return statement itself.  This fixes two future tests.  I
	  won't rename this pass for now because eventually we will need to
	  eliminate, or otherwise fix up more complex returns such as returns
	  of arrays, and this pass would be a reasonable place to do so.
	  Note that this no longer inserts gotos as it did when I checked it
	  in last go-round.
	
	* made BlockStmt take an optional SymScope as its second constructor
	  parameter since many BlockStmts are created with known scope --
	  looked for obvious cases where this could be used rather than a
	  separate setBlockScope call.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h symbol.h symtab.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertWriteFns.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             eliminateReturns.cpp 
	                             transformLetExprs.cpp 
	chapel/test/functions/bradc/: defaultParamInOut.good 
Removed files:
	chapel/test/functions/bradc/: defaultParamInOut.future 
	                              returnFnCallIntents.future 

---------------------------------------------------------------------------

05/04/05 17:08:41 -- jplevyak

Log message:
	Cleanup chpl -t (HTML output) so that it is more readable and
	shows all the types and functions and their call trees.  Unfortunately
	it does not show the AST nodes and the types and types and outgoing
	calls because that was never reimplemented when we moved to the new AST :(
	
	However the output is still useful to see what is coming out of analysis.

Modified files:
	chapel/compiler/backend/: dump.cpp 

---------------------------------------------------------------------------

05/04/05 17:17:49 -- deitz

Log message:
	Removed future for test_class3 which uses named parameters.  This has
	been working for a little while now.

Removed files:
	chapel/test/classes/deitz/: test_class3.future 

---------------------------------------------------------------------------

05/04/05 17:18:37 -- deitz

Log message:
	Added code to remove dead symbols from their scopes and to remove the
	ParamScopes of dead functions in RemoveDeadSymbols.
	
	Fixed a bug in the Symboltable traversal mechanism that showed up now
	that symbols are removed from their scopes within RemoveDeadSymbols.
	
	Fixed a small inconsistency in InsertThisParameters in which a DefStmt
	was copied and inserted before being extracted.  I'm not checking in
	my code that caught this inconsistency as I don't think it is a
	worthwhile inconsistency to catch.

Modified files:
	chapel/compiler/symtab/: removeDeadSymbols.cpp symscope.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 

---------------------------------------------------------------------------

05/05/05 13:17:14 -- deitz

Log message:
	Removed comments I accidentally left in the PrintSymtab traversal.

Modified files:
	chapel/compiler/symtab/: printSymtab.cpp 

---------------------------------------------------------------------------

05/05/05 13:36:05 -- bradc

Log message:
	Fixed some bugs in printing the symboltable in
	which stdout was used rather than the output
	file that was specified.

Modified files:
	chapel/compiler/symtab/: printSymtab.cpp symscope.cpp 

---------------------------------------------------------------------------

05/05/05 15:10:04 -- bradc

Log message:
	A number of Symboltable cleanups.  The first is
	the most important; the second the coolest; the
	others are minor fixes:
	
	* Fixed an apparent bug in the SymtabTraversal in
	  which all modules were being traversed if the
	  traversal requested that only user modules be
	  traversed.
	
	* Made the PrintSymtab pass support an argument in
	  the passlist file so that only part of the symboltable
	  may be printed.  If the argument string is set to
	  "user", only the symboltable corresponding to the
	  user's code will be printed out;  if set to "common"
	  the common module and user code will be printed out.
	  Otherwise, the whole thing will be printed out (as
	  it had been before).  I find this helpful for
	  avoiding the pages of code that are generated for
	  the prelude files.
	
	* changed the way that indentations are printed to
	  avoid having an fprintf in a for loop, and to reduce
	  the number of places in the code where the indentation
	  has to be computed.  It could be further improved, but
	  this seems like a step in the right direction.
	
	* Removed the "level" member from the SymScope class
	  as it is no longer used
	
	* Switched ModuleSymbol's boolean "internal" which was
	  used to indicate whether the module was internal or
	  external to "modtype" which can have the values:
	     MOD_USER, MOD_INTERNAL, MOD_COMMON
	
	  because there are several places in the compiler where
	  the commmon module is treated either as a user module
	  or an internal module, depending on the context.  This
	  replaces some pretty strange conditionals ("if the module
	  is internal or common" or "if the module is not internal
	  and is not the common module") with clearer logic.  Steve
	  might argue that the common module should never be treated
	  differently than user code, but since it currently is, I
	  just tried to clean this up without trying to figure out
	  whether it always could be.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h symscope.h symtab.h 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: codegen.cpp createEntryPoint.cpp 
	                         printProgram.cpp runAnalysis.cpp 
	chapel/compiler/symtab/: printSymtab.cpp printSymtab.h 
	                         symscope.cpp symtab.cpp 
	                         symtabTraversal.cpp 

---------------------------------------------------------------------------

05/05/05 16:46:39 -- jplevyak

Log message:
	New option : NO_OPERATOR_EQ_FOR_UNTYPED_UNINITIALIZED to see if we can
	avoid operator= for untyped uninitialized variables.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/05/05 17:00:56 -- jplevyak

Log message:
	Accidentially disable writing of the 'i' log in some cases... this restores it.

Modified files:
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

05/05/05 17:27:23 -- bradc

Log message:
	Registered the "View" traversal so that it might
	be added to a user's passlist.h.

Modified files:
	chapel/compiler/main/: passlist.cpp 

---------------------------------------------------------------------------

05/05/05 17:48:35 -- deitz

Log message:
	Reworked ScopeResolveSymbols to work on methods in classes even though
	they are no longer scoped within the class.  This is a major change to
	this traversal.
	
	Added functionality to InsertThisParameters to move methods out of
	classes.  I did this before, but now it is done right, or at least,
	righter.
	
	Reworked ApplyThisParameters to not use the scope to determine if a
	symbol needs 'this' applied to it.  This can stand to be thought about
	more and maybe moved into ScopeResolveSymbols.
	
	Fixed OmitForNoAnalysis to actually remove symbols that are omitted,
	not just mangle their name.
	
	Added code to copy and update the _this field of a function if the
	function is copied in UpdateSymbols (called by copy).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             insertThisParameters.cpp 
	                             omitForNoAnalysis.cpp 
	                             scopeResolveSymbols.cpp 
	                             scopeResolveSymbols.h 
	                             updateSymbols.cpp 

---------------------------------------------------------------------------

05/05/05 18:07:27 -- bradc

Log message:
	Overloaded run() for View traversal so that it would
	print out some whitespace after it runs from the
	passlist.

Modified files:
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

05/05/05 18:13:41 -- bradc

Log message:
	Updated my typefn futures and added some new ones.  I
	think my new messages depend on some code I'm hoping
	to check in in a minute, though.  :)

Modified files:
	chapel/test/functions/bradc/: typefn.future typefn2.future 
Added files:
	chapel/test/functions/bradc/: typefn3.chpl typefn3.future 
	                              typefn3.good typefn4.chpl 
	                              typefn4.good typefn5.chpl 
	                              typefn5.future typefn5.good 

---------------------------------------------------------------------------

05/05/05 18:28:46 -- bradc

Log message:
	Fixed a problem in scopeResolveSymbols in which the
	parameter scope was not being pushed before the
	function return type was resolved -- since the
	return type can be resolved using values from the
	parameter list, this is necessary.  This change
	gets the typefn tests that I just edited/added
	working slightly better than they were previously.

Modified files:
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

05/06/05 08:54:55 -- deitz

Log message:
	Added a test case to ensure that methods with parameters that shadow
	fields use the parameters instead of the fields.

Added files:
	chapel/test/classes/deitz/: test_method8.chpl test_method8.good 

---------------------------------------------------------------------------

05/06/05 09:22:58 -- deitz

Log message:
	Removed "Stmt* constructor" from StructuralType.  Constructor DefStmts
	are now stored outside of the class.  They are pointed to by
	defaultConstructor.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

05/06/05 09:45:25 -- deitz

Log message:
	Added constructor of a class to the class's list of methods.
	
	Made getters and setters be defined in statements outside of the
	class.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

05/06/05 10:05:31 -- bradc

Log message:
	Another typefn test.

Added files:
	chapel/test/functions/bradc/: typefn4a.chpl typefn4a.good 

---------------------------------------------------------------------------

05/06/05 10:19:08 -- deitz

Log message:
	Added Vec<ClassType*> ClassType::parentClasses which stores the parent
	classes of classes (for inheritance).  I added this because when a
	class is cloned, the original is the clone's parent.  We need this to
	allow ResolveTypes to resolve the type of an instance of the original
	as the clone without generating an error message.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/06/05 11:17:37 -- deitz

Log message:
	Changed SizeofExpr to operate on a Variable* rather than a Type*.  It
	still has the same meaning and can be passed a Variable of a
	TypeSymbol if no variable is known.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             view.cpp 

---------------------------------------------------------------------------

05/06/05 11:28:06 -- bradc

Log message:
	Previously, we tried to determine a DomainType's rank at parse-time.
	This works OK for domains whose rank is specified with an integer
	literal, but doesn't work so well for domains whose rank is specified
	with a parameter expression since symbols are not resolved at
	parse-time.  Took this logic out of the parser & domain constructor
	and moved it to a new traversal called ResolveDomainRanks.  This is
	currently run after symbols have been resolved.  Eventually we may
	need to also run it after class cloning has occurred so that domain
	class members that are based on a class parameter can be set up
	properly.
	
	* added an implementation of Variable::intType() that computes the
	  integer value of certain parameter and constant integer variable
	  expressions.
	
	* fixed an apparent missing case in the DomainType traversal in which
	  its initializing expression was not being traversed.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	chapel/test/trivial/bradc/protoast/: mypasslist.h 
Added files:
	chapel/compiler/traversals/: resolveDomainRanks.cpp 
	                             resolveDomainRanks.h 

---------------------------------------------------------------------------

05/06/05 11:28:51 -- bradc

Log message:
	This should've gone in with my last check-in, which
	fixed this future.

Removed files:
	chapel/test/domains/bradc/: paramRank.future 

---------------------------------------------------------------------------

05/06/05 11:37:59 -- deitz

Log message:
	Added new AST expression CastLikeExpr that is similar to a CastExpr
	but instead of a Type* newType, it has Variable* variable.  This casts
	the expression to the type of the variable.
	
	This is useful in malloc, because when the constructor is cloned, we
	want the type associated with the malloc to change.
	
	I'm a little concerned about casts and cloning though.  When a
	function is cloned, should the cast be updated?  It seems like
	sometimes it should be.  If we can get this working, I can undo my
	last changes to SizeofExpr and this CastLikeExpr.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

05/06/05 11:41:47 -- bradc

Log message:
	Changed DomainType::idxType from a Type* to an IndexType*
	in order to remove the numerous static and dynamic casts
	that were used to get it back to an IndexType in the
	compiler.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

05/06/05 12:16:41 -- bradc

Log message:
	In a discussion about portability between gcc
	on Sun vs. everything else, realized that I'm
	increasingly offended by our need to #include
	inttypes.h, and so came up with a hack that
	allows us to use stdint.h (which also supports
	other abilities to specialize for platforms
	that we might anticipate needing).
	
	Added the ability to add a $PLATFORM-specific
	subdirectory to the include/ directories in
	the compiler and runtime, which will be
	searched prior to the main include directory,
	allowing platform-specific include files to
	be created.  Instantiated this directory for
	sunos, and put in a stdint.h file that
	#includes inttypes.h.  Changed all #inclusions
	of inttypes.h to stdint.h.

Modified files:
	chapel/compiler/include/: chpltypes.h list.h vec.h 
	chapel/compiler/make/: Makefile.compiler.head 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile chplmem.c 
Added files:
	chapel/compiler/include/sunos/: stdint.h 
	chapel/runtime/include/sunos/: stdint.h 

---------------------------------------------------------------------------

05/06/05 12:50:31 -- bradc

Log message:
	Did a similar stdint.h hack for freebsd as it
	didn't seem to support the file either.

Added files:
	chapel/compiler/include/freebsd/: stdint.h 
	chapel/runtime/include/freebsd/: stdint.h 

---------------------------------------------------------------------------

05/06/05 12:54:22 -- deitz

Log message:
	If a function is cloned, the members of its MemberAccesses are made
	unresolved.  It's likely that we should never try to resolve these
	before analysis anyway.
	
	Made a minor improvement to VarInitExpr::codegen which should never be
	executed unless something has gone wrong.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: clearTypes.cpp 

---------------------------------------------------------------------------

05/06/05 13:40:44 -- deitz

Log message:
	Added a couple temporaries to ResolveTypes so that return_type_info
	and type_info are only called once per symbol.

Modified files:
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/06/05 14:12:32 -- jplevyak

Log message:
	Fix return_type_info() which was returning the pre-clone type.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/06/05 17:41:03 -- deitz

Log message:
	This checkin gets class cloning working!  At least on the simple test
	cases that are written.
	
	Changed VarInitExpr to have an Expr rather than a VarSymbol.  I may
	change it back.  Note that this is only and can only be used for the
	default arguments to the default class constructor.
	
	Inserted code after resolveTypes in a new traversal called
	PostAnalysisCleanup that resolves the types of parameters to default
	constructors (and to default wrappers as they are copied).
	
	Fixed a bug in which the wrapper did not create ParenOpExprs but
	rather FnCalls so they were not resolved.  The coercion wrapper still
	creates a FnCall because it looks like call_info works wrong on it.
	
	Added new class cloning test
	
	  test/types/type_variables/deitz/test_clone_class2b
	
	as a simple test where the constructors are passed arguments.
	
	Removed futures for
	
	  test/types/type_variables/deitz/test_clone_class2
	  test/types/type_variables/deitz/test_clone_class2a

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share removeDeadSymbols.cpp 
	                         resolveTypes.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             removeNamedParameters.cpp 
	                             updateSymbols.cpp 
Added files:
	chapel/compiler/symtab/: postAnalysisCleanup.cpp 
	                         postAnalysisCleanup.h 
	chapel/test/types/type_variables/deitz/: test_clone_class2b.chpl 
	                                         test_clone_class2b.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class2.future 
	                                         test_clone_class2a.future 

---------------------------------------------------------------------------

05/08/05 18:51:47 -- jplevyak

Log message:
	Fix problem with ../test/functions/bradc/typefn2.chpl
	
	The problem was that I was not doing generic instantiation for pure
	type arguments.
	
	Preceeding examples were of the form:
	
	pragma "fast" function foo(type t, x:t)
	
	where some real variable "x" takes on a value of a type variable
	argument (which would be unnecessaty if we supported foo(x : ?t)).
	
	However, typefn2 is
	
	function min(type t): t
	
	And since I was keying off real variables before and this has non,
	I needed to add another case.
	
	In fixing this I discovered that there is a bug in generic instantiation
	and/or resolveTypes with respect to type variable return types.
	
	In order to patch it, I made analysis's return_type_info() always
	override whatever was in the AST.  This should likely be looked at.
	
	The line is commented at resolveTypes.cpp:77:
	
	        fn->retType = analysisRetType; // JBP: inserted to fix typefn2.chpl May 8, 2005
	
	Removing this line causes typefn2.chpl to FATAL.

Modified files:
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/09/05 09:08:49 -- jplevyak

Log message:
	Use the Symbol::noDefaultInit flag instead of trying go guess.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: test_swap.future 

---------------------------------------------------------------------------

05/09/05 09:09:27 -- jplevyak

Log message:
	Change future to bradc since it seems to be a codegen problem.

Added files:
	chapel/test/types/type_variables/deitz/: test_swap.future 

---------------------------------------------------------------------------

05/09/05 09:32:02 -- deitz

Log message:
	Pulled in John's change to ResolveTypes.
	
	Made it so that strings are default-initialized even if noDefaultInit
	is set.  This is because strings need to be initialized to avoid seg
	faults with the way we assign them.
	
	Removed test_swap future as it now works.

Modified files:
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: test_swap.future 

---------------------------------------------------------------------------

05/09/05 09:46:01 -- deitz

Log message:
	Added a slightly more complicated class cloning test and it works.

Added files:
	chapel/test/types/type_variables/deitz/: test_clone_class3.chpl 
	                                         test_clone_class3.good 

---------------------------------------------------------------------------

05/09/05 09:53:30 -- deitz

Log message:
	Added two more complicated class cloning tests.  One of them fails and
	I have the future.

Added files:
	chapel/test/types/type_variables/deitz/: test_clone_class4.chpl 
	                                         test_clone_class4.good 
	                                         test_clone_class5.chpl 
	                                         test_clone_class5.future 
	                                         test_clone_class5.good 

---------------------------------------------------------------------------

05/09/05 10:10:44 -- jplevyak

Log message:
	Add a Verify after the elminateReturns pass.
	
	  - Verify did not catch that elminateReturns was using insertAfter
	    on something in a CondExpr but not a BlockExpr which resulted in
	    a bogus AST structure.   We should probably check that.
	
	Fixed eliminateReturns to insert a BlockStmt to wrap the assignment
	  to _ret_val and the return.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: eliminateReturns.cpp 

---------------------------------------------------------------------------

05/09/05 10:36:41 -- jplevyak

Log message:
	New test to check for coercion of return values.

Added files:
	chapel/test/functions/jplevyak/: type_var_fun-1.chpl 
	                                 type_var_fun-1.good 

---------------------------------------------------------------------------

05/09/05 10:37:32 -- jplevyak

Log message:
	Add a pass of elminateReturns before analysis.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: eliminateReturns.cpp 

---------------------------------------------------------------------------

05/09/05 11:09:55 -- jplevyak

Log message:
	Add partial support for x.foo += x (AssignOp with operator used
	with a setter).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/09/05 11:13:49 -- jplevyak

Log message:
	Fix up headers

Modified files:
	chapel/compiler/include/: analysis.h 

---------------------------------------------------------------------------

05/09/05 12:45:23 -- jplevyak

Log message:
	Update tests for ret_val change

Modified files:
	chapel/test/flowanalysis/newast/: multiple_return.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/09/05 12:47:52 -- deitz

Log message:
	Added a new pass called Verify.  This replaces uses of Fixup-verify in
	the passlist.  It calls Fixup-verify.
	
	Fixup-verify only checked the parent pointers.  Verify will eventually
	check alot more.
	
	In addition to future verify checks for every kind of expression and
	statement in a verify method, this verify pass checks to make sure all
	the symbols in a Symboltable traversal are also define in an AST
	traversal.  I was running into huge problems before because things
	showed up in one kind of traversal and not the other.
	
	This test is currently off because IndexTypes are not fully defined.
	
	Stopped extracting the DefStmt in InsertVariableInitializations so
	that the verify continues to work.  Maybe this should be done by
	changing what is verified in the passlist.
	
	I added the CondStmt::verify and DefExpr::verify procedures but
	eventually we want verify procedures in all statements and
	expressions.  As an example of what these will do, the CondStmt makes
	sure that condExpr and thenStmt are non-null and makes sure that
	condExpr, thenStmt, and elseStmt are single expressions/statements
	rather than lists.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share fixup.cpp fixup.h 
	                             insertAnonymousDomains.cpp 
	                             insertVariableInitializations.cpp 
Added files:
	chapel/compiler/traversals/: verify.cpp verify.h 

---------------------------------------------------------------------------

05/10/05 08:46:45 -- jplevyak

Log message:
	Fix a couple of mismatched error messages.

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/10/05 09:38:15 -- jplevyak

Log message:
	This is a relatively large change, and it is not cleaned up, but I thought
	I had better checkpoint it now rather than risk divergence.
	
	The main change is to support setters and getters, but the changes are more
	far reaching than that.
	
	1. Add a function is_ref(Expr*) which determines whether or not an expression
	   returns a "reference".   This will be made into a member function.
	
	2. Using is_ref and a companion function on FnSymbols, as well as the exiting
	   function requiresCPtr(), do the appropriate impedence matching between
	   expressions, function arguments and function return values.
	
	3. Getters return reference when the thing being "got" is a value type.
	
	4. Members access are resolved into their component "member_type" and
	   "member_offset" which allows for polymorphic functions.
	
	5. Codegen for member accesses uses the "member_type" and "member_offset"
	   information when available.
	
	6. Added a new varType (varClass) VAR_REF which indicates that the
	   variable is holding a reference.
	
	   A corresponding flag will be put into functions to indicate that they
	   return references.
	
	7. ensured that "isConstructor" as well as "method_type" are preserved in
	   wrappers and instantiated generics
	
	8. Add functions on types is_Value_Type and is_Reference_Type.
	
	   These could be made into member functions if we want (I wasn't
	   planning on it).
	
	9. Concretized the ivars for each CreationSet coming out of analysis...
	   this is used to provided more precise variable by variable ivar
	   type and offset information.
	
	10. All AVar's now have a concretized type variable (though currently
	    only instance variable AVar's use it).
	
	11. resolveTypes now more aggressively uses the type information provided
	    by analysis.  In particular, analysis can override decalred reference types
	    (since they are only bounds anyway).  Currently I still defer to
	    declared scalar types since unused scalars would otherwise not have a
	    type from analysis (we could handle these cases specially, perhaps
	    emitting a warning).
	
	12. insertFunctionTemps and eliminateReturns now uses the new VAR_REF
	    where appropriate
	
	13. Expr(s) can be pre-resolved by setting the "resolved" field.  This
	    was introduced to deal with the phase ordering problem between
	    resolveOverloadedOperators and resolveSymbols... if these passes
	    are unified this could be removed.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp if1.cpp 
	chapel/compiler/include/: expr.h fa.h symbol.h type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             insertFunctionTemps.cpp 
	                             removeNamedParameters.cpp 
	                             resolveOverloadedOperators.cpp 
	                             resolveSymbols.cpp 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/10/05 10:22:44 -- jplevyak

Log message:
	Fixed those annoying test_clone_class1a problems... sorting Sum type output
	to normalize it.
	Made "is_ref" a member Expr::isRef().
	Added support for
	
	function foo() var : integer {
	}
	
	to the parser to indicate that the function foo() is both a setter
	and a getter.
	
	(currently not supported beyond the parser

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: expr.h symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/10/05 11:09:13 -- deitz

Log message:
	Instantiating a constructor now instantiates the class as well.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/10/05 11:48:46 -- deitz

Log message:
	Made small fix to verification though it is on the commented out part
	of it.

Modified files:
	chapel/compiler/traversals/: verify.cpp 

---------------------------------------------------------------------------

05/10/05 12:37:29 -- deitz

Log message:
	Cleaned up types by removing various subtypes of Type::codegen() that
	did the same thing.
	
	Removed StructuralType::codegen() which used to check to see if it was
	not dead.  Since dead types are now really removed, this is no longer
	necessary.
	
	It looks like analysis returns a dead type (for example, for the
	default type initialization variable) so in resolveTypes.cpp, I added
	a hack to make the type dtNil if the type analysis returns is dead.
	John, please take a look at this.  This might not be a hack and may be
	necessary (because this variable uses noDefaultInit).

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/10/05 15:14:48 -- deitz

Log message:
	Modified Symboltable::lookup etc. to lookup symbols in the class
	type's scope at the appropriate point when looking up symbols in
	methods.  The appropriate point is after the symbols in the parameter
	list of the method are looked at.
	
	Simplified ScopeResolveSymbols by removing code to resolve symbols in
	methods since this is now in lookup.
	
	Added a new kind of symbol called a ForwardingSymbol.  These symbols
	will eventually be included in scopes that use the "use" keyword.  The
	plan is that in the AST, the Variable* will refer directly to the
	symbol that it is using.  It will also contain a ForwardingSymbol
	field that will be used in code generation if the symbol was renamed.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h symbol.h 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

05/10/05 15:41:05 -- jplevyak

Log message:
	Ensure that dtNil is always live and that global variables are
	always live.  This addresses the reasons for the kludge where
	type_is_used was false in some cases.   Also sorted
	the call stack information for error messages to deal
	with another case where clone1a/b could have different output
	more or less randomly.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp if1.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

05/10/05 17:12:04 -- jplevyak

Log message:
	Introduce an assert to check that all types return true
	for  type_is_used().
	This involved adding an additional conditional so that
	FnSymbol::type is not checked.
	Yet another sort in the error message output.

Modified files:
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp 

---------------------------------------------------------------------------

05/10/05 17:33:01 -- deitz

Log message:
	Added initial support for chapel programs with multiple modules that
	make "use" of the multiple modules.  Added two new tests, which work,
	that test this new functionality slightly.
	
	In making this change, I made the default export true.  I would like
	to discuss with Brad an option of having a single header file for
	symbols that are exported.  Given the forwarding symbol and limited
	code mangling, I think we can get away with this.
	
	Added a new pass ResolveModuleUses that adds forwarding symbols to
	scopes where a use is used.  It also adds the module that is used to a
	list of modules in the current module so that the module will #include
	the other.  In addition, this pass adds a function call to the init
	function of that module to the init function of the current module.
	Perhaps it should be called at the site of the use instead.
	
	Added a forwarding symbol to variable.  I think this is unnecessary
	unless we want to change the name of forwarded symbols.  While that
	might be nice for code generation I think it will be needlessly
	complicated.
	
	Added a function Symboltable::getCurrentModule() that returns the
	current module during a traversal.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: expr.h files.h stmt.h symbol.h 
	                          symscope.h symtab.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             scopeResolveSymbols.cpp verify.cpp 
	chapel/compiler/util/: files.cpp 
Added files:
	chapel/compiler/traversals/: resolveModuleUses.cpp 
	                             resolveModuleUses.h 
	chapel/test/modules/deitz/: test_module_use1.chpl 
	                            test_module_use1.good 
	                            test_module_use2.chpl 
	                            test_module_use2.good 

---------------------------------------------------------------------------

05/10/05 18:43:25 -- jplevyak

Log message:
	Make the error message sort more robust.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

05/10/05 20:00:37 -- jplevyak

Log message:
	Implement new interface to call_info which supports queries
	over OPERATOR(s) FUNCTION(s) and SINGLE (only one call at
	this AST).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

05/11/05 07:35:58 -- jplevyak

Log message:
	Fix valgrind uninitialized variable "error" (GC zero's the data, so
	this change doesn't actually change the behavior of the program).

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

05/11/05 11:16:05 -- deitz

Log message:
	Added Expr::parentScope and Stmt::parentScope which store the scope
	that expressions and statements are in.  These are set in Fixup and
	verified in Fixup-verify.
	
	Fixed a bug in the traversals in which the currentScope might not be
	correct especially if the traversal was not started from a module.
	
	Changed atTop to be false when starting a traversal in a module so
	that the top level statement is actually traversed.
	
	If atTop is true in a traversal (at the beginning), the currentScope
	is set up.
	
	Fixed bugs in InsertFunctionTemps and InsertVariableInitializations in
	which expressions and statements had the wrong scopes because block
	statements were set up in ad hoc ways.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp symbol.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/traversals/: fixup.cpp insertFunctionTemps.cpp 
	                             insertVariableInitializations.cpp 

---------------------------------------------------------------------------

05/11/05 12:44:57 -- jplevyak

Log message:
	Added collect_symbols(... ,Type*) which works on new types, in
	particular the new type created when a generic constructor is instantiated.
	Added support for integrating the new type created when a generic
	constructor is instantiated.
	
	types/type_variables/deitz/test_typevar_class1.chpl  now
	fails because the _retval still has a type of 't' (the old
	generic type) instead of the correct newly instantiated type).

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: baseAST.h fa.h 
	chapel/compiler/symtab/: collectSymbols.cpp symtabTraversal.cpp 
	                         symtabTraversal.h 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class1.future 

---------------------------------------------------------------------------

05/11/05 13:13:16 -- deitz

Log message:
	Improved InsertFunctionTemps so that it doesn't insert a function temp
	if the scope of the statement is different than the scope of the
	function call.  This is the case, for example, when a function call is
	in a let expression.  Also fixed a bug in InsertFunctionTemps in which
	it did not insert function temps for function calls in the
	initialization expressions to DefExprs.
	
	Made TransformLetExprs call InsertFunctionTemps on the block statement
	it creates (since it will not have applied to this code before).
	
	Improved and rewrote TransformLetExprs to create a new scope and copy
	the symbols deeply.  Previously I just stole the let expression scope
	and stuck it in the block statement.  This new way is more robust.  It
	was difficult before because copying and replacing weren't as good as
	they are now.
	
	Added a test of 'record mycomplex' which will eventually be the code
	we use for complex numbers.

Modified files:
	chapel/compiler/traversals/: insertFunctionTemps.cpp 
	                             transformLetExprs.cpp 
Added files:
	chapel/test/classes/deitz/: test_mycomplex_record.chpl 
	                            test_mycomplex_record.good 

---------------------------------------------------------------------------

05/11/05 14:18:08 -- deitz

Log message:
	Added functionality to print_view to print out the types of symbols.

Modified files:
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

05/11/05 15:02:10 -- deitz

Log message:
	Updated regressions file, removing two tests that have been working
	for a while.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/11/05 15:31:21 -- deitz

Log message:
	Added Map<BaseAST*,BaseAST*>* as a parameter to
	FnSymbol::instantiate_generic which will return a map of every AST
	that was copied during an instantiation of a function (and if it is a
	constructor, the corresponding class).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/11/05 16:28:30 -- jplevyak

Log message:
	init_string returns "".
	sort the output of test_clone_class1a/b

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/11/05 16:35:28 -- deitz

Log message:
	Added some functions, not used yet, for eventually reworking copy and
	avoiding dynamic casts.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/include/: baseAST.h 

---------------------------------------------------------------------------

05/11/05 17:39:49 -- jplevyak

Log message:
	Changed the interface for the default_wrapper to use the same
	sort of interface we are using for coercions: namely instead
	of presenting MPositions provide Symbol * to indicate which
	arguments are to be defaulted.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/12/05 07:32:50 -- jplevyak

Log message:
	Forgot to checkin the prediff script

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class1a.prediff 
	                                         test_clone_class1b.prediff 

---------------------------------------------------------------------------

05/12/05 10:13:16 -- jplevyak

Log message:
	Fix test_class_list1.future.
	
	The issue was how to handle dispatch on "nil".  The problem being
	that the default constructor has a "nil" argument.
	
	class node {
	  var next: node;
	}
	
	the constructor is :
	
	function construct_node(var x : node) ...
	
	And the call from the default wrapper is:
	
	function defaulted_node() {
	  return construct_node(next = nil);
	}
	
	This will currently fail, because nil is not a subtype of node.
	
	There were two solutions, one of which would have been to remove the
	type declaration for the constructor parameter.
	
	Solution 1:
	
	function construct_node(var x)  ...
	
	The second solution to use a "aspect" (a statement to
	the compiler to use a particular type for dispatch purposes).
	
	Solution 2:
	
	function defaulted_node() {
	  return construct_node(next = nil:node);
	}
	
	The "aspect" tells the compiler what type to dispatch to for the nil.
	
	Generally, programmer's should be aware that they cannot dispatch on nil,
	and we might want to provide a aspects, at least of nil, as a part of the
	language.
	
	I implemented Solution 2 because it was the least intrusive.
	
	We might also want to consider also using Solution 1.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: symbol.h 
Removed files:
	chapel/test/classes/deitz/: test_class_list1.future 

---------------------------------------------------------------------------

05/12/05 10:35:27 -- jplevyak

Log message:
	The impossible is no longer happening.

Removed files:
	chapel/test/functions/bradc/: typefn5.future 

---------------------------------------------------------------------------

05/12/05 10:54:23 -- deitz

Log message:
	Made the following traversals work on MODULES_USER and
	MODULES_COMMON_AND_USER:
	
	     EliminateReturns
	     ProcessParameters
	     ResolveDomainRanks
	
	No changes to the traversals were required.

Modified files:
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             processParameters.cpp 
	                             resolveDomainRanks.cpp 

---------------------------------------------------------------------------

05/12/05 11:09:11 -- shannon

Log message:
	Fixed a couple bugs and some other ugliness.
	
	Specifically:
	
	* chplmem.c:  Fixed a bug in the totalMem calculation
	  where I had neglected to subtract from the total in
	  the case where a new address was not returned on
	  realloc yet the size of the chunk of memory had changed.
	
	  Fixed the updateMemory function to rehash on the new
	  memory location returned on realloc so I can find the
	  entry later..
	
	  Broke the updateMemStat function down into
	  increaseMemStat and decreaseMemStat.  I was passing a
	  negative value into an size_t argument.  Woops.
	
	* Added a test.
	
	* Updated the output of a couple of tests to reflect
	  now-correct values.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: chplmem_tests.h 
	chapel/runtime/src/: chplmem.c chplmem_tests.c 
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
Added files:
	chapel/test/memory/shannon/: allocAndFree.chpl 
	                             allocAndFree.execopts 
	                             allocAndFree.good 

---------------------------------------------------------------------------

05/12/05 11:10:07 -- jplevyak

Log message:
	UpdateSymbols was not updating the CastExpr::newType field which was
	resulting in failures for instantiated generic functions which operated
	on primitive (integer, etc) types.
	
	Removed the effected futures.

Modified files:
	chapel/compiler/traversals/: updateSymbols.cpp 
Removed files:
	chapel/test/functions/bradc/: typefn.future typefn2.future 
	                              typefn3.future 

---------------------------------------------------------------------------

05/12/05 12:24:13 -- bradc

Log message:
	Small change to the way FnSymbols are stored.  Previously,
	we were storing the function's return type as both its
	FnSymbol::type and its FnSymbol::retType, and when we
	wanted its return type, in some cases we would refer to
	one field and in other cases the other.  This checkin causes
	FnSymbol::type to no longer refer to the function's return
	type, though it does not point to a correct concept of
	function type yet either.
	
	What I've done is to create a new Type subclass -- FnType --
	which is currently nothing other than a placeholder.
	Eventually, function types should store the types (and names?)
	of their parameters as well as the function's return type,
	and will be used to represent the types of function variables
	and parameters as well as Function Symbols themselves.  For
	now, FnType is simply a placeholder to serve as a sentinel
	that FnSymbol::type is no longer the function's return type.
	Codegening a FnType results in an internal error, for example.
	
	In order to make analysis' switch statements cover all of the
	type cases, I inserted the following case to build_type,
	which may be completely wrong:
	
	    case TYPE_FN:
	      t->asymbol->sym->type_kind = Type_FUN;
	      break;
	
	However, it also didn't seem to break anything.  Put in a
	comment marking it as questionable code which John could
	pull out if it seems OK, or modify if it simply seems OK
	for now (until we implement FnTypes more fully, e.g.)

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/traversals/: verifyASTType.cpp 

---------------------------------------------------------------------------

05/12/05 12:56:29 -- jplevyak

Log message:
	Hopefully fix compilation on gcc 3.3.X for cygwin.
	Moved declarations to the top of the function.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 

---------------------------------------------------------------------------

05/12/05 13:35:25 -- jplevyak

Log message:
	Change the last wrapper (the order_wrapper) to not depend on MPosition.
	Removed "pattern.h" from the #includes in symbol.cpp!

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/12/05 15:36:49 -- jplevyak

Log message:
	Change the clone() API to remove the Callback and to only use
	the clone_map.
	
	Note: I didn't change all the "copyXXXX" functions which still pass around
	the NULL pointer.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 

---------------------------------------------------------------------------

05/12/05 15:45:28 -- deitz

Log message:
	Added test that shows bug in user types of structural types.  This is
	an IO codegen problem.

Added files:
	chapel/test/classes/deitz/: test_class_in_usertype.chpl 
	                            test_class_in_usertype.future 
	                            test_class_in_usertype.good 

---------------------------------------------------------------------------

05/12/05 15:59:32 -- bradc

Log message:
	Based on John's note earlier about FnTypes' symbols
	not appropriately pointing back to their FnSymbol,
	set the symbol to NULL instead.  I was concerned
	that if a type didn't have a symbol that something
	downstream would choke, so used this as a short-term
	hack.  It turns out that nothing does choke (nobody
	must look at FnSymbol::type much), so I removed it
	for now.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/12/05 16:02:45 -- bradc

Log message:
	Changed Roxana's #define and commented out code into
	a temporary internal flag named "--tmpRoxIndexType"
	which turns on the code in question.  This is done
	in order to make her tests use this flag and ensure
	that things don't regress without anyone noticing.
	However, I haven't actually looked at getting the
	tests themselves working yet.
	
	It seems like it would be good to have all of our
	flags that are temporary workarounds have a common
	prefix and/or be in a similar area of the --help
	message so that we can prune them later if we lose
	track of them.  That's what the "--tmp" in my flag
	name is meant to suggest, but I'm open to other
	schemes for keeping these flags straight.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp symtab.cpp 
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             insertIndexType.h 

---------------------------------------------------------------------------

05/12/05 16:04:57 -- jplevyak

Log message:
	Make sure to unalias aspects (dereference type variables used as an "aspect").

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/12/05 16:36:59 -- deitz

Log message:
	See note below about what is commented out.  Complex is still handled
	the old way.
	
	Added standard include module _chpl_complex.chpl in runtime/include/.
	
	This is now parsed in.  It is labeled as a MOD_STANDARD to distinguish
	it from MOD_USER.
	
	Traversals can now be run on the following set of modules:
	
	  MODULES_USER - only user modules
	  MODULES_CODEGEN - user modules, common module, standard modules
	  MODULES_ALL - user, common, standard, and internal
	
	Traversals that are restricted now set whichModules to MODULES_CODEGEN
	instead of MODULES_COMMON_AND_USER.
	
	Added a pragma for renaming a symbol.  So in the complex record, we
	use a pragma to rename it (cname) to _chpl_complex because complex
	clashes with the C compiler's complex.
	
	Added a pass to change complex literals to complex record constructor
	invocations.
	
	NOTE: This pass is not invoked currently.  Also, the complex module is
	not used by other modules.  The code to do these is commented out.
	The main first problem is that read and write need to be made more
	robust.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: chplenum.h parser.h symbol.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertOutParameterInitializations.cpp 
	                         insertWriteFns.cpp 
	                         postAnalysisCleanup.cpp printSymtab.cpp 
	                         resolveTypes.cpp symscope.cpp 
	                         symtab.cpp symtabTraversal.cpp 
	chapel/compiler/traversals/: Makefile.share eliminateReturns.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             resolveDomainRanks.cpp 
	                             resolveModuleUses.cpp 
	                             resolveModuleUses.h 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp verify.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	chapel/compiler/traversals/: constructComplexLiterals.cpp 
	                             constructComplexLiterals.h 
	chapel/runtime/include/: _chpl_complex.chpl 

---------------------------------------------------------------------------

05/12/05 17:15:19 -- deitz

Log message:
	Moved Vec<FnSymbol*> methods out of StructuralType:: and into Type::.
	This means that a secondary method can be defined on any type.
	
	Renamed FnSymbol::classBinding to FnSymbol::typeBinding.
	
	Added a test case that defines a function integer.print() and calls it
	as in i.print().  It works.  Added a test case that yields a syntax
	error when you try to write 12.print().

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp verify.cpp 
Added files:
	chapel/test/trivial/deitz/: test_integer_method.chpl 
	                            test_integer_method.good 
	                            test_integer_method2.chpl 
	                            test_integer_method2.future 
	                            test_integer_method2.good 

---------------------------------------------------------------------------

05/12/05 17:39:49 -- jplevyak

Log message:
	Made sure that dead CreationSets were removed from the list of
	creators of a type before cloning.
	Do not print out debugging information on dead EntrySets.

Modified files:
	chapel/compiler/analysis/: fa.cpp clone.cpp 

---------------------------------------------------------------------------

05/12/05 17:50:19 -- bradc

Log message:
	Chaned Roxana's future tests that were working
	under certain conditions when she checked her
	code in on 4/28/05 to use the .compopts feature
	with the new --tmp flag so that they will be
	tested on a nightly basis.
	
	Re-enabled these tests by putting in yet
	another conditional in resolveTypes that
	determines whether or not a given type
	should be replaced with the output of
	analysis.  In particular, made IndexTypes
	not get replaced by analysis because it
	seems to replace them with integers.
	
	Hoisted the bulk of this conditional into
	a helper function replaceTypeWithAnalysisType()
	in an attempt to make the code a bit more
	readable.

Modified files:
	chapel/compiler/symtab/: resolveTypes.cpp 
Added files:
	chapel/test/domains/roxana/: test_index_expr0.compopts 
	                             test_index_expr2.compopts 
Removed files:
	chapel/test/domains/roxana/: test_index_expr0.future 
	                             test_index_expr2.future 

---------------------------------------------------------------------------

05/13/05 08:49:48 -- deitz

Log message:
	Removed CloneCallback from the copy and clone functions now that the
	new Map interface is used.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h symbol.h 
	                          type.h 
	chapel/compiler/traversals/: insertFunctionTemps.cpp 
	                             transformLetExprs.cpp 

---------------------------------------------------------------------------

05/13/05 11:10:34 -- shannon

Log message:
	Removed two now-passing tests and reordered the listing
	of two tests to match the nightly output.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/13/05 11:18:23 -- bradc

Log message:
	Took out a special-casing for returning string types
	that used to be required before Steve handled string
	initialization differently in his 05/09/05 check-in.

Modified files:
	chapel/compiler/traversals/: eliminateReturns.cpp 

---------------------------------------------------------------------------

05/13/05 11:49:10 -- bradc

Log message:
	Updated regressions for other platforms that weren't
	captured -- test_clone_class1a/b on linux valgrind
	that are failing in qsort; test_clone_class3/4 on
	linux64 that are hitting an assertion in resolveTypes
	due to the result of type_is_used(); test_index_expr0/2
	on SunOS for unknown reasons.  Also added usage info
	at the top of the file to make the file's intent and
	format somewhat documented.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/13/05 21:11:57 -- jplevyak

Log message:
	Fix SEGV associated with IF1 translation of EXPR_FORALL

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/15/05 21:56:09 -- jplevyak

Log message:
	Fix 2 valgrind failures.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

05/16/05 10:44:31 -- bradc

Log message:
	Attempting to set an environment variable to squelch
	GC warnings about large block sizes.  We should debug
	this eventually, but for now I just want to see if we
	can turn them off.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/16/05 10:57:28 -- deitz

Log message:
	Made FnSymbol::instantiate_generic instantiate all the methods of a
	class when it is called on the constructor of that class.  It does not
	copy other functions that act on the instantiated class yet.
	
	I also made it so that the Map<BaseAST*,BaseAST*>* parameter of
	instantiate_generic is filled in.  This keeps track of everything that
	is copied when instantiate_generic is called.
	
	Fixed a bug in the copy infrastructure in which copy rather than
	copyInternal was called in VarInitExpr::copy.  Also I extended
	copyInternal to work on Symbols and Types because these should call
	the copyInternals of expressions and statements as well.
	
	Improved UpdateSymbols to update MemberAccesses.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: symbol.h type.h 
	chapel/compiler/traversals/: updateSymbols.cpp 

---------------------------------------------------------------------------

05/16/05 11:08:32 -- bradc

Log message:
	Fixed a bug in the test system pointed out by John in
	which a future test whose program execution failed
	(either through a fault or a non-zero status code)
	would be flagged as a failure rather than a future
	failure.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

05/16/05 11:28:25 -- bradc

Log message:
	Removed note about Sun regression due to GC warning as my
	recent change to start_test seems to have successfully
	squelched it.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/16/05 12:13:49 -- deitz

Log message:
	FnSymbol::instantiate on a class constructor now removes the type
	variables that have been instantiated from the class.  A little work
	is still required to get them removed from the constructors.
	
	Made UpdateSymbols update the _getter and _setter pointer of a FnSymbol.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/traversals/: updateSymbols.cpp 

---------------------------------------------------------------------------

05/16/05 14:18:59 -- jplevyak

Log message:
	Seperate SpecializeParenOpExprs into pre-analysis and post analysis
	portions.  The latter to be ultimately merged into ResolveSymbols and
	ReesolveOverloadedOperators.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 

---------------------------------------------------------------------------

05/16/05 14:36:26 -- jplevyak

Log message:
	Remove some futures which are now working for the right reasons.

Removed files:
	chapel/test/functions/jplevyak/: equal-8.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple6.future 
	chapel/test/types/tuple/jplevyak/: tuple_index-1.future 
	                                   tuple_index-2.future 

---------------------------------------------------------------------------

05/16/05 15:07:48 -- bradc

Log message:
	Killed some dead code in the glomstrings routines that
	a code review with Shannon turned up.

Modified files:
	chapel/compiler/util/: stringutil.cpp 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/memory/shannon/: memstatPrint.good 
	                             printFinalMemStat.good 
	                             printMemTable.good 

---------------------------------------------------------------------------

05/16/05 15:08:16 -- jplevyak

Log message:
	Fixed an issue with constuctors for TYPE_TUPLE.
	
	The issue now for test_tuple_simple1/3/4/5 is in codegen:
	
	> In file included from /tmp/chpl-jplevyak-13063.deleteme/_CommonModule.c:2:
	> /tmp/chpl-jplevyak-13063.deleteme/_CommonModule.h:16: warning: parameter has incomplete type
	> In file included from /tmp/chpl-jplevyak-13063.deleteme/_chpl_complex.c:2:
	> /tmp/chpl-jplevyak-13063.deleteme/_CommonModule.h:16: warning: parameter has incomplete type
	> In file included from /tmp/chpl-jplevyak-13063.deleteme/test_tuple_simple5.c:2:
	> /tmp/chpl-jplevyak-13063.deleteme/_CommonModule.h:16: warning: parameter has incomplete type
	
	Essentially there is an ordering problem in CommonModule.h
	where ___tuple_QQQ_QQQ is being defined after it is used.
	
	This could be avoided by doing a forward definition:
	
	struct ___tuple_QQQ_QQQ;
	...
	_tuple_QQQ_QQQ _assign0(_tuple_integer_integer _arg1, struct _tuple_QQQ_QQQ _arg2);
	
	Or by doing the definition first.
	
	If you guys want I can take a look at it...
	
	*****************************************************************
	
	typedef struct ___tuple_integer_integer _tuple_integer_integer;
	typedef struct ___tuple_QQQ_QQQ _tuple_QQQ_QQQ;
	void __init__CommonModule(void);
	struct ___tuple_integer_integer {
	  _integer64 _field1;
	  _integer64 _field2;
	};
	
	void __tuple_integer_integer_set__field1(_tuple_integer_integer* const this, _integer64 _arg);
	void __tuple_integer_integer_set__field2(_tuple_integer_integer* const this, _integer64 _arg);
	_tuple_integer_integer _construct__tuple_integer_integer(_integer64 _field1, _integer64 _field2);
	_tuple_integer_integer _construct__tuple_integer_integer_default_params_wrapper_1(void);
	_tuple_QQQ_QQQ _assign0(_tuple_integer_integer _arg1, _tuple_QQQ_QQQ _arg2);
	struct ___tuple_QQQ_QQQ {
	  _integer64 _field1;
	  _integer64 _field2;
	};
	
	void __tuple_integer_integer_write(_tuple_integer_integer* const _this);
	void __tuple_QQQ_QQQ_write(_tuple_QQQ_QQQ* const _this);

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/16/05 17:15:52 -- bradc

Log message:
	Changed implementation of argument types "F" and "f"
	in arg.cpp to assume that the target is a bool
	rather than an int and converted all such target
	variables from ints to bools.
	
	This change was motivated by a subtle bug that showed
	up on platforms with a different endianness (like sunos),
	in which accidentally declaring the target as a bool
	rather than an int would cause it to not be set
	properly.  By making arg.cpp assume a bool target,
	the reverse mistake (using an int that's used only as
	a boolean value) should not result in a similar error
	since integer tests are for zero vs. nonzero and ints
	are bound to be at least as large as ints.  Moreover,
	it seems reasonable to use bool values to represent
	boolean toggles.
	
	Also, removed an extraneous linefeed from the
	insertAnonymousTypes pass that only showed up for
	Roxana's tests.  Updated the output of these tests
	to get rid of the linefeed.

Modified files:
	chapel/compiler/include/: driver.h mysystem.h 
	chapel/compiler/main/: arg.cpp driver.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	chapel/compiler/util/: mysystem.cpp 
	chapel/test/domains/roxana/: test_index_assign.good 
	                             test_index_expr.good 
	                             test_index_expr0.good 

---------------------------------------------------------------------------

05/16/05 17:28:13 -- bradc

Log message:
	Some fixes related to my last check-in that only showed up
	when the unit tests were rebuilt.

Modified files:
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

05/17/05 09:29:54 -- bradc

Log message:
	Removed regressions that have been fixed over the past
	few days.  We're in our strongest standing we've been
	in for awhile...  only a few linux64 regressions remain
	apart from the two temporary intentional regressions
	test_array_basic1 and test_array_of_record1.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/17/05 10:31:42 -- bradc

Log message:
	Updated a comment concerning the codegen-ing of an
	extra pair of braces around a function's body since
	I thought they were no longer necessary and was about
	to remove them.  Turns out that they still are
	necessary, so clarified the comment a bit to avoid
	making this mistake again.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/17/05 10:47:30 -- deitz

Log message:
	Minimal changes to turn Stmt* into BlockStmt* for the stmt within a
	LabelStmt and the then and else statements within a CondStmt.  This
	will allow for inserting before and after within either of these
	blocks.
	
	Note that this change does not set up scopes for these block
	statements.  This should be done with changes to the parser and the
	addition of Symboltable::startCondStmt etc.

Modified files:
	chapel/compiler/AST/: stmt.cpp type.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

05/17/05 10:50:59 -- jplevyak

Log message:
	Update information on Linux64 specific regressions

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/17/05 10:58:29 -- jplevyak

Log message:
	Add a new test case which mirrors the Linux64 test failures
	types/type_variables/deitz/test_clone_class3/4 on the 32-bit platforms.

Added files:
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_clone_class-1.chpl 
	                                            test_clone_class-1.future 
	                                            test_clone_class-1.good 

---------------------------------------------------------------------------

05/17/05 11:03:44 -- bradc

Log message:
	It seems that when a nogc version of the compiler is
	built, a bunch of *.nogc.cpp files are created against
	my better wishes.  Will work on fixing this, but for
	now, am adding *.nogc.cpp to the make clean rule so
	that at least it's easy to clean up.

Modified files:
	chapel/compiler/make/: Makefile.compiler.head 

---------------------------------------------------------------------------

05/17/05 11:06:47 -- bradc

Log message:
	Took out a handful of dynamic casts of FnSymbol::body to
	BlockStmt that Steve pointed out I forgot to remove when
	I converted body from a Stmt* to a BlockStmt*.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertOutParameterInitializations.cpp 
	chapel/compiler/traversals/: eliminateReturns.cpp 
	                             findUnknownTypes.cpp 

---------------------------------------------------------------------------

05/17/05 14:18:51 -- deitz

Log message:
	Uninitialized complex variables do not resolve in overloaded functions
	correctly.  They are treated as floats.

Added files:
	chapel/test/types/complex/deitz/: test_complex_overload.chpl 
	                                  test_complex_overload.future 
	                                  test_complex_overload.good 

---------------------------------------------------------------------------

05/17/05 14:24:28 -- deitz

Log message:
	Functions that take enum types don't work.  A bogus coercion wrapper
	is created and the original function is lost.

Added files:
	chapel/test/types/enum/deitz/: test_enum_overload.chpl 
	                               test_enum_overload.future 
	                               test_enum_overload.good 

---------------------------------------------------------------------------

05/17/05 15:03:11 -- deitz

Log message:
	This test shows a bug in passing a member access of a member access to
	a function.  The new code generation scheme prints out a pointer.

Added files:
	chapel/test/classes/deitz/: test_nested_record_function.chpl 
	                            test_nested_record_function.future 
	                            test_nested_record_function.good 

---------------------------------------------------------------------------

05/17/05 16:34:02 -- jplevyak

Log message:
	update .future

Modified files:
	chapel/test/types/complex/deitz/: test_complex_overload.future 

---------------------------------------------------------------------------

05/17/05 16:55:16 -- jplevyak

Log message:
	Fix overloading of enumerations.
	Remove .future for the test which exposed the bug.

Modified files:
	chapel/compiler/analysis/: pattern.cpp sym.cpp 
Removed files:
	chapel/test/types/enum/deitz/: test_enum_overload.future 

---------------------------------------------------------------------------

05/17/05 17:13:04 -- deitz

Log message:
	Made defaultVal of dtComplex a ComplexLiteral.  It was erroneously a
	FloatLiteral.

Modified files:
	chapel/compiler/AST/: type.cpp 
Removed files:
	chapel/test/types/complex/deitz/: test_complex_overload.future 

---------------------------------------------------------------------------

05/18/05 09:23:55 -- deitz

Log message:
	Added new runtime procedures
	
	  char* _chpl_tostring_boolean(_boolean x, char* format)
	  char* _chpl_tostring_integer(_integer64 x, char* format)
	  char* _chpl_tostring_float(_float64 x, char* format)
	  char* _chpl_tostring_complex(_complex128 x, char* format)
	
	that convert strings to boole, integer, float, and complex.
	
	Added support for converting primitive data types to strings using a
	cast like mechanism.  For example,
	
	  var i : integer = 12;
	  var s : string = i:"%5d";
	
	converts the value of i to a string using the format specified in the
	format string.
	
	This is implemented in the parser so that when the :STRINGLITERAL is
	parsed, the overloaded _chpl_tostring function call is created.
	
	Reimplemented the rename pragma to fire just before code generation.
	This is important if it is used on functions that are overloaded or
	whose names may be mangled by the compiler.  They are renamed after
	all this mangling and can thus match up with functions in the runtime.
	
	I think this could be a more general mechanism for converting any type
	to a string if we let the user overload this _chpl_tostring function
	on their user-defined types.  We may even provide defaults for
	structural types like we do with read and write.  We may want to
	rename this function, something like tostring.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/symtab/: legalizeCNames.cpp 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/arrays/bradc/: enumarray.chpl 
	chapel/test/flowanalysis/newast/: enumarray.chpl 
	                                  formatoutput.chpl 
	chapel/test/trivial/bradc/: formatoutput.chpl 
Added files:
	chapel/test/arrays/bradc/: enumarray.future 
	chapel/test/flowanalysis/newast/: enumarray.future 
	                                  formatoutput.future 
	chapel/test/trivial/bradc/: formatoutput.future 
	chapel/test/trivial/deitz/: test_format_primitives.chpl 
	                            test_format_primitives.good 

---------------------------------------------------------------------------

05/18/05 09:28:12 -- jplevyak

Log message:
	Work on getting generic types along with all the related functions
	instantiated.
	Move to using the map returned by instantiate generics instead of using
	collect_asts().
	Fixed a bug whereby cloning of a FnSymbol didn't put the symbol itself
	into the map.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 

---------------------------------------------------------------------------

05/18/05 09:45:06 -- deitz

Log message:
	Added some new runtime procedure for output of primitive types.  Once write is a normal overloaded function, these will be used and the others will not.
	
	This is an intermediary checkin and has no effect.

Modified files:
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

05/18/05 09:53:51 -- jplevyak

Log message:
	Fix bug where "isRef()" was not being consulted when codegen'ing
	MemberAccesses.
	Removed .future.

Modified files:
	chapel/compiler/AST/: expr.cpp 
Removed files:
	chapel/test/classes/deitz/: test_nested_record_function.future 

---------------------------------------------------------------------------

05/18/05 10:41:23 -- shannon

Log message:
	Standardized the runtime error messages with the addition
	of a few functions in the error.c file:
	
	  printError(char* message)
	  printWarning(char* message)
	  printInternalError(char* message)
	
	Changed the expected output of a bunch of tests to reflect
	the new standard.
	
	Added a test for when the --memmax flag is not given a
	byte value.

Modified files:
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile arg.c chplio.c chplmem.c 
	                     chpltypes.c config.c 
	chapel/test/execflags/shannon/configs/: configVarDash.good 
	                                        configVarDashS.good 
	                                        configVarDashSVarEquals.good 
	                                        configVarFileStringsMismatch.good 
	                                        configVarFileStringsNoEquals.good 
	                                        configVarInvalidBoolean.good 
	                                        configVarInvalidComplex.good 
	                                        configVarInvalidFloat.good 
	                                        configVarInvalidInteger.good 
	                                        configVarInvalidName.good 
	                                        configVarSetNotDeclared.good 
	                                        configVarTwoModsNoneSpecified.good 
	                                        configVarWithSpaces.good 
	chapel/test/memory/shannon/: freedWithoutMalloc.good 
	                             memstatFlag.good memtableFlag.good 
	                             reallocWithoutMalloc.good 
	                             thresholdWithoutTrace.good 
	chapel/test/memory/shannon/outofmemory/: mallocOutOfMemory.good 
	chapel/test/trivial/shannon/: readStringOverflow.good 
	                              readWriteBool.good 
	                              readWriteComplex.good 
	                              readWriteComplexFail1.good 
Added files:
	chapel/runtime/include/: error.h 
	chapel/runtime/src/: error.c 
	chapel/test/memory/shannon/: memmaxBytes.chpl 
	                             memmaxBytes.execopts 
	                             memmaxBytes.good 

---------------------------------------------------------------------------

05/18/05 10:43:51 -- jplevyak

Log message:
	Generic Instantiation of types and member functions when the contructor
	is intantiated works up to codegen.
	Changed the .future to reflect this.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/include/: pattern.h sym.h 
	chapel/compiler/traversals/: updateSymbols.cpp updateSymbols.h 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class1.future 

---------------------------------------------------------------------------

05/18/05 11:34:58 -- jplevyak

Log message:
	Patch cg to handle "print" as __primitive("print", ... ) in lowlevelcodegen.

Modified files:
	chapel/compiler/analysis/: cg.cpp 

---------------------------------------------------------------------------

05/18/05 11:37:01 -- shannon

Log message:
	Fixed a bug that caused a seg fault when the
	--memthreshold flag was used without specifying
	a byte value.

Modified files:
	chapel/runtime/src/: arg.c 

---------------------------------------------------------------------------

05/18/05 12:04:50 -- deitz

Log message:
	Futurized this test.  It creates two identical unions.  These are
	identical structural types.  We need to transform one of them into a
	UserType.

Added files:
	chapel/test/classes/bradc/unions/: twounions.future 

---------------------------------------------------------------------------

05/18/05 12:22:20 -- deitz

Log message:
	This checkin implements write and writeln using overloaded functions.
	
	SpecializeParenOpExprs, though this should eventually be removed, now
	implements the transformation:
	
	  writeln(x, y, z);  ==>  write(x); write(y); write(z); writeln();
	
	The write functions are now free to be treated like functions resolved
	via function overloading.  We implement the primitive write functions
	in the prelude for integer, float, string, boole, complex.
	
	Put in special stopgap write functions for unions, arrays, enums,
	domains, and sequences.  These stopgaps are found at code generation
	and specialized code is generated to handle these objects.  Eventually
	this will be cleaned up and these stopgaps removed.
	
	Removed the call to the pass InsertWriteFns.  These are now inserted
	in BuildClassConstructorsEtc.  This pass may eventually be a candidate
	for making into multiple passes or at least renaming.  Maybe something
	like BuildDefaultFunctionsOnTypes.
	
	This checkin contains a patch from John to create __primitives for
	write, read and tostring in the preludes.
	
	Note that write is overloaded over nilType as well.  This may or may
	not be necessary.  It is currently done so that we can print out the
	value of an object of a class that is never assigned.
	
	With this checkin arrays of floats and complexes of floats now print
	out correctly (.0).
	
	This checkin updates some of Shannon's memtests because the memory
	usage has changed.  Other .goods have changed too.  Various reasons.
	New analysis errors because write is a function, new flowanalysis
	output.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
	chapel/test/: REGRESSIONS 
	chapel/test/arrays/bradc/: domarr.good 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/domains/roxana/: test_index_expr.good 
	                             test_index_expr0.good 
	                             test_index_expr2.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  octalliteral.good onearg.good 
	                                  pareninit.good printempty.good 
	                                  printstring.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/memory/shannon/: configVarFile.good 
	                             memstatPrint.good 
	                             printFinalMemStat.good 
	chapel/test/trivial/bradc/: defaultinit.good 
	chapel/test/types/complex/bradc/: intfloatelement.good 
	chapel/test/types/complex/deitz/: test_complex_overload.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/18/05 13:27:01 -- deitz

Log message:
	Remembered that type variables in parameter lists to functions should
	be ParamSymbols not TypeSymbols.  I made the parameter to constructors
	for classes with type variables take a TypeSymbol.
	
	For discussion, and I think John wanted to do this, but we should
	probably have another Type subtype that could point to a TypeSymbol
	that is a VariableType.  I just use the TypeSymbol that is in the
	class currently for the constructor, but when there are more
	constructors, we may need multiple constructors with the type
	parameter.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

05/18/05 16:13:14 -- deitz

Log message:
	This checkin implements read using overloaded functions.
	
	Read is still not implemented on structural types.
	
	In this checkin, test/trivial/shannon/readWriteComplexTuple became
	futurized since formatted read is no longer supported.  We should come
	up with a better story for this when we have the time.
	
	There is currently a stopgap for reading enums.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             specializeParenOpExprs.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/trivial/shannon/: readWriteComplexTuple.future 

---------------------------------------------------------------------------

05/18/05 16:58:17 -- jplevyak

Log message:
	Step 1: merge all the code which attempts to resolve call targets
	or modify ParenOps post-analysis into one file.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
Removed files:
	chapel/compiler/traversals/: resolveOverloadedOperators.cpp 
	                             resolveOverloadedOperators.h 

---------------------------------------------------------------------------

05/18/05 16:59:46 -- jplevyak

Log message:
	Update .future to use my username like all the other .futures.

Modified files:
	chapel/test/domains/roxana/: test_index_expr1.future 

---------------------------------------------------------------------------

05/18/05 17:17:26 -- deitz

Log message:
	Removed dead code from my changes that made read, write, and writeln
	overloaded chapel functions.
	
	Removed IOCall Expr and ioCallType enum.
	
	Removed all code that supported these.
	
	Removed Type::...IO... functions.
	
	Removed duplicated runtime code in chplio and chpltypes.  I had copied
	things and made different names to make it easier to make my changes.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h chplenum.h expr.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
	chapel/compiler/traversals/: Makefile.share 
	                             specializeParenOpExprs.cpp 
	                             specializeParenOpExprs.h 
	                             verifyASTType.cpp 
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Removed files:
	chapel/compiler/symtab/: insertWriteFns.cpp insertWriteFns.h 

---------------------------------------------------------------------------

05/19/05 08:57:36 -- shannon

Log message:
	Changed a couple of codegen'd error messages to
	reference the new runtime error message wrapper.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/test/trivial/shannon/: readWriteEnum.good 

---------------------------------------------------------------------------

05/19/05 10:53:05 -- shannon

Log message:
	Added fflush(stdout) to my runtime error
	message wrappers.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/runtime/src/: chplio.c error.c 

---------------------------------------------------------------------------

05/19/05 11:15:29 -- jplevyak

Log message:
	Cleanup of resolveSymbols.
	Removed useOldConstructor flag which was nolonger used.
	Removed Expr::resolved variable which is no longer needed to deal
	with phase ordering problems.  Added more comments and moved
	the "no analysis" code out of line to reduce clutter.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: driver.h expr.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 

---------------------------------------------------------------------------

05/19/05 11:35:01 -- deitz

Log message:
	Refactored the code for building the write and read functions of
	Types.  Types now have methods
	
	  bool Type::hasDefaultWriteFunction
	  Stmt* Type::buildDefaultWriteFunctionBody
	  bool Type::hasDefaultReadFunction
	  Stmt* Type::buildDefaultReadFunctionBody
	
	that say whether the type has a default read or write function and
	create the body of them.  These functions are called in
	BuildClassConstructorsEtc.
	
	Removed
	
	  SymScope::findEnclosingScopeType
	  SymScope::findEnclosingScopeLessType
	
	replacing them with
	
	  SymScope::findModuleScope.
	
	This function searches up the parents until it finds a module scope.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: symscope.h type.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

05/19/05 11:46:55 -- shannon

Log message:
	Forgot to include this with the last checkin.
	Change the order of the test output thanks to
	the fflush().

Modified files:
	chapel/test/trivial/shannon/: readWriteComplex.good 

---------------------------------------------------------------------------

05/19/05 12:03:36 -- deitz

Log message:
	Put in a catch so that if the user defines a read or write function
	for a type that has a default read or write function, the compiler
	will not create its default read or write function.
	
	Added a test case that defines and uses a write function for a record.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Added files:
	chapel/test/classes/deitz/: test_record_user_write.chpl 
	                            test_record_user_write.good 

---------------------------------------------------------------------------

05/19/05 14:10:17 -- shannon

Log message:
	Added the --memmax runtime option.  "--memmax=<n>"
	simulates "n" bytes of memory available.
	
	For instance:
	
	  > a.out --memstat
	  Final Memory Statistics:  totalMem=1012, maxMem=1047
	
	  > a.out --memmax=1000
	  ***Error: Exceeded memory limit***

Modified files:
	chapel/runtime/src/: chplmem.c 
Added files:
	chapel/test/memory/shannon/: memmaxExceeds.chpl 
	                             memmaxExceeds.execopts 
	                             memmaxExceeds.good 

---------------------------------------------------------------------------

05/19/05 14:55:25 -- shannon

Log message:
	Changed the name of the "--memtable" runtime option
	to "--memtrack".
	
	Changed the execopts file for several tests to reflect
	this, modified the help message, and renamed a test.

Modified files:
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: arg.c chplmem.c 
	chapel/test/execflags/shannon/: help.good 
	chapel/test/memory/shannon/: freedMalloc.execopts 
	                             freedWithoutMalloc.execopts 
	                             printMemTable.execopts 
	                             reallocWithoutMalloc.execopts 
	                             reallocZeroSize.execopts 
Added files:
	chapel/test/memory/shannon/: memtrackFlag.chpl memtrackFlag.good 
Removed files:
	chapel/test/memory/shannon/: memtableFlag.chpl memtableFlag.good 

---------------------------------------------------------------------------

05/19/05 15:18:43 -- shannon

Log message:
	Added the --memstat runtime option to the help
	message.

Modified files:
	chapel/runtime/src/: arg.c 
	chapel/test/execflags/shannon/: help.good 

---------------------------------------------------------------------------

05/19/05 17:25:30 -- deitz

Log message:
	Moved the overload pointer out of FnSymbol and into Symbol.  This is
	because ForwardingSymbol may refer to a FnSymbol and it should be
	overloaded with these.  This lets functions that are already named in
	a module be extended with a set from a used module.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h symscope.h 
	chapel/compiler/symtab/: computeVisibleFunctions.cpp 
	                         renameOverloadedFunctions.cpp 
	                         symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             verify.cpp 

---------------------------------------------------------------------------

05/20/05 10:28:29 -- shannon

Log message:
	Bug fix for the mallocOutOfMemory test that is failing
	on the linux64 platform.  For some reason this test
	seg faults if the vmemoryuse limit is set to either 16M
	or 32M.  Changed the limit to 24M..

Modified files:
	chapel/test/memory/shannon/outofmemory/: sub_test 

---------------------------------------------------------------------------

05/20/05 10:47:46 -- deitz

Log message:
	Greatly improved line number and filename information in the compiler.
	
	Also, if some of the AST is built after parsing in a traversal, the
	name of the traversal is stored in the BaseAST under the field
	traversalInfo.
	
	I also added a field copyInfo that is not yet used.  This will tell in
	what traversal the ast was copied.  It is a vector of strings since it
	could happen in multiple traversals.
	
	I think the traversalInfo should be a vector of strings too since new
	ast nodes could be constructed based on new ast nodes.
	
	If the developer flag is set, the errors now print out information
	about the traversals where the thing that led to an error was created.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h misc.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/parser/: parser.cpp 
	chapel/compiler/traversals/: insertVariableInitializations.cpp 
	chapel/compiler/util/: misc.cpp 

---------------------------------------------------------------------------

05/20/05 10:48:27 -- deitz

Log message:
	Some .goods changed as a result of my last commit.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/20/05 14:16:32 -- deitz

Log message:
	Known regression:  trivial/deitz/test_format_primitives.chpl
	
	This checkin switches complex to the new class based implementation
	and enables better support for modules.
	
	Made two subdirectories in the new top-level modules directory called
	standard and provided.  These contains standard modules that are
	included in all Chapel programs and provided modules that the Chapel
	programmer can include with a use-statement.  Moved _chpl_complex.chpl
	into modules/standard.
	
	Added hacks to maintain reading complexes, casting complexes to
	strings, and setting complex config vars.
	
	Made ProcessParameters set the noDefaultInit flag of its temps.  This
	is necessary when its temps are of class types and the constructor
	would have need to be resolved by analysis.  I'm not sure why the
	defaultConstructor is not set actually.  This should be examined to
	see if it is necessary or why the defaultConstructor is not right.
	
	Added a "no codegen" pragma for functions that are in the runtime and
	don't need to be codegened.  Of course this is the default with the
	preludes, but for the complex read and tostring functions, they don't
	need to be generated but can't be in the prelude for scoping reasons.
	
	Added a vec of SymScopes to every module to locate where the module
	was used.  This is important because if after the uses are resolved,
	something is added to the top-level of a module, it should be included
	into that module.  This is now so.
	
	Enabled ConstructComplexLiterals to change complex literals into calls
	to the complex constructor.
	
	Removed findModuleScope since getModule is just as good.  Beefed up
	getModule function.
	
	Futurized classes/deitz/test_mycomplex_record since the complex is the
	same.  It dawns on me that complex should be a class so that it is
	nominally typed.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h symscope.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             constructComplexLiterals.cpp 
	                             processParameters.cpp 
	                             resolveModuleUses.cpp 
	                             resolveSymbols.cpp 
	chapel/runtime/include/: chplio.h config.h 
	chapel/runtime/src/: chplio.c config.c 
	chapel/test/: REGRESSIONS 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good enumarray.good 
	                                  equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/memory/shannon/: printFinalMemStat.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
	chapel/test/types/complex/deitz/: test_complex2.chpl 
	                                  test_complex2.good 
Added files:
	chapel/modules/standard/: _chpl_complex.chpl 
Removed files:
	chapel/runtime/include/: _chpl_complex.chpl 

---------------------------------------------------------------------------

05/20/05 15:15:02 -- deitz

Log message:
	Forgot to add future for test_mycomplex_record test.

Added files:
	chapel/test/classes/deitz/: test_mycomplex_record.future 

---------------------------------------------------------------------------

05/20/05 15:22:00 -- deitz

Log message:
	Eliminated a small amount of complex codegening cruft that is no
	longer necessary.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 

---------------------------------------------------------------------------

05/20/05 15:42:19 -- jplevyak

Log message:
	Spent a couple days trying to change a few lines of AST code.
	Kind of like trying to juggle glass balls with clown gloves on.
	Still not working, but I thought I should checkpoint it.
	This goes a long way to using ParamSymbols with MetaType types
	to handle generic type parameters.

Modified files:
	chapel/compiler/AST/: baseAST.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/include/: baseAST.h sym.h symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
	                             scopeResolveSymbols.cpp verify.cpp 
	                             verifyASTType.cpp 
	chapel/compiler/vparser/: prelude.v 
	chapel/test/flowanalysis/newast/: multiple_return.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

05/20/05 16:12:44 -- jplevyak

Log message:
	Add "builtin" function +(a : string, b : string).
	Fix bug whereby string and numeric where unordered in the type hiearchy.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 

---------------------------------------------------------------------------

05/20/05 16:31:08 -- deitz

Log message:
	Implemented low-hanging fruit: string concatenation.
	
	Added three test cases.

Modified files:
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/runtime/include/: chpltypes.h 
	chapel/runtime/src/: chpltypes.c 
Added files:
	chapel/test/types/string/deitz/: test_string_concat1.chpl 
	                                 test_string_concat1.good 
	                                 test_string_concat2.chpl 
	                                 test_string_concat2.good 
	                                 test_string_concat3.chpl 
	                                 test_string_concat3.good 

---------------------------------------------------------------------------

05/20/05 16:48:34 -- jplevyak

Log message:
	Class instantiation by instantiation of the constructor finally seems
	to be working.  Removed 3 .futures.
	
	- Reorder RemoveNamedParameters to be before RemoveTypeVariableActuals.
	
	- Add traversal of the ParamSymbol::typeVarible variable.
	
	- VARIABLE_TYPE things are always "used" ... this may indicate
	  a problem... but the above passes should remove them.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_clone_class5.future 
	                                         test_typevar_class1.future 
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_clone_class-1.future 

---------------------------------------------------------------------------

05/22/05 19:52:50 -- jplevyak

Log message:
	Added an option to use a local optimized version of getStuff, getStmt.
	This dramatically reduces CPU consumption for the AST_to_IF1 phase.

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.prediff 
	                               union_type_hierarchy-3-error.prediff 

---------------------------------------------------------------------------

05/23/05 09:06:10 -- deitz

Log message:
	Added a test that instantiates two different classes from the same
	class.  It works.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class2.chpl 
	                                         test_typevar_class2.good 

---------------------------------------------------------------------------

05/23/05 09:09:38 -- deitz

Log message:
	Class instantiation test fails because of writelns at end.  This is
	otherwise the same as test_typevar_class2.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class3.chpl 
	                                         test_typevar_class3.future 
	                                         test_typevar_class3.good 

---------------------------------------------------------------------------

05/23/05 09:38:24 -- deitz

Log message:
	Added four more class instantiation tests.  One is a future.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class4.chpl 
	                                         test_typevar_class4.good 
	                                         test_typevar_class5.chpl 
	                                         test_typevar_class5.good 
	                                         test_typevar_class6.chpl 
	                                         test_typevar_class6.good 
	                                         test_typevar_class7.chpl 
	                                         test_typevar_class7.future 
	                                         test_typevar_class7.good 

---------------------------------------------------------------------------

05/23/05 09:51:19 -- deitz

Log message:
	Two more class instantiation tests that instantiate a class from a
	class.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class8.chpl 
	                                         test_typevar_class8.good 
	                                         test_typevar_class9.chpl 
	                                         test_typevar_class9.good 

---------------------------------------------------------------------------

05/23/05 10:04:23 -- deitz

Log message:
	Some tests that progressively approximate sequence class
	instantiation.  I'm not sure that all of these should work.

Added files:
	chapel/test/types/type_variables/deitz/: test_myseq0.chpl 
	                                         test_myseq0.good 
	                                         test_myseq1.chpl 
	                                         test_myseq1.good 
	                                         test_myseq2.chpl 
	                                         test_myseq2.good 

---------------------------------------------------------------------------

05/23/05 10:06:46 -- deitz

Log message:
	Forgot to add futures for the three tests I just checked in.

Added files:
	chapel/test/types/type_variables/deitz/: test_myseq0.future 
	                                         test_myseq1.future 
	                                         test_myseq2.future 

---------------------------------------------------------------------------

05/23/05 10:14:58 -- jplevyak

Log message:
	Add gc6.5, the latest stable GC.

Added files:
	chapel/third-party/boehmgc/: gc6.5.tar.gz 
	chapel/third-party/boehmgc/gc6.5/: AmigaOS.c BCC_MAKEFILE 
	                                   EMX_MAKEFILE MacOS.c 
	                                   MacProjects.sit.hqx Makefile 
	                                   Makefile.DLLs Makefile.am 
	                                   Makefile.direct Makefile.dj 
	                                   Makefile.in NT_MAKEFILE 
	                                   NT_STATIC_THREADS_MAKEFILE 
	                                   NT_THREADS_MAKEFILE 
	                                   OS2_MAKEFILE PCR-Makefile 
	                                   README.QUICK SMakefile.amiga 
	                                   WCC_MAKEFILE acinclude.m4 
	                                   aclocal.m4 add_gc_prefix.c 
	                                   allchblk.c alloc.c 
	                                   alpha_mach_dep.S backgraph.c 
	                                   blacklst.c callprocs 
	                                   checksums.c config.guess 
	                                   config.sub configure 
	                                   configure.host configure.in 
	                                   darwin_stop_world.c dbg_mlc.c 
	                                   depcomp digimars.mak 
	                                   dyn_load.c finalize.c gc.mak 
	                                   gc_cpp.cc gc_cpp.cpp 
	                                   gc_dlopen.c gcc_support.c 
	                                   gcj_mlc.c gcname.c headers.c 
	                                   hpux_test_and_clear.s 
	                                   ia64_save_regs_in_stack.s 
	                                   if_mach.c if_not_there.c 
	                                   install-sh libtool libtool.m4 
	                                   ltmain.sh mach_dep.c malloc.c 
	                                   mallocx.c mark.c mark_rts.c 
	                                   mips_sgi_mach_dep.s 
	                                   mips_ultrix_mach_dep.s misc.c 
	                                   missing mkinstalldirs 
	                                   new_hblk.c obj_map.c os_dep.c 
	                                   pc_excludes pcr_interface.c 
	                                   powerpc_darwin_mach_dep.s 
	                                   pthread_stop_world.c 
	                                   pthread_support.c ptr_chck.c 
	                                   real_malloc.c reclaim.c 
	                                   rs6000_mach_dep.s setjmp_t.c 
	                                   solaris_pthreads.c 
	                                   solaris_threads.c 
	                                   sparc_mach_dep.S 
	                                   sparc_netbsd_mach_dep.s 
	                                   sparc_sunos4_mach_dep.s 
	                                   specific.c stubborn.c 
	                                   threadlibs.c typd_mlc.c 
	                                   version.h win32_threads.c 
	chapel/third-party/boehmgc/gc6.5/cord/: cordbscs.c cordprnt.c 
	                                        cordtest.c cordxtra.c 
	                                        de.c de_cmds.h 
	                                        de_win.ICO de_win.RC 
	                                        de_win.c de_win.h 
	chapel/third-party/boehmgc/gc6.5/doc/: Makefile Makefile.am 
	                                       Makefile.in README 
	                                       README.DGUX386 README.Mac 
	                                       README.MacOSX README.OS2 
	                                       README.amiga 
	                                       README.arm.cross 
	                                       README.autoconf 
	                                       README.changes 
	                                       README.contributors 
	                                       README.cords 
	                                       README.darwin README.dj 
	                                       README.environment 
	                                       README.ews4800 README.hp 
	                                       README.linux 
	                                       README.macros 
	                                       README.rs6000 README.sgi 
	                                       README.solaris2 
	                                       README.uts README.win32 
	                                       barrett_diagram 
	                                       debugging.html gc.man 
	                                       gcdescr.html 
	                                       gcinterface.html 
	                                       leak.html scale.html 
	                                       simple_example.html 
	                                       tree.html 
	chapel/third-party/boehmgc/gc6.5/include/: Makefile Makefile.am 
	                                           Makefile.in cord.h 
	                                           ec.h gc.h gc_alloc.h 
	                                           gc_allocator.h 
	                                           gc_amiga_redirects.h 
	                                           gc_backptr.h 
	                                           gc_config_macros.h 
	                                           gc_cpp.h gc_gcj.h 
	                                           gc_inl.h gc_inline.h 
	                                           gc_local_alloc.h 
	                                           gc_mark.h 
	                                           gc_pthread_redirects.h 
	                                           gc_typed.h javaxfc.h 
	                                           leak_detector.h 
	                                           new_gc_alloc.h 
	                                           weakpointer.h 
	chapel/third-party/boehmgc/gc6.5/include/private/: cord_pos.h 
	                                                   darwin_semaphore.h 
	                                                   darwin_stop_world.h 
	                                                   dbg_mlc.h 
	                                                   gc_hdrs.h 
	                                                   gc_locks.h 
	                                                   gc_pmark.h 
	                                                   gc_priv.h 
	                                                   gcconfig.h 
	                                                   pthread_stop_world.h 
	                                                   pthread_support.h 
	                                                   solaris_threads.h 
	                                                   specific.h 

---------------------------------------------------------------------------

05/23/05 10:49:34 -- jplevyak

Log message:
	Switch over to GC 6.5
	Found a bug where I wasn't using class XXX : private gc which was
	causing GC to overwrite an array.

Modified files:
	chapel/compiler/analysis/: pattern.cpp 
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

05/23/05 10:51:09 -- jplevyak

Log message:
	remove two futures fixed by last checkin.

Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class3.future 
	                                         test_typevar_class7.future 

---------------------------------------------------------------------------

05/23/05 14:27:51 -- deitz

Log message:
	Instantiating classes now doesn't just instantiate methods but rather
	all functions that use the type variable that is being instantiated.
	
	This seems to temporarily break
	  types/type_variables/deitz/test_typevar_class9.chpl

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/symtab/: collectFunctions.cpp collectFunctions.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: findTypeVariables.cpp 
	                             findTypeVariables.h 

---------------------------------------------------------------------------

05/23/05 14:30:10 -- deitz

Log message:
	Forgot to comment out some printfs I put in before that last checkin.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/23/05 14:39:50 -- jplevyak

Log message:
	remove unnecessary Makefiles which will be overwritten by "configure"

Removed files:
	chapel/third-party/boehmgc/gc6.5/: Makefile 
	chapel/third-party/boehmgc/gc6.5/doc/: Makefile 
	chapel/third-party/boehmgc/gc6.5/include/: Makefile 

---------------------------------------------------------------------------

05/23/05 14:40:34 -- jplevyak

Log message:
	move ast_get_children() out of analysis.cpp and into baseAST.cpp

Modified files:
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/AST/: baseAST.cpp 

---------------------------------------------------------------------------

05/23/05 15:25:34 -- jplevyak

Log message:
	Remove get_ast_children()

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/23/05 16:49:04 -- deitz

Log message:
	Futurized test pending sum types.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class9.future 

---------------------------------------------------------------------------

05/24/05 08:45:46 -- deitz

Log message:
	Cleared Vecs used in instantiate_generic in an attempt to fix valgrind
	regressions.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/24/05 10:12:47 -- jplevyak

Log message:
	Implemented Sum types.
	Fixed a bug whereby we were passing pointers to pointers to functions taking
	reference (class) types.
	Handle -1 line numbers in some case to mean "no line number information".
	This used to be signaled by 0... may more places need to be updated.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp clone.cpp fa.cpp 
	chapel/compiler/include/: clone.h type.h 
	chapel/test/flowanalysis/newast/: domarr.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/24/05 10:48:53 -- deitz

Log message:
	Fixed a bug in type cloning in which an infinite recursion would be
	encountered if the type was recursive.
	
	Reworked the overloading code so that anything can be overloaded.
	ScopeResolveSymbols now checks to make sure only functions are
	overloaded.  After this, the compiler can overload other things.  This
	is useful especially for type cloning.  I think we can also clean up
	the getter so that it is just a part of overloading, overloaded with
	the field.
	
	In ApplyThisParameters, this is no longer applied to types.
	
	Made some superficial changes to sequence handling.  This will all
	disappear soon.
	
	Modified the error for redefinition of variables to print out all
	redefinitions not just one.
	
	Removed futures for test_myseq0,1,2.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             scopeResolveSymbols.cpp 
	chapel/runtime/include/: seq.h 
	chapel/test/trivial/bradc/: redefinevar.good 
	chapel/test/types/type_variables/deitz/: test_myseq2.chpl 
	                                         test_myseq2.good 
Removed files:
	chapel/test/types/type_variables/deitz/: test_myseq0.future 
	                                         test_myseq1.future 
	                                         test_myseq2.future 

---------------------------------------------------------------------------

05/24/05 11:03:32 -- jplevyak

Log message:
	Update some of the futures.

Modified files:
	chapel/test/flowanalysis/newast/: enumarray.good 
	                                  formatoutput.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
Removed files:
	chapel/test/classes/jplevyak/: record_type_hierarchy-2.future 
	                               sum_type-1.future 
	                               union_type_hierarchy-2.future 
	chapel/test/flowanalysis/newast/: sum_type-1.future 
	                                  sum_type-2.future 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_class9.future 

---------------------------------------------------------------------------

05/24/05 11:18:19 -- jplevyak

Log message:
	Recognize -1 as a bogus line number in a couple more places.

Modified files:
	chapel/compiler/analysis/: clone.cpp fa.cpp 
	chapel/compiler/backend/: dump.cpp 
	chapel/test/flowanalysis/newast/: domarr.good sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

05/24/05 12:15:57 -- deitz

Log message:
	Improved ScopeResolveSymbols to handle more complex unresolved types.
	For example, given a class foo that contains a type t, foo.t is now an
	unresolved type.  Modified UnresolvedType so that it now contains a
	Vec<char*>* which contains the names for looking up that type.  For
	foo.t, the strings foo and t would be stored in the UnresolvedType in
	that order.
	
	Potential concern:
	
	  class foo {
	    var x : integer = 12;
	    type t : integer = x;
	  }
	
	  var k : foo.t;
	
	The problem is that the default value of the type in the class is
	dependent on an instance of that class.  We must disallow foo.t in
	this case.
	
	Related, are we supporting something like f.t if f is an instance of
	foo.  The problem with this is that we could not easily resolve the
	type symbol in ScopeResolveSymbols, i.e., before analysis.  I assume
	were not allowing something like that.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_type_in_class3.chpl 
	                            test_type_in_class3.good 

---------------------------------------------------------------------------

05/24/05 12:38:48 -- deitz

Log message:
	Added code to mangle '#' in function cname when it is overloaded.
	
	Added three test cases for a full-blown sequence class.
	
	The second and third fail.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/classes/deitz/: test_myseq_record.chpl 
	                            test_myseq_record.good 
	                            test_myseq_record2.chpl 
	                            test_myseq_record2.future 
	                            test_myseq_record2.good 
	                            test_myseq_record3.chpl 
	                            test_myseq_record3.future 
	                            test_myseq_record3.good 

---------------------------------------------------------------------------

05/24/05 13:08:29 -- deitz

Log message:
	Added record type variable test with future.

Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.chpl 
	                                         test_typevar_record1.future 
	                                         test_typevar_record1.good 

---------------------------------------------------------------------------

05/24/05 14:03:07 -- jplevyak

Log message:
	Fix assert in analysis.cpp.
	test_myseq_record2.chpl now looks to be in a infinite loop, but it
	isn't.  Instead a single call to FnSymbol::instantiate_generic is taking
	10s of seconds.  The function is very small.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

05/24/05 14:09:12 -- deitz

Log message:
	Added high-level support for conditional expressions of the form
	
	  (if expr then expr else expr)
	
	There is no support yet for omitting the else in creation of a
	sequence.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/trivial/deitz/: test_cond_expr1.chpl 
	                            test_cond_expr1.future 
	                            test_cond_expr1.good 

---------------------------------------------------------------------------

05/24/05 14:41:24 -- jplevyak

Log message:
	Add support for conditional expressions.
	Renamed CondExpr::boolExpr to CondExpr::condExpr to match CondStmt.
	I guess I could have gone the other direction and named it boolExpr, but
	in any case I think CondExpr and StmtExpr should have a similar name
	for the conditional expression for the sake of uniformity.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
Removed files:
	chapel/test/trivial/deitz/: test_cond_expr1.future 

---------------------------------------------------------------------------

05/24/05 17:00:19 -- jplevyak

Log message:
	Fixup comments in clone.cpp and a bug in error reporting in fa.cpp.

Modified files:
	chapel/compiler/analysis/: clone.cpp fa.cpp 

---------------------------------------------------------------------------

05/24/05 17:14:26 -- jplevyak

Log message:
	Fixed issue with treating a set like a vector (need to check if elements
	are NULL).

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

05/24/05 17:20:07 -- deitz

Log message:
	Added new standard module _chpl_seq.chpl.
	
	I named the sequence class seq2 instead of seq for the time being.
	
	It is not included or parsed unless analysis is run (disabled for
	--noanalysis).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 

---------------------------------------------------------------------------

05/25/05 08:54:03 -- deitz

Log message:
	Added _chpl_seq module.  It was missing which caused full regressions.
	Sorry about that.
	
	I'm hoping it is working now.  I blew away my copy after the OS
	upgrade and so just tried to recreate it, but can't test because I'm
	having trouble building the compiler.

Modified files:
	chapel/third-party/boehmgc/gc6.5/: libtool 
Added files:
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

05/25/05 09:15:19 -- deitz

Log message:
	Made some changes to the _chpl_seq module and added a test case that
	uses it.  Note that the sequence is called seq2 until I work it in.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
Added files:
	chapel/test/classes/deitz/: test_seq2.chpl test_seq2.good 

---------------------------------------------------------------------------

05/25/05 10:57:11 -- bradc

Log message:
	Set the following environment settings to try and
	make start_test a bit more robust:
	
	setenv LC_ALL C
	setenv LANG en_US
	limit stacksize 8192k

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/25/05 12:31:16 -- deitz

Log message:
	Changed names around in _chpl_seq.chpl to match names from before I
	lost it.  This removes a few current regressions.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

05/25/05 13:52:10 -- deitz

Log message:
	Implemented sequences using the seq2 class in the _chpl_seq standard
	module.
	
	Sequence literals are dealt with before analysis, for now.  So they
	can only be created if the type of the elements are known.
	
	Sequence class types are created in InsertAnonymousTypes.
	
	Added typeInfo to symbols which should be used to get the type.  This
	handles ForwardingSymbols from module uses better.
	
	Removed noanalysis sequence tests and some of the support code.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertTemps.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
Removed files:
	chapel/test/types/seq/deitz/noanalysis/: COMPOPTS 
	                                         test_array_of_seq1.chpl 
	                                         test_array_of_seq1.good 
	                                         test_overload_noanalysis1.chpl 
	                                         test_overload_noanalysis1.good 
	                                         test_seq1.chpl 
	                                         test_seq1.good 
	                                         test_seq1a.chpl 
	                                         test_seq1a.good 
	                                         test_seq1b.chpl 
	                                         test_seq1b.good 
	                                         test_seq1c.chpl 
	                                         test_seq1c.good 
	                                         test_seq2.chpl 
	                                         test_seq2.good 
	                                         test_seq3.chpl 
	                                         test_seq3.good 
	                                         test_seq4.chpl 
	                                         test_seq4.good 
	                                         test_seq5.chpl 
	                                         test_seq5.good 
	                                         test_seq6.chpl 
	                                         test_seq6.good 
	                                         test_seq7.chpl 
	                                         test_seq7.good 
	                                         test_seq8.chpl 
	                                         test_seq8.good 
	                                         test_seq8b.chpl 
	                                         test_seq8b.good 

---------------------------------------------------------------------------

05/25/05 13:54:30 -- deitz

Log message:
	Removed futures for some working sequence tests.

Removed files:
	chapel/test/types/seq/deitz/: test_seq1.future test_seq1a.future 
	                              test_seq1b.future 
	                              test_seq1c.future test_seq2.future 
	                              test_seq5.future 

---------------------------------------------------------------------------

05/25/05 13:56:57 -- deitz

Log message:
	Removed future for complex arithmetic test.

Removed files:
	chapel/test/types/complex/deitz/: test_complex2.future 

---------------------------------------------------------------------------

05/25/05 16:08:47 -- jplevyak

Log message:
	Added ParamSymbol::isGeneric.
	Fixed potential bug and perfmance issies in instantiate_add_subs.
	Fixed several issues in generic instantiation which were causing
	  excessive instantiation in some test cases.
	Optimized updateSymbols to take advantage of the hash nature of Map(s).

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	chapel/compiler/include/: analysis.h callbacks.h symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             updateSymbols.cpp 

---------------------------------------------------------------------------

05/25/05 16:47:06 -- deitz

Log message:
	Implemented overloading of parentheses with 'this' method.
	
	Added a class instantiation test that has a 'this' method.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: test_datablock.chpl 
	                                         test_datablock.good 

---------------------------------------------------------------------------

05/26/05 13:49:43 -- deitz

Log message:
	Implemented overloading of parentheses with 'set' method.  John is
	working on changing this to the 'this' method.  The code I wrote will
	be useful when that is done too, though the names may have changed.  I
	wrote this stopgap so I could continue experimenting with the array
	implementation.
	
	Added a test case to exercise it.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/types/type_variables/deitz/: test_datablock2.chpl 
	                                         test_datablock2.good 

---------------------------------------------------------------------------

05/26/05 15:18:11 -- shannon

Log message:
	Fixed a bug in the confirm() function.  This function prints
	an error if the memory address passed to it is NULL.  However,
	I was using _glom_strings() to create the error message which
	makes a call to realloc.  Instead of attempting to get more
	memory from a possibly depleted heap I now use stack memory
	for the message.

Modified files:
	chapel/runtime/src/: chplmem.c 

---------------------------------------------------------------------------

05/26/05 15:25:09 -- shannon

Log message:
	Added a few .cvsignore files that were missed on the
	move from gc6.3 to gc6.5.  I also deleted the libtool
	file which is created in the build.

Added files:
	chapel/third-party/boehmgc/gc6.5/: .cvsignore 
	chapel/third-party/boehmgc/gc6.5/doc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.5/include/: .cvsignore 
Removed files:
	chapel/third-party/boehmgc/gc6.5/: libtool 

---------------------------------------------------------------------------

05/26/05 15:43:27 -- deitz

Log message:
	Added functions hasPragma and addPragma to symbol and stmt to make it
	easier to check for pragmas, and add new ones.
	
	Added a _data class in the prelude. (We'll need to change the name or
	something so the user doesn't grab it.) This class acts as a
	one-dimensional C array which I'll use to implement our arrays.
	
	It is useless until I add an allocate function or a constructor though.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h symbol.h 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/runtime/include/: array.h 
	chapel/test/flowanalysis/newast/: sum_type-1.good 

---------------------------------------------------------------------------

05/26/05 17:05:46 -- bradc

Log message:
	Fixed bugs and what seem to be redundancies in
	get_ast_children.  A label was  being extracted
	from all expressions whether they were goto
	expressions or not.  Lists were being extracted
	as though they were single elements.  Back
	pointers were being extracted, which seem to
	be unnecessary.
	
	Editorial: while the speed of the old GetStuff
	means of getting children may have been lacking,
	the maintainability of the current
	get_ast_children() seems fairly fragile --
	especially its reliance on static casts.  For
	example, in the case of a label field being
	extracted for all expressions, it resulted in
	completely random fields being added to the
	BaseAST vector, such that when later passes
	tripped over them, it was quite difficult to
	tell where they had been introduced.  For
	example, with some rearrangement of the
	fields (in my next checkin), a list of pragmas
	was being inserted into the list, even though
	a grep of places in the code where "pragma" is
	referenced indicated that this shouldn't have
	been possible.  In the past we've opted for
	maintainability over performance -- I would've
	preferred to see this performance problem be
	addressed in a safer manner, and one that
	didn't introduce a new category of thing that
	has to be maintained when new fields are
	added (especially one that will force them to
	be the type it expects them to be, even if
	it doesn't make sense).

Modified files:
	chapel/compiler/AST/: baseAST.cpp 

---------------------------------------------------------------------------

05/27/05 10:57:02 -- jplevyak

Log message:
	Implemented "var" returning functions as settters.
	Handled CondExpr so that you can return cond expressions.
	Put in 2 test cases to test them and returning conditional expressions.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y internal_prelude.chpl 
	chapel/compiler/traversals/: Makefile.share resolveSymbols.cpp 
	chapel/test/flowanalysis/newast/: domarr.good formatoutput.good 
	                                  protoast_test.good 
	                                  sum_type-1.good 
	chapel/test/types/type_variables/deitz/: test_datablock2.chpl 
Added files:
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             buildLValueFunctions.h 
	chapel/test/functions/jplevyak/: var_return-1.chpl 
	                                 var_return-1.good 
	                                 var_return-2.chpl 
	                                 var_return-2.good 

---------------------------------------------------------------------------

05/27/05 11:28:58 -- deitz

Log message:
	Changed my _data class in the prelude to use the new =this function.

Modified files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

05/27/05 14:14:39 -- shannon

Log message:
	Fixed a couple of memstat tests that were failing
	on the linux64 platform due to the difference in
	size of configVars by resetting the memstat counters
	before the start of _chpl_main().

Modified files:
	chapel/runtime/src/: main.c 
	chapel/test/memory/shannon/: memmaxExceeds.execopts 
	                             memstatPrint.good 
	                             printFinalMemStat.good 

---------------------------------------------------------------------------

05/27/05 15:26:27 -- jplevyak

Log message:
	The problem is that the chpl_complex.chpl module only has one version
	of _chpl_tostring which only handles complex, as a result resolveSymbols
	thinks it is not overloaded and subs in the FnSymbol which forces analysis
	to use only that one version (which doesn't apply) for all other uses of _chpl_tostring....
	
	Since this has to do with module resolution which is a new feature and I
	wanted to record these observations I am making this a future.

Added files:
	chapel/test/trivial/deitz/: test_format_primitives.future 

---------------------------------------------------------------------------

05/27/05 16:08:28 -- bradc

Log message:
	This is a big check-in to remove our ad-hoc lists from the compiler
	and replace them with a templatized List class.  Most of the work
	here was in changing the client code from using the ad-hoc lists
	to using a list class.  More on the details of the specific list
	class in a sec.  First, two minor changes that go along with this
	and may be helpful for others debugging as it was for mine:
	
	(1) made the --gdb flag set a breakpoint so that if the compiler is
	    exited with a nonzero status code, it will stop before exiting.
	    When INT_FATAL() or other erroneous ways of exiting the program
	    are used, this allows one to get a stacktrace of where the error
	    occurred without setting a breakpoint manually.  While this
	    seems like a minor advantage, it turns out to be one of the easiest
	    ways to debug problems in templatized code since setting breakpoints
	    in templatized code is somewhat crufty.  The only negative effect
	    that I found with this is that breakpoints you set by hand will start
	    being numbered at 2 rather than 1.
	
	(2) added a no-op call named "checkid" that is called for every
	    BaseAST that is constructed.  This is beneficial for answering
	    the question, "I wonder when node #n is created in the AST?"
	    since it is also difficult to set breakpoints on constructors.
	    Thus, one would now debug this case using: "break checkid"
	    followed by "cond <bkptnum> (id == n)" and rerunning.  This
	    makes it trivial to locate the creation of the AST (if Steve's
	    recent backtrace info wasn't help enough).
	
	About ALists
	============
	
	Created a new List class called AList which is templatized via a
	class that has next and previous pointers.  This decision was made
	so that items (like statements) could remove themselves from lists
	without having a handle on the list itself.  Sentinel nodes are
	created for the list head and tail for ease of implementation and
	so that all list members can be treated consistently.  This
	causes the class being used to instantiate the list to require a
	0-argument constructor.
	
	The name AList is meant to signify "ASTList" or "a list".
	To a large extent, it's a placeholder name that we can replace
	with another name or with another list implementation if people
	want to.  Changing it from here should be simpler since the
	distinction between lists and elements has been made manifest in
	the rest of the compiler now.
	
	ALists can be constructed using a 0-argument constructor (which
	creates an empty AList containing only the sentinel nodes) or
	by passing in a single instance of the class being used to
	instantiate the AList, in which case it will be the sole element
	of the list.  A warning will be generated if the element that's
	being passed in is already a member of another list (that is,
	if its next or prev pointers are non-NULL).
	
	To add to an AList, the current methods are insert() (which puts
	the new node at the front of the list), and add() (which puts the
	new node at the end of the list).  Each of these can also take a
	whole list which will result in the argument list being emptied
	out -- as we discussed in this week's meeting, the decision to
	allow nodes to be a member of only one node was deliberate -- use
	the copy() methods in order to create a duplicate list for
	concatenation).
	
	The suggested way to traverse a list is using the first() and next()
	methods, which return the first element in the list and subsequent
	elements, respectively.  When the end of the list is reached,
	next() returns NULL.  If the list is empty, first() returns NULL.
	This implementation uses a cursor embedded in the list, so a single
	list should not be iterated over using first() and next() twice
	within a single dynamic range.  There is a check to ensure that
	this does not occur, but it currently is off by default (because
	I currently use first() in the compiler for things other than
	iteration, which I shouldn't do).  Set the debugNestedTraversals
	flag to turn it on.  A good TODO item is to get this turned on
	using the only() and representative() calls (described below).
	Another would be to wrap the first() and next() calls in a for-loop
	style macro for convenience.
	
	The only() call is used in cases where there is an assumption being
	made that there is only one item in a list (these were typically
	embedded in the old code by accessing the first element in a field
	that represented a list without looking at the rest of the elements).
	It throws an error if there is more than one element in the list.
	Arguably, code should be rewritten to try and avoid the use of
	only()
	
	The representative() call is used in cases where the code just
	accessed the first elemente in a list but the list had more than
	one element.  Arguably, these should be rewritten to try and
	avoid the use of representative(), though there may be cases
	in which the list is known to be homogenous with respect to
	a property, in which case this would be OK.
	
	Elements may be removed from an AList using remove() which pulls
	the element from the list.  Currently there is no check to ensure
	that the element is in the list, for efficiency.  remove() may
	be called directly on the element itself if it is a subclass of
	ILink (or otherwise implements a removal that updates its next
	and prev links to point to one another).
	
	Elements may also be popped from the front of an AList() using
	popHead(), because the code did this in a number of places
	manually with the old ad hoc lists.
	
	Implemented variations of insertBefore() and insertAfter() to
	have the same semantics they do for other AST nodes -- implying
	a fixup should occur after the insertion.  The new list
	structure should allow this code to be cleaned up significantly
	so that different calls don't need to be made, but that's a
	separate checkin (and one likely to be undertaken by Steve).
	
	Lists support print(), printDef(), codegen(), codegenDef(),
	and traversal() methods, which behave like their corresponding
	AST calls, with the exception that the print and codegen
	routines take a separator string, as the printList() and
	codegenList() routines did previously.
	
	getElements() converts the AList into a vector, as
	getLinkElements did previously.  filter() filters a list into
	two different lists, as supported on ILinks previously.
	
	The size of an AList may be checked with isEmpty() (which is O(1)),
	or length() (which is O(n).
	
	As a policy decision, any AST node fields which can be lists
	I store as empty lists when they're empty rather than NULL
	to avoid having to special case NULL lists elsewhere in the
	code.  The one exception to this are pragma lists, due to
	their pervasiveness.  We may want to rethink this over time
	(in either direction).
	
	The perceived advantages of introducing ALists are:
	
	(1) cleaner documentation of which AST nodes are and are not
	    lists
	(2) more structured access to those lists, allowing for the
	    list implementation to be changed without touching as
	    much code as this change does
	(3) faster insertion at the ends of lists than our old scheme
	(4) more consistent access to list elements due to the sentinel
	    elements at the head and tail; allows list elements to be
	    manipulated without the list being directly involved.
	(5) removal of distinction between xxx() and xxxList() routines
	    that we used to have.  Now, call xxx() on any BaseAST node.
	
	A number of TODOs still which I have listed elsewhere if anyone
	wants to see them, and which Steve and I code reviewed.
	
	Here are some related changes:
	
	* changed all passes and traversals to take a ModuleList (an
	  AList<ModuleSymbol>) rather than a ModuleList* representing
	  a list.  Named this class ModuleList to avoid a circular
	  dependence between alist.h, traversal.h, and pass.h.  This
	  should also make the passes/traversals more resilient to
	  any future changes that may need to occur.
	
	* made AList and Pragma be subclasses of BaseAST.  AList so
	  that it could be passed to replace().  Both so that their
	  creation location could more easily be debugged.
	
	* killed list-specific functions copyList/copyListInternal,
	  printList/codegenList, traverseList/traverseDefList, TRAVERSE_LS
	
	* got rid of link-related functions that acted as list functions
	  such as append, nextLink, filter, head, tail, length, get.
	
	* made some constructors of basic types be 0-argument constructors,
	  as the AList class needs to create instances of such classes for
	  its sentinel nodes
	
	* removed some traversals over ad-hoc lists of symbols per DefExpr,
	  because we have only had one Symbol per DefExpr for some time now
	
	* replaced most constructors that took an ad-hoc list with constructors
	  that take an AList<>.  In some cases, kept the old constructors, but
	  these will reject nodes that are already part of a list in the call
	  to the AList constructor that's made.  Others accepting a singleton
	  should be added as a TODO item for convenience (e.g., we create a
	  lot of BlockStmts with just a single initial statement; same with
	  ParenOpExpr and DefExpr).

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      link.cpp pragma.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: analysis.h baseAST.h expr.h link.h 
	                          pragma.h stmt.h symbol.h symscope.h 
	                          symtab.h type.h yy.h 
	chapel/compiler/parser/: chapel.y parser.cpp 
	chapel/compiler/passes/: buildBinary.cpp buildBinary.h 
	                         codegen.cpp codegen.h 
	                         createEntryPoint.cpp createEntryPoint.h 
	                         filesToAST.cpp filesToAST.h pass.cpp 
	                         pass.h printProgram.cpp printProgram.h 
	                         renameCSymbols.cpp renameCSymbols.h 
	                         runAnalysis.cpp runAnalysis.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         legalizeCNames.cpp printSymtab.cpp 
	                         printSymtab.h removeDeadSymbols.cpp 
	                         resolveTypes.cpp symlink.cpp symlink.h 
	                         symscope.cpp symtab.cpp 
	                         symtabTraversal.cpp symtabTraversal.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             checkIDs.cpp checkIDs.h 
	                             clearTypes.cpp 
	                             constructComplexLiterals.cpp 
	                             eliminateReturns.cpp 
	                             expandClassWiths.cpp 
	                             expandSeqExprAssignments.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             fixup.h insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertElidedLoops.cpp 
	                             insertElidedLoops.h 
	                             insertFunctionTemps.cpp 
	                             insertIndexType.cpp insertTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             omitForNoAnalysis.h 
	                             processParameters.cpp 
	                             removeNamedParameters.cpp 
	                             removeSeqOperations.cpp 
	                             resolveModuleUses.cpp 
	                             resolveModuleUses.h 
	                             resolveSymbols.cpp 
	                             scopeResolveGotos.cpp 
	                             scopeResolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             testGetStuff.cpp 
	                             transformLetExprs.cpp 
	                             transformLetExprs.h traversal.cpp 
	                             traversal.h verify.cpp verify.h 
	                             verifyASTType.cpp view.cpp view.h 
	chapel/compiler/util/: files.cpp misc.cpp 
	chapel/test/compflags/bradc/gdbddash/: PREDIFF 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     test.good 
Added files:
	./: log.txt 
	chapel/compiler/AST/: alist.cpp moduleList.cpp 
	chapel/compiler/include/: alist.h moduleList.h 

---------------------------------------------------------------------------

05/27/05 16:54:53 -- jplevyak

Log message:
	Fix valgrind problem: off by one in loop was inserting uninitialized
	value into an array.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/analysis/: fa.cpp 
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

05/27/05 17:07:49 -- bradc

Log message:
	Converted FnSymbol::formals from an AList<Symbol>
	to AList<ParamSymbol>, thanks to the changes made
	by John and Steve to make all parameters ParamSymbols
	for consistency (but which I couldn't imagine
	undertaking along with the rest of the list changes :).
	Removes a number of dynamic casts from places that were
	iterating over a parameter list.

Modified files:
	chapel/compiler/AST/: expr.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             findUnknownTypes.cpp 
	                             insertThisParameters.cpp 
	                             processParameters.cpp 

---------------------------------------------------------------------------

05/30/05 19:56:17 -- jplevyak

Log message:
	Fix uninitialized variable which was causing valgrind failures.
	(the "found" variable was not initialised to "false").

Modified files:
	chapel/compiler/traversals/: findTypeVariables.cpp 

---------------------------------------------------------------------------

05/31/05 09:22:00 -- deitz

Log message:
	Implemented non-analysis support for user-defined default constructors.
	
	Added constructor keyword to grammar.  Added ability to specify a
	user-defined default constructor by calling the constructor
	'initialize' though I would like to change it to be the class name
	instead.
	
	The constructor is modifed in InsertThisParameters where 'this' is
	declared at the top of the constructor and returned at the end.  The
	normal default constructor is not built for a class if the user
	already specified one.

Modified files:
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
	                             resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
Added files:
	chapel/test/classes/deitz/: test_class_construct1.chpl 
	                            test_class_construct1.future 
	                            test_class_construct1.good 

---------------------------------------------------------------------------

05/31/05 09:56:23 -- deitz

Log message:
	Fixed test_format_primitives.
	
	The problem was that the forwarding symbol from a module was resolved
	in ScopeResolveSymbols even though the forwarding symbol was for a
	function.  Functions are not resolved until analysis so now the symbol
	is left unresolved.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
Removed files:
	chapel/test/trivial/deitz/: test_format_primitives.future 

---------------------------------------------------------------------------

05/31/05 10:11:08 -- deitz

Log message:
	Removed four passing futures which now work because of general
	improvements to I/O and type handling.

Removed files:
	chapel/test/arrays/deitz/: test_array_float1.future 
	chapel/test/classes/deitz/: test_class_in_usertype.future 
	chapel/test/types/typedefs/bradc/: localType.future 
	                                   localType2.future 

---------------------------------------------------------------------------

05/31/05 11:12:22 -- deitz

Log message:
	Made the line numbers for the entry point and call to initialization
	functions -1 so that analysis errors (and eventually call chains in
	general) will not put these confusing line numbers in.

Modified files:
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

05/31/05 11:16:43 -- deitz

Log message:
	Made it so that constructors are not marked as primary or secondary
	methods.
	
	Removed future for first user-defined default constructor test.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 
Removed files:
	chapel/test/classes/deitz/: test_class_construct1.future 

---------------------------------------------------------------------------

05/31/05 11:24:08 -- bradc

Log message:
	Updated the regressions file a bit.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

05/31/05 12:10:15 -- jplevyak

Log message:
	When a function is unresolved, the compiler now prints out an error message
	which includes a list of all the candidate functions.  Syntax looks
	a bit (more) like gcc.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/: dispatch3.good 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/parsing/jplevyak/: module.good 

---------------------------------------------------------------------------

05/31/05 13:24:12 -- deitz

Log message:
	The type variable is no longer extracted from the list of types in a
	class when that class is instantiated.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

05/31/05 13:28:12 -- bradc

Log message:
	Small change to get the setenv of LANG working
	on solaris without complaining about not being
	able to set locale correctly.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/31/05 16:20:32 -- shannon

Log message:
	Fixed the printMemTable test that was failing
	on the linux64 platform due to the difference
	in size of configVars by adding an argument
	to the print function to limit the size of
	what gets printed.

Modified files:
	chapel/runtime/include/: chplmem.h 
	chapel/runtime/src/: chplmem.c chplmem_tests.c 
	chapel/test/memory/shannon/: memtrackFlag.good 
	                             printMemTable.good 

---------------------------------------------------------------------------

05/31/05 16:38:07 -- deitz

Log message:
	Linked type variable in user-defined constructor to type variable in
	class (by name).
	
	Added ability to allocate memory to special _data class (that
	implements C array) in prelude using alloc method.
	
	Added two new tests to test these additions.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: insertThisParameters.cpp 
	                             removeNamedParameters.cpp 
	chapel/runtime/include/: array.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/types/type_variables/deitz/: test_datablock3.chpl 
	                                         test_datablock3.good 
	                                         test_instantiate_construct1.chpl 
	                                         test_instantiate_construct1.good 

---------------------------------------------------------------------------

05/31/05 17:21:19 -- bradc

Log message:
	Changed ForallExpr::indices from a list of Expr to
	a list of DefExpr.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

05/31/05 17:23:57 -- deitz

Log message:
	Moved extract method to BaseAST.  Rearranged replaceChild and
	callReplaceChild to support this move.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h 

---------------------------------------------------------------------------

06/01/05 08:55:13 -- jplevyak

Log message:
	Introduce intermediate in DefExpr to handle case where the result
	is a global variable (analysis uses the result variable, which is
	content sensitive, to stand for the particular context sensitive
	function call, so it requires it to be local).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

06/01/05 08:58:20 -- jplevyak

Log message:
	Patch some bit of tempermentalness the log.i results.

Modified files:
	chapel/test/flowanalysis/newast/: sum_type-1.good 

---------------------------------------------------------------------------

06/01/05 10:10:25 -- bradc

Log message:
	Removed some dynamic casts that should've gone in
	with my last check-in.

Modified files:
	chapel/compiler/traversals/: insertVariableInitializations.cpp 

---------------------------------------------------------------------------

06/01/05 10:14:12 -- deitz

Log message:
	Combined functionality of remove and extract.  The new function is
	called remove.

Modified files:
	chapel/compiler/AST/: baseAST.cpp link.cpp symbol.cpp type.cpp 
	chapel/compiler/include/: alist.h baseAST.h 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         postAnalysisCleanup.cpp 
	                         removeDeadSymbols.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             destructureTupleAssignments.cpp 
	                             expandSeqExprAssignments.cpp 
	                             findUnknownTypes.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

06/01/05 11:32:32 -- deitz

Log message:
	Changed the AList<SymLink>* of syms in SymScope to a Vec<Symbol*>.
	This simplifies the code base so we can specialize ILink and AList to
	BaseAST further.

Modified files:
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 

---------------------------------------------------------------------------

06/01/05 11:57:15 -- deitz

Log message:
	Removed dead SymLink code.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: symscope.h 
	chapel/compiler/symtab/: Makefile.share symscope.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 
Removed files:
	chapel/compiler/symtab/: symlink.cpp symlink.h 

---------------------------------------------------------------------------

06/01/05 13:05:30 -- jplevyak

Log message:
	Support for the "where" clause syntax as part of a function and
	as a general decl (so that it can be included in a class).
	Added 2 new binary operators: BINOP_SUBTYPE ( : ) and BINOP_NOTSUBTYPE( !: ).
	Aded %left declartions for TCOLON TNOTCOLON and TCOMMA and TDOT.
	The "where" clauses currently generate Exprs, but they are not
	stored via Symboltable::xxxxDef.

Modified files:
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/flowanalysis/newast/: sum_type-2.good 
Added files:
	chapel/test/types/type_variables/jplevyak/: where-1.chpl 
	                                            where-1.future 
	                                            where-1.good 

---------------------------------------------------------------------------

06/01/05 13:32:33 -- deitz

Log message:
	Moved check that parameters are initialized into CheckSemantics pass
	which follows analysis.  Updated test to show line number information.
	
	Added parameter field instantiation test.  This class should be
	instantiated because of the parameter in it.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	chapel/test/trivial/roxana/: test_param_decl3.good 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_class1.chpl 
	                                         test_paramvar_class1.future 
	                                         test_paramvar_class1.good 

---------------------------------------------------------------------------

06/01/05 13:52:26 -- deitz

Log message:
	Fixed filename in error message in this test.

Modified files:
	chapel/test/trivial/roxana/: test_param_decl3.good 

---------------------------------------------------------------------------

06/01/05 15:13:28 -- jplevyak

Log message:
	Add 2 new "where" constraint types: an anonymous class declaration, and
	an application (ParenOp) which can be used to instantiate other types.

Modified files:
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

06/01/05 17:34:40 -- bradc

Log message:
	Captured code from David's SSCA2 whitepaper
	into a .chpl file, primped it up slightly
	and checked it in as ssca2.orig.chpl for
	reference.  ssca2.parses.chpl comments out
	things that don't currently parse.
	
	Checking these in so that we can spend some
	time rewriting them to use fewer features
	over time, or to more suit our style, as
	we move toward MS5 at the end of July.
	
	These are currently not tested.

Added files:
	chapel/test/ssca/ssca2/: NOTEST ssca2.orig.chpl 
	                         ssca2.parses.chpl 

---------------------------------------------------------------------------

06/02/05 11:14:38 -- jplevyak

Log message:
	Changed names of setters to =varname to match the =functionname
	used for lvalue functions.  This prevents a potential name space conflict.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

06/02/05 13:41:26 -- bradc

Log message:
	NOTE: developers who use the log files from
	the testing system a lot will want to check
	the second paragraph below.
	
	This is another change to try and get the testing
	system working on Suns well again.  This time I
	went for the hacky-er approach: I no longer set
	LANG or LC_ALL when we're running on the Suns (I
	couldn't find a setting that didn't cause it
	to complain during our system() calls at compile
	time for all programs).
	
	Also in this change: the default logfile name
	created by the test system is now
	$user.platform.log rather than just $user.log
	so that the testing system may be run on two
	platforms simultaneously (for example, I test
	Sun and Linux simultaneously, and could
	imagine doing the same for netbsd and linux64
	on John's system).

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/02/05 13:59:33 -- deitz

Log message:
	Collapsed Loc:: ILink:: BaseAST:: hierarchy.  There is no longer Loc
	or ILink, just BaseAST.  This allows us to clean up the code in some
	non-superficial ways.  Moved prev, next, filename, and lineno into
	BaseAST.
	
	Moved parentScope out of Symbol, Stmt, and Expr, and into BaseAST.  It
	is not currently used in Type or AList.
	
	Changed call_fixup to just fixup and made it more focused.  This
	greatly improves the performance of compilation.  For example,
	SpecializeParenOps on trivial/shannon/compSampler now takes 0.056
	seconds on my machine rather than 12.87 seconds!
	
	Unified remove, insertBefore, insertAfter, etc.  The current functions
	can now be called when the nodes are in the AST and when they are not.
	If they are, fixup is called, otherwise it is not.
	
	  BaseAST::insertBefore(BaseAST* new_ast) inserts new_ast before this
	    in a list
	
	  BaseAST::insertAfter(BaseAST* new_ast) inserts new_ast after this in
	    a list
	
	  BaseAST::replace(BaseAST* new_ast) replaces this with new_ast
	
	  BaseAST::remove() removes this from the AST, remove does not yet
	    take into account symbols and removing them from the symboltable
	
	The functions on AList now include
	
	  AList<...>::insertAtTail(elem) inserts elem at the end of the list
	
	  AList<...>::insertAtHead(elem) inserts elem at the beginning of the
	    list
	
	  AList<...>::add(alist) inserts the contents of a list at the end of
	    the list

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      pragma.cpp stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h misc.h stmt.h 
	                          symbol.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp pass.cpp 
	chapel/compiler/symtab/: insertDefaultInitVariables.cpp 
	                         insertOutParameterInitializations.cpp 
	                         symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             constructComplexLiterals.cpp 
	                             eliminateReturns.cpp 
	                             expandSeqExprAssignments.cpp 
	                             findUnknownTypes.cpp fixup.cpp 
	                             fixup.h insertAnonymousDomains.cpp 
	                             insertAnonymousDomains.h 
	                             insertAnonymousTypes.cpp 
	                             insertElidedLoops.cpp 
	                             insertIndexType.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             processParameters.cpp 
	                             removeSeqOperations.cpp 
	                             resolveModuleUses.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 
	                             transformLetExprs.cpp 
	chapel/compiler/util/: misc.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Removed files:
	chapel/compiler/AST/: link.cpp loc.cpp 
	chapel/compiler/include/: link.h loc.h 

---------------------------------------------------------------------------

06/02/05 14:46:34 -- shannon

Log message:
	Added the _chpl_exit() function, renamed to exit() in
	the prelude, which does nothing but call exit()..

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/runtime/include/: stdchpl.h 
	chapel/runtime/src/: Makefile 
Added files:
	chapel/runtime/include/: exit.h 
	chapel/runtime/src/: exit.c 
	chapel/test/trivial/shannon/quit/: exit.chpl exit.good 

---------------------------------------------------------------------------

06/02/05 15:11:43 -- deitz

Log message:
	Added parsing support for parameters in functions.
	
	Added a test case of a parameter in a function.  The function should
	now be instantiated.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: chplenum.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_function1.chpl 
	                                         test_paramvar_function1.future 
	                                         test_paramvar_function1.good 

---------------------------------------------------------------------------

06/02/05 16:00:17 -- jplevyak

Log message:
	Remove fake complex conversions.
	
	Complex coercions wrappers work fine.  The problem is that
	the front end defines two different "complex" types: one
	is a class defined in _chpl_complex and the other is
	a BUILTIN_TYPE defined in type.cpp.
	
	Either one of these will work, both create problems.  Steve: do you
	want to pick one to remove?

Modified files:
	chapel/modules/standard/: _chpl_complex.chpl 

---------------------------------------------------------------------------

06/02/05 16:21:27 -- jplevyak

Log message:
	Implement new "primitive chapel_defvar" instead of hard-coding
	ExprDefs as IF1 code. Currently this is only used for
	the well behaved types (not Arrays, Domains, etc), but it should
	give us more flexibility to handle things like "like" particularly
	when all types have defaultVal or defaultConstructor.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp 
	chapel/compiler/include/: driver.h fa.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

06/03/05 10:03:35 -- deitz

Log message:
	Added support for anonymous record types like
	
	  var r : record { var x : integer; var y : string; };
	
	I didn't add the alternative syntax
	
	  var r : (x : integer, y : string);
	
	because of a shift/reduce conflict with tuple types.  This may require
	a little effort but could be worthwhile cleaning of tuples.
	
	Codegen now declares enums followed by type prototypes followed by
	type definitions followed by other prototypes followed by other
	definitions.  This is because a type needs to be fully specified
	before it can be in a function prototype.
	
	Added support anonymous record types in InsertAnonymousTypes so they
	get symbols.
	
	Cleaned up the way structs are parsed and built in support of this
	change.
	
	Added three tests, one works, two are futures.  The two futures look
	at anonymous record types with primary methods and the alternative
	syntax.
	
	Added new out for sum_type tests.  This is a line number inconsistency
	that I'll try to look at when it fails next.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symscope.cpp symtab.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
Added files:
	chapel/test/classes/deitz/: test_anon_record1.chpl 
	                            test_anon_record1.good 
	                            test_anon_record2.chpl 
	                            test_anon_record2.future 
	                            test_anon_record2.good 
	                            test_anon_record3.chpl 
	                            test_anon_record3.future 
	                            test_anon_record3.good 

---------------------------------------------------------------------------

06/03/05 11:03:41 -- shannon

Log message:
	Added a future test to capture a bug found
	with the -h option.  I need to throw an
	error if any characters follow 'h'.

Added files:
	chapel/test/execflags/shannon/: spellingTest.chpl 
	                                spellingTest.execopts 
	                                spellingTest.future 
	                                spellingTest.good 

---------------------------------------------------------------------------

06/03/05 11:35:40 -- shannon

Log message:
	Added a future test to capture a bug found
	with the --memmax runtime option.  Make the
	error message more accurate.

Added files:
	chapel/test/memory/shannon/: memmaxIntOnly.chpl 
	                             memmaxIntOnly.execopts 
	                             memmaxIntOnly.future 
	                             memmaxIntOnly.good 

---------------------------------------------------------------------------

06/03/05 12:05:27 -- bradc

Log message:
	Fixed a number of issues related to byte-ordering that
	were causing failures on the Suns:
	
	- when I switched the 'f'/'F' flags from int to bool,
	  I switched the command-line parsing of them, but
	  failed to switch the environment variable parsing,
	  such that environment variables (like CHPL_DEVELOPER)
	  weren't necessarily working correctly on Suns.
	
	- switched a use of _chpl_tostring_integer from using
	  "%d" as its output format to _default_write_integer64
	  which should be more portable and immune to byte
	  ordering.
	
	- fixed _chpl_tostring_complex to not rely on byte
	  ordering of the .re and .im fields in the complex
	  value by accessing them directly.
	
	- switched formatting strings in test_format_primitives
	  to use %lld rather than %d for now since we don't
	  do our own Chapel-oriented parsing of formatting
	  strings yet.  This is consistent with other tests, if
	  unfortunate.
	
	-Brad

Modified files:
	./: log.txt 
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/backend/: beautify.cpp 
	chapel/compiler/main/: arg.cpp 
	chapel/runtime/src/: chpltypes.c 
	chapel/test/trivial/deitz/: test_format_primitives.chpl 

---------------------------------------------------------------------------

06/03/05 13:54:43 -- deitz

Log message:
	Added support for the alternative syntax for anonymous record types:
	
	  var r : (x : integer, y : string);
	
	This syntax requires that the type be specified, otherwise it is
	indistinguishable from a tuple type.
	
	Eliminated DefStmt::typeDef() and DefStmt::moduleDef().  Started to
	remove DefStmt::fnDef() and DefStmt::varDef().  These are bad
	functions because they only return a single symbol though multiple may
	exist.  Added functions DefStmt::definesTypes, definesFunctions, and
	definesVariables that return true if the DefStmt only defines those
	symbols.
	
	Removed the future for test_anon_record3 and added a new test that
	declares two fields in a class in the same line.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: insertThisParameters.cpp 
	chapel/test/ssca/ssca2/: ssca2.parses.chpl 
Added files:
	chapel/test/classes/deitz/: test_record9.chpl test_record9.good 
Removed files:
	chapel/test/classes/deitz/: test_anon_record3.future 

---------------------------------------------------------------------------

06/03/05 14:11:37 -- jplevyak

Log message:
	Implemented instantiate_generic for param types (and FnSymbol and UndefinedSymbol)
	up to UndateSymbols.... I think we need an "UpdateExpr".

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp pattern.cpp 
	chapel/compiler/include/: chplenum.h symbol.h type.h 
	chapel/compiler/parser/: chapel.y 

---------------------------------------------------------------------------

06/03/05 14:46:49 -- deitz

Log message:
	very small amount of initial comments

Modified files:
	chapel/test/ssca/ssca2/: ssca2.parses.chpl 

---------------------------------------------------------------------------

06/03/05 15:08:48 -- shannon

Log message:
	Added a future test to capture a bug found
	with the --memtrace runtime option.  Make the
	error message more informative when no
	filename is given.

Added files:
	chapel/test/memory/shannon/: memtraceNoFilename.chpl 
	                             memtraceNoFilename.execopts 
	                             memtraceNoFilename.future 
	                             memtraceNoFilename.good 

---------------------------------------------------------------------------

06/03/05 15:20:09 -- shannon

Log message:
	Added a future test to capture a bug found
	with the --memstat and --memtrack runtime
	options.  I need to hrow an error if either
	flag is followed by an equals sign.

Added files:
	chapel/test/memory/shannon/: memstatEquals.chpl 
	                             memstatEquals.execopts 
	                             memstatEquals.future 
	                             memstatEquals.good 

---------------------------------------------------------------------------

06/03/05 17:43:02 -- deitz

Log message:
	Added support to UpdateSymbols so that a symbol can be replaced by an
	expression (as is the case when a parameter is instantiated).
	
	The parameter is not currently removed from the function, but it is a
	dead argument.
	
	Removed future for test_paramvar_function1.

Modified files:
	chapel/compiler/AST/: symbol.cpp type.cpp 
	chapel/compiler/traversals/: updateSymbols.cpp updateSymbols.h 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_function1.future 

---------------------------------------------------------------------------

06/06/05 07:38:43 -- shannon

Log message:
	Woops.  Forgot to include the contents of this
	file on my prior commit..

Modified files:
	chapel/test/memory/shannon/: memstatEquals.future 

---------------------------------------------------------------------------

06/06/05 10:30:59 -- bradc

Log message:
	A small change in which AList::only() was being used
	on statement lists that weren't guaranteed to just
	have a single element in them.

Modified files:
	chapel/compiler/traversals/: insertThisParameters.cpp 

---------------------------------------------------------------------------

06/06/05 10:32:01 -- bradc

Log message:
	These are a bunch of tests that approximate the
	implementation of a sequential reduction using
	user-defined classes with type instantiation.
	
	In looking through SSCA2, was thinking about
	reductions and scans, implementing them via
	an early source-to-source conversion, and was
	curious to see what would happen if I tried
	to write the code which would result from such
	a transformation manually in Chapel, since it
	relied on instantiating classes using types.
	It worked out really nicely in most cases, so
	I wrote many versions as an exploration as to
	how hard the type variable instantiation of
	classes can be pushed (in directions that the
	reductions might require) and was very impressed
	at how well it worked.  Which isn't to say that
	there weren't cases that failed, but many of
	these I knew were going to be pushing the limits.
	
	Some of these tests would seem to relate to
	David's desire to query the type variables of
	classes from yesterday's email discussion,
	and are perhaps good fodder for discussion
	for that reason.
	
	Here are the futures, categorized:
	
	Futures I believe ought to work, but don't:
	
	- inferstatetype2.chpl (john, could you look at
	  this?)
	- threeuses-cast.chpl (deitz, bradc: seems to be
	  simple integer->string conversion problem)
	- usestate.chpl (john, could you look at this one
	  too?  May be related to inferstatetype2.chpl)
	
	Futures that seem related to our email discussion
	of last week:
	
	- threeclasstypes.chpl
	- threeclasstypes-construct.chpl
	- usetype.chpl
	- usetype2.chpl
	
	Futures that I believe we know don't work yet:
	- promote.chpl (relies on promotion)

Added files:
	chapel/test/reductions/bradc/manual/: .cvsignore README 
	                                      identisinferredvar.chpl 
	                                      identisinferredvar.good 
	                                      identisvar.chpl 
	                                      identisvar.good 
	                                      inferstatetype.chpl 
	                                      inferstatetype.good 
	                                      inferstatetype2.chpl 
	                                      inferstatetype2.future 
	                                      inferstatetype2.good 
	                                      manual.chpl manual.good 
	                                      promote.chpl 
	                                      promote.future 
	                                      promote.good 
	                                      threeclasstypes-construct.chpl 
	                                      threeclasstypes-construct.future 
	                                      threeclasstypes-construct.good 
	                                      threeclasstypes-manual.chpl 
	                                      threeclasstypes-manual.good 
	                                      threeclasstypes.chpl 
	                                      threeclasstypes.future 
	                                      threeclasstypes.good 
	                                      threeuses-cast.chpl 
	                                      threeuses-cast.future 
	                                      threeuses-cast.good 
	                                      threeuses.chpl 
	                                      threeuses.good 
	                                      twouses.chpl twouses.good 
	                                      usestate.chpl 
	                                      usestate.future 
	                                      usestate.good 
	                                      usestate2.chpl 
	                                      usestate2.good 
	                                      usetype.chpl 
	                                      usetype.future 
	                                      usetype.good usetype2.chpl 
	                                      usetype2.future 
	                                      usetype2.good 

---------------------------------------------------------------------------

06/06/05 10:47:09 -- jplevyak

Log message:
	Add function to get the set of keys from a Map.

Modified files:
	chapel/compiler/include/: map.h 

---------------------------------------------------------------------------

06/06/05 13:22:41 -- bradc

Log message:
	Fixing this .good file.  I think Steve just had a thinko
	in his check-in.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_function1.good 

---------------------------------------------------------------------------

06/06/05 13:44:24 -- jplevyak

Log message:
	Set the line number globals before each wrapper is created.
	Convert VAR_PARAM into PARAM_PARAMETER when building a constructor.
	sum_type-1 and 2 should be stable now.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 

---------------------------------------------------------------------------

06/06/05 14:23:09 -- jplevyak

Log message:
	Change findTypeVariables to find any type of AST and use it to detect
	a generic ParamSymbol.  This causes test_paramvar_class1.chpl to
	SEGV when it encounters an Expr with a null parentExpr and parentStmt
	(as well as parentSymbol).
	
	Commented out checkSemantics check for ParamSymbols::init being non-NULL...
	I don't know if this is a good idea, as it causes trivial/roxana/test_param_decl3
	to fail, but it is easy for Steve to reverse this after his class.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: checkSemantics.cpp 
	                             findTypeVariables.cpp 
	                             findTypeVariables.h 

---------------------------------------------------------------------------

06/06/05 14:41:25 -- jplevyak

Log message:
	Fix test_paramvar_class1.  The problem was that
	        fn->defPoint->insertBefore(fnDef);
	needed to be before
	        instantiate_add_subs(substitutions, map);
	        instantiate_update_expr(substitutions, fnDef, map);
	Since ->replace() doesn't work on something which hasn't been fixup'ed.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_paramvar_class1.future 

---------------------------------------------------------------------------

06/06/05 14:58:03 -- deitz

Log message:
	Added a test that instantiates a class with a class.

Added files:
	chapel/test/types/type_variables/deitz/: test_instantiate1.chpl 
	                                         test_instantiate1.future 
	                                         test_instantiate1.good 

---------------------------------------------------------------------------

06/06/05 15:05:49 -- deitz

Log message:
	Added another test of instantiating a class with a class.

Added files:
	chapel/test/types/type_variables/deitz/: test_instantiate2.chpl 
	                                         test_instantiate2.future 
	                                         test_instantiate2.good 

---------------------------------------------------------------------------

06/06/05 15:32:40 -- jplevyak

Log message:
	Update .future file.  foo is marked as dead because it *is* dead.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_instantiate1.future 

---------------------------------------------------------------------------

06/06/05 15:34:47 -- jplevyak

Log message:
	Fix .future and .good.  The variable "x" is initialized to null (as
	it should be).   The test was incorrect.   Perhaps a record was intended?

Modified files:
	chapel/test/types/type_variables/deitz/: test_instantiate2.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_instantiate2.future 

---------------------------------------------------------------------------

06/06/05 15:39:54 -- deitz

Log message:
	Added new class test like I wanted.  It works.
	
	Updated .good for test_instantiate1.

Modified files:
	chapel/test/types/type_variables/deitz/: test_instantiate1.good 
Added files:
	chapel/test/types/type_variables/deitz/: test_instantiate3.chpl 
	                                         test_instantiate3.good 

---------------------------------------------------------------------------

06/06/05 16:25:04 -- jplevyak

Log message:
	Test case for declaring a variable based on a type variable.
	The "r.t" reference doesn't make it to analysis.

Added files:
	chapel/test/types/type_variables/jplevyak/: typevar_use-1.chpl 
	                                            typevar_use-1.future 
	                                            typevar_use-1.good 

---------------------------------------------------------------------------

06/06/05 16:50:34 -- deitz

Log message:
	Added high-level support for select and when statements which store
	Chapel's version of the case statement.  After this is in, we can go
	ahead with typeselect for unions.
	
	John, can you look into adding analysis support.
	
	Added one test case.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/trivial/deitz/: test_select1.chpl 
	                            test_select1.future 
	                            test_select1.good 

---------------------------------------------------------------------------

06/06/05 16:55:29 -- bradc

Log message:
	Took a pass over ssca2.parses.chpl to update comments,
	respond to some of Steve's comments, and mark why other
	things are commented out for future reference.
	
	Updated some bugs/typos in ssca2.orig.chpl.
	
	Added ssca2.chpl, with the intention of evolving this
	code to be our best ssca2 implementation at any time
	(with ssca.orig.chpl serving as a placeholder for
	something approximating the whitepaper's implementation).

Modified files:
	chapel/test/ssca/ssca2/: ssca2.orig.chpl ssca2.parses.chpl 
Added files:
	chapel/test/ssca/ssca2/: ssca2.chpl 

---------------------------------------------------------------------------

06/07/05 11:27:55 -- jplevyak

Log message:
	Support for the "select" and "when" statements.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: if1.h 
Removed files:
	chapel/test/trivial/deitz/: test_select1.future 

---------------------------------------------------------------------------

06/07/05 11:28:27 -- jplevyak

Log message:
	Added prim_equal so that test_select1 works from low level codegen.

Modified files:
	chapel/compiler/etc/: c_runtime.h 

---------------------------------------------------------------------------

06/07/05 12:48:21 -- deitz

Log message:
	Removed support for # used to append or prepend to a sequence.  This
	operator can only be used for sequence concatenation now.  Added hack
	to support prepending and appending integers and strings since we can
	tell they are not sequences before analysis.
	
	Cleaned up support for sequences.
	
	Readded a test in insertBefore, insertAfter, and replace to make sure
	that what is being added is not in a list already (and thus needs to
	be copied).  Maybe this should also check the parents (since then it
	would need to be copied as well).
	
	Removed four more sequence futures.  The current two sequence failures
	are caused by:
	
	  1. not copying a sequence that is appended/prepended/concatenated to
	     and is not dead.
	
	  2. iterating over a sequence that is not a sequence of integers.

Modified files:
	chapel/compiler/AST/: baseAST.cpp stmt.cpp type.cpp 
	chapel/compiler/include/: alist.h type.h 
	chapel/compiler/passes/: filesToAST.cpp filesToAST.h 
	chapel/compiler/traversals/: insertTemps.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/runtime/include/: seq.h 
	chapel/test/classes/deitz/: test_myseq_record.chpl 
	                            test_myseq_record2.chpl 
	                            test_myseq_record3.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: chain.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good printempty.good 
	                                  printstring.good 
	                                  usebeforedef.good var2.good 
	                                  writen.good writetwo.good 
Removed files:
	chapel/test/types/seq/deitz/: test_seq3.future test_seq6.future 
	                              test_seq7.future test_seq8.future 

---------------------------------------------------------------------------

06/07/05 13:45:33 -- jplevyak

Log message:
	Eliminated some extra IF1 code which was being generated on
	AssignOp(MemberAccesss,...)) and made the complementary changes
	to the test cases.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

06/07/05 13:54:44 -- deitz

Log message:
	Added a test case that starts to build up a domain class.

Added files:
	chapel/test/arrays/deitz/: test_array_class1.chpl 
	                           test_array_class1.future 
	                           test_array_class1.good 

---------------------------------------------------------------------------

06/07/05 14:04:10 -- bradc

Log message:
	Oops, this was supposed to be a completely local file,
	never checked in.  Sorry `bout that.

Removed files:
	./: log.txt 

---------------------------------------------------------------------------

06/07/05 14:08:34 -- bradc

Log message:
	* factored code that generated casts-to-strings
	  (_chpl_tostring*) at codegen time into a helper
	  function so that it could be called from multiple
	  places with less code duplication.
	
	* improved typeInfo for MemberAccess expressions
	  to use John's member_type information.
	
	* implemented UserType::getType()
	
	* added code generation for CastExpr's of type
	  string.
	
	* removed future for threeuses-cast.future.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
Removed files:
	chapel/test/reductions/bradc/manual/: threeuses-cast.future 

---------------------------------------------------------------------------

06/07/05 15:04:47 -- deitz

Log message:
	Added a macro to run through the elements in an AList (last checkin)
	and made some uses of it (this checkin).  The macro is
	
	  for_alist(Type, var, AList)
	
	and it works similarly to forv_Vec.

Modified files:
	chapel/compiler/AST/: expr.cpp 

---------------------------------------------------------------------------

06/07/05 15:30:17 -- deitz

Log message:
	Added another domain class future.
	
	Small changes to datablock in prelude.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
Added files:
	chapel/test/arrays/deitz/: test_array_class2.chpl 
	                           test_array_class2.future 
	                           test_array_class2.good 

---------------------------------------------------------------------------

06/07/05 15:50:53 -- deitz

Log message:
	Added a mark showing that sequence literals do not make it to analysis.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

06/07/05 16:11:30 -- deitz

Log message:
	Removed future.  This test failed because it used sequences.  It now
	works.  Fixed its .good.

Modified files:
	chapel/test/classes/bradc/records/: assignRecord2.good 
Removed files:
	chapel/test/classes/bradc/records/: assignRecord2.future 

---------------------------------------------------------------------------

06/07/05 16:39:48 -- deitz

Log message:
	Added methods real and imag (that take no parentheses) to complex
	record.  Added a future test to use these two methods.
	
	Removed future on test_mycomplex_record.

Modified files:
	chapel/modules/standard/: _chpl_complex.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/test/types/complex/deitz/: test_complex3.chpl 
	                                  test_complex3.future 
	                                  test_complex3.good 
Removed files:
	chapel/test/classes/deitz/: test_mycomplex_record.future 

---------------------------------------------------------------------------

06/07/05 16:49:11 -- bradc

Log message:
	Continuing to work through the ssca2 code, did some
	fairly innocuous changes: added "scan" to the parser
	(and tucked it into ReduceExpr, adding a boolean to
	indicate whether it's a scan or reduce -- all stuff
	we'll want to reconsider when we actually implement
	these); added else-less conditional expressions to
	the parser; and removed square brackets from the ssca2
	codes as an indexing mechanism (should be legal
	eventually, but easier to just rewrite for now).

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/test/ssca/ssca2/: ssca2.chpl ssca2.parses.chpl 

---------------------------------------------------------------------------

06/07/05 16:58:36 -- bradc

Log message:
	Updated some future tests of user-defined I/O
	functions to use the current global-function-based
	approach rather than the method-based approach
	that I'd anticipated (this change made half of my
	tests irrelevant, so those got removed).
	
	Made a slight change to buildClassConstructorsEtc.cpp
	so that it wouldn't choke if the user created a write
	function with more or fewer than one argument.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	chapel/test/classes/bradc/: writeclass1a.chpl writerecord1a.chpl 
Added files:
	chapel/test/reductions/bradc/: .cvsignore 
Removed files:
	chapel/test/classes/bradc/: writeclass1a.future 
	                            writeclass1b.chpl 
	                            writeclass1b.future 
	                            writeclass1b.good 
	                            writerecord1a.future 
	                            writerecord1b.chpl 
	                            writerecord1b.future 
	                            writerecord1b.good 

---------------------------------------------------------------------------

06/08/05 09:57:16 -- bradc

Log message:
	Made this sub_test script a tcsh script in order
	to get access to limit vmemorysize on sunos (it
	wasn't available under csh).

Modified files:
	chapel/test/memory/shannon/outofmemory/: sub_test 

---------------------------------------------------------------------------

06/08/05 10:17:02 -- deitz

Log message:
	Combined traversals ConstructComplexLiterals (which replace complex
	literals with calls to the complex constructor) and InsertTemps (which
	replaced sequence literals with a temporary and built them up) into a
	new traversal InsertLiteralTemps meant to simplify Chapel literals in
	general.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
Added files:
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	                             insertLiteralTemps.h 
Removed files:
	chapel/compiler/traversals/: constructComplexLiterals.cpp 
	                             constructComplexLiterals.h 
	                             insertTemps.cpp insertTemps.h 

---------------------------------------------------------------------------

06/08/05 10:40:18 -- shannon

Log message:
	Added the halt() function for the chapel user.  Halt is
	converted to some number of write statements, a writeln
	statement, and an exit statement with status "0".
	
	Usage:
	
	  halt("x and y are not equal!\n", "x = ", x, ", y = ", y);

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 
Added files:
	chapel/test/trivial/shannon/quit/: halt.chpl halt.good 

---------------------------------------------------------------------------

06/08/05 10:53:38 -- jplevyak

Log message:
	Fix for uninitialized variable in member_access_info.
	Additional test for 0-arity bound functions which
	exposed the bug.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/traversals/: resolveSymbols.cpp 
Added files:
	chapel/test/functions/jplevyak/: zeroarity-bound-1.chpl 
	                                 zeroarity-bound-1.good 

---------------------------------------------------------------------------

06/08/05 11:31:17 -- deitz

Log message:
	Removed tuple futures.

Removed files:
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple3.future 
	                                test_tuple_simple4.future 
	                                test_tuple_simple5.future 
	                                test_tuple_simple7.future 

---------------------------------------------------------------------------

06/08/05 11:51:39 -- deitz

Log message:
	Fixed passlist, replacing old verify calls with new ones.

Modified files:
	chapel/compiler/main/: passlist.h 

---------------------------------------------------------------------------

06/08/05 16:02:02 -- jplevyak

Log message:
	Fix SEGV caused by insertion of duplicate Code nodes into the tree.
	Introduced an assert to detect this at the point of insertion.

Modified files:
	chapel/compiler/analysis/: analysis.cpp if1.cpp 
	chapel/compiler/include/: code.h 

---------------------------------------------------------------------------

06/08/05 16:16:25 -- deitz

Log message:
	Factored ResolveDomainRanks into InsertAnonymousDomains in one of many
	steps to clean up handling of domains.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/traversals/: Makefile.share 
	                             insertAnonymousDomains.cpp 
	                             insertAnonymousDomains.h 
Removed files:
	chapel/compiler/traversals/: resolveDomainRanks.cpp 
	                             resolveDomainRanks.h 

---------------------------------------------------------------------------

06/08/05 16:46:30 -- jplevyak

Log message:
	Add code to restrict newly instantiated functions to handle only those
	data flow values which their new types can handle rather than the boader
	set potentially allowed to initiate instantiation (i.e. prepare for
	"where" clauses).
	
	Fix minor issue with handling of bound function names.
	
	Fixed test/reductions/bradc/manual/usestate and removed future.

Modified files:
	chapel/compiler/analysis/: ast.cpp pattern.cpp 
Removed files:
	chapel/test/reductions/bradc/manual/: usestate.future 

---------------------------------------------------------------------------

06/08/05 16:55:30 -- deitz

Log message:
	Cleaned up complex and seq modules to use an _ before all identifiers
	that we want to hide from the user rather than a longer mangled name
	that made the code more difficult to deal with.

Modified files:
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/traversals/: insertLiteralTemps.cpp 
	chapel/modules/standard/: _chpl_complex.chpl _chpl_seq.chpl 
	chapel/runtime/include/: seq.h 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

06/08/05 17:03:11 -- deitz

Log message:
	Fixed temporary regressions by changing local passlist in testing
	directory.  Ugh.  It seems okay like now since it doesn't use any pass
	that actually does anything, but it's still not ideal to me.

Modified files:
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good mvm-seq.good 
	                                     mypasslist.h test.good 

---------------------------------------------------------------------------

06/09/05 08:17:53 -- jplevyak

Log message:
	Fix for altered line numbers in _chpl_XXX file.
	We need to a way for me to query a filename to see if
	it is a "builtin" file so as not to output those line
	numbers into the logs so that regressions will not result
	when the builtin files are updated.  Currently I have
	hardcoded the preludes, but now that we have whole directories
	that is nolonger feasible.

Modified files:
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

06/09/05 08:57:52 -- deitz

Log message:
	Small fix to _data class in prelude.

Modified files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

06/09/05 09:04:14 -- jplevyak

Log message:
	test_complex3.chpl was incorrectly using x.imag and x.real to
	access the components of a complex number whereas _chpl_complex.chpl
	was defining them to be _re and _im.  Corrected the test.
	
	Removed 2 futures for tests which work.

Modified files:
	chapel/test/types/complex/deitz/: test_complex3.chpl 
Removed files:
	chapel/test/reductions/bradc/manual/: inferstatetype2.future 
	chapel/test/types/complex/deitz/: test_complex3.future 

---------------------------------------------------------------------------

06/09/05 09:09:19 -- jplevyak

Log message:
	Fixed the SEGV, reassigned back to Steve. These are large tests which
	should probably be broken up into little tests as they raise a number
	of issues which would probably be better tacked seperately.

Modified files:
	chapel/test/arrays/deitz/: test_array_class1.future 
	                           test_array_class2.future 

---------------------------------------------------------------------------

06/09/05 10:18:08 -- deitz

Log message:
	Added two test cases that modify a member access of a function return.
	
	Reinstated test_complex3 test and future.
	
	Superficial changes to test_array_class1.

Modified files:
	chapel/test/arrays/deitz/: test_array_class1.chpl 
	chapel/test/types/complex/deitz/: test_complex3.chpl 
Added files:
	chapel/test/functions/deitz/: test_var_function_access.chpl 
	                              test_var_function_access.good 
	                              test_var_function_access2.chpl 
	                              test_var_function_access2.future 
	                              test_var_function_access2.good 
	chapel/test/types/complex/deitz/: test_complex3.future 

---------------------------------------------------------------------------

06/09/05 10:28:40 -- jplevyak

Log message:
	Add new test that just tries to print a complex:
	it fails because:
	There are 2 versions of function write(x : complex) and two versions
	of _tostring (one in prelude.chpl and one in _chpl_complex.chpl...
	we should have only one.

Added files:
	chapel/test/types/complex/jplevyak/: complex-1.chpl 
	                                     complex-1.future 
	                                     complex-1.good 

---------------------------------------------------------------------------

06/09/05 10:32:08 -- jplevyak

Log message:
	Add back in update of member_access->member

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

06/09/05 10:59:34 -- deitz

Log message:
	Changed the record instantiation test to be written more how we want
	to write it.  It currently doesn't parse, but will with my next
	checkin.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.chpl 

---------------------------------------------------------------------------

06/09/05 11:01:03 -- jplevyak

Log message:
	Added new test for complex numbers:
	
	The problem is that the "real" method is not being returned by
	visible_functions().  Likely because module scoping isn't working
	correctly.
	
	The reason this works for classes and not for the record "complex" is
	because all members for classes are universally available and don't
	depend on scoping.

Added files:
	chapel/test/types/complex/jplevyak/: complex-2.chpl 
	                                     complex-2.future 
	                                     complex-2.good 

---------------------------------------------------------------------------

06/09/05 11:11:04 -- deitz

Log message:
	Added support for ExprType : Type.  It parses and heads to analysis.
	
	This adds support for things like
	
	  x.t
	
	and
	
	  var f : foo(t = integer)
	
	Futurized a few tests that use the former construct in a very simple
	way that used to work, but not very well.
	
	Added a new test to also look at this.
	
	Removed an old sequence test that seemed basically dead.

Modified files:
	chapel/compiler/AST/: baseAST.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/traversals/: verifyASTType.cpp 
Added files:
	chapel/test/classes/deitz/: test_type_in_class3.future 
	                            test_type_in_class4.chpl 
	                            test_type_in_class4.future 
	                            test_type_in_class4.good 
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-manual.future 
Removed files:
	chapel/test/classes/deitz/: test_myseq_record.chpl 
	                            test_myseq_record.good 

---------------------------------------------------------------------------

06/09/05 11:59:15 -- jplevyak

Log message:
	Update .future.

Modified files:
	chapel/test/types/complex/deitz/: test_complex3.future 

---------------------------------------------------------------------------

06/09/05 13:51:59 -- deitz

Log message:
	Fixed a bug in which the real and imag methods in the complex record
	could not be called from other modules.  In general, there was a
	problem including methods in a record into the visible functions of a
	module that used that record.
	
	Modified the real and imag methods to be var returns so that the user
	can change the _re and _im fields of a complex.  Unfortunately the
	=real and =imag functions don't show up, but I bet I can fix this.
	
	Added Symbol::getSymbol() that returns the real symbol in the case of
	a ForwardingSymbol.  This is kind of like Type::getType.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/modules/standard/: _chpl_complex.chpl 
Added files:
	chapel/test/types/complex/deitz/: test_complex4.chpl 
	                                  test_complex4.future 
	                                  test_complex4.good 

---------------------------------------------------------------------------

06/09/05 15:12:00 -- deitz

Log message:
	Fixed a bug in which setters for methods were not added to the method
	list.  This now allows us to assign to real or imag methods of the
	complex record.

Modified files:
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
Removed files:
	chapel/test/types/complex/deitz/: test_complex4.future 

---------------------------------------------------------------------------

06/09/05 15:54:41 -- deitz

Log message:
	Copied ExprType::expr into DefExpr::exprType.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 

---------------------------------------------------------------------------

06/09/05 16:17:56 -- jplevyak

Log message:
	Added support for storing the "where" expression in the FnSymbol.
	Tried to get the copyXXX traversalXXX and replaceXXX functions
	right...
	Added support for constraining type variable parameters:
	  function f(type t : numeric, y) ..
	Added test cases for this and some other test cases for ?t which
	  is currently unsupported yet.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/analysis/: analysis.cpp ast.cpp 
	chapel/compiler/include/: symbol.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/compiler/traversals/: scopeResolveSymbols.cpp 
Added files:
	chapel/test/types/type_variables/jplevyak/: where-2-error.chpl 
	                                            where-2-error.good 
	                                            where-2.chpl 
	                                            where-2.good 
	                                            where-3-error.chpl 
	                                            where-3-error.future 
	                                            where-3-error.good 
	                                            where-3.chpl 
	                                            where-3.future 
	                                            where-3.good 
	                                            where-4.chpl 
	                                            where-4.future 
	                                            where-4.good 

---------------------------------------------------------------------------

06/09/05 16:25:19 -- bradc

Log message:
	Some more modifications to ssca2 versions
	based on latest pass through them -- Mack
	pointed out we changed from "with" to "use"
	to refer to an instance's fields in an
	execution context; put error/assert syntax
	into that which Shannon is implementing;
	fixed up some other small things.
	
	Also wrote a variation on ssca2.parses.chpl
	which provides element types for all of its
	arrays.

Modified files:
	chapel/test/ssca/ssca2/: ssca2.chpl ssca2.parses.chpl 
Added files:
	chapel/test/ssca/ssca2/: ssca2.typedarrays.chpl 

---------------------------------------------------------------------------

06/09/05 18:01:32 -- jplevyak

Log message:
	Fix get_ast_children which wasn't updated to include exprType.
	Removed some cruft from analysis.cpp
	Add code to handle ExprType.
	Updated .future with current status: the problem
	  with test_typevar_record1 now is that instantaited types don't
	  have their defaultConstructor set.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.future 

---------------------------------------------------------------------------

06/10/05 08:55:53 -- mjoyner

Log message:
	Added reverse function to sequences.

Added files:
	chapel/test/trivial/mjoyner/seq/: seq_reverse.chpl 
	                                  seq_reverse.good 

---------------------------------------------------------------------------

06/10/05 09:19:08 -- deitz

Log message:
	Updated regressions file.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

06/10/05 09:20:14 -- jplevyak

Log message:
	Add 2 new tests to see if we can pass around types.  This
	is going to be necessary to handle things like C(t = c.t) where
	t is a type variable.

Added files:
	chapel/test/types/type_variables/jplevyak/: type_variable-2.chpl 
	                                            type_variable-2.future 
	                                            type_variable-2.good 
	                                            type_variables-1.chpl 
	                                            type_variables-1.future 
	                                            type_variables-1.good 

---------------------------------------------------------------------------

06/10/05 09:20:36 -- deitz

Log message:
	Instantiated types now have their default constructors set.
	
	The test test_typevar_record1 now has problems in resolve types.  A
	variable's type remains an ExprType.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

06/10/05 09:21:35 -- deitz

Log message:
	Updated future.

Modified files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.future 

---------------------------------------------------------------------------

06/10/05 09:46:37 -- deitz

Log message:
	Added two trial array tests. The second seg faults in analysis. The
	first works.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial1.chpl 
	                           test_array_class_trial1.good 
	                           test_array_class_trial2.chpl 
	                           test_array_class_trial2.future 
	                           test_array_class_trial2.good 

---------------------------------------------------------------------------

06/10/05 10:11:27 -- mjoyner

Log message:
	Added reverse function to sequences.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 

---------------------------------------------------------------------------

06/10/05 10:44:59 -- deitz

Log message:
	Added another array class trial test.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial3.chpl 
	                           test_array_class_trial3.future 
	                           test_array_class_trial3.good 

---------------------------------------------------------------------------

06/10/05 10:51:57 -- jplevyak

Log message:
	update .future

Modified files:
	chapel/test/reductions/bradc/manual/: 
	                                      threeclasstypes-manual.future 

---------------------------------------------------------------------------

06/10/05 10:58:43 -- jplevyak

Log message:
	update .future : these are large tests which probably need to be broken up and
	should probably have some comment as to why they are failing.

Modified files:
	chapel/test/classes/deitz/: test_myseq_record2.future 
	                            test_myseq_record3.future 

---------------------------------------------------------------------------

06/10/05 11:00:41 -- jplevyak

Log message:
	Pushed the test farther along by returning the correct type for TypeExpr
	things.  Test now fails in codegen.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.future 

---------------------------------------------------------------------------

06/10/05 12:21:44 -- bradc

Log message:
	A mess of new tests -- some working, some future --
	which came out of the latest report card update.
	I don't think any of these futures are particularly
	top priority, though the twoRecords.chpl test is fairly
	mysterious and seems likely to cause problems sooner
	rather than later.
	
	(Here is a short description of the future tests
	that I wrote up as much for my own sake as anybody's):
	
	twoRecords.chpl : it seems as though if we have two
	  records with similar field names, the getters/setters
	  choke a bit
	
	assignRecord3.chpl : this assigns two records with the
	  same field names, but different types; causes problems
	  in addition to those experienced in twoRecords.chpl
	
	noelemtype.chpl : test of array declarations in which
	  element type is inferred
	
	intents-arrays.chpl : ordering problem in codegen -- low
	  priority
	
	arrayArg-explicit.chpl : problem when argument array type
	  is expressed
	
	returnSeq2.chpl : copies aren't made when assigning/
	  passing/returning sequences
	
	sumreduce.chpl : a reduction test; these are not yet
	  implemented
	
	returnTuple.chpl :
	returnTuple2.chpl : some tests that try to return tuples
	  in various ways and fail
	
	returnTuple3.chpl : this one works, but exhibits that
	  printing tuples doesn't use a very good format,
	  currently.

Added files:
	chapel/test/arrays/bradc/: noelemtype.chpl noelemtype.future 
	                           noelemtype.good 
	chapel/test/classes/bradc/records/: assignRecord3.chpl 
	                                    assignRecord3.future 
	                                    assignRecord3.good 
	                                    twoRecords.chpl 
	                                    twoRecords.future 
	                                    twoRecords.good 
	                                    twoRecords2.chpl 
	                                    twoRecords2.good 
	chapel/test/functions/bradc/: arrayArg-explicit.chpl 
	                              arrayArg-explicit.future 
	                              arrayArg-explicit.good 
	                              arrayArg.chpl arrayArg.good 
	                              intents-arrays.chpl 
	                              intents-arrays.future 
	                              intents-arrays.good 
	                              intents-arrays2.chpl 
	                              intents-arrays2.good 
	chapel/test/reductions/bradc/: sumreduce.chpl sumreduce.future 
	                               sumreduce.good 
	chapel/test/types/seq/bradc/: .cvsignore length.chpl length.good 
	                              length.modify.chpl 
	                              length.modify.good returnSeq.chpl 
	                              returnSeq.good returnSeq2.chpl 
	                              returnSeq2.future returnSeq2.good 
	chapel/test/types/tuple/bradc/: returnTuple.chpl 
	                                returnTuple.future 
	                                returnTuple.good 
	                                returnTuple2.chpl 
	                                returnTuple2.future 
	                                returnTuple2.good 
	                                returnTuple3.chpl 
	                                returnTuple3.future 
	                                returnTuple3.good 

---------------------------------------------------------------------------

06/10/05 12:26:44 -- deitz

Log message:
	Two more array class trial tests failing for currently unknown reasons.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial4.chpl 
	                           test_array_class_trial4.future 
	                           test_array_class_trial4.good 
	                           test_array_class_trial5.chpl 
	                           test_array_class_trial5.future 
	                           test_array_class_trial5.good 

---------------------------------------------------------------------------

06/10/05 12:31:27 -- bradc

Log message:
	Removing this future.  This test is getting
	the right results for the wrong reasons, but
	we now have other tests that exhibit this
	incorrect behavior, so I'm removing this
	future so that I don't look at it every few
	weeks.

Removed files:
	chapel/test/classes/deitz/: test_record_assign1.future 

---------------------------------------------------------------------------

06/10/05 12:52:53 -- jplevyak

Log message:
	Implement x.t (the ability to use member access to access a USER_TYPE in
	an object).

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
Removed files:
	chapel/test/classes/deitz/: test_type_in_class4.future 

---------------------------------------------------------------------------

06/10/05 13:35:52 -- jplevyak

Log message:
	Add code to build getters for type variables in classes.
	Add an option to control the above.
	Add a test which uses the option.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             updateSymbols.cpp 
Added files:
	chapel/test/types/type_variables/jplevyak/: 
	                                            test_typevar_class1.chpl 
	                                            test_typevar_class1.compopts 
	                                            test_typevar_class1.future 
	                                            test_typevar_class1.good 

---------------------------------------------------------------------------

06/10/05 14:12:46 -- deitz

Log message:
	Added where restricting parameter test case.

Added files:
	chapel/test/functions/deitz/: test_where_param1.chpl 
	                              test_where_param1.future 
	                              test_where_param1.good 

---------------------------------------------------------------------------

06/10/05 14:21:56 -- shannon

Log message:
	Added the assert() function for the chapel user.
	Assert takes a test expression, and prints a
	simple error message on failure.
	
	Usage:
	------
	  assert(x != 10);

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: specializeParenOpExprs.cpp 

---------------------------------------------------------------------------

06/10/05 14:23:24 -- shannon

Log message:
	Added a test to lock in the new assert().

Added files:
	chapel/test/trivial/shannon/quit/: assert.chpl assert.good 

---------------------------------------------------------------------------

06/10/05 16:25:34 -- jplevyak

Log message:
	added hack for primitive_chapel_vardef for low level code generation.
	fixed a bug in collect_PNodes which was causing SEGV in programs
	  with particularly complex structure.
	this fixed test_array_class_trial2.chpl

Modified files:
	chapel/compiler/analysis/: fun.cpp 
	chapel/compiler/etc/: c_runtime.h 

---------------------------------------------------------------------------

06/10/05 16:49:50 -- bradc

Log message:
	Added a test of empty sequence literals, motivated by
	Mack's explorations.  Not high priority.

Added files:
	chapel/test/types/seq/bradc/: emptySeq.chpl emptySeq.future 
	                              emptySeq.good 

---------------------------------------------------------------------------

06/13/05 09:26:53 -- deitz

Log message:
	Cleaned up code for applying this parameters to expressions in
	methods.
	
	Added _methodToken and _methodTokenType to prelude for upcoming
	change.
	
	Fixed .goods for regressions caused by changes in line numbers in
	standard modules and preludes.

Modified files:
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/traversals/: applyThisParameters.cpp 
	                             applyThisParameters.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

06/13/05 10:10:00 -- deitz

Log message:
	A builtin assignment function is no longer created for a record if one
	is provided.  Perhaps this is better to implement using function
	priorities where the automatically generated functions are resolved to
	with a lower priority.
	
	Added a comment to ResolveSymbols to the effect that assignment is not
	being resolved as a binary operator.
	
	Updated future of functions/jplevyak/equal-9.chpl.

Modified files:
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/test/functions/jplevyak/: equal-9.future 

---------------------------------------------------------------------------

06/13/05 10:25:33 -- jplevyak

Log message:
	update the test to be deterministic about the output (the current
	one depended on the order of computation of intermediates).
	updated the .good file to reflect the new order of output

Modified files:
	chapel/test/arrays/deitz/: test_array_class_trial2.chpl 
	                           test_array_class_trial2.good 

---------------------------------------------------------------------------

06/13/05 10:25:47 -- jplevyak

Log message:
	Remove .future for working test.

Removed files:
	chapel/test/arrays/deitz/: test_array_class_trial2.future 

---------------------------------------------------------------------------

06/13/05 10:27:00 -- jplevyak

Log message:
	remove instantiated types from the StructuralType::types array instead
	of just setting the pointer to NULL.

Modified files:
	chapel/compiler/AST/: symbol.cpp 

---------------------------------------------------------------------------

06/13/05 12:27:25 -- jplevyak

Log message:
	Added new log:  chpl -dd
	which logs dispatch information into log/log.d
	the log looks like the:
	
	2126- pass: 0 visible: 7
	2126- destructure_level: 0 candidates: 3 arguments: 3
	2126- arg 0 : =
	2126- arg 1 : foo
	2126- arg 2 : foo
	2126- cover_formals: 3
	2126- candidates:
	2126- 1: internal_prelude.chpl:81 Sym: 271 AST_id: 2372
	2126- 2: equal-9.chpl:2 Sym: 597 AST_id: 5761
	2126- 3: internal_prelude.chpl:38 Sym: 769 AST_id: 7403
	2126- unsubsumed: 1
	2126- candidates:
	2126- 1: equal-9.chpl:2 Sym: 597 AST_id: 5761
	2126- unambiguous: 1
	2126- destructure_level: 0 matches: 1
	2126- candidates:
	2126- 1: equal-9.chpl:2 Sym: 597 AST_id: 5761
	
	And should be accessed by "grep ^####-" where #### is the
	FUTURE # for the expression in question in the IF1 which is
	obtained from by chpl -di in the log: log/log.i and looks like:
	
	...
	  (MOVE (var "y" 603) (temp 2125))
	  (MOVE (temp 2125) (temp 2127))
	  (SEND (FUTURE (temp 2126)) (var "=" 14) (var "x" 602) (temp 2127))
	...
	
	% grep ^2126- log/log.d
	
	will give the above output. which says that in pass 0
	there are 7 visibile functions at the call site at
	the top destructuring level (0). There are 3 candidates
	where each argument matches independently the
	arguments with the types (=, foo, foo) where =
	is just the name of the function.  All 3 candidates
	are applicable at all argument sites for these arguments
	and they are given (by line number and FnSymbol id).
	One subsumes the others and it is at equal-9.chpl:2.
	It is unambiguous and (after recursing through any
	destructurings (there are none)) it remains the sole match.
	
	Please tell me if there is any aspect of this which you think
	could be improved.

Modified files:
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
	                           sym.cpp 
	chapel/compiler/include/: analysis.h fa.h log.h sym.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 

---------------------------------------------------------------------------

06/13/05 12:32:47 -- deitz

Log message:
	Added compiler flag
	
	  --apply-getters-setters
	
	to enable this change.
	
	Added a new pass ApplyGettersSetters that changes all MemberAccesses
	outside of getters, setters, and constructors into function calls so
	that
	
	  x.a
	
	becomes
	
	  a(x)
	
	This checkin also adds a fake _methodTokenType argument as the first
	parameter to distinguish methods from functions with the same type
	signatures so it really becomes
	
	  a(_methodToken, x)
	
	The getter is
	
	  a(_methodTokenType, ClassType)
	
	This code was originally done on the low-level.  This moves this
	transformation up to the high-level, but awaits symmetric changes in
	the low-level.

Modified files:
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp passlist.cpp passlist.h 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
	                             applyThisParameters.cpp 
	                             applyThisParameters.h 
	                             buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 
Added files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 
	                             applyGettersSetters.h 

---------------------------------------------------------------------------

06/13/05 15:11:02 -- jplevyak

Log message:
	Added code to optionally make = a bound member and to resolve
	operator =.  Add a test case to show that it works.  This has
	a number of problems with Tuples/Arrays as well a problem with
	re-resolving BinOps.  More work required.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: driver.h 
	chapel/compiler/main/: driver.cpp 
	chapel/compiler/parser/: internal_prelude.chpl 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             resolveSymbols.cpp 
	chapel/test/functions/jplevyak/: equal-9.future 
Added files:
	chapel/test/functions/jplevyak/: equal_method-1.chpl 
	                                 equal_method-1.compopts 
	                                 equal_method-1.good 

---------------------------------------------------------------------------

06/13/05 15:45:24 -- deitz

Log message:
	Small changes to parsing of where expressions which lets the where
	expression in test/functions/deitz/test_where_param1.chpl parse.  This
	test now flags an ambiguous function since it doesn't look at the
	where clause yet.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/functions/deitz/: test_where_param1.future 

---------------------------------------------------------------------------

06/13/05 16:03:56 -- jplevyak

Log message:
	make the corresponding change in analysis to remove the __method_token
	for useGettersSetters.

Modified files:
	chapel/compiler/analysis/: analysis.cpp 

---------------------------------------------------------------------------

06/13/05 16:45:52 -- deitz

Log message:
	Added code to remove the _methodToken from the formal and actual
	arguments of functions.

Modified files:
	chapel/compiler/traversals/: findUnknownTypes.cpp 

---------------------------------------------------------------------------

06/13/05 16:54:15 -- deitz

Log message:
	No longer change MemberAccess in VarInitExpr into getter call.  I
	think this should just be a symbol anyway, but has not been updated.
	
	This gets classes/deitz/test_class2.chpl working with
	--apply-getters-setters.

Modified files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 

---------------------------------------------------------------------------

06/13/05 17:56:03 -- jplevyak

Log message:
	Implement simple where causes which test that parameter are
	equal to a constant.
	Remove .future for corresponding test case.

Modified files:
	chapel/compiler/AST/: baseAST.cpp 
	chapel/compiler/analysis/: analysis.cpp fa.cpp pattern.cpp 
Removed files:
	chapel/test/functions/deitz/: test_where_param1.future 

---------------------------------------------------------------------------

06/13/05 18:00:36 -- jplevyak

Log message:
	updated with specific issue.

Modified files:
	chapel/test/types/type_variables/jplevyak/: typevar_use-1.future 

---------------------------------------------------------------------------

06/14/05 09:42:59 -- deitz

Log message:
	Tuples no longer have defaultVal, but a defaultConstructor instead.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/compiler/include/: type.h 
	chapel/compiler/traversals/: insertIndexType.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 

---------------------------------------------------------------------------

06/14/05 10:10:36 -- deitz

Log message:
	Fixed tuple's write function.  Uncommented out line in Brad's test
	that he commented wasn't working but now is.  Removed future.

Modified files:
	chapel/compiler/AST/: type.cpp 
	chapel/test/types/tuple/bradc/: writeTuple.chpl writeTuple.good 
Removed files:
	chapel/test/types/tuple/bradc/: writeTuple.future 

---------------------------------------------------------------------------

06/14/05 10:29:00 -- jplevyak

Log message:
	fix SEGV in graphing

Modified files:
	chapel/compiler/backend/: graph.cpp 

---------------------------------------------------------------------------

06/14/05 11:37:54 -- mjoyner

Log message:
	Added ability to index into sequences.

Modified files:
	chapel/modules/standard/: _chpl_seq.chpl 
Added files:
	chapel/test/trivial/mjoyner/seq/: seq_index1.chpl 
	                                  seq_index1.good 
	                                  seq_index2.chpl 
	                                  seq_index2.good 
	                                  seq_index2.future 

---------------------------------------------------------------------------

06/14/05 11:48:06 -- deitz

Log message:
	Added another sequence test that declares two sequences of different
	instantiated types.

Added files:
	chapel/test/types/seq/deitz/: test_seq9.chpl test_seq9.future 
	                              test_seq9.good 

---------------------------------------------------------------------------

06/14/05 12:05:34 -- jplevyak

Log message:
	Fixed test_typevar_record1.
	Set defaultConstructor from DefExpr::typeExpr to handle cases like:
	  var r : R(t = integer);
	that is, records of instantiated type.

Modified files:
	chapel/compiler/traversals/: resolveSymbols.cpp 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.good 
Removed files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record1.future 

---------------------------------------------------------------------------

06/14/05 12:09:25 -- jplevyak

Log message:
	Add a new test case which demonstrates some syntax which either
	needs to have a new error or be made to work.

Added files:
	chapel/test/types/type_variables/jplevyak/: construct-1.chpl 
	                                            construct-1.future 
	                                            construct-1.good 

---------------------------------------------------------------------------

06/14/05 12:30:07 -- bradc

Log message:
	Updated regressions file slightly.  Found that the
	valgrind run of intents-arrays2.chpl was showing
	an error that I hadn't noticed before, so made the
	test a future (intents-arrays2a) and took out the line
	in question for the existing test since most of it
	seemed to work well.

Modified files:
	chapel/test/: REGRESSIONS 
	chapel/test/functions/bradc/: intents-arrays2.chpl 
	                              intents-arrays2.good 
Added files:
	chapel/test/functions/bradc/: intents-arrays2a.chpl 
	                              intents-arrays2a.future 
	                              intents-arrays2a.good 

---------------------------------------------------------------------------

06/14/05 12:32:32 -- jplevyak

Log message:
	All symbols in builtin and standard modules are now excluded
	from the flow analysis dump used in the regressions.
	This should make the tests resilient to changes in the
	standard headers.

Modified files:
	chapel/compiler/analysis/: analysis.cpp clone.cpp sym.cpp 
	chapel/compiler/include/: analysis.h 
	chapel/test/flowanalysis/jplevyak/: assign1.good assign2.good 
	                                    badcall.good 
	                                    badprimitive.good 
	                                    badreturn.good bug1.good 
	                                    classvar.good cs1.good 
	                                    cs2.good cs3.good cs4.good 
	                                    cs5.good cs6.good 
	                                    destruct.good destruct2.good 
	                                    dispatch1.good 
	                                    dispatch2.good 
	                                    dispatch3.good 
	                                    dispatch4.good literal.good 
	                                    memberfun.good 
	                                    memberfun2.good 
	                                    multipledef.good 
	                                    multiplereturn.good 
	                                    named.good ref.good 
	                                    sample.good structtype.good 
	                                    tuples.good var.good 
	                                    vector.good 
	chapel/test/flowanalysis/jplevyak/config/: configVar.good 
	chapel/test/flowanalysis/jplevyak/constants/: const.good 
	                                              constant_folding.good 
	chapel/test/flowanalysis/jplevyak/loop/: loop1.good loop2.good 
	                                         loop_endless.good 
	                                         rec.good 
	chapel/test/flowanalysis/newast/: arithmetic_ops.good 
	                                  assignment_expr.good 
	                                  bitwise_assignment.good 
	                                  bitwise_negation.good 
	                                  bitwise_ops.good chain.good 
	                                  codegen_test.good 
	                                  compSampler.good 
	                                  conditional.good 
	                                  danglingelse.good deadvar.good 
	                                  declprintdom.good 
	                                  declprintdom2.good 
	                                  declprintint.good 
	                                  declprintint2.good domarr.good 
	                                  enum.good equality_ops.good 
	                                  formatoutput.good 
	                                  globalref.good 
	                                  logical_and.good 
	                                  logical_not.good mod.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  noop.good octalliteral.good 
	                                  onearg.good pareninit.good 
	                                  printempty.good 
	                                  printstring.good 
	                                  protoast_test.good 
	                                  relational_ops.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  unary_plusMinus.good 
	                                  usebeforedef.good var.good 
	                                  var2.good whileLoop.good 
	                                  writen.good writetwo.good 

---------------------------------------------------------------------------

06/14/05 12:35:07 -- bradc

Log message:
	Added some missing .cvsignores to the test system to
	ignore *.tmp, a.out.

Added files:
	chapel/test/trivial/mjoyner/seq/: .cvsignore 
	chapel/test/types/complex/jplevyak/: .cvsignore 
	chapel/test/types/tuple/deitz/noanalysis/: .cvsignore 

---------------------------------------------------------------------------

06/14/05 13:02:10 -- bradc

Log message:
	It seems that I accidentally overwrote the .chpl
	file with the .good file before checking this in
	the first time around.  This should fix it.

Modified files:
	chapel/test/functions/bradc/: intents-arrays.chpl 

---------------------------------------------------------------------------

06/14/05 14:00:27 -- deitz

Log message:
	Fixed code for applying getters and setters to work on methods.
	
	The only thing not working now is arrays, I think.

Modified files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 

---------------------------------------------------------------------------

06/14/05 14:03:00 -- bradc

Log message:
	Some more empty sequence tests to follow up on the ones
	Mack and I submitted the other week.  These are very
	low priority... just wrote them up for my curiosity.

Added files:
	chapel/test/types/seq/bradc/: emptySeq2.chpl emptySeq2.future 
	                              emptySeq2.good emptySeq2a.chpl 
	                              emptySeq2a.good emptySeq3.chpl 
	                              emptySeq3.future emptySeq3.good 

---------------------------------------------------------------------------

06/14/05 14:19:41 -- deitz

Log message:
	Fixed a small bug with --apply-getters-setters in which arguments to a
	ParenOpExpr were not handled.

Modified files:
	chapel/compiler/traversals/: applyGettersSetters.cpp 

---------------------------------------------------------------------------

06/14/05 14:21:36 -- bradc

Log message:
	Added tests of using user modules -- a simple use and
	a test of two modules mutually using one another.
	Added machinery to module initializers so that a
	module's initializer would only be run once.  Still
	no support for user-specified module initialize()
	functions as Mack was trying last week...

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/etc/: c_runtime.h 
	chapel/compiler/passes/: createEntryPoint.cpp 
Added files:
	chapel/test/modules/bradc/: use-mutrec.chpl use-mutrec.good 
	                            use.chpl use.good 

---------------------------------------------------------------------------

06/14/05 14:42:57 -- deitz

Log message:
	Added a couple new array class trials.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial4a.chpl 
	                           test_array_class_trial4a.future 
	                           test_array_class_trial4a.good 
	                           test_array_class_trial6.chpl 
	                           test_array_class_trial6.future 
	                           test_array_class_trial6.good 

---------------------------------------------------------------------------

06/14/05 14:44:16 -- deitz

Log message:
	Oops, fixed test I just handled in.  It works.

Modified files:
	chapel/test/arrays/deitz/: test_array_class_trial4a.chpl 
	                           test_array_class_trial4a.good 

---------------------------------------------------------------------------

06/14/05 14:44:41 -- deitz

Log message:
	Removed future of test.

Removed files:
	chapel/test/arrays/deitz/: test_array_class_trial4a.future 

---------------------------------------------------------------------------

06/14/05 14:48:20 -- deitz

Log message:
	Added another array class trial test that tests out x.f()(i) future
	intermediate approach.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial5a.chpl 
	                           test_array_class_trial5a.future 
	                           test_array_class_trial5a.good 

---------------------------------------------------------------------------

06/14/05 14:51:12 -- deitz

Log message:
	Moved InsertAnonymousDomains earlier in the passlist, a better place
	for it, I'd like to move InsertAnonymousTypes up there as well.

Modified files:
	chapel/compiler/main/: passlist.h 
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertAnonymousTypes.cpp 

---------------------------------------------------------------------------

06/14/05 17:33:43 -- jplevyak

Log message:
	Add some more tests.   Several trival array problems.

Added files:
	chapel/test/arrays/jplevyak/: simple-1.chpl simple-1.future 
	                              simple-1.good simple-2.chpl 
	                              simple-2.future simple-2.good 
	                              simple-3.chpl simple-3.future 
	                              simple-3.good 
	chapel/test/flowanalysis/jplevyak/: destruct3.good destruct3.v 

---------------------------------------------------------------------------

06/14/05 17:35:46 -- jplevyak

Log message:
	Another odd array problem

Added files:
	chapel/test/arrays/jplevyak/: simple-4.chpl simple-4.future 
	                              simple-4.good 

---------------------------------------------------------------------------

06/15/05 10:05:59 -- jplevyak

Log message:
	Support y.a()(2) = x syntax.
	In a number of cases x.a was being generated as a primitive
	intead of a(_method_token, x), these have been fixed.  This
	change resulted in a number of tests requring changes as well,
	and in the f(x.i) where f takes an OUT argument failing (as
	Steve said it should).

Modified files:
	chapel/compiler/analysis/: analysis.cpp ast.cpp fa.cpp 
	chapel/compiler/include/: fa.h 
	chapel/compiler/symtab/: symscope.cpp 
	chapel/test/classes/deitz/: test_union2.good test_union4.good 
	                            test_union_method3.good 
	chapel/test/flowanalysis/jplevyak/: badcall.good badreturn.good 
	chapel/test/flowanalysis/newast/: sum_type-1.good 
	                                  sum_type-2.good 
	chapel/test/functions/jplevyak/: equal_method-1.chpl 
	chapel/test/types/seq/bradc/: length.modify.good 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 
Added files:
	chapel/test/classes/deitz/: test_union3.future 

---------------------------------------------------------------------------

06/15/05 10:21:56 -- deitz

Log message:
	Added more record instantiation tests that pave the way to sequences
	as records.  Two of these fail.
	
	Added support for syntax
	
	  var f : foo of integer;
	
	which is the same as
	
	  var f : foo(integer);

Modified files:
	chapel/compiler/parser/: chapel.y 
Added files:
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record2.chpl 
	                                         test_typevar_record2.good 
	                                         test_typevar_record3.chpl 
	                                         test_typevar_record3.good 
	                                         test_typevar_record4.chpl 
	                                         test_typevar_record4.good 
	                                         test_typevar_record5.chpl 
	                                         test_typevar_record5.future 
	                                         test_typevar_record5.good 
	                                         test_typevar_record6.chpl 
	                                         test_typevar_record6.future 
	                                         test_typevar_record6.good 

---------------------------------------------------------------------------

06/15/05 10:49:59 -- deitz

Log message:
	Updated output files of array class trial tests.

Modified files:
	chapel/test/arrays/deitz/: test_array_class_trial4.good 
	                           test_array_class_trial5.good 
	                           test_array_class_trial6.chpl 
	                           test_array_class_trial6.good 

---------------------------------------------------------------------------

06/15/05 11:13:23 -- jplevyak

Log message:
	Fixed test_array_class_trial5a.chpl which was incorrect.
	Removed .futures for working tests.

Modified files:
	chapel/test/arrays/deitz/: test_array_class_trial5a.chpl 
	                           test_array_class_trial5a.good 
Removed files:
	chapel/test/arrays/deitz/: test_array_class_trial4.future 
	                           test_array_class_trial5.future 
	                           test_array_class_trial5a.future 
	                           test_array_class_trial6.future 

---------------------------------------------------------------------------

06/15/05 12:05:54 -- jplevyak

Log message:
	Fix a bug where partial applications could build up excessive
	argument lists.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

06/15/05 12:06:40 -- jplevyak

Log message:
	Re-fix the bug from a bad checkin.

Modified files:
	chapel/compiler/analysis/: fa.cpp 

---------------------------------------------------------------------------

06/15/05 13:28:39 -- jplevyak

Log message:
	The partial implementation of = as a method was broken by the
	last checkin... make it a future (it never worked in general).

Added files:
	chapel/test/functions/jplevyak/: equal_method-1.future 

---------------------------------------------------------------------------

06/15/05 13:30:29 -- jplevyak

Log message:
	update for change in error messages

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 

---------------------------------------------------------------------------

06/15/05 13:33:19 -- jplevyak

Log message:
	Update to describe problem with:
	
	[Error matching compiler output for types/type_variables/deitz/test_typevar_record3]
	[Error matching compiler output for types/type_variables/deitz/test_typevar_record4]
	
	the problem is that visible_functions() is not returning the write for strings.

Modified files:
	chapel/test/: REGRESSIONS 

---------------------------------------------------------------------------

06/15/05 13:58:01 -- shannon

Log message:
	Added a new compilation flag, --codegen-cpp-lines.
	When this flag is used a #line directive is generated
	for each line of C code.  You can now set breakpoints
	for your chpl code:
	
	  (gdb) break cppLines.chpl:12
	  Breakpoint 2 at 0x804924e: file cppLines.chpl, line 12.
	
	  (gdb) info break
	  Num Type           Disp Enb Address    What
	  2   breakpoint     keep y   0x0804924e in __init_cppLines at cppLines.chpl:12
	
	  (gdb) r
	  Starting program: /users/shannon/CHAPEL/chapel/test/compflags/shannon/a.out
	
	  Breakpoint 2, __init_cppLines () at cppLines.chpl:12

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/backend/: beautify.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/main/: driver.cpp 

---------------------------------------------------------------------------

06/15/05 14:02:38 -- jplevyak

Log message:
	Test for the various types of calls a.x(i) = j, for example.

Added files:
	chapel/test/functions/jplevyak/: call_mapping-1.chpl 
	                                 call_mapping-1.future 
	                                 call_mapping-1.good 

---------------------------------------------------------------------------

06/15/05 14:33:54 -- jplevyak

Log message:
	Revert mistaken checkin

Modified files:
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 

---------------------------------------------------------------------------

06/15/05 14:36:51 -- jplevyak

Log message:
	If the gc6.X directory has never been built, it doesn't
	have a Makefile, so "make clean" will produce and error
	which should be ignored.

Modified files:
	chapel/third-party/boehmgc/: Makefile 

---------------------------------------------------------------------------

06/15/05 15:54:01 -- deitz

Log message:
	Fixed a bug in which visible functions were not propagated correctly
	if they were already computed.

Modified files:
	chapel/compiler/symtab/: symtab.cpp 

---------------------------------------------------------------------------

06/15/05 17:03:34 -- deitz

Log message:
	Moved everything from the internal prelude into the prelude,
	effectively getting rid of it.  There were some dependency problems
	that made it difficult to deal with.

Modified files:
	chapel/compiler/include/: symtab.h 
	chapel/compiler/parser/: internal_prelude.chpl prelude.chpl 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/symtab/: symtab.cpp 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 

---------------------------------------------------------------------------

06/16/05 10:42:38 -- deitz

Log message:
	Fixed uninitialized field bug in analysis, cause of last night's
	valgrind regressions.

Modified files:
	chapel/compiler/include/: fa.h 

---------------------------------------------------------------------------

06/16/05 10:46:46 -- deitz

Log message:
	Added dummy field to Tuple class to keep it from being used for some
	other purposes.  Why is this necessary?, I wonder.  This fixes the new
	regression of test_typevar_record3.chpl.

Modified files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

06/16/05 11:15:14 -- deitz

Log message:
	Undo last checkin, removed dummy variable from tuple.  I'll have to
	fix this another way.

Modified files:
	chapel/compiler/parser/: prelude.chpl 

---------------------------------------------------------------------------

06/16/05 13:45:14 -- deitz

Log message:
	Added initial support for printing out (html) the tree between every
	pass of compilation using the -t flag.  The file log/index.html
	contains the passlist.  Clicking on a pass shows the AST after that
	pass.

Modified files:
	chapel/compiler/backend/: dump.cpp 
	chapel/compiler/include/: driver.h dump.h 
	chapel/compiler/main/: driver.cpp runpasses.cpp 
	chapel/compiler/traversals/: view.cpp view.h 

---------------------------------------------------------------------------

06/16/05 13:52:22 -- deitz

Log message:
	Small fixes to last checkin.

Modified files:
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

06/16/05 14:52:56 -- deitz

Log message:
	Disabled NOTEST for lowlevel code generation tests while John is gone.
	I can't figure this out.

Added files:
	chapel/test/lowlevelcg/jplevyak/: NOTEST 

---------------------------------------------------------------------------

06/16/05 15:38:54 -- deitz

Log message:
	Fixed a bug in how ExprTypes were copied.  Also, the ExprType expr is
	now put in the DefExpr and removed from the ExprType expr.
	
	Made all structural types codegen to pointers.  This eliminates using
	C's semantics to copy records (something we can't do in the long run)
	and forces records to have a constructor.
	
	Simplified code in RemoveDeadSymbols.
	
	Changed complex runtime code to take into account pointer codegen of
	records.
	
	Futurized tests that involved simple record assignment (since this no
	longer works in the simple case and never really did) and tests that
	involved tuples of inferred types since tuple literals are not really
	handled well yet.
	
	Added a commented line in the prelude to stick something into the
	Tuple class.  Uncommented, a number of important tests start to work
	(sometimes).  Note to self, this non-determinism is a real pain.  I
	find that I get an error and then when I try to see what the C code
	looks like, using --savec output, I get a different error.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/parser/: prelude.chpl 
	chapel/compiler/symtab/: removeDeadSymbols.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertThisParameters.cpp 
	chapel/runtime/include/: chplio.h config.h union.h 
	chapel/runtime/src/: chplio.c config.c 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/memory/shannon/: printFinalMemStat.good 
Added files:
	chapel/test/classes/bradc/: writerecord.future 
	                            writerecord1a.future 
	                            writeunion-workaround.future 
	                            writeunion.future 
	chapel/test/classes/bradc/records/: assignRecord2.future 
	chapel/test/functions/jplevyak/: equal-8.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple6.future 
	                                test_tuple_simple7.future 
	chapel/test/types/tuple/jplevyak/: tuple_index-1.future 
	                                   tuple_index-2.future 

---------------------------------------------------------------------------

06/16/05 17:30:57 -- deitz

Log message:
	Effectively removed SeqType.  Sequences are now parsed as the record
	in the module.  Literals are handled by the compiler.  The token 'seq'
	is no longer a keyword.
	
	I had to add a dummy field to the Tuple class in the prelude.  In
	doing so, I was forced to futurize a few more tuple tests.  We need to
	handle tuple literals correctly.
	
	Removed an old test that explicitly tested the now gone seq2 class.

Modified files:
	chapel/compiler/AST/: stmt.cpp 
	chapel/compiler/parser/: chapel.lex chapel.y prelude.chpl 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: insertAnonymousTypes.cpp 
	                             insertLiteralTemps.cpp 
	chapel/modules/standard/: _chpl_seq.chpl 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/flowanalysis/newast/: chain.good enum.good 
	                                  multiple_return.good 
	                                  mutrec.good noargs.good 
	                                  onearg.good printempty.good 
	                                  printstring.good 
	                                  sum_type-1.good 
	                                  sum_type-2.good 
	                                  usebeforedef.good var2.good 
	                                  writen.good writetwo.good 
	chapel/test/types/seq/bradc/: length.modify.good 
Added files:
	chapel/test/types/seq/deitz/: test_seq_reverse1.chpl 
	                              test_seq_reverse1.good 
	chapel/test/types/tuple/bradc/: writeTuple.future 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.future 
	                                test_tuple_simple3.future 
	                                test_tuple_simple4.future 
	                                test_tuple_simple5.future 
Removed files:
	chapel/test/classes/deitz/: test_seq2.chpl test_seq2.good 

---------------------------------------------------------------------------

06/16/05 17:31:17 -- deitz

Log message:
	Removed unused FnSymbol constructor.
	
	Improved html output for compilation dump.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/include/: symbol.h 
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

06/17/05 10:38:22 -- deitz

Log message:
	Removed lots of code related to SeqType and special-casing sequences.
	Removed two passes.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h type.h 
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: resolveTypes.cpp 
	chapel/compiler/traversals/: Makefile.share 
	                             insertAnonymousTypes.cpp 
	                             scopeResolveSymbols.cpp 
	                             verifyASTType.cpp 
Removed files:
	chapel/compiler/traversals/: expandSeqExprAssignments.cpp 
	                             expandSeqExprAssignments.h 
	                             removeSeqOperations.cpp 
	                             removeSeqOperations.h 

---------------------------------------------------------------------------

06/17/05 11:08:34 -- deitz

Log message:
	Html dump of the compiler output now creates many more files, one for
	each module for each pass.  This slows things down during compilation
	with the -t flag, but it's more tractable for browsing.
	
	Made some improvements to the html dump.
	
	Added a script to take a look at a single function throughout
	compilation.  This is not linked into the web yet, but should be a
	simple CGI script if we have the ability to run it locally.

Modified files:
	chapel/compiler/AST/: expr.cpp 
	chapel/compiler/include/: expr.h 
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: view.cpp view.h 
Added files:
	chapel/compiler/etc/www/: fnhtml.pl 

---------------------------------------------------------------------------

06/17/05 11:17:40 -- deitz

Log message:
	Small fix so return starts showing up in the html dump again.

Modified files:
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

06/17/05 15:28:16 -- deitz

Log message:
	Added working var method test.

Added files:
	chapel/test/functions/deitz/: test_var_method.chpl 
	                              test_var_method.good 

---------------------------------------------------------------------------

06/17/05 15:44:55 -- deitz

Log message:
	Added many tests dealing with how tuples can be implemented, where
	parameters, and type variables.  Some work, some don't.

Added files:
	chapel/test/functions/deitz/: test_typeconstraint1.chpl 
	                              test_typeconstraint1.future 
	                              test_typeconstraint1.good 
	                              test_where_param2.chpl 
	                              test_where_param2.future 
	                              test_where_param2.good 
	                              test_where_param3.chpl 
	                              test_where_param3.good 
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation1.chpl 
	                                test_tuple_record_implementation1.future 
	                                test_tuple_record_implementation1.good 
	                                test_tuple_record_implementation10.chpl 
	                                test_tuple_record_implementation10.good 
	                                test_tuple_record_implementation11.chpl 
	                                test_tuple_record_implementation11.future 
	                                test_tuple_record_implementation11.good 
	                                test_tuple_record_implementation12.chpl 
	                                test_tuple_record_implementation12.good 
	                                test_tuple_record_implementation13.chpl 
	                                test_tuple_record_implementation13.future 
	                                test_tuple_record_implementation13.good 
	                                test_tuple_record_implementation2.chpl 
	                                test_tuple_record_implementation2.future 
	                                test_tuple_record_implementation2.good 
	                                test_tuple_record_implementation3.chpl 
	                                test_tuple_record_implementation3.future 
	                                test_tuple_record_implementation3.good 
	                                test_tuple_record_implementation4.chpl 
	                                test_tuple_record_implementation4.good 
	                                test_tuple_record_implementation5.chpl 
	                                test_tuple_record_implementation5.future 
	                                test_tuple_record_implementation5.good 
	                                test_tuple_record_implementation6.chpl 
	                                test_tuple_record_implementation6.good 
	                                test_tuple_record_implementation7.chpl 
	                                test_tuple_record_implementation7.good 
	                                test_tuple_record_implementation8.chpl 
	                                test_tuple_record_implementation8.good 
	                                test_tuple_record_implementation9.chpl 
	                                test_tuple_record_implementation9.good 

---------------------------------------------------------------------------

06/17/05 16:20:09 -- deitz

Log message:
	Added a copyFrom pointer to BaseAST that points to what a BaseAST was
	copied from.  This may be overkill and may not let garbage collection
	work well.  I really only want to keep track of cloned/copied function
	ids.
	
	Fixed a bug in InsertVariableInitializations having to do with the new
	exprType of DefExpr and record constructors.
	
	Fixed a bug in BuildLValueFunctions in which overloaded functions
	could not have var set.
	
	Fixed a bug in which the whereexpr was copied and then lost in
	FnSymbol::copy.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/include/: baseAST.h 
	chapel/compiler/traversals/: buildLValueFunctions.cpp 
	                             insertVariableInitializations.cpp 
	                             view.cpp 

---------------------------------------------------------------------------

06/17/05 16:50:36 -- deitz

Log message:
	Removed three futures for tests that are now working.

Removed files:
	chapel/test/functions/deitz/: test_var_function_access2.future 
	chapel/test/types/complex/deitz/: test_complex3.future 
	chapel/test/types/type_variables/deitz/: 
	                                         test_typevar_record6.future 

---------------------------------------------------------------------------

06/17/05 17:04:05 -- deitz

Log message:
	Added a simple cache to instantiate_generics so that it won't
	instantiate the same function in the same way multiple times.  This
	leads to function resolution ambiguities.  This cache needs to be
	improved and it's probably worthwhile figuring out why we need a cache
	now.  I thought we weren't going to need one yet.
	
	This fixes all of my tuple record implementation tests and sets the
	stage for a real tuple implementation.
	
	Added a 14th and 15th tuple record implementation test.  It's a big
	win that these worked.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
Added files:
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation14.chpl 
	                                test_tuple_record_implementation14.good 
	                                test_tuple_record_implementation15.chpl 
	                                test_tuple_record_implementation15.good 
Removed files:
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation1.future 
	                                test_tuple_record_implementation11.future 
	                                test_tuple_record_implementation13.future 
	                                test_tuple_record_implementation2.future 
	                                test_tuple_record_implementation3.future 
	                                test_tuple_record_implementation5.future 

---------------------------------------------------------------------------

06/20/05 12:20:00 -- bradc

Log message:
	Added some code to c_runtime.h so that low-level codegen
	tests could be re-enabled.  This new code seems to be
	related to the _methodTokenType that the high-level is
	now inserting, so another way to handle this code might
	be to squelch it before the low-level codegen takes place.
	
	John, you may want to review my changes when you get back.

Modified files:
	chapel/compiler/etc/: c_runtime.h 
Removed files:
	chapel/test/lowlevelcg/jplevyak/: NOTEST 

---------------------------------------------------------------------------

06/21/05 13:48:50 -- bradc

Log message:
	Two future tests regarding sequences, motivated by my
	attempt to rewrite SSCA2.  hashEquals uses the #= operator,
	which is not yet implemented.  recordSeq attempts to
	create a sequence of records, but fails because the pass
	to insert sequence literals runs before symbols are
	resolved, so the type of the variable cannot be determined,
	even if it is given in the declaration.
	
	In general, if anyone has recommendations about adding
	records to a sequence of records, let me know -- I
	couldn't find a way to do it that works with the
	current compiler.

Added files:
	chapel/test/types/seq/bradc/: hashEquals.chpl hashEquals.future 
	                              hashEquals.good recordSeq.chpl 
	                              recordSeq.future recordSeq.good 

---------------------------------------------------------------------------

06/21/05 15:11:14 -- bradc

Log message:
	Some rather superficial changes related to getting more
	code in my SSCA2 rewrite through the front-end:
	
	- added #= to the lexer and parser; this is stored
	  as an AssignOp as type GETS_SEQCAT.  Pattern-matched
	  its insertion into analysis.cpp, but none of the
	  rest of the compiler does anything with it yet, so
	  this is only useful for parsing for the time being.
	
	- added cobegin and atomic blocks to the front-end.
	  These are stored as an instance of BlockStmt, which
	  now has a blockType flag that is set to BLOCK_NORMAL,
	  BLOCK_ATOMIC, or BLOCK_COBEGIN.  We're not planning
	  on doing anything for atomic or cobegin blocks in the
	  sequential implementation, so this field can simply
	  be ignored for now.
	
	- fixed up #includes for chapel.y -- all #includes need
	  to go into lexyacc.h in order for make depend to work.
	
	- added some more simple math functions to the prelude
	  -- some of these are implemented inline in a generic
	  way (min, max); others are prototyped as poorly as
	  the previous ones were.  This is just a placeholder
	  until we do math functions correctly.
	
	- added a built-in "numLocales" constant, initialized to
	  1, to the prelude and runtime.  Again, this is a
	  placeholder while we're doing the sequential build.
	  Again, we'll want to implement this better once arrays
	  are supported and we can create an array of locales.

Modified files:
	chapel/compiler/AST/: expr.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h 
	chapel/compiler/parser/: chapel.lex chapel.y lexyacc.h 
	                         prelude.chpl 
	chapel/runtime/include/: stdchpl.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/distributions/bradc/foundations/: blockdist3.chpl 
Added files:
	chapel/runtime/include/: locales.h 
	chapel/test/ssca/ssca2/: .cvsignore 

---------------------------------------------------------------------------

06/21/05 15:22:15 -- bradc

Log message:
	A cute test that makes sure call-by-name
	parameters for constructors distinguish
	between local identifiers and the
	identifiers used for the fields.  I'm
	happy to say it worked the first time!
	(can't take any credit for it, though).

Added files:
	chapel/test/classes/bradc/: namecheck.chpl namecheck.good 

---------------------------------------------------------------------------

06/21/05 15:49:42 -- deitz

Log message:
	Tuples are now records.  This gets rid of lots of special-cased code
	and is a symmetric change to my recent sequence improvements.  Next is
	arrays and domains.
	
	Unlike the sequence record, the tuple record is created in the
	compiler since it has a different number of types, fields and
	functions depending on how many elements are in the tuple.  These
	records are still instantiated, they are just created by the compiler
	rather than parsed in.
	
	PostAnalysisCleanup, ResolveTypes, and ResolveSymbols now run on all
	modules, not just codegened ones.  This is necessary as code in the
	prelude may have to be instantiated.
	
	Added typeInfo to FloatLiteral.
	
	Removed ';' from after %token declarations in parser.  This is an
	error on the Mac.
	
	Added a new tuple implementation test and two new simple tuple tests.
	
	Removed many tuple futures.
	
	Fixed datablock in prelude and datablock regression.
	
	New regression: arrays/deitz/test_array_integer_3d.
	
	Updated regression file.

Modified files:
	chapel/compiler/AST/: expr.cpp type.cpp 
	chapel/compiler/include/: expr.h type.h 
	chapel/compiler/main/: passlist.h 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/symtab/: postAnalysisCleanup.cpp 
	                         resolveTypes.cpp 
	chapel/compiler/traversals/: insertAnonymousDomains.cpp 
	                             insertLiteralTemps.cpp 
	                             insertLiteralTemps.h 
	                             resolveSymbols.cpp 
	chapel/compiler/util/: files.cpp 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 
	chapel/test/types/type_variables/deitz/: test_datablock3.chpl 
Added files:
	chapel/test/types/tuple/deitz/: 
	                                test_tuple_record_implementation16.chpl 
	                                test_tuple_record_implementation16.good 
	                                test_tuple_type1.chpl 
	                                test_tuple_type1.good 
	                                test_tuple_type2.chpl 
	                                test_tuple_type2.good 
Removed files:
	chapel/test/functions/jplevyak/: equal-8.future 
	chapel/test/types/tuple/bradc/: returnTuple3.chpl 
	                                writeTuple.chpl 
	chapel/test/types/tuple/deitz/: test_tuple_simple1.chpl 
	                                test_tuple_simple3.chpl 
	                                test_tuple_simple4.chpl 
	                                test_tuple_simple5.chpl 
	                                test_tuple_simple6.chpl 
	                                test_tuple_simple7.chpl 
	chapel/test/types/tuple/jplevyak/: tuple_index-1.chpl 
	                                   tuple_index-2.chpl 

---------------------------------------------------------------------------

06/21/05 17:39:20 -- deitz

Log message:
	Removed noanalysis tuple tests which I failed to remove on my last
	checkin.

Removed files:
	chapel/test/types/tuple/deitz/noanalysis/: .cvsignore COMPOPTS 
	                                           test_tuple_simple1.chpl 
	                                           test_tuple_simple1.good 
	                                           test_tuple_simple2.chpl 
	                                           test_tuple_simple2.good 
	                                           test_tuple_simple3.chpl 
	                                           test_tuple_simple3.good 
	                                           test_tuple_simple4.chpl 
	                                           test_tuple_simple4.good 
	                                           test_tuple_simple5.chpl 
	                                           test_tuple_simple5.good 

---------------------------------------------------------------------------

06/22/05 10:34:15 -- deitz

Log message:
	Sequence literal types no longer need to be known, but it is very
	touchy.  I basically just instantiate the seq record on dtUnknown
	rather than flag an error now.

Modified files:
	chapel/compiler/traversals/: insertLiteralTemps.cpp 

---------------------------------------------------------------------------

06/22/05 11:44:32 -- deitz

Log message:
	Added a function that analysis may think doesn't always return
	something.  Should the error be updated or is this legal?

Added files:
	chapel/test/functions/deitz/: test_return1.chpl 
	                              test_return1.future 
	                              test_return1.good 

---------------------------------------------------------------------------

06/22/05 12:00:47 -- deitz

Log message:
	Added parsing support for iterators.
	
	Added bool 'yield' field to ReturnStmt to indicate that it is a yield
	rather than a return.
	
	Changed bool 'isConstructor' field in FnSymbol to 'fnClass' which can
	be any of FN_FUNCTION, FN_CONSTRUCTOR, or FN_ITERATOR.
	
	Added bool 'noparens' field to FnSymbol that is true if the function
	was defined without parentheses.
	
	Cleaned up parsing of functions.  There is now only one case for
	fndecl rather than three.
	
	Moved check that empty parens are only used on members to a later pass
	(stuck it in though this should be part of a preanalysis
	checkSemantics pass).
	
	Added sequence return test.
	
	Added a future iterator test.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: stmt.h symbol.h 
	chapel/compiler/parser/: chapel.lex chapel.y 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	chapel/compiler/traversals/: applyGettersSetters.cpp 
	                             applyThisParameters.cpp 
	                             buildClassConstructorsEtc.cpp 
	                             insertThisParameters.cpp 
Added files:
	chapel/test/functions/deitz/: test_iterator1.chpl 
	                              test_iterator1.future 
	                              test_iterator1.good 
	chapel/test/types/seq/deitz/: test_seq_return1.chpl 
	                              test_seq_return1.good 

---------------------------------------------------------------------------

06/22/05 12:57:47 -- deitz

Log message:
	Added a pass to convert interators into functions that return
	sequences of whatever they returned before.
	
	The current plan for arrays and domains is to make these classes that
	contain a special iterator method.  Then for/forall loops over
	sequences, arrays, and domains can be supported by changing them into
	while loops over the sequences returned by the special iterator
	method.
	
	The longer term approach may be to have a set of iterators for domains
	and arrays that can be chosen from past analysis depending on compiler
	optimizations.  We'll discuss this with John when he comes back.
	
	Removed iterator future.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/symtab/: Makefile.share 
Added files:
	chapel/compiler/symtab/: reconstructIterators.cpp 
	                         reconstructIterators.h 
Removed files:
	chapel/test/functions/deitz/: test_iterator1.future 

---------------------------------------------------------------------------

06/22/05 14:00:06 -- deitz

Log message:
	Added a couple future tests that show a bug when an instantiable
	record contains a field whose type is another instantiable record.

Added files:
	chapel/test/arrays/deitz/: test_array_class_trial5b.chpl 
	                           test_array_class_trial5b.future 
	                           test_array_class_trial5b.good 
	                           test_record_of_record_instantiated.chpl 
	                           test_record_of_record_instantiated.future 
	                           test_record_of_record_instantiated.good 

---------------------------------------------------------------------------

06/23/05 16:11:17 -- mjoyner

Log message:
	Created traversals to find leaf functions and inline them.  Currently, getter/setter functions are the only functions being inlined.

Added files:
	chapel/compiler/traversals/: findLeafFunctions.h 
	                             findLeafFunctions.cpp 
	                             inlineFunctions.h 
	                             inlineFunctions.cpp 

---------------------------------------------------------------------------

06/23/05 16:45:06 -- mjoyner

Log message:
	Got rid of global variable in inlineFunction traversal.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.h 
	                             inlineFunctions.cpp 

---------------------------------------------------------------------------

06/24/05 12:05:06 -- mjoyner

Log message:
	Inlining function traversal works for all leaf functions now.  Note that the inlining function traversal assumes that the code has previously been put in a canonical form.

Modified files:
	chapel/compiler/traversals/: inlineFunctions.cpp 
Added files:
	chapel/compiler/traversals/: replaceReturns.h replaceReturns.cpp 

---------------------------------------------------------------------------

06/24/05 15:10:46 -- deitz

Log message:
	Added inline pragma to getter, setter, and wrapper function symbols.

Modified files:
	chapel/compiler/AST/: symbol.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 

---------------------------------------------------------------------------

06/27/05 10:55:44 -- deitz

Log message:
	Changed the formals of a function from ParamSymbols to DefExprs.
	Removed the init field of ParamSymbols as it can now use the init
	field of the DefExpr.
	
	The only symbols not defined in their own DefExprs now are
	EnumSymbols.
	
	Added a mechanism to traverse an AList backwards (for_alist_backward).
	
	Cleaned and rewrote the code to insert the default wrapper.  It used
	to copy the whole formal list and then remove the formals that didn't
	need to go in the wrapper.  It now simply puts the ones that need to
	be in in.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h symbol.h symtab.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: insertOutParameterInitializations.cpp 
	                         postAnalysisCleanup.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             buildLValueFunctions.cpp 
	                             clearTypes.cpp findUnknownTypes.cpp 
	                             fixup.cpp insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp verify.cpp 
	                             view.cpp 
	chapel/test/trivial/bradc/protoast/: mg-seq-concrete.good 
	                                     mg-seq.good 

---------------------------------------------------------------------------

06/27/05 11:30:04 -- deitz

Log message:
	Removed DestructureTupleAssignments pass as this is now done before
	analysis in InsertLiteralTemps.
	
	Removed some uses of TupleType but they are in the current IndexType
	so I left them for now.
	
	Update _data record to allocate on construction.
	
	Added a "keep types" pragma for not removing a type from a function
	before codegen.  This can be useful in a new version of malloc that
	takes a type.  It is used now in the _data constructor.

Modified files:
	chapel/compiler/main/: passlist.cpp passlist.h 
	chapel/compiler/parser/: chapel.y prelude.chpl 
	chapel/compiler/traversals/: Makefile.share 
	                             buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
	                             insertLiteralTemps.cpp 
	chapel/runtime/include/: array.h 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
	chapel/test/types/type_variables/deitz/: test_datablock3.chpl 
Removed files:
	chapel/compiler/traversals/: destructureTupleAssignments.cpp 
	                             destructureTupleAssignments.h 

---------------------------------------------------------------------------

06/28/05 13:11:15 -- deitz

Log message:
	Simplified and improved the implementation of copy.  Copying a
	DefStmt, for example, now returns a DefStmt, rather than a Stmt.  The
	overall structure of copy is similar; the changes are superficial.
	
	One result of this changes is that copy can no longer be called when
	an object is NULL.  So c->copy() would now seg fault if c is NULL
	rather than work.  To get around this, I added a macro COPY(c) that
	can be used when this might be the case.  Alternatively, one can check
	for NULL.  There are relatively few uses of this macro now.
	
	Simplified pragma implementation.  They are now a vector of strings in
	the BaseAST rather than a BaseAST.  The function hasPragma(char*)
	checks to see if the BaseAST has a specific pragma (using strncmp to
	compare the start of the pragma with the search string).  The function
	addPragma(char*) adds a pragma to a BaseAST's pragma vector.  The
	function copyPragmas() is used by copy to copy pragmas on a BaseAST to
	the result.

Modified files:
	chapel/compiler/AST/: Makefile.share baseAST.cpp expr.cpp 
	                      stmt.cpp symbol.cpp type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: alist.h baseAST.h expr.h stmt.h 
	                          symbol.h type.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: legalizeCNames.cpp symtab.cpp 
	chapel/compiler/traversals/: buildClassConstructorsEtc.cpp 
	                             findUnknownTypes.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertIndexType.cpp 
	                             omitForNoAnalysis.cpp 
	                             processParameters.cpp 
	                             resolveSymbols.cpp 
	                             scopeResolveSymbols.cpp 
	                             verifyASTType.cpp view.cpp 
Removed files:
	chapel/compiler/AST/: pragma.cpp 
	chapel/compiler/include/: pragma.h 

---------------------------------------------------------------------------

06/28/05 13:36:48 -- deitz

Log message:
	Updated my domain class to use the new data.  It doesn't work.  This
	is just an update for Brad.

Modified files:
	chapel/test/arrays/deitz/: test_array_class1.chpl 

---------------------------------------------------------------------------

06/29/05 09:37:03 -- deitz

Log message:
	Three futures for John to look at when he returns.  I think the
	general test_seq_tuple is a simplification of the other two.  It
	creates a sequence and a tuple and it seems that functions of one are
	shared with the other even though they shouldn't be.

Added files:
	chapel/test/arrays/deitz/: test_domain1.chpl test_domain1.future 
	                           test_domain1.good test_domain2.chpl 
	                           test_domain2.future test_domain2.good 
	chapel/test/types/seq/deitz/: test_seq_tuple.chpl 
	                              test_seq_tuple.future 
	                              test_seq_tuple.good 

---------------------------------------------------------------------------

06/29/05 09:48:09 -- deitz

Log message:
	Added a working domain test to capture what works.
	
	Added a future domain test that shows the function I want added by the
	compiler during instantiation.  It doesn't work.

Added files:
	chapel/test/arrays/deitz/: test_domain2D.chpl 
	                           test_domain2D.future 
	                           test_domain2D.good test_domain3.chpl 
	                           test_domain3.good 

---------------------------------------------------------------------------

06/29/05 10:13:58 -- deitz

Log message:
	Moved the pass*-module* output files generated with the -t flag out of
	the log/ directory and into a directory /tmp/chpllog/ that is
	destroyed and created when the -t flag is used.
	
	This greatly improves the compile time with the -t flag because our
	fileserver is slow.  However, is this a problem to rely on the
	location of /tmp/chpllog?

Modified files:
	chapel/compiler/main/: runpasses.cpp 
	chapel/compiler/traversals/: view.cpp 

---------------------------------------------------------------------------

06/29/05 13:46:06 -- shannon

Log message:
	Added a new compilation flag, --cg-chpl-lineno.  When this
	flag is used, two global variables are generated,
	_chpl_input_filename and _chpl_input_linenumber.  The
	filename is printed at the start of a function or when it
	changes, and the linenumbers are also printed when they're
	updated.  These variables can now be used for generating
	more descriptive runtime error messages.
	
	Changed the --codegen-cpp-lines flag that I added recently
	to --cg-cpp-lines, and added an environment variable for it,
	CHPL_CG_CPP_LINES.

Modified files:
	chapel/compiler/AST/: stmt.cpp symbol.cpp 
	chapel/compiler/include/: stmt.h 
	chapel/compiler/main/: driver.cpp 
	chapel/runtime/include/: error.h 
	chapel/runtime/src/: error.c 

---------------------------------------------------------------------------

06/29/05 16:36:44 -- deitz

Log message:
	Cleaned up the html view facility alot, factoring it into its own
	traversal and decreasing the size of the output by a factor of 6.  I
	moved the output back to the log directory where it is not as slow as
	it used to be but still a bit slow on our fileserver.
	
	I also cleaned the output a bit so things stay on the same line more
	frequently.
	
	Indenting is now done with <DL> rather than many &nbsp;'s which
	accounts for a few megabytes of savings.  Other major savings include
	removing the prelude from the output.

Modified files:
	chapel/compiler/main/: passlist.cpp runpasses.cpp 
	chapel/compiler/traversals/: Makefile.share view.cpp view.h 
Added files:
	chapel/compiler/traversals/: htmlview.cpp htmlview.h 

---------------------------------------------------------------------------

06/29/05 16:46:59 -- roxana

Log message:
	Added some tests that seem unrelated to domains.
	The starting point was to work on writing the Chapel class
	for the indefinite domains implementation. To do that, I needed
	a storage (for iterators, etc.) and so I tried to implement a hash
	table for that purpose. I got stuck in various problems (array
	setters and type parameterization) before I could even start
	on doing something. I am checking those tests in since this
	is what I have been working on, even though without much
	success.

Added files:
	chapel/test/domains/roxana/: test_hash_table2.chpl 
	                             test_hash_table.good 
	                             test_hash_table1.good 
	                             test_hash_table1.future 
	                             test_hash_table1.chpl 
	                             test_hash_table.chpl 
	                             test_hash_table2.good 
	                             test_hash_table2.future 
	                             test_hash_table.future 

---------------------------------------------------------------------------

06/29/05 17:00:31 -- deitz

Log message:
	NEW REGRESSION: types/complex/bradc/intfloatelement
	
	Added support for homogeneous tuples as in
	
	  var t : 3*integer;
	
	Parsing support is currently restricted to an integer literal TIMES a
	type given by a single identifier.
	
	Added the _chpl_htuple module to implement this as a record.  There
	are minimal compiler rewrites:
	
	  number * type_identifier
	
	is changed in the parser to
	
	  _htuple(type_identifier, number)
	
	There are no other rewrites.
	
	Homogeneous tuples do not yet work with standard tuples so you can't
	assign one as in
	
	  var t : 3 * integer = (12, 13, 14)
	
	Also because instantiated types can't be fields in a type, these are
	implemented without them and the number of components of a homogeneous
	tuple is currently limited to 3.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: filesToAST.cpp 
	chapel/compiler/traversals/: resolveModuleUses.cpp 
	chapel/test/: REGRESSIONS 
	chapel/test/classes/jplevyak/: 
	                               record_type_hierarchy-3-error.good 
	                               union_type_hierarchy-3-error.good 
Added files:
	chapel/modules/standard/: _chpl_htuple.chpl 
	chapel/test/types/tuple/deitz/: test_htuple1.chpl 
	                                test_htuple1.good 

---------------------------------------------------------------------------

06/30/05 12:14:53 -- deitz

Log message:
	Some cleanup on the parser file.  Superficial.

Modified files:
	chapel/compiler/parser/: chapel.y 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

06/30/05 12:16:33 -- roxana

Log message:
	Modified the tests I checked in yesterday so that they use
	the _data(...) storage structure rather than arrays for storage
	 per Steve's and Brad's advice. However, _data does
	not work from within a class. I added one more test which
	works for _data outside a class.

Modified files:
	chapel/test/domains/roxana/: test_hash_table2.chpl 
	                             test_hash_table1.future 
	                             test_hash_table1.chpl 
	                             test_hash_table.chpl 
	                             test_hash_table2.future 
	                             test_hash_table.future 
Added files:
	chapel/test/domains/roxana/: test_hash_table3.chpl 
	                             test_hash_table3.good 

---------------------------------------------------------------------------

06/30/05 12:35:37 -- deitz

Log message:
	Changed UseStmt and WithStmt into UseExpr and WithExpr mostly to pave
	the way for future changes.  These expressions can now be found in
	ExprStmts.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h stmt.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/passes/: createEntryPoint.cpp 
	chapel/compiler/traversals/: expandClassWiths.cpp 
	                             expandClassWiths.h 
	                             resolveModuleUses.cpp 
	                             resolveModuleUses.h 
	                             verifyASTType.cpp 
	chapel/test/types/type_variables/deitz/: test_clone_class1a.good 
	                                         test_clone_class1b.good 

---------------------------------------------------------------------------

06/30/05 13:50:03 -- bradc

Log message:
	This test reveals what appears to be a bug in
	scopeResolveSymbols when using a domain name
	to define a user type that is an index type.
	While I'm not completely surprised that this
	might not work, I was surprised that the
	problem was in scopeResolveSymbols...

Added files:
	chapel/test/domains/bradc/: domainindex.chpl domainindex.future 
	                            domainindex.good 

---------------------------------------------------------------------------

06/30/05 13:54:28 -- deitz

Log message:
	Removed Expr subclass TupleSelect as this is now handled with the
	tuple's this method.

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: baseAST.h expr.h 
	chapel/compiler/traversals/: resolveSymbols.cpp 
	                             specializeParenOpExprs.cpp 
	                             verifyASTType.cpp 

---------------------------------------------------------------------------

06/30/05 14:00:16 -- shannon

Log message:
	Added a couple tests for the new compilation
	flag, --codegen-cpp-lines.

Added files:
	chapel/test/compflags/shannon/cpplines/: .cvsignore CLEANFILES 
	                                         PREDIFF cppLines.chpl 
	                                         cppLines.compopts 
	                                         cppLines.good 
	                                         noCppLines.chpl 
	                                         noCppLines.compopts 
	                                         noCppLines.good 

---------------------------------------------------------------------------

06/30/05 17:23:54 -- deitz

Log message:
	With this checkin, there is no longer a list of DefExprs inside a
	DefStmt, but rather a single DefExpr.  This paves the way for
	eliminating DefStmt altogether (using an ExprStmt like for everything
	else), and then eventually making anonymous record types be
	expressions.
	
	This checkin also simplifies alot of code by getting rid of many loops
	that walked over this list of DefExprs.
	
	Note that something like
	
	  var x, y, z : integer;
	
	will now parse equivalently to
	
	  var x;
	  var y;
	  var z : integer;

Modified files:
	chapel/compiler/AST/: baseAST.cpp expr.cpp stmt.cpp symbol.cpp 
	                      type.cpp 
	chapel/compiler/analysis/: analysis.cpp 
	chapel/compiler/include/: expr.h stmt.h symtab.h 
	chapel/compiler/parser/: chapel.y 
	chapel/compiler/symtab/: reconstructIterators.cpp 
	                         removeDeadSymbols.cpp symtab.cpp 
	chapel/compiler/traversals/: inlineFunctions.cpp 
	                             insertAnonymousTypes.cpp 
	                             insertFunctionTemps.cpp 
	                             insertLiteralTemps.cpp 
	                             insertThisParameters.cpp 
	                             insertVariableInitializations.cpp 
	                             omitForNoAnalysis.cpp 
	                             transformLetExprs.cpp 

