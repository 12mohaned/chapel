!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!                                                                !
! NOTE: This file is automatically maintained by the CVS system. !
! Please do not update and commit by hand                        !
!                                                                !
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


---------------------------------------------------------------------------

01/21/04 13:28:16 -- bradc

Log message:
	This is a test.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

01/21/04 14:13:02 -- bradc

Log message:
	Set the script up to mail both John (here at Cray) and me.

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

01/21/04 14:22:46 -- bradc

Log message:
	Still ashamed for my former sloppiness, made Makefile.base even more
	bulletproof (perhaps overly so :).  Made a rule such that if PLATFORM
	is set to unknown, it prints out a message indicating that the
	platform is not recognized and exits.
	
	In order to make this rule not be the first (and therefore default)
	rule in every Makefile that includes Makefile.base, I added a rule
	"default:" that depends on "all".  Thus, "all" should be the first
	target of every Makefile that we make (this seems to be the convention
	we both favor anyway, so hopefully this isn't too much of an
	imposition).
	
	Also added a Makefile to the make/ directory that prints out all the
	PLATFORM/OS/ARCH information.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile 

---------------------------------------------------------------------------

01/21/04 14:40:16 -- bradc

Log message:
	Got rid of remaining DOS linefeeds.

Modified files:
	chapel/compiler/: prim_data.dat 
	chapel/make/: Makefile.cygwin Makefile.sun 

---------------------------------------------------------------------------

01/22/04 09:58:44 -- bradc

Log message:
	Switched mailing list to chapel_dev@cray.com (should happen on
	next check-in, not this one).

Modified files:
	./: loginfo 

---------------------------------------------------------------------------

01/22/04 09:59:37 -- bradc

Log message:
	Just checking that mail to the new mailing list works.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

01/22/04 12:33:17 -- n10253

Log message:
	Continued work on type checking, parameterized
	types and type constraints on other types (e.g. some_var : some_type).

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h clone.cpp fa.cpp if1.cpp 
	                  sym.h v.g 
Added files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

01/22/04 13:48:26 -- bradc

Log message:
	Improved the Makefile so that clean would remove prim_data.cpp and so
	that a clean build would work without being run twice (previously, it
	seemed to trip over prim_data.cpp being missing the first time and
	then worked the second time).
	
	Improved the .cvsignore files to ignore things created during the
	run of the sample program.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/samples/: .cvsignore 

---------------------------------------------------------------------------

01/22/04 13:56:39 -- bradc

Log message:
	Took a cue from John's mail yesterday and removed the optional
	inclusion of Makefile.$(PLATFORM) to create errors on an unknown
	platform.  Then realized that by moving the rules I'd added to
	Makefile.base to create a nice error message to Makefile.unknown, I
	could still get nice error messages on an unknown platform.

Modified files:
	chapel/make/: Makefile.base 
Added files:
	chapel/make/: Makefile.unknown 

---------------------------------------------------------------------------

01/22/04 13:58:47 -- bradc

Log message:
	Added dparser's created BUILD_VERSION file to the list of files to be
	ignored in the d/ directory.

Added files:
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

01/23/04 11:49:33 -- n10253

Log message:
	add the binaries and "freebsd"

Modified files:
	chapel/compiler/: .cvsignore 

---------------------------------------------------------------------------

01/23/04 13:15:20 -- n10253

Log message:
	Little bug fixes in preparation for working on structural types.

Modified files:
	chapel/compiler/: fa.cpp if1.cpp 

---------------------------------------------------------------------------

01/23/04 14:46:22 -- n10253

Log message:
	Handle more sorts of argument type constraints.

Modified files:
	chapel/compiler/: TODO ast.cpp 

---------------------------------------------------------------------------

01/26/04 11:30:18 -- n10253

Log message:
	freebsd build directory and a couple more executables into cvsignore

Modified files:
	chapel/third-party/boehmgc/: .cvsignore 
	chapel/third-party/boehmgc/gc6.2/: .cvsignore 
	chapel/third-party/dparser/: .cvsignore 
	chapel/third-party/dparser/d/: .cvsignore 

---------------------------------------------------------------------------

01/28/04 11:55:22 -- n10253

Log message:
	Added "path" argument type to args.*
	Added logging system: see log.h for details.

Modified files:
	chapel/compiler/: Makefile arg.cpp driver.cpp fa.cpp geysa.h 
	                  if1.cpp if1.h sym.h 
Added files:
	chapel/compiler/: log.cpp log.h 

---------------------------------------------------------------------------

01/28/04 12:02:43 -- n10253

Log message:
	Fix minor grammar ambiguity.

Modified files:
	chapel/compiler/: TODO v.g 

---------------------------------------------------------------------------

01/28/04 18:41:34 -- n10253

Log message:
	Implement constant folding.
	Dead code elimination does not yet take constant folding into account.

Modified files:
	chapel/compiler/: Makefile ast.cpp ast.h driver.cpp fa.cpp if1.h 
	                  prelude.v prim.cpp prim.h prim_data.dat sym.h 
Added files:
	chapel/compiler/: ast_cf.cpp cast.cpp 

---------------------------------------------------------------------------

01/29/04 15:23:45 -- n10253

Log message:
	Constant folding complete: converts the AST node to an AST_const.
	Abstracted v.g and made a copy in chpl.g in preparations for building
	chapel grammar.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast_cf.cpp chpl.g 
	                  driver.cpp fa_extras.cpp geysa.h if1.cpp map.h 
	                  sym.h v.g 
Added files:
	chapel/compiler/: grammar.cpp grammar.h prelude.chpl 

---------------------------------------------------------------------------

01/30/04 11:36:40 -- bradc

Log message:
	Establishing an examples/ directory for use in managing
	chapel examples and tracking their evolution.  Checking
	in matrix-vector multiplication-related milestone 0 codes,
	including the official consensus code, some interesting
	variations, and some baby steps that should help get us
	there.

Added files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 
	chapel/examples/pre-milestone0/: matadd.chpl matassign.chpl 
	                                 matvectadd.chpl 

---------------------------------------------------------------------------

02/03/04 13:48:58 -- n10253

Log message:
	fix bug in error recovery

Modified files:
	chapel/third-party/dparser/d/: parse.c 

---------------------------------------------------------------------------

02/03/04 15:11:32 -- bradc

Log message:
	Just inserted scripts to update BUILDNUM and CVSLOG files
	in the root chapel/ directory automatically, and inserted
	these files manually.  Just added a header to the top of
	CVSLOG requesting that people not change it manually
	(though it is possible to do so, to commit those changes,
	and then to have the script automatically tack your log to
	the end of those changes, as will happen with this entry.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

02/03/04 15:14:25 -- bradc

Log message:
	Oops, typo in previous log.  BUILDNUM should've
	been BUILD_VERSION.

Modified files:
	./: BUILD_VERSION 
Removed files:
	./: BUILDNUM 

---------------------------------------------------------------------------

02/03/04 16:15:41 -- n10253

Log message:
        casting decision tree

Added files:
        chapel/compiler/: cast_code.cpp 
---------------------------------------------------------------------------

02/03/04 16:29:46 -- bradc

Log message:
	John's last checkin failed to update these files due to a
	permission problem I created, so I've updated them by hand
	as penance.

Modified files:
	./: BUILD_VERSION CVSLOG 

---------------------------------------------------------------------------

02/03/04 16:39:17 -- bradc

Log message:
	Updated the compiler's version machinery from
	Makefile + -D-based technology to a header file
	(version.h) that includes the automatically
	updated BUILD_VERSION file in the parent
	directory.

Modified files:
	chapel/compiler/: Makefile version.cpp 
Added files:
	chapel/compiler/: version.h 
Removed files:
	chapel/compiler/: BUILD_VERSION 

---------------------------------------------------------------------------

02/03/04 16:58:42 -- bradc

Log message:
	Just noticed that when I check in files, it appears that their
	group gets changed from chapel back to criemp.  Am trying to
	fix it, and this checkin is essentially a test (albeit one
	that updates the structure file a bit).

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

02/03/04 17:34:35 -- bradc

Log message:
	Another attempt to fix my permissions problem.  Another small
	modification to the structure file.

Modified files:
	./: structure.txt 

---------------------------------------------------------------------------

02/04/04 12:41:08 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	very preliminary chapel grammar and prelude
	sample/sample.chpl added, and compiles

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h builtin_symbols.h chpl.g 
	                  fa.cpp prelude.chpl prelude.v prim_data.dat 
	                  v.g 
Added files:
	chapel/compiler/samples/: sample.chpl 

---------------------------------------------------------------------------

02/04/04 14:00:36 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	start a prioritized TODO list

Modified files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

02/09/04 16:39:53 -- bradc

Log message:
	Changed dimension of reduction to be correct.

Modified files:
	chapel/examples/milestone0/: mvm.chpl 
	chapel/examples/milestone0/variations/: mvm_brad.chpl 

---------------------------------------------------------------------------

02/10/04 14:53:16 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Extensive changes to the way assignment occurs.
	Assignment is now mediated through methods.  All variables
	are converted to references to be assigned.  This permits
	complex left-hand sides to be type infered correctly, e.g.
	
	a.b.c.d = 5;

Modified files:
	chapel/compiler/: ast.cpp ast_cf.cpp builtin_symbols.h chpl.g 
	                  fa.cpp fa_extras.cpp prelude.chpl prelude.v 
	                  prim_data.dat v.g 
Added files:
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

02/12/04 10:48:45 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for trailing context to scanner

Modified files:
	chapel/third-party/dparser/d/: CHANGES COPYRIGHT Makefile README 
	                               arg.c arg.h d.h dparse.h 
	                               dparse_tables.h dsymtab.h gram.c 
	                               gram.h gramgram.h grammar.g.c 
	                               index.html lex.c lex.h lr.c lr.h 
	                               make_dparser.c parse.c parse.h 
	                               sample_parser.c scan.c scan.h 
	                               symtab.c util.c util.h version.c 
	                               write_ctables.c write_ctables.h 
	chapel/third-party/dparser/d/python/: dparser_wrap.c test.py 
	chapel/third-party/dparser/d/verilog/: Makefile ambig.c main.c 
	                                       vparse.c 
Added files:
	chapel/third-party/dparser/d/tests/: g46.test.g g46.test.g.1 
	                                     g46.test.g.1.check 

---------------------------------------------------------------------------

02/12/04 15:38:21 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in the trailing context code.
	Updated test cases.

Modified files:
	chapel/third-party/dparser/d/: Makefile lex.c parse.c scan.c 
	chapel/third-party/dparser/d/tests/: g36.test.g.1.check 

---------------------------------------------------------------------------

02/12/04 15:39:15 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Update grammar to use trailing context.

Modified files:
	chapel/compiler/: chpl.g v.g 

---------------------------------------------------------------------------

02/12/04 18:31:40 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	add support for basic sequences of the form
	
	1..n by m
	
	some work on fa.cpp in preparation for more extensive changes
	to support analysis of sequences and vectors.

Modified files:
	chapel/compiler/: TODO chpl.g fa.cpp fa.h prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: seq.chpl 

---------------------------------------------------------------------------

02/13/04 15:48:39 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	cleaned up instance variable handling and
	updated instance variable test case

Modified files:
	chapel/compiler/: ast.cpp clone.cpp fa.cpp prelude.chpl 
	                  prelude.v 
	chapel/compiler/samples/: iv.chpl 

---------------------------------------------------------------------------

02/19/04 10:36:58 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fixed a bug in d_ws_before

Modified files:
	chapel/third-party/dparser/d/: dparse_tables.h parse.c 

---------------------------------------------------------------------------

02/19/04 11:22:35 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	added support for analyzing vectors and vector operations
	added samples/vec.chpl as vector test case

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h chpl.g fa.cpp grammar.cpp 
	                  if1.cpp prelude.chpl prim.cpp sym.h v.g 
	chapel/compiler/samples/: iv.chpl 
Added files:
	chapel/compiler/samples/: vec.chpl 

---------------------------------------------------------------------------

02/19/04 11:28:53 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	

Removed files:
	chapel/third-party/dparser/: d-1.8-src.tar.gz 

---------------------------------------------------------------------------

02/20/04 10:00:47 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Add support for immediate sequences 1..n by m.
	Reorganized primitive handling in type inference to support
	more complicated transition function more easily.
	Prep for more advanced splitting (type inference of abstract code).

Modified files:
	chapel/compiler/: ast.cpp cfg.cpp chpl.g fa.cpp fa.h grammar.cpp 
	                  make_prims.g prelude.chpl prelude.v prim.h 
	                  prim_data.dat vec.cpp vec.h 

---------------------------------------------------------------------------

02/25/04 16:26:23 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	made forv_Vec (the basis for all the forv_XXX vector iterators) safe with respect to
	changes to the underlying vector.
	- added a new primitive "index_vector" used by the vector class for indexing.
	- made calls on vectors into indexing into the vector, this will be inherited
	by domains.
	- specific symbols are now subtypes of "symbol", specific functions subtypes
	of "function", and functions/methods whose pattern contains an initial symbol
	are subtypes of that symbol (this permits the function to be pattern matched
	to that symbol.
	- fixed bugs in cloning, the type_diff function, etc.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h clone.cpp 
	                  fa.cpp fa.h fa_extras.cpp if1.cpp pnode.h 
	                  prelude.chpl prelude.v prim.cpp prim_data.dat 
	                  vec.h 

---------------------------------------------------------------------------

02/26/04 11:57:51 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	checkpoint for rework of implicit references (e.g. array access, Mat(1))

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h builtin_symbols.h 
	                  driver.cpp fa.cpp fa.h fa_extras.cpp fun.cpp 
	                  prelude.chpl prelude.v sym.h vec.cpp 

---------------------------------------------------------------------------

02/26/04 16:26:33 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Completely new method for handling implicit references (lvals).
	Differentiate using the class as a function (e.g. domain(1..n)) and
	using objects of the class as a function (e.g. Mat(1)).
	Added mvm1.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h fa.cpp fa.h if1.cpp 
	                  prelude.chpl var.cpp var.h 
Added files:
	chapel/compiler/samples/: mvm1.chpl 

---------------------------------------------------------------------------

02/27/04 14:04:26 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- change verbose levels so that -v only returns types
	- new "array" class which combines a domain and a vector
	- support for generalized point-wise operations on arrays
	- combine similar type violations
	- use standard error reporting syntax to report type violations
	- convert to using selectors instead of functions for globally declared
	functions

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h cfg.cpp fa.cpp 
	                  fa.h fa_extras.cpp fun.cpp if1.cpp 
	                  prelude.chpl prelude.v ssu_extra.cpp vec.cpp 

---------------------------------------------------------------------------

02/27/04 16:43:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- add samples/mat1.chpl
	- tweeks to handle samples/mat.chpl

Modified files:
	chapel/compiler/: TODO ast.cpp chpl.g fa.cpp if1.cpp 
	                  prelude.chpl 

---------------------------------------------------------------------------

03/01/04 10:40:57 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Fix bug with handling of simple expressions in false forks of conditionals

Modified files:
	chapel/compiler/: TODO ast.cpp if1.cpp 

---------------------------------------------------------------------------

03/01/04 11:07:13 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Chapel syntax for conditionals now: "if" expression "then" expression "else" expression
	Syntax for while loops now: "while" expression "do" expression
	Added samples/mat1.chpl.

Modified files:
	chapel/compiler/: TODO chpl.g 
	chapel/compiler/samples/: mvm1.chpl 
Added files:
	chapel/compiler/samples/: mat1.chpl 

---------------------------------------------------------------------------

03/05/04 16:02:00 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	- integers are now "integer"
	- added sample/matassign1.chpl which is closer to what we have been discussing
	- matassign1.chpl type checks
	- fixed a pattern matching bug in fa.cpp

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp fa.cpp fa.h if1.cpp 
	                  prelude.chpl 
Added files:
	chapel/compiler/samples/: matassign1.chpl 

---------------------------------------------------------------------------

03/08/04 18:13:52 -- jplevyak (a.k.a. n10253, the android wonder)

Log message:
	Added samples/literals.v
	Fixed some bugs with literal handling, added characters, complex and strings as
	builtin types.

Modified files:
	chapel/compiler/: TODO ast.cpp builtin_symbols.h chpl.g fa.cpp 
	                  if1.cpp prelude.chpl prelude.v v.g 
	chapel/third-party/dparser/d/: gram.c grammar.g grammar.g.c 
	chapel/third-party/dparser/d/tests/: g44.test.g 
Added files:
	chapel/compiler/samples/: literal.v 

---------------------------------------------------------------------------

03/09/04 15:00-ish -- bradc (this is a hand-generated message due to
                             problems in the CVS perl scripts when
                             moving to Linux)

Log message:
	Reincorporated changes from ver 1.5 of Makefile to (1) work in
	the face of a missing BUILD_VERSION file and (2) look in the
	Chapel installation of the GC stuff for libraries and headers.

Modified files:
	chapel/third-party/dparser/d/: Makefile



---------------------------------------------------------------------------

03/09/04 15:43:54 -- bradc

Log message:
	Ran into incompatibilities with the CVS perl scripts on Linux, so
	my previous log file got lost and I entered it by hand.  It
	concerned modifications to third-party/dparser/d/Makefile.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

03/09/04 16:21:13 -- jplevyak (a.k.a. n10253)

Log message:
	Removed unnecessary (and error causing) $name "complex"

Modified files:
	chapel/compiler/: v.g 

---------------------------------------------------------------------------

03/12/04 09:55:29 -- jplevyak (a.k.a. n10253)

Log message:
	Added new -t option which dumps the program as cross-linked HTML
	into the "log" directory as "dump.html".
	Fixed a number of bugs discovered by examining the HTML.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp builtin_symbols.h 
	                  clone.cpp driver.cpp driver.h fa.cpp fa.h 
	                  fun.cpp fun.h geysa.h if1.h log.cpp pdb.h 
	                  prelude.chpl prelude.v prim_data.dat sym.h 
	                  vec.cpp 
	chapel/compiler/samples/: literal.v 
Added files:
	chapel/compiler/: bullet.gif dump.cpp dump.h minus.gif 
	                  mktree.css mktree.js plus.gif 

---------------------------------------------------------------------------

03/12/04 15:08:09 -- jplevyak (a.k.a. n10253)

Log message:
	refactor headers for cast.cpp

Modified files:
	chapel/compiler/: TODO cast.cpp if1.h 
Added files:
	chapel/compiler/: num.h 

---------------------------------------------------------------------------

03/12/04 15:51:50 -- bradc

Log message:
	This change is a revamping of the make system, in an attempt to
	make it more modular and more understandable (to myself, at least,
	and hopefully to new implementors as well).
	
	This isn't a perfect check-in:  since compiler code is created
	dynamically, it is difficult to establish dependences for those
	bits of code that are dynamic.  It was hard enough to establish
	proper dependences for those bits of code that #include dynamically-
	created files.  So the main limitation of this version is that
	dependences for dynamically created files (make_prims.cpp,
	*.g.d_parser.cpp, cast_code.cpp) are not generated.  This will be
	fixed when I revisit the topic (probably by keeping these
	dependences under compiler control -- yuck; or simply by requiring
	developers who want such dependences to run make depend after
	they've completed a successful make (also yuck).  Alternatively,
	we could put all code under CVS control, even if it is dynamically
	generated (I'm not sure how fast some of these files change, so
	don't know if this makes sense).
	
	The general organization strategy here is:
	
	- put each binary in its own directory (for understandability)
	- teach the Makefiles how to make everything (so developers don't need
	to know how)
	- no automatic updating of dependences -- developers must do it
	manually
	
	The new directory structure is:
	
	compiler/     -- code for the compiler
	make/       -- stores common Makefile variables, rules
	cast/       -- code to build cast
	make_prims/ -- code to build make_prims
	test/       -- unit tests for the compiler
	
	where each of these subdirectories has a platform-specific
	subdirectory for storing object files, dependence information,
	etc.
	
	The Makefile in compiler/ currently responds to:
	
	all: recursively builds subdirectories, then builds self
	clean: cleans all subdirectories, self
	depend: updates dependences for CVS-controlled sources in
	subdirectories, self
	cleandeps: remove all dependence information in
	subdirectories, self
	clobber: clean up "everything" not under CVS control
	test: builds and runs unit tests
	
	The subdirectories are each structured in a fairly similar way so that
	they can share a bunch of common Makefile rules and variables (stored
	in the compiler/make/ subdirectory) and so that these rules can be
	changed once and affect all the subdirectories.
	
	This took way more work than I expected, due mostly to the existence
	of dynamically generated sources, which threw more monkey wrenches at
	me than I imagined.  I documented some of the problems I was running
	into in make/Makefile.NOTES so that in future changes I don't retread
	over the same path again.

Modified files:
	chapel/compiler/: .cvsignore Makefile 
Added files:
	chapel/compiler/cast/: .cvsignore Makefile cast.cpp 
	chapel/compiler/make/: Makefile.NOTES Makefile.compiler.foot 
	                       Makefile.compiler.head 
	                       Makefile.compiler.subdirrules 
	chapel/compiler/make_prims/: .cvsignore Makefile make_prims.cpp 
	                             make_prims.g 
	chapel/compiler/test/: .cvsignore Makefile test_lib.cpp 
Removed files:
	chapel/compiler/: cast.cpp cast_code.cpp make_prims.cpp 
	                  make_prims.g test_lib.cpp 

---------------------------------------------------------------------------

03/12/04 15:53:10 -- bradc

Log message:
	Oops, wasn't quite out at the root of the Chapel tree for that
	last checkin.  The changes to Makefile.base factor some of the
	make_dparser variables out to this level and switch from -L -l
	for libgc.a to simply specifying the library directly (for
	some reason, the former wasn't working for me on Linux).

Modified files:
	chapel/make/: Makefile.base 

---------------------------------------------------------------------------

03/12/04 16:26:36 -- jplevyak (a.k.a. n10253)

Log message:
	change recursive make invocations to use $(MAKE) so as to
	use the same version of make as the original invocation
	(necessary on FreeBSD where the default make is not gmake)

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

03/16/04 12:44:42 -- jplevyak (a.k.a. n10253)

Log message:
	remove "dead" cruft from dump

Modified files:
	chapel/compiler/: TODO dump.cpp 

---------------------------------------------------------------------------

03/16/04 18:16:38 -- jplevyak (a.k.a. n10253)

Log message:
	print out folded constants in dump.html
	add test case in samples for constant folding: samples/constant_folding.v

Modified files:
	chapel/compiler/: ast.cpp ast.h ast_cf.cpp builtin_symbols.h 
	                  dump.cpp fa.cpp prelude.chpl prelude.v 
	                  prim_data.dat sym.h 
Added files:
	chapel/compiler/samples/: constant_folding.v 

---------------------------------------------------------------------------

03/17/04 12:58:45 -- jplevyak (a.k.a. n10253)

Log message:
	Begin work on indexing into tuples.  To get this to work I
	need to implement constant propogation and inlining.

Modified files:
	chapel/compiler/: TODO ast.cpp clone.cpp dump.cpp fa.cpp if1.cpp 
	                  misc.cpp misc.h sym.h 

---------------------------------------------------------------------------

03/17/04 13:22:30 -- bradc

Log message:
	Broke argv[0] down into the program's name and its directory
	location.  Added a field for the latter in the ArgumentState
	descriptor, and used it to initialize the system_dir option.
	Eliminated a static variable in driver.cpp that duplicated
	the former.
	
	If a directory name isn't given in argv[0], "." is assumed
	(whereas the better behavior would be to search the path).
	I may add this in the future, but for now it seems no worse
	than it was before in such cases.

Modified files:
	chapel/compiler/: arg.cpp arg.h driver.cpp 

---------------------------------------------------------------------------

03/17/04 13:41:54 -- bradc

Log message:
	Squelched the creation of the log/ subdirectory unless the user
	requests the creation of a log or an HTML dump.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

03/18/04 10:13:06 -- jplevyak (a.k.a. n10253)

Log message:
	update __index_vector to __index.

Modified files:
	chapel/compiler/: prelude.chpl 

---------------------------------------------------------------------------

03/18/04 15:34:43 -- bradc

Log message:
	First version of the regression test system.
	
	Instructions for use (from the top of the start_test script):
	
	--------------------
	
	Executive Summary: The overall flow of the testing system is that it
	will recursively descend into subdirectories looking for Chapel
	programs to compile and run (*.chpl) as well as for other tests to
	run (sub_test).  The output of these runs will typically be logged
	in a file stored in the Logs/ subdirectory, as will a summary of the
	errors reported (determined by grepping for the string "[Error", so
	don't have your program print this out.
	
	Here's the directory structure:
	
	Bin/     -- contains binary files/scripts required by the testing
	system, such as the timedexec script which kills a
	test if it takes too long
	Logs/    -- logs of testing runs go here by default
	Samples/ -- sample tests go here; these are for illustration only
	and won't be run by default.  To try running the
	test system against these samples, use:
	start_test -startdir ./Samples
	*/       -- all other directories will contain tests
	
	The start_test script kicks off all the action.  With no arguments,
	it will run all the tests using the defaults.  The '-h' option lists
	the options that the script accepts and the default values.  Current
	options are:
	
	option     argument               default value
	---------  ---------------------  -------------
	-compiler  <compiler executable>  ../compiler/chpl
	-compopts  <option list>          ""
	-execopts  <option list>          ""
	-startdir  <test subdir>          .
	-logfile   <log filename>         ./Logs/<username>.log
	
	The -compiler option allows the user to specify the compiler to test
	if it is something other than the obvious one in the current CVS
	structure.  This lets one run other people's compilers, old copies
	of compilers, etc.
	
	The -compopts option allows the user to specify a set of compiler
	options that should be used on every invocation to the compiler.
	Additional compiler options can be specified on a directory-by-
	directory basis.
	
	The -execopts option allows the user to specify a set of execution
	options that should be used on every invocation of a program.  As
	with compiler options, these can be ammended in each subdirectory.
	
	The -startdir option allows the user to specify a subdirectory of
	the testing system to start in (and limit itself to).  Assuming
	that tests are sorted into subdirectories by useful features, this
	allows you to run a subset of the tests easily.
	
	The -logfile option indicates where the log of the test run should
	be kept.  By default it's based on the user's name.  If the log
	file already exists, you will be prompted at the beginning of the
	run whether you want to delete that file or not.  At the end of
	the run, a second log file named <logfile>.summary will be
	generated containing only the Errors that were logged.
	
	By default, setting up a subdirectory for testing simply consists
	of creating the directory, putting Chapel (.chpl) source files
	into it and an expected output file (.chk) for each source file
	(using the same base name).  Upon reaching such a directory, the
	testing system will run the specified compiler on each Chapel
	source file using the specified compiler options, then (assuming
	the compile completed successfully, execute the resulting program
	using the specified execution options.  The output from both the
	compilation and the execution are concatenated and diff'd against
	the .chk file.  This allows programs that are supposed to generate
	errors, warnings, and correct programs to all be tested using the
	same mechanisms.
	
	Particular subdirectories can also be customized if necessary.
	Note that such customizations are not inherited recursively by
	further subdirectories, but apply only to the directory in
	question (we might consider changing this in future versions).
	The customizations are as follows:
	
	- if the subdirectory contains an executable sub_test script,
	that script will be used to run the tests in that directory
	rather than the default sub_test script (located in this
	directory).  A sub_test script may take whatever actions it
	wants, and is simply expected to generate any errors using
	the "[Error ...]" format so that it will show up in the
	summary.  Similarly, the script should generate any warnings
	or successful tests using "[Warning ...]" "[Success ...]"
	messages for consistency.  The sub_test script will be
	sent two arguments: (1) the compiler to use, and (2) the
	location of this main test/ directory.  The compiler and
	execution options will be stored in environment variables
	named COMPOPTS and EXECOPTS, respectively.
	
	- if the subdirectory contains a NOTEST file, that directory
	will not be considered for testing.  This can be useful for
	disabling subdirectories containing tests that don't work
	yet, or subdirectories that contain input files for other
	tests (though they will also be ignored if they fail to
	contain any .chpl files...)
	
	- if the subdirectory contains a COMPOPTS or EXECOPTS file,
	the options listed in that file will be added to the compiler
	and execution options for that subdirectory.  NOTE: be sure
	not to end the file with a linefeed -- it should simply be a
	list of options on the first line, followed <eof>.
	
	- if the subdirectory contains a CATFILES file, then the files
	listed in that file will be concatenated to the end of the
	compiler/execution output for each test.  For tests that
	generate files (either as a result of the compilation or
	as part of the executable's behavior), this can be used to
	ensure that the generated file's contents are correct without
	writing a specialized sub_test script.  Again, this file should
	be a single line with no linefeeds.
	
	- if the subdirectory contains a TIMEOUT file, then that file
	will be read to determine the number of seconds that the tests
	in the directory should be allowed to run before being killed.
	The default is currently 5 minutes.
	
	- subdirectory-specific .cvsignore files can also be very
	helpful so that files generated during testing won't clutter
	the results of a cvs -nq update command.
	
	Also worth describing here is the start_clean script which walks
	the directory structure in a similar manner and cleans up --
	removing the generated executables, core files, and *.tmp files
	which store any mismatching output.  The user can also specify
	subdirectory-specific things to clean up usinng a CLEANFILES
	file that lists other targets to remove (called with the -rf
	flag, so subdirectories will work here as well).  The idea is
	that after start_clean runs, the testing system should be left
	in a state pretty close to what's checked into the CVS tree.
	
	Again, to see a sample run of the testing system, look through
	the Samples/ directory, then run:
	
	./start_test -startdir Samples
	
	and inspect the Samples/ and Logs/ subdirectories to see what
	was generated.  Then use:
	
	./start_clean -startdir Samples
	
	to clean back up again.
	
	--------------

Added files:
	chapel/test/: start_clean start_test sub_clean sub_test 
	chapel/test/Bin/: timedexec 
	chapel/test/Logs/: .keepme 
	chapel/test/Samples/ex1-astlog/: .cvsignore CATFILES CLEANFILES 
	                                 COMPOPTS astlog1.chk 
	                                 astlog1.chpl 
	chapel/test/Samples/ex2-notest/: NOTEST illegal.chk illegal.chpl 
	chapel/test/Samples/ex3-fails/: .cvsignore intendedToFail.chk 
	                                intendedToFail.chpl 

---------------------------------------------------------------------------

03/18/04 15:36:22 -- bradc

Log message:
	Added a command to run etags on the chapel compiler sources after
	chapel is linked.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

03/22/04 16:43:30 -- bradc

Log message:
	Learned that the time to build on an NFS-mounted directory was
	painfully slow (10x slowdown for some commands), so added the
	option to set an environment variable CHPLDEVTMP which, when
	set, gives a root directory for writing .o's, .a's, and
	executables.  For example, on lotus, I set CHPLDEVTMP
	to /ptmp.  When compiling, rather than creating linux/
	subdirectories in the various directories, the Makefiles
	create a directory /ptmp/chapel-bradc/, mirror my source tree's
	structure under that point, and then sets up symbolic links
	to these directories for my linux/ subdirectories.  If CHPLDEVTMP
	is not set, things behave as they previously did.
	
	Well, almost... Two other changes made by this check-in:
	
	1) binaries are now built in the platform-specific subdirectories
	first.  Thus, your link line will look something like:
	
	g++ -o linux/chpl foo.o boo.o goo.o ...
	
	Then, a symbolic link to the binary is set up in the directory
	you're working in.  (Could switch this to a copy if anyone
	prefers).
	
	2) I defined the rule for how to build or build&link a platform-
	specific subdirectory in the make/Makefile.base file, included
	by all our other Makefiles, so added a rule prior to it:
	
	default: all
	
	so that when make is typed in any of these directories, you
	get the same behavior as before (previously, the first target
	in each of our Makefiles was "all").  One effect this has is
	that if you're hacking on a local Makefile and insert a rule
	before all, thinking that it will be the default, you'll be
	wrong (unless you also put it before the include Makefile.base).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/cast/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 
	                       Makefile.compiler.head 
	chapel/compiler/make_prims/: Makefile 
	chapel/compiler/test/: Makefile 
	chapel/make/: Makefile.base 
	chapel/third-party/: Makefile 
	chapel/third-party/boehmgc/: Makefile 
	chapel/third-party/dparser/: Makefile 

---------------------------------------------------------------------------

03/22/04 17:26:17 -- jplevyak (a.k.a. n10253)

Log message:
	This is a big checkin.
	
	1. Added graphing of internal data structures.
	2. Added interprocedural constant propogation
	3. The HTML dump and graphing show reaching interprocedural constants.
	Currently I am not limiting these... when the overhead get's too high
	I'll get around to writing the code to convert them into "some integer"
	which is already supported.
	4. Changed the way assignment works so that SSU form is useful (I was using
	references for all assignment).
	5. Added support for "inout" parameters, currently used for the
	(overloaded) make-reference operator.  This is indicated by
	putting a 'var' before the parameter.
	6. Added some support for 'const' to the Chapel grammar.  Now the AST is
	decorated with 'constness'.
	7. Added 'let' to the Chapel grammar.  This permits simple bindings instead
	of just non-SSA 'var' style bindings.  We can remove this if everyone
	hates it, but it is useful for testing.
	
	Graphing
	
	-G turns on graphing, graphs are put in the log directory
	two formats are supported, VCG and GraphViz.
	
	VCG is interactive, and let's you collapse and limit the
	graph dynamically.  It is described and the source code
	is available at:
	
	http://rw4.cs.uni-sb.de/users/sander/html/gsvcg1.html
	
	GraphViz is static, but it produces somewhat more pleasing
	files and outputs to postscript (amoung other formats).
	
	It is described and the source code is available at:
	
	http://www.research.att.com/sw/tools/graphviz/
	
	The output defaults to VCG, GraphViz is supported
	by --graphviz.
	
	Currently you can output the AST, the CFG, the SSU graph and
	the flow variables.

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp ast.h ast_cf.cpp chpl.g 
	                  clone.cpp code.h driver.cpp driver.h dump.cpp 
	                  fa.cpp fa.h fa_extras.cpp geysa.h if1.cpp 
	                  parse.cpp parse.h prelude.chpl prelude.v 
	                  prim.cpp prim_data.dat sym.h v.g var.h vec.cpp 
	                  vec.h 
Added files:
	chapel/compiler/: graph.cpp graph.h 
	chapel/compiler/samples/: ref.v tuples.v 

---------------------------------------------------------------------------

03/24/04 12:59:18 -- bradc

Log message:
	This checkin adds some crufty support for some trivial code
	generation (disabled by default), but lays in support for
	creating that source in a temporary directory, runtime
	libraries to support the source, compiling the source against
	the runtime libraries and moving the resulting binary back to
	the current working directory.  So consider it more infrastructure
	than any true support for code generation.
	
	Added new files to the compiler sources:
	codegen.cpp : the seat of code generation, currently
	files.cpp : utilities related to the tmp directory, int. files
	mysystem.cpp : wrapper around system() for issuing subcommands
	stringutil.cpp : some simple string utilities
	
	Notes:
	
	1) The tmp directory used for intermediates is stored in
	/tmp/chpl-deleteme.<pid>, where <pid> is the process ID
	of the compiler.  It currently isn't removed when compiles
	fail (fail, show_error, INT_ERROR, etc.) because I have
	a nasty fear of blowing away John's root directory again.
	After gaining some confidence with this, it should be
	blown away in these cases as well.  For the time being,
	if you're messing with code generation, you may want to
	monitor your /tmp directory and clean up by hand.  (Note
	that since codegen is currently disabled, you won't get
	these at all unless you take pains to enable them).
	
	2) Added some support for "internal errors" in misc.h/cpp via
	the macro INT_FATAL(ast, format, ...), which takes an
	AST* (or NULL if no obvious AST* is related), a printf-style
	format string, and the supporting args.  This prints out
	where in the compiler source the internal failure occurred,
	the argument message, and the source location that the AST
	corresponds to.  These are perhaps redundant with assert(),
	but I've never been a big fan of assert() (hard to set
	breakpoints on).  I'm open to persuasion for other approaches
	or modifications to this one.
	
	3) mysystem() (defined in mysystem.cpp) is currently simply a
	wrapper around C's system() to handle return codes, print
	out messages to the user, etc.  Eventually, it'll also
	print out the commands it's executing given an appropriate
	flag once I get around to adding some flag.
	
	4) Currently the binary is always named a.out.  Something else
	I need to add a flag for.
	
	5) stringutil.cpp contains a routine called glomstrings() that
	takes the number of strings and a varags list of char*
	pointers, mallocs the right amount of buffer space for
	them, glomst them all together, and returns the new string.
	Useful for building filenames and commands for mysystem().
	
	6) Factored the platform-decision stuff out of make/Makefile.base
	in order to use it in building the generated sources as well.
	
	7) The runtime directory structure is currently organized:
	
	chapel/
	runtime/
	etc/ -- Makefiles and such for building generated code
	include/ -- header files for generated code/runtime libs
	src/ -- source code for runtime libs

Modified files:
	chapel/compiler/: Makefile driver.cpp misc.cpp misc.h 
	chapel/make/: Makefile.base 
Added files:
	chapel/compiler/: FILES codegen.cpp codegen.h files.cpp files.h 
	                  mysystem.cpp mysystem.h stringutil.cpp 
	                  stringutil.h 
	chapel/make/: Makefile.platform 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: chplio.h chpltypes.h stdchpl.h 
	chapel/runtime/src/: .cvsignore Makefile chplio.c main.c 

---------------------------------------------------------------------------

03/25/04 10:46:20 -- bradc

Log message:
	This checkin adds some flags to help control the compilation
	process (1).  It also adds some better error messages when flags
	are used improperly (2). Inserted some tests to protect these
	error messages (3) and added a new (minor) test feature (4).
	I also hoisted some code out of the geysa.h file into more specific
	header files (5).
	
	(1) The new flags are:
	
	-o --output <exename> : specify the name of the final binary
	--savec  <dir>    : save the intermediate C in the specified dir
	--print-commands  : print the system() commands executed
	
	(2) The changes to how flags are handled are:
	
	* if a flag that requires an argument isn't followed by an argument,
	an appropriate error message is printed out.
	
	* if an unrecognized flag is encountered, an appropriate error message
	is printed out.
	
	* if the copyright flag is used, the usage() information isn't printed
	
	(3) The first tests!  I put these in a directory called compflags/ to
	test compiler options.  I also added a DIRS file to the root test
	directory to serve as a guide to the directories and what their
	intention is.
	
	(4) The new feature in the testing system is support for a
	LASTCOMPOPTS file, similar to the COMPOPTS file, but which
	follows the source filename argument.  Thus, the most
	general compile line will be:
	
	chpl <-compopts> <COMPOPTS> source.chpl <LASTCOMPOPTS>
	
	(5) The code hoisted out of geysa.h is as follows:
	
	chplalloc.h : memory allocation routines
	chpltypes.h : basic integer typedefs (uint64, etc.)
	extern.h    : EXTERN-related stuff
	version.h   : moved get_version() prototype here

Modified files:
	chapel/compiler/: arg.cpp codegen.cpp driver.cpp files.cpp 
	                  files.h geysa.h mysystem.cpp mysystem.h 
	                  version.h 
	chapel/test/: start_test sub_test 
Added files:
	chapel/compiler/: chplalloc.h chpltypes.h extern.h 
	chapel/test/: DIRS 
	chapel/test/compflags/bradc/badflagdash/: COMPOPTS declint.chk 
	                                          declint.chpl 
	chapel/test/compflags/bradc/badflagddash/: COMPOPTS declint.chk 
	                                           declint.chpl 
	chapel/test/compflags/bradc/copyright/: COMPOPTS declint.chk 
	                                        declint.chpl 
	chapel/test/compflags/bradc/missingargdash/: LASTCOMPOPTS 
	                                             declint.chk 
	                                             declint.chpl 
	chapel/test/compflags/bradc/missingargddash/: LASTCOMPOPTS 
	                                              declint.chk 
	                                              declint.chpl 

---------------------------------------------------------------------------

03/25/04 17:05:43 -- bradc

Log message:
	Incidental changes.  Did some work in starting to make header files
	stand more independently so that if one wanted to write code using
	the "AST" type, they could #include "ast.h" without having to worry
	so much about what it depended on.  This is by no means complete,
	but will be a lazy-evaluation background task.
	
	Also found that "echo -n" didn't work by default on the Suns, which
	created illegal dependence files, so reworked the Makefiles so that
	platforms could define their own ECHO target for use with echo -n
	(lazily, I only changed those echo commands in Makefiles that actually
	use -n...)

Modified files:
	chapel/compiler/: Makefile ast.h code.h codegen.cpp codegen.h 
	                  fa.h files.cpp fun.h list.h map.h misc.h 
	                  mysystem.cpp region.h stringutil.cpp sym.h 
	                  var.h 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.base Makefile.freebsd Makefile.linux 
	              Makefile.sun 
	chapel/runtime/src/: Makefile 

---------------------------------------------------------------------------

03/26/04 11:45:53 -- bradc

Log message:
	Minor changes.  codegen is still off by default:
	
	1) fixed the generation of write() calls to use the type_info of its
	arguments in generating the routine name (previously it was
	hard-wired to integer64).
	
	2) changed the runtime library's write() implementation to take a
	format flag in expectation of this need down the road.
	
	3) added a clean_exit() routine to use in place of exit() that blows
	away the /tmp directory created by code generation (if it exists)
	and switched error routines over to using this routine.  Also
	added a catch of SIGINT that calls fail() and will similarly blow
	away the /tmp directory (should probably add more signals, but
	I'm too lazy to try and come up with a portable list of signals
	that we'd want to catch today.

Modified files:
	chapel/compiler/: codegen.cpp files.cpp files.h misc.cpp 
	chapel/runtime/include/: chplio.h chpltypes.h 
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

03/26/04 11:56:47 -- jplevyak (a.k.a. n10253)

Log message:
	Bug in comparison routine passed to qsort.

Modified files:
	chapel/third-party/dparser/d/: lr.c 

---------------------------------------------------------------------------

03/26/04 12:01:21 -- jplevyak (a.k.a. n10253)

Log message:
	Suppression file for use with the Boehm GC and valgrind vr 2.0.0

Added files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

03/26/04 14:15:38 -- bradc

Log message:
	Found some portability problems on the Sun with the Makefiles
	and regression tests, so fixed these.  Updated some other
	files.

Modified files:
	./: Makefile 
	chapel/make/: Makefile Makefile.platform 
	chapel/test/: DIRS start_test sub_test 
Added files:
	./: DIRS 
	chapel/runtime/: Makefile 
Removed files:
	./: structure.txt 
	chapel/make/: Makefile.gcc 

---------------------------------------------------------------------------

03/26/04 14:18:14 -- bradc

Log message:
	Never seem to have gotten this file checked in.

Added files:
	chapel/test/Logs/: .cvsignore 

---------------------------------------------------------------------------

03/26/04 15:02:02 -- bradc

Log message:
	Enabled the testing system to run binaries produced by the
	compiler by default when testing a directory.  Also added
	support for a new feature:  When a NOEXEC file is placed
	in a subdirectory of the testing system, the source files
	in that directory will only be compiled and the compiler's
	output will be diff'd against the expected output -- any
	generated executables will not be run.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/compflags/bradc/copyright/: NOEXEC 

---------------------------------------------------------------------------

03/26/04 15:28:01 -- bradc

Log message:
	Cleaned up the handling of literals for now.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

03/26/04 15:28:57 -- bradc

Log message:
	Added support for printing strings (string literals, at least).

Modified files:
	chapel/runtime/include/: chplio.h chpltypes.h 

---------------------------------------------------------------------------

03/26/04 15:29:31 -- bradc

Log message:
	Oops, I'm getting too fast.  This should've gone with the
	last checkin.

Modified files:
	chapel/runtime/src/: chplio.c 

---------------------------------------------------------------------------

03/26/04 16:36:52 -- bradc

Log message:
	Fixed a bug in which running the compiler using a relative
	directory was breaking the "make" of the generated code.
	In doing so, turned up and fixed a subtle buffer overrun
	error that I'd missed previously (in the one place that
	I wasn't using the -- so far -- bulletproof "glomstrings()"
	function... :)

Modified files:
	chapel/compiler/: files.cpp 

---------------------------------------------------------------------------

03/31/04 19:01:09 -- jplevyak (a.k.a. n10253)

Log message:
	Added dominator computation a la Tarjan
	Added loop recognition a la modified Sreedhar-Gao-Lee Algorithm
	Added simple inlining
	Added interprocedural constant propogation
	Added new graph types:
	loops (procudural loops)
	rec (interprocedural loops)
	dom (dominators)
	calls (call graph)
	Added frequency estimation based on loop analysis
	Added the ability to annotate the graphs with frequency estimates.
	
	You may be wondering why I did procedural loop analysis instead
	of using the AST.  Well, in addition to being able to recognize
	loops constructed from goto and the like, I needed to do interprocedural
	loop recognition to handle recursion, and it is the same algorithm.
	
	Fixed a number of bugs in numeric coersion, constrol region nesting,
	SSU conversion, the grammars, etc.

Modified files:
	chapel/compiler/: Makefile TODO ast.h chpl.g clone.cpp clone.h 
	                  driver.cpp driver.h dump.cpp dump.h fa.cpp 
	                  fa.h fun.cpp fun.h geysa.h grammar.cpp 
	                  graph.cpp graph.h map.h num.h pdb.h pnode.cpp 
	                  pnode.h prelude.v region.h scope.h ssu.cpp v.g 
	                  valgrind.suppressions var.h vec.cpp vec.h 
Added files:
	chapel/compiler/: dom.cpp dom.h inline.cpp inline.h loop.cpp 
	                  loop.h 
	chapel/compiler/samples/: bug1.v const.v inline.v loop1.v 
	                          loop2.v loop_endless.v rec.v 

---------------------------------------------------------------------------

04/01/04 16:08:10 -- bradc

Log message:
	Updated the astlog example a bit to (1) get the log file in
	synch with, well, my latest version of the compiler (I still
	haven't merged in John's latest changes), and (2) now that
	we're looking for an executable to run, added the NOEXEC file
	to indicate that this test is only meant to be compiled, not
	run.

Modified files:
	chapel/test/Samples/ex1-astlog/: .cvsignore astlog1.chk 
Added files:
	chapel/test/Samples/ex1-astlog/: NOEXEC 

---------------------------------------------------------------------------

04/01/04 17:07:05 -- bradc

Log message:
	Broke version number stuff out into its own header file because
	the way I previously set it up, everything got recompiled
	whenever BUILD_NUMBER changed.  Now only version.cpp will be.

Modified files:
	chapel/compiler/: version.cpp version.h 
Added files:
	chapel/compiler/: version_num.h 

---------------------------------------------------------------------------

04/02/04 14:09:28 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed a bug in flow analysis which was causing the vec.chpl test to fail.

Modified files:
	chapel/compiler/: driver.cpp fa.cpp 

---------------------------------------------------------------------------

04/02/04 16:09:32 -- bradc

Log message:
	Added a new 0-argument option to the testing system: -valgrind
	When used, the compiler is run under valgrind with the -q option
	and the valgrind.suppressions file in the compiler directory.
	Errors reported by valgrind will be part of the compilation output
	and therefore mismatch the expected output by definition.
	
	Also added -h/-help options.  It seems before that help was printed
	when there were an odd number of arguments (!?).  I'd never noticed
	this before.

Modified files:
	chapel/test/: start_test sub_test 

---------------------------------------------------------------------------

04/02/04 16:20:00 -- bradc

Log message:
	Turned on codegen (and therefore binary generation) by default.
	Use the --no-codegen flag to suppress code generation.
	
	Also switched the building of generated code to use gmake
	rather than make.
	
	Checked in a few trivial tests in test/trivial/bradc to test
	end-to-end behavior.

Modified files:
	chapel/compiler/: driver.cpp files.cpp 
Added files:
	chapel/test/trivial/bradc/: declprintint.chk declprintint.chpl 
	                            printstring.chk printstring.chpl 

---------------------------------------------------------------------------

04/02/04 16:29:03 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed issue with assuming the suffix was ".chpl"

Modified files:
	chapel/compiler/: driver.cpp files.cpp 

---------------------------------------------------------------------------

04/05/04 10:41:27 -- bradc

Log message:
	Removed a debug printing line that I accidentally checked in.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

04/05/04 13:22:34 -- jplevyak (a.k.a. n10253)

Log message:
	Add Sym::internal field which is defined in internal.h which covers
	internal non-primitive types (currently Domain and Sequence).
	Print out the internal type in dump.html
	Handle toggle environment variables in arg.c

Modified files:
	chapel/compiler/: TODO arg.cpp ast.cpp clone.cpp driver.cpp 
	                  dump.cpp geysa.h sym.h v.g 
Added files:
	chapel/compiler/: internal.h 

---------------------------------------------------------------------------

04/05/04 13:50:38 -- jplevyak (a.k.a. n10253)

Log message:
	Add simple parsing test cases

Modified files:
	chapel/test/: sub_test 
Added files:
	chapel/test/parsing/jplevyak/: COMPOPTS NOEXEC extern.chk 
	                               extern.v for1.chk for1.v for2.chk 
	                               for2.v literal.chk literal.v 
	                               mat1.chk mat1.chpl module.chk 
	                               module.v tuples.chk tuples.v 
	                               vec.chk vec.chpl 

---------------------------------------------------------------------------

04/05/04 15:52:28 -- jplevyak (a.k.a. n10253)

Log message:
	Fix building of concrete types so that instance variables point
	to the concrete type instead of the abstract one!

Modified files:
	chapel/compiler/: clone.cpp 

---------------------------------------------------------------------------

04/09/04 15:12:01 -- bradc

Log message:
	Fixed a bug that Shannon found in which I wasn't quoting
	the -compopts and -execopts arguments, causing problems
	when they were more than a single string.  This change
	should re-enable the ability to do things like:
	
	start_test -compopts "--savec myoutputdir"

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

04/09/04 17:20:17 -- bradc

Log message:
	Fixed two simple driver problems:
	
	(1) changed the search for the input file's extension to use
	strrchr so that relative paths including .. will work properly.
	
	(2) moved code generation after the HTML dump so that if codegen
	fails requested HTML dumps won't be squelched.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

04/09/04 18:09:50 -- bradc

Log message:
	Wrote a bunch of simple programs that declare and initialize
	a 1D domain and array using a variety of notations to serve
	as initial codes.  Generated expected output by hand which
	(if I got them all right) approximates what we might expect
	from the compiler (and might need to be updated later if I
	got them wrong).
	
	Similarly, maybe some of these programs are illegal for one
	reason or another.  They reflect my current understanding
	of how one might program such things, so to the extent
	that they cause problems, we should discuss which should
	perhaps be illegal, result in compile errors, etc.

Added files:
	chapel/test/trivial/bradc/arrinit/: NOTEST README 
	                                    arrinit.notype.notype.chk 
	                                    arrinit.notype.notype.chpl 
	                                    arrinit.notypep.notype.chk 
	                                    arrinit.notypep.notype.chpl 
	                                    arrinit.notypep.notypeind.chk 
	                                    arrinit.notypep.notypeind.chpl 
	                                    arrinit.notypep.notypeind2.chk 
	                                    arrinit.notypep.notypeind2.chpl 
	                                    arrinit.notypep.typepr.chk 
	                                    arrinit.notypep.typepr.chpl 
	                                    arrinit.notypep.typeprind.chk 
	                                    arrinit.notypep.typeprind.chpl 
	                                    arrinit.notypep.typeprind2.chk 
	                                    arrinit.notypep.typeprind2.chpl 
	                                    arrinit.type.notype.chk 
	                                    arrinit.type.notype.chpl 
	                                    arrinit.typep.notype.chk 
	                                    arrinit.typep.notype.chpl 
	                                    arrinit.typep.type.chk 
	                                    arrinit.typep.type.chpl 
	                                    arrinit.typep.typeind.chk 
	                                    arrinit.typep.typeind.chpl 
	                                    arrinit.typep.typepr.chk 
	                                    arrinit.typep.typepr.chpl 

---------------------------------------------------------------------------

05/03/04 11:52:47 -- bradc

Log message:
	Took a new sweep through the simple arrinit codes to update based
	on new requirement that domains and arrays must be identified as
	such at declaration time.

Modified files:
	chapel/test/trivial/bradc/arrinit/: README 
	                                    arrinit.notype.notype.chpl 
	                                    arrinit.notypep.notype.chpl 
	                                    arrinit.notypep.notypeind.chpl 
	                                    arrinit.notypep.notypeind2.chpl 
	                                    arrinit.notypep.typepr.chpl 
	                                    arrinit.notypep.typeprind.chpl 
	                                    arrinit.notypep.typeprind2.chpl 
	                                    arrinit.type.notype.chpl 
	                                    arrinit.typep.notype.chpl 
Added files:
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.nodom.chpl 
	                                    arrinit.notype.noelem.chpl 
	                                    arrinit.notypes.notype.chpl 
	                                    arrinit.types.notype.chpl 

---------------------------------------------------------------------------

05/03/04 12:04:00 -- jplevyak (a.k.a. n10253)

Log message:
	Change the system directory option letter since it conflicts with
	the (preexisting) -D for parser debugging.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

05/03/04 12:48:58 -- bradc

Log message:
	Some small changes that have been festering in my directory
	for awhile:
	
	(1) added support for writeln() in addition to write() as
	our placeholder output routines.
	
	(2) added some support for codegen-ing parenthesized expressions.

Modified files:
	chapel/compiler/: ast.h codegen.cpp prelude.chpl
	chapel/runtime/include/: chplio.h 
	chapel/runtime/src/: chplio.c 
Added files:
	chapel/test/trivial/bradc/: declprintint2.chk declprintint2.chpl 
	                            pareninit.chk pareninit.chpl 

---------------------------------------------------------------------------

05/03/04 12:53:43 -- bradc

Log message:
	Did an abort partway through the last checkin, and so some mods
	in compiler/ weren't reflected in the log file.  The files that
	changed there were: ast.h, codegen.cpp, and prelude.chpl.
	Modified the CVSLOG file by hand to reflect this (ugh!).

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

05/03/04 13:01:43 -- bradc

Log message:
	Changed some of my flags (--nocodgen, --print-commands) from
	toggles to "set true" flags to avoid problems with double-
	toggling them via an environment variable (as that seems like
	the preferable semantics for these).

Modified files:
	chapel/compiler/: driver.cpp mysystem.cpp 

---------------------------------------------------------------------------

05/04/04 19:25:23 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed bug with trailing context (use to handle 1..n)

Modified files:
	chapel/third-party/dparser/d/: lex.c parse.c 

---------------------------------------------------------------------------

05/04/04 19:32:42 -- jplevyak (a.k.a. n10253)

Log message:
	updated tests for changes in the grammar and parser.

Modified files:
	chapel/test/parsing/jplevyak/: literal.chk literal.v mat1.chk 
	                               tuples.chk 

---------------------------------------------------------------------------

05/05/04 13:00:24 -- jplevyak (a.k.a. n10253)

Log message:
	Begin support for incremnetalization: cdb.{h,cpp} save cloning info
	between compiles
	Fixed code which maps AST -> flow analysis information
	Added support for relative system_dir paths in dump.cpp
	Added support for cloning of data structures dependant on
	the typing of other data structures (currently 1 level)
	Fixed several bugs in type inference discovered when implementing above

Modified files:
	chapel/compiler/: Makefile TODO ast.cpp clone.cpp clone.h 
	                  dump.cpp fa.cpp fa.h fa_extras.cpp fun.cpp 
	                  fun.h pnode.h sym.h v.g vec.cpp 
Added files:
	chapel/compiler/: cdb.cpp cdb.h 

---------------------------------------------------------------------------

05/05/04 16:20:56 -- jplevyak (a.k.a. n10253)

Log message:
	updated TODO list
	now I just need to do all those things :)

Modified files:
	chapel/compiler/: TODO 

---------------------------------------------------------------------------

05/07/04 11:18:23 -- bradc

Log message:
	Found that the path to the javascript stuff in the HTML dump
	was still not working for compiler invocations like:
	
	compiler/chpl -t foo.chpl
	
	so took a pass at fixing it.  I've tested the following four
	variations and they all seem to be working:
	
	/users/.../chpl -t foo.chpl
	compiler/chpl -t foo.chpl
	chpl -t foo.chpl (where chpl is in cwd)
	./chpl -t foo.chpl
	
	Hopefully I haven't broken any other cases.

Modified files:
	chapel/compiler/: dump.cpp 

---------------------------------------------------------------------------

05/07/04 17:05:01 -- bradc

Log message:
	Started working on a script that will perform nightly regressions.

Modified files:
	chapel/test/: start_test 
Added files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/07/04 17:20:43 -- bradc

Log message:
	Oops, accidentally introduced a typo in the start_test script.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/07/04 17:48:52 -- bradc

Log message:
	Added support for a valgrind run to the nightly script.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/10/04 09:10:50 -- jplevyak (a.k.a. n10253)

Log message:
	Add handling of value "clases" as per David's mail to TODO list
	Fix bug in setter path computation flow analysis

Modified files:
	chapel/compiler/: TODO fa.cpp vec.cpp 

---------------------------------------------------------------------------

05/10/04 10:59:22 -- jplevyak (a.k.a. n10253)

Log message:
	Added new log for flow analysis testing
	Added 3 new test cases for flow analysis using new log
	Increased support for .v files in test/sub_test

Modified files:
	chapel/compiler/: ast.cpp driver.cpp fa.h fa_extras.cpp log.h 
	chapel/test/: start_test 
Added files:
	chapel/test/flowanalysis/jplevyak/: CATFILES CLEANFILES COMPOPTS 
	                                    NOEXEC cs1.chk cs1.v cs2.chk 
	                                    cs2.v cs3.chk cs3.v 

---------------------------------------------------------------------------

05/10/04 16:16:40 -- jplevyak (a.k.a. n10253)

Log message:
	Extend flow analyis to N levels of complex data structures.

Modified files:
	chapel/compiler/: fa.cpp 

---------------------------------------------------------------------------

05/10/04 17:50:26 -- bradc

Log message:
	Updated nightly test script to compare each night's results
	against the previous night's, to mail the results of the
	run out (currently just to me, but once everything's
	debugged, to chapel_dev), and to append stats on the run
	to a file that can be gnuplotted.

Modified files:
	chapel/test/Bin/: nightly 

Log message:
	Updated nightly test script to compare each night's results
	against the previous night's, to mail the results of the
	run out (currently just to me, but once everything's
	debugged, to chapel_dev), and to append stats on the run
	to a file that can be gnuplotted.
	
	Also, added a few .cvsignore files to ignore files that
	are currently left due to broken tests.

Added files:
	chapel/test/flowanalysis/jplevyak/: .cvsignore 
	chapel/test/parsing/jplevyak/: .cvsignore 

---------------------------------------------------------------------------

05/11/04 13:57:56 -- bradc

Log message:
	Added generation of graph showing regression status.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/11/04 14:20:14 -- bradc

Log message:
	Added a new feature to the testing scripts -- if a subdirectory
	contains an executable PREDIFF script, that script will be run
	prior to performing the diff for each test in the directory.
	The name of the test being run and the name of the log file
	being diffed will be passed to the scripts as parameters.
	
	Added a use of this to John's flowanalysis directory which
	previously printed things out in a platform-specific order.
	The PREDIFF script in that directory sorts the log file
	prior to doing the diff (and compares against new, sorted
	.chk files) to ensure that the test's result is not influenced
	by this platform-specific order.

Modified files:
	chapel/test/: start_test sub_test 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 
Added files:
	chapel/test/flowanalysis/jplevyak/: PREDIFF 

---------------------------------------------------------------------------

05/12/04 12:19:34 -- bradc

Log message:
	Introducing a purposeful bug to see if the nightly regression
	testing works in the presence of a compiler build failure.

Modified files:
	chapel/compiler/: driver.cpp 

---------------------------------------------------------------------------

05/12/04 12:37:19 -- bradc

Log message:
	Removed purposeful bug in driver.cpp and checking in new
	nightly test script that handles build errors gracefully.

Modified files:
	chapel/compiler/: driver.cpp 
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/13/04 10:32:15 -- bradc

Log message:
	Made the testing system exit with an error if valgrind is
	not available.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

05/13/04 11:22:46 -- bradc

Log message:
	Made nightly regression runs more resilient in the face of
	failures (for example, last night valgrind was missing,
	making the reported results pretty inaccurate).  Also
	added support for a debug mode so that I wouldn't have
	to mess up the running tally of statistics every time
	the testing system failed.

Modified files:
	chapel/test/Bin/: nightly 
Added files:
	chapel/test/trivial/bradc/: .cvsignore 

---------------------------------------------------------------------------

05/14/04 10:03:21 -- bradc

Log message:
	I believe the nightly regressions are now working well
	enough that it's safe to send the results to chapel_dev
	without bothering anyone, so I turned that on by
	default.  This should result in a regressions test
	status message showing up in the middle of the night
	every night.
	
	You can see the running tally of tests run, tests passing,
	and tests passing with valgrind at:
	
	http://insidecray.mw.cray.com/~bradc/chapel.html
	
	It's not all that interesting now, but should look good
	as we continue to add tests.  John, if you're reading
	this far, I haven't yet had a chance to look into the
	one valgrind run that's currently failing to see if
	it's a real problem or something else needing suppressing.

Modified files:
	chapel/test/Bin/: nightly 

---------------------------------------------------------------------------

05/19/04 17:31:05 -- jplevyak (a.k.a. n10253)

Log message:
	Remove builtin complex (will be implemented in standard header)
	and updated tests.

Modified files:
	chapel/compiler/: ast.cpp builtin_symbols.h chpl.g chpltypes.h 
	                  prelude.chpl prelude.v sym.h vec.cpp vec.h 
	chapel/compiler/samples/: sample.chpl 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 

---------------------------------------------------------------------------

05/25/04 16:08:56 -- bradc

Log message:
	Making sure that we blow away /tmp directories on segfaults.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

05/25/04 16:23:07 -- bradc

Log message:
	Put in code so that if we try to codegen something that we
	don't understand, an internal error is thrown and we don't
	bother trying to compile the generated C code.

Modified files:
	chapel/compiler/: codegen.cpp 

---------------------------------------------------------------------------

05/25/04 17:15:07 -- bradc

Log message:
	Added initial code generation support for conditionals.  Added
	a simple test to try different conditional idioms.  Also added
	short-term support for the unary negation op.
	
	Touched up support for seg faults slightly from my previous
	version which was laid in in a rush a week or two ago.
	
	In writing my conditional code, found what appears to be a bug
	with empty strings on linux -- when strlen is taken of their
	compile-time representation, it seg faults.  I assume that this
	is due to our storage of them as opposed to a bug in strlen,
	but filed this as a placeholder.  It seemed I could get around
	it by writing my own strlen that checked against NULL and the
	empty string before sending the string in to the real strlen(),
	but this seems bogus, so I'm not checking that code in.  I
	did check the bug in though (test/trivial/bradc/printempty.chpl.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/: conditional.chk conditional.chpl 
	                            printempty.chk printempty.chpl 

---------------------------------------------------------------------------

05/26/04 11:39:10 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed two bugs which were causing problems in the front end.
	First, cannonicalize string was returning NULL in some cases.
	Second, vector expansion was not clearing the new space correctly.

Modified files:
	chapel/compiler/: map.h vec.cpp 

---------------------------------------------------------------------------

05/26/04 11:47:16 -- jplevyak (a.k.a. n10253)

Log message:
	Missing semi-colon

Modified files:
	chapel/test/trivial/bradc/: printempty.chpl 

---------------------------------------------------------------------------

05/26/04 14:17:01 -- jplevyak (a.k.a. n10253)

Log message:
	new supression in boehm GC

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

05/26/04 16:09:39 -- jplevyak (a.k.a. n10253)

Log message:
	New data structure for handling data polymorophism which is simpler and
	has better termination properites.

Modified files:
	chapel/compiler/: fa.cpp fa.h vec.cpp 

---------------------------------------------------------------------------

05/27/04 14:41:54 -- bradc

Log message:
	Changed the test system to use .good files to store the expected
	output rather than .chk files to avoid the common prefix conflict
	with the .chpl files.

Modified files:
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/Samples/ex1-astlog/: astlog1.good 
	chapel/test/Samples/ex2-notest/: illegal.good 
	chapel/test/Samples/ex3-fails/: intendedToFail.good 
	chapel/test/compflags/bradc/badflagdash/: declint.good 
	chapel/test/compflags/bradc/badflagddash/: declint.good 
	chapel/test/compflags/bradc/copyright/: declint.good 
	chapel/test/compflags/bradc/missingargdash/: declint.good 
	chapel/test/compflags/bradc/missingargddash/: declint.good 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	chapel/test/parsing/jplevyak/: extern.good for1.good for2.good 
	                               literal.good mat1.good 
	                               module.good tuples.good vec.good 
	chapel/test/trivial/bradc/: conditional.good declprintint.good 
	                            declprintint2.good pareninit.good 
	                            printempty.good printstring.good 
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.notype.good 
	                                    arrinit.notypep.notype.good 
	                                    arrinit.notypep.notypeind.good 
	                                    arrinit.notypep.notypeind2.good 
	                                    arrinit.notypep.typepr.good 
	                                    arrinit.notypep.typeprind.good 
	                                    arrinit.notypep.typeprind2.good 
	                                    arrinit.type.notype.good 
	                                    arrinit.typep.notype.good 
	                                    arrinit.typep.type.good 
	                                    arrinit.typep.typeind.good 
	                                    arrinit.typep.typepr.good 
Removed files:
	chapel/test/Samples/ex1-astlog/: astlog1.chk 
	chapel/test/Samples/ex2-notest/: illegal.chk 
	chapel/test/Samples/ex3-fails/: intendedToFail.chk 
	chapel/test/compflags/bradc/badflagdash/: declint.chk 
	chapel/test/compflags/bradc/badflagddash/: declint.chk 
	chapel/test/compflags/bradc/copyright/: declint.chk 
	chapel/test/compflags/bradc/missingargdash/: declint.chk 
	chapel/test/compflags/bradc/missingargddash/: declint.chk 
	chapel/test/flowanalysis/jplevyak/: cs1.chk cs2.chk cs3.chk 
	chapel/test/parsing/jplevyak/: extern.chk for1.chk for2.chk 
	                               literal.chk mat1.chk module.chk 
	                               tuples.chk vec.chk 
	chapel/test/trivial/bradc/: conditional.chk declprintint.chk 
	                            declprintint2.chk pareninit.chk 
	                            printempty.chk printstring.chk 
	chapel/test/trivial/bradc/arrinit/: arrinit.notype.notype.chk 
	                                    arrinit.notypep.notype.chk 
	                                    arrinit.notypep.notypeind.chk 
	                                    arrinit.notypep.notypeind2.chk 
	                                    arrinit.notypep.typepr.chk 
	                                    arrinit.notypep.typeprind.chk 
	                                    arrinit.notypep.typeprind2.chk 
	                                    arrinit.type.notype.chk 
	                                    arrinit.typep.notype.chk 
	                                    arrinit.typep.type.chk 
	                                    arrinit.typep.typeind.chk 
	                                    arrinit.typep.typepr.chk 

---------------------------------------------------------------------------

05/27/04 16:04:20 -- jplevyak (a.k.a. n10253)

Log message:
	fix bug with handling of references
	minor cleanups

Modified files:
	chapel/compiler/: TODO fa.cpp 

---------------------------------------------------------------------------

06/01/04 13:03:36 -- jplevyak (a.k.a. n10253)

Log message:
	most of test/trivial/bradc/arrinit now "compile"

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h chpl.g 

---------------------------------------------------------------------------

06/01/04 14:33:58 -- jplevyak (a.k.a. n10253)

Log message:
	fixup tests to match new grammar for parsing trivial/bradc

Modified files:
	chapel/compiler/: chpl.g 
	chapel/test/parsing/jplevyak/: mat1.good 

---------------------------------------------------------------------------

06/01/04 16:50:47 -- bradc

Log message:
	Fixed a bug in the testing system in which -startdir was only
	causing subdirectories of the named directory to be examined,
	not the directory itself.  This particularly caused problems
	when a leaf directory was specified, which would cause no
	tests to be run since it had no subdirectories.

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/01/04 17:20:28 -- jplevyak (a.k.a. n10253)

Log message:
	All of trivial/bradc/arrinit now parse.
	There are typing issues which I am going to work on next.

Modified files:
	chapel/compiler/: chpl.g prelude.chpl 
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/02/04 11:26:41 -- jplevyak (a.k.a. n10253)

Log message:
	Added support for value types.
	Modified format of internal errors to work with gdb's compile mode

Modified files:
	chapel/compiler/: TODO ast.cpp ast.h builtin_symbols.h chpl.g 
	                  codegen.cpp misc.cpp prelude.chpl prelude.v 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 

---------------------------------------------------------------------------

06/02/04 13:20:01 -- bradc

Log message:
	Improved dependences for *.g.d_parser.o files.  These are
	dependent on geysa.h and all the things that it includes,
	but this dependence wasn't reflected in the Makefiles due
	to the challenges in listing the dependences of a dynamically-
	generated source file.
	
	The approach I took was to run g++ -MM on geysa.h, fudging
	the output format so that it defines a Makefile variable
	giving all the include files it includes rather than
	generating a standard dependence rule (which would have
	had no effect since geysa.h would be considered up-to-date
	since there's no rule to rebuild it).  Then, by giving
	this variable name in the rule to build *.g.d_parser.o,
	it will be recompiled whenever the any of the component
	header files change.  This should take care of most of
	the recent cases where a "make clean" was required.  If
	you come across more (and can reproduce them), please
	let me know.

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.foot 

---------------------------------------------------------------------------

06/02/04 13:24:46 -- bradc

Log message:
	Changed the sub_test script to remove the ihgfedcba from
	the generated output files.  This was originally designed
	by the ZPL implementor to avoid name conflicts, but my
	suspicion is that those name conflicts aren't a real problem
	and that the simpler filenames are less confusing.  The
	result is that the output filenames are one of:
	
	testname.comp.out.tmp
	testname.exec.out.tmp
	
	depending on whether the test was compiled only, or was
	compiled and executed.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/02/04 16:09:23 -- bradc

Log message:
	Found a bug in my previous check-in -- in trying to minimize
	redundancy I put in an assumption that the user would have
	necessarily run "make depend".  Took this out by re-adding in
	the explicit dependence that causes make_prims to be run before
	compiling the output of the v or chpl grammar files.

Modified files:
	chapel/compiler/: Makefile 

---------------------------------------------------------------------------

06/02/04 16:25:06 -- bradc

Log message:
	Found that I never could get used to the date format
	that was used by the ZPL folks in their CVS system,
	so switched to a more standard format.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

06/03/04 09:39:35 -- bradc

Log message:
	Reordered some actions in sub_test -- previously, if we
	successfully built a binary but the .good file didn't
	exist, we wouldn't bother running the binary.  I switched
	the order around so that we'd run the binary (putting
	its output in the *.exec.out.tmp file) then complain
	about the missing .good file just before executing the
	diff.  This allows us to inspect the output that was
	generated to consider copying it into the .good file.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/03/04 12:03:29 -- bradc

Log message:
	Added support for writing multiple expressions in a
	call to write()/writeln().  For example:
	
	write("The current value of n is: ", n,
	"  the old value was: ", oldn);

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/arrinit/: .cvsignore 
	chapel/test/trivial/bradc/write/: .cvsignore writen.chpl 
	                                  writen.good writetwo.chpl 
	                                  writetwo.good 

---------------------------------------------------------------------------

06/03/04 15:07:18 -- shannon

Log message:
        Implemented code generation of binary operators
        and implemented tests.  Used a table mapping of
        AST representations of the operators to their
        corresponding representation in C.  Initial
        mechanisms for the handling of operators not
        implemented in C are present but not currently
        in use.

Modified files:
        chapel/compiler/: codegen.cpp 
Added files:
        chapel/test/trivial/shannon/: .cvsignore arithmetic_ops.chpl 
                                      arithmetic_ops.good 
                                      bitwise_ops.chpl bitwise_ops.good 
                                      equality_ops.chpl 
                                      equality_ops.good 
                                      relational_ops.chpl 
                                      relational_ops.good 
---------------------------------------------------------------------------

06/03/04 15:31:54 -- shannon

Log message:
	Didn't have RCS in path so edited CVSLOG by hand to reflect changes.

Modified files:
	./: CVSLOG 

---------------------------------------------------------------------------

06/04/04 12:44:43 -- jplevyak (a.k.a. n10253)

Log message:
	trivial/bradc/arrinit now produces (reasonably) correct types
	for domains and arrays.  There are some limitations, in particular
	domains initialized from sequences are not converted into domains.
	This will be corrected when the new function lookup code is implemented.
	
	Note: there are several new AST nodes.  These include
	AST_array_descriptor, AST_domain and AST_cross_product.
	
	Again, the implementation of these codes is incomplete pending the
	new function lookup code.  It is sufficient for the test cases
	but likely little else.  If you want a particular test case to work
	in the near term, tell me and I'll see if I can finess it.

Modified files:
	chapel/compiler/: ast.cpp ast_kinds.h builtin_symbols.h chpl.g 
	                  fa.cpp prelude.chpl prelude.v sym.h 
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 
	chapel/test/parsing/jplevyak/: mat1.good 

---------------------------------------------------------------------------

06/04/04 12:47:47 -- bradc

Log message:
	Added support for easily running the chpl compiler
	within gdb via a --gdb flag.  This is designed for
	cases when you are working with a long set of compile
	line flags and suddenly want to run it within gdb:
	
	lotus% chpl --savec output --print-commands ../test/foo.chpl
	fail: seg fault
	
	Typically, to debug this, you'd have to run "gdb chpl"
	and then within gdb cut and paste your whole command-line
	into the run command:
	
	(gdb) run --savec output --print-commands ../test/foo.chpl
	
	With this change, you can now run your original
	command line again, adding --gdb to it somewhere:
	
	lotus% chpl --savec output --print-commands ../test/foo.chpl --gdb
	
	This will cause the chpl compiler to launch a gdb
	session with the arguments automatically set up to
	be those you included on the command line (except
	for any occurrences of the --gdb flag, of course).
	Thus, upon running the compiler, you'll be whisked
	into gdb, and upon getting a gdb prompt, you can
	simply type run:
	
	(gdb) run
	
	You can use the "show args" command to verify what
	the arguments being used are.  Obviously, you can
	override the arguments by hand simply by specifying
	them with the "run" command or using the "set args"
	command.
	
	The other benefit of debugging the compiler in this
	mode is that it will set up hooks for the "run" and
	"quit" commands such that any /tmp directories that
	the compiler creates during the debugging session
	will be deleted when the program is re-run or you
	quit out of gdb.
	
	All this work was developed under gdb v5.3.  If you
	have a different version and have conflicts with
	what's been done here, let me know and we can look
	into supporting your version.
	
	In making this change, some other changes occurred
	as well:
	
	* Changed all instances of exit() to clean_exit(),
	which cleans up the compiler state before exiting.
	exit() should not be used anywhere in the program
	(but I haven't yet gone so far as to #define it
	out in a header file yet).
	
	* Made our current argument parsing routines make
	copies of the arguments that they are working
	with because they are fairly destructive with
	them (and we want to pass them on to gdb in their
	original form).
	
	* Previously, catching of SEGV and INT signals
	was only done during codegen.  I switched this
	to cover the whole program because it seems
	right and because Chapel's temp directory may
	now get created earlier, due to the --gdb flag.
	
	* Added a test to see that the --gdb command
	causes gdb to be fired up.  In doing so, added
	a new capability to the testing system: a
	COMPSTDIN file can be added to a test directory
	to specify an input file to be piped in as stdin
	during the compile invocation.  As need warrants
	it, I can add a similar feature, EXECSTDIN, for
	the invocation of the executable.

Modified files:
	chapel/compiler/: arg.cpp arg.h codegen.cpp driver.cpp files.cpp 
	                  files.h misc.cpp misc.h 
	chapel/test/: start_test sub_test 
Added files:
	chapel/test/compflags/bradc/gdbddash/: .cvsignore COMPOPTS 
	                                       COMPSTDIN NOEXEC 
	                                       declint.chpl declint.good 
	                                       gdb.in 

---------------------------------------------------------------------------

06/04/04 13:17:49 -- jplevyak (a.k.a. n10253)

Log message:
	Fixes for ~shannon/CHAPEL/chapel/test/trivial/shannon/assignment_expr.chpl

Modified files:
	chapel/compiler/: prelude.chpl 

---------------------------------------------------------------------------

06/04/04 13:29:34 -- jplevyak (a.k.a. n10253)

Log message:
	exponentiation now supported.
	note: constant folding is not yet done for exponentiation... should it be?

Modified files:
	chapel/compiler/: TODO chpl.g codegen.cpp prelude.chpl 
	                  prim_data.dat 

---------------------------------------------------------------------------

06/04/04 13:36:25 -- jplevyak (a.k.a. n10253)

Log message:
	fix mod, left and right shift

Modified files:
	chapel/compiler/: prelude.chpl prim_data.dat 

---------------------------------------------------------------------------

06/04/04 13:45:17 -- jplevyak (a.k.a. n10253)

Log message:
	Fixed up &&.

Modified files:
	chapel/compiler/: chpl.g 

---------------------------------------------------------------------------

06/04/04 16:44:28 -- bradc

Log message:
	Got some extremely initial support for code generating
	domains in.  It's fairly crufty and is hardwired to 1D
	domains in  several places, but it makes some simple
	1D domain declarations work correctly, and seems like
	a reasonable stopping place to synch into before the
	weekend.
	
	This change also involved some minor side changes:
	
	* Turned on debugging and a bunch of warning flags for
	the compilation of the runtime and compiler-generated
	sources -- eventually, we'll want a more interesting
	mechanism for turning these on and off (like a -g
	flag in the compiler at minimum), but it's a start.
	
	* Made the gcc commands issued by the compiler via its
	generated Makefile show up on the console when the
	--show-commands flag is used.

Modified files:
	chapel/compiler/: Makefile codegen.cpp files.cpp 
	chapel/runtime/: Makefile 
	chapel/runtime/etc/: Makefile.include 
	chapel/runtime/include/: chplio.h stdchpl.h 
	chapel/runtime/src/: Makefile chplio.c 
Added files:
	chapel/compiler/: datatype.cpp datatype.h 
	chapel/runtime/etc/: Makefile.macros 
	chapel/runtime/include/: domain.h 
	chapel/runtime/src/: domain.c 
	chapel/test/trivial/bradc/: declprintdom.chpl declprintdom.good 

---------------------------------------------------------------------------

06/04/04 17:11:52 -- jplevyak (a.k.a. n10253)

Log message:
	forgot to checkin the parsing .good files corresponding to the parser
	changes... oops.

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/07/04 12:44:53 -- bradc

Log message:
	Made codegen handle dead variables cleanly.  Added a test
	to make sure this works.

Modified files:
	chapel/compiler/: codegen.cpp 
	chapel/test/trivial/bradc/: .cvsignore 
Added files:
	chapel/test/trivial/bradc/: deadvar.chpl deadvar.good 

---------------------------------------------------------------------------

06/07/04 17:55:41 -- bradc

Log message:
	Added initial support for code generation of functions and
	inserted a few tests to pin down this behavior.
	
	In order to make this work, I had to generate function
	prototypes at the top of the code because (a) we
	currently generate functions in a nondeterministic
	order such that functions won't necessarily be defined
	in the generated code before their calls, even if the
	user's code has the definition before the use, and
	(b) the current language concept allows functions to be
	called before they're used, so even if code generation
	followed the user's code directly, a prototype could
	still be required.
	
	I made code generation create two new header files to
	support these prototypes -- one that gives the external
	interface for the .c file (foo.h) and a second that
	contains internal prototypes for the .c file -- ones
	that are only meant to be included by the .c file itself,
	and not external clients (foo-internal.h).
	
	A few other minor changes that are going in with this:
	
	* I'd been using my glomstrings() in a degenerate way to
	copy strings -- glomstrings(1, stringToCopy) -- I
	wrapped this in an explicit copystring() function to
	make the code more readable.
	
	* Updated the compiler/FILES file to mention the new
	datatype.c file that I added yesterday.

Modified files:
	chapel/compiler/: FILES arg.cpp codegen.cpp driver.cpp files.cpp 
	                  files.h prelude.chpl stringutil.cpp 
	                  stringutil.h 
Added files:
	chapel/test/trivial/bradc/functions/: .cvsignore onearg.chpl 
	                                      onearg.good 
	                                      usebeforedef.chpl 
	                                      usebeforedef.good 

---------------------------------------------------------------------------

06/08/04 10:11:31 -- bradc

Log message:
	Added a new Share/ directory to the test system which will not
	be run by default when start_test is run.  The intention of
	this directory is to share tests with each other via CVS so
	that we don't have to deal with cutting and pasting example
	programs into and out of email, and so that John won't have
	to log into a Cray machine to see files in our personal
	directories.
	
	Currently, I haven't put any structure in place under the
	Share directory -- if the idea proves to be useful and
	popular and full of more tests than we can keep track of,
	then we might imagine a structure in which subdirectories
	were used to indicate the author of the test and/or the
	person that the test is being published for.
	
	I'm checking a few codes into the Share/ directory for now
	that I'll email John about in a bit.

Modified files:
	chapel/test/: start_test 
Added files:
	chapel/test/Share/: chain.chpl mutrec.chpl noargs.chpl 

---------------------------------------------------------------------------

06/08/04 11:11:56 -- jplevyak (a.k.a. n10253)

Log message:
	noarg.chpl now gets through parser and type checking... though not codegen

Modified files:
	chapel/compiler/: TODO chpl.g 

---------------------------------------------------------------------------

06/08/04 11:20:15 -- bradc

Log message:
	Implemented variables at the file scope of the chapel input
	file as global variables in the generated C code rather
	than local variables to the _init() procedure, as had been
	done previously.  These should be made static by default,
	but this checkin doesn't address that issue.  Added a test
	to lock in this behavior.
	
	Broke code related to code generating functions into a file
	called cg_funs.cpp.  As Shannon and I move forward with
	code generation, we should continue to make cg_*.cpp/h files
	to avoid making codegen too monolithic and having to wrestle
	with bad CVS merges very often.

Modified files:
	chapel/compiler/: FILES Makefile codegen.cpp codegen.h 
Added files:
	chapel/compiler/: cg_funs.cpp cg_funs.h 
	chapel/test/Share/: .cvsignore 
	chapel/test/trivial/bradc/functions/: globalref.chpl 
	                                      globalref.good 

---------------------------------------------------------------------------

06/08/04 11:30:30 -- shannon

Log message:
	Implemented further testing of binary operator
	code generation with the addition of four tests.
	These files test the assignment operators such
	as "+=", as well as the "&&", "<<", and ">>"
	operators.
	
	Also cleaned up my prior tests using the new
	functionality of write() and writeln().
	Added further testing of boundary conditions.

Modified files:
	chapel/test/trivial/shannon/: arithmetic_ops.chpl 
	                              bitwise_ops.chpl bitwise_ops.good 
	                              equality_ops.chpl 
	                              equality_ops.good 
	                              relational_ops.chpl 
	                              relational_ops.good 
Added files:
	chapel/test/trivial/shannon/: assignment_expr.chpl 
	                              assignment_expr.good 
	                              bitwise_assignment.chpl 
	                              bitwise_assignment.good 
	                              logical_and.chpl logical_and.good 
	                              shift_ops.chpl shift_ops.good 

---------------------------------------------------------------------------

06/08/04 11:45:45 -- jplevyak (a.k.a. n10253)

Log message:
	Fix test/Share/mutrec.chpl

Modified files:
	chapel/compiler/: fun.cpp 

---------------------------------------------------------------------------

06/08/04 13:17:45 -- bradc

Log message:
	Got code generation for zero-argument functions working.
	Added a test to check this behavior and removed the
	sample from the Share/ directory.  Also changed instances
	of writeln("") and write("\n") to writeln() in tests
	that used these other idioms (and weren't testing
	that they worked).

Modified files:
	chapel/compiler/: cg_funs.cpp codegen.cpp datatype.cpp 
	                  datatype.h 
	chapel/test/trivial/bradc/: conditional.chpl 
	chapel/test/trivial/bradc/functions/: globalref.chpl 
	chapel/test/trivial/shannon/: arithmetic_ops.chpl 
	                              bitwise_assignment.chpl 
	                              bitwise_ops.chpl equality_ops.chpl 
	                              relational_ops.chpl shift_ops.chpl 
Added files:
	chapel/test/trivial/bradc/functions/: noargs.good 
Removed files:
	chapel/test/Share/: noargs.chpl 

---------------------------------------------------------------------------

06/08/04 15:11:17 -- jplevyak (a.k.a. n10253)

Log message:
	update counts

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/08/04 15:12:37 -- jplevyak (a.k.a. n10253)

Log message:
	FreeBSD fix

Modified files:
	chapel/compiler/: fa.h 

---------------------------------------------------------------------------

06/08/04 15:15:16 -- jplevyak (a.k.a. n10253)

Log message:
	Changes to support GCC 3.4

Modified files:
	chapel/compiler/: list.h log.h map.h ssu.cpp ssu.h 

---------------------------------------------------------------------------

06/08/04 15:27:18 -- bradc

Log message:
	Somehow this file slipped out of my last checkin.

Added files:
	chapel/test/trivial/bradc/functions/: noargs.chpl 

---------------------------------------------------------------------------

06/08/04 15:39:36 -- jplevyak (a.k.a. n10253)

Log message:
	Turn off cloning for constants as requirested by brad.
	We can figure out an interface for specifying this later.

Modified files:
	chapel/compiler/: fa.cpp fa.h 

---------------------------------------------------------------------------

06/08/04 15:49:39 -- bradc

Log message:
	Ripped ZPL's beautify.c code out, which performs indentation
	on generated C code.  Reworked this to work within the Chapel
	framework better and applied it to our generated code to ease
	with debugging code generation.
	
	Also reworked some of the file interfaces a bit, though they
	could still use some more work.

Modified files:
	chapel/compiler/: Makefile codegen.cpp files.cpp files.h 
Added files:
	chapel/compiler/: beautify.cpp beautify.h 

---------------------------------------------------------------------------

06/08/04 16:28:27 -- bradc

Log message:
	Added tests to look at functions calling other functions
	and removed these from the Share/ directory thanks to
	John's disabling of cloning based on values.

Added files:
	chapel/test/trivial/bradc/functions/: chain.chpl chain.good 
	                                      mutrec.chpl mutrec.good 
Removed files:
	chapel/test/Share/: chain.chpl mutrec.chpl 

---------------------------------------------------------------------------

06/08/04 16:46:46 -- bradc

Log message:
	Beefed up domain support ever-so-slightly to handle cases
	with constraint nodes attached (basically by skipping
	over the constraint node and looking at the initializer
	for now).

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/bradc/: declprintdom2.chpl 
	                            declprintdom2.good 

---------------------------------------------------------------------------

06/08/04 17:34:22 -- jplevyak (a.k.a. n10253)

Log message:
	updated for non-cloning of constants

Modified files:
	chapel/test/flowanalysis/jplevyak/: cs1.good cs2.good cs3.good 

---------------------------------------------------------------------------

06/09/04 11:09:14 -- jplevyak (a.k.a. n10253)

Log message:
	fix segv when handling globals

Modified files:
	chapel/compiler/: ast.cpp 

---------------------------------------------------------------------------

06/10/04 12:30:51 -- jplevyak (a.k.a. n10253)

Log message:
	Update dparser to 1.10 to sync up with public release.
	dparser ported to x86_64
	Update Makefiles/depend to work with gcc 3.4

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
	chapel/make/: Makefile.gnu 
	chapel/third-party/dparser/d/: CHANGES Makefile d.h 
	                               dparse_tables.h grammar.g.c 
	                               index.html make_dparser.c parse.c 
	                               sample.g scan.c symtab.c util.c 
	                               util.h 
	chapel/third-party/dparser/d/python/: Makefile README dparser.i 
	                                      dparser.py dparser_wrap.c 
	                                      index.html 
	                                      py_dparser_manual.html 
	                                      pydparser.c pydparser.h 
	                                      setup.py 
	chapel/third-party/dparser/d/tests/: sample.test.g 
Added files:
	chapel/third-party/dparser/d/: write_tables.c write_tables.h 
	chapel/third-party/dparser/d/python/: make_tables.c 
	chapel/third-party/dparser/d/python/contrib/: 
	                                              dparserpy-syntax_error.py 
	                                              dparserpy.el 
	chapel/third-party/dparser/d/python/tests/: test.py test2.py 
	                                            test3.py test4.py 
	                                            test5.py test6.py 
	                                            test7.py test8.py 
Removed files:
	chapel/third-party/dparser/d/: write_ctables.c write_ctables.h 
	chapel/third-party/dparser/d/python/: dparser_swig.py test.py 
	                                      test2.py test3.py test4.py 
	                                      test5.py test6.py test7.py 

---------------------------------------------------------------------------

06/10/04 12:38:32 -- jplevyak (a.k.a. n10253)

Log message:
	only add the -Wno-invalid-offsetof for gcc 3.4

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

06/10/04 12:47:33 -- jplevyak (a.k.a. n10253)

Log message:
	forgot the add read_binary.{c,h}

Added files:
	chapel/third-party/dparser/d/: read_binary.c read_binary.h 

---------------------------------------------------------------------------

06/10/04 14:21:05 -- bradc

Log message:
	Fixed up depend rules to work with g++ 3.4 -- used a new trick
	to get geysa.h's dependences by adding an unused .cpp file that
	#includes geysa.h.  For future reference, this is because (a)
	g++ 3.3 (and previous) didn't allow the -M commands to be applied
	to .h files, (b) because g++ 3.4 created a warning due to the
	-Wno-invalid-offsetof flag, and (c) it uses a more similar CCDEP
	command as the rest of our source files (which will make it easier
	to refactor this when the day finally comes that I get around to it).

Modified files:
	chapel/compiler/: Makefile 
	chapel/compiler/make/: Makefile.compiler.subdirrules 
Added files:
	chapel/compiler/: geysa.cpp 

---------------------------------------------------------------------------

06/10/04 16:13:55 -- jplevyak (a.k.a. n10253)

Log message:
	new supressions for gcc 3.4?

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

06/10/04 16:28:18 -- jplevyak (a.k.a. n10253)

Log message:
	one last supression to get a clean run through the tests

Modified files:
	chapel/compiler/: valgrind.suppressions 

---------------------------------------------------------------------------

06/10/04 16:29:09 -- jplevyak (a.k.a. n10253)

Log message:
	added CHPL_VALGRIND_OPTIONS to permit valgrind-2.1.1 to work which
	requires an extra argument.  Someday will have to generalize this.

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/10/04 17:19:47 -- bradc

Log message:
	Fixed undefined CHPL_VALGRIND_OPTIONS error when the env. var
	wasn't set (John, you may want to make sure this still works
	for you).

Modified files:
	chapel/test/: sub_test 

---------------------------------------------------------------------------

06/10/04 17:51:53 -- bradc

Log message:
	Making start_test unsetenv CHPL_SYSTEM_DIR to ensure that
	the nightly tests don't run using my development environment.
	If this works, we may want to do the same for other env. vars
	in the testing system (since they can always be set using the
	-compargs flag for testing purposes).

Modified files:
	chapel/test/: start_test 

---------------------------------------------------------------------------

06/10/04 17:54:33 -- bradc

Log message:
	Added the -Werror flag when using g++ 3.4 to guard against
	future warnings.

Modified files:
	chapel/make/: Makefile.gnu 

---------------------------------------------------------------------------

06/11/04 13:56:41 -- shannon

Log message:
	Implemented further testing of binary operator
	code generation with the addition of two tests.
	These files test the mod and logical not
	operators.

Added files:
	chapel/test/trivial/shannon/: logical_not.chpl logical_not.good 
	                              mod.chpl mod.good 

---------------------------------------------------------------------------

06/11/04 17:10:37 -- shannon

Log message:
	Implemented code generation of the unary
	operators.  Added a test for bitwise negation.
	
	Added conditions to the findUnOp and findBinOp
	functions so that they can't dereference a
	null pointer.
	
	Fixed a bug in my generation of the mod function
	resulting from fprintf not printing my "%"
	symbol since it is a special character.
	
	Inserted a couple of blank lines because I
	accidentally committed a minute ago without
	including this message.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/shannon/: bitwise_negation.chpl 
	                              bitwise_negation.good 

---------------------------------------------------------------------------

06/12/04 11:41:36 -- jplevyak (a.k.a. n10253)

Log message:
	Cleaned up x86_64 issues.  Working and warning free.

Modified files:
	chapel/compiler/: fa.h fa_extras.cpp geysa.h graph.cpp list.h 
	                  map.h ssu_extra.cpp vec.cpp vec.h 
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

06/14/04 11:02:38 -- shannon

Log message:
	Add two failing tests to the Share directory.

Added files:
	chapel/test/Share/: increment.chpl unary_plusMinus.chpl 

---------------------------------------------------------------------------

06/14/04 12:47:25 -- jplevyak (a.k.a. n10253)

Log message:
	Fix up trivial/shannon/{increment.chpl,unary_plusMinus.chpl}.

Modified files:
	chapel/compiler/: ast.cpp chpl.g 

---------------------------------------------------------------------------

06/14/04 13:16:17 -- jplevyak (a.k.a. n10253)

Log message:
	update stupid counts again.

Modified files:
	chapel/test/parsing/jplevyak/: mat1.good vec.good 

---------------------------------------------------------------------------

06/14/04 14:23:17 -- jplevyak (a.k.a. n10253)

Log message:
	minor FreeBSD compatibility issues

Modified files:
	chapel/compiler/: list.h 
	chapel/compiler/make_prims/: make_prims.g 

---------------------------------------------------------------------------

06/15/04 09:54:32 -- bradc

Log message:
	This is a bunch of prototype code that I've been working on
	to look at alternate AST structures.  It isn't anywhere near
	prime-time, but I feel naked not having it checked into CVS,
	so am dropping it in for the revision control features.

Added files:
	chapel/compiler/AST/: Makefile chapel.lex chapel.y expr.cpp 
	                      expr.h lexyacc.h link.cpp link.h main.cpp 
	                      stmt.cpp stmt.h stringutil.cpp 
	                      stringutil.h symbol.cpp symbol.h type.cpp 
	                      type.h yy.c yy.h 

---------------------------------------------------------------------------

06/15/04 11:16:32 -- bradc

Log message:
	Prototype AST checkpoint.

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp expr.h 
	                      main.cpp yy.h 

---------------------------------------------------------------------------

06/15/04 12:54:59 -- bradc

Log message:
	AST Prototype checkpoint.

Modified files:
	chapel/compiler/AST/: Makefile chapel.lex chapel.y expr.cpp 
	                      expr.h lexyacc.h stmt.cpp stmt.h type.cpp 
	                      type.h 
Added files:
	chapel/compiler/AST/: .cvsignore symtab.cpp symtab.h 

---------------------------------------------------------------------------

06/15/04 13:33:52 -- shannon

Log message:
	Added a condition to the top of the AST_op case to
	check for NULL ast pointers.
	
	Added two tests of the +, -, ++, and -- unary
	operators to the test/trivial/shannon directory,
	and removed them from the test/Share directory.

Modified files:
	chapel/compiler/: codegen.cpp 
Added files:
	chapel/test/trivial/shannon/: increment.chpl increment.good 
	                              unary_plusMinus.chpl 
	                              unary_plusMinus.good 
Removed files:
	chapel/test/Share/: increment.chpl unary_plusMinus.chpl 

---------------------------------------------------------------------------

06/15/04 14:01:00 -- bradc

Log message:
	prototype AST checkpoint (mg-seq parses).

Modified files:
	chapel/compiler/AST/: chapel.lex chapel.y expr.cpp expr.h 
	                      symbol.cpp symbol.h type.h 

