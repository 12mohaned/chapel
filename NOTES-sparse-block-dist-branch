History
-------

This branch is the start of a Block-distributed sparse array in which
each locale's contribution is stored using a local sparse
domain/array.  I (Brad) originally developed it in the fall of 2012 in
an effort to get a distributed version of the NAS CG parallel
benchmark up and running, ran into a roadblock, got distracted by
higher priority items, and it fell by the wayside as a result.  I
resurrected it onto GitHub in June 2015 at the request of a student
who was interested in pursuing this direction further.  He made some
additional improvements to the code, but unfortunately did not sign a
CLA nor put together a PR with proposed changes so those are currently
in limbo (I have a request out to see if they can be contributed back,
but haven't heard back yet).

Example uses: A few very simple examples that exercise the current
code can be found in:

  test/distributions/bradc/spsBlk/

See the README in that directory and comments in the sources for more
information.


Status
------

Since this code is reasonably prototypical, there are almost certain
to be issues -- please report them to me (Brad) or the team.  Here are
some known cases:

* The current per-locale data structure uses COO rather than CSR to
  store each locale's local chunk.  This was done in order to support
  block-distributed sparse arrays of arbitrary rank.  It would
  probably not be too much more difficult to use CSR on each node and
  constrain it to be used for 2D arrays only if that was of interest.

* I'm fairly certain that I didn't wire up all of the operations that
  sparse domains/arrays support in writing this domain map.
  Basically, if you find you can do something with a
  non-Block-distributed sparse domain that you can't do with this
  Block-distributed sparse domain, please let me know (I will hope to
  do more testing myself as well.  Let me know if you find missing
  cases before I do).  Adding most additional ones should not be
  difficult -- typically it's a matter of finding the owner locale(s)
  and forwarding the operation to them.

* Whole-domain I/O on multidimensional block-sparse domains/arrays
  doesn't do anything useful yet.  For now I've been doing I/O by
  either iterating over things explicitly or assigning them to dense
  things and doing the I/O there.

* There are almost certainly performance issues, at least some of
  which are probably low-hanging fruit (as with all of our current
  sparse domain/array code).  Please let us know what you find.


What blocked me last time
-------------------------

As best I can recall, I'm pretty sure that the thing I hit while
working on this was that there wasn't a way to override the default
sparse distribution requested by the base/parent domain.  That is, I
believe this patch permits you to make declarations of the form:

        var DS: sparse subdomain(D);

(where 'D' gets to determine the domain map of 'DS'), yet does not
work if you try and assert a choice yourself, e.g.:

        var DS: sparse subdomain(D) dmapped <MySpecificDomainMap>;

Put another way, I think my changes break the current single-locale
CSR layout tests which contain declarations of this form.
