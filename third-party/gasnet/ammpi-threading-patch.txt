--- a/gasnet-src/other/ammpi/ammpi_spmd.c
+++ b/gasnet-src/other/ammpi/ammpi_spmd.c
@@ -142,39 +142,68 @@ extern int AMMPI_SPMDMyProc(void) {
   return AMMPI_SPMDMYPROC;
 }
 /* ------------------------------------------------------------------------------------ */
+static int threadstr2int(const char *str) {
+  char tmp[80];
+  char *p;
+  strncpy(tmp, str, sizeof(tmp));
+  for (p = tmp; *p; p++) if (*p >= 'a' && *p <= 'z') *p -= 'a'-'A'; /* upper-case */
+  #ifdef MPI_THREAD_SINGLE
+    if (strstr(tmp,"SINGLE")) return MPI_THREAD_SINGLE;
+  #endif
+  #ifdef MPI_THREAD_FUNNELED
+    if (strstr(tmp,"FUNNELED")) return MPI_THREAD_FUNNELED;
+  #endif
+  #ifdef MPI_THREAD_SERIALIZED
+    if (strstr(tmp,"SERIALIZED")) return MPI_THREAD_SERIALIZED;
+  #endif
+  #ifdef MPI_THREAD_MULTIPLE
+    if (strstr(tmp,"MULTIPLE")) return MPI_THREAD_MULTIPLE;
+  #endif
+  return -1;
+}
+static const char *threadint2str(int id) {
+  switch (id) {
+    #ifdef MPI_THREAD_SINGLE
+      case MPI_THREAD_SINGLE:     return "MPI_THREAD_SINGLE";
+    #endif
+    #ifdef MPI_THREAD_FUNNELED
+      case MPI_THREAD_FUNNELED:   return "MPI_THREAD_FUNNELED";
+    #endif
+    #ifdef MPI_THREAD_SERIALIZED
+      case MPI_THREAD_SERIALIZED: return "MPI_THREAD_SERIALIZED";
+    #endif
+    #ifdef MPI_THREAD_MULTIPLE
+      case MPI_THREAD_MULTIPLE:   return "MPI_THREAD_MULTIPLE";
+    #endif
+      default: return "UNKNOWN VALUE";
+  }
+}
+#ifndef HAVE_MPI_INIT_THREAD
+#define HAVE_MPI_INIT_THREAD (MPI_VERSION >= 2 || (defined(MPI_THREAD_SINGLE) && defined(MPI_THREAD_SERIALIZED)))
+#endif
 extern int AMMPI_SPMDSetThreadMode(int usingthreads, const char **provided_level, int *argc, char ***argv) {
   int initialized = 0;
   if (AMMPI_SPMDStartupCalled) AMMPI_RETURN_ERR(RESOURCE);
-  MPI_SAFE(MPI_Initialized(&initialized));
-  if (initialized) { 
-    *provided_level = "MPI already initialized";
-    return 1; /* MPI already initialized */
-  }
-  #if MPI_VERSION >= 2 || (defined(MPI_THREAD_SINGLE) && defined(MPI_THREAD_SERIALIZED))
-    { /* init MPI and tell it to be thread-safe */
-      int required = (usingthreads ? MPI_THREAD_SERIALIZED : MPI_THREAD_SINGLE);
+  #if !HAVE_MPI_INIT_THREAD
+    *provided_level = "MPI-1 compatibility mode";
+    return 1;
+  #else
+    { int required = (usingthreads ? MPI_THREAD_SERIALIZED : MPI_THREAD_SINGLE);
       int provided = -1;
-      MPI_SAFE(MPI_Init_thread(argc, argv, required, &provided));
-      switch (provided) {
-      #if (MPI_VERSION >= 2) || defined(MPI_THREAD_SINGLE)
-        case MPI_THREAD_SINGLE: *provided_level = "MPI_THREAD_SINGLE"; break;
-      #endif
-      #if (MPI_VERSION >= 2) || defined(MPI_THREAD_FUNNELED)
-        case MPI_THREAD_FUNNELED: *provided_level = "MPI_THREAD_FUNNELED"; break;
-      #endif
-      #if (MPI_VERSION >= 2) || defined(MPI_THREAD_SERIALIZED)
-        case MPI_THREAD_SERIALIZED: *provided_level = "MPI_THREAD_SERIALIZED"; break;
-      #endif
-      #if (MPI_VERSION >= 2) || defined(MPI_THREAD_MULTIPLE)
-        case MPI_THREAD_MULTIPLE: *provided_level = "MPI_THREAD_MULTIPLE"; break;
-      #endif
-        default: *provided_level = "UNKNOWN VALUE";
+      const char *override = getenv("AMMPI_MPI_THREAD");
+      if (!override) override = getenv("GASNET_MPI_THREAD");
+      if (override) {
+        required = MAX(required,threadstr2int(override));
+      }
+      MPI_SAFE(MPI_Initialized(&initialized));
+      if (initialized) {  /* MPI already init, query current thread support level */
+        MPI_SAFE(MPI_Query_thread(&provided));
+      } else { /* init MPI and request our needed level of thread safety */
+        MPI_SAFE(MPI_Init_thread(argc, argv, required, &provided));
       }
+      *provided_level = threadint2str(provided);
       return (provided >= required);
     }
-  #else
-    *provided_level = "MPI-1 compatibility mode";
-    return 1;
   #endif
 }
 /* ------------------------------------------------------------------------------------ */
