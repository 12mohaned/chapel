============================
Chapel Implementation Status
============================

This file contains a list of unimplemented features and known bugs in
the Chapel implementation.  If you find additional bugs and
unimplemented features, or if you would like to request prioritization
of items in this file, please let us know at chapel_bugs@cray.com or
chapel_info@cray.com.  Please feel encouraged to err on the side of
mailing us with any issues you run into.


-------
General
-------

Unimplemented Features:
- Some error messages continue to be confusing/unhelpful
  Workaround: Please ask us for help interpreting any that you struggle with
- Compiler and runtime errors don't always report useful line numbers
  Workaround: Please ask us for help finding the correct error location

Bugs:
- Identifiers in the generated code may exceed a back-end compiler's limit
- With the PGI back-end compiler, -0.0 floats may not be stored correctly

--------------------------------
Variables, Types and Expressions
--------------------------------

Unimplemented Features:

Bugs:
- Const arrays, records, and fields can currently be modified -- these
  should result in a compiler error
- In some contexts, value expressions can be used as type specifiers


-------
Modules
-------

Unimplemented Features:
- The argv array is unimplemented

Bugs:


---------
Functions
---------

Unimplemented Features:
- Functions as variables and/or arguments to functions
- Array arguments cannot have both their domain and element types queried

Bugs:
- type functions not correctly declared as such do not generate an error
- programs requiring non-linear function resolution may not work properly

----------------------------
Classes, Records, and Unions
----------------------------

Unimplemented Features:
- Constructors are not particularly well-supported
  - chained constructors for derived classes are not implemented
  - constructing nested classes does not work consistently
  Workaround: try using the default constructor and initialize() function
- Multiple inheritance is not supported
- Shadowing base class fields does not work well
- Garbage collection is only supported at a preliminary level
- Type select on unions is not implemented

Bugs:
- Class fields initialized with conditional expressions fail to compile
- Constructors/initializers can't reliably call methods
- Fields may be initialized more than once
- Array fields declared using [<ind> in <domain>] syntax do not work


-----------------------------
Tuples, Ranges, and Iterators
-----------------------------

Unimplemented Features:
- Zipper iteration over var iterators is not yet supported
- Iterators may not be overridden in subclasses

Bugs:
- nested var iterators can cause problems


------------------
Arrays and Domains
------------------

Unimplemented Features:
- Array promotion/forall expressions evaluate to 1D arrays
    e.g., foo(A) where A promotes foo() should result in an array of type:
          [A.domain] foo(A(i)).type but instead results in a 1D array
    e.g., [i in D] foo(i) should result in an array of type: [D] foo(i).type
          but instead results in a 1D array
- Arrays of arrays where the inner arrays vary in size are not supported
- Arrays of sparse subdomains are not implemented
- Strided domains sliced by unstrided domains are not handled correctly
- Sparse domains/arrays are incomplete:
  - can't be sliced nor used to slice dense domains/arrays
  - don't yet support remove methods or the -= operator
  - assignment between sparse domains is not yet implemented
- index(D) bounds checking is not implemented
- subdomain(D) index subset checking is not implemented

Bugs:
- Degenerate arrays with fewer than 0 elements may cause allocation error
- Opaque/associative arrays may be buggy when reallocated
- Constant domains can incorrectly be modified if passed to functions
- Records with array members of recursive types do not work


--------
Generics
--------

Unimplemented Features:
- constructors for generic classes cause problems

Bugs:
- Subclassing uninstantiated generic classes should be prohibited but is not


-------------------------------
Parallelism and Synchronization
-------------------------------

Unimplemented Features:
- Atomic statements are not implemented
- Data parallel concepts that should generate parallelism are run serially
    e.g., forall loops, promoted calls, reductions, scans
- Tasks are not pooled, so a program halts if there are insufficient threads

Bugs:
- globals are not flagged as volatile; causes deadlock for some C compilers
- detupled indices in coforall statements are not privatized
  Workaround: write:
                coforall (i,j) in ... { ... }
              as:
                coforall ij in ... { const (i,j) = ij; ... }

--------------------
Reductions and Scans
--------------------

Unimplemented Features:
- User-defined reductions and scans are not implemented

Bugs:


--------------------------
Locality and Distributions
--------------------------

Unimplemented Features:
- Executing general code using multiple locales is not supported
- Distributed domains/arrays are not yet supported

Bugs:


----------------
Input and Output
----------------

Unimplemented Features:
- format control for the output precision/width of scalar values
  Workaround: see doc/README.format

Bugs:
- read()s of whole arrays are not working
  e.g., read(A);
  Workaround: use a loop and read in the elements one at a time
  e.g., for i in A.domain read(A(i));


-----------------
Standard Library
-----------------

Unimplemented Features:
- on some platforms, math library support may be incomplete based on C support

Bugs:


-----------------
Memory Management
-----------------

Status:

This release includes an initial draft version of a copying garbage
collector.  When it is enabled via the --copy-collect flag, most
objects are allocated onto a small, un-expandable, garbage-collected
heap. This is very preliminary in nature, and should not be used in
most cases. It is expected that in future releases additional support
for automatic memory management will be included in the Chapel
compiler and runtime.

  What is properly garbage collected:
  - Classes with references to them located on the program stack
  - Classes with references to them in records on the stack
  - Classes with references to them in class fields reachable from the stack

  What isn't yet properly garbage collected:
  - Arrays and domains
  - Dynamically allocated array elements
  - Multi-threaded or multi-locale programs
  - Classes whose only references are fields in records that are class fields
  - Strings
