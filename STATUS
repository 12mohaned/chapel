============================
Chapel Implementation Status
============================

This file contains a list of unimplemented features and known bugs in
the Chapel implementation.  If you find additional bugs and
unimplemented features, or if you would like to request prioritization
of items in this file, please let us know at chapel_bugs@cray.com or
chapel_info@cray.com.  Please feel encouraged to err on the side of
mailing us with any issues you run into.


-------
General
-------

Unimplemented Features:
- Some error messages continue to be confusing/unhelpful
  Workaround: Please ask us for help interpreting any that you struggle with
- Compiler and runtime errors don't always report useful line numbers
  Workaround: Please ask us for help finding the correct error location

Bugs:
- Identifiers in the generated code may exceed a back-end compiler's limit
- Using a PGI back-end compiler, float values of -0.0 may not work as expected


--------------------------------
Variables, Types and Expressions
--------------------------------

Unimplemented Features:

Bugs:
- Constant arrays and records can be modified (without error)
- Array types cannot be specified in tuple types or expression contexts


-------
Modules
-------

Unimplemented Features:
- The argv array is unimplemented

Bugs:


---------
Functions
---------

Unimplemented Features:

Bugs:
- Programs requiring non-linear function resolution may not work


----------------------------
Classes, Records, and Unions
----------------------------

Unimplemented Features:
- Multiple inheritance is not supported
- Type select on unions is not implemented
- Garbage collection is not supported

Bugs:
- Constant fields can be modified (without error)
- Record field initializers may be evaluated more than once
- User-defined constructors exhibit occasional bugs


-----------------------------
Tuples, Ranges, and Iterators
-----------------------------

Unimplemented Features:

Bugs:
- Nested var iterators do not work correctly
- The implicit 'setter' argument does not work in var iterators


------------------
Arrays and Domains
------------------

Unimplemented Features:
- Array promotion/forall expressions always evaluate to 1D arrays
    e.g., foo(A) where A promotes foo() should result in an array of type:
          [A.domain] foo(A(i)).type but instead results in a 1D array
    e.g., [i in D] foo(i) should result in an array of type: [D] foo(i).type
          but instead results in a 1D array
- Arrays of arrays where the inner arrays vary in size are not supported
- Strided domains sliced by unstrided domains are not handled correctly
- Sparse domains/arrays are incomplete:
  - Can't be sliced nor used to slice dense domains/arrays
  - Don't yet support remove methods or the -= operator
  - Assignment between sparse domains is not yet implemented
- There are no bounds checks on index types
- There are no subset checks on subdomains

Bugs:
- Constant domains can be modified illegally if passed to functions
- Records with array members of recursive types do not work
- Arrays and domains of different ranks can be zippered serially


--------
Generics
--------

Unimplemented Features:

Bugs:
- Subclassing uninstantiated generic classes should be prohibited but is not


-------------------------------
Parallelism and Synchronization
-------------------------------

Unimplemented Features:
- Atomic statements are not implemented
- Some data-parallel constructs are serialized
  e.g., forall loops, promoted calls, reductions, scans over default arrays

Bugs:


--------------------
Reductions and Scans
--------------------

Unimplemented Features:
- User-defined reductions and scans are not yet implemented

Bugs:


--------------------------
Locality and Distributions
--------------------------

Unimplemented Features:
- On statement var declarations are not yet supported
    e.g., on Locales(1) var x: real;
- Multi-locale distributed domains/arrays are under development

Bugs:


----------------
Input and Output
----------------

Unimplemented Features:
- Format control for the output precision/width of scalar values
  Workaround: see doc/README.format
- Input of whole arrays, e.g., read(A);
  Workaround: use a loop and read in the elements one at a time
    e.g., for i in A.domain do read(A(i));

Bugs:


-----------------
Standard Library
-----------------

Unimplemented Features:
- On some platforms, math library is limited by C support

Bugs:


-----------------
Memory Management
-----------------

Status:

This release includes an initial draft version of a delete-statement
that can be used to delete class instances allocated with 'new'.  In
addition, heap-allocated memory associatived with values such as
arrays, domains, and sync- and single-variables is freed for single
locale programs.  However, this support is a work in progress.
