This file contains an up-to-date list of unimplemented features and
known bugs in the compiler.  This list is not meant to be complete;
the language is still being defined and the set of standard modules is
still being compiled.

Variables, Types and Expressions
================================
  Unimplemented Features
    - Non-ASCII strings
    - Conversions from strings to other primitive types
    - Configuration parameters (config param)
    - Primitive type casts on arrays and sequences
    - Parameter folding of conditional expressions

  Bugs
    - Converting unsigned integers to complex
    - Unreliable const assignment error detection
    - Real literal initizalizer for real(32) type
    - Allow use before def of globals
    - Parameter folding on bools and uint<->int
       - true + true ==> true instead of 2
    - Using type aliases across modules
    - Using parameters and constants across modules

Modules
=======
  Unimplemented Features
    - The argv sequence
    - Accessing variables via explicit names, e.g., mod.x
    - Using modules not explicitly passed to the compiler

  Bugs
    - Using type aliases across modules
    - Using parameters and constants across modules

Functions
=========
  Unimplemented Features
    - Formal arguments in a tuple
    - Intents
    - Functions as variables and/or arguments to functions
    - Formal arguments of tuple type must match actual arguments exactly
    - Promotion over variable and setter functions does not work
    - s(p)(r) = 0  where s, p, and r are sequences of integers

  Bugs
    - More visible nested functions are not more specific
    - Return statements in type select statements
Future (deitz) [Error matching program output for functions/deitz/test_default_type]

Classes, Records, and Unions
============================
  Unimplemented Features
    - Nested classes and records
    - Chained constructor calls for derived classes
    - Shadowing base class fields
    - Inheriting from multiple classes
    - Garbage collection
    - Anonymous record literals
    - Type select on unions
    - Assignment between classes and records

  Bugs
    - Class field of array type specified indirectly via a type alias
    - Iterator methods in classes
    - Class field initialized with conditional expression

Tuples, Sequences, and Iterators
================================
  Unimplemented Features
    - Ignoring values via underscores
    - Implicit reductions in conditional, while, and select statements
    - The transpose, spread, and reshape functions
    - Indexing by indefinite arithmetic sequences
    - Zipper iteration bounds matching

  Bugs
    - Iterator methods in classes
    - Iterator with tuple return type such as rank*int
    - Iterators with parameter arguments
    - Iterators with parameter locals
    - Iterators with intents
    - Recursive iterators
    - Anonymous domain in iterator

Arrays and Domains
==================
  Unimplemented Features
    - Sparse arrays and domains
    - Opaque arrays and domains
    - Enumerated arrays and domains
    - Arrays of arrays
    - Index type bounds checking
    - Subdomains
    - Array promotion returns sequences

  Bugs
    - Indefinite domains of explicit tuple type
       - var td: domain((int, int))
    - Element-wise negation of components of the element type of arrays
       - var A: [1..4] complex; A.im = -A.im;
    - Array of sync/single variables
    
Generics
========

  Bugs
    - Generic functions without return statements in paths that will be
       eliminated via parameter folding
    - Type aliases in generic class defined by instantiated types

Parallelism and Synchronization
===============================
  Unimplemented Features
    - Atomic statements
    - Serial statements
    - User-defined reductions and scans
    - Forall loops and ordered forall loops are serialized
    - Reductions and scans are serialized
    - Array and sequence operations and assignment are serialized

  Bugs
    - Arrays of synchronization variables
    - Synchronization variables in the expression of a conditional statement
    - Begin blocks that use sync/single variables that are locals

Locality and Distributions
==========================
  Unimplemented Features
    - Locales
    - Distributions

Standard Library
================
  Bugs
    - log2(n):int != log2(n:int)

Miscellaneous
=============
  Bugs
    - error messages are incomplete and/or inaccurate
    - help message printing config vars and their values
