============================
Chapel Implementation Status
============================

This file contains a list of unimplemented features and known bugs in
the Chapel implementation.  If you find additional bugs and
unimplemented features, or if you would like to request prioritization
of items in this file, please let us know at chapel_bugs@cray.com or
chapel_info@cray.com.  Please feel encouraged to err on the side of
mailing us with any issues you run into.


-------
General
-------

Unimplemented Features:
- Some error messages continue to be confusing/unhelpful
  Workaround: Please ask us for help interpreting any that you struggle with
- Compiler and runtime errors don't always report useful line numbers
  Workaround: Please ask us for help finding the correct error location

Bugs:
- Identifiers in the generated code may exceed a back-end compiler's limit
- Using a PGI back-end compiler, float values of -0.0 may not work as expected


--------------------------------
Variables, Types and Expressions
--------------------------------

Unimplemented Features:

Bugs:
- Const arrays, records, and fields can currently be modified -- these
  should result in a compiler error


-------
Modules
-------

Unimplemented Features:
- The argv array is unimplemented

Bugs:


---------
Functions
---------

Unimplemented Features:
- Functions as variables and/or arguments to functions
- Array arguments cannot have both their domain and element types queried

Bugs:
- programs requiring non-linear function resolution may not work properly
- param functions with multiple return statements may not work well


----------------------------
Classes, Records, and Unions
----------------------------

Unimplemented Features:
- Multiple inheritance is not supported
- Type select on unions is not implemented
- Garbage collection is only supported at a preliminary level (see below)

Bugs:
- const fields can be assigned multiple times in constructors
- record field initializers may incorrectly be evaluated more than once


-----------------------------
Tuples, Ranges, and Iterators
-----------------------------

Unimplemented Features:
- Iterators may not be overridden in subclasses

Bugs:
- Nested var iterators do not work correctly
- Zippered iteration over var iterators does not work correctly
- Tuples of sync variables may not work for $CHPL_COMM == gasnet


------------------
Arrays and Domains
------------------

Unimplemented Features:
- Array promotion/forall expressions always evaluate to 1D arrays
    e.g., foo(A) where A promotes foo() should result in an array of type:
          [A.domain] foo(A(i)).type but instead results in a 1D array
    e.g., [i in D] foo(i) should result in an array of type: [D] foo(i).type
          but instead results in a 1D array
- Arrays of arrays where the inner arrays vary in size are not supported
- Arrays of sparse domains are not implemented
- Strided domains sliced by unstrided domains are not handled correctly
- Sparse domains/arrays are incomplete:
  - can't be sliced nor used to slice dense domains/arrays
  - don't yet support remove methods or the -= operator
  - assignment between sparse domains is not yet implemented
- index(D) bounds checking is not implemented
- subdomain(D) index subset checking is not implemented

Bugs:
- Constant domains can be modified illegally if passed to functions
- Records with array members of recursive types do not work


--------
Generics
--------

Unimplemented Features:
- User constructors for generic classes are not well-supported
  Workaround: try using the default constructor and initialize() function

Bugs:
- Subclassing uninstantiated generic classes should be prohibited but is not


-------------------------------
Parallelism and Synchronization
-------------------------------

Unimplemented Features:
- Atomic statements are not implemented
- Data parallel concepts that should generate parallelism are run serially
  e.g., forall loops, promoted calls, reductions, scans

Bugs:


--------------------
Reductions and Scans
--------------------

Unimplemented Features:
- User-defined reductions and scans are not yet implemented

Bugs:


--------------------------
Locality and Distributions
--------------------------

Unimplemented Features:
- On statement var declarations are not yet supported
    e.g., on Locales(1) var x: real;
- Multi-locale distributed domains/arrays are not yet supported

Bugs:


----------------
Input and Output
----------------

Unimplemented Features:
- format control for the output precision/width of scalar values
  Workaround: see doc/README.format

Bugs:
- read()s of whole arrays are not working
    e.g., read(A);
  Workaround: use a loop and read in the elements one at a time
    e.g., for i in A.domain read(A(i));


-----------------
Standard Library
-----------------

Unimplemented Features:
- on some platforms, math library support may be incomplete based on C support

Bugs:


-----------------
Memory Management
-----------------

Status:

This release includes an initial draft version of a copying garbage
collector.  When it is enabled via the --copy-collect flag, most
objects are allocated onto a small, un-expandable, garbage-collected
heap. This is very preliminary in nature, and should not be used in
most cases. It is expected that in future releases additional support
for automatic memory management will be included in the Chapel
compiler and runtime.

  What is properly garbage collected:
  - Classes with references to them located on the program stack
  - Classes with references to them in records on the stack
  - Classes with references to them in class fields reachable from the stack

  What isn't yet properly garbage collected:
  - Arrays and domains
  - Dynamically allocated array elements
  - Multi-threaded or multi-locale programs
  - Classes whose only references are fields in records that are class fields
  - Strings
